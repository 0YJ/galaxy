webpackJsonp([1],{

/***/ 10:
/*!********************************************!*\
  !*** ./galaxy/scripts/mvc/ui/ui-select.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A plugin for initializing select2 input items.\n * Make sure the select2 library itself is loaded beforehand.\n * Also the element to which select2 will be appended has to\n * be created before select2 initialization (and passed as option).\n */\nvar View = Backbone.View.extend({\n    // options\n    optionsDefault: {\n        css: \"\",\n        placeholder: \"No data available\",\n        data: [],\n        value: null,\n        multiple: false,\n        minimumInputLength: 0,\n        // example format of initial data: \"id:name,55:anotherrole@role.com,27:role@role.com\"\n        initialData: \"\"\n    },\n\n    // initialize\n    initialize: function initialize(options) {\n        // configure options\n        this.options = _utils2.default.merge(options, this.optionsDefault);\n\n        // create new element\n        this.setElement(this._template(this.options));\n\n        // check if container exists\n        if (!this.options.container) {\n            console.log(\"ui-select::initialize() : container not specified.\");\n            return;\n        }\n\n        // add to dom\n        this.options.container.append(this.$el);\n\n        // link selection dictionary\n        this.select_data = this.options.data;\n\n        // refresh\n        this._refresh();\n\n        if (!this.options.multiple) {\n            // initial value\n            if (this.options.value) {\n                this._setValue(this.options.value);\n            }\n\n            // add change event\n            var self = this;\n            if (this.options.onchange) {\n                this.$el.on(\"change\", function () {\n                    self.options.onchange(self.value());\n                });\n            }\n        }\n    },\n\n    // value\n    value: function value(new_value) {\n        // get current id/value\n        var before = this._getValue();\n\n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this._setValue(new_value);\n        }\n\n        // get current id/value\n        var after = this._getValue();\n\n        // fire onchange\n        if (after != before && this.options.onchange) {\n            this.options.onchange(after);\n        }\n\n        // return current value\n        return after;\n    },\n\n    // label\n    text: function text() {\n        return this.$el.select2(\"data\").text;\n    },\n\n    // disabled\n    disabled: function disabled() {\n        return !this.$el.select2(\"enable\");\n    },\n\n    // enable\n    enable: function enable() {\n        this.$el.select2(\"enable\", true);\n    },\n\n    // disable\n    disable: function disable() {\n        this.$el.select2(\"enable\", false);\n    },\n\n    // add\n    add: function add(options) {\n        // add options\n        this.select_data.push({\n            id: options.id,\n            text: options.text\n        });\n\n        // refresh\n        this._refresh();\n    },\n\n    // remove\n    del: function del(id) {\n        // search option\n        var index = this._getIndex(id);\n\n        // check if found\n        if (index != -1) {\n            // remove options\n            this.select_data.splice(index, 1);\n\n            // refresh\n            this._refresh();\n        }\n    },\n\n    // remove\n    remove: function remove() {\n        this.$el.select2(\"destroy\");\n    },\n\n    // update\n    update: function update(options) {\n        // copy options\n        this.select_data = [];\n        for (var key in options.data) {\n            this.select_data.push(options.data[key]);\n        }\n\n        // refresh\n        this._refresh();\n    },\n\n    // refresh\n    _refresh: function _refresh() {\n        // add select2 data based on type of input\n        if (!this.options.multiple) {\n            var selected = this._getValue();\n            var select_opt = {\n                data: this.select_data,\n                containerCssClass: this.options.css,\n                placeholder: this.options.placeholder,\n                dropdownAutoWidth: true\n            };\n            this.$el.select2(select_opt);\n            // select previous value (if exists)\n            this._setValue(selected);\n        } else {\n            var select_opt = {\n                multiple: this.options.multiple,\n                containerCssClass: this.options.css,\n                placeholder: this.options.placeholder,\n                minimumInputLength: this.options.minimumInputLength,\n                ajax: this.options.ajax,\n                dropdownCssClass: this.options.dropdownCssClass,\n                escapeMarkup: this.options.escapeMarkup,\n                formatResult: this.options.formatResult,\n                formatSelection: this.options.formatSelection,\n                initSelection: this.options.initSelection,\n                initialData: this.options.initialData\n            };\n            this.$el.select2(select_opt);\n        }\n    },\n\n    // get index\n    _getIndex: function _getIndex(value) {\n        // returns the index of the searched value\n        _.findIndex(this.select_data, { id: value });\n    },\n\n    // get value\n    _getValue: function _getValue() {\n        return this.$el.select2(\"val\");\n    },\n\n    // set value\n    _setValue: function _setValue(new_value) {\n        var index = this._getIndex(new_value);\n        if (index == -1) {\n            if (this.select_data.length > 0) {\n                new_value = this.select_data[0].id;\n            }\n        }\n        this.$el.select2(\"val\", new_value);\n    },\n\n    // element\n    _template: function _template(options) {\n        return \"<input type=\\\"hidden\\\" value=\\\"\" + this.options.initialData + \"\\\"/>\";\n    }\n}); // dependencies\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),

/***/ 126:
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-connector.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction Connector(handle1, handle2) {\n    this.canvas = null;\n    this.dragging = false;\n    this.inner_color = \"#FFFFFF\";\n    this.outer_color = \"#D8B365\";\n    if (handle1 && handle2) {\n        this.connect(handle1, handle2);\n    }\n}\n$.extend(Connector.prototype, {\n    connect: function connect(t1, t2) {\n        this.handle1 = t1;\n        if (this.handle1) {\n            this.handle1.connect(this);\n        }\n        this.handle2 = t2;\n        if (this.handle2) {\n            this.handle2.connect(this);\n        }\n    },\n    destroy: function destroy() {\n        if (this.handle1) {\n            this.handle1.disconnect(this);\n        }\n        if (this.handle2) {\n            this.handle2.disconnect(this);\n        }\n        $(this.canvas).remove();\n    },\n    destroyIfInvalid: function destroyIfInvalid() {\n        if (this.handle1 && this.handle2 && !this.handle2.attachable(this.handle1)) {\n            this.destroy();\n        }\n    },\n    redraw: function redraw() {\n        var canvas_container = $(\"#canvas-container\");\n        if (!this.canvas) {\n            this.canvas = document.createElement(\"canvas\");\n            canvas_container.append($(this.canvas));\n            if (this.dragging) {\n                this.canvas.style.zIndex = \"300\";\n            }\n        }\n        var relativeLeft = function relativeLeft(e) {\n            return $(e).offset().left - canvas_container.offset().left;\n        };\n        var relativeTop = function relativeTop(e) {\n            return $(e).offset().top - canvas_container.offset().top;\n        };\n        if (!this.handle1 || !this.handle2) {\n            return;\n        }\n        // Find the position of each handle\n        var start_x = relativeLeft(this.handle1.element) + 5;\n        var start_y = relativeTop(this.handle1.element) + 5;\n        var end_x = relativeLeft(this.handle2.element) + 5;\n        var end_y = relativeTop(this.handle2.element) + 5;\n        // Calculate canvas area\n        var canvas_extra = 100;\n        var canvas_min_x = Math.min(start_x, end_x);\n        var canvas_max_x = Math.max(start_x, end_x);\n        var canvas_min_y = Math.min(start_y, end_y);\n        var canvas_max_y = Math.max(start_y, end_y);\n        var cp_shift = Math.min(Math.max(Math.abs(canvas_max_y - canvas_min_y) / 2, 100), 300);\n        var canvas_left = canvas_min_x - canvas_extra;\n        var canvas_top = canvas_min_y - canvas_extra;\n        var canvas_width = canvas_max_x - canvas_min_x + 2 * canvas_extra;\n        var canvas_height = canvas_max_y - canvas_min_y + 2 * canvas_extra;\n        // Place the canvas\n        this.canvas.style.left = canvas_left + \"px\";\n        this.canvas.style.top = canvas_top + \"px\";\n        this.canvas.setAttribute(\"width\", canvas_width);\n        this.canvas.setAttribute(\"height\", canvas_height);\n        // Adjust points to be relative to the canvas\n        start_x -= canvas_left;\n        start_y -= canvas_top;\n        end_x -= canvas_left;\n        end_y -= canvas_top;\n\n        // Draw the line\n\n        var c = this.canvas.getContext(\"2d\");\n\n        var start_offsets = null;\n        var end_offsets = null;\n        var num_offsets = 1;\n        if (this.handle1 && this.handle1.isMappedOver()) {\n            var start_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var start_offsets = [0];\n        }\n        if (this.handle2 && this.handle2.isMappedOver()) {\n            var end_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var end_offsets = [0];\n        }\n        var connector = this;\n        for (var i = 0; i < num_offsets; i++) {\n            var inner_width = 5;\n            var outer_width = 7;\n            if (start_offsets.length > 1 || end_offsets.length > 1) {\n                // We have a multi-run, using many lines, make them small.\n                inner_width = 1;\n                outer_width = 3;\n            }\n            connector.draw_outlined_curve(start_x, start_y, end_x, end_y, cp_shift, inner_width, outer_width, start_offsets[i % start_offsets.length], end_offsets[i % end_offsets.length]);\n        }\n    },\n    draw_outlined_curve: function draw_outlined_curve(start_x, start_y, end_x, end_y, cp_shift, inner_width, outer_width, offset_start, offset_end) {\n        var offset_start = offset_start || 0;\n        var offset_end = offset_end || 0;\n        var c = this.canvas.getContext(\"2d\");\n        c.lineCap = \"round\";\n        c.strokeStyle = this.outer_color;\n        c.lineWidth = outer_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(start_x + cp_shift, start_y + offset_start, end_x - cp_shift, end_y + offset_end, end_x, end_y + offset_end);\n        c.stroke();\n        // Inner line\n        c.strokeStyle = this.inner_color;\n        c.lineWidth = inner_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(start_x + cp_shift, start_y + offset_start, end_x - cp_shift, end_y + offset_end, end_x, end_y + offset_end);\n        c.stroke();\n    }\n});\nexports.default = Connector;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///126\n");

/***/ }),

/***/ 127:
/*!************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-dataset-view.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LibraryDatasetView = Backbone.View.extend({\n    el: \"#center\",\n\n    model: null,\n\n    options: {},\n\n    defaults: {\n        edit_mode: false\n    },\n\n    events: {\n        \"click .toolbtn_modify_dataset\": \"enableModification\",\n        \"click .toolbtn_cancel_modifications\": \"render\",\n        \"click .toolbtn-download-dataset\": \"downloadDataset\",\n        \"click .toolbtn-import-dataset\": \"importIntoHistory\",\n        \"click .copy-link-to-clipboard\": \"copyToClipboard\",\n        \"click .make-private\": \"makeDatasetPrivate\",\n        \"click .remove-restrictions\": \"removeDatasetRestrictions\",\n        \"click .toolbtn_save_permissions\": \"savePermissions\",\n        \"click .toolbtn_save_modifications\": \"saveModifications\"\n    },\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description: \"This system will try to detect the file type automatically.\" + \" If your file is not detected properly as one of the known formats,\" + \" it most likely means that it has some format problems (e.g., different\" + \" number of columns on different rows). You can still coerce the system\" + \" to set your data to the format you think it should be.\" + \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function initialize(options) {\n        this.options = _.extend(this.options, options);\n        this.fetchExtAndGenomes();\n        if (this.options.id) {\n            this.fetchDataset();\n        }\n    },\n\n    fetchDataset: function fetchDataset(options) {\n        this.options = _.extend(this.options, options);\n        this.model = new _libraryModel2.default.Item({\n            id: this.options.id\n        });\n        var self = this;\n        this.model.fetch({\n            success: function success() {\n                if (self.options.show_permissions) {\n                    self.showPermissions();\n                } else if (self.options.show_version) {\n                    self.fetchVersion();\n                } else {\n                    self.render();\n                }\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg + \" Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    _toastr2.default.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    render: function render(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n        var template = this.templateDataset();\n        this.$el.html(template({ item: this.model }));\n        $(\".peek\").html(this.model.get(\"peek\"));\n        $(\"#center [data-toggle]\").tooltip();\n    },\n\n    fetchVersion: function fetchVersion(options) {\n        this.options = _.extend(this.options, options);\n        var self = this;\n        if (!this.options.ldda_id) {\n            this.render();\n            _toastr2.default.error(\"Library dataset version requested but no id provided.\");\n        } else {\n            this.ldda = new _libraryModel2.default.Ldda({\n                id: this.options.ldda_id\n            });\n            this.ldda.url = this.ldda.urlRoot + this.model.id + \"/versions/\" + this.ldda.id;\n            this.ldda.fetch({\n                success: function success() {\n                    self.renderVersion();\n                },\n                error: function error(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    renderVersion: function renderVersion() {\n        $(\".tooltip\").remove();\n        var template = this.templateVersion();\n        this.$el.html(template({ item: this.model, ldda: this.ldda }));\n        $(\".peek\").html(this.ldda.get(\"peek\"));\n    },\n\n    enableModification: function enableModification() {\n        $(\".tooltip\").remove();\n        var template = this.templateModifyDataset();\n        this.$el.html(template({ item: this.model }));\n        this.renderSelectBoxes({\n            genome_build: this.model.get(\"genome_build\"),\n            file_ext: this.model.get(\"file_ext\")\n        });\n        $(\".peek\").html(this.model.get(\"peek\"));\n        $(\"#center [data-toggle]\").tooltip();\n    },\n\n    downloadDataset: function downloadDataset() {\n        var url = Galaxy.root + \"api/libraries/datasets/download/uncompressed\";\n        var data = { ld_ids: this.id };\n        this.processDownload(url, data);\n    },\n\n    processDownload: function processDownload(url, data, method) {\n        //url and data options required\n        if (url && data) {\n            //data can be string of parameters or array/object\n            data = typeof data == \"string\" ? data : $.param(data);\n            //split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function () {\n                var pair = this.split(\"=\");\n                inputs += \"<input type=\\\"hidden\\\" name=\\\"\" + pair[0] + \"\\\" value=\\\"\" + pair[1] + \"\\\" />\";\n            });\n            //send request\n            $(\"<form action=\\\"\" + url + \"\\\" method=\\\"\" + (method || \"post\") + \"\\\">\" + inputs + \"</form>\").appendTo(\"body\").submit().remove();\n\n            _toastr2.default.info(\"Your download will begin soon.\");\n        }\n    },\n\n    importIntoHistory: function importIntoHistory() {\n        this.refreshUserHistoriesList(function (self) {\n            var template = self.templateBulkImportInModal();\n            self.modal = Galaxy.modal;\n            self.modal.show({\n                closing_events: true,\n                title: (0, _localization2.default)(\"Import into History\"),\n                body: template({ histories: self.histories.models }),\n                buttons: {\n                    Import: function Import() {\n                        self.importCurrentIntoHistory();\n                    },\n                    Close: function Close() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        });\n    },\n\n    refreshUserHistoriesList: function refreshUserHistoriesList(callback) {\n        var self = this;\n        this.histories = new _libraryModel2.default.GalaxyHistories();\n        this.histories.fetch({\n            success: function success(histories) {\n                if (histories.length === 0) {\n                    _toastr2.default.warning(\"You have to create history first. Click this to do so.\", \"\", {\n                        onclick: function onclick() {\n                            window.location = Galaxy.root;\n                        }\n                    });\n                } else {\n                    callback(self);\n                }\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    importCurrentIntoHistory: function importCurrentIntoHistory() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        var self = this;\n        if (new_history_name !== \"\") {\n            $.post(Galaxy.root + \"api/histories\", {\n                name: new_history_name\n            }).done(function (new_history) {\n                self.processImportToHistory(new_history.id);\n            }).fail(function (xhr, status, error) {\n                _toastr2.default.error(\"An error occurred.\");\n            }).always(function () {\n                self.modal.enableButton(\"Import\");\n            });\n        } else {\n            var history_id = $(this.modal.$el).find(\"select[name=dataset_import_single] option:selected\").val();\n            this.processImportToHistory(history_id);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    processImportToHistory: function processImportToHistory(history_id) {\n        var historyItem = new _libraryModel2.default.HistoryItem();\n        historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(Galaxy.root + \"history/set_as_current?id=\" + history_id);\n        // save the dataset into selected history\n        historyItem.save({ content: this.id, source: \"library\" }, {\n            success: function success() {\n                Galaxy.modal.hide();\n                _toastr2.default.success(\"Dataset imported. Click this to start analyzing it.\", \"\", {\n                    onclick: function onclick() {\n                        window.location = Galaxy.root;\n                    }\n                });\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(\"Dataset not imported. \" + response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occured. Dataset not imported. Please try again.\");\n                }\n            }\n        });\n    },\n\n    showPermissions: function showPermissions(options) {\n        var template = this.templateDatasetPermissions();\n        var self = this;\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n        if (this.options.fetched_permissions !== undefined) {\n            if (this.options.fetched_permissions.access_dataset_roles.length === 0) {\n                this.model.set({ is_unrestricted: true });\n            } else {\n                this.model.set({ is_unrestricted: false });\n            }\n        }\n        this.$el.html(template({\n            item: this.model,\n            is_admin: Galaxy.config.is_admin_user\n        }));\n        $.get(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?scope=current\").done(function (fetched_permissions) {\n            self.prepareSelectBoxes({\n                fetched_permissions: fetched_permissions,\n                is_admin: Galaxy.config.is_admin_user\n            });\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to fetch dataset permissions.\");\n        });\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    _serializeRoles: function _serializeRoles(role_list) {\n        var selected_roles = [];\n        for (var i = 0; i < role_list.length; i++) {\n            // Replace the : and , in role's name since these are select2 separators for initialData\n            selected_roles.push(role_list[i][1] + \":\" + role_list[i][0].replace(\":\", \" \").replace(\",\", \" &\"));\n        }\n        return selected_roles;\n    },\n\n    prepareSelectBoxes: function prepareSelectBoxes(options) {\n        this.options = _.extend(this.options, options);\n        this.accessSelectObject = new _uiSelect2.default.View(this._generate_select_options({\n            selector: \"access_perm\",\n            initialData: this._serializeRoles(this.options.fetched_permissions.access_dataset_roles)\n        }));\n        this.modifySelectObject = new _uiSelect2.default.View(this._generate_select_options({\n            selector: \"modify_perm\",\n            initialData: this._serializeRoles(this.options.fetched_permissions.modify_item_roles)\n        }));\n        this.manageSelectObject = new _uiSelect2.default.View(this._generate_select_options({\n            selector: \"manage_perm\",\n            initialData: this._serializeRoles(this.options.fetched_permissions.manage_dataset_roles)\n        }));\n    },\n\n    _generate_select_options: function _generate_select_options(options) {\n        var select_options = {\n            minimumInputLength: 0,\n            multiple: true,\n            placeholder: \"Click to select a role\",\n            formatResult: function roleFormatResult(role) {\n                return role.name + \" type: \" + role.type;\n            },\n            formatSelection: function roleFormatSelection(role) {\n                return role.name;\n            },\n            initSelection: function initSelection(element, callback) {\n                // the input tag has a value attribute preloaded that points to a preselected role's id\n                // this function resolves that id attribute to an object that select2 can render\n                // using its formatResult renderer - that way the role name is shown preselected\n                var data = [];\n                $(element.val().split(\",\")).each(function () {\n                    var item = this.split(\":\");\n                    data.push({\n                        id: item[0],\n                        name: item[1]\n                    });\n                });\n                callback(data);\n            },\n            dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n        };\n        select_options.container = this.$el.find(\"#\" + options.selector);\n        select_options.css = options.selector;\n        select_options.initialData = options.initialData.join(\",\");\n        select_options.ajax = {\n            url: Galaxy.root + \"api/libraries/datasets/\" + this.id + \"/permissions?scope=available\",\n            dataType: \"json\",\n            quietMillis: 100,\n            data: function data(term, page) {\n                // page is the one-based page number tracked by Select2\n                return {\n                    q: term, //search term\n                    page_limit: 10, // page size, should be same as used in 'more' variable below\n                    page: page // page number\n                };\n            },\n            results: function results(data, page) {\n                var more = page * 10 < data.total; // whether or not there are more results available\n                // notice we return the value of more so Select2 knows if more results can be loaded\n                return { results: data.roles, more: more };\n            }\n        };\n        return select_options;\n    },\n\n    /**\n     * Save the changes made to the library dataset.\n     */\n    saveModifications: function saveModifications(options) {\n        var is_changed = false;\n        var ld = this.model;\n        var new_name = this.$el.find(\".input_dataset_name\").val();\n        if (typeof new_name !== \"undefined\" && new_name !== ld.get(\"name\")) {\n            if (new_name.length > 0) {\n                ld.set(\"name\", new_name);\n                is_changed = true;\n            } else {\n                _toastr2.default.warning(\"Library dataset name has to be at least 1 character long.\");\n                return;\n            }\n        }\n        var new_info = this.$el.find(\".input_dataset_misc_info\").val();\n        if (typeof new_info !== \"undefined\" && new_info !== ld.get(\"misc_info\")) {\n            ld.set(\"misc_info\", new_info);\n            is_changed = true;\n        }\n        var new_genome_build = this.select_genome.$el.select2(\"data\").id;\n        if (typeof new_genome_build !== \"undefined\" && new_genome_build !== ld.get(\"genome_build\")) {\n            ld.set(\"genome_build\", new_genome_build);\n            is_changed = true;\n        }\n        var new_ext = this.select_extension.$el.select2(\"data\").id;\n        if (typeof new_ext !== \"undefined\" && new_ext !== ld.get(\"file_ext\")) {\n            ld.set(\"file_ext\", new_ext);\n            is_changed = true;\n        }\n        var dataset_view = this;\n        if (is_changed) {\n            ld.save(null, {\n                patch: true,\n                success: function success(ld) {\n                    dataset_view.render();\n                    _toastr2.default.success(\"Changes to library dataset saved.\");\n                },\n                error: function error(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occured while attempting to update the library dataset.\");\n                    }\n                }\n            });\n        } else {\n            dataset_view.render();\n            _toastr2.default.info(\"Nothing has changed.\");\n        }\n    },\n\n    copyToClipboard: function copyToClipboard(e) {\n        e.preventDefault();\n        var href = Backbone.history.location.href;\n        if (href.lastIndexOf(\"/permissions\") !== -1) {\n            href = href.substr(0, href.lastIndexOf(\"/permissions\"));\n        }\n        window.prompt(\"Copy to clipboard: Ctrl+C, Enter\", href);\n    },\n\n    makeDatasetPrivate: function makeDatasetPrivate() {\n        var self = this;\n        $.post(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?action=make_private\").done(function (fetched_permissions) {\n            self.model.set({ is_unrestricted: false });\n            self.showPermissions({\n                fetched_permissions: fetched_permissions\n            });\n            _toastr2.default.success(\"The dataset is now private to you.\");\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to make dataset private.\");\n        });\n    },\n\n    removeDatasetRestrictions: function removeDatasetRestrictions() {\n        var self = this;\n        $.post(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?action=remove_restrictions\").done(function (fetched_permissions) {\n            self.model.set({ is_unrestricted: true });\n            self.showPermissions({\n                fetched_permissions: fetched_permissions\n            });\n            _toastr2.default.success(\"Access to this dataset is now unrestricted.\");\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to make dataset unrestricted.\");\n        });\n    },\n\n    /**\n     * Extract the role ids from Select2 elements's 'data'\n     */\n    _extractIds: function _extractIds(roles_list) {\n        var ids_list = [];\n        for (var i = roles_list.length - 1; i >= 0; i--) {\n            ids_list.push(roles_list[i].id);\n        }\n        return ids_list;\n    },\n\n    /**\n     * Save the permissions for roles entered in the select boxes.\n     */\n    savePermissions: function savePermissions(event) {\n        var self = this;\n        var access_ids = this._extractIds(this.accessSelectObject.$el.select2(\"data\"));\n        var manage_ids = this._extractIds(this.manageSelectObject.$el.select2(\"data\"));\n        var modify_ids = this._extractIds(this.modifySelectObject.$el.select2(\"data\"));\n        $.post(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?action=set_permissions\", {\n            \"access_ids[]\": access_ids,\n            \"manage_ids[]\": manage_ids,\n            \"modify_ids[]\": modify_ids\n        }).done(function (fetched_permissions) {\n            self.showPermissions({\n                fetched_permissions: fetched_permissions\n            });\n            _toastr2.default.success(\"Permissions saved.\");\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to set dataset permissions.\");\n        });\n    },\n\n    /**\n     * If needed request all extensions and/or genomes from Galaxy\n     * and save them in sorted arrays.\n     */\n    fetchExtAndGenomes: function fetchExtAndGenomes() {\n        var self = this;\n        if (this.list_genomes.length == 0) {\n            _utils2.default.get({\n                url: Galaxy.root + \"api/datatypes?extension_only=False\",\n                success: function success(datatypes) {\n                    for (var key in datatypes) {\n                        self.list_extensions.push({\n                            id: datatypes[key].extension,\n                            text: datatypes[key].extension,\n                            description: datatypes[key].description,\n                            description_url: datatypes[key].description_url\n                        });\n                    }\n                    self.list_extensions.sort(function (a, b) {\n                        return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                    });\n                    self.list_extensions.unshift(self.auto);\n                }\n            });\n        }\n        if (this.list_extensions.length == 0) {\n            _utils2.default.get({\n                url: Galaxy.root + \"api/genomes\",\n                success: function success(genomes) {\n                    for (var key in genomes) {\n                        self.list_genomes.push({\n                            id: genomes[key][1],\n                            text: genomes[key][0]\n                        });\n                    }\n                    self.list_genomes.sort(function (a, b) {\n                        return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                    });\n                }\n            });\n        }\n    },\n\n    renderSelectBoxes: function renderSelectBoxes(options) {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        // TODO switch to common resources:\n        // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n        var self = this;\n        var current_genome = \"?\";\n        var current_ext = \"auto\";\n        if (typeof options !== \"undefined\") {\n            if (typeof options.genome_build !== \"undefined\") {\n                current_genome = options.genome_build;\n            }\n            if (typeof options.file_ext !== \"undefined\") {\n                current_ext = options.file_ext;\n            }\n        }\n        this.select_genome = new _uiSelect2.default.View({\n            css: \"dataset-genome-select\",\n            data: self.list_genomes,\n            container: self.$el.find(\"#dataset_genome_select\"),\n            value: current_genome\n        });\n        this.select_extension = new _uiSelect2.default.View({\n            css: \"dataset-extension-select\",\n            data: self.list_extensions,\n            container: self.$el.find(\"#dataset_extension_select\"),\n            value: current_ext\n        });\n    },\n\n    templateDataset: function templateDataset() {\n        return _.template([\n        // CONTAINER START\n        '<div class=\"library_style_container\">', '<div id=\"library_toolbar\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Download dataset\" class=\"btn btn-default toolbtn-download-dataset primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-download\"></span>', \"&nbsp;Download\", \"</button>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import dataset into history\" class=\"btn btn-default toolbtn-import-dataset primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-book\"></span>', \"&nbsp;to History\", \"</button>\", '<% if (item.get(\"can_user_modify\")) { %>', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Modify library item\" class=\"btn btn-default toolbtn_modify_dataset primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-pencil\"></span>', \"&nbsp;Modify\", \"</button>\", \"<% } %>\", '<% if (item.get(\"can_user_manage\")) { %>', '<a href=\"#folders/<%- item.get(\"folder_id\") %>/datasets/<%- item.id %>/permissions\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Manage permissions\" class=\"btn btn-default toolbtn_change_permissions primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-group\"></span>', \"&nbsp;Permissions\", \"</button>\", \"</a>\", \"<% } %>\", \"</div>\",\n\n        // BREADCRUMBS\n        '<ol class=\"breadcrumb\">', '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>', '<% _.each(item.get(\"full_path\"), function(path_item) { %>', \"<% if (path_item[0] != item.id) { %>\", '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ', \"<% } else { %>\", '<li class=\"active\"><span title=\"You are here\"><%- path_item[1] %></span></li>', \"<% } %>\", \"<% }); %>\", \"</ol>\", '<% if (item.get(\"is_unrestricted\")) { %>', \"<div>\", 'This dataset is unrestricted so everybody with the link can access it. Just share <span class=\"copy-link-to-clipboard\"><a href=\"\"a>this page</a></span>.', \"</div>\", \"<% } %>\",\n\n        // TABLE START\n        '<div class=\"dataset_table\">', '<table class=\"grid table table-striped table-condensed\">', \"<tr>\", '<th class=\"dataset-first-column\" scope=\"row\" id=\"id_row\" data-id=\"<%= _.escape(item.get(\"ldda_id\")) %>\">Name</th>', '<td><%= _.escape(item.get(\"name\")) %></td>', \"</tr>\", '<% if (item.get(\"file_ext\")) { %>', \"<tr>\", '<th scope=\"row\">Data type</th>', '<td><%= _.escape(item.get(\"file_ext\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"genome_build\")) { %>', \"<tr>\", '<th scope=\"row\">Genome build</th>', '<td><%= _.escape(item.get(\"genome_build\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"file_size\")) { %>', \"<tr>\", '<th scope=\"row\">Size</th>', '<td><%= _.escape(item.get(\"file_size\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"date_uploaded\")) { %>', \"<tr>\", '<th scope=\"row\">Date uploaded (UTC)</th>', '<td><%= _.escape(item.get(\"date_uploaded\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"uploaded_by\")) { %>', \"<tr>\", '<th scope=\"row\">Uploaded by</th>', '<td><%= _.escape(item.get(\"uploaded_by\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"metadata_data_lines\")) { %>', \"<tr>\", '<th scope=\"row\">Data Lines</th>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_data_lines\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"metadata_comment_lines\")) { %>', \"<tr>\", '<th scope=\"row\">Comment Lines</th>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_comment_lines\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"metadata_columns\")) { %>', \"<tr>\", '<th scope=\"row\">Number of Columns</th>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_columns\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"metadata_column_types\")) { %>', \"<tr>\", '<th scope=\"row\">Column Types</th>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_column_types\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"message\")) { %>', \"<tr>\", '<th scope=\"row\">Message</th>', '<td scope=\"row\"><%= _.escape(item.get(\"message\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"misc_blurb\")) { %>', \"<tr>\", '<th scope=\"row\">Misc. blurb</th>', '<td scope=\"row\"><%= _.escape(item.get(\"misc_blurb\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"misc_info\")) { %>', \"<tr>\", '<th scope=\"row\">Misc. info</th>', '<td scope=\"row\"><%= _.escape(item.get(\"misc_info\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"tags\")) { %>', \"<tr>\", '<th scope=\"row\">Tags</th>', '<td scope=\"row\"><%= _.escape(item.get(\"tags\")) %></td>', \"</tr>\", \"<% } %>\", '<% if ( item.get(\"uuid\") !== \"ok\" ) { %>', \"<tr>\", '<th scope=\"row\">UUID</th>', '<td scope=\"row\"><%= _.escape(item.get(\"uuid\")) %></td>', \"</tr>\", \"<% } %>\", '<% if ( item.get(\"state\") !== \"ok\" ) { %>', \"<tr>\", '<th scope=\"row\">State</th>', '<td scope=\"row\"><%= _.escape(item.get(\"state\")) %></td>', \"</tr>\", \"<% } %>\", \"</table>\", '<% if (item.get(\"job_stderr\")) { %>', \"<h4>Job Standard Error</h4>\", '<pre class=\"code\">', '<%= _.escape(item.get(\"job_stderr\")) %>', \"</pre>\", \"<% } %>\", '<% if (item.get(\"job_stdout\")) { %>', \"<h4>Job Standard Output</h4>\", '<pre class=\"code\">', '<%= _.escape(item.get(\"job_stdout\")) %>', \"</pre>\", \"<% } %>\", \"<div>\", '<pre class=\"peek\">', \"</pre>\", \"</div>\", '<% if (item.get(\"has_versions\")) { %>', \"<div>\", \"<h3>Expired versions:</h3>\", \"<ul>\", '<% _.each(item.get(\"expired_versions\"), function(version) { %>', '<li><a title=\"See details of this version\" href=\"#folders/<%- item.get(\"folder_id\") %>/datasets/<%- item.id %>/versions/<%- version[0] %>\"><%- version[1] %></a></li>', \"<% }) %>\", \"<ul>\", \"</div>\", \"<% } %>\",\n        // TABLE END\n        \"</div>\",\n        // CONTAINER END\n        \"</div>\"].join(\"\"));\n    },\n\n    templateVersion: function templateVersion() {\n        return _.template([\n        // CONTAINER START\n        '<div class=\"library_style_container\">', '<div id=\"library_toolbar\">', '<a href=\"#folders/<%- item.get(\"folder_id\") %>/datasets/<%- item.id %>\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go to latest dataset\" class=\"btn btn-default primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-caret-left fa-lg\"></span>', \"&nbsp;Latest dataset\", \"</button>\", \"<a>\", \"</div>\",\n\n        // BREADCRUMBS\n        '<ol class=\"breadcrumb\">', '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>', '<% _.each(item.get(\"full_path\"), function(path_item) { %>', \"<% if (path_item[0] != item.id) { %>\", '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ', \"<% } else { %>\", '<li class=\"active\"><span title=\"You are here\"><%- path_item[1] %></span></li>', \"<% } %>\", \"<% }); %>\", \"</ol>\", '<div class=\"alert alert-warning\">This is an expired version of the library dataset: <%= _.escape(item.get(\"name\")) %></div>',\n        // DATASET START\n        '<div class=\"dataset_table\">', '<table class=\"grid table table-striped table-condensed\">', \"<tr>\", '<th scope=\"row\" id=\"id_row\" data-id=\"<%= _.escape(ldda.id) %>\">Name</th>', '<td><%= _.escape(ldda.get(\"name\")) %></td>', \"</tr>\", '<% if (ldda.get(\"file_ext\")) { %>', \"<tr>\", '<th scope=\"row\">Data type</th>', '<td><%= _.escape(ldda.get(\"file_ext\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"genome_build\")) { %>', \"<tr>\", '<th scope=\"row\">Genome build</th>', '<td><%= _.escape(ldda.get(\"genome_build\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"file_size\")) { %>', \"<tr>\", '<th scope=\"row\">Size</th>', '<td><%= _.escape(ldda.get(\"file_size\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"date_uploaded\")) { %>', \"<tr>\", '<th scope=\"row\">Date uploaded (UTC)</th>', '<td><%= _.escape(ldda.get(\"date_uploaded\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"uploaded_by\")) { %>', \"<tr>\", '<th scope=\"row\">Uploaded by</th>', '<td><%= _.escape(ldda.get(\"uploaded_by\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"metadata_data_lines\")) { %>', \"<tr>\", '<th scope=\"row\">Data Lines</th>', '<td scope=\"row\"><%= _.escape(ldda.get(\"metadata_data_lines\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"metadata_comment_lines\")) { %>', \"<tr>\", '<th scope=\"row\">Comment Lines</th>', '<td scope=\"row\"><%= _.escape(ldda.get(\"metadata_comment_lines\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"metadata_columns\")) { %>', \"<tr>\", '<th scope=\"row\">Number of Columns</th>', '<td scope=\"row\"><%= _.escape(ldda.get(\"metadata_columns\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"metadata_column_types\")) { %>', \"<tr>\", '<th scope=\"row\">Column Types</th>', '<td scope=\"row\"><%= _.escape(ldda.get(\"metadata_column_types\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"message\")) { %>', \"<tr>\", '<th scope=\"row\">Message</th>', '<td scope=\"row\"><%= _.escape(ldda.get(\"message\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"misc_blurb\")) { %>', \"<tr>\", '<th scope=\"row\">Miscellaneous blurb</th>', '<td scope=\"row\"><%= _.escape(ldda.get(\"misc_blurb\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (ldda.get(\"misc_info\")) { %>', \"<tr>\", '<th scope=\"row\">Miscellaneous information</th>', '<td scope=\"row\"><%= _.escape(ldda.get(\"misc_info\")) %></td>', \"</tr>\", \"<% } %>\", '<% if (item.get(\"tags\")) { %>', \"<tr>\", '<th scope=\"row\">Tags</th>', '<td scope=\"row\"><%= _.escape(item.get(\"tags\")) %></td>', \"</tr>\", \"<% } %>\", \"</table>\", \"<div>\", '<pre class=\"peek\">', \"</pre>\", \"</div>\",\n        // DATASET END\n        \"</div>\",\n        // CONTAINER END\n        \"</div>\"].join(\"\"));\n    },\n\n    templateModifyDataset: function templateModifyDataset() {\n        return _.template([\n        // CONTAINER START\n        '<div class=\"library_style_container\">', '<div id=\"library_toolbar\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Cancel modifications\" class=\"btn btn-default toolbtn_cancel_modifications primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-times\"></span>', \"&nbsp;Cancel\", \"</button>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_modifications primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-floppy-o\"></span>', \"&nbsp;Save\", \"</button>\", \"</div>\",\n\n        // BREADCRUMBS\n        '<ol class=\"breadcrumb\">', '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>', '<% _.each(item.get(\"full_path\"), function(path_item) { %>', \"<% if (path_item[0] != item.id) { %>\", '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ', \"<% } else { %>\", '<li class=\"active\"><span title=\"You are here\"><%- path_item[1] %></span></li>', \"<% } %>\", \"<% }); %>\", \"</ol>\", '<div class=\"dataset_table\">', '<table class=\"grid table table-striped table-condensed\">', \"<tr>\", '<th class=\"dataset-first-column\" scope=\"row\" id=\"id_row\" data-id=\"<%= _.escape(item.get(\"ldda_id\")) %>\">Name</th>', '<td><input class=\"input_dataset_name form-control\" type=\"text\" placeholder=\"name\" value=\"<%= _.escape(item.get(\"name\")) %>\"></td>', \"</tr>\", \"<tr>\", '<th scope=\"row\">Data type</th>', \"<td>\", '<span id=\"dataset_extension_select\" class=\"dataset-extension-select\" />', \"</td>\", \"</tr>\", \"<tr>\", '<th scope=\"row\">Genome build</th>', \"<td>\", '<span id=\"dataset_genome_select\" class=\"dataset-genome-select\" />', \"</td>\", \"</tr>\", \"<tr>\", '<th scope=\"row\">Size</th>', '<td><%= _.escape(item.get(\"file_size\")) %></td>', \"</tr>\", \"<tr>\", '<th scope=\"row\">Date uploaded (UTC)</th>', '<td><%= _.escape(item.get(\"date_uploaded\")) %></td>', \"</tr>\", \"<tr>\", '<th scope=\"row\">Uploaded by</th>', '<td><%= _.escape(item.get(\"uploaded_by\")) %></td>', \"</tr>\", '<tr scope=\"row\">', '<th scope=\"row\">Data Lines</th>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_data_lines\")) %></td>', \"</tr>\", '<th scope=\"row\">Comment Lines</th>', '<% if (item.get(\"metadata_comment_lines\") === \"\") { %>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_comment_lines\")) %></td>', \"<% } else { %>\", '<td scope=\"row\">unknown</td>', \"<% } %>\", \"</tr>\", \"<tr>\", '<th scope=\"row\">Number of Columns</th>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_columns\")) %></td>', \"</tr>\", \"<tr>\", '<th scope=\"row\">Column Types</th>', '<td scope=\"row\"><%= _.escape(item.get(\"metadata_column_types\")) %></td>', \"</tr>\", \"<tr>\", '<th scope=\"row\">Message</th>', '<td scope=\"row\"><%= _.escape(item.get(\"message\")) %></td>', \"</tr>\", \"<tr>\", '<th scope=\"row\">Misc. blurb</th>', '<td scope=\"row\"><%= _.escape(item.get(\"misc_blurb\")) %></td>', \"</tr>\", \"<tr>\", '<th scope=\"row\">Misc. information</th>', '<td><input class=\"input_dataset_misc_info form-control\" type=\"text\" placeholder=\"info\" value=\"<%= _.escape(item.get(\"misc_info\")) %>\"></td>', \"</tr>\",\n        //TODO: add functionality to modify tags here\n        '<% if (item.get(\"tags\")) { %>', \"<tr>\", '<th scope=\"row\">Tags</th>', '<td scope=\"row\"><%= _.escape(item.get(\"tags\")) %></td>', \"</tr>\", \"<% } %>\", \"</table>\", \"<div>\", '<pre class=\"peek\">', \"</pre>\", \"</div>\", \"</div>\",\n        // CONTAINER END\n        \"</div>\"].join(\"\"));\n    },\n\n    templateDatasetPermissions: function templateDatasetPermissions() {\n        return _.template([\n        // CONTAINER START\n        '<div class=\"library_style_container\">', '<div id=\"library_toolbar\">', '<a href=\"#folders/<%- item.get(\"folder_id\") %>/datasets/<%- item.id %>\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to dataset\" class=\"btn btn-default primary-button toolbar-item\" type=\"button\">', '<span class=\"fa fa-file-o\"></span>', \"&nbsp;Dataset Details\", \"</button>\", \"<a>\", \"</div>\",\n\n        // BREADCRUMBS\n        '<ol class=\"breadcrumb\">', '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>', '<% _.each(item.get(\"full_path\"), function(path_item) { %>', \"<% if (path_item[0] != item.id) { %>\", '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ', \"<% } else { %>\", '<li class=\"active\"><span title=\"You are here\"><%- path_item[1] %></span></li>', \"<% } %>\", \"<% }); %>\", \"</ol>\", '<h1>Dataset: <%= _.escape(item.get(\"name\")) %></h1>', '<div class=\"alert alert-warning\">', \"<% if (is_admin) { %>\", \"You are logged in as an <strong>administrator</strong> therefore you can manage any dataset on this Galaxy instance. Please make sure you understand the consequences.\", \"<% } else { %>\", \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\", \"<% } %>\", \"</div>\", '<div class=\"dataset_table\">', \"<h2>Library-related permissions</h2>\", \"<h4>Roles that can modify the library item</h4>\", '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"></div>', '<div class=\"alert alert-info roles-selection\">User with <strong>any</strong> of these roles can modify name, metadata, and other information about this library item.</div>', \"<hr/>\", \"<h2>Dataset-related permissions</h2>\", '<div class=\"alert alert-warning\">Changes made below will affect <strong>every</strong> library item that was created from this dataset and also every history this dataset is part of.</div>', '<% if (!item.get(\"is_unrestricted\")) { %>', '<p>You can <span class=\"remove-restrictions\"><a href=\"\">remove all access restrictions</a></span> on this dataset.</p>', \"<% } else { %>\", '<p>You can <span class=\"make-private\"><a href=\"\">make this dataset private</a></span> to you.</p>', \"<% } %>\", \"<h4>Roles that can access the dataset</h4>\", '<div id=\"access_perm\" class=\"access_perm roles-selection\"></div>', '<div class=\"alert alert-info roles-selection\">', \"User has to have <strong>all these roles</strong> in order to access this dataset.\", \" Users without access permission <strong>cannot</strong> have other permissions on this dataset.\", \" If there are no access roles set on the dataset it is considered <strong>unrestricted</strong>.\", \"</div>\", \"<h4>Roles that can manage permissions on the dataset</h4>\", '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"></div>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can manage permissions of this dataset. If you remove yourself you will lose the ability manage this dataset unless you are an admin.\", \"</div>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications made on this page\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">', '<span class=\"fa fa-floppy-o\"></span>', \"&nbsp;Save\", \"</button>\", \"</div>\",\n        // CONTAINER END\n        \"</div>\"].join(\"\"));\n    },\n\n    templateBulkImportInModal: function templateBulkImportInModal() {\n        return _.template([\"<div>\", '<div class=\"library-modal-item\">', \"Select history: \", '<select id=\"dataset_import_single\" name=\"dataset_import_single\" style=\"width:50%; margin-bottom: 1em; \" autofocus>', \"<% _.each(histories, function(history) { %>\", '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>', \"<% }); %>\", \"</select>\", \"</div>\", '<div class=\"library-modal-item\">', \"or create new: \", '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">', \"</input>\", \"</div>\", \"</div>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    LibraryDatasetView: LibraryDatasetView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///127\n");

/***/ }),

/***/ 128:
/*!**********************************************!*\
  !*** ./galaxy/scripts/libs/jquery/jstree.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*globals jQuery, define, exports, require, window, document */\n(function (factory) {\n\t\"use strict\";\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\telse if(typeof exports === 'object') {\n\t\tfactory(require('jquery'));\n\t}\n\telse {\n\t\tfactory(jQuery);\n\t}\n}(function ($, undefined) {\n\t\"use strict\";\n/*!\n * jsTree 3.0.3\n * http://jstree.com/\n *\n * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)\n *\n * Licensed same as jquery - under the terms of the MIT License\n *   http://www.opensource.org/licenses/mit-license.php\n */\n/*!\n * if using jslint please allow for the jQuery global and use following options: \n * jslint: browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true\n */\n\n\t// prevent another load? maybe there is a better way?\n\tif($.jstree) {\n\t\treturn;\n\t}\n\n\t/**\n\t * ### jsTree core functionality\n\t */\n\n\t// internal variables\n\tvar instance_counter = 0,\n\t\tccp_node = false,\n\t\tccp_mode = false,\n\t\tccp_inst = false,\n\t\tthemes_loaded = [],\n\t\tsrc = $('script:last').attr('src'),\n\t\t_d = document, _node = _d.createElement('LI'), _temp1, _temp2;\n\n\t_node.setAttribute('role', 'treeitem');\n\t_temp1 = _d.createElement('I');\n\t_temp1.className = 'jstree-icon jstree-ocl';\n\t_node.appendChild(_temp1);\n\t_temp1 = _d.createElement('A');\n\t_temp1.className = 'jstree-anchor';\n\t_temp1.setAttribute('href','#');\n\t_temp2 = _d.createElement('I');\n\t_temp2.className = 'jstree-icon jstree-themeicon';\n\t_temp1.appendChild(_temp2);\n\t_node.appendChild(_temp1);\n\t_temp1 = _temp2 = null;\n\n\n\t/**\n\t * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.\n\t * @name $.jstree\n\t */\n\t$.jstree = {\n\t\t/** \n\t\t * specifies the jstree version in use\n\t\t * @name $.jstree.version\n\t\t */\n\t\tversion : '3.0.3',\n\t\t/**\n\t\t * holds all the default options used when creating new instances\n\t\t * @name $.jstree.defaults\n\t\t */\n\t\tdefaults : {\n\t\t\t/**\n\t\t\t * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`\n\t\t\t * @name $.jstree.defaults.plugins\n\t\t\t */\n\t\t\tplugins : []\n\t\t},\n\t\t/**\n\t\t * stores all loaded jstree plugins (used internally)\n\t\t * @name $.jstree.plugins\n\t\t */\n\t\tplugins : {},\n\t\tpath : src && src.indexOf('/') !== -1 ? src.replace(/\\/[^\\/]+$/,'') : '',\n\t\tidregex : /[\\\\:&!^|()\\[\\]<>@*'+~#\";.,=\\- \\/${}%]/g\n\t};\n\t/**\n\t * creates a jstree instance\n\t * @name $.jstree.create(el [, options])\n\t * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector\n\t * @param {Object} options options for this instance (extends `$.jstree.defaults`)\n\t * @return {jsTree} the new instance\n\t */\n\t$.jstree.create = function (el, options) {\n\t\tvar tmp = new $.jstree.core(++instance_counter),\n\t\t\topt = options;\n\t\toptions = $.extend(true, {}, $.jstree.defaults, options);\n\t\tif(opt && opt.plugins) {\n\t\t\toptions.plugins = opt.plugins;\n\t\t}\n\t\t$.each(options.plugins, function (i, k) {\n\t\t\tif(i !== 'core') {\n\t\t\t\ttmp = tmp.plugin(k, options[k]);\n\t\t\t}\n\t\t});\n\t\ttmp.init(el, options);\n\t\treturn tmp;\n\t};\n\t/**\n\t * the jstree class constructor, used only internally\n\t * @private\n\t * @name $.jstree.core(id)\n\t * @param {Number} id this instance's index\n\t */\n\t$.jstree.core = function (id) {\n\t\tthis._id = id;\n\t\tthis._cnt = 0;\n\t\tthis._wrk = null;\n\t\tthis._data = {\n\t\t\tcore : {\n\t\t\t\tthemes : {\n\t\t\t\t\tname : false,\n\t\t\t\t\tdots : false,\n\t\t\t\t\ticons : false\n\t\t\t\t},\n\t\t\t\tselected : [],\n\t\t\t\tlast_error : {},\n\t\t\t\tworking : false,\n\t\t\t\tworker_queue : []\n\t\t\t}\n\t\t};\n\t};\n\t/**\n\t * get a reference to an existing instance\n\t *\n\t * __Examples__\n\t *\n\t *\t// provided a container with an ID of \"tree\", and a nested node with an ID of \"branch\"\n\t *\t// all of there will return the same instance\n\t *\t$.jstree.reference('tree');\n\t *\t$.jstree.reference('#tree');\n\t *\t$.jstree.reference($('#tree'));\n\t *\t$.jstree.reference(document.getElementByID('tree'));\n\t *\t$.jstree.reference('branch');\n\t *\t$.jstree.reference('#branch');\n\t *\t$.jstree.reference($('#branch'));\n\t *\t$.jstree.reference(document.getElementByID('branch'));\n\t *\n\t * @name $.jstree.reference(needle)\n\t * @param {DOMElement|jQuery|String} needle\n\t * @return {jsTree|null} the instance or `null` if not found\n\t */\n\t$.jstree.reference = function (needle) {\n\t\tvar tmp = null,\n\t\t\tobj = null;\n\t\tif(needle && needle.id) { needle = needle.id; }\n\n\t\tif(!obj || !obj.length) {\n\t\t\ttry { obj = $(needle); } catch (ignore) { }\n\t\t}\n\t\tif(!obj || !obj.length) {\n\t\t\ttry { obj = $('#' + needle.replace($.jstree.idregex,'\\\\$&')); } catch (ignore) { }\n\t\t}\n\t\tif(obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {\n\t\t\ttmp = obj;\n\t\t}\n\t\telse {\n\t\t\t$('.jstree').each(function () {\n\t\t\t\tvar inst = $(this).data('jstree');\n\t\t\t\tif(inst && inst._model.data[needle]) {\n\t\t\t\t\ttmp = inst;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn tmp;\n\t};\n\t/**\n\t * Create an instance, get an instance or invoke a command on a instance. \n\t * \n\t * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).\n\t * \n\t * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).\n\t * \n\t * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).\n\t * \n\t * In any other case - nothing is returned and chaining is not broken.\n\t *\n\t * __Examples__\n\t *\n\t *\t$('#tree1').jstree(); // creates an instance\n\t *\t$('#tree2').jstree({ plugins : [] }); // create an instance with some options\n\t *\t$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments\n\t *\t$('#tree2').jstree(); // get an existing instance (or create an instance)\n\t *\t$('#tree2').jstree(true); // get an existing instance (will not create new instance)\n\t *\t$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)\n\t *\n\t * @name $().jstree([arg])\n\t * @param {String|Object} arg\n\t * @return {Mixed}\n\t */\n\t$.fn.jstree = function (arg) {\n\t\t// check for string argument\n\t\tvar is_method\t= (typeof arg === 'string'),\n\t\t\targs\t\t= Array.prototype.slice.call(arguments, 1),\n\t\t\tresult\t\t= null;\n\t\tthis.each(function () {\n\t\t\t// get the instance (if there is one) and method (if it exists)\n\t\t\tvar instance = $.jstree.reference(this),\n\t\t\t\tmethod = is_method && instance ? instance[arg] : null;\n\t\t\t// if calling a method, and method is available - execute on the instance\n\t\t\tresult = is_method && method ?\n\t\t\t\tmethod.apply(instance, args) :\n\t\t\t\tnull;\n\t\t\t// if there is no instance and no method is being called - create one\n\t\t\tif(!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {\n\t\t\t\t$(this).data('jstree', new $.jstree.create(this, arg));\n\t\t\t}\n\t\t\t// if there is an instance and no method is called - return the instance\n\t\t\tif( (instance && !is_method) || arg === true ) {\n\t\t\t\tresult = instance || false;\n\t\t\t}\n\t\t\t// if there was a method call which returned a result - break and return the value\n\t\t\tif(result !== null && result !== undefined) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\t// if there was a method call with a valid return value - return that, otherwise continue the chain\n\t\treturn result !== null && result !== undefined ?\n\t\t\tresult : this;\n\t};\n\t/**\n\t * used to find elements containing an instance\n\t *\n\t * __Examples__\n\t *\n\t *\t$('div:jstree').each(function () {\n\t *\t\t$(this).jstree('destroy');\n\t *\t});\n\t *\n\t * @name $(':jstree')\n\t * @return {jQuery}\n\t */\n\t$.expr[':'].jstree = $.expr.createPseudo(function(search) {\n\t\treturn function(a) {\n\t\t\treturn $(a).hasClass('jstree') &&\n\t\t\t\t$(a).data('jstree') !== undefined;\n\t\t};\n\t});\n\n\t/**\n\t * stores all defaults for the core\n\t * @name $.jstree.defaults.core\n\t */\n\t$.jstree.defaults.core = {\n\t\t/**\n\t\t * data configuration\n\t\t * \n\t\t * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).\n\t\t *\n\t\t * You can also pass in a HTML string or a JSON array here.\n\t\t * \n\t\t * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree. \n\t\t * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.\n\t\t * \n\t\t * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.\n\t\t *\n\t\t * __Examples__\n\t\t *\n\t\t *\t// AJAX\n\t\t *\t$('#tree').jstree({\n\t\t *\t\t'core' : {\n\t\t *\t\t\t'data' : {\n\t\t *\t\t\t\t'url' : '/get/children/',\n\t\t *\t\t\t\t'data' : function (node) {\n\t\t *\t\t\t\t\treturn { 'id' : node.id };\n\t\t *\t\t\t\t}\n\t\t *\t\t\t}\n\t\t *\t\t});\n\t\t *\n\t\t *\t// direct data\n\t\t *\t$('#tree').jstree({\n\t\t *\t\t'core' : {\n\t\t *\t\t\t'data' : [\n\t\t *\t\t\t\t'Simple root node',\n\t\t *\t\t\t\t{\n\t\t *\t\t\t\t\t'id' : 'node_2',\n\t\t *\t\t\t\t\t'text' : 'Root node with options',\n\t\t *\t\t\t\t\t'state' : { 'opened' : true, 'selected' : true },\n\t\t *\t\t\t\t\t'children' : [ { 'text' : 'Child 1' }, 'Child 2']\n\t\t *\t\t\t\t}\n\t\t *\t\t\t]\n\t\t *\t\t});\n\t\t *\t\n\t\t *\t// function\n\t\t *\t$('#tree').jstree({\n\t\t *\t\t'core' : {\n\t\t *\t\t\t'data' : function (obj, callback) {\n\t\t *\t\t\t\tcallback.call(this, ['Root 1', 'Root 2']);\n\t\t *\t\t\t}\n\t\t *\t\t});\n\t\t * \n\t\t * @name $.jstree.defaults.core.data\n\t\t */\n\t\tdata\t\t\t: false,\n\t\t/**\n\t\t * configure the various strings used throughout the tree\n\t\t *\n\t\t * You can use an object where the key is the string you need to replace and the value is your replacement.\n\t\t * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.\n\t\t * If left as `false` no replacement is made.\n\t\t *\n\t\t * __Examples__\n\t\t *\n\t\t *\t$('#tree').jstree({\n\t\t *\t\t'core' : {\n\t\t *\t\t\t'strings' : {\n\t\t *\t\t\t\t'Loading ...' : 'Please wait ...'\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\t});\n\t\t *\n\t\t * @name $.jstree.defaults.core.strings\n\t\t */\n\t\tstrings\t\t\t: false,\n\t\t/**\n\t\t * determines what happens when a user tries to modify the structure of the tree\n\t\t * If left as `false` all operations like create, rename, delete, move or copy are prevented.\n\t\t * You can set this to `true` to allow all interactions or use a function to have better control.\n\t\t *\n\t\t * __Examples__\n\t\t *\n\t\t *\t$('#tree').jstree({\n\t\t *\t\t'core' : {\n\t\t *\t\t\t'check_callback' : function (operation, node, node_parent, node_position, more) {\n\t\t *\t\t\t\t// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node' or 'copy_node'\n\t\t *\t\t\t\t// in case of 'rename_node' node_position is filled with the new node name\n\t\t *\t\t\t\treturn operation === 'rename_node' ? true : false;\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\t});\n\t\t * \n\t\t * @name $.jstree.defaults.core.check_callback\n\t\t */\n\t\tcheck_callback\t: false,\n\t\t/**\n\t\t * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)\n\t\t * @name $.jstree.defaults.core.error\n\t\t */\n\t\terror\t\t\t: $.noop,\n\t\t/**\n\t\t * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)\n\t\t * @name $.jstree.defaults.core.animation\n\t\t */\n\t\tanimation\t\t: 200,\n\t\t/**\n\t\t * a boolean indicating if multiple nodes can be selected\n\t\t * @name $.jstree.defaults.core.multiple\n\t\t */\n\t\tmultiple\t\t: true,\n\t\t/**\n\t\t * theme configuration object\n\t\t * @name $.jstree.defaults.core.themes\n\t\t */\n\t\tthemes\t\t\t: {\n\t\t\t/**\n\t\t\t * the name of the theme to use (if left as `false` the default theme is used)\n\t\t\t * @name $.jstree.defaults.core.themes.name\n\t\t\t */\n\t\t\tname\t\t\t: false,\n\t\t\t/**\n\t\t\t * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.\n\t\t\t * @name $.jstree.defaults.core.themes.url\n\t\t\t */\n\t\t\turl\t\t\t\t: false,\n\t\t\t/**\n\t\t\t * the location of all jstree themes - only used if `url` is set to `true`\n\t\t\t * @name $.jstree.defaults.core.themes.dir\n\t\t\t */\n\t\t\tdir\t\t\t\t: false,\n\t\t\t/**\n\t\t\t * a boolean indicating if connecting dots are shown\n\t\t\t * @name $.jstree.defaults.core.themes.dots\n\t\t\t */\n\t\t\tdots\t\t\t: true,\n\t\t\t/**\n\t\t\t * a boolean indicating if node icons are shown\n\t\t\t * @name $.jstree.defaults.core.themes.icons\n\t\t\t */\n\t\t\ticons\t\t\t: true,\n\t\t\t/**\n\t\t\t * a boolean indicating if the tree background is striped\n\t\t\t * @name $.jstree.defaults.core.themes.stripes\n\t\t\t */\n\t\t\tstripes\t\t\t: false,\n\t\t\t/**\n\t\t\t * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)\n\t\t\t * @name $.jstree.defaults.core.themes.variant\n\t\t\t */\n\t\t\tvariant\t\t\t: false,\n\t\t\t/**\n\t\t\t * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.\n\t\t\t * @name $.jstree.defaults.core.themes.responsive\n\t\t\t */\n\t\t\tresponsive\t\t: false\n\t\t},\n\t\t/**\n\t\t * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)\n\t\t * @name $.jstree.defaults.core.expand_selected_onload\n\t\t */\n\t\texpand_selected_onload : true,\n\t\t/**\n\t\t * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`\n\t\t * @name $.jstree.defaults.core.worker\n\t\t */\n\t\tworker : true,\n\t\t/**\n\t\t * Force node text to plain text (and escape HTML). Defaults to `false`\n\t\t * @name $.jstree.defaults.core.force_text\n\t\t */\n\t\tforce_text : false\n\t};\n\t$.jstree.core.prototype = {\n\t\t/**\n\t\t * used to decorate an instance with a plugin. Used internally.\n\t\t * @private\n\t\t * @name plugin(deco [, opts])\n\t\t * @param  {String} deco the plugin to decorate with\n\t\t * @param  {Object} opts options for the plugin\n\t\t * @return {jsTree}\n\t\t */\n\t\tplugin : function (deco, opts) {\n\t\t\tvar Child = $.jstree.plugins[deco];\n\t\t\tif(Child) {\n\t\t\t\tthis._data[deco] = {};\n\t\t\t\tChild.prototype = this;\n\t\t\t\treturn new Child(opts, this);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\t/**\n\t\t * used to decorate an instance with a plugin. Used internally.\n\t\t * @private\n\t\t * @name init(el, optons)\n\t\t * @param {DOMElement|jQuery|String} el the element we are transforming\n\t\t * @param {Object} options options for this instance\n\t\t * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree\n\t\t */\n\t\tinit : function (el, options) {\n\t\t\tthis._model = {\n\t\t\t\tdata : {\n\t\t\t\t\t'#' : {\n\t\t\t\t\t\tid : '#',\n\t\t\t\t\t\tparent : null,\n\t\t\t\t\t\tparents : [],\n\t\t\t\t\t\tchildren : [],\n\t\t\t\t\t\tchildren_d : [],\n\t\t\t\t\t\tstate : { loaded : false }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tchanged : [],\n\t\t\t\tforce_full_redraw : false,\n\t\t\t\tredraw_timeout : false,\n\t\t\t\tdefault_state : {\n\t\t\t\t\tloaded : true,\n\t\t\t\t\topened : false,\n\t\t\t\t\tselected : false,\n\t\t\t\t\tdisabled : false\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.element = $(el).addClass('jstree jstree-' + this._id);\n\t\t\tthis.settings = options;\n\t\t\tthis.element.bind(\"destroyed\", $.proxy(this.teardown, this));\n\n\t\t\tthis._data.core.ready = false;\n\t\t\tthis._data.core.loaded = false;\n\t\t\tthis._data.core.rtl = (this.element.css(\"direction\") === \"rtl\");\n\t\t\tthis.element[this._data.core.rtl ? 'addClass' : 'removeClass'](\"jstree-rtl\");\n\t\t\tthis.element.attr('role','tree');\n\n\t\t\tthis.bind();\n\t\t\t/**\n\t\t\t * triggered after all events are bound\n\t\t\t * @event\n\t\t\t * @name init.jstree\n\t\t\t */\n\t\t\tthis.trigger(\"init\");\n\n\t\t\tthis._data.core.original_container_html = this.element.find(\" > ul > li\").clone(true);\n\t\t\tthis._data.core.original_container_html\n\t\t\t\t.find(\"li\").addBack()\n\t\t\t\t.contents().filter(function() {\n\t\t\t\t\treturn this.nodeType === 3 && (!this.nodeValue || /^\\s+$/.test(this.nodeValue));\n\t\t\t\t})\n\t\t\t\t.remove();\n\t\t\tthis.element.html(\"<\"+\"ul class='jstree-container-ul jstree-children'><\"+\"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\n\t\t\tthis._data.core.li_height = this.get_container_ul().children(\"li:eq(0)\").height() || 24;\n\t\t\t/**\n\t\t\t * triggered after the loading text is shown and before loading starts\n\t\t\t * @event\n\t\t\t * @name loading.jstree\n\t\t\t */\n\t\t\tthis.trigger(\"loading\");\n\t\t\tthis.load_node('#');\n\t\t},\n\t\t/**\n\t\t * destroy an instance\n\t\t * @name destroy()\n\t\t * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact\n\t\t */\n\t\tdestroy : function (keep_html) {\n\t\t\tif(!keep_html) { this.element.empty(); }\n\t\t\tthis.element.unbind(\"destroyed\", this.teardown);\n\t\t\tthis.teardown();\n\t\t},\n\t\t/**\n\t\t * part of the destroying of an instance. Used internally.\n\t\t * @private\n\t\t * @name teardown()\n\t\t */\n\t\tteardown : function () {\n\t\t\tthis.unbind();\n\t\t\tthis.element\n\t\t\t\t.removeClass('jstree')\n\t\t\t\t.removeData('jstree')\n\t\t\t\t.find(\"[class^='jstree']\")\n\t\t\t\t\t.addBack()\n\t\t\t\t\t.attr(\"class\", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });\n\t\t\tthis.element = null;\n\t\t},\n\t\t/**\n\t\t * bind all events. Used internally.\n\t\t * @private\n\t\t * @name bind()\n\t\t */\n\t\tbind : function () {\n\t\t\tthis.element\n\t\t\t\t.on(\"dblclick.jstree\", function () {\n\t\t\t\t\t\tif(document.selection && document.selection.empty) {\n\t\t\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif(window.getSelection) {\n\t\t\t\t\t\t\t\tvar sel = window.getSelection();\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tsel.removeAllRanges();\n\t\t\t\t\t\t\t\t\tsel.collapse();\n\t\t\t\t\t\t\t\t} catch (ignore) { }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.on(\"click.jstree\", \".jstree-ocl\", $.proxy(function (e) {\n\t\t\t\t\t\tthis.toggle_node(e.target);\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t$(e.currentTarget).focus();\n\t\t\t\t\t\tthis.activate_node(e.currentTarget, e);\n\t\t\t\t\t}, this))\n\t\t\t\t.on('keydown.jstree', '.jstree-anchor', $.proxy(function (e) {\n\t\t\t\t\t\tif(e.target.tagName === \"INPUT\") { return true; }\n\t\t\t\t\t\tvar o = null;\n\t\t\t\t\t\tswitch(e.which) {\n\t\t\t\t\t\t\tcase 13:\n\t\t\t\t\t\t\tcase 32:\n\t\t\t\t\t\t\t\te.type = \"click\";\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 37:\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tif(this.is_open(e.currentTarget)) {\n\t\t\t\t\t\t\t\t\tthis.close_node(e.currentTarget);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\to = this.get_prev_dom(e.currentTarget);\n\t\t\t\t\t\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 38:\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\to = this.get_prev_dom(e.currentTarget);\n\t\t\t\t\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 39:\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tif(this.is_closed(e.currentTarget)) {\n\t\t\t\t\t\t\t\t\tthis.open_node(e.currentTarget, function (o) { this.get_node(o, true).children('.jstree-anchor').focus(); });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\to = this.get_next_dom(e.currentTarget);\n\t\t\t\t\t\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 40:\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\to = this.get_next_dom(e.currentTarget);\n\t\t\t\t\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t// delete\n\t\t\t\t\t\t\tcase 46:\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\to = this.get_node(e.currentTarget);\n\t\t\t\t\t\t\t\tif(o && o.id && o.id !== '#') {\n\t\t\t\t\t\t\t\t\to = this.is_selected(o) ? this.get_selected() : o;\n\t\t\t\t\t\t\t\t\t// this.delete_node(o);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t// f2\n\t\t\t\t\t\t\tcase 113:\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\to = this.get_node(e.currentTarget);\n\t\t\t\t\t\t\t\t/*!\n\t\t\t\t\t\t\t\tif(o && o.id && o.id !== '#') {\n\t\t\t\t\t\t\t\t\t// this.edit(o);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// console.log(e.which);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"load_node.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tif(data.status) {\n\t\t\t\t\t\t\tif(data.node.id === '#' && !this._data.core.loaded) {\n\t\t\t\t\t\t\t\tthis._data.core.loaded = true;\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * triggered after the root node is loaded for the first time\n\t\t\t\t\t\t\t\t * @event\n\t\t\t\t\t\t\t\t * @name loaded.jstree\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tthis.trigger(\"loaded\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._data.core.ready && !this.get_container_ul().find('.jstree-loading:eq(0)').length) {\n\t\t\t\t\t\t\t\tthis._data.core.ready = true;\n\t\t\t\t\t\t\t\tif(this._data.core.selected.length) {\n\t\t\t\t\t\t\t\t\tif(this.settings.core.expand_selected_onload) {\n\t\t\t\t\t\t\t\t\t\tvar tmp = [], i, j;\n\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\t\ttmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\ttmp = $.vakata.array_unique(tmp);\n\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\t\tthis.open_node(tmp[i], false, 0);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'ready', 'selected' : this._data.core.selected });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * triggered after all nodes are finished loading\n\t\t\t\t\t\t\t\t * @event\n\t\t\t\t\t\t\t\t * @name ready.jstree\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tsetTimeout($.proxy(function () { this.trigger(\"ready\"); }, this), 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this))\n\t\t\t\t// THEME RELATED\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\n\t\t\t\t\t\tvar s = this.settings.core.themes;\n\t\t\t\t\t\tthis._data.core.themes.dots\t\t\t= s.dots;\n\t\t\t\t\t\tthis._data.core.themes.stripes\t\t= s.stripes;\n\t\t\t\t\t\tthis._data.core.themes.icons\t\t= s.icons;\n\t\t\t\t\t\tthis.set_theme(s.name || \"default\", s.url);\n\t\t\t\t\t\tthis.set_theme_variant(s.variant);\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\n\t\t\t\t\t\tthis[ this._data.core.themes.dots ? \"show_dots\" : \"hide_dots\" ]();\n\t\t\t\t\t\tthis[ this._data.core.themes.icons ? \"show_icons\" : \"hide_icons\" ]();\n\t\t\t\t\t\tthis[ this._data.core.themes.stripes ? \"show_stripes\" : \"hide_stripes\" ]();\n\t\t\t\t\t}, this))\n\t\t\t\t.on('blur.jstree', '.jstree-anchor', $.proxy(function (e) {\n\t\t\t\t\t\t$(e.currentTarget).filter('.jstree-hovered').mouseleave();\n\t\t\t\t\t}, this))\n\t\t\t\t.on('focus.jstree', '.jstree-anchor', $.proxy(function (e) {\n\t\t\t\t\t\tthis.element.find('.jstree-hovered').not(e.currentTarget).mouseleave();\n\t\t\t\t\t\t$(e.currentTarget).mouseenter();\n\t\t\t\t\t}, this))\n\t\t\t\t.on('mouseenter.jstree', '.jstree-anchor', $.proxy(function (e) {\n\t\t\t\t\t\tthis.hover_node(e.currentTarget);\n\t\t\t\t\t}, this))\n\t\t\t\t.on('mouseleave.jstree', '.jstree-anchor', $.proxy(function (e) {\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\n\t\t\t\t\t}, this));\n\t\t},\n\t\t/**\n\t\t * part of the destroying of an instance. Used internally.\n\t\t * @private\n\t\t * @name unbind()\n\t\t */\n\t\tunbind : function () {\n\t\t\tthis.element.off('.jstree');\n\t\t\t$(document).off('.jstree-' + this._id);\n\t\t},\n\t\t/**\n\t\t * trigger an event. Used internally.\n\t\t * @private\n\t\t * @name trigger(ev [, data])\n\t\t * @param  {String} ev the name of the event to trigger\n\t\t * @param  {Object} data additional data to pass with the event\n\t\t */\n\t\ttrigger : function (ev, data) {\n\t\t\tif(!data) {\n\t\t\t\tdata = {};\n\t\t\t}\n\t\t\tdata.instance = this;\n\t\t\tthis.element.triggerHandler(ev.replace('.jstree','') + '.jstree', data);\n\t\t},\n\t\t/**\n\t\t * returns the jQuery extended instance container\n\t\t * @name get_container()\n\t\t * @return {jQuery}\n\t\t */\n\t\tget_container : function () {\n\t\t\treturn this.element;\n\t\t},\n\t\t/**\n\t\t * returns the jQuery extended main UL node inside the instance container. Used internally.\n\t\t * @private\n\t\t * @name get_container_ul()\n\t\t * @return {jQuery}\n\t\t */\n\t\tget_container_ul : function () {\n\t\t\treturn this.element.children(\".jstree-children:eq(0)\");\n\t\t},\n\t\t/**\n\t\t * gets string replacements (localization). Used internally.\n\t\t * @private\n\t\t * @name get_string(key)\n\t\t * @param  {String} key\n\t\t * @return {String}\n\t\t */\n\t\tget_string : function (key) {\n\t\t\tvar a = this.settings.core.strings;\n\t\t\tif($.isFunction(a)) { return a.call(this, key); }\n\t\t\tif(a && a[key]) { return a[key]; }\n\t\t\treturn key;\n\t\t},\n\t\t/**\n\t\t * gets the first child of a DOM node. Used internally.\n\t\t * @private\n\t\t * @name _firstChild(dom)\n\t\t * @param  {DOMElement} dom\n\t\t * @return {DOMElement}\n\t\t */\n\t\t_firstChild : function (dom) {\n\t\t\tdom = dom ? dom.firstChild : null;\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\n\t\t\t\tdom = dom.nextSibling;\n\t\t\t}\n\t\t\treturn dom;\n\t\t},\n\t\t/**\n\t\t * gets the next sibling of a DOM node. Used internally.\n\t\t * @private\n\t\t * @name _nextSibling(dom)\n\t\t * @param  {DOMElement} dom\n\t\t * @return {DOMElement}\n\t\t */\n\t\t_nextSibling : function (dom) {\n\t\t\tdom = dom ? dom.nextSibling : null;\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\n\t\t\t\tdom = dom.nextSibling;\n\t\t\t}\n\t\t\treturn dom;\n\t\t},\n\t\t/**\n\t\t * gets the previous sibling of a DOM node. Used internally.\n\t\t * @private\n\t\t * @name _previousSibling(dom)\n\t\t * @param  {DOMElement} dom\n\t\t * @return {DOMElement}\n\t\t */\n\t\t_previousSibling : function (dom) {\n\t\t\tdom = dom ? dom.previousSibling : null;\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\n\t\t\t\tdom = dom.previousSibling;\n\t\t\t}\n\t\t\treturn dom;\n\t\t},\n\t\t/**\n\t\t * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)\n\t\t * @name get_node(obj [, as_dom])\n\t\t * @param  {mixed} obj\n\t\t * @param  {Boolean} as_dom\n\t\t * @return {Object|jQuery}\n\t\t */\n\t\tget_node : function (obj, as_dom) {\n\t\t\tif(obj && obj.id) {\n\t\t\t\tobj = obj.id;\n\t\t\t}\n\t\t\tvar dom;\n\t\t\ttry {\n\t\t\t\tif(this._model.data[obj]) {\n\t\t\t\t\tobj = this._model.data[obj];\n\t\t\t\t}\n\t\t\t\telse if(((dom = $(obj, this.element)).length || (dom = $('#' + obj.replace($.jstree.idregex,'\\\\$&'), this.element)).length) && this._model.data[dom.closest('.jstree-node').attr('id')]) {\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\n\t\t\t\t}\n\t\t\t\telse if((dom = $(obj, this.element)).length && dom.hasClass('jstree')) {\n\t\t\t\t\tobj = this._model.data['#'];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif(as_dom) {\n\t\t\t\t\tobj = obj.id === '#' ? this.element : $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t} catch (ex) { return false; }\n\t\t},\n\t\t/**\n\t\t * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)\n\t\t * @name get_path(obj [, glue, ids])\n\t\t * @param  {mixed} obj the node\n\t\t * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned\n\t\t * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used\n\t\t * @return {mixed}\n\t\t */\n\t\tget_path : function (obj, glue, ids) {\n\t\t\tobj = obj.parents ? obj : this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#' || !obj.parents) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar i, j, p = [];\n\t\t\tp.push(ids ? obj.id : obj.text);\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\n\t\t\t\tp.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));\n\t\t\t}\n\t\t\tp = p.reverse().slice(1);\n\t\t\treturn glue ? p.join(glue) : p;\n\t\t},\n\t\t/**\n\t\t * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\n\t\t * @name get_next_dom(obj [, strict])\n\t\t * @param  {mixed} obj\n\t\t * @param  {Boolean} strict\n\t\t * @return {jQuery}\n\t\t */\n\t\tget_next_dom : function (obj, strict) {\n\t\t\tvar tmp;\n\t\t\tobj = this.get_node(obj, true);\n\t\t\tif(obj[0] === this.element[0]) {\n\t\t\t\ttmp = this._firstChild(this.get_container_ul()[0]);\n\t\t\t\treturn tmp ? $(tmp) : false;\n\t\t\t}\n\t\t\tif(!obj || !obj.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(strict) {\n\t\t\t\ttmp = this._nextSibling(obj[0]);\n\t\t\t\treturn tmp ? $(tmp) : false;\n\t\t\t}\n\t\t\tif(obj.hasClass(\"jstree-open\")) {\n\t\t\t\ttmp = this._firstChild(obj.children('.jstree-children')[0]);\n\t\t\t\treturn tmp ? $(tmp) : false;\n\t\t\t}\n\t\t\tif((tmp = this._nextSibling(obj[0])) !== null) {\n\t\t\t\treturn $(tmp);\n\t\t\t}\n\t\t\treturn obj.parentsUntil(\".jstree\",\".jstree-node\").next(\".jstree-node\").eq(0);\n\t\t},\n\t\t/**\n\t\t * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\n\t\t * @name get_prev_dom(obj [, strict])\n\t\t * @param  {mixed} obj\n\t\t * @param  {Boolean} strict\n\t\t * @return {jQuery}\n\t\t */\n\t\tget_prev_dom : function (obj, strict) {\n\t\t\tvar tmp;\n\t\t\tobj = this.get_node(obj, true);\n\t\t\tif(obj[0] === this.element[0]) {\n\t\t\t\ttmp = this.get_container_ul()[0].lastChild;\n\t\t\t\treturn tmp ? $(tmp) : false;\n\t\t\t}\n\t\t\tif(!obj || !obj.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(strict) {\n\t\t\t\ttmp = this._previousSibling(obj[0]);\n\t\t\t\treturn tmp ? $(tmp) : false;\n\t\t\t}\n\t\t\tif((tmp = this._previousSibling(obj[0])) !== null) {\n\t\t\t\tobj = $(tmp);\n\t\t\t\twhile(obj.hasClass(\"jstree-open\")) {\n\t\t\t\t\tobj = obj.children(\".jstree-children:eq(0)\").children(\".jstree-node:last\");\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\ttmp = obj[0].parentNode.parentNode;\n\t\t\treturn tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;\n\t\t},\n\t\t/**\n\t\t * get the parent ID of a node\n\t\t * @name get_parent(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {String}\n\t\t */\n\t\tget_parent : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn obj.parent;\n\t\t},\n\t\t/**\n\t\t * get a jQuery collection of all the children of a node (node must be rendered)\n\t\t * @name get_children_dom(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {jQuery}\n\t\t */\n\t\tget_children_dom : function (obj) {\n\t\t\tobj = this.get_node(obj, true);\n\t\t\tif(obj[0] === this.element[0]) {\n\t\t\t\treturn this.get_container_ul().children(\".jstree-node\");\n\t\t\t}\n\t\t\tif(!obj || !obj.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn obj.children(\".jstree-children\").children(\".jstree-node\");\n\t\t},\n\t\t/**\n\t\t * checks if a node has children\n\t\t * @name is_parent(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_parent : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn obj && (obj.state.loaded === false || obj.children.length > 0);\n\t\t},\n\t\t/**\n\t\t * checks if a node is loaded (its children are available)\n\t\t * @name is_loaded(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_loaded : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn obj && obj.state.loaded;\n\t\t},\n\t\t/**\n\t\t * check if a node is currently loading (fetching children)\n\t\t * @name is_loading(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_loading : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn obj && obj.state && obj.state.loading;\n\t\t},\n\t\t/**\n\t\t * check if a node is opened\n\t\t * @name is_open(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_open : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn obj && obj.state.opened;\n\t\t},\n\t\t/**\n\t\t * check if a node is in a closed state\n\t\t * @name is_closed(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_closed : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn obj && this.is_parent(obj) && !obj.state.opened;\n\t\t},\n\t\t/**\n\t\t * check if a node has no children\n\t\t * @name is_leaf(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_leaf : function (obj) {\n\t\t\treturn !this.is_parent(obj);\n\t\t},\n\t\t/**\n\t\t * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.\n\t\t * @name load_node(obj [, callback])\n\t\t * @param  {mixed} obj\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status\n\t\t * @return {Boolean}\n\t\t * @trigger load_node.jstree\n\t\t */\n\t\tload_node : function (obj, callback) {\n\t\t\tvar k, l, i, j, c;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tthis._load_nodes(obj.slice(), callback);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj) {\n\t\t\t\tif(callback) { callback.call(this, obj, false); }\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?\n\t\t\tif(obj.state.loaded) {\n\t\t\t\tobj.state.loaded = false;\n\t\t\t\tfor(k = 0, l = obj.children_d.length; k < l; k++) {\n\t\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\n\t\t\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_remove_item(this._model.data[obj.parents[i]].children_d, obj.children_d[k]);\n\t\t\t\t\t}\n\t\t\t\t\tif(this._model.data[obj.children_d[k]].state.selected) {\n\t\t\t\t\t\tc = true;\n\t\t\t\t\t\tthis._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.children_d[k]);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._model.data[obj.children_d[k]];\n\t\t\t\t}\n\t\t\t\tobj.children = [];\n\t\t\t\tobj.children_d = [];\n\t\t\t\tif(c) {\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'load_node', 'node' : obj, 'selected' : this._data.core.selected });\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.state.loading = true;\n\t\t\tthis.get_node(obj, true).addClass(\"jstree-loading\");\n\t\t\tthis._load_node(obj, $.proxy(function (status) {\n\t\t\t\tobj = this._model.data[obj.id];\n\t\t\t\tobj.state.loading = false;\n\t\t\t\tobj.state.loaded = status;\n\t\t\t\tvar dom = this.get_node(obj, true);\n\t\t\t\tif(obj.state.loaded && !obj.children.length && dom && dom.length && !dom.hasClass('jstree-leaf')) {\n\t\t\t\t\tdom.removeClass('jstree-closed jstree-open').addClass('jstree-leaf');\n\t\t\t\t}\n\t\t\t\tdom.removeClass(\"jstree-loading\");\n\t\t\t\t/**\n\t\t\t\t * triggered after a node is loaded\n\t\t\t\t * @event\n\t\t\t\t * @name load_node.jstree\n\t\t\t\t * @param {Object} node the node that was loading\n\t\t\t\t * @param {Boolean} status was the node loaded successfully\n\t\t\t\t */\n\t\t\t\tthis.trigger('load_node', { \"node\" : obj, \"status\" : status });\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback.call(this, obj, status);\n\t\t\t\t}\n\t\t\t}, this));\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.\n\t\t * @private\n\t\t * @name _load_nodes(nodes [, callback])\n\t\t * @param  {array} nodes\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes\n\t\t */\n\t\t_load_nodes : function (nodes, callback, is_callback) {\n\t\t\tvar r = true,\n\t\t\t\tc = function () { this._load_nodes(nodes, callback, true); },\n\t\t\t\tm = this._model.data, i, j;\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\n\t\t\t\tif(m[nodes[i]] && (!m[nodes[i]].state.loaded || !is_callback)) {\n\t\t\t\t\tif(!this.is_loading(nodes[i])) {\n\t\t\t\t\t\tthis.load_node(nodes[i], c);\n\t\t\t\t\t}\n\t\t\t\t\tr = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(r) {\n\t\t\t\tif(callback && !callback.done) {\n\t\t\t\t\tcallback.call(this, nodes);\n\t\t\t\t\tcallback.done = true;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * handles the actual loading of a node. Used only internally.\n\t\t * @private\n\t\t * @name _load_node(obj [, callback])\n\t\t * @param  {mixed} obj\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status\n\t\t * @return {Boolean}\n\t\t */\n\t\t_load_node : function (obj, callback) {\n\t\t\tvar s = this.settings.core.data, t;\n\t\t\t// use original HTML\n\t\t\tif(!s) {\n\t\t\t\tif(obj.id === '#') {\n\t\t\t\t\treturn this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {\n\t\t\t\t\t\tcallback.call(this, status);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn callback.call(this, false);\n\t\t\t\t}\n\t\t\t\t// return callback.call(this, obj.id === '#' ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);\n\t\t\t}\n\t\t\tif($.isFunction(s)) {\n\t\t\t\treturn s.call(this, obj, $.proxy(function (d) {\n\t\t\t\t\tif(d === false) {\n\t\t\t\t\t\tcallback.call(this, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d, function (status) {\n\t\t\t\t\t\tcallback.call(this, status);\n\t\t\t\t\t});\n\t\t\t\t\t// return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));\n\t\t\t\t}, this));\n\t\t\t}\n\t\t\tif(typeof s === 'object') {\n\t\t\t\tif(s.url) {\n\t\t\t\t\ts = $.extend(true, {}, s);\n\t\t\t\t\tif($.isFunction(s.url)) {\n\t\t\t\t\t\ts.url = s.url.call(this, obj);\n\t\t\t\t\t}\n\t\t\t\t\tif($.isFunction(s.data)) {\n\t\t\t\t\t\ts.data = s.data.call(this, obj);\n\t\t\t\t\t}\n\t\t\t\t\treturn $.ajax(s)\n\t\t\t\t\t\t.done($.proxy(function (d,t,x) {\n\t\t\t\t\t\t\t\tvar type = x.getResponseHeader('Content-Type');\n\t\t\t\t\t\t\t\tif(type.indexOf('json') !== -1 || typeof d === \"object\") {\n\t\t\t\t\t\t\t\t\treturn this._append_json_data(obj, d, function (status) { callback.call(this, status); });\n\t\t\t\t\t\t\t\t\t//return callback.call(this, this._append_json_data(obj, d));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(type.indexOf('html') !== -1 || typeof d === \"string\") {\n\t\t\t\t\t\t\t\t\treturn this._append_html_data(obj, $(d), function (status) { callback.call(this, status); });\n\t\t\t\t\t\t\t\t\t// return callback.call(this, this._append_html_data(obj, $(d)));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : x }) };\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\t\t\t\t\treturn callback.call(this, false);\n\t\t\t\t\t\t\t}, this))\n\t\t\t\t\t\t.fail($.proxy(function (f) {\n\t\t\t\t\t\t\t\tcallback.call(this, false);\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : f }) };\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\t\t\t\t}, this));\n\t\t\t\t}\n\t\t\t\tt = ($.isArray(s) || $.isPlainObject(s)) ? JSON.parse(JSON.stringify(s)) : s;\n\t\t\t\tif(obj.id === '#') {\n\t\t\t\t\treturn this._append_json_data(obj, t, function (status) {\n\t\t\t\t\t\tcallback.call(this, status);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_05', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\t\treturn callback.call(this, false);\n\t\t\t\t}\n\t\t\t\t//return callback.call(this, (obj.id === \"#\" ? this._append_json_data(obj, t) : false) );\n\t\t\t}\n\t\t\tif(typeof s === 'string') {\n\t\t\t\tif(obj.id === '#') {\n\t\t\t\t\treturn this._append_html_data(obj, $(s), function (status) {\n\t\t\t\t\t\tcallback.call(this, status);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_06', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\t\treturn callback.call(this, false);\n\t\t\t\t}\n\t\t\t\t//return callback.call(this, (obj.id === \"#\" ? this._append_html_data(obj, $(s)) : false) );\n\t\t\t}\n\t\t\treturn callback.call(this, false);\n\t\t},\n\t\t/**\n\t\t * adds a node to the list of nodes to redraw. Used only internally.\n\t\t * @private\n\t\t * @name _node_changed(obj [, callback])\n\t\t * @param  {mixed} obj\n\t\t */\n\t\t_node_changed : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(obj) {\n\t\t\t\tthis._model.changed.push(obj.id);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * appends HTML content to the tree. Used internally.\n\t\t * @private\n\t\t * @name _append_html_data(obj, data)\n\t\t * @param  {mixed} obj the node to append to\n\t\t * @param  {String} data the HTML string to parse and append\n\t\t * @trigger model.jstree, changed.jstree\n\t\t */\n\t\t_append_html_data : function (dom, data, cb) {\n\t\t\tdom = this.get_node(dom);\n\t\t\tdom.children = [];\n\t\t\tdom.children_d = [];\n\t\t\tvar dat = data.is('ul') ? data.children() : data,\n\t\t\t\tpar = dom.id,\n\t\t\t\tchd = [],\n\t\t\t\tdpc = [],\n\t\t\t\tm = this._model.data,\n\t\t\t\tp = m[par],\n\t\t\t\ts = this._data.core.selected.length,\n\t\t\t\ttmp, i, j;\n\t\t\tdat.each($.proxy(function (i, v) {\n\t\t\t\ttmp = this._parse_model_from_html($(v), par, p.parents.concat());\n\t\t\t\tif(tmp) {\n\t\t\t\t\tchd.push(tmp);\n\t\t\t\t\tdpc.push(tmp);\n\t\t\t\t\tif(m[tmp].children_d.length) {\n\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this));\n\t\t\tp.children = chd;\n\t\t\tp.children_d = dpc;\n\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\n\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\n\t\t\t}\n\t\t\t/**\n\t\t\t * triggered when new data is inserted to the tree model\n\t\t\t * @event\n\t\t\t * @name model.jstree\n\t\t\t * @param {Array} nodes an array of node IDs\n\t\t\t * @param {String} parent the parent ID of the nodes\n\t\t\t */\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, 'parent' : par });\n\t\t\tif(par !== '#') {\n\t\t\t\tthis._node_changed(par);\n\t\t\t\tthis.redraw();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.get_container_ul().children('.jstree-initial-node').remove();\n\t\t\t\tthis.redraw(true);\n\t\t\t}\n\t\t\tif(this._data.core.selected.length !== s) {\n\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\n\t\t\t}\n\t\t\tcb.call(this, true);\n\t\t},\n\t\t/**\n\t\t * appends JSON content to the tree. Used internally.\n\t\t * @private\n\t\t * @name _append_json_data(obj, data)\n\t\t * @param  {mixed} obj the node to append to\n\t\t * @param  {String} data the JSON object to parse and append\n\t\t * @trigger model.jstree, changed.jstree\n\t\t */\n\t\t_append_json_data : function (dom, data, cb) {\n\t\t\tdom = this.get_node(dom);\n\t\t\tdom.children = [];\n\t\t\tdom.children_d = [];\n\t\t\t// *%$@!!!\n\t\t\tif(data.d) {\n\t\t\t\tdata = data.d;\n\t\t\t\tif(typeof data === \"string\") {\n\t\t\t\t\tdata = JSON.parse(data);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!$.isArray(data)) { data = [data]; }\n\t\t\tvar w = null,\n\t\t\t\targs = {\n\t\t\t\t\t'df'\t: this._model.default_state,\n\t\t\t\t\t'dat'\t: data,\n\t\t\t\t\t'par'\t: dom.id,\n\t\t\t\t\t'm'\t\t: this._model.data,\n\t\t\t\t\t't_id'\t: this._id,\n\t\t\t\t\t't_cnt'\t: this._cnt,\n\t\t\t\t\t'sel'\t: this._data.core.selected\n\t\t\t\t},\n\t\t\t\tfunc = function (data, undefined) {\n\t\t\t\t\tif(data.data) { data = data.data; }\n\t\t\t\t\tvar dat = data.dat,\n\t\t\t\t\t\tpar = data.par,\n\t\t\t\t\t\tchd = [],\n\t\t\t\t\t\tdpc = [],\n\t\t\t\t\t\tadd = [],\n\t\t\t\t\t\tdf = data.df,\n\t\t\t\t\t\tt_id = data.t_id,\n\t\t\t\t\t\tt_cnt = data.t_cnt,\n\t\t\t\t\t\tm = data.m,\n\t\t\t\t\t\tp = m[par],\n\t\t\t\t\t\tsel = data.sel,\n\t\t\t\t\t\ttmp, i, j, rslt,\n\t\t\t\t\t\tparse_flat = function (d, p, ps) {\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\n\t\t\t\t\t\t\tvar tid = d.id.toString(),\n\t\t\t\t\t\t\t\ti, j, c, e,\n\t\t\t\t\t\t\t\ttmp = {\n\t\t\t\t\t\t\t\t\tid\t\t\t: tid,\n\t\t\t\t\t\t\t\t\ttext\t\t: d.text || '',\n\t\t\t\t\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\n\t\t\t\t\t\t\t\t\tparent\t\t: p,\n\t\t\t\t\t\t\t\t\tparents\t\t: ps,\n\t\t\t\t\t\t\t\t\tchildren\t: d.children || [],\n\t\t\t\t\t\t\t\t\tchildren_d\t: d.children_d || [],\n\t\t\t\t\t\t\t\t\tdata\t\t: d.data,\n\t\t\t\t\t\t\t\t\tstate\t\t: { },\n\t\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\n\t\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\n\t\t\t\t\t\t\t\t\toriginal\t: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfor(i in df) {\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && d.data) {\n\t\t\t\t\t\t\t\ttmp.data = d.data;\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\n\t\t\t\t\t\t\t\tfor (i in d.state) {\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tid;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\n\t\t\t\t\t\t\t\ttmp.children = [];\n\t\t\t\t\t\t\t\ttmp.children_d = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\n\t\t\t\t\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\n\t\t\t\t\t\t\t\tc = parse_flat(m[tmp.children[i]], tmp.id, ps);\n\t\t\t\t\t\t\t\te = m[c];\n\t\t\t\t\t\t\t\ttmp.children_d.push(c);\n\t\t\t\t\t\t\t\tif(e.children_d.length) {\n\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete d.data;\n\t\t\t\t\t\t\tdelete d.children;\n\t\t\t\t\t\t\tm[tmp.id].original = d;\n\t\t\t\t\t\t\tif(tmp.state.selected) {\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn tmp.id;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparse_nest = function (d, p, ps) {\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\n\t\t\t\t\t\t\tvar tid = false, i, j, c, e, tmp;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\ttid = 'j' + t_id + '_' + (++t_cnt);\n\t\t\t\t\t\t\t} while(m[tid]);\n\n\t\t\t\t\t\t\ttmp = {\n\t\t\t\t\t\t\t\tid\t\t\t: false,\n\t\t\t\t\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\n\t\t\t\t\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\n\t\t\t\t\t\t\t\tparent\t\t: p,\n\t\t\t\t\t\t\t\tparents\t\t: ps,\n\t\t\t\t\t\t\t\tchildren\t: [],\n\t\t\t\t\t\t\t\tchildren_d\t: [],\n\t\t\t\t\t\t\t\tdata\t\t: null,\n\t\t\t\t\t\t\t\tstate\t\t: { },\n\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\n\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\n\t\t\t\t\t\t\t\toriginal\t: false\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfor(i in df) {\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\n\t\t\t\t\t\t\tif(d && d.text) { tmp.text = d.text; }\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && d.data) {\n\t\t\t\t\t\t\t\ttmp.data = d.data;\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\n\t\t\t\t\t\t\t\tfor (i in d.state) {\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(tmp.li_attr.id && !tmp.id) {\n\t\t\t\t\t\t\t\ttmp.id = tmp.li_attr.id.toString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!tmp.id) {\n\t\t\t\t\t\t\t\ttmp.id = tid;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tmp.id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && d.children && d.children.length) {\n\t\t\t\t\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\tc = parse_nest(d.children[i], tmp.id, ps);\n\t\t\t\t\t\t\t\t\te = m[c];\n\t\t\t\t\t\t\t\t\ttmp.children.push(c);\n\t\t\t\t\t\t\t\t\tif(e.children_d.length) {\n\t\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\n\t\t\t\t\t\t\t\ttmp.children = [];\n\t\t\t\t\t\t\t\ttmp.children_d = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete d.data;\n\t\t\t\t\t\t\tdelete d.children;\n\t\t\t\t\t\t\ttmp.original = d;\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\n\t\t\t\t\t\t\tif(tmp.state.selected) {\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn tmp.id;\n\t\t\t\t\t\t};\n\n\t\t\t\t\tif(dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {\n\t\t\t\t\t\t// Flat JSON support (for easy import from DB):\n\t\t\t\t\t\t// 1) convert to object (foreach)\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\n\t\t\t\t\t\t\tif(!dat[i].children) {\n\t\t\t\t\t\t\t\tdat[i].children = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tm[dat[i].id.toString()] = dat[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 2) populate children (foreach)\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\n\t\t\t\t\t\t\tm[dat[i].parent.toString()].children.push(dat[i].id.toString());\n\t\t\t\t\t\t\t// populate parent.children_d\n\t\t\t\t\t\t\tp.children_d.push(dat[i].id.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 3) normalize && populate parents and children_d with recursion\n\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\n\t\t\t\t\t\t\ttmp = parse_flat(m[p.children[i]], par, p.parents.concat());\n\t\t\t\t\t\t\tdpc.push(tmp);\n\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\n\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;\n\t\t\t\t\t\trslt = {\n\t\t\t\t\t\t\t'cnt' : t_cnt,\n\t\t\t\t\t\t\t'mod' : m,\n\t\t\t\t\t\t\t'sel' : sel,\n\t\t\t\t\t\t\t'par' : par,\n\t\t\t\t\t\t\t'dpc' : dpc,\n\t\t\t\t\t\t\t'add' : add\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\n\t\t\t\t\t\t\ttmp = parse_nest(dat[i], par, p.parents.concat());\n\t\t\t\t\t\t\tif(tmp) {\n\t\t\t\t\t\t\t\tchd.push(tmp);\n\t\t\t\t\t\t\t\tdpc.push(tmp);\n\t\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\n\t\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.children = chd;\n\t\t\t\t\t\tp.children_d = dpc;\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trslt = {\n\t\t\t\t\t\t\t'cnt' : t_cnt,\n\t\t\t\t\t\t\t'mod' : m,\n\t\t\t\t\t\t\t'sel' : sel,\n\t\t\t\t\t\t\t'par' : par,\n\t\t\t\t\t\t\t'dpc' : dpc,\n\t\t\t\t\t\t\t'add' : add\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn rslt;\n\t\t\t\t},\n\t\t\t\trslt = function (rslt, worker) {\n\t\t\t\t\tthis._cnt = rslt.cnt;\n\t\t\t\t\tthis._model.data = rslt.mod; // breaks the reference in load_node - careful\n\n\t\t\t\t\tif(worker) {\n\t\t\t\t\t\tvar i, j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice(), m = this._model.data;\n\t\t\t\t\t\t// if selection was changed while calculating in worker\n\t\t\t\t\t\tif(r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {\n\t\t\t\t\t\t\t// deselect nodes that are no longer selected\n\t\t\t\t\t\t\tfor(i = 0, j = r.length; i < j; i++) {\n\t\t\t\t\t\t\t\tif($.inArray(r[i], a) === -1 && $.inArray(r[i], s) === -1) {\n\t\t\t\t\t\t\t\t\tm[r[i]].state.selected = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// select nodes that were selected in the mean time\n\t\t\t\t\t\t\tfor(i = 0, j = s.length; i < j; i++) {\n\t\t\t\t\t\t\t\tif($.inArray(s[i], r) === -1) {\n\t\t\t\t\t\t\t\t\tm[s[i]].state.selected = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(rslt.add.length) {\n\t\t\t\t\t\tthis._data.core.selected = this._data.core.selected.concat(rslt.add);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.trigger('model', { \"nodes\" : rslt.dpc, 'parent' : rslt.par });\n\n\t\t\t\t\tif(rslt.par !== '#') {\n\t\t\t\t\t\tthis._node_changed(rslt.par);\n\t\t\t\t\t\tthis.redraw();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// this.get_container_ul().children('.jstree-initial-node').remove();\n\t\t\t\t\t\tthis.redraw(true);\n\t\t\t\t\t}\n\t\t\t\t\tif(rslt.add.length) {\n\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\n\t\t\t\t\t}\n\t\t\t\t\tcb.call(this, true);\n\t\t\t\t};\n\t\t\tif(this.settings.core.worker && window.Blob && window.URL && window.Worker) {\n\t\t\t\ttry {\n\t\t\t\t\tif(this._wrk === null) {\n\t\t\t\t\t\tthis._wrk = window.URL.createObjectURL(\n\t\t\t\t\t\t\tnew window.Blob(\n\t\t\t\t\t\t\t\t['self.onmessage = ' + func.toString().replace(/return ([^;}]+)[\\s;}]+$/, 'postMessage($1);}')],\n\t\t\t\t\t\t\t\t{type:\"text/javascript\"}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tw = new window.Worker(this._wrk);\n\t\t\t\t\tw.onmessage = $.proxy(function (e) {\n\t\t\t\t\t\trslt.call(this, e.data, true);\n\t\t\t\t\t\tthis._data.core.working = false;\n\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\n\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this);\n\t\t\t\t\tif(!this._data.core.working) {\n\t\t\t\t\t\tthis._data.core.working = true;\n\t\t\t\t\t\tw.postMessage(args);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._data.core.worker_queue.push([dom, data, cb]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch(e) {\n\t\t\t\t\trslt.call(this, func(args), false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\trslt.call(this, func(args), false);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.\n\t\t * @private\n\t\t * @name _parse_model_from_html(d [, p, ps])\n\t\t * @param  {jQuery} d the jQuery object to parse\n\t\t * @param  {String} p the parent ID\n\t\t * @param  {Array} ps list of all parents\n\t\t * @return {String} the ID of the object added to the model\n\t\t */\n\t\t_parse_model_from_html : function (d, p, ps) {\n\t\t\tif(!ps) { ps = []; }\n\t\t\telse { ps = [].concat(ps); }\n\t\t\tif(p) { ps.unshift(p); }\n\t\t\tvar c, e, m = this._model.data,\n\t\t\t\tdata = {\n\t\t\t\t\tid\t\t\t: false,\n\t\t\t\t\ttext\t\t: false,\n\t\t\t\t\ticon\t\t: true,\n\t\t\t\t\tparent\t\t: p,\n\t\t\t\t\tparents\t\t: ps,\n\t\t\t\t\tchildren\t: [],\n\t\t\t\t\tchildren_d\t: [],\n\t\t\t\t\tdata\t\t: null,\n\t\t\t\t\tstate\t\t: { },\n\t\t\t\t\tli_attr\t\t: { id : false },\n\t\t\t\t\ta_attr\t\t: { href : '#' },\n\t\t\t\t\toriginal\t: false\n\t\t\t\t}, i, tmp, tid;\n\t\t\tfor(i in this._model.default_state) {\n\t\t\t\tif(this._model.default_state.hasOwnProperty(i)) {\n\t\t\t\t\tdata.state[i] = this._model.default_state[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp = $.vakata.attributes(d, true);\n\t\t\t$.each(tmp, function (i, v) {\n\t\t\t\tv = $.trim(v);\n\t\t\t\tif(!v.length) { return true; }\n\t\t\t\tdata.li_attr[i] = v;\n\t\t\t\tif(i === 'id') {\n\t\t\t\t\tdata.id = v.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t\ttmp = d.children('a').eq(0);\n\t\t\tif(tmp.length) {\n\t\t\t\ttmp = $.vakata.attributes(tmp, true);\n\t\t\t\t$.each(tmp, function (i, v) {\n\t\t\t\t\tv = $.trim(v);\n\t\t\t\t\tif(v.length) {\n\t\t\t\t\t\tdata.a_attr[i] = v;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\ttmp = d.children(\"a:eq(0)\").length ? d.children(\"a:eq(0)\").clone() : d.clone();\n\t\t\ttmp.children(\"ins, i, ul\").remove();\n\t\t\ttmp = tmp.html();\n\t\t\ttmp = $('<div />').html(tmp);\n\t\t\tdata.text = this.settings.core.force_text ? tmp.text() : tmp.html();\n\t\t\ttmp = d.data();\n\t\t\tdata.data = tmp ? $.extend(true, {}, tmp) : null;\n\t\t\tdata.state.opened = d.hasClass('jstree-open');\n\t\t\tdata.state.selected = d.children('a').hasClass('jstree-clicked');\n\t\t\tdata.state.disabled = d.children('a').hasClass('jstree-disabled');\n\t\t\tif(data.data && data.data.jstree) {\n\t\t\t\tfor(i in data.data.jstree) {\n\t\t\t\t\tif(data.data.jstree.hasOwnProperty(i)) {\n\t\t\t\t\t\tdata.state[i] = data.data.jstree[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp = d.children(\"a\").children(\".jstree-themeicon\");\n\t\t\tif(tmp.length) {\n\t\t\t\tdata.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');\n\t\t\t}\n\t\t\tif(data.state.icon) {\n\t\t\t\tdata.icon = data.state.icon;\n\t\t\t}\n\t\t\ttmp = d.children(\"ul\").children(\"li\");\n\t\t\tdo {\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\n\t\t\t} while(m[tid]);\n\t\t\tdata.id = data.li_attr.id ? data.li_attr.id.toString() : tid;\n\t\t\tif(tmp.length) {\n\t\t\t\ttmp.each($.proxy(function (i, v) {\n\t\t\t\t\tc = this._parse_model_from_html($(v), data.id, ps);\n\t\t\t\t\te = this._model.data[c];\n\t\t\t\t\tdata.children.push(c);\n\t\t\t\t\tif(e.children_d.length) {\n\t\t\t\t\t\tdata.children_d = data.children_d.concat(e.children_d);\n\t\t\t\t\t}\n\t\t\t\t}, this));\n\t\t\t\tdata.children_d = data.children_d.concat(data.children);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(d.hasClass('jstree-closed')) {\n\t\t\t\t\tdata.state.loaded = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(data.li_attr['class']) {\n\t\t\t\tdata.li_attr['class'] = data.li_attr['class'].replace('jstree-closed','').replace('jstree-open','');\n\t\t\t}\n\t\t\tif(data.a_attr['class']) {\n\t\t\t\tdata.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked','').replace('jstree-disabled','');\n\t\t\t}\n\t\t\tm[data.id] = data;\n\t\t\tif(data.state.selected) {\n\t\t\t\tthis._data.core.selected.push(data.id);\n\t\t\t}\n\t\t\treturn data.id;\n\t\t},\n\t\t/**\n\t\t * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.\n\t\t * @private\n\t\t * @name _parse_model_from_flat_json(d [, p, ps])\n\t\t * @param  {Object} d the JSON object to parse\n\t\t * @param  {String} p the parent ID\n\t\t * @param  {Array} ps list of all parents\n\t\t * @return {String} the ID of the object added to the model\n\t\t */\n\t\t_parse_model_from_flat_json : function (d, p, ps) {\n\t\t\tif(!ps) { ps = []; }\n\t\t\telse { ps = ps.concat(); }\n\t\t\tif(p) { ps.unshift(p); }\n\t\t\tvar tid = d.id.toString(),\n\t\t\t\tm = this._model.data,\n\t\t\t\tdf = this._model.default_state,\n\t\t\t\ti, j, c, e,\n\t\t\t\ttmp = {\n\t\t\t\t\tid\t\t\t: tid,\n\t\t\t\t\ttext\t\t: d.text || '',\n\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\n\t\t\t\t\tparent\t\t: p,\n\t\t\t\t\tparents\t\t: ps,\n\t\t\t\t\tchildren\t: d.children || [],\n\t\t\t\t\tchildren_d\t: d.children_d || [],\n\t\t\t\t\tdata\t\t: d.data,\n\t\t\t\t\tstate\t\t: { },\n\t\t\t\t\tli_attr\t\t: { id : false },\n\t\t\t\t\ta_attr\t\t: { href : '#' },\n\t\t\t\t\toriginal\t: false\n\t\t\t\t};\n\t\t\tfor(i in df) {\n\t\t\t\tif(df.hasOwnProperty(i)) {\n\t\t\t\t\ttmp.state[i] = df[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\n\t\t\t\ttmp.icon = d.data.jstree.icon;\n\t\t\t}\n\t\t\tif(d && d.data) {\n\t\t\t\ttmp.data = d.data;\n\t\t\t\tif(d.data.jstree) {\n\t\t\t\t\tfor(i in d.data.jstree) {\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && typeof d.state === 'object') {\n\t\t\t\tfor (i in d.state) {\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && typeof d.li_attr === 'object') {\n\t\t\t\tfor (i in d.li_attr) {\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!tmp.li_attr.id) {\n\t\t\t\ttmp.li_attr.id = tid;\n\t\t\t}\n\t\t\tif(d && typeof d.a_attr === 'object') {\n\t\t\t\tfor (i in d.a_attr) {\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && d.children && d.children === true) {\n\t\t\t\ttmp.state.loaded = false;\n\t\t\t\ttmp.children = [];\n\t\t\t\ttmp.children_d = [];\n\t\t\t}\n\t\t\tm[tmp.id] = tmp;\n\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\n\t\t\t\tc = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);\n\t\t\t\te = m[c];\n\t\t\t\ttmp.children_d.push(c);\n\t\t\t\tif(e.children_d.length) {\n\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete d.data;\n\t\t\tdelete d.children;\n\t\t\tm[tmp.id].original = d;\n\t\t\tif(tmp.state.selected) {\n\t\t\t\tthis._data.core.selected.push(tmp.id);\n\t\t\t}\n\t\t\treturn tmp.id;\n\t\t},\n\t\t/**\n\t\t * parses a node from a JSON object and appends it to the in memory tree model. Used internally.\n\t\t * @private\n\t\t * @name _parse_model_from_json(d [, p, ps])\n\t\t * @param  {Object} d the JSON object to parse\n\t\t * @param  {String} p the parent ID\n\t\t * @param  {Array} ps list of all parents\n\t\t * @return {String} the ID of the object added to the model\n\t\t */\n\t\t_parse_model_from_json : function (d, p, ps) {\n\t\t\tif(!ps) { ps = []; }\n\t\t\telse { ps = ps.concat(); }\n\t\t\tif(p) { ps.unshift(p); }\n\t\t\tvar tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;\n\t\t\tdo {\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\n\t\t\t} while(m[tid]);\n\n\t\t\ttmp = {\n\t\t\t\tid\t\t\t: false,\n\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\n\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\n\t\t\t\tparent\t\t: p,\n\t\t\t\tparents\t\t: ps,\n\t\t\t\tchildren\t: [],\n\t\t\t\tchildren_d\t: [],\n\t\t\t\tdata\t\t: null,\n\t\t\t\tstate\t\t: { },\n\t\t\t\tli_attr\t\t: { id : false },\n\t\t\t\ta_attr\t\t: { href : '#' },\n\t\t\t\toriginal\t: false\n\t\t\t};\n\t\t\tfor(i in df) {\n\t\t\t\tif(df.hasOwnProperty(i)) {\n\t\t\t\t\ttmp.state[i] = df[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\n\t\t\tif(d && d.text) { tmp.text = d.text; }\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\n\t\t\t\ttmp.icon = d.data.jstree.icon;\n\t\t\t}\n\t\t\tif(d && d.data) {\n\t\t\t\ttmp.data = d.data;\n\t\t\t\tif(d.data.jstree) {\n\t\t\t\t\tfor(i in d.data.jstree) {\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && typeof d.state === 'object') {\n\t\t\t\tfor (i in d.state) {\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && typeof d.li_attr === 'object') {\n\t\t\t\tfor (i in d.li_attr) {\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tmp.li_attr.id && !tmp.id) {\n\t\t\t\ttmp.id = tmp.li_attr.id.toString();\n\t\t\t}\n\t\t\tif(!tmp.id) {\n\t\t\t\ttmp.id = tid;\n\t\t\t}\n\t\t\tif(!tmp.li_attr.id) {\n\t\t\t\ttmp.li_attr.id = tmp.id;\n\t\t\t}\n\t\t\tif(d && typeof d.a_attr === 'object') {\n\t\t\t\tfor (i in d.a_attr) {\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(d && d.children && d.children.length) {\n\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\n\t\t\t\t\tc = this._parse_model_from_json(d.children[i], tmp.id, ps);\n\t\t\t\t\te = m[c];\n\t\t\t\t\ttmp.children.push(c);\n\t\t\t\t\tif(e.children_d.length) {\n\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\n\t\t\t}\n\t\t\tif(d && d.children && d.children === true) {\n\t\t\t\ttmp.state.loaded = false;\n\t\t\t\ttmp.children = [];\n\t\t\t\ttmp.children_d = [];\n\t\t\t}\n\t\t\tdelete d.data;\n\t\t\tdelete d.children;\n\t\t\ttmp.original = d;\n\t\t\tm[tmp.id] = tmp;\n\t\t\tif(tmp.state.selected) {\n\t\t\t\tthis._data.core.selected.push(tmp.id);\n\t\t\t}\n\t\t\treturn tmp.id;\n\t\t},\n\t\t/**\n\t\t * redraws all nodes that need to be redrawn. Used internally.\n\t\t * @private\n\t\t * @name _redraw()\n\t\t * @trigger redraw.jstree\n\t\t */\n\t\t_redraw : function () {\n\t\t\tvar nodes = this._model.force_full_redraw ? this._model.data['#'].children.concat([]) : this._model.changed.concat([]),\n\t\t\t\tf = document.createElement('UL'), tmp, i, j;\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\n\t\t\t\ttmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);\n\t\t\t\tif(tmp && this._model.force_full_redraw) {\n\t\t\t\t\tf.appendChild(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(this._model.force_full_redraw) {\n\t\t\t\tf.className = this.get_container_ul()[0].className;\n\t\t\t\tthis.element.empty().append(f);\n\t\t\t\t//this.get_container_ul()[0].appendChild(f);\n\t\t\t}\n\t\t\tthis._model.force_full_redraw = false;\n\t\t\tthis._model.changed = [];\n\t\t\t/**\n\t\t\t * triggered after nodes are redrawn\n\t\t\t * @event\n\t\t\t * @name redraw.jstree\n\t\t\t * @param {array} nodes the redrawn nodes\n\t\t\t */\n\t\t\tthis.trigger('redraw', { \"nodes\" : nodes });\n\t\t},\n\t\t/**\n\t\t * redraws all nodes that need to be redrawn or optionally - the whole tree\n\t\t * @name redraw([full])\n\t\t * @param {Boolean} full if set to `true` all nodes are redrawn.\n\t\t */\n\t\tredraw : function (full) {\n\t\t\tif(full) {\n\t\t\t\tthis._model.force_full_redraw = true;\n\t\t\t}\n\t\t\t//if(this._model.redraw_timeout) {\n\t\t\t//\tclearTimeout(this._model.redraw_timeout);\n\t\t\t//}\n\t\t\t//this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);\n\t\t\tthis._redraw();\n\t\t},\n\t\t/**\n\t\t * redraws a single node. Used internally.\n\t\t * @private\n\t\t * @name redraw_node(node, deep, is_callback)\n\t\t * @param {mixed} node the node to redraw\n\t\t * @param {Boolean} deep should child nodes be redrawn too\n\t\t * @param {Boolean} is_callback is this a recursion call\n\t\t */\n\t\tredraw_node : function (node, deep, is_callback) {\n\t\t\tvar obj = this.get_node(node),\n\t\t\t\tpar = false,\n\t\t\t\tind = false,\n\t\t\t\told = false,\n\t\t\t\ti = false,\n\t\t\t\tj = false,\n\t\t\t\tk = false,\n\t\t\t\tc = '',\n\t\t\t\td = document,\n\t\t\t\tm = this._model.data,\n\t\t\t\tf = false,\n\t\t\t\ts = false,\n\t\t\t\ttmp = null;\n\t\t\tif(!obj) { return false; }\n\t\t\tif(obj.id === '#') {  return this.redraw(true); }\n\t\t\tdeep = deep || obj.children.length === 0;\n\t\t\tnode = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + (\"0123456789\".indexOf(obj.id[0]) !== -1 ? '\\\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex,'\\\\$&') : obj.id.replace($.jstree.idregex,'\\\\$&')) ); //, this.element);\n\t\t\tif(!node) {\n\t\t\t\tdeep = true;\n\t\t\t\t//node = d.createElement('LI');\n\t\t\t\tif(!is_callback) {\n\t\t\t\t\tpar = obj.parent !== '#' ? $('#' + obj.parent.replace($.jstree.idregex,'\\\\$&'), this.element)[0] : null;\n\t\t\t\t\tif(par !== null && (!par || !m[obj.parent].state.opened)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tind = $.inArray(obj.id, par === null ? m['#'].children : m[obj.parent].children);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnode = $(node);\n\t\t\t\tif(!is_callback) {\n\t\t\t\t\tpar = node.parent().parent()[0];\n\t\t\t\t\tif(par === this.element[0]) {\n\t\t\t\t\t\tpar = null;\n\t\t\t\t\t}\n\t\t\t\t\tind = node.index();\n\t\t\t\t}\n\t\t\t\t// m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage\n\t\t\t\tif(!deep && obj.children.length && !node.children('.jstree-children').length) {\n\t\t\t\t\tdeep = true;\n\t\t\t\t}\n\t\t\t\tif(!deep) {\n\t\t\t\t\told = node.children('.jstree-children')[0];\n\t\t\t\t}\n\t\t\t\ts = node.attr('aria-selected');\n\t\t\t\tf = node.children('.jstree-anchor')[0] === document.activeElement;\n\t\t\t\tnode.remove();\n\t\t\t\t//node = d.createElement('LI');\n\t\t\t\t//node = node[0];\n\t\t\t}\n\t\t\tnode = _node.cloneNode(true);\n\t\t\t// node is DOM, deep is boolean\n\n\t\t\tc = 'jstree-node ';\n\t\t\tfor(i in obj.li_attr) {\n\t\t\t\tif(obj.li_attr.hasOwnProperty(i)) {\n\t\t\t\t\tif(i === 'id') { continue; }\n\t\t\t\t\tif(i !== 'class') {\n\t\t\t\t\t\tnode.setAttribute(i, obj.li_attr[i]);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tc += obj.li_attr[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(s && s !== \"false\") {\n\t\t\t\tnode.setAttribute('aria-selected', true);\n\t\t\t}\n\t\t\tif(obj.state.loaded && !obj.children.length) {\n\t\t\t\tc += ' jstree-leaf';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tc += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';\n\t\t\t\tnode.setAttribute('aria-expanded', (obj.state.opened && obj.state.loaded) );\n\t\t\t}\n\t\t\tif(obj.parent !== null && m[obj.parent].children[m[obj.parent].children.length - 1] === obj.id) {\n\t\t\t\tc += ' jstree-last';\n\t\t\t}\n\t\t\tnode.id = obj.id;\n\t\t\tnode.className = c;\n\t\t\tc = ( obj.state.selected ? ' jstree-clicked' : '') + ( obj.state.disabled ? ' jstree-disabled' : '');\n\t\t\tfor(j in obj.a_attr) {\n\t\t\t\tif(obj.a_attr.hasOwnProperty(j)) {\n\t\t\t\t\tif(j === 'href' && obj.a_attr[j] === '#') { continue; }\n\t\t\t\t\tif(j !== 'class') {\n\t\t\t\t\t\tnode.childNodes[1].setAttribute(j, obj.a_attr[j]);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tc += ' ' + obj.a_attr[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c.length) {\n\t\t\t\tnode.childNodes[1].className = 'jstree-anchor ' + c;\n\t\t\t}\n\t\t\tif((obj.icon && obj.icon !== true) || obj.icon === false) {\n\t\t\t\tif(obj.icon === false) {\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';\n\t\t\t\t}\n\t\t\t\telse if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundImage = 'url('+obj.icon+')';\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundSize = 'auto';\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(this.settings.core.force_text) {\n\t\t\t\tnode.childNodes[1].appendChild(d.createTextNode(obj.text));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnode.childNodes[1].innerHTML += obj.text;\n\t\t\t}\n\n\t\t\tif(deep && obj.children.length && obj.state.opened && obj.state.loaded) {\n\t\t\t\tk = d.createElement('UL');\n\t\t\t\tk.setAttribute('role', 'group');\n\t\t\t\tk.className = 'jstree-children';\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], deep, true));\n\t\t\t\t}\n\t\t\t\tnode.appendChild(k);\n\t\t\t}\n\t\t\tif(old) {\n\t\t\t\tnode.appendChild(old);\n\t\t\t}\n\t\t\tif(!is_callback) {\n\t\t\t\t// append back using par / ind\n\t\t\t\tif(!par) {\n\t\t\t\t\tpar = this.element[0];\n\t\t\t\t}\n\t\t\t\tfor(i = 0, j = par.childNodes.length; i < j; i++) {\n\t\t\t\t\tif(par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {\n\t\t\t\t\t\ttmp = par.childNodes[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!tmp) {\n\t\t\t\t\ttmp = d.createElement('UL');\n\t\t\t\t\ttmp.setAttribute('role', 'group');\n\t\t\t\t\ttmp.className = 'jstree-children';\n\t\t\t\t\tpar.appendChild(tmp);\n\t\t\t\t}\n\t\t\t\tpar = tmp;\n\n\t\t\t\tif(ind < par.childNodes.length) {\n\t\t\t\t\tpar.insertBefore(node, par.childNodes[ind]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpar.appendChild(node);\n\t\t\t\t}\n\t\t\t\tif(f) {\n\t\t\t\t\tnode.childNodes[1].focus();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(obj.state.opened && !obj.state.loaded) {\n\t\t\t\tobj.state.opened = false;\n\t\t\t\tsetTimeout($.proxy(function () {\n\t\t\t\t\tthis.open_node(obj.id, false, 0);\n\t\t\t\t}, this), 0);\n\t\t\t}\n\t\t\treturn node;\n\t\t},\n\t\t/**\n\t\t * opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.\n\t\t * @name open_node(obj [, callback, animation])\n\t\t * @param {mixed} obj the node to open\n\t\t * @param {Function} callback a function to execute once the node is opened\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.\n\t\t * @trigger open_node.jstree, after_open.jstree, before_open.jstree\n\t\t */\n\t\topen_node : function (obj, callback, animation) {\n\t\t\tvar t1, t2, d, t;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.open_node(obj[t1], callback, animation);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\n\t\t\tif(!this.is_closed(obj)) {\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback.call(this, obj, false);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(!this.is_loaded(obj)) {\n\t\t\t\tif(this.is_loading(obj)) {\n\t\t\t\t\treturn setTimeout($.proxy(function () {\n\t\t\t\t\t\tthis.open_node(obj, callback, animation);\n\t\t\t\t\t}, this), 500);\n\t\t\t\t}\n\t\t\t\tthis.load_node(obj, function (o, ok) {\n\t\t\t\t\treturn ok ? this.open_node(o, callback, animation) : (callback ? callback.call(this, o, false) : false);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\td = this.get_node(obj, true);\n\t\t\t\tt = this;\n\t\t\t\tif(d.length) {\n\t\t\t\t\tif(obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {\n\t\t\t\t\t\tobj.state.opened = true;\n\t\t\t\t\t\tthis.redraw_node(obj, true);\n\t\t\t\t\t\td = this.get_node(obj, true);\n\t\t\t\t\t}\n\t\t\t\t\tif(!animation) {\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\n\t\t\t\t\t\td[0].className = d[0].className.replace('jstree-closed', 'jstree-open');\n\t\t\t\t\t\td[0].setAttribute(\"aria-expanded\", true);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\n\t\t\t\t\t\td\n\t\t\t\t\t\t\t.children(\".jstree-children\").css(\"display\",\"none\").end()\n\t\t\t\t\t\t\t.removeClass(\"jstree-closed\").addClass(\"jstree-open\").attr(\"aria-expanded\", true)\n\t\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true)\n\t\t\t\t\t\t\t\t.slideDown(animation, function () {\n\t\t\t\t\t\t\t\t\tthis.style.display = \"\";\n\t\t\t\t\t\t\t\t\tt.trigger(\"after_open\", { \"node\" : obj });\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.state.opened = true;\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback.call(this, obj, true);\n\t\t\t\t}\n\t\t\t\tif(!d.length) {\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)\n\t\t\t\t\t * @event\n\t\t\t\t\t * @name before_open.jstree\n\t\t\t\t\t * @param {Object} node the opened node\n\t\t\t\t\t */\n\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * triggered when a node is opened (if there is an animation it will not be completed yet)\n\t\t\t\t * @event\n\t\t\t\t * @name open_node.jstree\n\t\t\t\t * @param {Object} node the opened node\n\t\t\t\t */\n\t\t\t\tthis.trigger('open_node', { \"node\" : obj });\n\t\t\t\tif(!animation || !d.length) {\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered when a node is opened and the animation is complete\n\t\t\t\t\t * @event\n\t\t\t\t\t * @name after_open.jstree\n\t\t\t\t\t * @param {Object} node the opened node\n\t\t\t\t\t */\n\t\t\t\t\tthis.trigger(\"after_open\", { \"node\" : obj });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * opens every parent of a node (node should be loaded)\n\t\t * @name _open_to(obj)\n\t\t * @param {mixed} obj the node to reveal\n\t\t * @private\n\t\t */\n\t\t_open_to : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar i, j, p = obj.parents;\n\t\t\tfor(i = 0, j = p.length; i < j; i+=1) {\n\t\t\t\tif(i !== '#') {\n\t\t\t\t\tthis.open_node(p[i], false, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\n\t\t},\n\t\t/**\n\t\t * closes a node, hiding its children\n\t\t * @name close_node(obj [, animation])\n\t\t * @param {mixed} obj the node to close\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.\n\t\t * @trigger close_node.jstree, after_close.jstree\n\t\t */\n\t\tclose_node : function (obj, animation) {\n\t\t\tvar t1, t2, t, d;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.close_node(obj[t1], animation);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(this.is_closed(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\n\t\t\tt = this;\n\t\t\td = this.get_node(obj, true);\n\t\t\tif(d.length) {\n\t\t\t\tif(!animation) {\n\t\t\t\t\td[0].className = d[0].className.replace('jstree-open', 'jstree-closed');\n\t\t\t\t\td.attr(\"aria-expanded\", false).children('.jstree-children').remove();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\td\n\t\t\t\t\t\t.children(\".jstree-children\").attr(\"style\",\"display:block !important\").end()\n\t\t\t\t\t\t.removeClass(\"jstree-open\").addClass(\"jstree-closed\").attr(\"aria-expanded\", false)\n\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true).slideUp(animation, function () {\n\t\t\t\t\t\t\tthis.style.display = \"\";\n\t\t\t\t\t\t\td.children('.jstree-children').remove();\n\t\t\t\t\t\t\tt.trigger(\"after_close\", { \"node\" : obj });\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.state.opened = false;\n\t\t\t/**\n\t\t\t * triggered when a node is closed (if there is an animation it will not be complete yet)\n\t\t\t * @event\n\t\t\t * @name close_node.jstree\n\t\t\t * @param {Object} node the closed node\n\t\t\t */\n\t\t\tthis.trigger('close_node',{ \"node\" : obj });\n\t\t\tif(!animation || !d.length) {\n\t\t\t\t/**\n\t\t\t\t * triggered when a node is closed and the animation is complete\n\t\t\t\t * @event\n\t\t\t\t * @name after_close.jstree\n\t\t\t\t * @param {Object} node the closed node\n\t\t\t\t */\n\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * toggles a node - closing it if it is open, opening it if it is closed\n\t\t * @name toggle_node(obj)\n\t\t * @param {mixed} obj the node to toggle\n\t\t */\n\t\ttoggle_node : function (obj) {\n\t\t\tvar t1, t2;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.toggle_node(obj[t1]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif(this.is_closed(obj)) {\n\t\t\t\treturn this.open_node(obj);\n\t\t\t}\n\t\t\tif(this.is_open(obj)) {\n\t\t\t\treturn this.close_node(obj);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.\n\t\t * @name open_all([obj, animation, original_obj])\n\t\t * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation\n\t\t * @param {jQuery} reference to the node that started the process (internal use)\n\t\t * @trigger open_all.jstree\n\t\t */\n\t\topen_all : function (obj, animation, original_obj) {\n\t\t\tif(!obj) { obj = '#'; }\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj) { return false; }\n\t\t\tvar dom = obj.id === '#' ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;\n\t\t\tif(!dom.length) {\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\tif(this.is_closed(this._model.data[obj.children_d[i]])) {\n\t\t\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.trigger('open_all', { \"node\" : obj });\n\t\t\t}\n\t\t\toriginal_obj = original_obj || dom;\n\t\t\t_this = this;\n\t\t\tdom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');\n\t\t\tdom.each(function () {\n\t\t\t\t_this.open_node(\n\t\t\t\t\tthis,\n\t\t\t\t\tfunction(node, status) { if(status && this.is_parent(node)) { this.open_all(node, animation, original_obj); } },\n\t\t\t\t\tanimation || 0\n\t\t\t\t);\n\t\t\t});\n\t\t\tif(original_obj.find('.jstree-closed').length === 0) {\n\t\t\t\t/**\n\t\t\t\t * triggered when an `open_all` call completes\n\t\t\t\t * @event\n\t\t\t\t * @name open_all.jstree\n\t\t\t\t * @param {Object} node the opened node\n\t\t\t\t */\n\t\t\t\tthis.trigger('open_all', { \"node\" : this.get_node(original_obj) });\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * closes all nodes within a node (or the tree), revaling their children\n\t\t * @name close_all([obj, animation])\n\t\t * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation\n\t\t * @trigger close_all.jstree\n\t\t */\n\t\tclose_all : function (obj, animation) {\n\t\t\tif(!obj) { obj = '#'; }\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj) { return false; }\n\t\t\tvar dom = obj.id === '#' ? this.get_container_ul() : this.get_node(obj, true),\n\t\t\t\t_this = this, i, j;\n\t\t\tif(!dom.length) {\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = false;\n\t\t\t\t}\n\t\t\t\treturn this.trigger('close_all', { \"node\" : obj });\n\t\t\t}\n\t\t\tdom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');\n\t\t\t$(dom.get().reverse()).each(function () { _this.close_node(this, animation || 0); });\n\t\t\t/**\n\t\t\t * triggered when an `close_all` call completes\n\t\t\t * @event\n\t\t\t * @name close_all.jstree\n\t\t\t * @param {Object} node the closed node\n\t\t\t */\n\t\t\tthis.trigger('close_all', { \"node\" : obj });\n\t\t},\n\t\t/**\n\t\t * checks if a node is disabled (not selectable)\n\t\t * @name is_disabled(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_disabled : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn obj && obj.state && obj.state.disabled;\n\t\t},\n\t\t/**\n\t\t * enables a node - so that it can be selected\n\t\t * @name enable_node(obj)\n\t\t * @param {mixed} obj the node to enable\n\t\t * @trigger enable_node.jstree\n\t\t */\n\t\tenable_node : function (obj) {\n\t\t\tvar t1, t2;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.enable_node(obj[t1]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj.state.disabled = false;\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').removeClass('jstree-disabled');\n\t\t\t/**\n\t\t\t * triggered when an node is enabled\n\t\t\t * @event\n\t\t\t * @name enable_node.jstree\n\t\t\t * @param {Object} node the enabled node\n\t\t\t */\n\t\t\tthis.trigger('enable_node', { 'node' : obj });\n\t\t},\n\t\t/**\n\t\t * disables a node - so that it can not be selected\n\t\t * @name disable_node(obj)\n\t\t * @param {mixed} obj the node to disable\n\t\t * @trigger disable_node.jstree\n\t\t */\n\t\tdisable_node : function (obj) {\n\t\t\tvar t1, t2;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.disable_node(obj[t1]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj.state.disabled = true;\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').addClass('jstree-disabled');\n\t\t\t/**\n\t\t\t * triggered when an node is disabled\n\t\t\t * @event\n\t\t\t * @name disable_node.jstree\n\t\t\t * @param {Object} node the disabled node\n\t\t\t */\n\t\t\tthis.trigger('disable_node', { 'node' : obj });\n\t\t},\n\t\t/**\n\t\t * called when a node is selected by the user. Used internally.\n\t\t * @private\n\t\t * @name activate_node(obj, e)\n\t\t * @param {mixed} obj the node\n\t\t * @param {Object} e the related event\n\t\t * @trigger activate_node.jstree\n\t\t */\n\t\tactivate_node : function (obj, e) {\n\t\t\tif(this.is_disabled(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node\n\t\t\tthis._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;\n\t\t\tif(this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) { this._data.core.last_clicked = null; }\n\t\t\tif(!this._data.core.last_clicked && this._data.core.selected.length) { this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]); }\n\n\t\t\tif(!this.settings.core.multiple || (!e.metaKey && !e.ctrlKey && !e.shiftKey) || (e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent ) )) {\n\t\t\t\tif(!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {\n\t\t\t\t\tthis.deselect_node(obj, false, e);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.deselect_all(true);\n\t\t\t\t\tthis.select_node(obj, false, false, e);\n\t\t\t\t\tthis._data.core.last_clicked = this.get_node(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(e.shiftKey) {\n\t\t\t\t\tvar o = this.get_node(obj).id,\n\t\t\t\t\t\tl = this._data.core.last_clicked.id,\n\t\t\t\t\t\tp = this.get_node(this._data.core.last_clicked.parent).children,\n\t\t\t\t\t\tc = false,\n\t\t\t\t\t\ti, j;\n\t\t\t\t\tfor(i = 0, j = p.length; i < j; i += 1) {\n\t\t\t\t\t\t// separate IFs work whem o and l are the same\n\t\t\t\t\t\tif(p[i] === o) {\n\t\t\t\t\t\t\tc = !c;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(p[i] === l) {\n\t\t\t\t\t\t\tc = !c;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(c || p[i] === o || p[i] === l) {\n\t\t\t\t\t\t\tthis.select_node(p[i], false, false, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.deselect_node(p[i], false, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!this.is_selected(obj)) {\n\t\t\t\t\t\tthis.select_node(obj, false, false, e);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.deselect_node(obj, false, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/**\n\t\t\t * triggered when an node is clicked or intercated with by the user\n\t\t\t * @event\n\t\t\t * @name activate_node.jstree\n\t\t\t * @param {Object} node\n\t\t\t */\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj) });\n\t\t},\n\t\t/**\n\t\t * applies the hover state on a node, called when a node is hovered by the user. Used internally.\n\t\t * @private\n\t\t * @name hover_node(obj)\n\t\t * @param {mixed} obj\n\t\t * @trigger hover_node.jstree\n\t\t */\n\t\thover_node : function (obj) {\n\t\t\tobj = this.get_node(obj, true);\n\t\t\tif(!obj || !obj.length || obj.children('.jstree-hovered').length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar o = this.element.find('.jstree-hovered'), t = this.element;\n\t\t\tif(o && o.length) { this.dehover_node(o); }\n\n\t\t\tobj.children('.jstree-anchor').addClass('jstree-hovered');\n\t\t\t/**\n\t\t\t * triggered when an node is hovered\n\t\t\t * @event\n\t\t\t * @name hover_node.jstree\n\t\t\t * @param {Object} node\n\t\t\t */\n\t\t\tthis.trigger('hover_node', { 'node' : this.get_node(obj) });\n\t\t\tsetTimeout(function () { t.attr('aria-activedescendant', obj[0].id); obj.attr('aria-selected', true); }, 0);\n\t\t},\n\t\t/**\n\t\t * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.\n\t\t * @private\n\t\t * @name dehover_node(obj)\n\t\t * @param {mixed} obj\n\t\t * @trigger dehover_node.jstree\n\t\t */\n\t\tdehover_node : function (obj) {\n\t\t\tobj = this.get_node(obj, true);\n\t\t\tif(!obj || !obj.length || !obj.children('.jstree-hovered').length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj.attr('aria-selected', false).children('.jstree-anchor').removeClass('jstree-hovered');\n\t\t\t/**\n\t\t\t * triggered when an node is no longer hovered\n\t\t\t * @event\n\t\t\t * @name dehover_node.jstree\n\t\t\t * @param {Object} node\n\t\t\t */\n\t\t\tthis.trigger('dehover_node', { 'node' : this.get_node(obj) });\n\t\t},\n\t\t/**\n\t\t * select a node\n\t\t * @name select_node(obj [, supress_event, prevent_open])\n\t\t * @param {mixed} obj an array can be used to select multiple nodes\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n\t\t * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened\n\t\t * @trigger select_node.jstree, changed.jstree\n\t\t */\n\t\tselect_node : function (obj, supress_event, prevent_open, e) {\n\t\t\tvar dom, t1, t2, th;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.select_node(obj[t1], supress_event, prevent_open, e);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdom = this.get_node(obj, true);\n\t\t\tif(!obj.state.selected) {\n\t\t\t\tobj.state.selected = true;\n\t\t\t\tthis._data.core.selected.push(obj.id);\n\t\t\t\tif(!prevent_open) {\n\t\t\t\t\tdom = this._open_to(obj);\n\t\t\t\t}\n\t\t\t\tif(dom && dom.length) {\n\t\t\t\t\tdom.children('.jstree-anchor').addClass('jstree-clicked');\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * triggered when an node is selected\n\t\t\t\t * @event\n\t\t\t\t * @name select_node.jstree\n\t\t\t\t * @param {Object} node\n\t\t\t\t * @param {Array} selected the current selection\n\t\t\t\t * @param {Object} event the event (if any) that triggered this select_node\n\t\t\t\t */\n\t\t\t\tthis.trigger('select_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\n\t\t\t\tif(!supress_event) {\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered when selection changes\n\t\t\t\t\t * @event\n\t\t\t\t\t * @name changed.jstree\n\t\t\t\t\t * @param {Object} node\n\t\t\t\t\t * @param {Object} action the action that caused the selection to change\n\t\t\t\t\t * @param {Array} selected the current selection\n\t\t\t\t\t * @param {Object} event the event (if any) that triggered this changed event\n\t\t\t\t\t */\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * deselect a node\n\t\t * @name deselect_node(obj [, supress_event])\n\t\t * @param {mixed} obj an array can be used to deselect multiple nodes\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n\t\t * @trigger deselect_node.jstree, changed.jstree\n\t\t */\n\t\tdeselect_node : function (obj, supress_event, e) {\n\t\t\tvar t1, t2, dom;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.deselect_node(obj[t1], supress_event, e);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdom = this.get_node(obj, true);\n\t\t\tif(obj.state.selected) {\n\t\t\t\tobj.state.selected = false;\n\t\t\t\tthis._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);\n\t\t\t\tif(dom.length) {\n\t\t\t\t\tdom.children('.jstree-anchor').removeClass('jstree-clicked');\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * triggered when an node is deselected\n\t\t\t\t * @event\n\t\t\t\t * @name deselect_node.jstree\n\t\t\t\t * @param {Object} node\n\t\t\t\t * @param {Array} selected the current selection\n\t\t\t\t * @param {Object} event the event (if any) that triggered this deselect_node\n\t\t\t\t */\n\t\t\t\tthis.trigger('deselect_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\n\t\t\t\tif(!supress_event) {\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * select all nodes in the tree\n\t\t * @name select_all([supress_event])\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n\t\t * @trigger select_all.jstree, changed.jstree\n\t\t */\n\t\tselect_all : function (supress_event) {\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\n\t\t\tthis._data.core.selected = this._model.data['#'].children_d.concat();\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.redraw(true);\n\t\t\t/**\n\t\t\t * triggered when all nodes are selected\n\t\t\t * @event\n\t\t\t * @name select_all.jstree\n\t\t\t * @param {Array} selected the current selection\n\t\t\t */\n\t\t\tthis.trigger('select_all', { 'selected' : this._data.core.selected });\n\t\t\tif(!supress_event) {\n\t\t\t\tthis.trigger('changed', { 'action' : 'select_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * deselect all selected nodes\n\t\t * @name deselect_all([supress_event])\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\n\t\t * @trigger deselect_all.jstree, changed.jstree\n\t\t */\n\t\tdeselect_all : function (supress_event) {\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._data.core.selected = [];\n\t\t\tthis.element.find('.jstree-clicked').removeClass('jstree-clicked');\n\t\t\t/**\n\t\t\t * triggered when all nodes are deselected\n\t\t\t * @event\n\t\t\t * @name deselect_all.jstree\n\t\t\t * @param {Object} node the previous selection\n\t\t\t * @param {Array} selected the current selection\n\t\t\t */\n\t\t\tthis.trigger('deselect_all', { 'selected' : this._data.core.selected, 'node' : tmp });\n\t\t\tif(!supress_event) {\n\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * checks if a node is selected\n\t\t * @name is_selected(obj)\n\t\t * @param  {mixed}  obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tis_selected : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn obj.state.selected;\n\t\t},\n\t\t/**\n\t\t * get an array of all selected nodes\n\t\t * @name get_selected([full])\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n\t\t * @return {Array}\n\t\t */\n\t\tget_selected : function (full) {\n\t\t\treturn full ? $.map(this._data.core.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.core.selected.slice();\n\t\t},\n\t\t/**\n\t\t * get an array of all top level selected nodes (ignoring children of selected nodes)\n\t\t * @name get_top_selected([full])\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n\t\t * @return {Array}\n\t\t */\n\t\tget_top_selected : function (full) {\n\t\t\tvar tmp = this.get_selected(true),\n\t\t\t\tobj = {}, i, j, k, l;\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\tobj[tmp[i].id] = tmp[i];\n\t\t\t}\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp = [];\n\t\t\tfor(i in obj) {\n\t\t\t\tif(obj.hasOwnProperty(i)) {\n\t\t\t\t\ttmp.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\n\t\t},\n\t\t/**\n\t\t * get an array of all bottom level selected nodes (ignoring selected parents)\n\t\t * @name get_bottom_selected([full])\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n\t\t * @return {Array}\n\t\t */\n\t\tget_bottom_selected : function (full) {\n\t\t\tvar tmp = this.get_selected(true),\n\t\t\t\tobj = [], i, j;\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\tif(!tmp[i].children.length) {\n\t\t\t\t\tobj.push(tmp[i].id);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\n\t\t},\n\t\t/**\n\t\t * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.\n\t\t * @name get_state()\n\t\t * @private\n\t\t * @return {Object}\n\t\t */\n\t\tget_state : function () {\n\t\t\tvar state\t= {\n\t\t\t\t'core' : {\n\t\t\t\t\t'open' : [],\n\t\t\t\t\t'scroll' : {\n\t\t\t\t\t\t'left' : this.element.scrollLeft(),\n\t\t\t\t\t\t'top' : this.element.scrollTop()\n\t\t\t\t\t},\n\t\t\t\t\t/*!\n\t\t\t\t\t'themes' : {\n\t\t\t\t\t\t'name' : this.get_theme(),\n\t\t\t\t\t\t'icons' : this._data.core.themes.icons,\n\t\t\t\t\t\t'dots' : this._data.core.themes.dots\n\t\t\t\t\t},\n\t\t\t\t\t*/\n\t\t\t\t\t'selected' : []\n\t\t\t\t}\n\t\t\t}, i;\n\t\t\tfor(i in this._model.data) {\n\t\t\t\tif(this._model.data.hasOwnProperty(i)) {\n\t\t\t\t\tif(i !== '#') {\n\t\t\t\t\t\tif(this._model.data[i].state.opened) {\n\t\t\t\t\t\t\tstate.core.open.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this._model.data[i].state.selected) {\n\t\t\t\t\t\t\tstate.core.selected.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn state;\n\t\t},\n\t\t/**\n\t\t * sets the state of the tree. Used internally.\n\t\t * @name set_state(state [, callback])\n\t\t * @private\n\t\t * @param {Object} state the state to restore\n\t\t * @param {Function} callback an optional function to execute once the state is restored.\n\t\t * @trigger set_state.jstree\n\t\t */\n\t\tset_state : function (state, callback) {\n\t\t\tif(state) {\n\t\t\t\tif(state.core) {\n\t\t\t\t\tvar res, n, t, _this;\n\t\t\t\t\tif(state.core.open) {\n\t\t\t\t\t\tif(!$.isArray(state.core.open)) {\n\t\t\t\t\t\t\tdelete state.core.open;\n\t\t\t\t\t\t\tthis.set_state(state, callback);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tres = true;\n\t\t\t\t\t\tn = false;\n\t\t\t\t\t\tt = this;\n\t\t\t\t\t\t$.each(state.core.open.concat([]), function (i, v) {\n\t\t\t\t\t\t\tn = t.get_node(v);\n\t\t\t\t\t\t\tif(n) {\n\t\t\t\t\t\t\t\tif(t.is_loaded(v)) {\n\t\t\t\t\t\t\t\t\tif(t.is_closed(v)) {\n\t\t\t\t\t\t\t\t\t\tt.open_node(v, false, 0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(state && state.core && state.core.open) {\n\t\t\t\t\t\t\t\t\t\t$.vakata.array_remove_item(state.core.open, v);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tif(!t.is_loading(v)) {\n\t\t\t\t\t\t\t\t\t\tt.open_node(v, $.proxy(function (o, s) {\n\t\t\t\t\t\t\t\t\t\t\tif(!s && state && state.core && state.core.open) {\n\t\t\t\t\t\t\t\t\t\t\t\t$.vakata.array_remove_item(state.core.open, o.id);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tthis.set_state(state, callback);\n\t\t\t\t\t\t\t\t\t\t}, t), 0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// there will be some async activity - so wait for it\n\t\t\t\t\t\t\t\t\tres = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif(res) {\n\t\t\t\t\t\t\tdelete state.core.open;\n\t\t\t\t\t\t\tthis.set_state(state, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif(state.core.scroll) {\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.left !== undefined) {\n\t\t\t\t\t\t\tthis.element.scrollLeft(state.core.scroll.left);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.top !== undefined) {\n\t\t\t\t\t\t\tthis.element.scrollTop(state.core.scroll.top);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete state.core.scroll;\n\t\t\t\t\t\tthis.set_state(state, callback);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t/*!\n\t\t\t\t\tif(state.core.themes) {\n\t\t\t\t\t\tif(state.core.themes.name) {\n\t\t\t\t\t\t\tthis.set_theme(state.core.themes.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(typeof state.core.themes.dots !== 'undefined') {\n\t\t\t\t\t\t\tthis[ state.core.themes.dots ? \"show_dots\" : \"hide_dots\" ]();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(typeof state.core.themes.icons !== 'undefined') {\n\t\t\t\t\t\t\tthis[ state.core.themes.icons ? \"show_icons\" : \"hide_icons\" ]();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete state.core.themes;\n\t\t\t\t\t\tdelete state.core.open;\n\t\t\t\t\t\tthis.set_state(state, callback);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tif(state.core.selected) {\n\t\t\t\t\t\t_this = this;\n\t\t\t\t\t\tthis.deselect_all();\n\t\t\t\t\t\t$.each(state.core.selected, function (i, v) {\n\t\t\t\t\t\t\t_this.select_node(v);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdelete state.core.selected;\n\t\t\t\t\t\tthis.set_state(state, callback);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif($.isEmptyObject(state.core)) {\n\t\t\t\t\t\tdelete state.core;\n\t\t\t\t\t\tthis.set_state(state, callback);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif($.isEmptyObject(state)) {\n\t\t\t\t\tstate = null;\n\t\t\t\t\tif(callback) { callback.call(this); }\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered when a `set_state` call completes\n\t\t\t\t\t * @event\n\t\t\t\t\t * @name set_state.jstree\n\t\t\t\t\t */\n\t\t\t\t\tthis.trigger('set_state');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\t/**\n\t\t * refreshes the tree - all nodes are reloaded with calls to `load_node`.\n\t\t * @name refresh()\n\t\t * @param {Boolean} skip_loading an option to skip showing the loading indicator\n\t\t * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state\n\t\t * @trigger refresh.jstree\n\t\t */\n\t\trefresh : function (skip_loading, forget_state) {\n\t\t\tthis._data.core.state = forget_state === true ? {} : this.get_state();\n\t\t\tif(forget_state && $.isFunction(forget_state)) { this._data.core.state = forget_state.call(this, this._data.core.state); }\n\t\t\tthis._cnt = 0;\n\t\t\tthis._model.data = {\n\t\t\t\t'#' : {\n\t\t\t\t\tid : '#',\n\t\t\t\t\tparent : null,\n\t\t\t\t\tparents : [],\n\t\t\t\t\tchildren : [],\n\t\t\t\t\tchildren_d : [],\n\t\t\t\t\tstate : { loaded : false }\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar c = this.get_container_ul()[0].className;\n\t\t\tif(!skip_loading) {\n\t\t\t\tthis.element.html(\"<\"+\"ul class='\"+c+\"'><\"+\"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\n\t\t\t}\n\t\t\tthis.load_node('#', function (o, s) {\n\t\t\t\tif(s) {\n\t\t\t\t\tthis.get_container_ul()[0].className = c;\n\t\t\t\t\tthis.set_state($.extend(true, {}, this._data.core.state), function () {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * triggered when a `refresh` call completes\n\t\t\t\t\t\t * @event\n\t\t\t\t\t\t * @name refresh.jstree\n\t\t\t\t\t\t */\n\t\t\t\t\t\tthis.trigger('refresh');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis._data.core.state = null;\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.\n\t\t * @name refresh_node(obj)\n\t\t * @param  {mixed} obj the node\n\t\t * @trigger refresh_node.jstree\n\t\t */\n\t\trefresh_node : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\tvar opened = [], to_load = [], s = this._data.core.selected.concat([]);\n\t\t\tto_load.push(obj.id);\n\t\t\tif(obj.state.opened === true) { opened.push(obj.id); }\n\t\t\tthis.get_node(obj, true).find('.jstree-open').each(function() { opened.push(this.id); });\n\t\t\tthis._load_nodes(to_load, $.proxy(function (nodes) {\n\t\t\t\tthis.open_node(opened, false, 0);\n\t\t\t\tthis.select_node(this._data.core.selected);\n\t\t\t\t/**\n\t\t\t\t * triggered when a node is refreshed\n\t\t\t\t * @event\n\t\t\t\t * @name refresh_node.jstree\n\t\t\t\t * @param {Object} node - the refreshed node\n\t\t\t\t * @param {Array} nodes - an array of the IDs of the nodes that were reloaded\n\t\t\t\t */\n\t\t\t\tthis.trigger('refresh_node', { 'node' : obj, 'nodes' : nodes });\n\t\t\t}, this));\n\t\t},\n\t\t/**\n\t\t * set (change) the ID of a node\n\t\t * @name set_id(obj, id)\n\t\t * @param  {mixed} obj the node\n\t\t * @param  {String} id the new ID\n\t\t * @return {Boolean}\n\t\t */\n\t\tset_id : function (obj, id) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\tvar i, j, m = this._model.data;\n\t\t\tid = id.toString();\n\t\t\t// update parents (replace current ID with new one in children and children_d)\n\t\t\tm[obj.parent].children[$.inArray(obj.id, m[obj.parent].children)] = id;\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\n\t\t\t\tm[obj.parents[i]].children_d[$.inArray(obj.id, m[obj.parents[i]].children_d)] = id;\n\t\t\t}\n\t\t\t// update children (replace current ID with new one in parent and parents)\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\n\t\t\t\tm[obj.children[i]].parent = id;\n\t\t\t}\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\tm[obj.children_d[i]].parents[$.inArray(obj.id, m[obj.children_d[i]].parents)] = id;\n\t\t\t}\n\t\t\ti = $.inArray(obj.id, this._data.core.selected);\n\t\t\tif(i !== -1) { this._data.core.selected[i] = id; }\n\t\t\t// update model and obj itself (obj.id, this._model.data[KEY])\n\t\t\ti = this.get_node(obj.id, true);\n\t\t\tif(i) {\n\t\t\t\ti.attr('id', id);\n\t\t\t}\n\t\t\tdelete m[obj.id];\n\t\t\tobj.id = id;\n\t\t\tm[id] = obj;\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * get the text value of a node\n\t\t * @name get_text(obj)\n\t\t * @param  {mixed} obj the node\n\t\t * @return {String}\n\t\t */\n\t\tget_text : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn (!obj || obj.id === '#') ? false : obj.text;\n\t\t},\n\t\t/**\n\t\t * set the text value of a node. Used internally, please use `rename_node(obj, val)`.\n\t\t * @private\n\t\t * @name set_text(obj, val)\n\t\t * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes\n\t\t * @param  {String} val the new text value\n\t\t * @return {Boolean}\n\t\t * @trigger set_text.jstree\n\t\t */\n\t\tset_text : function (obj, val) {\n\t\t\tvar t1, t2;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.set_text(obj[t1], val);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\tobj.text = val;\n\t\t\tif(this.get_node(obj, true).length) {\n\t\t\t\tthis.redraw_node(obj.id);\n\t\t\t}\n\t\t\t/**\n\t\t\t * triggered when a node text value is changed\n\t\t\t * @event\n\t\t\t * @name set_text.jstree\n\t\t\t * @param {Object} obj\n\t\t\t * @param {String} text the new value\n\t\t\t */\n\t\t\tthis.trigger('set_text',{ \"obj\" : obj, \"text\" : val });\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * gets a JSON representation of a node (or the whole tree)\n\t\t * @name get_json([obj, options])\n\t\t * @param  {mixed} obj\n\t\t * @param  {Object} options\n\t\t * @param  {Boolean} options.no_state do not return state information\n\t\t * @param  {Boolean} options.no_id do not return ID\n\t\t * @param  {Boolean} options.no_children do not include children\n\t\t * @param  {Boolean} options.no_data do not include node data\n\t\t * @param  {Boolean} options.flat return flat JSON instead of nested\n\t\t * @return {Object}\n\t\t */\n\t\tget_json : function (obj, options, flat) {\n\t\t\tobj = this.get_node(obj || '#');\n\t\t\tif(!obj) { return false; }\n\t\t\tif(options && options.flat && !flat) { flat = []; }\n\t\t\tvar tmp = {\n\t\t\t\t'id' : obj.id,\n\t\t\t\t'text' : obj.text,\n\t\t\t\t'icon' : this.get_icon(obj),\n\t\t\t\t'li_attr' : obj.li_attr,\n\t\t\t\t'a_attr' : obj.a_attr,\n\t\t\t\t'state' : {},\n\t\t\t\t'data' : options && options.no_data ? false : obj.data\n\t\t\t\t//( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),\n\t\t\t}, i, j;\n\t\t\tif(options && options.flat) {\n\t\t\t\ttmp.parent = obj.parent;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp.children = [];\n\t\t\t}\n\t\t\tif(!options || !options.no_state) {\n\t\t\t\tfor(i in obj.state) {\n\t\t\t\t\tif(obj.state.hasOwnProperty(i)) {\n\t\t\t\t\t\ttmp.state[i] = obj.state[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(options && options.no_id) {\n\t\t\t\tdelete tmp.id;\n\t\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\n\t\t\t\t\tdelete tmp.li_attr.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(options && options.flat && obj.id !== '#') {\n\t\t\t\tflat.push(tmp);\n\t\t\t}\n\t\t\tif(!options || !options.no_children) {\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\n\t\t\t\t\tif(options && options.flat) {\n\t\t\t\t\t\tthis.get_json(obj.children[i], options, flat);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttmp.children.push(this.get_json(obj.children[i], options));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn options && options.flat ? flat : (obj.id === '#' ? tmp.children : tmp);\n\t\t},\n\t\t/**\n\t\t * create a new node (do not confuse with load_node)\n\t\t * @name create_node([obj, node, pos, callback, is_loaded])\n\t\t * @param  {mixed}   par       the parent node (to create a root node use either \"#\" (string) or `null`)\n\t\t * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)\n\t\t * @param  {mixed}   pos       the index at which to insert the node, \"first\" and \"last\" are also supported, default is \"last\"\n\t\t * @param  {Function} callback a function to be called once the node is created\n\t\t * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded\n\t\t * @return {String}            the ID of the newly create node\n\t\t * @trigger model.jstree, create_node.jstree\n\t\t */\n\t\tcreate_node : function (par, node, pos, callback, is_loaded) {\n\t\t\tif(par === null) { par = \"#\"; }\n\t\t\tpar = this.get_node(par);\n\t\t\tif(!par) { return false; }\n\t\t\tpos = pos === undefined ? \"last\" : pos;\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n\t\t\t\treturn this.load_node(par, function () { this.create_node(par, node, pos, callback, true); });\n\t\t\t}\n\t\t\tif(!node) { node = { \"text\" : this.get_string('New node') }; }\n\t\t\tif(node.text === undefined) { node.text = this.get_string('New node'); }\n\t\t\tvar tmp, dpc, i, j;\n\n\t\t\tif(par.id === '#') {\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\n\t\t\t}\n\t\t\tswitch(pos) {\n\t\t\t\tcase \"before\":\n\t\t\t\t\ttmp = this.get_node(par.parent);\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children);\n\t\t\t\t\tpar = tmp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"after\" :\n\t\t\t\t\ttmp = this.get_node(par.parent);\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children) + 1;\n\t\t\t\t\tpar = tmp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"inside\":\n\t\t\t\tcase \"first\":\n\t\t\t\t\tpos = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"last\":\n\t\t\t\t\tpos = par.children.length;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif(!pos) { pos = 0; }\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(pos > par.children.length) { pos = par.children.length; }\n\t\t\tif(!node.id) { node.id = true; }\n\t\t\tif(!this.check(\"create_node\", node, par, pos)) {\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(node.id === true) { delete node.id; }\n\t\t\tnode = this._parse_model_from_json(node, par.id, par.parents.concat());\n\t\t\tif(!node) { return false; }\n\t\t\ttmp = this.get_node(node);\n\t\t\tdpc = [];\n\t\t\tdpc.push(node);\n\t\t\tdpc = dpc.concat(tmp.children_d);\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : par.id });\n\n\t\t\tpar.children_d = par.children_d.concat(dpc);\n\t\t\tfor(i = 0, j = par.parents.length; i < j; i++) {\n\t\t\t\tthis._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);\n\t\t\t}\n\t\t\tnode = tmp;\n\t\t\ttmp = [];\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\n\t\t\t\ttmp[i >= pos ? i+1 : i] = par.children[i];\n\t\t\t}\n\t\t\ttmp[pos] = node.id;\n\t\t\tpar.children = tmp;\n\n\t\t\tthis.redraw_node(par, true);\n\t\t\tif(callback) { callback.call(this, this.get_node(node)); }\n\t\t\t/**\n\t\t\t * triggered when a node is created\n\t\t\t * @event\n\t\t\t * @name create_node.jstree\n\t\t\t * @param {Object} node\n\t\t\t * @param {String} parent the parent's ID\n\t\t\t * @param {Number} position the position of the new node among the parent's children\n\t\t\t */\n\t\t\tthis.trigger('create_node', { \"node\" : this.get_node(node), \"parent\" : par.id, \"position\" : pos });\n\t\t\treturn node.id;\n\t\t},\n\t\t/**\n\t\t * set the text value of a node\n\t\t * @name rename_node(obj, val)\n\t\t * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name\n\t\t * @param  {String} val the new text value\n\t\t * @return {Boolean}\n\t\t * @trigger rename_node.jstree\n\t\t */\n\t\trename_node : function (obj, val) {\n\t\t\tvar t1, t2, old;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.rename_node(obj[t1], val);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\told = obj.text;\n\t\t\tif(!this.check(\"rename_node\", obj, this.get_parent(obj), val)) {\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))\n\t\t\t/**\n\t\t\t * triggered when a node is renamed\n\t\t\t * @event\n\t\t\t * @name rename_node.jstree\n\t\t\t * @param {Object} node\n\t\t\t * @param {String} text the new value\n\t\t\t * @param {String} old the old value\n\t\t\t */\n\t\t\tthis.trigger('rename_node', { \"node\" : obj, \"text\" : val, \"old\" : old });\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * remove a node\n\t\t * @name delete_node(obj)\n\t\t * @param  {mixed} obj the node, you can pass an array to delete multiple nodes\n\t\t * @return {Boolean}\n\t\t * @trigger delete_node.jstree, changed.jstree\n\t\t */\n\t\tdelete_node : function (obj) {\n\t\t\tvar t1, t2, par, pos, tmp, i, j, k, l, c;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.delete_node(obj[t1]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\tpar = this.get_node(obj.parent);\n\t\t\tpos = $.inArray(obj.id, par.children);\n\t\t\tc = false;\n\t\t\tif(!this.check(\"delete_node\", obj, par, pos)) {\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(pos !== -1) {\n\t\t\t\tpar.children = $.vakata.array_remove(par.children, pos);\n\t\t\t}\n\t\t\ttmp = obj.children_d.concat([]);\n\t\t\ttmp.push(obj.id);\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\n\t\t\t\t\tpos = $.inArray(tmp[k], this._model.data[obj.parents[i]].children_d);\n\t\t\t\t\tif(pos !== -1) {\n\t\t\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_remove(this._model.data[obj.parents[i]].children_d, pos);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(this._model.data[tmp[k]].state.selected) {\n\t\t\t\t\tc = true;\n\t\t\t\t\tpos = $.inArray(tmp[k], this._data.core.selected);\n\t\t\t\t\tif(pos !== -1) {\n\t\t\t\t\t\tthis._data.core.selected = $.vakata.array_remove(this._data.core.selected, pos);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/**\n\t\t\t * triggered when a node is deleted\n\t\t\t * @event\n\t\t\t * @name delete_node.jstree\n\t\t\t * @param {Object} node\n\t\t\t * @param {String} parent the parent's ID\n\t\t\t */\n\t\t\tthis.trigger('delete_node', { \"node\" : obj, \"parent\" : par.id });\n\t\t\tif(c) {\n\t\t\t\tthis.trigger('changed', { 'action' : 'delete_node', 'node' : obj, 'selected' : this._data.core.selected, 'parent' : par.id });\n\t\t\t}\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\n\t\t\t\tdelete this._model.data[tmp[k]];\n\t\t\t}\n\t\t\tthis.redraw_node(par, true);\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * check if an operation is premitted on the tree. Used internally.\n\t\t * @private\n\t\t * @name check(chk, obj, par, pos)\n\t\t * @param  {String} chk the operation to check, can be \"create_node\", \"rename_node\", \"delete_node\", \"copy_node\" or \"move_node\"\n\t\t * @param  {mixed} obj the node\n\t\t * @param  {mixed} par the parent\n\t\t * @param  {mixed} pos the position to insert at, or if \"rename_node\" - the new name\n\t\t * @param  {mixed} more some various additional information, for example if a \"move_node\" operations is triggered by DND this will be the hovered node\n\t\t * @return {Boolean}\n\t\t */\n\t\tcheck : function (chk, obj, par, pos, more) {\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\n\t\t\tpar = par && par.id ? par : this.get_node(par);\n\t\t\tvar tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj,\n\t\t\t\tchc = this.settings.core.check_callback;\n\t\t\tif(chk === \"move_node\" || chk === \"copy_node\") {\n\t\t\t\tif((!more || !more.is_multi) && (obj.id === par.id || $.inArray(obj.id, par.children) === pos || $.inArray(par.id, obj.children_d) !== -1)) {\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_01', 'reason' : 'Moving parent inside child', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tmp && tmp.data) { tmp = tmp.data; }\n\t\t\tif(tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {\n\t\t\t\tif(tmp.functions[chk] === false) {\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_02', 'reason' : 'Node data prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t}\n\t\t\t\treturn tmp.functions[chk];\n\t\t\t}\n\t\t\tif(chc === false || ($.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false) || (chc && chc[chk] === false)) {\n\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_03', 'reason' : 'User config for core.check_callback prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * get the last error\n\t\t * @name last_error()\n\t\t * @return {Object}\n\t\t */\n\t\tlast_error : function () {\n\t\t\treturn this._data.core.last_error;\n\t\t},\n\t\t/**\n\t\t * move a node to a new parent\n\t\t * @name move_node(obj, par [, pos, callback, is_loaded])\n\t\t * @param  {mixed} obj the node to move, pass an array to move multiple nodes\n\t\t * @param  {mixed} par the new parent\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\n\t\t * @param  {Boolean} internal parameter indicating if the parent node has been loaded\n\t\t * @trigger move_node.jstree\n\t\t */\n\t\tmove_node : function (obj, par, pos, callback, is_loaded) {\n\t\t\tvar t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;\n\n\t\t\tpar = this.get_node(par);\n\t\t\tpos = pos === undefined ? 0 : pos;\n\t\t\tif(!par) { return false; }\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n\t\t\t\treturn this.load_node(par, function () { this.move_node(obj, par, pos, callback, true); });\n\t\t\t}\n\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.reverse().slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.move_node(obj[t1], par, pos, callback, is_loaded);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\n\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\n\t\t\told_par = (obj.parent || '#').toString();\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === '#') ? par : this.get_node(par.parent);\n\t\t\told_ins = obj.instance ? obj.instance : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\n\t\t\told_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1;\n\t\t\tif(is_multi) {\n\t\t\t\tif(this.copy_node(obj, par, pos, callback, is_loaded)) {\n\t\t\t\t\tif(old_ins) { old_ins.delete_node(obj); }\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t//var m = this._model.data;\n\t\t\tif(new_par.id === '#') {\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\n\t\t\t}\n\t\t\tswitch(pos) {\n\t\t\t\tcase \"before\":\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"after\" :\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"inside\":\n\t\t\t\tcase \"first\":\n\t\t\t\t\tpos = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"last\":\n\t\t\t\t\tpos = new_par.children.length;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif(!pos) { pos = 0; }\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\n\t\t\tif(!this.check(\"move_node\", obj, new_par, pos, { 'core' : true, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(obj.parent === new_par.id) {\n\t\t\t\tdpc = new_par.children.concat();\n\t\t\t\ttmp = $.inArray(obj.id, dpc);\n\t\t\t\tif(tmp !== -1) {\n\t\t\t\t\tdpc = $.vakata.array_remove(dpc, tmp);\n\t\t\t\t\tif(pos > tmp) { pos--; }\n\t\t\t\t}\n\t\t\t\ttmp = [];\n\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\n\t\t\t\t\ttmp[i >= pos ? i+1 : i] = dpc[i];\n\t\t\t\t}\n\t\t\t\ttmp[pos] = obj.id;\n\t\t\t\tnew_par.children = tmp;\n\t\t\t\tthis._node_changed(new_par.id);\n\t\t\t\tthis.redraw(new_par.id === '#');\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// clean old parent and up\n\t\t\t\ttmp = obj.children_d.concat();\n\t\t\t\ttmp.push(obj.id);\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\n\t\t\t\t\tdpc = [];\n\t\t\t\t\tp = old_ins._model.data[obj.parents[i]].children_d;\n\t\t\t\t\tfor(k = 0, l = p.length; k < l; k++) {\n\t\t\t\t\t\tif($.inArray(p[k], tmp) === -1) {\n\t\t\t\t\t\t\tdpc.push(p[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\told_ins._model.data[obj.parents[i]].children_d = dpc;\n\t\t\t\t}\n\t\t\t\told_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);\n\n\t\t\t\t// insert into new parent and up\n\t\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\n\t\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);\n\t\t\t\t}\n\t\t\t\tdpc = [];\n\t\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\n\t\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\n\t\t\t\t}\n\t\t\t\tdpc[pos] = obj.id;\n\t\t\t\tnew_par.children = dpc;\n\t\t\t\tnew_par.children_d.push(obj.id);\n\t\t\t\tnew_par.children_d = new_par.children_d.concat(obj.children_d);\n\n\t\t\t\t// update object\n\t\t\t\tobj.parent = new_par.id;\n\t\t\t\ttmp = new_par.parents.concat();\n\t\t\t\ttmp.unshift(new_par.id);\n\t\t\t\tp = obj.parents.length;\n\t\t\t\tobj.parents = tmp;\n\n\t\t\t\t// update object children\n\t\t\t\ttmp = tmp.concat();\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\tthis._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0,p*-1);\n\t\t\t\t\tArray.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);\n\t\t\t\t}\n\n\t\t\t\tthis._node_changed(old_par);\n\t\t\t\tthis._node_changed(new_par.id);\n\t\t\t\tthis.redraw(old_par === '#' || new_par.id === '#');\n\t\t\t}\n\t\t\tif(callback) { callback.call(this, obj, new_par, pos); }\n\t\t\t/**\n\t\t\t * triggered when a node is moved\n\t\t\t * @event\n\t\t\t * @name move_node.jstree\n\t\t\t * @param {Object} node\n\t\t\t * @param {String} parent the parent's ID\n\t\t\t * @param {Number} position the position of the node among the parent's children\n\t\t\t * @param {String} old_parent the old parent of the node\n\t\t\t * @param {Number} old_position the old position of the node\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\n\t\t\t * @param {jsTree} old_instance the instance the node came from\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\n\t\t\t */\n\t\t\tthis.trigger('move_node', { \"node\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_pos, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * copy a node to a new parent\n\t\t * @name copy_node(obj, par [, pos, callback, is_loaded])\n\t\t * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes\n\t\t * @param  {mixed} par the new parent\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\n\t\t * @param  {Boolean} internal parameter indicating if the parent node has been loaded\n\t\t * @trigger model.jstree copy_node.jstree\n\t\t */\n\t\tcopy_node : function (obj, par, pos, callback, is_loaded) {\n\t\t\tvar t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;\n\n\t\t\tpar = this.get_node(par);\n\t\t\tpos = pos === undefined ? 0 : pos;\n\t\t\tif(!par) { return false; }\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n\t\t\t\treturn this.load_node(par, function () { this.copy_node(obj, par, pos, callback, true); });\n\t\t\t}\n\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.reverse().slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.copy_node(obj[t1], par, pos, callback, is_loaded);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\n\t\t\told_par = (obj.parent || '#').toString();\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === '#') ? par : this.get_node(par.parent);\n\t\t\told_ins = obj.instance ? obj.instance : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\n\t\t\tif(new_par.id === '#') {\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\n\t\t\t}\n\t\t\tswitch(pos) {\n\t\t\t\tcase \"before\":\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"after\" :\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"inside\":\n\t\t\t\tcase \"first\":\n\t\t\t\t\tpos = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"last\":\n\t\t\t\t\tpos = new_par.children.length;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif(!pos) { pos = 0; }\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\n\t\t\tif(!this.check(\"copy_node\", obj, new_par, pos, { 'core' : true, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnode = old_ins ? old_ins.get_json(obj, { no_id : true, no_data : true, no_state : true }) : obj;\n\t\t\tif(!node) { return false; }\n\t\t\tif(node.id === true) { delete node.id; }\n\t\t\tnode = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());\n\t\t\tif(!node) { return false; }\n\t\t\ttmp = this.get_node(node);\n\t\t\tif(obj && obj.state && obj.state.loaded === false) { tmp.state.loaded = false; }\n\t\t\tdpc = [];\n\t\t\tdpc.push(node);\n\t\t\tdpc = dpc.concat(tmp.children_d);\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : new_par.id });\n\n\t\t\t// insert into new parent and up\n\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\n\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);\n\t\t\t}\n\t\t\tdpc = [];\n\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\n\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\n\t\t\t}\n\t\t\tdpc[pos] = tmp.id;\n\t\t\tnew_par.children = dpc;\n\t\t\tnew_par.children_d.push(tmp.id);\n\t\t\tnew_par.children_d = new_par.children_d.concat(tmp.children_d);\n\n\t\t\tthis._node_changed(new_par.id);\n\t\t\tthis.redraw(new_par.id === '#');\n\t\t\tif(callback) { callback.call(this, tmp, new_par, pos); }\n\t\t\t/**\n\t\t\t * triggered when a node is copied\n\t\t\t * @event\n\t\t\t * @name copy_node.jstree\n\t\t\t * @param {Object} node the copied node\n\t\t\t * @param {Object} original the original node\n\t\t\t * @param {String} parent the parent's ID\n\t\t\t * @param {Number} position the position of the node among the parent's children\n\t\t\t * @param {String} old_parent the old parent of the node\n\t\t\t * @param {Number} old_position the position of the original node\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\n\t\t\t * @param {jsTree} old_instance the instance the node came from\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\n\t\t\t */\n\t\t\tthis.trigger('copy_node', { \"node\" : tmp, \"original\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1,'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\n\t\t\treturn tmp.id;\n\t\t},\n\t\t/**\n\t\t * cut a node (a later call to `paste(obj)` would move the node)\n\t\t * @name cut(obj)\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\n\t\t * @trigger cut.jstree\n\t\t */\n\t\tcut : function (obj) {\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\n\t\t\tif(!obj.length) { return false; }\n\t\t\tvar tmp = [], o, t1, t2;\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\to = this.get_node(obj[t1]);\n\t\t\t\tif(o && o.id && o.id !== '#') { tmp.push(o); }\n\t\t\t}\n\t\t\tif(!tmp.length) { return false; }\n\t\t\tccp_node = tmp;\n\t\t\tccp_inst = this;\n\t\t\tccp_mode = 'move_node';\n\t\t\t/**\n\t\t\t * triggered when nodes are added to the buffer for moving\n\t\t\t * @event\n\t\t\t * @name cut.jstree\n\t\t\t * @param {Array} node\n\t\t\t */\n\t\t\tthis.trigger('cut', { \"node\" : obj });\n\t\t},\n\t\t/**\n\t\t * copy a node (a later call to `paste(obj)` would copy the node)\n\t\t * @name copy(obj)\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\n\t\t * @trigger copy.jstre\n\t\t */\n\t\tcopy : function (obj) {\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\n\t\t\tif(!obj.length) { return false; }\n\t\t\tvar tmp = [], o, t1, t2;\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\to = this.get_node(obj[t1]);\n\t\t\t\tif(o && o.id && o.id !== '#') { tmp.push(o); }\n\t\t\t}\n\t\t\tif(!tmp.length) { return false; }\n\t\t\tccp_node = tmp;\n\t\t\tccp_inst = this;\n\t\t\tccp_mode = 'copy_node';\n\t\t\t/**\n\t\t\t * triggered when nodes are added to the buffer for copying\n\t\t\t * @event\n\t\t\t * @name copy.jstree\n\t\t\t * @param {Array} node\n\t\t\t */\n\t\t\tthis.trigger('copy', { \"node\" : obj });\n\t\t},\n\t\t/**\n\t\t * get the current buffer (any nodes that are waiting for a paste operation)\n\t\t * @name get_buffer()\n\t\t * @return {Object} an object consisting of `mode` (\"copy_node\" or \"move_node\"), `node` (an array of objects) and `inst` (the instance)\n\t\t */\n\t\tget_buffer : function () {\n\t\t\treturn { 'mode' : ccp_mode, 'node' : ccp_node, 'inst' : ccp_inst };\n\t\t},\n\t\t/**\n\t\t * check if there is something in the buffer to paste\n\t\t * @name can_paste()\n\t\t * @return {Boolean}\n\t\t */\n\t\tcan_paste : function () {\n\t\t\treturn ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];\n\t\t},\n\t\t/**\n\t\t * copy or move the previously cut or copied nodes to a new parent\n\t\t * @name paste(obj [, pos])\n\t\t * @param  {mixed} obj the new parent\n\t\t * @param  {mixed} pos the position to insert at (besides integer, \"first\" and \"last\" are supported), defaults to integer `0`\n\t\t * @trigger paste.jstree\n\t\t */\n\t\tpaste : function (obj, pos) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) { return false; }\n\t\t\tif(this[ccp_mode](ccp_node, obj, pos)) {\n\t\t\t\t/**\n\t\t\t\t * triggered when paste is invoked\n\t\t\t\t * @event\n\t\t\t\t * @name paste.jstree\n\t\t\t\t * @param {String} parent the ID of the receiving node\n\t\t\t\t * @param {Array} node the nodes in the buffer\n\t\t\t\t * @param {String} mode the performed operation - \"copy_node\" or \"move_node\"\n\t\t\t\t */\n\t\t\t\tthis.trigger('paste', { \"parent\" : obj.id, \"node\" : ccp_node, \"mode\" : ccp_mode });\n\t\t\t}\n\t\t\tccp_node = false;\n\t\t\tccp_mode = false;\n\t\t\tccp_inst = false;\n\t\t},\n\t\t/**\n\t\t * put a node in edit mode (input field to rename the node)\n\t\t * @name edit(obj [, default_text])\n\t\t * @param  {mixed} obj\n\t\t * @param  {String} default_text the text to populate the input with (if omitted the node text value is used)\n\t\t */\n\t\tedit : function (obj, default_text) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj) { return false; }\n\t\t\tif(this.settings.core.check_callback === false) {\n\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Could not edit node because of check_callback' };\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdefault_text = typeof default_text === 'string' ? default_text : obj.text;\n\t\t\tthis.set_text(obj, \"\");\n\t\t\tobj = this._open_to(obj);\n\n\t\t\tvar rtl = this._data.core.rtl,\n\t\t\t\tw  = this.element.width(),\n\t\t\t\ta  = obj.children('.jstree-anchor'),\n\t\t\t\ts  = $('<span>'),\n\t\t\t\t/*!\n\t\t\t\toi = obj.children(\"i:visible\"),\n\t\t\t\tai = a.children(\"i:visible\"),\n\t\t\t\tw1 = oi.width() * oi.length,\n\t\t\t\tw2 = ai.width() * ai.length,\n\t\t\t\t*/\n\t\t\t\tt  = default_text,\n\t\t\t\th1 = $(\"<\"+\"div />\", { css : { \"position\" : \"absolute\", \"top\" : \"-200px\", \"left\" : (rtl ? \"0px\" : \"-1000px\"), \"visibility\" : \"hidden\" } }).appendTo(\"body\"),\n\t\t\t\th2 = $(\"<\"+\"input />\", {\n\t\t\t\t\t\t\"value\" : t,\n\t\t\t\t\t\t\"class\" : \"jstree-rename-input\",\n\t\t\t\t\t\t// \"size\" : t.length,\n\t\t\t\t\t\t\"css\" : {\n\t\t\t\t\t\t\t\"padding\" : \"0\",\n\t\t\t\t\t\t\t\"border\" : \"1px solid silver\",\n\t\t\t\t\t\t\t\"box-sizing\" : \"border-box\",\n\t\t\t\t\t\t\t\"display\" : \"inline-block\",\n\t\t\t\t\t\t\t\"height\" : (this._data.core.li_height) + \"px\",\n\t\t\t\t\t\t\t\"lineHeight\" : (this._data.core.li_height) + \"px\",\n\t\t\t\t\t\t\t\"width\" : \"150px\" // will be set a bit further down\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"blur\" : $.proxy(function () {\n\t\t\t\t\t\t\tvar i = s.children(\".jstree-rename-input\"),\n\t\t\t\t\t\t\t\tv = i.val();\n\t\t\t\t\t\t\tif(v === \"\") { v = t; }\n\t\t\t\t\t\t\th1.remove();\n\t\t\t\t\t\t\ts.replaceWith(a);\n\t\t\t\t\t\t\ts.remove();\n\t\t\t\t\t\t\tthis.set_text(obj, t);\n\t\t\t\t\t\t\tif(this.rename_node(obj, $('<div></div>').text(v)[this.settings.core.force_text ? 'text' : 'html']()) === false) {\n\t\t\t\t\t\t\t\tthis.set_text(obj, t); // move this up? and fix #483\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this),\n\t\t\t\t\t\t\"keydown\" : function (event) {\n\t\t\t\t\t\t\tvar key = event.which;\n\t\t\t\t\t\t\tif(key === 27) {\n\t\t\t\t\t\t\t\tthis.value = t;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\n\t\t\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(key === 27 || key === 13) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"click\" : function (e) { e.stopImmediatePropagation(); },\n\t\t\t\t\t\t\"mousedown\" : function (e) { e.stopImmediatePropagation(); },\n\t\t\t\t\t\t\"keyup\" : function (event) {\n\t\t\t\t\t\t\th2.width(Math.min(h1.text(\"pW\" + this.value).width(),w));\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"keypress\" : function(event) {\n\t\t\t\t\t\t\tif(event.which === 13) { return false; }\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\tfn = {\n\t\t\t\t\t\tfontFamily\t\t: a.css('fontFamily')\t\t|| '',\n\t\t\t\t\t\tfontSize\t\t: a.css('fontSize')\t\t\t|| '',\n\t\t\t\t\t\tfontWeight\t\t: a.css('fontWeight')\t\t|| '',\n\t\t\t\t\t\tfontStyle\t\t: a.css('fontStyle')\t\t|| '',\n\t\t\t\t\t\tfontStretch\t\t: a.css('fontStretch')\t\t|| '',\n\t\t\t\t\t\tfontVariant\t\t: a.css('fontVariant')\t\t|| '',\n\t\t\t\t\t\tletterSpacing\t: a.css('letterSpacing')\t|| '',\n\t\t\t\t\t\twordSpacing\t\t: a.css('wordSpacing')\t\t|| ''\n\t\t\t\t};\n\t\t\ts.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);\n\t\t\ta.replaceWith(s);\n\t\t\th1.css(fn);\n\t\t\th2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(),w))[0].select();\n\t\t},\n\n\n\t\t/**\n\t\t * changes the theme\n\t\t * @name set_theme(theme_name [, theme_url])\n\t\t * @param {String} theme_name the name of the new theme to apply\n\t\t * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.\n\t\t * @trigger set_theme.jstree\n\t\t */\n\t\tset_theme : function (theme_name, theme_url) {\n\t\t\tif(!theme_name) { return false; }\n\t\t\tif(theme_url === true) {\n\t\t\t\tvar dir = this.settings.core.themes.dir;\n\t\t\t\tif(!dir) { dir = $.jstree.path + '/themes'; }\n\t\t\t\ttheme_url = dir + '/' + theme_name + '/style.css';\n\t\t\t}\n\t\t\tif(theme_url && $.inArray(theme_url, themes_loaded) === -1) {\n\t\t\t\t$('head').append('<'+'link rel=\"stylesheet\" href=\"' + theme_url + '\" type=\"text/css\" />');\n\t\t\t\tthemes_loaded.push(theme_url);\n\t\t\t}\n\t\t\tif(this._data.core.themes.name) {\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name);\n\t\t\t}\n\t\t\tthis._data.core.themes.name = theme_name;\n\t\t\tthis.element.addClass('jstree-' + theme_name);\n\t\t\tthis.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass' ]('jstree-' + theme_name + '-responsive');\n\t\t\t/**\n\t\t\t * triggered when a theme is set\n\t\t\t * @event\n\t\t\t * @name set_theme.jstree\n\t\t\t * @param {String} theme the new theme\n\t\t\t */\n\t\t\tthis.trigger('set_theme', { 'theme' : theme_name });\n\t\t},\n\t\t/**\n\t\t * gets the name of the currently applied theme name\n\t\t * @name get_theme()\n\t\t * @return {String}\n\t\t */\n\t\tget_theme : function () { return this._data.core.themes.name; },\n\t\t/**\n\t\t * changes the theme variant (if the theme has variants)\n\t\t * @name set_theme_variant(variant_name)\n\t\t * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)\n\t\t */\n\t\tset_theme_variant : function (variant_name) {\n\t\t\tif(this._data.core.themes.variant) {\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\n\t\t\t}\n\t\t\tthis._data.core.themes.variant = variant_name;\n\t\t\tif(variant_name) {\n\t\t\t\tthis.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * gets the name of the currently applied theme variant\n\t\t * @name get_theme()\n\t\t * @return {String}\n\t\t */\n\t\tget_theme_variant : function () { return this._data.core.themes.variant; },\n\t\t/**\n\t\t * shows a striped background on the container (if the theme supports it)\n\t\t * @name show_stripes()\n\t\t */\n\t\tshow_stripes : function () { this._data.core.themes.stripes = true; this.get_container_ul().addClass(\"jstree-striped\"); },\n\t\t/**\n\t\t * hides the striped background on the container\n\t\t * @name hide_stripes()\n\t\t */\n\t\thide_stripes : function () { this._data.core.themes.stripes = false; this.get_container_ul().removeClass(\"jstree-striped\"); },\n\t\t/**\n\t\t * toggles the striped background on the container\n\t\t * @name toggle_stripes()\n\t\t */\n\t\ttoggle_stripes : function () { if(this._data.core.themes.stripes) { this.hide_stripes(); } else { this.show_stripes(); } },\n\t\t/**\n\t\t * shows the connecting dots (if the theme supports it)\n\t\t * @name show_dots()\n\t\t */\n\t\tshow_dots : function () { this._data.core.themes.dots = true; this.get_container_ul().removeClass(\"jstree-no-dots\"); },\n\t\t/**\n\t\t * hides the connecting dots\n\t\t * @name hide_dots()\n\t\t */\n\t\thide_dots : function () { this._data.core.themes.dots = false; this.get_container_ul().addClass(\"jstree-no-dots\"); },\n\t\t/**\n\t\t * toggles the connecting dots\n\t\t * @name toggle_dots()\n\t\t */\n\t\ttoggle_dots : function () { if(this._data.core.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },\n\t\t/**\n\t\t * show the node icons\n\t\t * @name show_icons()\n\t\t */\n\t\tshow_icons : function () { this._data.core.themes.icons = true; this.get_container_ul().removeClass(\"jstree-no-icons\"); },\n\t\t/**\n\t\t * hide the node icons\n\t\t * @name hide_icons()\n\t\t */\n\t\thide_icons : function () { this._data.core.themes.icons = false; this.get_container_ul().addClass(\"jstree-no-icons\"); },\n\t\t/**\n\t\t * toggle the node icons\n\t\t * @name toggle_icons()\n\t\t */\n\t\ttoggle_icons : function () { if(this._data.core.themes.icons) { this.hide_icons(); } else { this.show_icons(); } },\n\t\t/**\n\t\t * set the node icon for a node\n\t\t * @name set_icon(obj, icon)\n\t\t * @param {mixed} obj\n\t\t * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\n\t\t */\n\t\tset_icon : function (obj, icon) {\n\t\t\tvar t1, t2, dom, old;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.set_icon(obj[t1], icon);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\told = obj.icon;\n\t\t\tobj.icon = icon;\n\t\t\tdom = this.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\");\n\t\t\tif(icon === false) {\n\t\t\t\tthis.hide_icon(obj);\n\t\t\t}\n\t\t\telse if(icon === true) {\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\n\t\t\t}\n\t\t\telse if(icon.indexOf(\"/\") === -1 && icon.indexOf(\".\") === -1) {\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\n\t\t\t\tdom.addClass(icon + ' jstree-themeicon-custom').attr(\"rel\",icon);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\n\t\t\t\tdom.addClass('jstree-themeicon-custom').css(\"background\", \"url('\" + icon + \"') center center no-repeat\").attr(\"rel\",icon);\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * get the node icon for a node\n\t\t * @name get_icon(obj)\n\t\t * @param {mixed} obj\n\t\t * @return {String}\n\t\t */\n\t\tget_icon : function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn (!obj || obj.id === '#') ? false : obj.icon;\n\t\t},\n\t\t/**\n\t\t * hide the icon on an individual node\n\t\t * @name hide_icon(obj)\n\t\t * @param {mixed} obj\n\t\t */\n\t\thide_icon : function (obj) {\n\t\t\tvar t1, t2;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.hide_icon(obj[t1]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj === '#') { return false; }\n\t\t\tobj.icon = false;\n\t\t\tthis.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\").addClass('jstree-themeicon-hidden');\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * show the icon on an individual node\n\t\t * @name show_icon(obj)\n\t\t * @param {mixed} obj\n\t\t */\n\t\tshow_icon : function (obj) {\n\t\t\tvar t1, t2, dom;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.show_icon(obj[t1]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj === '#') { return false; }\n\t\t\tdom = this.get_node(obj, true);\n\t\t\tobj.icon = dom.length ? dom.children(\".jstree-anchor\").children(\".jstree-themeicon\").attr('rel') : true;\n\t\t\tif(!obj.icon) { obj.icon = true; }\n\t\t\tdom.children(\".jstree-anchor\").children(\".jstree-themeicon\").removeClass('jstree-themeicon-hidden');\n\t\t\treturn true;\n\t\t}\n\t};\n\n\t// helpers\n\t$.vakata = {};\n\t// collect attributes\n\t$.vakata.attributes = function(node, with_values) {\n\t\tnode = $(node)[0];\n\t\tvar attr = with_values ? {} : [];\n\t\tif(node && node.attributes) {\n\t\t\t$.each(node.attributes, function (i, v) {\n\t\t\t\tif($.inArray(v.nodeName.toLowerCase(),['style','contenteditable','hasfocus','tabindex']) !== -1) { return; }\n\t\t\t\tif(v.nodeValue !== null && $.trim(v.nodeValue) !== '') {\n\t\t\t\t\tif(with_values) { attr[v.nodeName] = v.nodeValue; }\n\t\t\t\t\telse { attr.push(v.nodeName); }\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn attr;\n\t};\n\t$.vakata.array_unique = function(array) {\n\t\tvar a = [], i, j, l;\n\t\tfor(i = 0, l = array.length; i < l; i++) {\n\t\t\tfor(j = 0; j <= i; j++) {\n\t\t\t\tif(array[i] === array[j]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j === i) { a.push(array[i]); }\n\t\t}\n\t\treturn a;\n\t};\n\t// remove item from array\n\t$.vakata.array_remove = function(array, from, to) {\n\t\tvar rest = array.slice((to || from) + 1 || array.length);\n\t\tarray.length = from < 0 ? array.length + from : from;\n\t\tarray.push.apply(array, rest);\n\t\treturn array;\n\t};\n\t// remove item from array\n\t$.vakata.array_remove_item = function(array, item) {\n\t\tvar tmp = $.inArray(item, array);\n\t\treturn tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;\n\t};\n\n/**\n * ### Checkbox plugin\n *\n * This plugin renders checkbox icons in front of each node, making multiple selection much easier. \n * It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.\n */\n\n\tvar _i = document.createElement('I');\n\t_i.className = 'jstree-icon jstree-checkbox';\n\t/**\n\t * stores all defaults for the checkbox plugin\n\t * @name $.jstree.defaults.checkbox\n\t * @plugin checkbox\n\t */\n\t$.jstree.defaults.checkbox = {\n\t\t/**\n\t\t * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.\n\t\t * @name $.jstree.defaults.checkbox.visible\n\t\t * @plugin checkbox\n\t\t */\n\t\tvisible\t\t\t\t: true,\n\t\t/**\n\t\t * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.\n\t\t * @name $.jstree.defaults.checkbox.three_state\n\t\t * @plugin checkbox\n\t\t */\n\t\tthree_state\t\t\t: true,\n\t\t/**\n\t\t * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.\n\t\t * @name $.jstree.defaults.checkbox.whole_node\n\t\t * @plugin checkbox\n\t\t */\n\t\twhole_node\t\t\t: true,\n\t\t/**\n\t\t * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.\n\t\t * @name $.jstree.defaults.checkbox.keep_selected_style\n\t\t * @plugin checkbox\n\t\t */\n\t\tkeep_selected_style\t: true,\n\t\t/**\n\t\t * This setting controls how cascading and undetermined nodes are applied. \n\t\t * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used. \n\t\t * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.\n\t\t * @name $.jstree.defaults.checkbox.cascade\n\t\t * @plugin checkbox\n\t\t */\n\t\tcascade\t\t\t\t: '',\n\t\t/**\n\t\t * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing. \n\t\t * @name $.jstree.defaults.checkbox.tie_selection\n\t\t * @plugin checkbox\n\t\t */\n\t\ttie_selection\t\t: true\n\t};\n\t$.jstree.plugins.checkbox = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\t\t\tthis._data.checkbox.uto = false;\n\t\t\tthis._data.checkbox.selected = [];\n\t\t\tif(this.settings.checkbox.three_state) {\n\t\t\t\tthis.settings.checkbox.cascade = 'up+down+undetermined';\n\t\t\t}\n\t\t\tthis.element\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\n\t\t\t\t\t\tthis._data.checkbox.visible = this.settings.checkbox.visible;\n\t\t\t\t\t\tif(!this.settings.checkbox.keep_selected_style) {\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-no-clicked');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.settings.checkbox.tie_selection) {\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-selection');\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\n\t\t\t\t\t\tthis[ this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes' ]();\n\t\t\t\t\t}, this));\n\t\t\tif(this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\n\t\t\t\tthis.element\n\t\t\t\t\t.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', $.proxy(function () {\n\t\t\t\t\t\t\t// only if undetermined is in setting\n\t\t\t\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\n\t\t\t\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\n\t\t\t\t\t\t}, this));\n\t\t\t}\n\t\t\tif(!this.settings.checkbox.tie_selection) {\n\t\t\t\tthis.element\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\tvar m = this._model.data,\n\t\t\t\t\t\t\tp = m[data.parent],\n\t\t\t\t\t\t\tdpc = data.nodes,\n\t\t\t\t\t\t\ti, j;\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\n\t\t\t\t\t\t\tm[dpc[i]].state.checked = (m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked);\n\t\t\t\t\t\t\tif(m[dpc[i]].state.checked) {\n\t\t\t\t\t\t\t\tthis._data.checkbox.selected.push(dpc[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this));\n\t\t\t}\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {\n\t\t\t\tthis.element\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\t\tvar m = this._model.data,\n\t\t\t\t\t\t\t\tp = m[data.parent],\n\t\t\t\t\t\t\t\tdpc = data.nodes,\n\t\t\t\t\t\t\t\tchd = [],\n\t\t\t\t\t\t\t\tc, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;\n\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\n\t\t\t\t\t\t\t\t// apply down\n\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\tm[dpc[i]].state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(dpc);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\tif(m[dpc[i]].state[ t ? 'selected' : 'checked' ]) {\n\t\t\t\t\t\t\t\t\t\t\tfor(k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {\n\t\t\t\t\t\t\t\t\t\t\t\tm[m[dpc[i]].children_d[k]].state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(m[dpc[i]].children_d);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\n\t\t\t\t\t\t\t\t// apply up\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children_d.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\tif(!m[p.children_d[i]].children.length) {\n\t\t\t\t\t\t\t\t\t\tchd.push(m[p.children_d[i]].parent);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchd = $.vakata.array_unique(chd);\n\t\t\t\t\t\t\t\tfor(k = 0, l = chd.length; k < l; k++) {\n\t\t\t\t\t\t\t\t\tp = m[chd[k]];\n\t\t\t\t\t\t\t\t\twhile(p && p.id !== '#') {\n\t\t\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif(c === j) {\n\t\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\n\t\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\n\t\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\t\t\t\t\ttmp.children('.jstree-anchor').addClass( t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected);\n\t\t\t\t\t\t}, this))\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\t\tvar obj = data.node,\n\t\t\t\t\t\t\t\tm = this._model.data,\n\t\t\t\t\t\t\t\tpar = this.get_node(obj.parent),\n\t\t\t\t\t\t\t\tdom = this.get_node(obj, true),\n\t\t\t\t\t\t\t\ti, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;\n\n\t\t\t\t\t\t\t// apply down\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\n\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\ttmp = m[obj.children_d[i]];\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// apply up\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\n\t\t\t\t\t\t\t\twhile(par && par.id !== '#') {\n\t\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\tc += m[par.children[i]].state[ t ? 'selected' : 'checked' ];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(c === j) {\n\t\t\t\t\t\t\t\t\t\tpar.state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(par, true);\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\t\t\t\ttmp.children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tpar = this.get_node(par.parent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// apply down (process .children separately?)\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1 && dom.length) {\n\t\t\t\t\t\t\t\tdom.find('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this))\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\t\tvar obj = this.get_node('#'),\n\t\t\t\t\t\t\t\tm = this._model.data,\n\t\t\t\t\t\t\t\ti, j, tmp;\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\t\t\t\ttmp = m[obj.children_d[i]];\n\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this))\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\t\tvar obj = data.node,\n\t\t\t\t\t\t\t\tdom = this.get_node(obj, true),\n\t\t\t\t\t\t\t\ti, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;\n\t\t\t\t\t\t\tif(obj && obj.original && obj.original.state && obj.original.state.undetermined) {\n\t\t\t\t\t\t\t\tobj.original.state.undetermined = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// apply down\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\ttmp = this._model.data[obj.children_d[i]];\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = false;\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// apply up\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\ttmp = this._model.data[obj.parents[i]];\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = false;\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(obj.parents[i], true);\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\t\t\ttmp.children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\t\tfor(i = 0, j = this._data[ t ? 'core' : 'checkbox' ].selected.length; i < j; i++) {\n\t\t\t\t\t\t\t\t// apply down + apply up\n\t\t\t\t\t\t\t\tif(\n\t\t\t\t\t\t\t\t\t(s.indexOf('down') === -1 || $.inArray(this._data[ t ? 'core' : 'checkbox' ].selected[i], obj.children_d) === -1) &&\n\t\t\t\t\t\t\t\t\t(s.indexOf('up') === -1 || $.inArray(this._data[ t ? 'core' : 'checkbox' ].selected[i], obj.parents) === -1)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\ttmp.push(this._data[ t ? 'core' : 'checkbox' ].selected[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(tmp);\n\n\t\t\t\t\t\t\t// apply down (process .children separately?)\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1 && dom.length) {\n\t\t\t\t\t\t\t\tdom.find('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this));\n\t\t\t}\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1) {\n\t\t\t\tthis.element\n\t\t\t\t\t.on('delete_node.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\t\t// apply up (whole handler)\n\t\t\t\t\t\t\tvar p = this.get_node(data.parent),\n\t\t\t\t\t\t\t\tm = this._model.data,\n\t\t\t\t\t\t\t\ti, j, c, tmp, t = this.settings.checkbox.tie_selection;\n\t\t\t\t\t\t\twhile(p && p.id !== '#') {\n\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(c === j) {\n\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\t\t\ttmp.children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this))\n\t\t\t\t\t.on('move_node.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\t\t// apply up (whole handler)\n\t\t\t\t\t\t\tvar is_multi = data.is_multi,\n\t\t\t\t\t\t\t\told_par = data.old_parent,\n\t\t\t\t\t\t\t\tnew_par = this.get_node(data.parent),\n\t\t\t\t\t\t\t\tm = this._model.data,\n\t\t\t\t\t\t\t\tp, c, i, j, tmp, t = this.settings.checkbox.tie_selection;\n\t\t\t\t\t\t\tif(!is_multi) {\n\t\t\t\t\t\t\t\tp = this.get_node(old_par);\n\t\t\t\t\t\t\t\twhile(p && p.id !== '#') {\n\t\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(c === j) {\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\t\t\t\ttmp.children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tp = new_par;\n\t\t\t\t\t\t\twhile(p && p.id !== '#') {\n\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(c === j) {\n\t\t\t\t\t\t\t\t\tif(!p.state[ t ? 'selected' : 'checked' ]) {\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\t\t\t\ttmp.children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = false;\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_remove_item(this._data[ t ? 'core' : 'checkbox' ].selected, p.id);\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\t\t\t\ttmp.children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this));\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * set the undetermined state where and if necessary. Used internally.\n\t\t * @private\n\t\t * @name _undetermined()\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis._undetermined = function () {\n\t\t\tvar i, j, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[ t ? 'core' : 'checkbox' ].selected, p = [], tt = this;\n\t\t\tfor(i = 0, j = s.length; i < j; i++) {\n\t\t\t\tif(m[s[i]] && m[s[i]].parents) {\n\t\t\t\t\tp = p.concat(m[s[i]].parents);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt for server side undetermined state\n\t\t\tthis.element.find('.jstree-closed').not(':has(.jstree-children)')\n\t\t\t\t.each(function () {\n\t\t\t\t\tvar tmp = tt.get_node(this), tmp2;\n\t\t\t\t\tif(!tmp.state.loaded) {\n\t\t\t\t\t\tif(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {\n\t\t\t\t\t\t\tp.push(tmp.id);\n\t\t\t\t\t\t\tp = p.concat(tmp.parents);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfor(i = 0, j = tmp.children_d.length; i < j; i++) {\n\t\t\t\t\t\t\ttmp2 = m[tmp.children_d[i]];\n\t\t\t\t\t\t\tif(!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {\n\t\t\t\t\t\t\t\tp.push(tmp2.id);\n\t\t\t\t\t\t\t\tp = p.concat(tmp2.parents);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tp = $.vakata.array_unique(p);\n\t\t\tp = $.vakata.array_remove_item(p,'#');\n\n\t\t\tthis.element.find('.jstree-undetermined').removeClass('jstree-undetermined');\n\t\t\tfor(i = 0, j = p.length; i < j; i++) {\n\t\t\t\tif(!m[p[i]].state[ t ? 'selected' : 'checked' ]) {\n\t\t\t\t\ts = this.get_node(p[i], true);\n\t\t\t\t\tif(s && s.length) {\n\t\t\t\t\t\ts.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.redraw_node = function(obj, deep, is_callback) {\n\t\t\tobj = parent.redraw_node.call(this, obj, deep, is_callback);\n\t\t\tif(obj) {\n\t\t\t\tvar i, j, tmp = null;\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\n\t\t\t\t\t\ttmp = obj.childNodes[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(tmp) {\n\t\t\t\t\tif(!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) { tmp.className += ' jstree-checked'; }\n\t\t\t\t\ttmp.insertBefore(_i.cloneNode(false), tmp.childNodes[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\n\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\n\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\t\t/**\n\t\t * show the node checkbox icons\n\t\t * @name show_checkboxes()\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.show_checkboxes = function () { this._data.core.themes.checkboxes = true; this.get_container_ul().removeClass(\"jstree-no-checkboxes\"); };\n\t\t/**\n\t\t * hide the node checkbox icons\n\t\t * @name hide_checkboxes()\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.hide_checkboxes = function () { this._data.core.themes.checkboxes = false; this.get_container_ul().addClass(\"jstree-no-checkboxes\"); };\n\t\t/**\n\t\t * toggle the node icons\n\t\t * @name toggle_checkboxes()\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.toggle_checkboxes = function () { if(this._data.core.themes.checkboxes) { this.hide_checkboxes(); } else { this.show_checkboxes(); } };\n\t\t/**\n\t\t * checks if a node is in an undetermined state\n\t\t * @name is_undetermined(obj)\n\t\t * @param  {mixed} obj\n\t\t * @return {Boolean}\n\t\t */\n\t\tthis.is_undetermined = function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tvar s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[ t ? 'core' : 'checkbox' ].selected, m = this._model.data;\n\t\t\tif(!obj || obj.state[ t ? 'selected' : 'checked' ] === true || s.indexOf('undetermined') === -1 || (s.indexOf('down') === -1 && s.indexOf('up') === -1)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(!obj.state.loaded && obj.original.state.undetermined === true) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\tif($.inArray(obj.children_d[i], d) !== -1 || (!m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tthis.activate_node = function (obj, e) {\n\t\t\tif(this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {\n\t\t\t\te.ctrlKey = true;\n\t\t\t}\n\t\t\tif(this.settings.checkbox.tie_selection || (!this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox'))) {\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\n\t\t\t}\n\t\t\tif(this.is_checked(obj)) {\n\t\t\t\tthis.uncheck_node(obj, e);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.check_node(obj, e);\n\t\t\t}\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj) });\n\t\t};\n\n\t\t/**\n\t\t * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)\n\t\t * @name check_node(obj)\n\t\t * @param {mixed} obj an array can be used to check multiple nodes\n\t\t * @trigger check_node.jstree\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.check_node = function (obj, e) {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_node(obj, false, true, e); }\n\t\t\tvar dom, t1, t2, th;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.check_node(obj[t1], e);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdom = this.get_node(obj, true);\n\t\t\tif(!obj.state.checked) {\n\t\t\t\tobj.state.checked = true;\n\t\t\t\tthis._data.checkbox.selected.push(obj.id);\n\t\t\t\tif(dom && dom.length) {\n\t\t\t\t\tdom.children('.jstree-anchor').addClass('jstree-checked');\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * triggered when an node is checked (only if tie_selection in checkbox settings is false)\n\t\t\t\t * @event\n\t\t\t\t * @name check_node.jstree\n\t\t\t\t * @param {Object} node\n\t\t\t\t * @param {Array} selected the current selection\n\t\t\t\t * @param {Object} event the event (if any) that triggered this check_node\n\t\t\t\t * @plugin checkbox\n\t\t\t\t */\n\t\t\t\tthis.trigger('check_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)\n\t\t * @name deselect_node(obj)\n\t\t * @param {mixed} obj an array can be used to deselect multiple nodes\n\t\t * @trigger uncheck_node.jstree\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.uncheck_node = function (obj, e) {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_node(obj, false, e); }\n\t\t\tvar t1, t2, dom;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.uncheck_node(obj[t1], e);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdom = this.get_node(obj, true);\n\t\t\tif(obj.state.checked) {\n\t\t\t\tobj.state.checked = false;\n\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);\n\t\t\t\tif(dom.length) {\n\t\t\t\t\tdom.children('.jstree-anchor').removeClass('jstree-checked');\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)\n\t\t\t\t * @event\n\t\t\t\t * @name uncheck_node.jstree\n\t\t\t\t * @param {Object} node\n\t\t\t\t * @param {Array} selected the current selection\n\t\t\t\t * @param {Object} event the event (if any) that triggered this uncheck_node\n\t\t\t\t * @plugin checkbox\n\t\t\t\t */\n\t\t\t\tthis.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)\n\t\t * @name check_all()\n\t\t * @trigger check_all.jstree, changed.jstree\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.check_all = function () {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_all(); }\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\n\t\t\tthis._data.checkbox.selected = this._model.data['#'].children_d.concat();\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.redraw(true);\n\t\t\t/**\n\t\t\t * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)\n\t\t\t * @event\n\t\t\t * @name check_all.jstree\n\t\t\t * @param {Array} selected the current selection\n\t\t\t * @plugin checkbox\n\t\t\t */\n\t\t\tthis.trigger('check_all', { 'selected' : this._data.checkbox.selected });\n\t\t};\n\t\t/**\n\t\t * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)\n\t\t * @name uncheck_all()\n\t\t * @trigger uncheck_all.jstree\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.uncheck_all = function () {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_all(); }\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._data.checkbox.selected = [];\n\t\t\tthis.element.find('.jstree-checked').removeClass('jstree-checked');\n\t\t\t/**\n\t\t\t * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)\n\t\t\t * @event\n\t\t\t * @name uncheck_all.jstree\n\t\t\t * @param {Object} node the previous selection\n\t\t\t * @param {Array} selected the current selection\n\t\t\t * @plugin checkbox\n\t\t\t */\n\t\t\tthis.trigger('uncheck_all', { 'selected' : this._data.checkbox.selected, 'node' : tmp });\n\t\t};\n\t\t/**\n\t\t * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)\n\t\t * @name is_checked(obj)\n\t\t * @param  {mixed}  obj\n\t\t * @return {Boolean}\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.is_checked = function (obj) {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.is_selected(obj); }\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\treturn obj.state.checked;\n\t\t};\n\t\t/**\n\t\t * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)\n\t\t * @name get_checked([full])\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n\t\t * @return {Array}\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.get_checked = function (full) {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_selected(full); }\n\t\t\treturn full ? $.map(this._data.checkbox.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.checkbox.selected;\n\t\t};\n\t\t/**\n\t\t * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)\n\t\t * @name get_top_checked([full])\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n\t\t * @return {Array}\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.get_top_checked = function (full) {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_top_selected(full); }\n\t\t\tvar tmp = this.get_checked(true),\n\t\t\t\tobj = {}, i, j, k, l;\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\tobj[tmp[i].id] = tmp[i];\n\t\t\t}\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp = [];\n\t\t\tfor(i in obj) {\n\t\t\t\tif(obj.hasOwnProperty(i)) {\n\t\t\t\t\ttmp.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\n\t\t};\n\t\t/**\n\t\t * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)\n\t\t * @name get_bottom_checked([full])\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\n\t\t * @return {Array}\n\t\t * @plugin checkbox\n\t\t */\n\t\tthis.get_bottom_checked = function (full) {\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_bottom_selected(full); }\n\t\t\tvar tmp = this.get_checked(true),\n\t\t\t\tobj = [], i, j;\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\tif(!tmp[i].children.length) {\n\t\t\t\t\tobj.push(tmp[i].id);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\n\t\t};\n\t};\n\n\t// include the checkbox plugin by default\n\t// $.jstree.defaults.plugins.push(\"checkbox\");\n\n/**\n * ### Contextmenu plugin\n *\n * Shows a context menu when a node is right-clicked.\n */\n// TODO: move logic outside of function + check multiple move\n\n\t/**\n\t * stores all defaults for the contextmenu plugin\n\t * @name $.jstree.defaults.contextmenu\n\t * @plugin contextmenu\n\t */\n\t$.jstree.defaults.contextmenu = {\n\t\t/**\n\t\t * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.\n\t\t * @name $.jstree.defaults.contextmenu.select_node\n\t\t * @plugin contextmenu\n\t\t */\n\t\tselect_node : true,\n\t\t/**\n\t\t * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.\n\t\t * @name $.jstree.defaults.contextmenu.show_at_node\n\t\t * @plugin contextmenu\n\t\t */\n\t\tshow_at_node : true,\n\t\t/**\n\t\t * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).\n\t\t * \n\t\t * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required):\n\t\t * \n\t\t * * `separator_before` - a boolean indicating if there should be a separator before this item\n\t\t * * `separator_after` - a boolean indicating if there should be a separator after this item\n\t\t * * `_disabled` - a boolean indicating if this action should be disabled\n\t\t * * `label` - a string - the name of the action (could be a function returning a string)\n\t\t * * `action` - a function to be executed if this item is chosen\n\t\t * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\n\t\t * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)\n\t\t * * `shortcut_label` - shortcut label (like for example `F2` for rename)\n\t\t * \n\t\t * @name $.jstree.defaults.contextmenu.items\n\t\t * @plugin contextmenu\n\t\t */\n\t\titems : function (o, cb) { // Could be an object directly\n\t\t\treturn {\n\t\t\t\t\"create\" : {\n\t\t\t\t\t\"separator_before\"\t: false,\n\t\t\t\t\t\"separator_after\"\t: true,\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"create_node\", data.reference, {}, \"last\")),\n\t\t\t\t\t\"label\"\t\t\t\t: \"Create\",\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\n\t\t\t\t\t\tinst.create_node(obj, {}, \"last\", function (new_node) {\n\t\t\t\t\t\t\tsetTimeout(function () { inst.edit(new_node); },0);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"rename\" : {\n\t\t\t\t\t\"separator_before\"\t: false,\n\t\t\t\t\t\"separator_after\"\t: false,\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"rename_node\", data.reference, this.get_parent(data.reference), \"\")),\n\t\t\t\t\t\"label\"\t\t\t\t: \"Rename\",\n\t\t\t\t\t/*\n\t\t\t\t\t\"shortcut\"\t\t\t: 113,\n\t\t\t\t\t\"shortcut_label\"\t: 'F2',\n\t\t\t\t\t\"icon\"\t\t\t\t: \"glyphicon glyphicon-leaf\",\n\t\t\t\t\t*/\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\n\t\t\t\t\t\tinst.edit(obj);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"remove\" : {\n\t\t\t\t\t\"separator_before\"\t: false,\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\n\t\t\t\t\t\"separator_after\"\t: false,\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"delete_node\", data.reference, this.get_parent(data.reference), \"\")),\n\t\t\t\t\t\"label\"\t\t\t\t: \"Delete\",\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\n\t\t\t\t\t\tif(inst.is_selected(obj)) {\n\t\t\t\t\t\t\tinst.delete_node(inst.get_selected());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tinst.delete_node(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"ccp\" : {\n\t\t\t\t\t\"separator_before\"\t: true,\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\n\t\t\t\t\t\"separator_after\"\t: false,\n\t\t\t\t\t\"label\"\t\t\t\t: \"Edit\",\n\t\t\t\t\t\"action\"\t\t\t: false,\n\t\t\t\t\t\"submenu\" : {\n\t\t\t\t\t\t\"cut\" : {\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Cut\",\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\n\t\t\t\t\t\t\t\t\tinst.cut(inst.get_selected());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tinst.cut(obj);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"copy\" : {\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Copy\",\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\n\t\t\t\t\t\t\t\t\tinst.copy(inst.get_selected());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tinst.copy(obj);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"paste\" : {\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\n\t\t\t\t\t\t\t\"_disabled\"\t\t\t: function (data) {\n\t\t\t\t\t\t\t\treturn !$.jstree.reference(data.reference).can_paste();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Paste\",\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\n\t\t\t\t\t\t\t\tinst.paste(obj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\t$.jstree.plugins.contextmenu = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\n\t\t\tvar last_ts = 0;\n\t\t\tthis.element\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-anchor\", $.proxy(function (e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tlast_ts = e.ctrlKey ? e.timeStamp : 0;\n\t\t\t\t\t\tif(!this.is_loading(e.currentTarget)) {\n\t\t\t\t\t\t\tthis.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\n\t\t\t\t\t\tif(this._data.contextmenu.visible && (!last_ts || e.timeStamp - last_ts > 250)) { // work around safari & macOS ctrl+click\n\t\t\t\t\t\t\t$.vakata.context.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this));\n\t\t\t/*\n\t\t\tif(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {\n\t\t\t\tvar el = null, tm = null;\n\t\t\t\tthis.element\n\t\t\t\t\t.on(\"touchstart\", \".jstree-anchor\", function (e) {\n\t\t\t\t\t\tel = e.currentTarget;\n\t\t\t\t\t\ttm = +new Date();\n\t\t\t\t\t\t$(document).one(\"touchend\", function (e) {\n\t\t\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);\n\t\t\t\t\t\t\te.currentTarget = e.target;\n\t\t\t\t\t\t\ttm = ((+(new Date())) - tm);\n\t\t\t\t\t\t\tif(e.target === el && tm > 600 && tm < 1000) {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t$(el).trigger('contextmenu', e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tel = null;\n\t\t\t\t\t\t\ttm = null;\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}\n\t\t\t*/\n\t\t\t$(document).on(\"context_hide.vakata\", $.proxy(function () { this._data.contextmenu.visible = false; }, this));\n\t\t};\n\t\tthis.teardown = function () {\n\t\t\tif(this._data.contextmenu.visible) {\n\t\t\t\t$.vakata.context.hide();\n\t\t\t}\n\t\t\tparent.teardown.call(this);\n\t\t};\n\n\t\t/**\n\t\t * prepare and show the context menu for a node\n\t\t * @name show_contextmenu(obj [, x, y])\n\t\t * @param {mixed} obj the node\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\n\t\t * @param {Object} e the event if available that triggered the contextmenu\n\t\t * @plugin contextmenu\n\t\t * @trigger show_contextmenu.jstree\n\t\t */\n\t\tthis.show_contextmenu = function (obj, x, y, e) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj || obj.id === '#') { return false; }\n\t\t\tvar s = this.settings.contextmenu,\n\t\t\t\td = this.get_node(obj, true),\n\t\t\t\ta = d.children(\".jstree-anchor\"),\n\t\t\t\to = false,\n\t\t\t\ti = false;\n\t\t\tif(s.show_at_node || x === undefined || y === undefined) {\n\t\t\t\to = a.offset();\n\t\t\t\tx = o.left;\n\t\t\t\ty = o.top + this._data.core.li_height;\n\t\t\t}\n\t\t\tif(this.settings.contextmenu.select_node && !this.is_selected(obj)) {\n\t\t\t\tthis.activate_node(obj, e);\n\t\t\t}\n\n\t\t\ti = s.items;\n\t\t\tif($.isFunction(i)) {\n\t\t\t\ti = i.call(this, obj, $.proxy(function (i) {\n\t\t\t\t\tthis._show_contextmenu(obj, x, y, i);\n\t\t\t\t}, this));\n\t\t\t}\n\t\t\tif($.isPlainObject(i)) {\n\t\t\t\tthis._show_contextmenu(obj, x, y, i);\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * show the prepared context menu for a node\n\t\t * @name _show_contextmenu(obj, x, y, i)\n\t\t * @param {mixed} obj the node\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\n\t\t * @param {Number} i the object of items to show\n\t\t * @plugin contextmenu\n\t\t * @trigger show_contextmenu.jstree\n\t\t * @private\n\t\t */\n\t\tthis._show_contextmenu = function (obj, x, y, i) {\n\t\t\tvar d = this.get_node(obj, true),\n\t\t\t\ta = d.children(\".jstree-anchor\");\n\t\t\t$(document).one(\"context_show.vakata\", $.proxy(function (e, data) {\n\t\t\t\tvar cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';\n\t\t\t\t$(data.element).addClass(cls);\n\t\t\t}, this));\n\t\t\tthis._data.contextmenu.visible = true;\n\t\t\t$.vakata.context.show(a, { 'x' : x, 'y' : y }, i);\n\t\t\t/**\n\t\t\t * triggered when the contextmenu is shown for a node\n\t\t\t * @event\n\t\t\t * @name show_contextmenu.jstree\n\t\t\t * @param {Object} node the node\n\t\t\t * @param {Number} x the x-coordinate of the menu relative to the document\n\t\t\t * @param {Number} y the y-coordinate of the menu relative to the document\n\t\t\t * @plugin contextmenu\n\t\t\t */\n\t\t\tthis.trigger('show_contextmenu', { \"node\" : obj, \"x\" : x, \"y\" : y });\n\t\t};\n\t};\n\n\t// contextmenu helper\n\t(function ($) {\n\t\tvar right_to_left = false,\n\t\t\tvakata_context = {\n\t\t\t\telement\t\t: false,\n\t\t\t\treference\t: false,\n\t\t\t\tposition_x\t: 0,\n\t\t\t\tposition_y\t: 0,\n\t\t\t\titems\t\t: [],\n\t\t\t\thtml\t\t: \"\",\n\t\t\t\tis_visible\t: false\n\t\t\t};\n\n\t\t$.vakata.context = {\n\t\t\tsettings : {\n\t\t\t\thide_onmouseleave\t: 0,\n\t\t\t\ticons\t\t\t\t: true\n\t\t\t},\n\t\t\t_trigger : function (event_name) {\n\t\t\t\t$(document).triggerHandler(\"context_\" + event_name + \".vakata\", {\n\t\t\t\t\t\"reference\"\t: vakata_context.reference,\n\t\t\t\t\t\"element\"\t: vakata_context.element,\n\t\t\t\t\t\"position\"\t: {\n\t\t\t\t\t\t\"x\" : vakata_context.position_x,\n\t\t\t\t\t\t\"y\" : vakata_context.position_y\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t_execute : function (i) {\n\t\t\t\ti = vakata_context.items[i];\n\t\t\t\treturn i && (!i._disabled || ($.isFunction(i._disabled) && !i._disabled({ \"item\" : i, \"reference\" : vakata_context.reference, \"element\" : vakata_context.element }))) && i.action ? i.action.call(null, {\n\t\t\t\t\t\t\t\"item\"\t\t: i,\n\t\t\t\t\t\t\t\"reference\"\t: vakata_context.reference,\n\t\t\t\t\t\t\t\"element\"\t: vakata_context.element,\n\t\t\t\t\t\t\t\"position\"\t: {\n\t\t\t\t\t\t\t\t\"x\" : vakata_context.position_x,\n\t\t\t\t\t\t\t\t\"y\" : vakata_context.position_y\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}) : false;\n\t\t\t},\n\t\t\t_parse : function (o, is_callback) {\n\t\t\t\tif(!o) { return false; }\n\t\t\t\tif(!is_callback) {\n\t\t\t\t\tvakata_context.html\t\t= \"\";\n\t\t\t\t\tvakata_context.items\t= [];\n\t\t\t\t}\n\t\t\t\tvar str = \"\",\n\t\t\t\t\tsep = false,\n\t\t\t\t\ttmp;\n\n\t\t\t\tif(is_callback) { str += \"<\"+\"ul>\"; }\n\t\t\t\t$.each(o, function (i, val) {\n\t\t\t\t\tif(!val) { return true; }\n\t\t\t\t\tvakata_context.items.push(val);\n\t\t\t\t\tif(!sep && val.separator_before) {\n\t\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + ($.vakata.context.settings.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\n\t\t\t\t\t}\n\t\t\t\t\tsep = false;\n\t\t\t\t\tstr += \"<\"+\"li class='\" + (val._class || \"\") + (val._disabled === true || ($.isFunction(val._disabled) && val._disabled({ \"item\" : val, \"reference\" : vakata_context.reference, \"element\" : vakata_context.element })) ? \" vakata-contextmenu-disabled \" : \"\") + \"' \"+(val.shortcut?\" data-shortcut='\"+val.shortcut+\"' \":'')+\">\";\n\t\t\t\t\tstr += \"<\"+\"a href='#' rel='\" + (vakata_context.items.length - 1) + \"'>\";\n\t\t\t\t\tif($.vakata.context.settings.icons) {\n\t\t\t\t\t\tstr += \"<\"+\"i \";\n\t\t\t\t\t\tif(val.icon) {\n\t\t\t\t\t\t\tif(val.icon.indexOf(\"/\") !== -1 || val.icon.indexOf(\".\") !== -1) { str += \" style='background:url(\\\"\" + val.icon + \"\\\") center center no-repeat' \"; }\n\t\t\t\t\t\t\telse { str += \" class='\" + val.icon + \"' \"; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstr += \"><\"+\"/i><\"+\"span class='vakata-contextmenu-sep'>&#160;<\"+\"/span>\";\n\t\t\t\t\t}\n\t\t\t\t\tstr += ($.isFunction(val.label) ? val.label({ \"item\" : i, \"reference\" : vakata_context.reference, \"element\" : vakata_context.element }) : val.label) + (val.shortcut?' <span class=\"vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'\">'+ (val.shortcut_label || '') +'</span>':'') + \"<\"+\"/a>\";\n\t\t\t\t\tif(val.submenu) {\n\t\t\t\t\t\ttmp = $.vakata.context._parse(val.submenu, true);\n\t\t\t\t\t\tif(tmp) { str += tmp; }\n\t\t\t\t\t}\n\t\t\t\t\tstr += \"<\"+\"/li>\";\n\t\t\t\t\tif(val.separator_after) {\n\t\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + ($.vakata.context.settings.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\n\t\t\t\t\t\tsep = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tstr  = str.replace(/<li class\\='vakata-context-separator'\\><\\/li\\>$/,\"\");\n\t\t\t\tif(is_callback) { str += \"</ul>\"; }\n\t\t\t\t/**\n\t\t\t\t * triggered on the document when the contextmenu is parsed (HTML is built)\n\t\t\t\t * @event\n\t\t\t\t * @plugin contextmenu\n\t\t\t\t * @name context_parse.vakata\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\n\t\t\t\t */\n\t\t\t\tif(!is_callback) { vakata_context.html = str; $.vakata.context._trigger(\"parse\"); }\n\t\t\t\treturn str.length > 10 ? str : false;\n\t\t\t},\n\t\t\t_show_submenu : function (o) {\n\t\t\t\to = $(o);\n\t\t\t\tif(!o.length || !o.children(\"ul\").length) { return; }\n\t\t\t\tvar e = o.children(\"ul\"),\n\t\t\t\t\tx = o.offset().left + o.outerWidth(),\n\t\t\t\t\ty = o.offset().top,\n\t\t\t\t\tw = e.width(),\n\t\t\t\t\th = e.height(),\n\t\t\t\t\tdw = $(window).width() + $(window).scrollLeft(),\n\t\t\t\t\tdh = $(window).height() + $(window).scrollTop();\n\t\t\t\t// може да се спести е една проверка - дали няма някой от класовете вече нагоре\n\t\t\t\tif(right_to_left) {\n\t\t\t\t\to[x - (w + 10 + o.outerWidth()) < 0 ? \"addClass\" : \"removeClass\"](\"vakata-context-left\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\to[x + w + 10 > dw ? \"addClass\" : \"removeClass\"](\"vakata-context-right\");\n\t\t\t\t}\n\t\t\t\tif(y + h + 10 > dh) {\n\t\t\t\t\te.css(\"bottom\",\"-1px\");\n\t\t\t\t}\n\t\t\t\te.show();\n\t\t\t},\n\t\t\tshow : function (reference, position, data) {\n\t\t\t\tvar o, e, x, y, w, h, dw, dh, cond = true;\n\t\t\t\tif(vakata_context.element && vakata_context.element.length) {\n\t\t\t\t\tvakata_context.element.width('');\n\t\t\t\t}\n\t\t\t\tswitch(cond) {\n\t\t\t\t\tcase (!position && !reference):\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tcase (!!position && !!reference):\n\t\t\t\t\t\tvakata_context.reference\t= reference;\n\t\t\t\t\t\tvakata_context.position_x\t= position.x;\n\t\t\t\t\t\tvakata_context.position_y\t= position.y;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase (!position && !!reference):\n\t\t\t\t\t\tvakata_context.reference\t= reference;\n\t\t\t\t\t\to = reference.offset();\n\t\t\t\t\t\tvakata_context.position_x\t= o.left + reference.outerHeight();\n\t\t\t\t\t\tvakata_context.position_y\t= o.top;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase (!!position && !reference):\n\t\t\t\t\t\tvakata_context.position_x\t= position.x;\n\t\t\t\t\t\tvakata_context.position_y\t= position.y;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(!!reference && !data && $(reference).data('vakata_contextmenu')) {\n\t\t\t\t\tdata = $(reference).data('vakata_contextmenu');\n\t\t\t\t}\n\t\t\t\tif($.vakata.context._parse(data)) {\n\t\t\t\t\tvakata_context.element.html(vakata_context.html);\n\t\t\t\t}\n\t\t\t\tif(vakata_context.items.length) {\n\t\t\t\t\te = vakata_context.element;\n\t\t\t\t\tx = vakata_context.position_x;\n\t\t\t\t\ty = vakata_context.position_y;\n\t\t\t\t\tw = e.width();\n\t\t\t\t\th = e.height();\n\t\t\t\t\tdw = $(window).width() + $(window).scrollLeft();\n\t\t\t\t\tdh = $(window).height() + $(window).scrollTop();\n\t\t\t\t\tif(right_to_left) {\n\t\t\t\t\t\tx -= e.outerWidth();\n\t\t\t\t\t\tif(x < $(window).scrollLeft() + 20) {\n\t\t\t\t\t\t\tx = $(window).scrollLeft() + 20;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(x + w + 20 > dw) {\n\t\t\t\t\t\tx = dw - (w + 20);\n\t\t\t\t\t}\n\t\t\t\t\tif(y + h + 20 > dh) {\n\t\t\t\t\t\ty = dh - (h + 20);\n\t\t\t\t\t}\n\n\t\t\t\t\tvakata_context.element\n\t\t\t\t\t\t.css({ \"left\" : x, \"top\" : y })\n\t\t\t\t\t\t.show()\n\t\t\t\t\t\t.find('a:eq(0)').focus().parent().addClass(\"vakata-context-hover\");\n\t\t\t\t\tvakata_context.is_visible = true;\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered on the document when the contextmenu is shown\n\t\t\t\t\t * @event\n\t\t\t\t\t * @plugin contextmenu\n\t\t\t\t\t * @name context_show.vakata\n\t\t\t\t\t * @param {jQuery} reference the element that was right clicked\n\t\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\n\t\t\t\t\t * @param {Object} position the x & y coordinates of the menu\n\t\t\t\t\t */\n\t\t\t\t\t$.vakata.context._trigger(\"show\");\n\t\t\t\t}\n\t\t\t},\n\t\t\thide : function () {\n\t\t\t\tif(vakata_context.is_visible) {\n\t\t\t\t\tvakata_context.element.hide().find(\"ul\").hide().end().find(':focus').blur();\n\t\t\t\t\tvakata_context.is_visible = false;\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered on the document when the contextmenu is hidden\n\t\t\t\t\t * @event\n\t\t\t\t\t * @plugin contextmenu\n\t\t\t\t\t * @name context_hide.vakata\n\t\t\t\t\t * @param {jQuery} reference the element that was right clicked\n\t\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\n\t\t\t\t\t * @param {Object} position the x & y coordinates of the menu\n\t\t\t\t\t */\n\t\t\t\t\t$.vakata.context._trigger(\"hide\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t$(function () {\n\t\t\tright_to_left = $(\"body\").css(\"direction\") === \"rtl\";\n\t\t\tvar to = false;\n\n\t\t\tvakata_context.element = $(\"<ul class='vakata-context'></ul>\");\n\t\t\tvakata_context.element\n\t\t\t\t.on(\"mouseenter\", \"li\", function (e) {\n\t\t\t\t\te.stopImmediatePropagation();\n\n\t\t\t\t\tif($.contains(this, e.relatedTarget)) {\n\t\t\t\t\t\t// премахнато заради delegate mouseleave по-долу\n\t\t\t\t\t\t// $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(to) { clearTimeout(to); }\n\t\t\t\t\tvakata_context.element.find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end();\n\n\t\t\t\t\t$(this)\n\t\t\t\t\t\t.siblings().find(\"ul\").hide().end().end()\n\t\t\t\t\t\t.parentsUntil(\".vakata-context\", \"li\").addBack().addClass(\"vakata-context-hover\");\n\t\t\t\t\t$.vakata.context._show_submenu(this);\n\t\t\t\t})\n\t\t\t\t// тестово - дали не натоварва?\n\t\t\t\t.on(\"mouseleave\", \"li\", function (e) {\n\t\t\t\t\tif($.contains(this, e.relatedTarget)) { return; }\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").addBack().removeClass(\"vakata-context-hover\");\n\t\t\t\t})\n\t\t\t\t.on(\"mouseleave\", function (e) {\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\n\t\t\t\t\tif($.vakata.context.settings.hide_onmouseleave) {\n\t\t\t\t\t\tto = setTimeout(\n\t\t\t\t\t\t\t(function (t) {\n\t\t\t\t\t\t\t\treturn function () { $.vakata.context.hide(); };\n\t\t\t\t\t\t\t}(this)), $.vakata.context.settings.hide_onmouseleave);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on(\"click\", \"a\", function (e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t//})\n\t\t\t\t//.on(\"mouseup\", \"a\", function (e) {\n\t\t\t\t\tif(!$(this).blur().parent().hasClass(\"vakata-context-disabled\") && $.vakata.context._execute($(this).attr(\"rel\")) !== false) {\n\t\t\t\t\t\t$.vakata.context.hide();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on('keydown', 'a', function (e) {\n\t\t\t\t\t\tvar o = null;\n\t\t\t\t\t\tswitch(e.which) {\n\t\t\t\t\t\t\tcase 13:\n\t\t\t\t\t\t\tcase 32:\n\t\t\t\t\t\t\t\te.type = \"mouseup\";\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 37:\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\n\t\t\t\t\t\t\t\t\tvakata_context.element.find(\".vakata-context-hover\").last().parents(\"li:eq(0)\").find(\"ul\").hide().find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end().end().children('a').focus();\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 38:\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\n\t\t\t\t\t\t\t\t\to = vakata_context.element.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").prevAll(\"li:not(.vakata-context-separator)\").first();\n\t\t\t\t\t\t\t\t\tif(!o.length) { o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").last(); }\n\t\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 39:\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\n\t\t\t\t\t\t\t\t\tvakata_context.element.find(\".vakata-context-hover\").last().children(\"ul\").show().children(\"li:not(.vakata-context-separator)\").removeClass(\"vakata-context-hover\").first().addClass(\"vakata-context-hover\").children('a').focus();\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 40:\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\n\t\t\t\t\t\t\t\t\to = vakata_context.element.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").nextAll(\"li:not(.vakata-context-separator)\").first();\n\t\t\t\t\t\t\t\t\tif(!o.length) { o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").first(); }\n\t\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 27:\n\t\t\t\t\t\t\t\t$.vakata.context.hide();\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(e.which);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.on('keydown', function (e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tvar a = vakata_context.element.find('.vakata-contextmenu-shortcut-' + e.which).parent();\n\t\t\t\t\tif(a.parent().not('.vakata-context-disabled')) {\n\t\t\t\t\t\ta.mouseup();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.appendTo(\"body\");\n\n\t\t\t$(document)\n\t\t\t\t.on(\"mousedown\", function (e) {\n\t\t\t\t\tif(vakata_context.is_visible && !$.contains(vakata_context.element[0], e.target)) { $.vakata.context.hide(); }\n\t\t\t\t})\n\t\t\t\t.on(\"context_show.vakata\", function (e, data) {\n\t\t\t\t\tvakata_context.element.find(\"li:has(ul)\").children(\"a\").addClass(\"vakata-context-parent\");\n\t\t\t\t\tif(right_to_left) {\n\t\t\t\t\t\tvakata_context.element.addClass(\"vakata-context-rtl\").css(\"direction\", \"rtl\");\n\t\t\t\t\t}\n\t\t\t\t\t// also apply a RTL class?\n\t\t\t\t\tvakata_context.element.find(\"ul\").hide().end();\n\t\t\t\t});\n\t\t});\n\t}($));\n\t// $.jstree.defaults.plugins.push(\"contextmenu\");\n\n/**\n * ### Drag'n'drop plugin\n *\n * Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.\n */\n\n\t/**\n\t * stores all defaults for the drag'n'drop plugin\n\t * @name $.jstree.defaults.dnd\n\t * @plugin dnd\n\t */\n\t$.jstree.defaults.dnd = {\n\t\t/**\n\t\t * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.\n\t\t * @name $.jstree.defaults.dnd.copy\n\t\t * @plugin dnd\n\t\t */\n\t\tcopy : true,\n\t\t/**\n\t\t * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.\n\t\t * @name $.jstree.defaults.dnd.open_timeout\n\t\t * @plugin dnd\n\t\t */\n\t\topen_timeout : 500,\n\t\t/**\n\t\t * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) - return `false` to prevent dragging\n\t\t * @name $.jstree.defaults.dnd.is_draggable\n\t\t * @plugin dnd\n\t\t */\n\t\tis_draggable : true,\n\t\t/**\n\t\t * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`\n\t\t * @name $.jstree.defaults.dnd.check_while_dragging\n\t\t * @plugin dnd\n\t\t */\n\t\tcheck_while_dragging : true,\n\t\t/**\n\t\t * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`\n\t\t * @name $.jstree.defaults.dnd.always_copy\n\t\t * @plugin dnd\n\t\t */\n\t\talways_copy : false,\n\t\t/**\n\t\t * when dropping a node \"inside\", this setting indicates the position the node should go to - it can be an integer or a string: \"first\" (same as 0) or \"last\", default is `0`\n\t\t * @name $.jstree.defaults.dnd.inside_pos\n\t\t * @plugin dnd\n\t\t */\n\t\tinside_pos : 0\n\t};\n\t// TODO: now check works by checking for each node individually, how about max_children, unique, etc?\n\t// TODO: drop somewhere else - maybe demo only?\n\t$.jstree.plugins.dnd = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\n\t\t\tthis.element\n\t\t\t\t.on('mousedown.jstree touchstart.jstree', '.jstree-anchor', $.proxy(function (e) {\n\t\t\t\t\tvar obj = this.get_node(e.target),\n\t\t\t\t\t\tmlt = this.is_selected(obj) ? this.get_selected().length : 1;\n\t\t\t\t\tif(obj && obj.id && obj.id !== \"#\" && (e.which === 1 || e.type === \"touchstart\") &&\n\t\t\t\t\t\t(this.settings.dnd.is_draggable === true || ($.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, (mlt > 1 ? this.get_selected(true) : [obj]))))\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.element.trigger('mousedown.jstree');\n\t\t\t\t\t\treturn $.vakata.dnd.start(e, { 'jstree' : true, 'origin' : this, 'obj' : this.get_node(obj,true), 'nodes' : mlt > 1 ? this.get_selected() : [obj.id] }, '<div id=\"jstree-dnd\" class=\"jstree-' + this.get_theme() + ( this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ) + '\"><i class=\"jstree-icon jstree-er\"></i>' + (mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget, true)) + '<ins class=\"jstree-copy\" style=\"display:none;\">+</ins></div>');\n\t\t\t\t\t}\n\t\t\t\t}, this));\n\t\t};\n\t};\n\n\t$(function() {\n\t\t// bind only once for all instances\n\t\tvar lastmv = false,\n\t\t\tlaster = false,\n\t\t\topento = false,\n\t\t\tmarker = $('<div id=\"jstree-marker\">&#160;</div>').hide().appendTo('body');\n\n\t\t$(document)\n\t\t\t.bind('dnd_start.vakata', function (e, data) {\n\t\t\t\tlastmv = false;\n\t\t\t})\n\t\t\t.bind('dnd_move.vakata', function (e, data) {\n\t\t\t\tif(opento) { clearTimeout(opento); }\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\n\n\t\t\t\t// if we are hovering the marker image do nothing (can happen on \"inside\" drags)\n\t\t\t\tif(data.event.target.id && data.event.target.id === 'jstree-marker') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar ins = $.jstree.reference(data.event.target),\n\t\t\t\t\tref = false,\n\t\t\t\t\toff = false,\n\t\t\t\t\trel = false,\n\t\t\t\t\tl, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm;\n\t\t\t\t// if we are over an instance\n\t\t\t\tif(ins && ins._data && ins._data.dnd) {\n\t\t\t\t\tmarker.attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ));\n\t\t\t\t\tdata.helper\n\t\t\t\t\t\t.children().attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ))\n\t\t\t\t\t\t.find('.jstree-copy:eq(0)')[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'show' : 'hide' ]();\n\n\n\t\t\t\t\t// if are hovering the container itself add a new root node\n\t\t\t\t\tif( (data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\n\t\t\t\t\t\t\tok = ok && ins.check( (data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ) ? \"copy_node\" : \"move_node\"), (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), '#', 'last', { 'dnd' : true, 'ref' : ins.get_node('#'), 'pos' : 'i', 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) });\n\t\t\t\t\t\t\tif(!ok) { break; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(ok) {\n\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : '#', 'pos' : 'last' };\n\t\t\t\t\t\t\tmarker.hide();\n\t\t\t\t\t\t\tdata.helper.find('.jstree-icon:eq(0)').removeClass('jstree-er').addClass('jstree-ok');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// if we are hovering a tree node\n\t\t\t\t\t\tref = $(data.event.target).closest('.jstree-anchor');\n\t\t\t\t\t\tif(ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {\n\t\t\t\t\t\t\toff = ref.offset();\n\t\t\t\t\t\t\trel = data.event.pageY - off.top;\n\t\t\t\t\t\t\th = ref.height();\n\t\t\t\t\t\t\tif(rel < h / 3) {\n\t\t\t\t\t\t\t\to = ['b', 'i', 'a'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(rel > h - h / 3) {\n\t\t\t\t\t\t\t\to = ['a', 'i', 'b'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\to = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$.each(o, function (j, v) {\n\t\t\t\t\t\t\t\tswitch(v) {\n\t\t\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\n\t\t\t\t\t\t\t\t\t\tt = off.top;\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index();\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\t\t\tip = ins.settings.dnd.inside_pos;\n\t\t\t\t\t\t\t\t\t\ttm = ins.get_node(ref.parent());\n\t\t\t\t\t\t\t\t\t\tl = off.left - 2;\n\t\t\t\t\t\t\t\t\t\tt = off.top + h / 2 + 1;\n\t\t\t\t\t\t\t\t\t\tp = tm.id;\n\t\t\t\t\t\t\t\t\t\ti = ip === 'first' ? 0 : (ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length));\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'a':\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\n\t\t\t\t\t\t\t\t\t\tt = off.top + h;\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index() + 1;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/*!\n\t\t\t\t\t\t\t\t// TODO: moving inside, but the node is not yet loaded?\n\t\t\t\t\t\t\t\t// the check will work anyway, as when moving the node will be loaded first and checked again\n\t\t\t\t\t\t\t\tif(v === 'i' && !ins.is_loaded(p)) { }\n\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\n\t\t\t\t\t\t\t\t\top = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? \"copy_node\" : \"move_node\";\n\t\t\t\t\t\t\t\t\tps = i;\n\t\t\t\t\t\t\t\t\tif(op === \"move_node\" && v === 'a' && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {\n\t\t\t\t\t\t\t\t\t\tpr = ins.get_node(p);\n\t\t\t\t\t\t\t\t\t\tif(ps > $.inArray(data.data.nodes[t1], pr.children)) {\n\t\t\t\t\t\t\t\t\t\t\tps -= 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tok = ok && ( (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false) || ins.check(op, (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), p, ps, { 'dnd' : true, 'ref' : ins.get_node(ref.parent()), 'pos' : v, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) }) );\n\t\t\t\t\t\t\t\t\tif(!ok) {\n\t\t\t\t\t\t\t\t\t\tif(ins && ins.last_error) { laster = ins.last_error(); }\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(ok) {\n\t\t\t\t\t\t\t\t\tif(v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {\n\t\t\t\t\t\t\t\t\t\topento = setTimeout((function (x, z) { return function () { x.open_node(z); }; }(ins, ref)), ins.settings.dnd.open_timeout);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : p, 'pos' : v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i };\n\t\t\t\t\t\t\t\t\tmarker.css({ 'left' : l + 'px', 'top' : t + 'px' }).show();\n\t\t\t\t\t\t\t\t\tdata.helper.find('.jstree-icon:eq(0)').removeClass('jstree-er').addClass('jstree-ok');\n\t\t\t\t\t\t\t\t\tlaster = {};\n\t\t\t\t\t\t\t\t\to = true;\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif(o === true) { return; }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlastmv = false;\n\t\t\t\tdata.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');\n\t\t\t\tmarker.hide();\n\t\t\t})\n\t\t\t.bind('dnd_scroll.vakata', function (e, data) {\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\n\t\t\t\tmarker.hide();\n\t\t\t\tlastmv = false;\n\t\t\t\tdata.helper.find('.jstree-icon:eq(0)').removeClass('jstree-ok').addClass('jstree-er');\n\t\t\t})\n\t\t\t.bind('dnd_stop.vakata', function (e, data) {\n\t\t\t\tif(opento) { clearTimeout(opento); }\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\n\t\t\t\tmarker.hide();\n\t\t\t\tvar i, j, nodes = [];\n\t\t\t\tif(lastmv) {\n\t\t\t\t\tfor(i = 0, j = data.data.nodes.length; i < j; i++) {\n\t\t\t\t\t\tnodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];\n\t\t\t\t\t\tif(data.data.origin) {\n\t\t\t\t\t\t\tnodes[i].instance = data.data.origin;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlastmv.ins[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'copy_node' : 'move_node' ](nodes, lastmv.par, lastmv.pos);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti = $(data.event.target).closest('.jstree');\n\t\t\t\t\tif(i.length && laster && laster.error && laster.error === 'check') {\n\t\t\t\t\t\ti = i.jstree(true);\n\t\t\t\t\t\tif(i) {\n\t\t\t\t\t\t\ti.settings.core.error.call(this, laster);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.bind('keyup keydown', function (e, data) {\n\t\t\t\tdata = $.vakata.dnd._get();\n\t\t\t\tif(data && data.data && data.data.jstree) {\n\t\t\t\t\tdata.helper.find('.jstree-copy:eq(0)')[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey))) ? 'show' : 'hide' ]();\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\t// helpers\n\t(function ($) {\n\t\t// private variable\n\t\tvar vakata_dnd = {\n\t\t\telement\t: false,\n\t\t\ttarget\t: false,\n\t\t\tis_down\t: false,\n\t\t\tis_drag\t: false,\n\t\t\thelper\t: false,\n\t\t\thelper_w: 0,\n\t\t\tdata\t: false,\n\t\t\tinit_x\t: 0,\n\t\t\tinit_y\t: 0,\n\t\t\tscroll_l: 0,\n\t\t\tscroll_t: 0,\n\t\t\tscroll_e: false,\n\t\t\tscroll_i: false,\n\t\t\tis_touch: false\n\t\t};\n\t\t$.vakata.dnd = {\n\t\t\tsettings : {\n\t\t\t\tscroll_speed\t\t: 10,\n\t\t\t\tscroll_proximity\t: 20,\n\t\t\t\thelper_left\t\t\t: 5,\n\t\t\t\thelper_top\t\t\t: 10,\n\t\t\t\tthreshold\t\t\t: 5,\n\t\t\t\tthreshold_touch\t\t: 50\n\t\t\t},\n\t\t\t_trigger : function (event_name, e) {\n\t\t\t\tvar data = $.vakata.dnd._get();\n\t\t\t\tdata.event = e;\n\t\t\t\t$(document).triggerHandler(\"dnd_\" + event_name + \".vakata\", data);\n\t\t\t},\n\t\t\t_get : function () {\n\t\t\t\treturn {\n\t\t\t\t\t\"data\"\t\t: vakata_dnd.data,\n\t\t\t\t\t\"element\"\t: vakata_dnd.element,\n\t\t\t\t\t\"helper\"\t: vakata_dnd.helper\n\t\t\t\t};\n\t\t\t},\n\t\t\t_clean : function () {\n\t\t\t\tif(vakata_dnd.helper) { vakata_dnd.helper.remove(); }\n\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\n\t\t\t\tvakata_dnd = {\n\t\t\t\t\telement\t: false,\n\t\t\t\t\ttarget\t: false,\n\t\t\t\t\tis_down\t: false,\n\t\t\t\t\tis_drag\t: false,\n\t\t\t\t\thelper\t: false,\n\t\t\t\t\thelper_w: 0,\n\t\t\t\t\tdata\t: false,\n\t\t\t\t\tinit_x\t: 0,\n\t\t\t\t\tinit_y\t: 0,\n\t\t\t\t\tscroll_l: 0,\n\t\t\t\t\tscroll_t: 0,\n\t\t\t\t\tscroll_e: false,\n\t\t\t\t\tscroll_i: false,\n\t\t\t\t\tis_touch: false\n\t\t\t\t};\n\t\t\t\t$(document).off(\"mousemove touchmove\", $.vakata.dnd.drag);\n\t\t\t\t$(document).off(\"mouseup touchend\", $.vakata.dnd.stop);\n\t\t\t},\n\t\t\t_scroll : function (init_only) {\n\t\t\t\tif(!vakata_dnd.scroll_e || (!vakata_dnd.scroll_l && !vakata_dnd.scroll_t)) {\n\t\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(!vakata_dnd.scroll_i) {\n\t\t\t\t\tvakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(init_only === true) { return false; }\n\n\t\t\t\tvar i = vakata_dnd.scroll_e.scrollTop(),\n\t\t\t\t\tj = vakata_dnd.scroll_e.scrollLeft();\n\t\t\t\tvakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);\n\t\t\t\tvakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);\n\t\t\t\tif(i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered on the document when a drag causes an element to scroll\n\t\t\t\t\t * @event\n\t\t\t\t\t * @plugin dnd\n\t\t\t\t\t * @name dnd_scroll.vakata\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\n\t\t\t\t\t * @param {jQuery} event the element that is scrolling\n\t\t\t\t\t */\n\t\t\t\t\t$.vakata.dnd._trigger(\"scroll\", vakata_dnd.scroll_e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tstart : function (e, data, html) {\n\t\t\t\tif(e.type === \"touchstart\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\n\t\t\t\t}\n\t\t\t\tif(vakata_dnd.is_drag) { $.vakata.dnd.stop({}); }\n\t\t\t\ttry {\n\t\t\t\t\te.currentTarget.unselectable = \"on\";\n\t\t\t\t\te.currentTarget.onselectstart = function() { return false; };\n\t\t\t\t\tif(e.currentTarget.style) { e.currentTarget.style.MozUserSelect = \"none\"; }\n\t\t\t\t} catch(ignore) { }\n\t\t\t\tvakata_dnd.init_x\t= e.pageX;\n\t\t\t\tvakata_dnd.init_y\t= e.pageY;\n\t\t\t\tvakata_dnd.data\t\t= data;\n\t\t\t\tvakata_dnd.is_down\t= true;\n\t\t\t\tvakata_dnd.element\t= e.currentTarget;\n\t\t\t\tvakata_dnd.target\t= e.target;\n\t\t\t\tvakata_dnd.is_touch\t= e.type === \"touchstart\";\n\t\t\t\tif(html !== false) {\n\t\t\t\t\tvakata_dnd.helper = $(\"<div id='vakata-dnd'></div>\").html(html).css({\n\t\t\t\t\t\t\"display\"\t\t: \"block\",\n\t\t\t\t\t\t\"margin\"\t\t: \"0\",\n\t\t\t\t\t\t\"padding\"\t\t: \"0\",\n\t\t\t\t\t\t\"position\"\t\t: \"absolute\",\n\t\t\t\t\t\t\"top\"\t\t\t: \"-2000px\",\n\t\t\t\t\t\t\"lineHeight\"\t: \"16px\",\n\t\t\t\t\t\t\"zIndex\"\t\t: \"10000\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t$(document).bind(\"mousemove touchmove\", $.vakata.dnd.drag);\n\t\t\t\t$(document).bind(\"mouseup touchend\", $.vakata.dnd.stop);\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tdrag : function (e) {\n\t\t\t\tif(e.type === \"touchmove\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\n\t\t\t\t}\n\t\t\t\tif(!vakata_dnd.is_down) { return; }\n\t\t\t\tif(!vakata_dnd.is_drag) {\n\t\t\t\t\tif(\n\t\t\t\t\t\tMath.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) ||\n\t\t\t\t\t\tMath.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif(vakata_dnd.helper) {\n\t\t\t\t\t\t\tvakata_dnd.helper.appendTo(\"body\");\n\t\t\t\t\t\t\tvakata_dnd.helper_w = vakata_dnd.helper.outerWidth();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvakata_dnd.is_drag = true;\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * triggered on the document when a drag starts\n\t\t\t\t\t\t * @event\n\t\t\t\t\t\t * @plugin dnd\n\t\t\t\t\t\t * @name dnd_start.vakata\n\t\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n\t\t\t\t\t\t * @param {DOM} element the DOM element being dragged\n\t\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\n\t\t\t\t\t\t * @param {Object} event the event that caused the start (probably mousemove)\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$.vakata.dnd._trigger(\"start\", e);\n\t\t\t\t\t}\n\t\t\t\t\telse { return; }\n\t\t\t\t}\n\n\t\t\t\tvar d  = false, w  = false,\n\t\t\t\t\tdh = false, wh = false,\n\t\t\t\t\tdw = false, ww = false,\n\t\t\t\t\tdt = false, dl = false,\n\t\t\t\t\tht = false, hl = false;\n\n\t\t\t\tvakata_dnd.scroll_t = 0;\n\t\t\t\tvakata_dnd.scroll_l = 0;\n\t\t\t\tvakata_dnd.scroll_e = false;\n\t\t\t\t$($(e.target).parentsUntil(\"body\").addBack().get().reverse())\n\t\t\t\t\t.filter(function () {\n\t\t\t\t\t\treturn\t(/^auto|scroll$/).test($(this).css(\"overflow\")) &&\n\t\t\t\t\t\t\t\t(this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);\n\t\t\t\t\t})\n\t\t\t\t\t.each(function () {\n\t\t\t\t\t\tvar t = $(this), o = t.offset();\n\t\t\t\t\t\tif(this.scrollHeight > this.offsetHeight) {\n\t\t\t\t\t\t\tif(o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\n\t\t\t\t\t\t\tif(e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_t = -1; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.scrollWidth > this.offsetWidth) {\n\t\t\t\t\t\t\tif(o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\n\t\t\t\t\t\t\tif(e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_l = -1; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\n\t\t\t\t\t\t\tvakata_dnd.scroll_e = $(this);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\tif(!vakata_dnd.scroll_e) {\n\t\t\t\t\td  = $(document); w = $(window);\n\t\t\t\t\tdh = d.height(); wh = w.height();\n\t\t\t\t\tdw = d.width(); ww = w.width();\n\t\t\t\t\tdt = d.scrollTop(); dl = d.scrollLeft();\n\t\t\t\t\tif(dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_t = -1;  }\n\t\t\t\t\tif(dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\n\t\t\t\t\tif(dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_l = -1; }\n\t\t\t\t\tif(dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\n\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\n\t\t\t\t\t\tvakata_dnd.scroll_e = d;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(vakata_dnd.scroll_e) { $.vakata.dnd._scroll(true); }\n\n\t\t\t\tif(vakata_dnd.helper) {\n\t\t\t\t\tht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);\n\t\t\t\t\thl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);\n\t\t\t\t\tif(dh && ht + 25 > dh) { ht = dh - 50; }\n\t\t\t\t\tif(dw && hl + vakata_dnd.helper_w > dw) { hl = dw - (vakata_dnd.helper_w + 2); }\n\t\t\t\t\tvakata_dnd.helper.css({\n\t\t\t\t\t\tleft\t: hl + \"px\",\n\t\t\t\t\t\ttop\t\t: ht + \"px\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * triggered on the document when a drag is in progress\n\t\t\t\t * @event\n\t\t\t\t * @plugin dnd\n\t\t\t\t * @name dnd_move.vakata\n\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n\t\t\t\t * @param {DOM} element the DOM element being dragged\n\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\n\t\t\t\t * @param {Object} event the event that caused this to trigger (most likely mousemove)\n\t\t\t\t */\n\t\t\t\t$.vakata.dnd._trigger(\"move\", e);\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tstop : function (e) {\n\t\t\t\tif(e.type === \"touchend\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\n\t\t\t\t}\n\t\t\t\tif(vakata_dnd.is_drag) {\n\t\t\t\t\t/**\n\t\t\t\t\t * triggered on the document when a drag stops (the dragged element is dropped)\n\t\t\t\t\t * @event\n\t\t\t\t\t * @plugin dnd\n\t\t\t\t\t * @name dnd_stop.vakata\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\n\t\t\t\t\t * @param {Object} event the event that caused the stop\n\t\t\t\t\t */\n\t\t\t\t\t$.vakata.dnd._trigger(\"stop\", e);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(e.type === \"touchend\" && e.target === vakata_dnd.target) {\n\t\t\t\t\t\tvar to = setTimeout(function () { $(e.target).click(); }, 100);\n\t\t\t\t\t\t$(e.target).one('click', function() { if(to) { clearTimeout(to); } });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$.vakata.dnd._clean();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}($));\n\n\t// include the dnd plugin by default\n\t// $.jstree.defaults.plugins.push(\"dnd\");\n\n\n/**\n * ### Search plugin\n *\n * Adds search functionality to jsTree.\n */\n\n\t/**\n\t * stores all defaults for the search plugin\n\t * @name $.jstree.defaults.search\n\t * @plugin search\n\t */\n\t$.jstree.defaults.search = {\n\t\t/**\n\t\t * a jQuery-like AJAX config, which jstree uses if a server should be queried for results. \n\t\t * \n\t\t * A `str` (which is the search string) parameter will be added with the request. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.\n\t\t * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 2 parameters - the search string and the callback to call with the array of nodes to load.\n\t\t * @name $.jstree.defaults.search.ajax\n\t\t * @plugin search\n\t\t */\n\t\tajax : false,\n\t\t/**\n\t\t * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.\n\t\t * @name $.jstree.defaults.search.fuzzy\n\t\t * @plugin search\n\t\t */\n\t\tfuzzy : false,\n\t\t/**\n\t\t * Indicates if the search should be case sensitive. Default is `false`.\n\t\t * @name $.jstree.defaults.search.case_sensitive\n\t\t * @plugin search\n\t\t */\n\t\tcase_sensitive : false,\n\t\t/**\n\t\t * Indicates if the tree should be filtered to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers). Default is `false`.\n\t\t * @name $.jstree.defaults.search.show_only_matches\n\t\t * @plugin search\n\t\t */\n\t\tshow_only_matches : false,\n\t\t/**\n\t\t * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.\n\t\t * @name $.jstree.defaults.search.close_opened_onclear\n\t\t * @plugin search\n\t\t */\n\t\tclose_opened_onclear : true,\n\t\t/**\n\t\t * Indicates if only leaf nodes should be included in search results. Default is `false`.\n\t\t * @name $.jstree.defaults.search.search_leaves_only\n\t\t * @plugin search\n\t\t */\n\t\tsearch_leaves_only : false,\n\t\t/**\n\t\t * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).\n\t\t * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.\n\t\t * @name $.jstree.defaults.search.search_callback\n\t\t * @plugin search\n\t\t */\n\t\tsearch_callback : false\n\t};\n\n\t$.jstree.plugins.search = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\n\t\t\tthis._data.search.str = \"\";\n\t\t\tthis._data.search.dom = $();\n\t\t\tthis._data.search.res = [];\n\t\t\tthis._data.search.opn = [];\n\n\t\t\tthis.element.on('before_open.jstree', $.proxy(function (e, data) {\n\t\t\t\tvar i, j, f, r = this._data.search.res, s = [], o = $();\n\t\t\t\tif(r && r.length) {\n\t\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #')));\n\t\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").addClass('jstree-search');\n\t\t\t\t\tif(this.settings.search.show_only_matches && this._data.search.res.length) {\n\t\t\t\t\t\tfor(i = 0, j = r.length; i < j; i++) {\n\t\t\t\t\t\t\ts = s.concat(this.get_node(r[i]).parents);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts = $.vakata.array_remove_item($.vakata.array_unique(s),'#');\n\t\t\t\t\t\to = s.length ? $(this.element[0].querySelectorAll('#' + $.map(s, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #'))) : $();\n\n\t\t\t\t\t\tthis.element.find(\".jstree-node\").hide().filter('.jstree-last').filter(function() { return this.nextSibling; }).removeClass('jstree-last');\n\t\t\t\t\t\to = o.add(this._data.search.dom);\n\t\t\t\t\t\to.parentsUntil(\".jstree\").addBack().show()\n\t\t\t\t\t\t\t.filter(\".jstree-children\").each(function () { $(this).children(\".jstree-node:visible\").eq(-1).addClass(\"jstree-last\"); });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this));\n\t\t\tif(this.settings.search.show_only_matches) {\n\t\t\t\tthis.element\n\t\t\t\t\t.on(\"search.jstree\", function (e, data) {\n\t\t\t\t\t\tif(data.nodes.length) {\n\t\t\t\t\t\t\t$(this).find(\".jstree-node\").hide().filter('.jstree-last').filter(function() { return this.nextSibling; }).removeClass('jstree-last');\n\t\t\t\t\t\t\tdata.nodes.parentsUntil(\".jstree\").addBack().show()\n\t\t\t\t\t\t\t\t.filter(\".jstree-children\").each(function () { $(this).children(\".jstree-node:visible\").eq(-1).addClass(\"jstree-last\"); });\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.on(\"clear_search.jstree\", function (e, data) {\n\t\t\t\t\t\tif(data.nodes.length) {\n\t\t\t\t\t\t\t$(this).find(\".jstree-node\").css(\"display\",\"\").filter('.jstree-last').filter(function() { return this.nextSibling; }).removeClass('jstree-last');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * used to search the tree nodes for a given string\n\t\t * @name search(str [, skip_async])\n\t\t * @param {String} str the search string\n\t\t * @param {Boolean} skip_async if set to true server will not be queried even if configured\n\t\t * @plugin search\n\t\t * @trigger search.jstree\n\t\t */\n\t\tthis.search = function (str, skip_async) {\n\t\t\tif(str === false || $.trim(str.toString()) === \"\") {\n\t\t\t\treturn this.clear_search();\n\t\t\t}\n\t\t\tstr = str.toString();\n\t\t\tvar s = this.settings.search,\n\t\t\t\ta = s.ajax ? s.ajax : false,\n\t\t\t\tf = null,\n\t\t\t\tr = [],\n\t\t\t\tp = [], i, j;\n\t\t\tif(this._data.search.res.length) {\n\t\t\t\tthis.clear_search();\n\t\t\t}\n\t\t\tif(!skip_async && a !== false) {\n\t\t\t\tif($.isFunction(a)) {\n\t\t\t\t\treturn a.call(this, str, $.proxy(function (d) {\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\n\t\t\t\t\t\t\t\tthis.search(str, true);\n\t\t\t\t\t\t\t}, true);\n\t\t\t\t\t\t}, this));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta = $.extend({}, a);\n\t\t\t\t\tif(!a.data) { a.data = {}; }\n\t\t\t\t\ta.data.str = str;\n\t\t\t\t\treturn $.ajax(a)\n\t\t\t\t\t\t.fail($.proxy(function () {\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'search', 'id' : 'search_01', 'reason' : 'Could not load search parents', 'data' : JSON.stringify(a) };\n\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\n\t\t\t\t\t\t}, this))\n\t\t\t\t\t\t.done($.proxy(function (d) {\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\n\t\t\t\t\t\t\t\tthis.search(str, true);\n\t\t\t\t\t\t\t}, true);\n\t\t\t\t\t\t}, this));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._data.search.str = str;\n\t\t\tthis._data.search.dom = $();\n\t\t\tthis._data.search.res = [];\n\t\t\tthis._data.search.opn = [];\n\n\t\t\tf = new $.vakata.search(str, true, { caseSensitive : s.case_sensitive, fuzzy : s.fuzzy });\n\n\t\t\t$.each(this._model.data, function (i, v) {\n\t\t\t\tif(v.text && ( (s.search_callback && s.search_callback.call(this, str, v)) || (!s.search_callback && f.search(v.text).isMatch) ) && (!s.search_leaves_only || (v.state.loaded && v.children.length === 0)) ) {\n\t\t\t\t\tr.push(i);\n\t\t\t\t\tp = p.concat(v.parents);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(r.length) {\n\t\t\t\tp = $.vakata.array_unique(p);\n\t\t\t\tthis._search_open(p);\n\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #')));\n\t\t\t\tthis._data.search.res = r;\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").addClass('jstree-search');\n\t\t\t}\n\t\t\t/**\n\t\t\t * triggered after search is complete\n\t\t\t * @event\n\t\t\t * @name search.jstree\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes\n\t\t\t * @param {String} str the search string\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes\n\t\t\t * @plugin search\n\t\t\t */\n\t\t\tthis.trigger('search', { nodes : this._data.search.dom, str : str, res : this._data.search.res });\n\t\t};\n\t\t/**\n\t\t * used to clear the last search (removes classes and shows all nodes if filtering is on)\n\t\t * @name clear_search()\n\t\t * @plugin search\n\t\t * @trigger clear_search.jstree\n\t\t */\n\t\tthis.clear_search = function () {\n\t\t\tthis._data.search.dom.children(\".jstree-anchor\").removeClass(\"jstree-search\");\n\t\t\tif(this.settings.search.close_opened_onclear) {\n\t\t\t\tthis.close_node(this._data.search.opn, 0);\n\t\t\t}\n\t\t\t/**\n\t\t\t * triggered after search is complete\n\t\t\t * @event\n\t\t\t * @name clear_search.jstree\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)\n\t\t\t * @param {String} str the search string (the last search string)\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)\n\t\t\t * @plugin search\n\t\t\t */\n\t\t\tthis.trigger('clear_search', { 'nodes' : this._data.search.dom, str : this._data.search.str, res : this._data.search.res });\n\t\t\tthis._data.search.str = \"\";\n\t\t\tthis._data.search.res = [];\n\t\t\tthis._data.search.opn = [];\n\t\t\tthis._data.search.dom = $();\n\t\t};\n\t\t/**\n\t\t * opens nodes that need to be opened to reveal the search results. Used only internally.\n\t\t * @private\n\t\t * @name _search_open(d)\n\t\t * @param {Array} d an array of node IDs\n\t\t * @plugin search\n\t\t */\n\t\tthis._search_open = function (d) {\n\t\t\tvar t = this;\n\t\t\t$.each(d.concat([]), function (i, v) {\n\t\t\t\tif(v === \"#\") { return true; }\n\t\t\t\ttry { v = $('#' + v.replace($.jstree.idregex,'\\\\$&'), t.element); } catch(ignore) { }\n\t\t\t\tif(v && v.length) {\n\t\t\t\t\tif(t.is_closed(v)) {\n\t\t\t\t\t\tt._data.search.opn.push(v[0].id);\n\t\t\t\t\t\tt.open_node(v, function () { t._search_open(d); }, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t};\n\n\t// helpers\n\t(function ($) {\n\t\t// from http://kiro.me/projects/fuse.html\n\t\t$.vakata.search = function(pattern, txt, options) {\n\t\t\toptions = options || {};\n\t\t\tif(options.fuzzy !== false) {\n\t\t\t\toptions.fuzzy = true;\n\t\t\t}\n\t\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\n\t\t\tvar MATCH_LOCATION\t= options.location || 0,\n\t\t\t\tMATCH_DISTANCE\t= options.distance || 100,\n\t\t\t\tMATCH_THRESHOLD\t= options.threshold || 0.6,\n\t\t\t\tpatternLen = pattern.length,\n\t\t\t\tmatchmask, pattern_alphabet, match_bitapScore, search;\n\t\t\tif(patternLen > 32) {\n\t\t\t\toptions.fuzzy = false;\n\t\t\t}\n\t\t\tif(options.fuzzy) {\n\t\t\t\tmatchmask = 1 << (patternLen - 1);\n\t\t\t\tpattern_alphabet = (function () {\n\t\t\t\t\tvar mask = {},\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\n\t\t\t\t\t\tmask[pattern.charAt(i)] = 0;\n\t\t\t\t\t}\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\n\t\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\n\t\t\t\t\t}\n\t\t\t\t\treturn mask;\n\t\t\t\t}());\n\t\t\t\tmatch_bitapScore = function (e, x) {\n\t\t\t\t\tvar accuracy = e / patternLen,\n\t\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\n\t\t\t\t\tif(!MATCH_DISTANCE) {\n\t\t\t\t\t\treturn proximity ? 1.0 : accuracy;\n\t\t\t\t\t}\n\t\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\n\t\t\t\t};\n\t\t\t}\n\t\t\tsearch = function (text) {\n\t\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\n\t\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisMatch: true,\n\t\t\t\t\t\tscore: 0\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif(!options.fuzzy) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisMatch: false,\n\t\t\t\t\t\tscore: 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar i, j,\n\t\t\t\t\ttextLen = text.length,\n\t\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\n\t\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\n\t\t\t\t\tbinMin, binMid,\n\t\t\t\t\tbinMax = patternLen + textLen,\n\t\t\t\t\tlastRd, start, finish, rd, charMatch,\n\t\t\t\t\tscore = 1,\n\t\t\t\t\tlocations = [];\n\t\t\t\tif (bestLoc !== -1) {\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\n\t\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\n\t\t\t\t\tif (bestLoc !== -1) {\n\t\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbestLoc = -1;\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\n\t\t\t\t\tbinMin = 0;\n\t\t\t\t\tbinMid = binMax;\n\t\t\t\t\twhile (binMin < binMid) {\n\t\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\n\t\t\t\t\t\t\tbinMin = binMid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbinMax = binMid;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\n\t\t\t\t\t}\n\t\t\t\t\tbinMax = binMid;\n\t\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\n\t\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\n\t\t\t\t\trd = new Array(finish + 2);\n\t\t\t\t\trd[finish + 1] = (1 << i) - 1;\n\t\t\t\t\tfor (j = finish; j >= start; j--) {\n\t\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rd[j] & matchmask) {\n\t\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\n\t\t\t\t\t\t\tif (score <= scoreThreshold) {\n\t\t\t\t\t\t\t\tscoreThreshold = score;\n\t\t\t\t\t\t\t\tbestLoc = j - 1;\n\t\t\t\t\t\t\t\tlocations.push(bestLoc);\n\t\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\n\t\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlastRd = rd;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tisMatch: bestLoc >= 0,\n\t\t\t\t\tscore: score\n\t\t\t\t};\n\t\t\t};\n\t\t\treturn txt === true ? { 'search' : search } : search(txt);\n\t\t};\n\t}($));\n\n\t// include the search plugin by default\n\t// $.jstree.defaults.plugins.push(\"search\");\n\n/**\n * ### Sort plugin\n *\n * Autmatically sorts all siblings in the tree according to a sorting function.\n */\n\n\t/**\n\t * the settings function used to sort the nodes.\n\t * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\n\t * @name $.jstree.defaults.sort\n\t * @plugin sort\n\t */\n\t$.jstree.defaults.sort = function (a, b) {\n\t\t//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\n\t\treturn this.get_text(a) > this.get_text(b) ? 1 : -1;\n\t};\n\t$.jstree.plugins.sort = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\t\t\tthis.element\n\t\t\t\t.on(\"model.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.sort(data.parent, true);\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"rename_node.jstree create_node.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.sort(data.parent || data.node.parent, false);\n\t\t\t\t\t\tthis.redraw_node(data.parent || data.node.parent, true);\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"move_node.jstree copy_node.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.sort(data.parent, false);\n\t\t\t\t\t\tthis.redraw_node(data.parent, true);\n\t\t\t\t\t}, this));\n\t\t};\n\t\t/**\n\t\t * used to sort a node's children\n\t\t * @private\n\t\t * @name sort(obj [, deep])\n\t\t * @param  {mixed} obj the node\n\t\t * @param {Boolean} deep if set to `true` nodes are sorted recursively.\n\t\t * @plugin sort\n\t\t * @trigger search.jstree\n\t\t */\n\t\tthis.sort = function (obj, deep) {\n\t\t\tvar i, j;\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(obj && obj.children && obj.children.length) {\n\t\t\t\tobj.children.sort($.proxy(this.settings.sort, this));\n\t\t\t\tif(deep) {\n\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\t\tthis.sort(obj.children_d[i], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n\t// include the sort plugin by default\n\t// $.jstree.defaults.plugins.push(\"sort\");\n\n/**\n * ### State plugin\n *\n * Saves the state of the tree (selected nodes, opened nodes) on the user's computer using available options (localStorage, cookies, etc)\n */\n\n\tvar to = false;\n\t/**\n\t * stores all defaults for the state plugin\n\t * @name $.jstree.defaults.state\n\t * @plugin state\n\t */\n\t$.jstree.defaults.state = {\n\t\t/**\n\t\t * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.\n\t\t * @name $.jstree.defaults.state.key\n\t\t * @plugin state\n\t\t */\n\t\tkey\t\t: 'jstree',\n\t\t/**\n\t\t * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.\n\t\t * @name $.jstree.defaults.state.events\n\t\t * @plugin state\n\t\t */\n\t\tevents\t: 'changed.jstree open_node.jstree close_node.jstree',\n\t\t/**\n\t\t * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.\n\t\t * @name $.jstree.defaults.state.ttl\n\t\t * @plugin state\n\t\t */\n\t\tttl\t\t: false,\n\t\t/**\n\t\t * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.\n\t\t * @name $.jstree.defaults.state.filter\n\t\t * @plugin state\n\t\t */\n\t\tfilter\t: false\n\t};\n\t$.jstree.plugins.state = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\t\t\tvar bind = $.proxy(function () {\n\t\t\t\tthis.element.on(this.settings.state.events, $.proxy(function () {\n\t\t\t\t\tif(to) { clearTimeout(to); }\n\t\t\t\t\tto = setTimeout($.proxy(function () { this.save_state(); }, this), 100);\n\t\t\t\t}, this));\n\t\t\t}, this);\n\t\t\tthis.element\n\t\t\t\t.on(\"ready.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.element.one(\"restore_state.jstree\", bind);\n\t\t\t\t\t\tif(!this.restore_state()) { bind(); }\n\t\t\t\t\t}, this));\n\t\t};\n\t\t/**\n\t\t * save the state\n\t\t * @name save_state()\n\t\t * @plugin state\n\t\t */\n\t\tthis.save_state = function () {\n\t\t\tvar st = { 'state' : this.get_state(), 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };\n\t\t\t$.vakata.storage.set(this.settings.state.key, JSON.stringify(st));\n\t\t};\n\t\t/**\n\t\t * restore the state from the user's computer\n\t\t * @name restore_state()\n\t\t * @plugin state\n\t\t */\n\t\tthis.restore_state = function () {\n\t\t\tvar k = $.vakata.storage.get(this.settings.state.key);\n\t\t\tif(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }\n\t\t\tif(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }\n\t\t\tif(!!k && k.state) { k = k.state; }\n\t\t\tif(!!k && $.isFunction(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }\n\t\t\tif(!!k) {\n\t\t\t\tthis.element.one(\"set_state.jstree\", function (e, data) { data.instance.trigger('restore_state', { 'state' : $.extend(true, {}, k) }); });\n\t\t\t\tthis.set_state(k);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t/**\n\t\t * clear the state on the user's computer\n\t\t * @name clear_state()\n\t\t * @plugin state\n\t\t */\n\t\tthis.clear_state = function () {\n\t\t\treturn $.vakata.storage.del(this.settings.state.key);\n\t\t};\n\t};\n\n\t(function ($, undefined) {\n\t\t$.vakata.storage = {\n\t\t\t// simply specifying the functions in FF throws an error\n\t\t\tset : function (key, val) { return window.localStorage.setItem(key, val); },\n\t\t\tget : function (key) { return window.localStorage.getItem(key); },\n\t\t\tdel : function (key) { return window.localStorage.removeItem(key); }\n\t\t};\n\t}($));\n\n\t// include the state plugin by default\n\t// $.jstree.defaults.plugins.push(\"state\");\n\n/**\n * ### Types plugin\n *\n * Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.\n */\n\n\t/**\n\t * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).\n\t * \n\t * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.\n\t * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.\n\t * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.\n\t * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.\n\t *\n\t * There are two predefined types:\n\t * \n\t * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.\n\t * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.\n\t * \n\t * @name $.jstree.defaults.types\n\t * @plugin types\n\t */\n\t$.jstree.defaults.types = {\n\t\t'#' : {},\n\t\t'default' : {}\n\t};\n\n\t$.jstree.plugins.types = function (options, parent) {\n\t\tthis.init = function (el, options) {\n\t\t\tvar i, j;\n\t\t\tif(options && options.types && options.types['default']) {\n\t\t\t\tfor(i in options.types) {\n\t\t\t\t\tif(i !== \"default\" && i !== \"#\" && options.types.hasOwnProperty(i)) {\n\t\t\t\t\t\tfor(j in options.types['default']) {\n\t\t\t\t\t\t\tif(options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {\n\t\t\t\t\t\t\t\toptions.types[i][j] = options.types['default'][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tparent.init.call(this, el, options);\n\t\t\tthis._model.data['#'].type = '#';\n\t\t};\n\t\tthis.refresh = function (skip_loading, forget_state) {\n\t\t\tparent.refresh.call(this, skip_loading, forget_state);\n\t\t\tthis._model.data['#'].type = '#';\n\t\t};\n\t\tthis.bind = function () {\n\t\t\tthis.element\n\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\n\t\t\t\t\t\tvar m = this._model.data,\n\t\t\t\t\t\t\tdpc = data.nodes,\n\t\t\t\t\t\t\tt = this.settings.types,\n\t\t\t\t\t\t\ti, j, c = 'default';\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\n\t\t\t\t\t\t\tc = 'default';\n\t\t\t\t\t\t\tif(m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {\n\t\t\t\t\t\t\t\tc = m[dpc[i]].original.type;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {\n\t\t\t\t\t\t\t\tc = m[dpc[i]].data.jstree.type;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tm[dpc[i]].type = c;\n\t\t\t\t\t\t\tif(m[dpc[i]].icon === true && t[c].icon !== undefined) {\n\t\t\t\t\t\t\t\tm[dpc[i]].icon = t[c].icon;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tm['#'].type = '#';\n\t\t\t\t\t}, this));\n\t\t\tparent.bind.call(this);\n\t\t};\n\t\tthis.get_json = function (obj, options, flat) {\n\t\t\tvar i, j,\n\t\t\t\tm = this._model.data,\n\t\t\t\topt = options ? $.extend(true, {}, options, {no_id:false}) : {},\n\t\t\t\ttmp = parent.get_json.call(this, obj, opt, flat);\n\t\t\tif(tmp === false) { return false; }\n\t\t\tif($.isArray(tmp)) {\n\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\t\ttmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : \"default\";\n\t\t\t\t\tif(options && options.no_id) {\n\t\t\t\t\t\tdelete tmp[i].id;\n\t\t\t\t\t\tif(tmp[i].li_attr && tmp[i].li_attr.id) {\n\t\t\t\t\t\t\tdelete tmp[i].li_attr.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : \"default\";\n\t\t\t\tif(options && options.no_id) {\n\t\t\t\t\ttmp = this._delete_ids(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tmp;\n\t\t};\n\t\tthis._delete_ids = function (tmp) {\n\t\t\tif($.isArray(tmp)) {\n\t\t\t\tfor(var i = 0, j = tmp.length; i < j; i++) {\n\t\t\t\t\ttmp[i] = this._delete_ids(tmp[i]);\n\t\t\t\t}\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\tdelete tmp.id;\n\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\n\t\t\t\tdelete tmp.li_attr.id;\n\t\t\t}\n\t\t\tif(tmp.children && $.isArray(tmp.children)) {\n\t\t\t\ttmp.children = this._delete_ids(tmp.children);\n\t\t\t}\n\t\t\treturn tmp;\n\t\t};\n\t\tthis.check = function (chk, obj, par, pos, more) {\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\n\t\t\tpar = par && par.id ? par : this.get_node(par);\n\t\t\tvar m = obj && obj.id ? $.jstree.reference(obj.id) : null, tmp, d, i, j;\n\t\t\tm = m && m._model && m._model.data ? m._model.data : null;\n\t\t\tswitch(chk) {\n\t\t\t\tcase \"create_node\":\n\t\t\t\tcase \"move_node\":\n\t\t\t\tcase \"copy_node\":\n\t\t\t\t\tif(chk !== 'move_node' || $.inArray(obj.id, par.children) === -1) {\n\t\t\t\t\t\ttmp = this.get_rules(par);\n\t\t\t\t\t\tif(tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_01', 'reason' : 'max_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(tmp.valid_children !== undefined && tmp.valid_children !== -1 && $.inArray(obj.type, tmp.valid_children) === -1) {\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_02', 'reason' : 'valid_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(m && obj.children_d && obj.parents) {\n\t\t\t\t\t\t\td = 0;\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\t\t\t\td = Math.max(d, m[obj.children_d[i]].parents.length);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\td = d - obj.parents.length + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(d <= 0 || d === undefined) { d = 1; }\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif(tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_03', 'reason' : 'max_depth prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpar = this.get_node(par.parent);\n\t\t\t\t\t\t\ttmp = this.get_rules(par);\n\t\t\t\t\t\t\td++;\n\t\t\t\t\t\t} while(par);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t/**\n\t\t * used to retrieve the type settings object for a node\n\t\t * @name get_rules(obj)\n\t\t * @param {mixed} obj the node to find the rules for\n\t\t * @return {Object}\n\t\t * @plugin types\n\t\t */\n\t\tthis.get_rules = function (obj) {\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!obj) { return false; }\n\t\t\tvar tmp = this.get_type(obj, true);\n\t\t\tif(tmp.max_depth === undefined) { tmp.max_depth = -1; }\n\t\t\tif(tmp.max_children === undefined) { tmp.max_children = -1; }\n\t\t\tif(tmp.valid_children === undefined) { tmp.valid_children = -1; }\n\t\t\treturn tmp;\n\t\t};\n\t\t/**\n\t\t * used to retrieve the type string or settings object for a node\n\t\t * @name get_type(obj [, rules])\n\t\t * @param {mixed} obj the node to find the rules for\n\t\t * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned\n\t\t * @return {String|Object}\n\t\t * @plugin types\n\t\t */\n\t\tthis.get_type = function (obj, rules) {\n\t\t\tobj = this.get_node(obj);\n\t\t\treturn (!obj) ? false : ( rules ? $.extend({ 'type' : obj.type }, this.settings.types[obj.type]) : obj.type);\n\t\t};\n\t\t/**\n\t\t * used to change a node's type\n\t\t * @name set_type(obj, type)\n\t\t * @param {mixed} obj the node to change\n\t\t * @param {String} type the new type\n\t\t * @plugin types\n\t\t */\n\t\tthis.set_type = function (obj, type) {\n\t\t\tvar t, t1, t2, old_type, old_icon;\n\t\t\tif($.isArray(obj)) {\n\t\t\t\tobj = obj.slice();\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\n\t\t\t\t\tthis.set_type(obj[t1], type);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tt = this.settings.types;\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(!t[type] || !obj) { return false; }\n\t\t\told_type = obj.type;\n\t\t\told_icon = this.get_icon(obj);\n\t\t\tobj.type = type;\n\t\t\tif(old_icon === true || (t[old_type] && t[old_type].icon && old_icon === t[old_type].icon)) {\n\t\t\t\tthis.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t};\n\t// include the types plugin by default\n\t// $.jstree.defaults.plugins.push(\"types\");\n\n/**\n * ### Unique plugin\n *\n * Enforces that no nodes with the same name can coexist as siblings.\n */\n\n\t/**\n\t * stores all defaults for the unique plugin\n\t * @name $.jstree.defaults.unique\n\t * @plugin unique\n\t */\n\t$.jstree.defaults.unique = {\n\t\t/**\n\t\t * Indicates if the comparison should be case sensitive. Default is `false`.\n\t\t * @name $.jstree.defaults.unique.case_sensitive\n\t\t * @plugin unique\n\t\t */\n\t\tcase_sensitive : false,\n\t\t/**\n\t\t * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.\n\t\t * @name $.jstree.defaults.unique.duplicate\n\t\t * @plugin unique\n\t\t */\n\t\tduplicate : function (name, counter) {\n\t\t\treturn name + ' (' + counter + ')';\n\t\t}\n\t};\n\n\t$.jstree.plugins.unique = function (options, parent) {\n\t\tthis.check = function (chk, obj, par, pos, more) {\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\n\t\t\tpar = par && par.id ? par : this.get_node(par);\n\t\t\tif(!par || !par.children) { return true; }\n\t\t\tvar n = chk === \"rename_node\" ? pos : obj.text,\n\t\t\t\tc = [],\n\t\t\t\ts = this.settings.unique.case_sensitive,\n\t\t\t\tm = this._model.data, i, j;\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\n\t\t\t\tc.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());\n\t\t\t}\n\t\t\tif(!s) { n = n.toLowerCase(); }\n\t\t\tswitch(chk) {\n\t\t\t\tcase \"delete_node\":\n\t\t\t\t\treturn true;\n\t\t\t\tcase \"rename_node\":\n\t\t\t\t\ti = ($.inArray(n, c) === -1 || (obj.text && obj.text[ s ? 'toString' : 'toLowerCase']() === n));\n\t\t\t\t\tif(!i) {\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_01', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\tcase \"create_node\":\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\n\t\t\t\t\tif(!i) {\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_04', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\tcase \"copy_node\":\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\n\t\t\t\t\tif(!i) {\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_02', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\tcase \"move_node\":\n\t\t\t\t\ti = (obj.parent === par.id || $.inArray(n, c) === -1);\n\t\t\t\t\tif(!i) {\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_03', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tthis.create_node = function (par, node, pos, callback, is_loaded) {\n\t\t\tif(!node || node.text === undefined) {\n\t\t\t\tif(par === null) {\n\t\t\t\t\tpar = \"#\";\n\t\t\t\t}\n\t\t\t\tpar = this.get_node(par);\n\t\t\t\tif(!par) {\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\n\t\t\t\t}\n\t\t\t\tpos = pos === undefined ? \"last\" : pos;\n\t\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\n\t\t\t\t}\n\t\t\t\tif(!node) { node = {}; }\n\t\t\t\tvar tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, cb = this.settings.unique.duplicate;\n\t\t\t\tn = tmp = this.get_string('New node');\n\t\t\t\tdpc = [];\n\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\n\t\t\t\t\tdpc.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());\n\t\t\t\t}\n\t\t\t\ti = 1;\n\t\t\t\twhile($.inArray(s ? n : n.toLowerCase(), dpc) !== -1) {\n\t\t\t\t\tn = cb.call(this, tmp, (++i)).toString();\n\t\t\t\t}\n\t\t\t\tnode.text = n;\n\t\t\t}\n\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\n\t\t};\n\t};\n\n\t// include the unique plugin by default\n\t// $.jstree.defaults.plugins.push(\"unique\");\n\n\n/**\n * ### Wholerow plugin\n *\n * Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.\n */\n\n\tvar div = document.createElement('DIV');\n\tdiv.setAttribute('unselectable','on');\n\tdiv.className = 'jstree-wholerow';\n\tdiv.innerHTML = '&#160;';\n\t$.jstree.plugins.wholerow = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\n\t\t\tthis.element\n\t\t\t\t.on('ready.jstree set_state.jstree', $.proxy(function () {\n\t\t\t\t\t\tthis.hide_dots();\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", $.proxy(function () {\n\t\t\t\t\t\t//div.style.height = this._data.core.li_height + 'px';\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-wholerow-ul');\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"deselect_all.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"changed.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\n\t\t\t\t\t\tvar tmp = false, i, j;\n\t\t\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\n\t\t\t\t\t\t\ttmp = this.get_node(data.selected[i], true);\n\t\t\t\t\t\t\tif(tmp && tmp.length) {\n\t\t\t\t\t\t\t\ttmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"open_node.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"hover_node.jstree dehover_node.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.get_node(data.node, true).children('.jstree-wholerow')[e.type === \"hover_node\"?\"addClass\":\"removeClass\"]('jstree-wholerow-hovered');\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-wholerow\", $.proxy(function (e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tvar tmp = $.Event('contextmenu', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey, pageX : e.pageX, pageY : e.pageY });\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor:eq(0)\").trigger(tmp);\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"click.jstree\", \".jstree-wholerow\", function (e) {\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor:eq(0)\").trigger(tmp).focus();\n\t\t\t\t\t})\n\t\t\t\t.on(\"click.jstree\", \".jstree-leaf > .jstree-ocl\", $.proxy(function (e) {\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor:eq(0)\").trigger(tmp).focus();\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"mouseover.jstree\", \".jstree-wholerow, .jstree-icon\", $.proxy(function (e) {\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\tthis.hover_node(e.currentTarget);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"mouseleave.jstree\", \".jstree-node\", $.proxy(function (e) {\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\n\t\t\t\t\t}, this));\n\t\t};\n\t\tthis.teardown = function () {\n\t\t\tif(this.settings.wholerow) {\n\t\t\t\tthis.element.find(\".jstree-wholerow\").remove();\n\t\t\t}\n\t\t\tparent.teardown.call(this);\n\t\t};\n\t\tthis.redraw_node = function(obj, deep, callback) {\n\t\t\tobj = parent.redraw_node.call(this, obj, deep, callback);\n\t\t\tif(obj) {\n\t\t\t\tvar tmp = div.cloneNode(true);\n\t\t\t\t//tmp.style.height = this._data.core.li_height + 'px';\n\t\t\t\tif($.inArray(obj.id, this._data.core.selected) !== -1) { tmp.className += ' jstree-wholerow-clicked'; }\n\t\t\t\tobj.insertBefore(tmp, obj.childNodes[0]);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\t};\n\t// include the wholerow plugin by default\n\t// $.jstree.defaults.plugins.push(\"wholerow\");\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///128\n");

/***/ }),

/***/ 13:
/*!*****************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-model.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _libraryUtil = __webpack_require__(/*! mvc/library/library-util */ 297);\n\nvar _libraryUtil2 = _interopRequireDefault(_libraryUtil);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ============================================================================\n// LIBRARY RELATED MODELS\n\nvar Library = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/libraries/\",\n\n    /** based on show_deleted would this lib show in the list of lib's?\n     *  @param {Boolean} show_deleted are we including deleted libraries?\n     */\n    isVisible: function isVisible(show_deleted) {\n        var isVisible = true;\n        if (!show_deleted && this.get(\"deleted\")) {\n            isVisible = false;\n        }\n        return isVisible;\n    }\n});\n\nvar Libraries = Backbone.Collection.extend({\n    urlRoot: Galaxy.root + \"api/libraries\",\n\n    model: Library,\n\n    initialize: function initialize(options) {\n        options = options || {};\n    },\n\n    search: function search(search_term) {\n        /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n        if (search_term == \"\") return this;\n        var lowercase_term = search_term.toLowerCase();\n        return this.filter(function (data) {\n            var lowercase_name = data.get(\"name\").toLowerCase();\n            return lowercase_name.indexOf(lowercase_term) !== -1;\n        });\n    },\n\n    /** Get every 'shown' library in this collection based on deleted filter\n     *  @param {Boolean} show_deleted are we including deleted libraries?\n     *  @returns array of library models\n     */\n    getVisible: function getVisible(show_deleted, filters) {\n        filters = filters || [];\n        var filteredLibraries = new Libraries(this.filter(function (item) {\n            return item.isVisible(show_deleted);\n        }));\n\n        return filteredLibraries;\n    },\n\n    sortLibraries: function sortLibraries(sort_key, sort_order) {\n        this.comparator = _libraryUtil2.default.generateLibraryComparator(sort_key, sort_order);\n        this.sort();\n    }\n});\n\n// ============================================================================\n// FOLDER RELATED MODELS\n\nvar LibraryItem = Backbone.Model.extend({});\n\nvar Ldda = LibraryItem.extend({\n    urlRoot: Galaxy.root + \"api/libraries/datasets/\"\n});\n\nvar FolderAsModel = LibraryItem.extend({\n    urlRoot: Galaxy.root + \"api/folders/\"\n});\n\nvar Folder = Backbone.Collection.extend({\n    model: LibraryItem,\n\n    sortFolder: function sortFolder(sort_key, sort_order) {\n        this.comparator = _libraryUtil2.default.generateFolderComparator(sort_key, sort_order);\n        this.sort();\n    }\n});\n\nvar FolderContainer = Backbone.Model.extend({\n    defaults: {\n        folder: new Folder(),\n        urlRoot: Galaxy.root + \"api/folders/\",\n        id: \"unknown\"\n    },\n    parse: function parse(obj) {\n        // empty the collection\n        this.get(\"folder\").reset();\n        // response is not a simple array, it contains metadata\n        // this will update the inner collection\n        for (var i = 0; i < obj.folder_contents.length; i++) {\n            if (obj.folder_contents[i].type === \"folder\") {\n                var folder_item = new FolderAsModel(obj.folder_contents[i]);\n                this.get(\"folder\").add(folder_item);\n            } else if (obj.folder_contents[i].type === \"file\") {\n                var file_item = new Ldda(obj.folder_contents[i]);\n                this.get(\"folder\").add(file_item);\n            } else {\n                Galaxy.emit.error(\"Unknown folder item type encountered while parsing response.\");\n            }\n        }\n        return obj;\n    }\n});\n\n// ============================================================================\n// HISTORY RELATED MODELS\n// TODO UNITE\n\nvar HistoryItem = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/histories/\"\n});\n\nvar HistoryContents = Backbone.Collection.extend({\n    urlRoot: Galaxy.root + \"api/histories/\",\n    initialize: function initialize(options) {\n        this.id = options.id;\n    },\n    url: function url() {\n        return this.urlRoot + this.id + \"/contents\";\n    },\n    model: HistoryItem\n});\n\nvar GalaxyHistory = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/histories/\"\n});\n\nvar GalaxyHistories = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/histories\",\n    model: GalaxyHistory\n});\n\n// ============================================================================\n// JSTREE MODEL\n/** Represents folder structure parsable by the jstree component.\n *\n */\n\nvar Jstree = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/remote_files\"\n});\n\nexports.default = {\n    Library: Library,\n    Libraries: Libraries,\n    Item: Ldda,\n    Ldda: Ldda,\n    FolderAsModel: FolderAsModel,\n    Folder: Folder,\n    FolderContainer: FolderContainer,\n    HistoryItem: HistoryItem,\n    HistoryContents: HistoryContents,\n    GalaxyHistory: GalaxyHistory,\n    GalaxyHistories: GalaxyHistories,\n    Jstree: Jstree\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL2xpYnJhcnkvbGlicmFyeS1tb2RlbC5qcz82MDBhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2RfdXRpbCBmcm9tIFwibXZjL2xpYnJhcnkvbGlicmFyeS11dGlsXCI7XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBMSUJSQVJZIFJFTEFURUQgTU9ERUxTXG5cbnZhciBMaWJyYXJ5ID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICB1cmxSb290OiBgJHtHYWxheHkucm9vdH1hcGkvbGlicmFyaWVzL2AsXG5cbiAgICAvKiogYmFzZWQgb24gc2hvd19kZWxldGVkIHdvdWxkIHRoaXMgbGliIHNob3cgaW4gdGhlIGxpc3Qgb2YgbGliJ3M/XG4gICAgICogIEBwYXJhbSB7Qm9vbGVhbn0gc2hvd19kZWxldGVkIGFyZSB3ZSBpbmNsdWRpbmcgZGVsZXRlZCBsaWJyYXJpZXM/XG4gICAgICovXG4gICAgaXNWaXNpYmxlOiBmdW5jdGlvbihzaG93X2RlbGV0ZWQpIHtcbiAgICAgICAgdmFyIGlzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgIGlmICghc2hvd19kZWxldGVkICYmIHRoaXMuZ2V0KFwiZGVsZXRlZFwiKSkge1xuICAgICAgICAgICAgaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzVmlzaWJsZTtcbiAgICB9XG59KTtcblxudmFyIExpYnJhcmllcyA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICB1cmxSb290OiBgJHtHYWxheHkucm9vdH1hcGkvbGlicmFyaWVzYCxcblxuICAgIG1vZGVsOiBMaWJyYXJ5LFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB9LFxuXG4gICAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2hfdGVybSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VhcmNoIHRoZSBjb2xsZWN0aW9uIGFuZCByZXR1cm4gb25seSB0aGUgbW9kZWxzIHRoYXQgaGF2ZVxuICAgICAgICAgKiB0aGUgc2VhcmNoIHRlcm0gaW4gdGhlaXIgbmFtZXMuXG4gICAgICAgICAqIFt0aGUgdGVybSB0byBzZWFyY2hdXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoc2VhcmNoX3Rlcm0gPT0gXCJcIikgcmV0dXJuIHRoaXM7XG4gICAgICAgIHZhciBsb3dlcmNhc2VfdGVybSA9IHNlYXJjaF90ZXJtLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihkYXRhID0+IHtcbiAgICAgICAgICAgIHZhciBsb3dlcmNhc2VfbmFtZSA9IGRhdGEuZ2V0KFwibmFtZVwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGxvd2VyY2FzZV9uYW1lLmluZGV4T2YobG93ZXJjYXNlX3Rlcm0pICE9PSAtMTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiBHZXQgZXZlcnkgJ3Nob3duJyBsaWJyYXJ5IGluIHRoaXMgY29sbGVjdGlvbiBiYXNlZCBvbiBkZWxldGVkIGZpbHRlclxuICAgICAqICBAcGFyYW0ge0Jvb2xlYW59IHNob3dfZGVsZXRlZCBhcmUgd2UgaW5jbHVkaW5nIGRlbGV0ZWQgbGlicmFyaWVzP1xuICAgICAqICBAcmV0dXJucyBhcnJheSBvZiBsaWJyYXJ5IG1vZGVsc1xuICAgICAqL1xuICAgIGdldFZpc2libGU6IGZ1bmN0aW9uKHNob3dfZGVsZXRlZCwgZmlsdGVycykge1xuICAgICAgICBmaWx0ZXJzID0gZmlsdGVycyB8fCBbXTtcbiAgICAgICAgdmFyIGZpbHRlcmVkTGlicmFyaWVzID0gbmV3IExpYnJhcmllcyh0aGlzLmZpbHRlcihpdGVtID0+IGl0ZW0uaXNWaXNpYmxlKHNob3dfZGVsZXRlZCkpKTtcblxuICAgICAgICByZXR1cm4gZmlsdGVyZWRMaWJyYXJpZXM7XG4gICAgfSxcblxuICAgIHNvcnRMaWJyYXJpZXM6IGZ1bmN0aW9uKHNvcnRfa2V5LCBzb3J0X29yZGVyKSB7XG4gICAgICAgIHRoaXMuY29tcGFyYXRvciA9IG1vZF91dGlsLmdlbmVyYXRlTGlicmFyeUNvbXBhcmF0b3Ioc29ydF9rZXksIHNvcnRfb3JkZXIpO1xuICAgICAgICB0aGlzLnNvcnQoKTtcbiAgICB9XG59KTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRk9MREVSIFJFTEFURUQgTU9ERUxTXG5cbnZhciBMaWJyYXJ5SXRlbSA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7fSk7XG5cbnZhciBMZGRhID0gTGlicmFyeUl0ZW0uZXh0ZW5kKHtcbiAgICB1cmxSb290OiBgJHtHYWxheHkucm9vdH1hcGkvbGlicmFyaWVzL2RhdGFzZXRzL2Bcbn0pO1xuXG52YXIgRm9sZGVyQXNNb2RlbCA9IExpYnJhcnlJdGVtLmV4dGVuZCh7XG4gICAgdXJsUm9vdDogYCR7R2FsYXh5LnJvb3R9YXBpL2ZvbGRlcnMvYFxufSk7XG5cbnZhciBGb2xkZXIgPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gICAgbW9kZWw6IExpYnJhcnlJdGVtLFxuXG4gICAgc29ydEZvbGRlcjogZnVuY3Rpb24oc29ydF9rZXksIHNvcnRfb3JkZXIpIHtcbiAgICAgICAgdGhpcy5jb21wYXJhdG9yID0gbW9kX3V0aWwuZ2VuZXJhdGVGb2xkZXJDb21wYXJhdG9yKHNvcnRfa2V5LCBzb3J0X29yZGVyKTtcbiAgICAgICAgdGhpcy5zb3J0KCk7XG4gICAgfVxufSk7XG5cbnZhciBGb2xkZXJDb250YWluZXIgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGZvbGRlcjogbmV3IEZvbGRlcigpLFxuICAgICAgICB1cmxSb290OiBgJHtHYWxheHkucm9vdH1hcGkvZm9sZGVycy9gLFxuICAgICAgICBpZDogXCJ1bmtub3duXCJcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgLy8gZW1wdHkgdGhlIGNvbGxlY3Rpb25cbiAgICAgICAgdGhpcy5nZXQoXCJmb2xkZXJcIikucmVzZXQoKTtcbiAgICAgICAgLy8gcmVzcG9uc2UgaXMgbm90IGEgc2ltcGxlIGFycmF5LCBpdCBjb250YWlucyBtZXRhZGF0YVxuICAgICAgICAvLyB0aGlzIHdpbGwgdXBkYXRlIHRoZSBpbm5lciBjb2xsZWN0aW9uXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmZvbGRlcl9jb250ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG9iai5mb2xkZXJfY29udGVudHNbaV0udHlwZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgICAgICAgICAgIHZhciBmb2xkZXJfaXRlbSA9IG5ldyBGb2xkZXJBc01vZGVsKG9iai5mb2xkZXJfY29udGVudHNbaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0KFwiZm9sZGVyXCIpLmFkZChmb2xkZXJfaXRlbSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5mb2xkZXJfY29udGVudHNbaV0udHlwZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsZV9pdGVtID0gbmV3IExkZGEob2JqLmZvbGRlcl9jb250ZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXQoXCJmb2xkZXJcIikuYWRkKGZpbGVfaXRlbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEdhbGF4eS5lbWl0LmVycm9yKFwiVW5rbm93biBmb2xkZXIgaXRlbSB0eXBlIGVuY291bnRlcmVkIHdoaWxlIHBhcnNpbmcgcmVzcG9uc2UuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxufSk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEhJU1RPUlkgUkVMQVRFRCBNT0RFTFNcbi8vIFRPRE8gVU5JVEVcblxudmFyIEhpc3RvcnlJdGVtID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICB1cmxSb290OiBgJHtHYWxheHkucm9vdH1hcGkvaGlzdG9yaWVzL2Bcbn0pO1xuXG52YXIgSGlzdG9yeUNvbnRlbnRzID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoe1xuICAgIHVybFJvb3Q6IGAke0dhbGF4eS5yb290fWFwaS9oaXN0b3JpZXMvYCxcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaWQgPSBvcHRpb25zLmlkO1xuICAgIH0sXG4gICAgdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMudXJsUm9vdCArIHRoaXMuaWR9L2NvbnRlbnRzYDtcbiAgICB9LFxuICAgIG1vZGVsOiBIaXN0b3J5SXRlbVxufSk7XG5cbnZhciBHYWxheHlIaXN0b3J5ID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICB1cmxSb290OiBgJHtHYWxheHkucm9vdH1hcGkvaGlzdG9yaWVzL2Bcbn0pO1xuXG52YXIgR2FsYXh5SGlzdG9yaWVzID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoe1xuICAgIHVybDogYCR7R2FsYXh5LnJvb3R9YXBpL2hpc3Rvcmllc2AsXG4gICAgbW9kZWw6IEdhbGF4eUhpc3Rvcnlcbn0pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBKU1RSRUUgTU9ERUxcbi8qKiBSZXByZXNlbnRzIGZvbGRlciBzdHJ1Y3R1cmUgcGFyc2FibGUgYnkgdGhlIGpzdHJlZSBjb21wb25lbnQuXG4gKlxuICovXG5cbnZhciBKc3RyZWUgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIHVybFJvb3Q6IGAke0dhbGF4eS5yb290fWFwaS9yZW1vdGVfZmlsZXNgXG59KTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIExpYnJhcnk6IExpYnJhcnksXG4gICAgTGlicmFyaWVzOiBMaWJyYXJpZXMsXG4gICAgSXRlbTogTGRkYSxcbiAgICBMZGRhOiBMZGRhLFxuICAgIEZvbGRlckFzTW9kZWw6IEZvbGRlckFzTW9kZWwsXG4gICAgRm9sZGVyOiBGb2xkZXIsXG4gICAgRm9sZGVyQ29udGFpbmVyOiBGb2xkZXJDb250YWluZXIsXG4gICAgSGlzdG9yeUl0ZW06IEhpc3RvcnlJdGVtLFxuICAgIEhpc3RvcnlDb250ZW50czogSGlzdG9yeUNvbnRlbnRzLFxuICAgIEdhbGF4eUhpc3Rvcnk6IEdhbGF4eUhpc3RvcnksXG4gICAgR2FsYXh5SGlzdG9yaWVzOiBHYWxheHlIaXN0b3JpZXMsXG4gICAgSnN0cmVlOiBKc3RyZWVcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2xpYnJhcnkvbGlicmFyeS1tb2RlbC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQTtBQUNBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF0Q0E7QUFDQTtBQXdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXZCQTtBQUNBO0FBeUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQUNBO0FBVUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 17:
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/toolshed-model.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar ToolShedModel = Backbone.Model.extend({\n    defaults: {\n        url: \"https://toolshed.g2.bx.psu.edu/\",\n        name: \"Galaxy Main Tool Shed\"\n    },\n    urlRoot: Galaxy.root + \"api/tool_shed\"\n});\n\nvar ToolShedsCollection = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/tool_shed\",\n    model: ToolShedModel\n});\n\nvar ToolShedCategoriesModel = Backbone.Model.extend({\n    defaults: [{}],\n    urlRoot: Galaxy.root + \"api/tool_shed/contents\"\n});\n\nvar ToolShedCategoriesCollection = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/tool_shed/contents\",\n    model: ToolShedCategoriesModel\n});\n\nvar ToolShedCategoryModel = Backbone.Model.extend({\n    defaults: [{}],\n    urlRoot: Galaxy.root + \"api/tool_shed/category\"\n});\n\nvar ToolShedCategoryCollection = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/tool_shed/category\",\n    model: ToolShedCategoryModel\n});\n\nvar ToolShedRepositoryModel = Backbone.Model.extend({\n    defaults: [{}],\n    urlRoot: Galaxy.root + \"api/tool_shed/repository\"\n});\n\nvar ToolShedRepositoryCollection = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/tool_shed/repository\",\n    model: ToolShedRepositoryModel\n});\n\nvar RepoQueueModel = Backbone.Model.extend({\n    url: \"#\"\n});\n\nvar RepoQueueCollection = Backbone.Collection.extend({\n    url: \"#\",\n    model: RepoQueueModel,\n    fetch: function fetch() {\n        var collection = this;\n        var repositories = Array();\n        var repositories_enc = JSON.parse(localStorage.repositories);\n        var queue_keys = Object.keys(repositories_enc);\n        _.each(queue_keys, function (key) {\n            var repo = repositories_enc[key];\n            repo.queue_key = key;\n            repositories.push(repo);\n        });\n        collection.reset(repositories);\n        return Backbone.Collection.prototype.fetch.call(this);\n    }\n});\n\nvar RepoStatusModel = Backbone.Model.extend({\n    defaults: [{}],\n    urlRoot: Galaxy.root + \"api/tool_shed/status\"\n});\n\nvar RepoStatusCollection = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/tool_shed/status\",\n    model: RepoStatusModel\n});\n\nvar WorkflowToolsModel = Backbone.Model.extend({\n    defaults: [{}],\n    urlRoot: Galaxy.root + \"api/workflows?missing_tools=True\"\n});\n\nvar WorkflowToolsCollection = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/workflows?missing_tools=True\",\n    model: WorkflowToolsModel\n});\n\nexports.default = {\n    ShedModel: ToolShedModel,\n    ShedsCollection: ToolShedsCollection,\n    Category: ToolShedCategoriesModel,\n    Categories: ToolShedCategoriesCollection,\n    CategoryModel: ToolShedCategoryModel,\n    CategoryCollection: ToolShedCategoryCollection,\n    RepositoryModel: ToolShedRepositoryModel,\n    RepositoryCollection: ToolShedRepositoryCollection,\n    RepoQueue: RepoQueueCollection,\n    RepoStatus: RepoStatusCollection,\n    WorkflowTools: WorkflowToolsCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL3Rvb2xzaGVkL3Rvb2xzaGVkLW1vZGVsLmpzP2I1MzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFRvb2xTaGVkTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIHVybDogXCJodHRwczovL3Rvb2xzaGVkLmcyLmJ4LnBzdS5lZHUvXCIsXG4gICAgICAgIG5hbWU6IFwiR2FsYXh5IE1haW4gVG9vbCBTaGVkXCJcbiAgICB9LFxuICAgIHVybFJvb3Q6IGAke0dhbGF4eS5yb290fWFwaS90b29sX3NoZWRgXG59KTtcblxudmFyIFRvb2xTaGVkc0NvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gICAgdXJsOiBgJHtHYWxheHkucm9vdH1hcGkvdG9vbF9zaGVkYCxcbiAgICBtb2RlbDogVG9vbFNoZWRNb2RlbFxufSk7XG5cbnZhciBUb29sU2hlZENhdGVnb3JpZXNNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgZGVmYXVsdHM6IFt7fV0sXG4gICAgdXJsUm9vdDogYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9jb250ZW50c2Bcbn0pO1xuXG52YXIgVG9vbFNoZWRDYXRlZ29yaWVzQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICB1cmw6IGAke0dhbGF4eS5yb290fWFwaS90b29sX3NoZWQvY29udGVudHNgLFxuICAgIG1vZGVsOiBUb29sU2hlZENhdGVnb3JpZXNNb2RlbFxufSk7XG5cbnZhciBUb29sU2hlZENhdGVnb3J5TW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIGRlZmF1bHRzOiBbe31dLFxuICAgIHVybFJvb3Q6IGAke0dhbGF4eS5yb290fWFwaS90b29sX3NoZWQvY2F0ZWdvcnlgXG59KTtcblxudmFyIFRvb2xTaGVkQ2F0ZWdvcnlDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoe1xuICAgIHVybDogYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9jYXRlZ29yeWAsXG4gICAgbW9kZWw6IFRvb2xTaGVkQ2F0ZWdvcnlNb2RlbFxufSk7XG5cbnZhciBUb29sU2hlZFJlcG9zaXRvcnlNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgZGVmYXVsdHM6IFt7fV0sXG4gICAgdXJsUm9vdDogYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9yZXBvc2l0b3J5YFxufSk7XG5cbnZhciBUb29sU2hlZFJlcG9zaXRvcnlDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoe1xuICAgIHVybDogYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9yZXBvc2l0b3J5YCxcbiAgICBtb2RlbDogVG9vbFNoZWRSZXBvc2l0b3J5TW9kZWxcbn0pO1xuXG52YXIgUmVwb1F1ZXVlTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIHVybDogXCIjXCJcbn0pO1xuXG52YXIgUmVwb1F1ZXVlQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICB1cmw6IFwiI1wiLFxuICAgIG1vZGVsOiBSZXBvUXVldWVNb2RlbCxcbiAgICBmZXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgdmFyIHJlcG9zaXRvcmllcyA9IEFycmF5KCk7XG4gICAgICAgIHZhciByZXBvc2l0b3JpZXNfZW5jID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucmVwb3NpdG9yaWVzKTtcbiAgICAgICAgdmFyIHF1ZXVlX2tleXMgPSBPYmplY3Qua2V5cyhyZXBvc2l0b3JpZXNfZW5jKTtcbiAgICAgICAgXy5lYWNoKHF1ZXVlX2tleXMsIGtleSA9PiB7XG4gICAgICAgICAgICB2YXIgcmVwbyA9IHJlcG9zaXRvcmllc19lbmNba2V5XTtcbiAgICAgICAgICAgIHJlcG8ucXVldWVfa2V5ID0ga2V5O1xuICAgICAgICAgICAgcmVwb3NpdG9yaWVzLnB1c2gocmVwbyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb2xsZWN0aW9uLnJlc2V0KHJlcG9zaXRvcmllcyk7XG4gICAgICAgIHJldHVybiBCYWNrYm9uZS5Db2xsZWN0aW9uLnByb3RvdHlwZS5mZXRjaC5jYWxsKHRoaXMpO1xuICAgIH1cbn0pO1xuXG52YXIgUmVwb1N0YXR1c01vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICBkZWZhdWx0czogW3t9XSxcbiAgICB1cmxSb290OiBgJHtHYWxheHkucm9vdH1hcGkvdG9vbF9zaGVkL3N0YXR1c2Bcbn0pO1xuXG52YXIgUmVwb1N0YXR1c0NvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gICAgdXJsOiBgJHtHYWxheHkucm9vdH1hcGkvdG9vbF9zaGVkL3N0YXR1c2AsXG4gICAgbW9kZWw6IFJlcG9TdGF0dXNNb2RlbFxufSk7XG5cbnZhciBXb3JrZmxvd1Rvb2xzTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIGRlZmF1bHRzOiBbe31dLFxuICAgIHVybFJvb3Q6IGAke0dhbGF4eS5yb290fWFwaS93b3JrZmxvd3M/bWlzc2luZ190b29scz1UcnVlYFxufSk7XG5cbnZhciBXb3JrZmxvd1Rvb2xzQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICB1cmw6IGAke0dhbGF4eS5yb290fWFwaS93b3JrZmxvd3M/bWlzc2luZ190b29scz1UcnVlYCxcbiAgICBtb2RlbDogV29ya2Zsb3dUb29sc01vZGVsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIFNoZWRNb2RlbDogVG9vbFNoZWRNb2RlbCxcbiAgICBTaGVkc0NvbGxlY3Rpb246IFRvb2xTaGVkc0NvbGxlY3Rpb24sXG4gICAgQ2F0ZWdvcnk6IFRvb2xTaGVkQ2F0ZWdvcmllc01vZGVsLFxuICAgIENhdGVnb3JpZXM6IFRvb2xTaGVkQ2F0ZWdvcmllc0NvbGxlY3Rpb24sXG4gICAgQ2F0ZWdvcnlNb2RlbDogVG9vbFNoZWRDYXRlZ29yeU1vZGVsLFxuICAgIENhdGVnb3J5Q29sbGVjdGlvbjogVG9vbFNoZWRDYXRlZ29yeUNvbGxlY3Rpb24sXG4gICAgUmVwb3NpdG9yeU1vZGVsOiBUb29sU2hlZFJlcG9zaXRvcnlNb2RlbCxcbiAgICBSZXBvc2l0b3J5Q29sbGVjdGlvbjogVG9vbFNoZWRSZXBvc2l0b3J5Q29sbGVjdGlvbixcbiAgICBSZXBvUXVldWU6IFJlcG9RdWV1ZUNvbGxlY3Rpb24sXG4gICAgUmVwb1N0YXR1czogUmVwb1N0YXR1c0NvbGxlY3Rpb24sXG4gICAgV29ya2Zsb3dUb29sczogV29ya2Zsb3dUb29sc0NvbGxlY3Rpb25cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL3Rvb2xzaGVkL3Rvb2xzaGVkLW1vZGVsLmpzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUxBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBQ0E7QUFpQkE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!*********************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/util.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar searchShed = function searchShed(request, response) {\n    var that = this;\n    var shed_url = this.shed_url;\n    var base_url = Galaxy.root + \"api/tool_shed/search\";\n    $.get(base_url, { term: request.term, tool_shed_url: shed_url }, function (data) {\n        var result_list = that.shedParser(data);\n        response(result_list);\n    });\n};\n\nvar shedParser = function shedParser(jsondata) {\n    var results = [];\n    var hits = jsondata.hits;\n    $.each(hits, function (hit) {\n        var record = hits[hit];\n        var label = record.repository.name + \" by \" + record.repository.repo_owner_username + \": \" + record.repository.description;\n        var result = { value: record.repository.id, label: label };\n        results.push(result);\n    });\n    return results;\n};\n\nvar addToQueue = function addToQueue(metadata) {\n    if (metadata.tool_shed_url.substr(-1) == \"/\") {\n        metadata.tool_shed_url = metadata.tool_shed_url.substr(0, metadata.tool_shed_url.length - 1);\n    }\n    var key = metadata.tool_shed_url + \"|\" + metadata.repository_id + \"|\" + metadata.changeset_revision;\n    var queued_repos = new Object();\n    if (localStorage.repositories) {\n        queued_repos = JSON.parse(localStorage.repositories);\n    }\n    queued_repos[key] = metadata;\n    localStorage.repositories = JSON.stringify(queued_repos);\n};\n\nvar queueLength = function queueLength() {\n    if (localStorage.hasOwnProperty(\"repositories\")) {\n        var repo_queue = JSON.parse(localStorage.repositories);\n        var queue_length = Object.keys(repo_queue).length;\n        return queue_length;\n    } else {\n        return 0;\n    }\n};\n\nexports.default = {\n    searchShed: searchShed,\n    shedParser: shedParser,\n    addToQueue: addToQueue,\n    queueLength: queueLength\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL3Rvb2xzaGVkL3V0aWwuanM/OWU5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2VhcmNoU2hlZCA9IGZ1bmN0aW9uKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBzaGVkX3VybCA9IHRoaXMuc2hlZF91cmw7XG4gICAgdmFyIGJhc2VfdXJsID0gYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9zZWFyY2hgO1xuICAgICQuZ2V0KGJhc2VfdXJsLCB7IHRlcm06IHJlcXVlc3QudGVybSwgdG9vbF9zaGVkX3VybDogc2hlZF91cmwgfSwgZGF0YSA9PiB7XG4gICAgICAgIHZhciByZXN1bHRfbGlzdCA9IHRoYXQuc2hlZFBhcnNlcihkYXRhKTtcbiAgICAgICAgcmVzcG9uc2UocmVzdWx0X2xpc3QpO1xuICAgIH0pO1xufTtcblxudmFyIHNoZWRQYXJzZXIgPSBqc29uZGF0YSA9PiB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgaGl0cyA9IGpzb25kYXRhLmhpdHM7XG4gICAgJC5lYWNoKGhpdHMsIGhpdCA9PiB7XG4gICAgICAgIHZhciByZWNvcmQgPSBoaXRzW2hpdF07XG4gICAgICAgIHZhciBsYWJlbCA9IGAke3JlY29yZC5yZXBvc2l0b3J5Lm5hbWV9IGJ5ICR7cmVjb3JkLnJlcG9zaXRvcnkucmVwb19vd25lcl91c2VybmFtZX06ICR7XG4gICAgICAgICAgICByZWNvcmQucmVwb3NpdG9yeS5kZXNjcmlwdGlvblxuICAgICAgICB9YDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgdmFsdWU6IHJlY29yZC5yZXBvc2l0b3J5LmlkLCBsYWJlbDogbGFiZWwgfTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG52YXIgYWRkVG9RdWV1ZSA9IG1ldGFkYXRhID0+IHtcbiAgICBpZiAobWV0YWRhdGEudG9vbF9zaGVkX3VybC5zdWJzdHIoLTEpID09IFwiL1wiKSB7XG4gICAgICAgIG1ldGFkYXRhLnRvb2xfc2hlZF91cmwgPSBtZXRhZGF0YS50b29sX3NoZWRfdXJsLnN1YnN0cigwLCBtZXRhZGF0YS50b29sX3NoZWRfdXJsLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICB2YXIga2V5ID0gYCR7bWV0YWRhdGEudG9vbF9zaGVkX3VybH18JHttZXRhZGF0YS5yZXBvc2l0b3J5X2lkfXwke21ldGFkYXRhLmNoYW5nZXNldF9yZXZpc2lvbn1gO1xuICAgIHZhciBxdWV1ZWRfcmVwb3MgPSBuZXcgT2JqZWN0KCk7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5yZXBvc2l0b3JpZXMpIHtcbiAgICAgICAgcXVldWVkX3JlcG9zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucmVwb3NpdG9yaWVzKTtcbiAgICB9XG4gICAgcXVldWVkX3JlcG9zW2tleV0gPSBtZXRhZGF0YTtcbiAgICBsb2NhbFN0b3JhZ2UucmVwb3NpdG9yaWVzID0gSlNPTi5zdHJpbmdpZnkocXVldWVkX3JlcG9zKTtcbn07XG5cbnZhciBxdWV1ZUxlbmd0aCA9ICgpID0+IHtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmhhc093blByb3BlcnR5KFwicmVwb3NpdG9yaWVzXCIpKSB7XG4gICAgICAgIHZhciByZXBvX3F1ZXVlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucmVwb3NpdG9yaWVzKTtcbiAgICAgICAgdmFyIHF1ZXVlX2xlbmd0aCA9IE9iamVjdC5rZXlzKHJlcG9fcXVldWUpLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHF1ZXVlX2xlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgc2VhcmNoU2hlZDogc2VhcmNoU2hlZCxcbiAgICBzaGVkUGFyc2VyOiBzaGVkUGFyc2VyLFxuICAgIGFkZFRvUXVldWU6IGFkZFRvUXVldWUsXG4gICAgcXVldWVMZW5ndGg6IHF1ZXVlTGVuZ3RoXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC91dGlsLmpzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 284:
/*!*****************************************!*\
  !*** ./galaxy/scripts/apps/extended.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bundleEntries = undefined;\nexports.mastheadEntry = mastheadEntry;\nexports.adminToolshedEntry = adminToolshedEntry;\nexports.tracksterEntry = tracksterEntry;\nexports.circsterEntry = circsterEntry;\nexports.workflowEntry = workflowEntry;\n\nvar _workflowView = __webpack_require__(/*! mvc/workflow/workflow-view */ 285);\n\nvar _workflowView2 = _interopRequireDefault(_workflowView);\n\nvar _trackster = __webpack_require__(/*! viz/trackster */ 84);\n\nvar _trackster2 = _interopRequireDefault(_trackster);\n\nvar _circster = __webpack_require__(/*! viz/circster */ 294);\n\nvar _circster2 = _interopRequireDefault(_circster);\n\nvar _galaxy = __webpack_require__(/*! galaxy.library */ 296);\n\nvar _galaxy2 = _interopRequireDefault(_galaxy);\n\nvar _admin = __webpack_require__(/*! admin.toolshed */ 306);\n\nvar _admin2 = _interopRequireDefault(_admin);\n\nvar _masthead = __webpack_require__(/*! layout/masthead */ 33);\n\nvar _masthead2 = _interopRequireDefault(_masthead);\n\nvar _userModel = __webpack_require__(/*! mvc/user/user-model */ 24);\n\nvar _userModel2 = _interopRequireDefault(_userModel);\n\nvar _uiModal = __webpack_require__(/*! mvc/ui/ui-modal */ 8);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction mastheadEntry(options) {\n    if (!Galaxy.user) {\n        Galaxy.user = new _userModel2.default.User(options.user_json);\n    }\n    if (!Galaxy.masthead) {\n        Galaxy.masthead = new _masthead2.default.View(options);\n        Galaxy.modal = new _uiModal2.default.View();\n        $(\"#masthead\").replaceWith(Galaxy.masthead.render().$el);\n    }\n}\n\nfunction adminToolshedEntry(options) {\n    new _admin2.default.GalaxyApp(options);\n}\n\nfunction tracksterEntry(options) {\n    new _trackster2.default.GalaxyApp(options);\n}\n\nfunction circsterEntry(options) {\n    new _circster2.default.GalaxyApp(options);\n}\n\nfunction workflowEntry(options) {\n    new _workflowView2.default(options);\n}\n\nfunction libraryEntry(options) {\n    new _galaxy2.default.GalaxyApp(options);\n}\n\nvar bundleEntries = exports.bundleEntries = {\n    library: libraryEntry,\n    masthead: mastheadEntry,\n    workflow: workflowEntry,\n    trackster: tracksterEntry,\n    circster: circsterEntry,\n    adminToolshed: adminToolshedEntry\n};\n\nwindow.bundleEntries = bundleEntries;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL2FwcHMvZXh0ZW5kZWQuanM/Yjg5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV29ya2Zsb3dWaWV3IGZyb20gXCJtdmMvd29ya2Zsb3cvd29ya2Zsb3ctdmlld1wiO1xuaW1wb3J0IFRyYWNrc3RlciBmcm9tIFwidml6L3RyYWNrc3RlclwiO1xuaW1wb3J0IENpcmNzdGVyIGZyb20gXCJ2aXovY2lyY3N0ZXJcIjtcbmltcG9ydCBHYWxheHlMaWJyYXJ5IGZyb20gXCJnYWxheHkubGlicmFyeVwiO1xuaW1wb3J0IEFkbWluVG9vbHNoZWQgZnJvbSBcImFkbWluLnRvb2xzaGVkXCI7XG5pbXBvcnQgTWFzdGhlYWQgZnJvbSBcImxheW91dC9tYXN0aGVhZFwiO1xuaW1wb3J0IHVzZXIgZnJvbSBcIm12Yy91c2VyL3VzZXItbW9kZWxcIjtcbmltcG9ydCBNb2RhbCBmcm9tIFwibXZjL3VpL3VpLW1vZGFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXN0aGVhZEVudHJ5KG9wdGlvbnMpIHtcbiAgICBpZiAoIUdhbGF4eS51c2VyKSB7XG4gICAgICAgIEdhbGF4eS51c2VyID0gbmV3IHVzZXIuVXNlcihvcHRpb25zLnVzZXJfanNvbik7XG4gICAgfVxuICAgIGlmICghR2FsYXh5Lm1hc3RoZWFkKSB7XG4gICAgICAgIEdhbGF4eS5tYXN0aGVhZCA9IG5ldyBNYXN0aGVhZC5WaWV3KG9wdGlvbnMpO1xuICAgICAgICBHYWxheHkubW9kYWwgPSBuZXcgTW9kYWwuVmlldygpO1xuICAgICAgICAkKFwiI21hc3RoZWFkXCIpLnJlcGxhY2VXaXRoKEdhbGF4eS5tYXN0aGVhZC5yZW5kZXIoKS4kZWwpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkbWluVG9vbHNoZWRFbnRyeShvcHRpb25zKSB7XG4gICAgbmV3IEFkbWluVG9vbHNoZWQuR2FsYXh5QXBwKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhY2tzdGVyRW50cnkob3B0aW9ucykge1xuICAgIG5ldyBUcmFja3N0ZXIuR2FsYXh5QXBwKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2lyY3N0ZXJFbnRyeShvcHRpb25zKSB7XG4gICAgbmV3IENpcmNzdGVyLkdhbGF4eUFwcChvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdvcmtmbG93RW50cnkob3B0aW9ucykge1xuICAgIG5ldyBXb3JrZmxvd1ZpZXcob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGxpYnJhcnlFbnRyeShvcHRpb25zKSB7XG4gICAgbmV3IEdhbGF4eUxpYnJhcnkuR2FsYXh5QXBwKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgY29uc3QgYnVuZGxlRW50cmllcyA9IHtcbiAgICBsaWJyYXJ5OiBsaWJyYXJ5RW50cnksXG4gICAgbWFzdGhlYWQ6IG1hc3RoZWFkRW50cnksXG4gICAgd29ya2Zsb3c6IHdvcmtmbG93RW50cnksXG4gICAgdHJhY2tzdGVyOiB0cmFja3N0ZXJFbnRyeSxcbiAgICBjaXJjc3RlcjogY2lyY3N0ZXJFbnRyeSxcbiAgICBhZG1pblRvb2xzaGVkOiBhZG1pblRvb2xzaGVkRW50cnlcbn07XG5cbndpbmRvdy5idW5kbGVFbnRyaWVzID0gYnVuZGxlRW50cmllcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9hcHBzL2V4dGVuZGVkLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFTQTtBQVdBO0FBSUE7QUFJQTtBQUlBO0FBQ0E7QUFqQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFDQTtBQVFBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///284\n");

/***/ }),

/***/ 285:
/*!******************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-view.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($, Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _workflowManager = __webpack_require__(/*! mvc/workflow/workflow-manager */ 286);\n\nvar _workflowManager2 = _interopRequireDefault(_workflowManager);\n\nvar _workflowCanvas = __webpack_require__(/*! mvc/workflow/workflow-canvas */ 287);\n\nvar _workflowCanvas2 = _interopRequireDefault(_workflowCanvas);\n\nvar _workflowNode = __webpack_require__(/*! mvc/workflow/workflow-node */ 288);\n\nvar _workflowNode2 = _interopRequireDefault(_workflowNode);\n\nvar _workflowIcons = __webpack_require__(/*! mvc/workflow/workflow-icons */ 61);\n\nvar _workflowIcons2 = _interopRequireDefault(_workflowIcons);\n\nvar _workflowForms = __webpack_require__(/*! mvc/workflow/workflow-forms */ 293);\n\nvar _workflowForms2 = _interopRequireDefault(_workflowForms);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _asyncSaveText = __webpack_require__(/*! utils/async-save-text */ 79);\n\nvar _asyncSaveText2 = _interopRequireDefault(_asyncSaveText);\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar Toastr = _interopRequireWildcard(_toastr);\n\n__webpack_require__(/*! ui/editable-text */ 20);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function () {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = _workflowIcons2.default[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = window.workflow_globals.app = this;\n        this.options = options;\n        this.urls = options && options.urls || {};\n        var close_editor = function close_editor() {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = function do_close() {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\"Close workflow editor\", \"There are unsaved changes to your workflow which will be lost.\", {\n                    Cancel: hide_modal,\n                    \"Save Changes\": function SaveChanges() {\n                        save_current_workflow(null, do_close);\n                    }\n                }, {\n                    \"Don't Save\": do_close\n                });\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = function save_current_workflow(eventObj, success_callback) {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            _utils2.default.request({\n                url: Galaxy.root + \"api/workflows/\" + self.options.id,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function success(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, function (i, v) {\n                            $(\"<li/>\").text(v).appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function error(response) {\n                    window.show_modal(\"Saving workflow failed.\", response.err_msg, { Ok: hide_modal });\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\").click(function () {\n            $(this).focus();\n            $(this).select();\n        }).keyup(function () {\n            // Remove italics.\n            $(this).css(\"font-style\", \"normal\");\n            // Don't update if same value as last time\n            if (this.value.length < 3) {\n                reset_tool_search(false);\n            } else if (this.value != this.lastValue) {\n                // Add class to denote that searching is active.\n                $(this).addClass(\"search_active\");\n                // input.addClass(config.loadingClass);\n                // Add '*' to facilitate partial matching.\n                var q = this.value;\n                // Stop previous ajax-request\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n                // Start a new ajax-request in X ms\n                $(\"#search-spinner\").show();\n                this.timer = setTimeout(function () {\n                    $.get(self.urls.tool_search, { q: q }, function (data) {\n                        // input.removeClass(config.loadingClass);\n                        // Show live-search if results and search-term aren't empty\n                        $(\"#search-no-results\").hide();\n                        // Hide all tool sections.\n                        $(\".toolSectionWrapper\").hide();\n                        // This hides all tools but not workflows link (which is in a .toolTitle div).\n                        $(\".toolSectionWrapper\").find(\".toolTitle\").hide();\n                        if (data.length != 0) {\n                            // Map tool ids to element ids and join them.\n                            var s = $.map(data, function (n, i) {\n                                return \"link-\" + n;\n                            });\n                            // First pass to show matching tools and their parents.\n                            $(s).each(function (index, id) {\n                                // Add class to denote match.\n                                $(\"[id='\" + id + \"']\").parent().addClass(\"search_match\");\n                                $(\"[id='\" + id + \"']\").parent().show().parent().parent().show().parent().show();\n                            });\n                            // Hide labels that have no visible children.\n                            $(\".toolPanelLabel\").each(function () {\n                                var this_label = $(this);\n                                var next = this_label.next();\n                                var no_visible_tools = true;\n                                // Look through tools following label and, if none are visible, hide label.\n                                while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                    if (next.is(\":visible\")) {\n                                        no_visible_tools = false;\n                                        break;\n                                    } else {\n                                        next = next.next();\n                                    }\n                                }\n                                if (no_visible_tools) {\n                                    this_label.hide();\n                                }\n                            });\n                        } else {\n                            $(\"#search-no-results\").show();\n                        }\n                        $(\"#search-spinner\").hide();\n                    }, \"json\");\n                }, 400);\n            }\n            this.lastValue = this.value;\n        });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new _workflowCanvas2.default(this, $(\"#canvas-viewport\"), $(\"#overview\"));\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse($.ajax({\n            url: Galaxy.root + \"api/datatypes\",\n            async: false\n        }).responseText);\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse($.ajax({\n            url: Galaxy.root + \"api/datatypes/mapping\",\n            async: false\n        }).responseText);\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function success(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, function (step, step_id) {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += \"<li>\" + step.errors + \"</li>\";\n                    }\n                    _.each(data.upgrade_messages[step_id], function (m) {\n                        details += \"<li>\" + m + \"</li>\";\n                    });\n                    if (details) {\n                        upgrade_message += \"<li>Step \" + (parseInt(step_id, 10) + 1) + \": \" + self.workflow.nodes[step_id].name + \"<ul>\" + details + \"</ul></li>\";\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\"Issues loading this workflow\", \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" + upgrade_message + \"</ul></p>\", { Continue: hide_modal });\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function beforeSubmit(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu && make_popupmenu($(\"#workflow-options-button\"), {\n            Save: save_current_workflow,\n            \"Save As\": workflow_save_as,\n            Run: function Run() {\n                window.location = Galaxy.root + \"workflows/run?id=\" + self.options.id;\n            },\n            \"Edit Attributes\": function EditAttributes() {\n                self.workflow.clear_active_node();\n            },\n            \"Auto Re-layout\": layout_editor,\n            Close: close_editor\n        });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $('<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' + '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>');\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function OK() {\n                    var rename_name = $(\"#workflow_rename\").val().length > 0 ? $(\"#workflow_rename\").val() : \"SavedAs_\" + self.workflow.name;\n                    var rename_annotation = $(\"#wf_annotation\").val().length > 0 ? $(\"#wf_annotation\").val() : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function workflow_data() {\n                                return JSON.stringify(self.workflow.to_simple());\n                            }\n                        }\n                    }).done(function (id) {\n                        window.onbeforeunload = undefined;\n                        window.location = Galaxy.root + \"workflow/editor?id=\" + id;\n                        hide_modal();\n                    }).fail(function () {\n                        hide_modal();\n                        alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                    });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content += \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" + node.id + \" - \" + node.name + \"</div>\";\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content += \"<p>\" + output.name + \"<input type='checkbox' name='\" + node.id + \"|\" + output.name + \"' checked /></p>\";\n                        } else {\n                            new_content += \"<p>\" + output.name + \"<input type='checkbox' name='\" + node.id + \"|\" + output.name + \"' /></p>\";\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function () {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function (e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $.jStorage.set(\"overview-size\", new_size + \"px\");\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(function () {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = function () {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 && $(\"#left\").find(\".toolMenu\").append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function () {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(function () {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        (0, _asyncSaveText2.default)(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(function () {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        (0, _asyncSaveText2.default)(\"workflow-annotation\", \"workflow-annotation\", self.urls.annotate_async, \"new_annotation\", 25, true, 4);\n    },\n\n    _buildToolPanelWorkflows: function _buildToolPanelWorkflows() {\n        var self = this;\n        var $section = $('<div class=\"toolSectionWrapper\">' + '<div class=\"toolSectionTitle\">' + '<a href=\"#\"><span>Workflows</span></a>' + \"</div>\" + '<div class=\"toolSectionBody\">' + '<div class=\"toolSectionBg\"/>' + \"</div>\" + \"</div>\");\n        _.each(this.options.workflows, function (workflow) {\n            if (workflow.id !== self.options.id) {\n                var copy = new _uiMisc2.default.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: (0, _localization2.default)(\"Copy and insert individual steps\"),\n                    onclick: function onclick() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: (0, _localization2.default)(\"Warning\"),\n                                body: \"This will copy \" + workflow.step_count + \" new steps into your workflow.\",\n                                buttons: {\n                                    Cancel: function Cancel() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function Copy() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(workflow.id, workflow.name);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\").attr(\"href\", \"#\").html(workflow.name).on(\"click\", function () {\n                    self.add_node_for_subworkflow(workflow.latest_id, workflow.name);\n                });\n                $section.find(\".toolSectionBg\").append($(\"<div/>\").addClass(\"toolTitle\").append($add).append(copy.$el));\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function copy_into_workflow(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function success(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, function (k, v) {\n                    upgrade_message += \"<li>Step \" + (parseInt(k, 10) + 1) + \": \" + self.workflow.nodes[k].name + \"<ul>\";\n                    $.each(v, function (i, vv) {\n                        upgrade_message += \"<li>\" + vv + \"</li>\";\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\"Subworkflow embedded with changes\", \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" + upgrade_message + \"</ul>\", { Continue: hide_modal });\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function beforeSubmit(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function reset() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new _workflowManager2.default(this, $(\"#canvas-container\"));\n    },\n\n    scroll_to_nodes: function scroll_to_nodes() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function _workflowLoadAjax(workflowId, options) {\n        $.ajax(_utils2.default.merge(options, {\n            url: this.urls.load_workflow,\n            data: { id: workflowId, _: \"true\" },\n            dataType: \"json\",\n            cache: false\n        }));\n    },\n\n    _moduleInitAjax: function _moduleInitAjax(node, request_data) {\n        var self = this;\n        _utils2.default.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/workflows/build_module\",\n            data: request_data,\n            success: function success(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function add_node_for_tool(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function add_node_for_subworkflow(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function add_node_for_module(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    display_file_list: function display_file_list(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist += \"<option value='\" + out_terminal + \"'>\" + out_terminal + \"</option>\";\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    showWorkflowParameters: function showWorkflowParameters() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, function (k, node) {\n            if (node.config_form && node.config_form.inputs) {\n                _utils2.default.deepeach(node.config_form.inputs, function (d) {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function (k, pja) {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, function (k, action_argument) {\n                            var arg_matches = action_argument.match(parameter_re);\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, function (k, element) {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, function (k, element) {\n                new_parameter_content += \"<div>\" + element.substring(2, element.length - 1) + \"</div>\";\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function showAttributes() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function showForm(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = cls + \"-\" + node.id;\n        var $container = $(\"#\" + cls);\n        if (content && $container.find(\"#\" + id).length == 0) {\n            var $el = $(\"<div id=\\\"\" + id + \"\\\" class=\\\"\" + cls + \"\\\"/>\");\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = _workflowIcons2.default[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new _workflowForms2.default[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\"workflow-view::initialize()\", \"Node not found in workflow.\");\n            }\n        }\n        $(\".\" + cls).hide();\n        $container.find(\"#\" + id).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function isSubType(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function prebuildNode(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(\"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" + title_text + \"</div></div>\");\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new _workflowNode2.default(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp = \"<div><img height='16' align='middle' src='\" + Galaxy.root + \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        if (type !== \"subworkflow\") {\n            buttons.append($(\"<div/>\").addClass(\"fa-icon-button fa fa-files-o\").click(function (e) {\n                node.clone();\n            }));\n        }\n        buttons.append($(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click(function (e) {\n            node.destroy();\n        }));\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f.bind(\"dragstart\", function () {\n            self.workflow.activate_node(node);\n        }).bind(\"dragend\", function () {\n            self.workflow.node_changed(this);\n            self.workflow.fit_canvas_to_nodes();\n            self.canvas_manager.draw_overview();\n        }).bind(\"dragclickonly\", function () {\n            self.workflow.activate_node(node);\n        }).bind(\"drag\", function (e, d) {\n            // Move\n            var po = $(this).offsetParent().offset();\n\n            var x = d.offsetX - po.left;\n            var y = d.offsetY - po.top;\n            $(this).css({ left: x, top: y });\n            // Redraw\n            $(this).find(\".terminal\").each(function () {\n                this.terminal.redraw();\n            });\n        });\n        return node;\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///285\n");

/***/ }),

/***/ 286:
/*!*********************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-manager.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _workflowConnector = __webpack_require__(/*! mvc/workflow/workflow-connector */ 126);\n\nvar _workflowConnector2 = _interopRequireDefault(_workflowConnector);\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar Toastr = _interopRequireWildcard(_toastr);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function canLabelOutputWith(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function registerOutputLabel(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function unregisterOutputLabel(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function updateOutputLabel(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\"Workflow contains duplicate workflow output labels \" + toLabel + \". This must be fixed before it can be saved.\");\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function attemptUpdateOutputLabel(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function create_node(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function add_node(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", \"wf-node-step-\" + node.id);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function remove_node(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function remove_all() {\n        var wf = this;\n        $.each(this.nodes, function (k, v) {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function rectify_workflow_outputs() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, function (k, node) {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, function (pja_id, pja) {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, function (k, node) {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, function (pja_id, pja) {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, function (i, pja_name) {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, function (ot_id, ot) {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[\"HideDatasetAction\" + ot.name] = null;\n                                node.post_job_actions[\"HideDatasetAction\" + ot.name] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function to_simple() {\n        var nodes = {};\n        $.each(this.nodes, function (i, node) {\n            var input_connections = {};\n            $.each(node.input_terminals, function (k, t) {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, function (i, c) {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function (i, act) {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function from_simple(data, initialImport_) {\n        var initialImport = initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, function (id, step) {\n            var node = wf.app.prebuildNode(step.type, step.name, step.content_id);\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, function (name, workflow_output) {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], function (pja_id, pja) {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, function (id, step) {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, function (k, v) {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, function (l, x) {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new _workflowConnector2.default();\n                        c.connect(other_node.output_terminals[x.output_name], node.input_terminals[k]);\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, function (ot_id, ot) {\n                    if (node.post_job_actions[\"HideDatasetAction\" + ot.name] === undefined) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(\".callout.\" + ot.name);\n                        callout.find(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small.png\");\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function check_changes_in_active_form() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\").find(\"form\").submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function reload_active_node() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function clear_active_node() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        document.activeElement.blur();\n        this.app.showAttributes();\n    },\n    activate_node: function activate_node(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function node_changed(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function layout() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, function (id, node) {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, function (id, node) {\n            $.each(node.input_terminals, function (j, t) {\n                $.each(t.connectors, function (k, c) {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, function (i, ids) {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort(function (a, b) {\n                return $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top;\n            });\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, function (j, id) {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, function (_, node) {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function bounds_for_all_nodes() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, function (id, node) {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function fit_canvas_to_nodes() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil(x % n / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function () {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexports.default = Workflow;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///286\n");

/***/ }),

/***/ 287:
/*!********************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-canvas.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction CanvasManager(app, canvas_viewport, overview) {\n    this.app = app;\n    this.cv = canvas_viewport;\n    this.cc = this.cv.find(\"#canvas-container\");\n    this.overview = overview;\n    this.oc = overview.find(\"#overview-canvas\");\n    this.ov = overview.find(\"#overview-viewport\");\n    // Make overview box draggable\n    this.init_drag();\n    // Initialize Copy & Paste events\n    this.init_copy_paste();\n}\n$.extend(CanvasManager.prototype, {\n    init_drag: function init_drag() {\n        var self = this;\n        var move = function move(x, y) {\n            x = Math.min(x, self.cv.width() / 2);\n            x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n            y = Math.min(y, self.cv.height() / 2);\n            y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n            self.cc.css({\n                left: x,\n                top: y\n            });\n            self.cv.css({\n                \"background-position-x\": x,\n                \"background-position-y\": y\n            });\n            self.update_viewport_overlay();\n        };\n        // Dragging within canvas background\n        this.cc.each(function () {\n            this.scroll_panel = new ScrollPanel(this);\n        });\n        var x_adjust;\n        var y_adjust;\n        this.cv.bind(\"click\", function () {\n            document.activeElement.blur();\n        }).bind(\"dragstart\", function () {\n            var o = $(this).offset();\n            var p = self.cc.position();\n            y_adjust = p.top - o.top;\n            x_adjust = p.left - o.left;\n        }).bind(\"drag\", function (e, d) {\n            move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n        }).bind(\"dragend\", function () {\n            self.app.workflow.fit_canvas_to_nodes();\n            self.draw_overview();\n        });\n        this.overview.click(function (e) {\n            if (self.overview.hasClass(\"blockaclick\")) {\n                self.overview.removeClass(\"blockaclick\");\n            } else {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n\n                var new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2;\n\n                var new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            }\n        });\n        // Dragging for overview pane\n        this.ov.bind(\"drag\", function (e, d) {\n            var in_w = self.cc.width();\n            var in_h = self.cc.height();\n            var o_w = self.oc.width();\n            var o_h = self.oc.height();\n            var new_x_offset = d.offsetX - self.overview.offset().left;\n            var new_y_offset = d.offsetY - self.overview.offset().top;\n            move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n        }).bind(\"dragend\", function () {\n            self.overview.addClass(\"blockaclick\");\n            self.app.workflow.fit_canvas_to_nodes();\n            self.draw_overview();\n        });\n        // Dragging for overview border (resize)\n        $(\"#overview-border\").bind(\"drag\", function (e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $(this).css({\n                width: new_size,\n                height: new_size\n            });\n            self.draw_overview();\n        });\n\n        /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n        $(\"#overview-border div\").bind(\"drag\", function () {});\n    },\n    init_copy_paste: function init_copy_paste() {\n        var _this = this;\n\n        document.addEventListener(\"copy\", function (e) {\n            // If it appears that the user is trying to copy/paste text, we\n            // pass that through.\n            if (window.getSelection().toString() === \"\") {\n                if (_this.app.workflow.active_node && _this.app.workflow.active_node.type !== \"subworkflow\") {\n                    e.clipboardData.setData(\"application/json\", JSON.stringify({\n                        nodeId: _this.app.workflow.active_node.id\n                    }));\n                }\n                e.preventDefault();\n            }\n        });\n\n        document.addEventListener(\"paste\", function (e) {\n            // If it appears that the user is trying to paste into a text box,\n            // pass that through and skip the workflow copy/paste logic.\n            if (document.activeElement && document.activeElement.type !== \"textarea\" && document.activeElement.type !== \"text\") {\n                var nodeId;\n                try {\n                    nodeId = JSON.parse(e.clipboardData.getData(\"application/json\")).nodeId;\n                } catch (error) {}\n                if (nodeId && _this.app.workflow.nodes.hasOwnProperty(nodeId)) {\n                    _this.app.workflow.nodes[nodeId].clone();\n                }\n                e.preventDefault();\n            }\n        });\n    },\n    update_viewport_overlay: function update_viewport_overlay() {\n        var cc = this.cc;\n        var cv = this.cv;\n        var oc = this.oc;\n        var ov = this.ov;\n        var in_w = cc.width();\n        var in_h = cc.height();\n        var o_w = oc.width();\n        var o_h = oc.height();\n        var cc_pos = cc.position();\n        ov.css({\n            left: -(cc_pos.left / in_w * o_w),\n            top: -(cc_pos.top / in_h * o_h),\n            // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n            width: cv.width() / in_w * o_w - 2,\n            height: cv.height() / in_h * o_h - 2\n        });\n    },\n    draw_overview: function draw_overview() {\n        var canvas_el = $(\"#overview-canvas\");\n\n        var size = canvas_el.parent().parent().width();\n\n        var c = canvas_el.get(0).getContext(\"2d\");\n        var in_w = $(\"#canvas-container\").width();\n        var in_h = $(\"#canvas-container\").height();\n        var o_h;\n        var shift_h;\n        var o_w;\n        var shift_w;\n        // Fit canvas into overview area\n        var cv_w = this.cv.width();\n        var cv_h = this.cv.height();\n        if (in_w < cv_w && in_h < cv_h) {\n            // Canvas is smaller than viewport\n            o_w = in_w / cv_w * size;\n            shift_w = (size - o_w) / 2;\n            o_h = in_h / cv_h * size;\n            shift_h = (size - o_h) / 2;\n        } else if (in_w < in_h) {\n            // Taller than wide\n            shift_h = 0;\n            o_h = size;\n            o_w = Math.ceil(o_h * in_w / in_h);\n            shift_w = (size - o_w) / 2;\n        } else {\n            // Wider than tall\n            o_w = size;\n            shift_w = 0;\n            o_h = Math.ceil(o_w * in_h / in_w);\n            shift_h = (size - o_h) / 2;\n        }\n        canvas_el.parent().css({\n            left: shift_w,\n            top: shift_h,\n            width: o_w,\n            height: o_h\n        });\n        canvas_el.attr(\"width\", o_w);\n        canvas_el.attr(\"height\", o_h);\n        // Draw overview\n        $.each(this.app.workflow.nodes, function (id, node) {\n            c.fillStyle = \"#D2C099\";\n            c.strokeStyle = \"#D8B365\";\n            c.lineWidth = 1;\n            var node_element = $(node.element);\n            var position = node_element.position();\n            var x = position.left / in_w * o_w;\n            var y = position.top / in_h * o_h;\n            var w = node_element.width() / in_w * o_w;\n            var h = node_element.height() / in_h * o_h;\n            if (node.errors) {\n                c.fillStyle = \"#FFCCCC\";\n                c.strokeStyle = \"#AA6666\";\n            } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0) {\n                c.fillStyle = \"#E8A92D\";\n                c.strokeStyle = \"#E8A92D\";\n            }\n            c.fillRect(x, y, w, h);\n            c.strokeRect(x, y, w, h);\n        });\n        this.update_viewport_overlay();\n    }\n});\n\n// FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\nfunction ScrollPanel(panel) {\n    this.panel = panel;\n}\n$.extend(ScrollPanel.prototype, {\n    test: function test(e, onmove) {\n        var _this2 = this;\n\n        clearTimeout(this.timeout);\n        var x = e.pageX;\n        var y = e.pageY;\n\n        var // Panel size and position\n        panel = $(this.panel);\n\n        var panel_pos = panel.position();\n        var panel_w = panel.width();\n        var panel_h = panel.height();\n\n        var // Viewport size and offset\n        viewport = panel.parent();\n\n        var viewport_w = viewport.width();\n        var viewport_h = viewport.height();\n        var viewport_offset = viewport.offset();\n\n        var // Edges of viewport (in page coordinates)\n        min_x = viewport_offset.left;\n\n        var min_y = viewport_offset.top;\n        var max_x = min_x + viewport.width();\n        var max_y = min_y + viewport.height();\n\n        var // Legal panel range\n        p_min_x = -(panel_w - viewport_w / 2);\n\n        var p_min_y = -(panel_h - viewport_h / 2);\n        var p_max_x = viewport_w / 2;\n        var p_max_y = viewport_h / 2;\n\n        var // Did the panel move?\n        moved = false;\n\n        var // Constants\n        close_dist = 5;\n\n        var nudge = 23;\n        var t = 0;\n        if (x - close_dist < min_x) {\n            if (panel_pos.left < p_max_x) {\n                t = Math.min(nudge, p_max_x - panel_pos.left);\n                panel.css(\"left\", panel_pos.left + t);\n                moved = true;\n            }\n        } else if (x + close_dist > max_x) {\n            if (panel_pos.left > p_min_x) {\n                t = Math.min(nudge, panel_pos.left - p_min_x);\n                panel.css(\"left\", panel_pos.left - t);\n                moved = true;\n            }\n        } else if (y - close_dist < min_y) {\n            if (panel_pos.top < p_max_y) {\n                t = Math.min(nudge, p_max_y - panel_pos.top);\n                panel.css(\"top\", panel_pos.top + t);\n                moved = true;\n            }\n        } else if (y + close_dist > max_y) {\n            if (panel_pos.top > p_min_y) {\n                t = Math.min(nudge, panel_pos.top - p_min_x);\n                panel.css(\"top\", panel_pos.top - t + \"px\");\n                moved = true;\n            }\n        }\n        if (moved) {\n            // Keep moving even if mouse doesn't move\n            onmove();\n            this.timeout = setTimeout(function () {\n                _this2.test(e, onmove);\n            }, 50);\n        }\n    },\n    stop: function stop() {\n        clearTimeout(this.timeout);\n    }\n});\nexports.default = CanvasManager;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///287\n");

/***/ }),

/***/ 288:
/*!******************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-node.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _workflowViewNode = __webpack_require__(/*! mvc/workflow/workflow-view-node */ 289);\n\nvar _workflowViewNode2 = _interopRequireDefault(_workflowViewNode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Node = Backbone.Model.extend({\n    initialize: function initialize(app, attr) {\n        this.app = app;\n        this.element = attr.element;\n        this.input_terminals = {};\n        this.output_terminals = {};\n        this.errors = {};\n        this.workflow_outputs = [];\n    },\n    getWorkflowOutput: function getWorkflowOutput(outputName) {\n        return _.findWhere(this.workflow_outputs, {\n            output_name: outputName\n        });\n    },\n    isWorkflowOutput: function isWorkflowOutput(outputName) {\n        return this.getWorkflowOutput(outputName) !== undefined;\n    },\n    removeWorkflowOutput: function removeWorkflowOutput(outputName) {\n        while (this.isWorkflowOutput(outputName)) {\n            this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n        }\n    },\n    addWorkflowOutput: function addWorkflowOutput(outputName, label) {\n        if (!this.isWorkflowOutput(outputName)) {\n            var output = { output_name: outputName };\n            if (label) {\n                output.label = label;\n            }\n            this.workflow_outputs.push(output);\n            return true;\n        }\n        return false;\n    },\n    labelWorkflowOutput: function labelWorkflowOutput(outputName, label) {\n        var changed = false;\n        var oldLabel = null;\n        if (this.isWorkflowOutput(outputName)) {\n            var workflowOutput = this.getWorkflowOutput(outputName);\n            oldLabel = workflowOutput.label;\n            workflowOutput.label = label;\n            changed = oldLabel != label;\n        } else {\n            changed = this.addWorkflowOutput(outputName, label);\n        }\n        if (changed) {\n            this.app.workflow.updateOutputLabel(oldLabel, label);\n            this.markChanged();\n            this.nodeView.redrawWorkflowOutputs();\n        }\n        return changed;\n    },\n    connectedOutputTerminals: function connectedOutputTerminals() {\n        return this._connectedTerminals(this.output_terminals);\n    },\n    _connectedTerminals: function _connectedTerminals(terminals) {\n        var connectedTerminals = [];\n        $.each(terminals, function (_, t) {\n            if (t.connectors.length > 0) {\n                connectedTerminals.push(t);\n            }\n        });\n        return connectedTerminals;\n    },\n    hasConnectedOutputTerminals: function hasConnectedOutputTerminals() {\n        // return this.connectedOutputTerminals().length > 0; <- optimized this\n        var outputTerminals = this.output_terminals;\n        for (var outputName in outputTerminals) {\n            if (outputTerminals[outputName].connectors.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    connectedMappedInputTerminals: function connectedMappedInputTerminals() {\n        return this._connectedMappedTerminals(this.input_terminals);\n    },\n    hasConnectedMappedInputTerminals: function hasConnectedMappedInputTerminals() {\n        // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n        var inputTerminals = this.input_terminals;\n        for (var inputName in inputTerminals) {\n            var inputTerminal = inputTerminals[inputName];\n            if (inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver()) {\n                return true;\n            }\n        }\n        return false;\n    },\n    _connectedMappedTerminals: function _connectedMappedTerminals(terminals) {\n        var mapped_outputs = [];\n        $.each(terminals, function (_, t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                if (t.connectors.length > 0) {\n                    mapped_outputs.push(t);\n                }\n            }\n        });\n        return mapped_outputs;\n    },\n    mappedInputTerminals: function mappedInputTerminals() {\n        return this._mappedTerminals(this.input_terminals);\n    },\n    _mappedTerminals: function _mappedTerminals(terminals) {\n        var mappedTerminals = [];\n        $.each(terminals, function (_, t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                mappedTerminals.push(t);\n            }\n        });\n        return mappedTerminals;\n    },\n    hasMappedOverInputTerminals: function hasMappedOverInputTerminals() {\n        var found = false;\n        _.each(this.input_terminals, function (t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                found = true;\n            }\n        });\n        return found;\n    },\n    redraw: function redraw() {\n        $.each(this.input_terminals, function (_, t) {\n            t.redraw();\n        });\n        $.each(this.output_terminals, function (_, t) {\n            t.redraw();\n        });\n    },\n    clone: function clone() {\n        var _this = this;\n\n        var copiedData = {\n            name: this.name,\n            label: this.label,\n            annotation: this.annotation,\n            post_job_actions: this.post_job_actions\n        };\n        var node = this.app.workflow.create_node(this.type, this.name, this.content_id);\n\n        _utils2.default.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/workflows/build_module\",\n            data: {\n                type: this.type,\n                tool_id: this.content_id,\n                inputs: this.tool_state\n            },\n            success: function success(data) {\n                var newData = Object.assign({}, data, copiedData);\n                node.init_field_data(newData);\n                node.update_field_data(newData);\n                _this.app.workflow.activate_node(node);\n            }\n        });\n    },\n    destroy: function destroy() {\n        $.each(this.input_terminals, function (k, t) {\n            t.destroy();\n        });\n        $.each(this.output_terminals, function (k, t) {\n            t.destroy();\n        });\n        this.app.workflow.remove_node(this);\n        $(this.element).remove();\n    },\n    make_active: function make_active() {\n        $(this.element).addClass(\"toolForm-active\");\n    },\n    make_inactive: function make_inactive() {\n        // Keep inactive nodes stacked from most to least recently active\n        // by moving element to the end of parent's node list\n        var element = this.element.get(0);\n        (function (p) {\n            p.removeChild(element);\n            p.appendChild(element);\n        })(element.parentNode);\n        // Remove active class\n        $(element).removeClass(\"toolForm-active\");\n    },\n    init_field_data: function init_field_data(data) {\n        if (data.type) {\n            this.type = data.type;\n        }\n        this.name = data.name;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.tool_state = data.tool_state;\n        this.errors = data.errors;\n        this.tooltip = data.tooltip ? data.tooltip : \"\";\n        this.annotation = data.annotation;\n        this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n        this.label = data.label;\n        this.uuid = data.uuid;\n        this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n        var node = this;\n        var nodeView = new _workflowViewNode2.default({\n            el: this.element[0],\n            node: node\n        });\n        node.nodeView = nodeView;\n        $.each(data.data_inputs, function (i, input) {\n            nodeView.addDataInput(input);\n        });\n        if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n            nodeView.addRule();\n        }\n        $.each(data.data_outputs, function (i, output) {\n            nodeView.addDataOutput(output);\n        });\n        nodeView.render();\n        this.app.workflow.node_changed(this, true);\n    },\n    update_field_data: function update_field_data(data) {\n        var node = this;\n        var nodeView = node.nodeView;\n        // remove unused output views and remove pre-existing output views from data.data_outputs,\n        // so that these are not added twice.\n        var unused_outputs = [];\n        // nodeView.outputViews contains pre-existing outputs,\n        // while data.data_output contains what should be displayed.\n        // Now we gather the unused outputs\n        $.each(nodeView.outputViews, function (i, output_view) {\n            var cur_name = output_view.output.name;\n            var data_names = data.data_outputs;\n            var cur_name_in_data_outputs = false;\n            _.each(data_names, function (data_name) {\n                if (data_name.name == cur_name) {\n                    cur_name_in_data_outputs = true;\n                }\n            });\n            if (cur_name_in_data_outputs === false) {\n                unused_outputs.push(cur_name);\n            }\n        });\n\n        // Remove the unused outputs\n        _.each(unused_outputs, function (unused_output) {\n            _.each(nodeView.outputViews[unused_output].terminalElement.terminal.connectors, function (x) {\n                if (x) {\n                    x.destroy(); // Removes the noodle connectors\n                }\n            });\n            nodeView.outputViews[unused_output].remove(); // removes the rendered output\n            delete nodeView.outputViews[unused_output]; // removes the reference to the output\n            delete node.output_terminals[unused_output]; // removes the output terminal\n        });\n        $.each(node.workflow_outputs, function (i, wf_output) {\n            if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n            }\n        });\n        $.each(data.data_outputs, function (i, output) {\n            if (!nodeView.outputViews[output.name]) {\n                nodeView.addDataOutput(output); // add data output if it does not yet exist\n            } else {\n                // the output already exists, but the output formats may have changed.\n                // Therefore we update the datatypes and destroy invalid connections.\n                node.output_terminals[output.name].datatypes = output.extensions;\n                node.output_terminals[output.name].destroyInvalidConnections();\n            }\n        });\n        this.tool_state = data.tool_state;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.errors = data.errors;\n        this.annotation = data.annotation;\n        this.label = data.label;\n        if (\"post_job_actions\" in data) {\n            // Won't be present in response for data inputs\n            var pja_in = data.post_job_actions;\n            this.post_job_actions = pja_in ? pja_in : {};\n        }\n        node.nodeView.renderToolErrors();\n        // Update input rows\n        var old_body = nodeView.$(\"div.inputs\");\n        var new_body = nodeView.newInputsDiv();\n        var newTerminalViews = {};\n        _.each(data.data_inputs, function (input) {\n            var terminalView = node.nodeView.addDataInput(input, new_body);\n            newTerminalViews[input.name] = terminalView;\n        });\n        // Cleanup any leftover terminals\n        _.each(_.difference(_.values(nodeView.terminalViews), _.values(newTerminalViews)), function (unusedView) {\n            unusedView.el.terminal.destroy();\n        });\n        nodeView.terminalViews = newTerminalViews;\n        node.nodeView.render();\n        // In general workflow editor assumes tool outputs don't change in # or\n        // type (not really valid right?) but adding special logic here for\n        // data collection input parameters that can have their collection\n        // change.\n        if (data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[0]) {\n            nodeView.updateDataOutput(data.data_outputs[0]);\n        }\n        old_body.replaceWith(new_body);\n        if (\"workflow_outputs\" in data) {\n            // Won't be present in response for data inputs\n            this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n        }\n        // If active, reactivate with new config_form\n        this.markChanged();\n        this.redraw();\n    },\n    error: function error(text) {\n        var b = $(this.element).find(\".toolFormBody\");\n        b.find(\"div\").remove();\n        var tmp = \"<div style='color: red; text-style: italic;'>\" + text + \"</div>\";\n        this.config_form = tmp;\n        b.html(tmp);\n        this.app.workflow.node_changed(this);\n    },\n    markChanged: function markChanged() {\n        this.app.workflow.node_changed(this);\n    }\n});\nexports.default = Node;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy93b3JrZmxvdy93b3JrZmxvdy1ub2RlLmpzPzIyZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFV0aWxzIGZyb20gXCJ1dGlscy91dGlsc1wiO1xuaW1wb3J0IE5vZGVWaWV3IGZyb20gXCJtdmMvd29ya2Zsb3cvd29ya2Zsb3ctdmlldy1ub2RlXCI7XG52YXIgTm9kZSA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXBwLCBhdHRyKSB7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBhdHRyLmVsZW1lbnQ7XG4gICAgICAgIHRoaXMuaW5wdXRfdGVybWluYWxzID0ge307XG4gICAgICAgIHRoaXMub3V0cHV0X3Rlcm1pbmFscyA9IHt9O1xuICAgICAgICB0aGlzLmVycm9ycyA9IHt9O1xuICAgICAgICB0aGlzLndvcmtmbG93X291dHB1dHMgPSBbXTtcbiAgICB9LFxuICAgIGdldFdvcmtmbG93T3V0cHV0OiBmdW5jdGlvbihvdXRwdXROYW1lKSB7XG4gICAgICAgIHJldHVybiBfLmZpbmRXaGVyZSh0aGlzLndvcmtmbG93X291dHB1dHMsIHtcbiAgICAgICAgICAgIG91dHB1dF9uYW1lOiBvdXRwdXROYW1lXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgaXNXb3JrZmxvd091dHB1dDogZnVuY3Rpb24ob3V0cHV0TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JrZmxvd091dHB1dChvdXRwdXROYW1lKSAhPT0gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgcmVtb3ZlV29ya2Zsb3dPdXRwdXQ6IGZ1bmN0aW9uKG91dHB1dE5hbWUpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuaXNXb3JrZmxvd091dHB1dChvdXRwdXROYW1lKSkge1xuICAgICAgICAgICAgdGhpcy53b3JrZmxvd19vdXRwdXRzLnNwbGljZSh0aGlzLmdldFdvcmtmbG93T3V0cHV0KG91dHB1dE5hbWUpLCAxKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRkV29ya2Zsb3dPdXRwdXQ6IGZ1bmN0aW9uKG91dHB1dE5hbWUsIGxhYmVsKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1dvcmtmbG93T3V0cHV0KG91dHB1dE5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0geyBvdXRwdXRfbmFtZTogb3V0cHV0TmFtZSB9O1xuICAgICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LmxhYmVsID0gbGFiZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLndvcmtmbG93X291dHB1dHMucHVzaChvdXRwdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgbGFiZWxXb3JrZmxvd091dHB1dDogZnVuY3Rpb24ob3V0cHV0TmFtZSwgbGFiZWwpIHtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIG9sZExhYmVsID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXNXb3JrZmxvd091dHB1dChvdXRwdXROYW1lKSkge1xuICAgICAgICAgICAgdmFyIHdvcmtmbG93T3V0cHV0ID0gdGhpcy5nZXRXb3JrZmxvd091dHB1dChvdXRwdXROYW1lKTtcbiAgICAgICAgICAgIG9sZExhYmVsID0gd29ya2Zsb3dPdXRwdXQubGFiZWw7XG4gICAgICAgICAgICB3b3JrZmxvd091dHB1dC5sYWJlbCA9IGxhYmVsO1xuICAgICAgICAgICAgY2hhbmdlZCA9IG9sZExhYmVsICE9IGxhYmVsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRoaXMuYWRkV29ya2Zsb3dPdXRwdXQob3V0cHV0TmFtZSwgbGFiZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmFwcC53b3JrZmxvdy51cGRhdGVPdXRwdXRMYWJlbChvbGRMYWJlbCwgbGFiZWwpO1xuICAgICAgICAgICAgdGhpcy5tYXJrQ2hhbmdlZCgpO1xuICAgICAgICAgICAgdGhpcy5ub2RlVmlldy5yZWRyYXdXb3JrZmxvd091dHB1dHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9LFxuICAgIGNvbm5lY3RlZE91dHB1dFRlcm1pbmFsczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0ZWRUZXJtaW5hbHModGhpcy5vdXRwdXRfdGVybWluYWxzKTtcbiAgICB9LFxuICAgIF9jb25uZWN0ZWRUZXJtaW5hbHM6IGZ1bmN0aW9uKHRlcm1pbmFscykge1xuICAgICAgICB2YXIgY29ubmVjdGVkVGVybWluYWxzID0gW107XG4gICAgICAgICQuZWFjaCh0ZXJtaW5hbHMsIChfLCB0KSA9PiB7XG4gICAgICAgICAgICBpZiAodC5jb25uZWN0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0ZWRUZXJtaW5hbHMucHVzaCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb25uZWN0ZWRUZXJtaW5hbHM7XG4gICAgfSxcbiAgICBoYXNDb25uZWN0ZWRPdXRwdXRUZXJtaW5hbHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyByZXR1cm4gdGhpcy5jb25uZWN0ZWRPdXRwdXRUZXJtaW5hbHMoKS5sZW5ndGggPiAwOyA8LSBvcHRpbWl6ZWQgdGhpc1xuICAgICAgICB2YXIgb3V0cHV0VGVybWluYWxzID0gdGhpcy5vdXRwdXRfdGVybWluYWxzO1xuICAgICAgICBmb3IgKHZhciBvdXRwdXROYW1lIGluIG91dHB1dFRlcm1pbmFscykge1xuICAgICAgICAgICAgaWYgKG91dHB1dFRlcm1pbmFsc1tvdXRwdXROYW1lXS5jb25uZWN0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBjb25uZWN0ZWRNYXBwZWRJbnB1dFRlcm1pbmFsczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0ZWRNYXBwZWRUZXJtaW5hbHModGhpcy5pbnB1dF90ZXJtaW5hbHMpO1xuICAgIH0sXG4gICAgaGFzQ29ubmVjdGVkTWFwcGVkSW5wdXRUZXJtaW5hbHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyByZXR1cm4gdGhpcy5jb25uZWN0ZWRNYXBwZWRJbnB1dFRlcm1pbmFscygpLmxlbmd0aCA+IDA7IDwtIG9wdGltaXplZCB0aGlzXG4gICAgICAgIHZhciBpbnB1dFRlcm1pbmFscyA9IHRoaXMuaW5wdXRfdGVybWluYWxzO1xuICAgICAgICBmb3IgKHZhciBpbnB1dE5hbWUgaW4gaW5wdXRUZXJtaW5hbHMpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dFRlcm1pbmFsID0gaW5wdXRUZXJtaW5hbHNbaW5wdXROYW1lXTtcbiAgICAgICAgICAgIGlmIChpbnB1dFRlcm1pbmFsLmNvbm5lY3RvcnMubGVuZ3RoID4gMCAmJiBpbnB1dFRlcm1pbmFsLmlzTWFwcGVkT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgX2Nvbm5lY3RlZE1hcHBlZFRlcm1pbmFsczogZnVuY3Rpb24odGVybWluYWxzKSB7XG4gICAgICAgIHZhciBtYXBwZWRfb3V0cHV0cyA9IFtdO1xuICAgICAgICAkLmVhY2godGVybWluYWxzLCAoXywgdCkgPT4ge1xuICAgICAgICAgICAgdmFyIG1hcE92ZXIgPSB0Lm1hcE92ZXIoKTtcbiAgICAgICAgICAgIGlmIChtYXBPdmVyLmlzQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmICh0LmNvbm5lY3RvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBtYXBwZWRfb3V0cHV0cy5wdXNoKHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXBwZWRfb3V0cHV0cztcbiAgICB9LFxuICAgIG1hcHBlZElucHV0VGVybWluYWxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcHBlZFRlcm1pbmFscyh0aGlzLmlucHV0X3Rlcm1pbmFscyk7XG4gICAgfSxcbiAgICBfbWFwcGVkVGVybWluYWxzOiBmdW5jdGlvbih0ZXJtaW5hbHMpIHtcbiAgICAgICAgdmFyIG1hcHBlZFRlcm1pbmFscyA9IFtdO1xuICAgICAgICAkLmVhY2godGVybWluYWxzLCAoXywgdCkgPT4ge1xuICAgICAgICAgICAgdmFyIG1hcE92ZXIgPSB0Lm1hcE92ZXIoKTtcbiAgICAgICAgICAgIGlmIChtYXBPdmVyLmlzQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIG1hcHBlZFRlcm1pbmFscy5wdXNoKHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1hcHBlZFRlcm1pbmFscztcbiAgICB9LFxuICAgIGhhc01hcHBlZE92ZXJJbnB1dFRlcm1pbmFsczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBfLmVhY2godGhpcy5pbnB1dF90ZXJtaW5hbHMsIHQgPT4ge1xuICAgICAgICAgICAgdmFyIG1hcE92ZXIgPSB0Lm1hcE92ZXIoKTtcbiAgICAgICAgICAgIGlmIChtYXBPdmVyLmlzQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9LFxuICAgIHJlZHJhdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICQuZWFjaCh0aGlzLmlucHV0X3Rlcm1pbmFscywgKF8sIHQpID0+IHtcbiAgICAgICAgICAgIHQucmVkcmF3KCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkLmVhY2godGhpcy5vdXRwdXRfdGVybWluYWxzLCAoXywgdCkgPT4ge1xuICAgICAgICAgICAgdC5yZWRyYXcoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb3BpZWREYXRhID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgbGFiZWw6IHRoaXMubGFiZWwsXG4gICAgICAgICAgICBhbm5vdGF0aW9uOiB0aGlzLmFubm90YXRpb24sXG4gICAgICAgICAgICBwb3N0X2pvYl9hY3Rpb25zOiB0aGlzLnBvc3Rfam9iX2FjdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmFwcC53b3JrZmxvdy5jcmVhdGVfbm9kZSh0aGlzLnR5cGUsIHRoaXMubmFtZSwgdGhpcy5jb250ZW50X2lkKTtcblxuICAgICAgICBVdGlscy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgdXJsOiBgJHtHYWxheHkucm9vdH1hcGkvd29ya2Zsb3dzL2J1aWxkX21vZHVsZWAsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgIHRvb2xfaWQ6IHRoaXMuY29udGVudF9pZCxcbiAgICAgICAgICAgICAgICBpbnB1dHM6IHRoaXMudG9vbF9zdGF0ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwgY29waWVkRGF0YSk7XG4gICAgICAgICAgICAgICAgbm9kZS5pbml0X2ZpZWxkX2RhdGEobmV3RGF0YSk7XG4gICAgICAgICAgICAgICAgbm9kZS51cGRhdGVfZmllbGRfZGF0YShuZXdEYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC53b3JrZmxvdy5hY3RpdmF0ZV9ub2RlKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkLmVhY2godGhpcy5pbnB1dF90ZXJtaW5hbHMsIChrLCB0KSA9PiB7XG4gICAgICAgICAgICB0LmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQuZWFjaCh0aGlzLm91dHB1dF90ZXJtaW5hbHMsIChrLCB0KSA9PiB7XG4gICAgICAgICAgICB0LmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXBwLndvcmtmbG93LnJlbW92ZV9ub2RlKHRoaXMpO1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlKCk7XG4gICAgfSxcbiAgICBtYWtlX2FjdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS5hZGRDbGFzcyhcInRvb2xGb3JtLWFjdGl2ZVwiKTtcbiAgICB9LFxuICAgIG1ha2VfaW5hY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBLZWVwIGluYWN0aXZlIG5vZGVzIHN0YWNrZWQgZnJvbSBtb3N0IHRvIGxlYXN0IHJlY2VudGx5IGFjdGl2ZVxuICAgICAgICAvLyBieSBtb3ZpbmcgZWxlbWVudCB0byB0aGUgZW5kIG9mIHBhcmVudCdzIG5vZGUgbGlzdFxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudC5nZXQoMCk7XG4gICAgICAgIChwID0+IHtcbiAgICAgICAgICAgIHAucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICBwLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICB9KShlbGVtZW50LnBhcmVudE5vZGUpO1xuICAgICAgICAvLyBSZW1vdmUgYWN0aXZlIGNsYXNzXG4gICAgICAgICQoZWxlbWVudCkucmVtb3ZlQ2xhc3MoXCJ0b29sRm9ybS1hY3RpdmVcIik7XG4gICAgfSxcbiAgICBpbml0X2ZpZWxkX2RhdGE6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEudHlwZSkge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gZGF0YS50eXBlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICAgICAgdGhpcy5jb25maWdfZm9ybSA9IGRhdGEuY29uZmlnX2Zvcm07XG4gICAgICAgIHRoaXMudG9vbF92ZXJzaW9uID0gdGhpcy5jb25maWdfZm9ybSAmJiB0aGlzLmNvbmZpZ19mb3JtLnZlcnNpb247XG4gICAgICAgIHRoaXMudG9vbF9zdGF0ZSA9IGRhdGEudG9vbF9zdGF0ZTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBkYXRhLmVycm9ycztcbiAgICAgICAgdGhpcy50b29sdGlwID0gZGF0YS50b29sdGlwID8gZGF0YS50b29sdGlwIDogXCJcIjtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9uID0gZGF0YS5hbm5vdGF0aW9uO1xuICAgICAgICB0aGlzLnBvc3Rfam9iX2FjdGlvbnMgPSBkYXRhLnBvc3Rfam9iX2FjdGlvbnMgPyBkYXRhLnBvc3Rfam9iX2FjdGlvbnMgOiB7fTtcbiAgICAgICAgdGhpcy5sYWJlbCA9IGRhdGEubGFiZWw7XG4gICAgICAgIHRoaXMudXVpZCA9IGRhdGEudXVpZDtcbiAgICAgICAgdGhpcy53b3JrZmxvd19vdXRwdXRzID0gZGF0YS53b3JrZmxvd19vdXRwdXRzID8gZGF0YS53b3JrZmxvd19vdXRwdXRzIDogW107XG4gICAgICAgIHZhciBub2RlID0gdGhpcztcbiAgICAgICAgdmFyIG5vZGVWaWV3ID0gbmV3IE5vZGVWaWV3KHtcbiAgICAgICAgICAgIGVsOiB0aGlzLmVsZW1lbnRbMF0sXG4gICAgICAgICAgICBub2RlOiBub2RlXG4gICAgICAgIH0pO1xuICAgICAgICBub2RlLm5vZGVWaWV3ID0gbm9kZVZpZXc7XG4gICAgICAgICQuZWFjaChkYXRhLmRhdGFfaW5wdXRzLCAoaSwgaW5wdXQpID0+IHtcbiAgICAgICAgICAgIG5vZGVWaWV3LmFkZERhdGFJbnB1dChpbnB1dCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZGF0YS5kYXRhX2lucHV0cy5sZW5ndGggPiAwICYmIGRhdGEuZGF0YV9vdXRwdXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG5vZGVWaWV3LmFkZFJ1bGUoKTtcbiAgICAgICAgfVxuICAgICAgICAkLmVhY2goZGF0YS5kYXRhX291dHB1dHMsIChpLCBvdXRwdXQpID0+IHtcbiAgICAgICAgICAgIG5vZGVWaWV3LmFkZERhdGFPdXRwdXQob3V0cHV0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGVWaWV3LnJlbmRlcigpO1xuICAgICAgICB0aGlzLmFwcC53b3JrZmxvdy5ub2RlX2NoYW5nZWQodGhpcywgdHJ1ZSk7XG4gICAgfSxcbiAgICB1cGRhdGVfZmllbGRfZGF0YTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXM7XG4gICAgICAgIHZhciBub2RlVmlldyA9IG5vZGUubm9kZVZpZXc7XG4gICAgICAgIC8vIHJlbW92ZSB1bnVzZWQgb3V0cHV0IHZpZXdzIGFuZCByZW1vdmUgcHJlLWV4aXN0aW5nIG91dHB1dCB2aWV3cyBmcm9tIGRhdGEuZGF0YV9vdXRwdXRzLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZXNlIGFyZSBub3QgYWRkZWQgdHdpY2UuXG4gICAgICAgIHZhciB1bnVzZWRfb3V0cHV0cyA9IFtdO1xuICAgICAgICAvLyBub2RlVmlldy5vdXRwdXRWaWV3cyBjb250YWlucyBwcmUtZXhpc3Rpbmcgb3V0cHV0cyxcbiAgICAgICAgLy8gd2hpbGUgZGF0YS5kYXRhX291dHB1dCBjb250YWlucyB3aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gICAgICAgIC8vIE5vdyB3ZSBnYXRoZXIgdGhlIHVudXNlZCBvdXRwdXRzXG4gICAgICAgICQuZWFjaChub2RlVmlldy5vdXRwdXRWaWV3cywgKGksIG91dHB1dF92aWV3KSA9PiB7XG4gICAgICAgICAgICB2YXIgY3VyX25hbWUgPSBvdXRwdXRfdmlldy5vdXRwdXQubmFtZTtcbiAgICAgICAgICAgIHZhciBkYXRhX25hbWVzID0gZGF0YS5kYXRhX291dHB1dHM7XG4gICAgICAgICAgICB2YXIgY3VyX25hbWVfaW5fZGF0YV9vdXRwdXRzID0gZmFsc2U7XG4gICAgICAgICAgICBfLmVhY2goZGF0YV9uYW1lcywgZGF0YV9uYW1lID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YV9uYW1lLm5hbWUgPT0gY3VyX25hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyX25hbWVfaW5fZGF0YV9vdXRwdXRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjdXJfbmFtZV9pbl9kYXRhX291dHB1dHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdW51c2VkX291dHB1dHMucHVzaChjdXJfbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgdW51c2VkIG91dHB1dHNcbiAgICAgICAgXy5lYWNoKHVudXNlZF9vdXRwdXRzLCB1bnVzZWRfb3V0cHV0ID0+IHtcbiAgICAgICAgICAgIF8uZWFjaChub2RlVmlldy5vdXRwdXRWaWV3c1t1bnVzZWRfb3V0cHV0XS50ZXJtaW5hbEVsZW1lbnQudGVybWluYWwuY29ubmVjdG9ycywgeCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgeC5kZXN0cm95KCk7IC8vIFJlbW92ZXMgdGhlIG5vb2RsZSBjb25uZWN0b3JzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBub2RlVmlldy5vdXRwdXRWaWV3c1t1bnVzZWRfb3V0cHV0XS5yZW1vdmUoKTsgLy8gcmVtb3ZlcyB0aGUgcmVuZGVyZWQgb3V0cHV0XG4gICAgICAgICAgICBkZWxldGUgbm9kZVZpZXcub3V0cHV0Vmlld3NbdW51c2VkX291dHB1dF07IC8vIHJlbW92ZXMgdGhlIHJlZmVyZW5jZSB0byB0aGUgb3V0cHV0XG4gICAgICAgICAgICBkZWxldGUgbm9kZS5vdXRwdXRfdGVybWluYWxzW3VudXNlZF9vdXRwdXRdOyAvLyByZW1vdmVzIHRoZSBvdXRwdXQgdGVybWluYWxcbiAgICAgICAgfSk7XG4gICAgICAgICQuZWFjaChub2RlLndvcmtmbG93X291dHB1dHMsIChpLCB3Zl9vdXRwdXQpID0+IHtcbiAgICAgICAgICAgIGlmICh3Zl9vdXRwdXQgJiYgIW5vZGUub3V0cHV0X3Rlcm1pbmFsc1t3Zl9vdXRwdXQub3V0cHV0X25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbm9kZS53b3JrZmxvd19vdXRwdXRzLnNwbGljZShpLCAxKTsgLy8gcmVtb3ZlcyBvdXRwdXQgZnJvbSBsaXN0IG9mIHdvcmtmbG93IG91dHB1dHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICQuZWFjaChkYXRhLmRhdGFfb3V0cHV0cywgKGksIG91dHB1dCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFub2RlVmlldy5vdXRwdXRWaWV3c1tvdXRwdXQubmFtZV0pIHtcbiAgICAgICAgICAgICAgICBub2RlVmlldy5hZGREYXRhT3V0cHV0KG91dHB1dCk7IC8vIGFkZCBkYXRhIG91dHB1dCBpZiBpdCBkb2VzIG5vdCB5ZXQgZXhpc3RcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG91dHB1dCBhbHJlYWR5IGV4aXN0cywgYnV0IHRoZSBvdXRwdXQgZm9ybWF0cyBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIC8vIFRoZXJlZm9yZSB3ZSB1cGRhdGUgdGhlIGRhdGF0eXBlcyBhbmQgZGVzdHJveSBpbnZhbGlkIGNvbm5lY3Rpb25zLlxuICAgICAgICAgICAgICAgIG5vZGUub3V0cHV0X3Rlcm1pbmFsc1tvdXRwdXQubmFtZV0uZGF0YXR5cGVzID0gb3V0cHV0LmV4dGVuc2lvbnM7XG4gICAgICAgICAgICAgICAgbm9kZS5vdXRwdXRfdGVybWluYWxzW291dHB1dC5uYW1lXS5kZXN0cm95SW52YWxpZENvbm5lY3Rpb25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvb2xfc3RhdGUgPSBkYXRhLnRvb2xfc3RhdGU7XG4gICAgICAgIHRoaXMuY29uZmlnX2Zvcm0gPSBkYXRhLmNvbmZpZ19mb3JtO1xuICAgICAgICB0aGlzLnRvb2xfdmVyc2lvbiA9IHRoaXMuY29uZmlnX2Zvcm0gJiYgdGhpcy5jb25maWdfZm9ybS52ZXJzaW9uO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGRhdGEuZXJyb3JzO1xuICAgICAgICB0aGlzLmFubm90YXRpb24gPSBkYXRhLmFubm90YXRpb247XG4gICAgICAgIHRoaXMubGFiZWwgPSBkYXRhLmxhYmVsO1xuICAgICAgICBpZiAoXCJwb3N0X2pvYl9hY3Rpb25zXCIgaW4gZGF0YSkge1xuICAgICAgICAgICAgLy8gV29uJ3QgYmUgcHJlc2VudCBpbiByZXNwb25zZSBmb3IgZGF0YSBpbnB1dHNcbiAgICAgICAgICAgIHZhciBwamFfaW4gPSBkYXRhLnBvc3Rfam9iX2FjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLnBvc3Rfam9iX2FjdGlvbnMgPSBwamFfaW4gPyBwamFfaW4gOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLm5vZGVWaWV3LnJlbmRlclRvb2xFcnJvcnMoKTtcbiAgICAgICAgLy8gVXBkYXRlIGlucHV0IHJvd3NcbiAgICAgICAgdmFyIG9sZF9ib2R5ID0gbm9kZVZpZXcuJChcImRpdi5pbnB1dHNcIik7XG4gICAgICAgIHZhciBuZXdfYm9keSA9IG5vZGVWaWV3Lm5ld0lucHV0c0RpdigpO1xuICAgICAgICB2YXIgbmV3VGVybWluYWxWaWV3cyA9IHt9O1xuICAgICAgICBfLmVhY2goZGF0YS5kYXRhX2lucHV0cywgaW5wdXQgPT4ge1xuICAgICAgICAgICAgdmFyIHRlcm1pbmFsVmlldyA9IG5vZGUubm9kZVZpZXcuYWRkRGF0YUlucHV0KGlucHV0LCBuZXdfYm9keSk7XG4gICAgICAgICAgICBuZXdUZXJtaW5hbFZpZXdzW2lucHV0Lm5hbWVdID0gdGVybWluYWxWaWV3O1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQ2xlYW51cCBhbnkgbGVmdG92ZXIgdGVybWluYWxzXG4gICAgICAgIF8uZWFjaChfLmRpZmZlcmVuY2UoXy52YWx1ZXMobm9kZVZpZXcudGVybWluYWxWaWV3cyksIF8udmFsdWVzKG5ld1Rlcm1pbmFsVmlld3MpKSwgdW51c2VkVmlldyA9PiB7XG4gICAgICAgICAgICB1bnVzZWRWaWV3LmVsLnRlcm1pbmFsLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGVWaWV3LnRlcm1pbmFsVmlld3MgPSBuZXdUZXJtaW5hbFZpZXdzO1xuICAgICAgICBub2RlLm5vZGVWaWV3LnJlbmRlcigpO1xuICAgICAgICAvLyBJbiBnZW5lcmFsIHdvcmtmbG93IGVkaXRvciBhc3N1bWVzIHRvb2wgb3V0cHV0cyBkb24ndCBjaGFuZ2UgaW4gIyBvclxuICAgICAgICAvLyB0eXBlIChub3QgcmVhbGx5IHZhbGlkIHJpZ2h0PykgYnV0IGFkZGluZyBzcGVjaWFsIGxvZ2ljIGhlcmUgZm9yXG4gICAgICAgIC8vIGRhdGEgY29sbGVjdGlvbiBpbnB1dCBwYXJhbWV0ZXJzIHRoYXQgY2FuIGhhdmUgdGhlaXIgY29sbGVjdGlvblxuICAgICAgICAvLyBjaGFuZ2UuXG4gICAgICAgIGlmIChkYXRhLmRhdGFfb3V0cHV0cy5sZW5ndGggPT0gMSAmJiBcImNvbGxlY3Rpb25fdHlwZVwiIGluIGRhdGEuZGF0YV9vdXRwdXRzWzBdKSB7XG4gICAgICAgICAgICBub2RlVmlldy51cGRhdGVEYXRhT3V0cHV0KGRhdGEuZGF0YV9vdXRwdXRzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBvbGRfYm9keS5yZXBsYWNlV2l0aChuZXdfYm9keSk7XG4gICAgICAgIGlmIChcIndvcmtmbG93X291dHB1dHNcIiBpbiBkYXRhKSB7XG4gICAgICAgICAgICAvLyBXb24ndCBiZSBwcmVzZW50IGluIHJlc3BvbnNlIGZvciBkYXRhIGlucHV0c1xuICAgICAgICAgICAgdGhpcy53b3JrZmxvd19vdXRwdXRzID0gZGF0YS53b3JrZmxvd19vdXRwdXRzID8gZGF0YS53b3JrZmxvd19vdXRwdXRzIDogW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYWN0aXZlLCByZWFjdGl2YXRlIHdpdGggbmV3IGNvbmZpZ19mb3JtXG4gICAgICAgIHRoaXMubWFya0NoYW5nZWQoKTtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9LFxuICAgIGVycm9yOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgIHZhciBiID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoXCIudG9vbEZvcm1Cb2R5XCIpO1xuICAgICAgICBiLmZpbmQoXCJkaXZcIikucmVtb3ZlKCk7XG4gICAgICAgIHZhciB0bXAgPSBgPGRpdiBzdHlsZT0nY29sb3I6IHJlZDsgdGV4dC1zdHlsZTogaXRhbGljOyc+JHt0ZXh0fTwvZGl2PmA7XG4gICAgICAgIHRoaXMuY29uZmlnX2Zvcm0gPSB0bXA7XG4gICAgICAgIGIuaHRtbCh0bXApO1xuICAgICAgICB0aGlzLmFwcC53b3JrZmxvdy5ub2RlX2NoYW5nZWQodGhpcyk7XG4gICAgfSxcbiAgICBtYXJrQ2hhbmdlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYXBwLndvcmtmbG93Lm5vZGVfY2hhbmdlZCh0aGlzKTtcbiAgICB9XG59KTtcbmV4cG9ydCBkZWZhdWx0IE5vZGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL3dvcmtmbG93L3dvcmtmbG93LW5vZGUuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWJBO0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF6VEE7QUEyVEE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///288\n");

/***/ }),

/***/ 289:
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-view-node.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(/*! libs/underscore */ 1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _workflowViewTerminals = __webpack_require__(/*! mvc/workflow/workflow-view-terminals */ 290);\n\nvar _workflowViewTerminals2 = _interopRequireDefault(_workflowViewTerminals);\n\nvar _workflowViewData = __webpack_require__(/*! mvc/workflow/workflow-view-data */ 292);\n\nvar _workflowViewData2 = _interopRequireDefault(_workflowViewData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        this.node = options.node;\n        this.output_width = Math.max(150, this.$el.width());\n        this.tool_body = this.$el.find(\".toolFormBody\");\n        this.tool_body.find(\"div\").remove();\n        this.newInputsDiv().appendTo(this.tool_body);\n        this.terminalViews = {};\n        this.outputViews = {};\n    },\n\n    render: function render() {\n        this.renderToolLabel();\n        this.renderToolErrors();\n        this.$el.css(\"width\", Math.min(250, Math.max(this.$el.width(), this.output_width)));\n    },\n\n    renderToolLabel: function renderToolLabel() {\n        this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n    },\n\n    renderToolErrors: function renderToolErrors() {\n        this.node.errors ? this.$el.addClass(\"tool-node-error\") : this.$el.removeClass(\"tool-node-error\");\n    },\n\n    newInputsDiv: function newInputsDiv() {\n        return $(\"<div/>\").addClass(\"inputs\");\n    },\n\n    updateMaxWidth: function updateMaxWidth(newWidth) {\n        this.output_width = Math.max(this.output_width, newWidth);\n    },\n\n    addRule: function addRule() {\n        this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n    },\n\n    addDataInput: function addDataInput(input, body) {\n        var skipResize = true;\n        if (!body) {\n            body = this.$(\".inputs\");\n            // initial addition to node - resize input to help calculate node\n            // width.\n            skipResize = false;\n        }\n        var terminalView = this.terminalViews[input.name];\n        var terminalViewClass = input.input_type == \"dataset_collection\" ? _workflowViewTerminals2.default.InputCollectionTerminalView : _workflowViewTerminals2.default.InputTerminalView;\n        if (terminalView && !(terminalView instanceof terminalViewClass)) {\n            terminalView.el.terminal.destroy();\n            terminalView = null;\n        }\n        if (!terminalView) {\n            terminalView = new terminalViewClass({\n                node: this.node,\n                input: input\n            });\n        } else {\n            var terminal = terminalView.el.terminal;\n            terminal.update(input);\n            terminal.destroyInvalidConnections();\n        }\n        this.terminalViews[input.name] = terminalView;\n        var terminalElement = terminalView.el;\n        var inputView = new _workflowViewData2.default.DataInputView({\n            terminalElement: terminalElement,\n            input: input,\n            nodeView: this,\n            skipResize: skipResize\n        });\n        var ib = inputView.$el;\n        body.append(ib.prepend(terminalView.terminalElements()));\n        return terminalView;\n    },\n\n    addDataOutput: function addDataOutput(output) {\n        var terminalViewClass = output.collection ? _workflowViewTerminals2.default.OutputCollectionTerminalView : _workflowViewTerminals2.default.OutputTerminalView;\n        var terminalView = new terminalViewClass({\n            node: this.node,\n            output: output\n        });\n        var outputView = new _workflowViewData2.default.DataOutputView({\n            output: output,\n            terminalElement: terminalView.el,\n            nodeView: this\n        });\n        this.outputViews[output.name] = outputView;\n        this.tool_body.append(outputView.$el.append(terminalView.terminalElements()));\n    },\n\n    redrawWorkflowOutputs: function redrawWorkflowOutputs() {\n        _.each(this.outputViews, function (outputView) {\n            outputView.redrawWorkflowOutput();\n        });\n    },\n\n    updateDataOutput: function updateDataOutput(output) {\n        var outputTerminal = this.node.output_terminals[output.name];\n        outputTerminal.update(output);\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy93b3JrZmxvdy93b3JrZmxvdy12aWV3LW5vZGUuanM/MmYwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gXCJsaWJzL3VuZGVyc2NvcmVcIjtcbmltcG9ydCBUZXJtaW5hbFZpZXdzIGZyb20gXCJtdmMvd29ya2Zsb3cvd29ya2Zsb3ctdmlldy10ZXJtaW5hbHNcIjtcbmltcG9ydCBEYXRhVmlld3MgZnJvbSBcIm12Yy93b3JrZmxvdy93b3JrZmxvdy12aWV3LWRhdGFcIjtcbmV4cG9ydCBkZWZhdWx0IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubm9kZSA9IG9wdGlvbnMubm9kZTtcbiAgICAgICAgdGhpcy5vdXRwdXRfd2lkdGggPSBNYXRoLm1heCgxNTAsIHRoaXMuJGVsLndpZHRoKCkpO1xuICAgICAgICB0aGlzLnRvb2xfYm9keSA9IHRoaXMuJGVsLmZpbmQoXCIudG9vbEZvcm1Cb2R5XCIpO1xuICAgICAgICB0aGlzLnRvb2xfYm9keS5maW5kKFwiZGl2XCIpLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLm5ld0lucHV0c0RpdigpLmFwcGVuZFRvKHRoaXMudG9vbF9ib2R5KTtcbiAgICAgICAgdGhpcy50ZXJtaW5hbFZpZXdzID0ge307XG4gICAgICAgIHRoaXMub3V0cHV0Vmlld3MgPSB7fTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJUb29sTGFiZWwoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJUb29sRXJyb3JzKCk7XG4gICAgICAgIHRoaXMuJGVsLmNzcyhcIndpZHRoXCIsIE1hdGgubWluKDI1MCwgTWF0aC5tYXgodGhpcy4kZWwud2lkdGgoKSwgdGhpcy5vdXRwdXRfd2lkdGgpKSk7XG4gICAgfSxcblxuICAgIHJlbmRlclRvb2xMYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJChcIi5ub2RlVGl0bGVcIikudGV4dCh0aGlzLm5vZGUubGFiZWwgfHwgdGhpcy5ub2RlLm5hbWUpO1xuICAgIH0sXG5cbiAgICByZW5kZXJUb29sRXJyb3JzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmVycm9ycyA/IHRoaXMuJGVsLmFkZENsYXNzKFwidG9vbC1ub2RlLWVycm9yXCIpIDogdGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJ0b29sLW5vZGUtZXJyb3JcIik7XG4gICAgfSxcblxuICAgIG5ld0lucHV0c0RpdjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkKFwiPGRpdi8+XCIpLmFkZENsYXNzKFwiaW5wdXRzXCIpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVNYXhXaWR0aDogZnVuY3Rpb24obmV3V2lkdGgpIHtcbiAgICAgICAgdGhpcy5vdXRwdXRfd2lkdGggPSBNYXRoLm1heCh0aGlzLm91dHB1dF93aWR0aCwgbmV3V2lkdGgpO1xuICAgIH0sXG5cbiAgICBhZGRSdWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50b29sX2JvZHkuYXBwZW5kKCQoXCI8ZGl2Lz5cIikuYWRkQ2xhc3MoXCJydWxlXCIpKTtcbiAgICB9LFxuXG4gICAgYWRkRGF0YUlucHV0OiBmdW5jdGlvbihpbnB1dCwgYm9keSkge1xuICAgICAgICB2YXIgc2tpcFJlc2l6ZSA9IHRydWU7XG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgICAgYm9keSA9IHRoaXMuJChcIi5pbnB1dHNcIik7XG4gICAgICAgICAgICAvLyBpbml0aWFsIGFkZGl0aW9uIHRvIG5vZGUgLSByZXNpemUgaW5wdXQgdG8gaGVscCBjYWxjdWxhdGUgbm9kZVxuICAgICAgICAgICAgLy8gd2lkdGguXG4gICAgICAgICAgICBza2lwUmVzaXplID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRlcm1pbmFsVmlldyA9IHRoaXMudGVybWluYWxWaWV3c1tpbnB1dC5uYW1lXTtcbiAgICAgICAgdmFyIHRlcm1pbmFsVmlld0NsYXNzID1cbiAgICAgICAgICAgIGlucHV0LmlucHV0X3R5cGUgPT0gXCJkYXRhc2V0X2NvbGxlY3Rpb25cIlxuICAgICAgICAgICAgICAgID8gVGVybWluYWxWaWV3cy5JbnB1dENvbGxlY3Rpb25UZXJtaW5hbFZpZXdcbiAgICAgICAgICAgICAgICA6IFRlcm1pbmFsVmlld3MuSW5wdXRUZXJtaW5hbFZpZXc7XG4gICAgICAgIGlmICh0ZXJtaW5hbFZpZXcgJiYgISh0ZXJtaW5hbFZpZXcgaW5zdGFuY2VvZiB0ZXJtaW5hbFZpZXdDbGFzcykpIHtcbiAgICAgICAgICAgIHRlcm1pbmFsVmlldy5lbC50ZXJtaW5hbC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0ZXJtaW5hbFZpZXcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGVybWluYWxWaWV3KSB7XG4gICAgICAgICAgICB0ZXJtaW5hbFZpZXcgPSBuZXcgdGVybWluYWxWaWV3Q2xhc3Moe1xuICAgICAgICAgICAgICAgIG5vZGU6IHRoaXMubm9kZSxcbiAgICAgICAgICAgICAgICBpbnB1dDogaW5wdXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRlcm1pbmFsID0gdGVybWluYWxWaWV3LmVsLnRlcm1pbmFsO1xuICAgICAgICAgICAgdGVybWluYWwudXBkYXRlKGlucHV0KTtcbiAgICAgICAgICAgIHRlcm1pbmFsLmRlc3Ryb3lJbnZhbGlkQ29ubmVjdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRlcm1pbmFsVmlld3NbaW5wdXQubmFtZV0gPSB0ZXJtaW5hbFZpZXc7XG4gICAgICAgIHZhciB0ZXJtaW5hbEVsZW1lbnQgPSB0ZXJtaW5hbFZpZXcuZWw7XG4gICAgICAgIHZhciBpbnB1dFZpZXcgPSBuZXcgRGF0YVZpZXdzLkRhdGFJbnB1dFZpZXcoe1xuICAgICAgICAgICAgdGVybWluYWxFbGVtZW50OiB0ZXJtaW5hbEVsZW1lbnQsXG4gICAgICAgICAgICBpbnB1dDogaW5wdXQsXG4gICAgICAgICAgICBub2RlVmlldzogdGhpcyxcbiAgICAgICAgICAgIHNraXBSZXNpemU6IHNraXBSZXNpemVcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpYiA9IGlucHV0Vmlldy4kZWw7XG4gICAgICAgIGJvZHkuYXBwZW5kKGliLnByZXBlbmQodGVybWluYWxWaWV3LnRlcm1pbmFsRWxlbWVudHMoKSkpO1xuICAgICAgICByZXR1cm4gdGVybWluYWxWaWV3O1xuICAgIH0sXG5cbiAgICBhZGREYXRhT3V0cHV0OiBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgICAgdmFyIHRlcm1pbmFsVmlld0NsYXNzID0gb3V0cHV0LmNvbGxlY3Rpb25cbiAgICAgICAgICAgID8gVGVybWluYWxWaWV3cy5PdXRwdXRDb2xsZWN0aW9uVGVybWluYWxWaWV3XG4gICAgICAgICAgICA6IFRlcm1pbmFsVmlld3MuT3V0cHV0VGVybWluYWxWaWV3O1xuICAgICAgICB2YXIgdGVybWluYWxWaWV3ID0gbmV3IHRlcm1pbmFsVmlld0NsYXNzKHtcbiAgICAgICAgICAgIG5vZGU6IHRoaXMubm9kZSxcbiAgICAgICAgICAgIG91dHB1dDogb3V0cHV0XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgb3V0cHV0VmlldyA9IG5ldyBEYXRhVmlld3MuRGF0YU91dHB1dFZpZXcoe1xuICAgICAgICAgICAgb3V0cHV0OiBvdXRwdXQsXG4gICAgICAgICAgICB0ZXJtaW5hbEVsZW1lbnQ6IHRlcm1pbmFsVmlldy5lbCxcbiAgICAgICAgICAgIG5vZGVWaWV3OiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm91dHB1dFZpZXdzW291dHB1dC5uYW1lXSA9IG91dHB1dFZpZXc7XG4gICAgICAgIHRoaXMudG9vbF9ib2R5LmFwcGVuZChvdXRwdXRWaWV3LiRlbC5hcHBlbmQodGVybWluYWxWaWV3LnRlcm1pbmFsRWxlbWVudHMoKSkpO1xuICAgIH0sXG5cbiAgICByZWRyYXdXb3JrZmxvd091dHB1dHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBfLmVhY2godGhpcy5vdXRwdXRWaWV3cywgb3V0cHV0VmlldyA9PiB7XG4gICAgICAgICAgICBvdXRwdXRWaWV3LnJlZHJhd1dvcmtmbG93T3V0cHV0KCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB1cGRhdGVEYXRhT3V0cHV0OiBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgICAgdmFyIG91dHB1dFRlcm1pbmFsID0gdGhpcy5ub2RlLm91dHB1dF90ZXJtaW5hbHNbb3V0cHV0Lm5hbWVdO1xuICAgICAgICBvdXRwdXRUZXJtaW5hbC51cGRhdGUob3V0cHV0KTtcbiAgICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvd29ya2Zsb3cvd29ya2Zsb3ctdmlldy1ub2RlLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF2R0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///289\n");

/***/ }),

/***/ 290:
/*!****************************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-view-terminals.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _workflowTerminals = __webpack_require__(/*! mvc/workflow/workflow-terminals */ 291);\n\nvar _workflowTerminals2 = _interopRequireDefault(_workflowTerminals);\n\nvar _workflowConnector = __webpack_require__(/*! mvc/workflow/workflow-connector */ 126);\n\nvar _workflowConnector2 = _interopRequireDefault(_workflowConnector);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar TerminalMappingView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"fa-icon-button fa fa-folder-o\",\n    initialize: function initialize(options) {\n        var mapText = \"Run tool in parallel over collection\";\n        this.$el.tooltip({ delay: 500, title: mapText });\n        this.model.bind(\"change\", _.bind(this.render, this));\n    },\n    render: function render() {\n        if (this.model.mapOver.isCollection) {\n            this.$el.show();\n        } else {\n            this.$el.hide();\n        }\n    }\n});\n\nvar InputTerminalMappingView = TerminalMappingView.extend({\n    events: {\n        click: \"onClick\",\n        mouseenter: \"onMouseEnter\",\n        mouseleave: \"onMouseLeave\"\n    },\n    onMouseEnter: function onMouseEnter(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            this.$el.css(\"color\", \"red\");\n        }\n    },\n    onMouseLeave: function onMouseLeave(e) {\n        this.$el.css(\"color\", \"black\");\n    },\n    onClick: function onClick(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            // TODO: Consider prompting...\n            model.terminal.resetMapping();\n        }\n    }\n});\n\nvar TerminalView = Backbone.View.extend({\n    setupMappingView: function setupMappingView(terminal) {\n        var terminalMapping = new this.terminalMappingClass({\n            terminal: terminal\n        });\n        var terminalMappingView = new this.terminalMappingViewClass({\n            model: terminalMapping\n        });\n        terminalMappingView.render();\n        terminal.terminalMappingView = terminalMappingView;\n        this.terminalMappingView = terminalMappingView;\n    },\n    terminalElements: function terminalElements() {\n        if (this.terminalMappingView) {\n            return [this.terminalMappingView.el, this.el];\n        } else {\n            return [this.el];\n        }\n    }\n});\n\nvar BaseInputTerminalView = TerminalView.extend({\n    className: \"terminal input-terminal\",\n    initialize: function initialize(options) {\n        var node = options.node;\n        var input = options.input;\n        var name = input.name;\n        var terminal = this.terminalForInput(input);\n        if (!terminal.multiple) {\n            this.setupMappingView(terminal);\n        }\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.input_terminals[name] = terminal;\n    },\n    events: {\n        dropinit: \"onDropInit\",\n        dropstart: \"onDropStart\",\n        dropend: \"onDropEnd\",\n        drop: \"onDrop\",\n        hover: \"onHover\"\n    },\n    onDropInit: function onDropInit(e, d) {\n        var terminal = this.el.terminal;\n        // Accept a dragable if it is an output terminal and has a\n        // compatible type\n        return $(d.drag).hasClass(\"output-terminal\") && terminal.canAccept(d.drag.terminal);\n    },\n    onDropStart: function onDropStart(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n        }\n    },\n    onDropEnd: function onDropEnd(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n        }\n    },\n    onDrop: function onDrop(e, d) {\n        var terminal = this.el.terminal;\n        new _workflowConnector2.default(d.drag.terminal, terminal).redraw();\n    },\n    onHover: function onHover() {\n        var element = this.el;\n        var terminal = element.terminal;\n        // If connected, create a popup to allow disconnection\n        if (terminal.connectors.length > 0) {\n            // Create callout\n            var t = $(\"<div class='callout'></div>\").css({ display: \"none\" }).appendTo(\"body\").append($(\"<div class='button'></div>\").append($(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click(function () {\n                $.each(terminal.connectors, function (_, x) {\n                    if (x) {\n                        x.destroy();\n                    }\n                });\n                t.remove();\n            }))).bind(\"mouseleave\", function () {\n                $(this).remove();\n            });\n            // Position it and show\n            t.css({\n                top: $(element).offset().top - 2,\n                left: $(element).offset().left - t.width(),\n                \"padding-right\": $(element).width()\n            }).show();\n        }\n    }\n});\n\nvar InputTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function terminalForInput(input) {\n        return new _workflowTerminals2.default.InputTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar InputCollectionTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function terminalForInput(input) {\n        return new _workflowTerminals2.default.InputCollectionTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar BaseOutputTerminalView = TerminalView.extend({\n    className: \"terminal output-terminal\",\n    initialize: function initialize(options) {\n        var node = options.node;\n        var output = options.output;\n        var name = output.name;\n        var terminal = this.terminalForOutput(output);\n        this.setupMappingView(terminal);\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.output_terminals[name] = terminal;\n    },\n    events: {\n        drag: \"onDrag\",\n        dragstart: \"onDragStart\",\n        dragend: \"onDragEnd\"\n    },\n    onDrag: function onDrag(e, d) {\n        var onmove = function onmove() {\n            var po = $(d.proxy).offsetParent().offset();\n\n            var x = d.offsetX - po.left;\n            var y = d.offsetY - po.top;\n            $(d.proxy).css({ left: x, top: y });\n            d.proxy.terminal.redraw();\n            // FIXME: global\n            window.workflow_globals.canvas_manager.update_viewport_overlay();\n        };\n        onmove();\n        $(\"#canvas-container\").get(0).scroll_panel.test(e, onmove);\n    },\n    onDragStart: function onDragStart(e, d) {\n        $(d.available).addClass(\"input-terminal-active\");\n        // Save PJAs in the case of change datatype actions.\n        window.workflow_globals.workflow.check_changes_in_active_form();\n        // Drag proxy div\n        var h = $('<div class=\"drag-terminal\" style=\"position: absolute;\"></div>').appendTo(\"#canvas-container\").get(0);\n        // Terminal and connection to display noodle while dragging\n        h.terminal = new _workflowTerminals2.default.OutputTerminal({ element: h });\n        var c = new _workflowConnector2.default();\n        c.dragging = true;\n        c.connect(this.el.terminal, h.terminal);\n        return h;\n    },\n    onDragEnd: function onDragEnd(e, d) {\n        var connector = d.proxy.terminal.connectors[0];\n        // check_changes_in_active_form may change the state and cause a\n        // the connection to have already been destroyed. There must be better\n        // ways to handle this but the following check fixes some serious GUI\n        // bugs for now.\n        if (connector) {\n            connector.destroy();\n        }\n        $(d.proxy).remove();\n        $(d.available).removeClass(\"input-terminal-active\");\n        $(\"#canvas-container\").get(0).scroll_panel.stop();\n    }\n});\n\nvar OutputTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function terminalForOutput(output) {\n        var type = output.extensions;\n        var terminal = new _workflowTerminals2.default.OutputTerminal({\n            element: this.el,\n            datatypes: type\n        });\n        return terminal;\n    }\n});\n\nvar OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function terminalForOutput(output) {\n        var collection_type = output.collection_type;\n        var collection_type_source = output.collection_type_source;\n        var terminal = new _workflowTerminals2.default.OutputCollectionTerminal({\n            element: this.el,\n            collection_type: collection_type,\n            collection_type_source: collection_type_source,\n            datatypes: output.extensions\n        });\n        return terminal;\n    }\n});\n\nexports.default = {\n    InputTerminalView: InputTerminalView,\n    OutputTerminalView: OutputTerminalView,\n    InputCollectionTerminalView: InputCollectionTerminalView,\n    OutputCollectionTerminalView: OutputCollectionTerminalView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///290\n");

/***/ }),

/***/ 291:
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-terminals.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($, Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\nfunction CollectionTypeDescription(collectionType) {\n    this.collectionType = collectionType;\n    this.isCollection = true;\n    this.rank = collectionType.split(\":\").length;\n}\n\nvar NULL_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: false,\n    canMatch: function canMatch() {\n        return false;\n    },\n    canMapOver: function canMapOver() {\n        return false;\n    },\n    toString: function toString() {\n        return \"NullCollectionType[]\";\n    },\n    append: function append(otherCollectionType) {\n        return otherCollectionType;\n    },\n    equal: function equal(other) {\n        return other === this;\n    }\n};\n\nvar ANY_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: true,\n    canMatch: function canMatch(other) {\n        return NULL_COLLECTION_TYPE_DESCRIPTION !== other;\n    },\n    canMapOver: function canMapOver() {\n        return false;\n    },\n    toString: function toString() {\n        return \"AnyCollectionType[]\";\n    },\n    append: function append() {\n        throw \"Cannot append to ANY_COLLECTION_TYPE_DESCRIPTION\";\n    },\n    equal: function equal(other) {\n        return other === this;\n    }\n};\n\n$.extend(CollectionTypeDescription.prototype, {\n    append: function append(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return this;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return otherCollectionTypeDescription;\n        }\n        return new CollectionTypeDescription(this.collectionType + \":\" + otherCollectionTypeDescription.collectionType);\n    },\n    canMatch: function canMatch(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return true;\n        }\n        return otherCollectionTypeDescription.collectionType == this.collectionType;\n    },\n    canMapOver: function canMapOver(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (this.rank <= otherCollectionTypeDescription.rank) {\n            // Cannot map over self...\n            return false;\n        }\n        var requiredSuffix = otherCollectionTypeDescription.collectionType;\n        return this._endsWith(this.collectionType, requiredSuffix);\n    },\n    effectiveMapOver: function effectiveMapOver(otherCollectionTypeDescription) {\n        var otherCollectionType = otherCollectionTypeDescription.collectionType;\n        var effectiveCollectionType = this.collectionType.substring(0, this.collectionType.length - otherCollectionType.length - 1);\n        return new CollectionTypeDescription(effectiveCollectionType);\n    },\n    equal: function equal(otherCollectionTypeDescription) {\n        return otherCollectionTypeDescription.collectionType == this.collectionType;\n    },\n    toString: function toString() {\n        return \"CollectionType[\" + this.collectionType + \"]\";\n    },\n    _endsWith: function _endsWith(str, suffix) {\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    }\n});\n\nvar TerminalMapping = Backbone.Model.extend({\n    initialize: function initialize(attr) {\n        this.mapOver = attr.mapOver || NULL_COLLECTION_TYPE_DESCRIPTION;\n        this.terminal = attr.terminal;\n        this.terminal.terminalMapping = this;\n    },\n    disableMapOver: function disableMapOver() {\n        this.setMapOver(NULL_COLLECTION_TYPE_DESCRIPTION);\n    },\n    setMapOver: function setMapOver(collectionTypeDescription) {\n        // TODO: Can I use \"attributes\" or something to auto trigger \"change\"\n        // event?\n        this.mapOver = collectionTypeDescription;\n        this.trigger(\"change\");\n    }\n});\n\nvar Terminal = Backbone.Model.extend({\n    initialize: function initialize(attr) {\n        this.element = attr.element;\n        this.connectors = [];\n    },\n    connect: function connect(connector) {\n        this.connectors.push(connector);\n        if (this.node) {\n            this.node.markChanged();\n        }\n    },\n    disconnect: function disconnect(connector) {\n        this.connectors.splice($.inArray(connector, this.connectors), 1);\n        if (this.node) {\n            this.node.markChanged();\n            this.resetMappingIfNeeded();\n        }\n    },\n    redraw: function redraw() {\n        $.each(this.connectors, function (_, c) {\n            c.redraw();\n        });\n    },\n    destroy: function destroy() {\n        $.each(this.connectors.slice(), function (_, c) {\n            c.destroy();\n        });\n    },\n    destroyInvalidConnections: function destroyInvalidConnections() {\n        _.each(this.connectors, function (connector) {\n            if (connector) {\n                connector.destroyIfInvalid();\n            }\n        });\n    },\n    setMapOver: function setMapOver(val) {\n        if (this.multiple) {\n            return; // Cannot set this to be multirun...\n        }\n\n        if (!this.mapOver().equal(val)) {\n            this.terminalMapping.setMapOver(val);\n            _.each(this.node.output_terminals, function (outputTerminal) {\n                outputTerminal.setMapOver(val);\n            });\n        }\n    },\n    mapOver: function mapOver() {\n        if (!this.terminalMapping) {\n            return NULL_COLLECTION_TYPE_DESCRIPTION;\n        } else {\n            return this.terminalMapping.mapOver;\n        }\n    },\n    isMappedOver: function isMappedOver() {\n        return this.terminalMapping && this.terminalMapping.mapOver.isCollection;\n    },\n    resetMapping: function resetMapping() {\n        this.terminalMapping.disableMapOver();\n    },\n\n    resetMappingIfNeeded: function resetMappingIfNeeded() {} // Subclasses should override this...\n});\n\nvar OutputTerminal = Terminal.extend({\n    initialize: function initialize(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n    },\n\n    resetMappingIfNeeded: function resetMappingIfNeeded() {\n        // If inputs were only mapped over to preserve\n        // an output just disconnected reset these...\n        if (!this.node.hasConnectedOutputTerminals() && !this.node.hasConnectedMappedInputTerminals()) {\n            _.each(this.node.mappedInputTerminals(), function (mappedInput) {\n                mappedInput.resetMappingIfNeeded();\n            });\n        }\n\n        var noMappedInputs = !this.node.hasMappedOverInputTerminals();\n        if (noMappedInputs) {\n            this.resetMapping();\n        }\n    },\n\n    resetMapping: function resetMapping() {\n        this.terminalMapping.disableMapOver();\n        _.each(this.connectors, function (connector) {\n            var connectedInput = connector.handle2;\n            if (connectedInput) {\n                // Not exactly right because this is still connected.\n                // Either rewrite resetMappingIfNeeded or disconnect\n                // and reconnect if valid.\n                connectedInput.resetMappingIfNeeded();\n                connector.destroyIfInvalid();\n            }\n        });\n    }\n});\n\nvar BaseInputTerminal = Terminal.extend({\n    initialize: function initialize(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.update(attr.input); // subclasses should implement this...\n    },\n    canAccept: function canAccept(other) {\n        if (this._inputFilled()) {\n            return false;\n        } else {\n            return this.attachable(other);\n        }\n    },\n    resetMappingIfNeeded: function resetMappingIfNeeded() {\n        var mapOver = this.mapOver();\n        if (!mapOver.isCollection) {\n            return;\n        }\n        // No output terminals are counting on this being mapped\n        // over if connected inputs are still mapped over or if none\n        // of the outputs are connected...\n        var reset = this.node.hasConnectedMappedInputTerminals() || !this.node.hasConnectedOutputTerminals();\n        if (reset) {\n            this.resetMapping();\n        }\n    },\n    resetMapping: function resetMapping() {\n        this.terminalMapping.disableMapOver();\n        if (!this.node.hasMappedOverInputTerminals()) {\n            _.each(this.node.output_terminals, function (terminal) {\n                // This shouldn't be called if there are mapped over\n                // outputs.\n                terminal.resetMapping();\n            });\n        }\n    },\n    connected: function connected() {\n        return this.connectors.length !== 0;\n    },\n    _inputFilled: function _inputFilled() {\n        var inputFilled;\n        if (!this.connected()) {\n            inputFilled = false;\n        } else {\n            if (this.multiple) {\n                if (this._collectionAttached()) {\n                    // Can only attach one collection to multiple input\n                    // data parameter.\n                    inputFilled = true;\n                } else {\n                    inputFilled = false;\n                }\n            } else {\n                inputFilled = true;\n            }\n        }\n        return inputFilled;\n    },\n    _collectionAttached: function _collectionAttached() {\n        if (!this.connected()) {\n            return false;\n        } else {\n            var firstOutput = this.connectors[0].handle1;\n            if (!firstOutput) {\n                return false;\n            } else {\n                if (firstOutput.isCollection || firstOutput.isMappedOver() || firstOutput.datatypes.indexOf(\"input_collection\") > 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }\n    },\n    _mappingConstraints: function _mappingConstraints() {\n        // If this is a connected terminal, return list of collection types\n        // other terminals connected to node are constraining mapping to.\n        if (!this.node) {\n            return []; // No node - completely unconstrained\n        }\n        var mapOver = this.mapOver();\n        if (mapOver.isCollection) {\n            return [mapOver];\n        }\n\n        var constraints = [];\n        if (!this.node.hasConnectedOutputTerminals()) {\n            _.each(this.node.connectedMappedInputTerminals(), function (inputTerminal) {\n                constraints.push(inputTerminal.mapOver());\n            });\n        } else {\n            // All outputs should have same mapOver status - least specific.\n            constraints.push(_.first(_.values(this.node.output_terminals)).mapOver());\n        }\n        return constraints;\n    },\n    _producesAcceptableDatatype: function _producesAcceptableDatatype(other) {\n        // other is a non-collection output...\n        for (var t in this.datatypes) {\n            var thisDatatype = this.datatypes[t];\n            if (thisDatatype == \"input\") {\n                return true;\n            }\n            var cat_outputs = [];\n            cat_outputs = cat_outputs.concat(other.datatypes);\n            if (other.node.post_job_actions) {\n                for (var pja_i in other.node.post_job_actions) {\n                    var pja = other.node.post_job_actions[pja_i];\n                    if (pja.action_type == \"ChangeDatatypeAction\" && (pja.output_name === \"\" || pja.output_name == other.name) && pja.action_arguments) {\n                        cat_outputs.push(pja.action_arguments.newtype);\n                    }\n                }\n            }\n            // FIXME: No idea what to do about case when datatype is 'input'\n            for (var other_datatype_i in cat_outputs) {\n                var other_datatype = cat_outputs[other_datatype_i];\n                if (other_datatype == \"input\" || other_datatype == \"_sniff_\" || other_datatype == \"input_collection\" || window.workflow_globals.app.isSubType(cat_outputs[other_datatype_i], thisDatatype)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    _otherCollectionType: function _otherCollectionType(other) {\n        var otherCollectionType = NULL_COLLECTION_TYPE_DESCRIPTION;\n        if (other.isCollection) {\n            otherCollectionType = other.collectionType;\n        }\n        var otherMapOver = other.mapOver();\n        if (otherMapOver.isCollection) {\n            otherCollectionType = otherMapOver.append(otherCollectionType);\n        }\n        return otherCollectionType;\n    }\n});\n\nvar InputTerminal = BaseInputTerminal.extend({\n    update: function update(input) {\n        this.datatypes = input.extensions;\n        this.multiple = input.multiple;\n        this.collection = false;\n    },\n    connect: function connect(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other_output = connector.handle1;\n        if (!other_output) {\n            return;\n        }\n        var otherCollectionType = this._otherCollectionType(other_output);\n        if (otherCollectionType.isCollection) {\n            this.setMapOver(otherCollectionType);\n        }\n    },\n    attachable: function attachable(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        var thisMapOver = this.mapOver();\n        if (otherCollectionType.isCollection) {\n            if (this.multiple) {\n                if (this.connected() && !this._collectionAttached()) {\n                    // if single inputs attached, cannot also attach a\n                    // collection (yet...)\n                    return false;\n                }\n                if (otherCollectionType.rank == 1) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    // TODO: Allow subcollection mapping over this as if it were\n                    // a list collection input.\n                    return false;\n                }\n            }\n            if (thisMapOver.isCollection && thisMapOver.canMatch(otherCollectionType)) {\n                return this._producesAcceptableDatatype(other);\n            } else {\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (mappingConstraints.every(_.bind(otherCollectionType.canMatch, otherCollectionType))) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    return false;\n                }\n            }\n        } else if (thisMapOver.isCollection) {\n            // Attempting to match a non-collection output to an\n            // explicitly collection input.\n            return false;\n        }\n        return this._producesAcceptableDatatype(other);\n    }\n});\n\nvar InputCollectionTerminal = BaseInputTerminal.extend({\n    update: function update(input) {\n        this.multiple = false;\n        this.collection = true;\n        this.datatypes = input.extensions;\n        var collectionTypes = [];\n        if (input.collection_types) {\n            _.each(input.collection_types, function (collectionType) {\n                collectionTypes.push(new CollectionTypeDescription(collectionType));\n            });\n        } else {\n            collectionTypes.push(ANY_COLLECTION_TYPE_DESCRIPTION);\n        }\n        this.collectionTypes = collectionTypes;\n    },\n    connect: function connect(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other = connector.handle1;\n        if (!other) {\n            return;\n        }\n\n        var effectiveMapOver = this._effectiveMapOver(other);\n        this.setMapOver(effectiveMapOver);\n    },\n    _effectiveMapOver: function _effectiveMapOver(other) {\n        var collectionTypes = this.collectionTypes;\n        var otherCollectionType = this._otherCollectionType(other);\n        var canMatch = _.some(collectionTypes, function (collectionType) {\n            return collectionType.canMatch(otherCollectionType);\n        });\n\n        if (!canMatch) {\n            for (var collectionTypeIndex in collectionTypes) {\n                var collectionType = collectionTypes[collectionTypeIndex];\n                if (otherCollectionType.canMapOver(collectionType)) {\n                    var effectiveMapOver = otherCollectionType.effectiveMapOver(collectionType);\n                    if (effectiveMapOver != NULL_COLLECTION_TYPE_DESCRIPTION) {\n                        return effectiveMapOver;\n                    }\n                }\n            }\n        }\n        return NULL_COLLECTION_TYPE_DESCRIPTION;\n    },\n    _effectiveCollectionTypes: function _effectiveCollectionTypes() {\n        var thisMapOver = this.mapOver();\n        return _.map(this.collectionTypes, function (t) {\n            return thisMapOver.append(t);\n        });\n    },\n    attachable: function attachable(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        if (otherCollectionType.isCollection) {\n            var effectiveCollectionTypes = this._effectiveCollectionTypes();\n            var thisMapOver = this.mapOver();\n            var canMatch = _.some(effectiveCollectionTypes, function (effectiveCollectionType) {\n                return effectiveCollectionType.canMatch(otherCollectionType);\n            });\n            if (canMatch) {\n                // Only way a direct match...\n                return this._producesAcceptableDatatype(other);\n                // Otherwise we need to mapOver\n            } else if (thisMapOver.isCollection) {\n                // In this case, mapOver already set and we didn't match skipping...\n                return false;\n            } else if (_.some(this.collectionTypes, function (collectionType) {\n                return otherCollectionType.canMapOver(collectionType);\n            })) {\n                var effectiveMapOver = this._effectiveMapOver(other);\n                if (!effectiveMapOver.isCollection) {\n                    return false;\n                }\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (mappingConstraints.every(effectiveMapOver.canMatch)) {\n                    return this._producesAcceptableDatatype(other);\n                }\n            }\n        }\n        return false;\n    }\n});\n\nvar OutputCollectionTerminal = Terminal.extend({\n    initialize: function initialize(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n        if (attr.collection_type) {\n            this.collectionType = new CollectionTypeDescription(attr.collection_type);\n        } else {\n            var collectionTypeSource = attr.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\"Warning: No collection type or collection type source defined.\");\n            }\n            this.collectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n        this.isCollection = true;\n    },\n    update: function update(output) {\n        var newCollectionType;\n        if (output.collection_type) {\n            newCollectionType = new CollectionTypeDescription(output.collection_type);\n        } else {\n            var collectionTypeSource = output.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\"Warning: No collection type or collection type source defined.\");\n            }\n            newCollectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n\n        if (newCollectionType.collectionType != this.collectionType.collectionType) {\n            _.each(this.connectors, function (connector) {\n                // TODO: consider checking if connection valid before removing...\n                connector.destroy();\n            });\n        }\n        this.collectionType = newCollectionType;\n    }\n});\n\nexports.default = {\n    InputTerminal: InputTerminal,\n    OutputTerminal: OutputTerminal,\n    InputCollectionTerminal: InputCollectionTerminal,\n    OutputCollectionTerminal: OutputCollectionTerminal,\n    TerminalMapping: TerminalMapping,\n\n    // test export\n    CollectionTypeDescription: CollectionTypeDescription,\n    NULL_COLLECTION_TYPE_DESCRIPTION: NULL_COLLECTION_TYPE_DESCRIPTION,\n    ANY_COLLECTION_TYPE_DESCRIPTION: ANY_COLLECTION_TYPE_DESCRIPTION\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///291\n");

/***/ }),

/***/ 292:
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-view-data.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar DataInputView = Backbone.View.extend({\n    className: \"form-row dataRow input-data-row\",\n\n    initialize: function initialize(options) {\n        this.input = options.input;\n        this.nodeView = options.nodeView;\n        this.terminalElement = options.terminalElement;\n\n        this.$el.attr(\"name\", this.input.name).html(this.input.label);\n\n        if (!options.skipResize) {\n            this.$el.css({\n                position: \"absolute\",\n                left: -1000,\n                top: -1000,\n                display: \"none\"\n            });\n            $(\"body\").append(this.el);\n            this.nodeView.updateMaxWidth(this.$el.outerWidth());\n            this.$el.css({\n                position: \"\",\n                left: \"\",\n                top: \"\",\n                display: \"\"\n            });\n            this.$el.remove();\n        }\n    }\n});\n\nvar DataOutputView = Backbone.View.extend({\n    className: \"form-row dataRow\",\n\n    initialize: function initialize(options) {\n        this.output = options.output;\n        this.terminalElement = options.terminalElement;\n        this.nodeView = options.nodeView;\n\n        var output = this.output;\n        var label = output.name;\n        var node = this.nodeView.node;\n\n        var isInput = output.extensions.indexOf(\"input\") >= 0 || output.extensions.indexOf(\"input_collection\") >= 0;\n        if (!isInput) {\n            label = label + \" (\" + output.extensions.join(\", \") + \")\";\n        }\n        this.$el.html(label);\n        this.calloutView = null;\n        if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n            var calloutView = new OutputCalloutView({\n                label: label,\n                output: output,\n                node: node\n            });\n            this.calloutView = calloutView;\n            this.$el.append(calloutView.el);\n            this.$el.hover(function () {\n                calloutView.hoverImage();\n            }, function () {\n                calloutView.resetImage();\n            });\n        }\n        this.$el.css({\n            position: \"absolute\",\n            left: -1000,\n            top: -1000,\n            display: \"none\"\n        });\n        $(\"body\").append(this.el);\n        this.nodeView.updateMaxWidth(this.$el.outerWidth() + 17);\n        this.$el.css({\n            position: \"\",\n            left: \"\",\n            top: \"\",\n            display: \"\"\n        }).detach();\n    },\n    redrawWorkflowOutput: function redrawWorkflowOutput() {\n        if (this.calloutView) {\n            this.calloutView.resetImage();\n        }\n    }\n});\n\nvar OutputCalloutView = Backbone.View.extend({\n    tagName: \"div\",\n\n    initialize: function initialize(options) {\n        this.label = options.label;\n        this.node = options.node;\n        this.output = options.output;\n\n        var view = this;\n        var node = this.node;\n        this.$el.attr(\"class\", \"callout \" + this.label).css({ display: \"none\" }).append($(\"<div class='buttons'></div>\").append($(\"<img/>\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-outline.png\").click(function () {\n            var outputName = view.output.name;\n            if (node.isWorkflowOutput(outputName)) {\n                node.removeWorkflowOutput(outputName);\n                view.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-outline.png\");\n            } else {\n                node.addWorkflowOutput(outputName);\n                view.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small.png\");\n            }\n            window.workflow_globals.workflow.has_changes = true;\n            window.workflow_globals.canvas_manager.draw_overview();\n        }))).tooltip({\n            delay: 500,\n            title: \"Mark dataset as a workflow output. All unmarked datasets will be hidden.\"\n        });\n\n        this.$el.css({\n            top: \"50%\",\n            margin: \"-8px 0px 0px 0px\",\n            right: 8\n        });\n        this.$el.show();\n        this.resetImage();\n    },\n\n    resetImage: function resetImage() {\n        if (!this.node.isWorkflowOutput(this.output.name)) {\n            this.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-outline.png\");\n        } else {\n            this.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small.png\");\n        }\n    },\n\n    hoverImage: function hoverImage() {\n        this.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-yellow.png\");\n    }\n});\n\nexports.default = {\n    DataInputView: DataInputView,\n    DataOutputView: DataOutputView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///292\n");

/***/ }),

/***/ 293:
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-forms.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nvar _toolFormBase = __webpack_require__(/*! mvc/tool/tool-form-base */ 45);\n\nvar _toolFormBase2 = _interopRequireDefault(_toolFormBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Default form wrapper for non-tool modules in the workflow editor. */\nvar Default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new _formView2.default(_utils2.default.merge(options, {\n            onchange: function onchange() {\n                _utils2.default.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/workflows/build_module\",\n                    data: {\n                        id: node.id,\n                        type: node.type,\n                        content_id: node.content_id,\n                        inputs: self.form.data.create()\n                    },\n                    success: function success(data) {\n                        node.update_field_data(data);\n                    }\n                });\n            }\n        }));\n        _addLabelAnnotation(this.form);\n        this.form.render();\n    }\n});\n\n/** Tool form wrapper for the workflow editor. */\nvar Tool = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new _toolFormBase2.default(_utils2.default.merge(options, {\n            text_enable: \"Set in Advance\",\n            text_disable: \"Set at Runtime\",\n            narrow: true,\n            initial_errors: true,\n            cls: \"ui-portlet-narrow\",\n            initialmodel: function initialmodel(process, form) {\n                self._customize(form);\n                process.resolve();\n            },\n            buildmodel: function buildmodel(process, form) {\n                form.model.get(\"postchange\")(process, form);\n            },\n            postchange: function postchange(process, form) {\n                var options = form.model.attributes;\n                var current_state = {\n                    tool_id: options.id,\n                    tool_version: options.version,\n                    type: \"tool\",\n                    inputs: $.extend(true, {}, form.data.create())\n                };\n                Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Sending current state.\", current_state);\n                _utils2.default.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/workflows/build_module\",\n                    data: current_state,\n                    success: function success(data) {\n                        form.model.set(data.config_form);\n                        self._customize(form);\n                        form.update(data.config_form);\n                        form.errors(data.config_form);\n                        // This hasn't modified the workflow, just returned\n                        // module information for the tool to update the workflow\n                        // state stored on the client with. User needs to save\n                        // for this to take effect.\n                        node.update_field_data(data);\n                        Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Received new model.\", data);\n                        process.resolve();\n                    },\n                    error: function error(response) {\n                        Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Refresh request failed.\", response);\n                        process.reject();\n                    }\n                });\n            }\n        }));\n    },\n\n    _customize: function _customize(form) {\n        var options = form.model.attributes;\n        _utils2.default.deepeach(options.inputs, function (input) {\n            if (input.type) {\n                if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                    input.type = \"hidden\";\n                    input.info = \"Data input '\" + input.name + \"' (\" + _utils2.default.textify(input.extensions) + \")\";\n                    input.value = { __class__: \"RuntimeValue\" };\n                } else if (!input.fixed) {\n                    input.collapsible_value = {\n                        __class__: \"RuntimeValue\"\n                    };\n                    input.is_workflow = input.options && input.options.length === 0 || [\"integer\", \"float\"].indexOf(input.type) != -1;\n                }\n            }\n        });\n        _utils2.default.deepeach(options.inputs, function (input) {\n            if (input.type === \"conditional\") {\n                input.test_param.collapsible_value = undefined;\n            }\n        });\n        _addSections(form);\n        _addLabelAnnotation(form);\n    }\n});\n\n/** Augments the module form definition by adding label and annotation fields */\nfunction _addLabelAnnotation(form) {\n    var options = form.model.attributes;\n    var workflow = options.workflow;\n    var node = options.node;\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__annotation\",\n        label: \"Annotation\",\n        fixed: true,\n        value: node.annotation,\n        area: true,\n        help: \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n    });\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__label\",\n        label: \"Label\",\n        value: node.label,\n        help: (0, _localization2.default)(\"Add a step label.\"),\n        fixed: true,\n        onchange: function onchange(new_label) {\n            var duplicate = false;\n            for (var i in workflow.nodes) {\n                var n = workflow.nodes[i];\n                if (n.label && n.label == new_label && n.id != node.id) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            var input_id = form.data.match(\"__label\");\n            var input_element = form.element_list[input_id];\n            input_element.model.set(\"error_text\", duplicate && \"Duplicate label. Please fix this before saving the workflow.\");\n            form.trigger(\"change\");\n        }\n    });\n}\n\n/** Visit input nodes and enrich by name/value pairs from server data */\nfunction _visit(head, head_list, output_id, options) {\n    var post_job_actions = options.node.post_job_actions;\n    head_list = head_list || [];\n    head_list.push(head);\n    for (var i in head.inputs) {\n        var input = head.inputs[i];\n        var action = input.action;\n        if (action) {\n            input.name = \"pja__\" + output_id + \"__\" + input.action;\n            if (input.pja_arg) {\n                input.name += \"__\" + input.pja_arg;\n            }\n            if (input.payload) {\n                for (var p_id in input.payload) {\n                    input.payload[input.name + \"__\" + p_id] = input.payload[p_id];\n                    delete input.payload[p_id];\n                }\n            }\n            var d = post_job_actions[input.action + output_id];\n            if (d) {\n                for (var j in head_list) {\n                    head_list[j].expanded = true;\n                }\n                if (input.pja_arg) {\n                    input.value = d.action_arguments && d.action_arguments[input.pja_arg] || input.value;\n                } else {\n                    input.value = \"true\";\n                }\n            }\n        }\n        if (input.inputs) {\n            _visit(input, head_list.slice(0), output_id, options);\n        }\n    }\n}\n\n/** Builds sub section with step actions/annotation */\nfunction _makeSection(output_id, options) {\n    var extensions = [];\n    var input_terminal_names = [];\n    var datatypes = options.datatypes;\n    var node = options.node;\n    var workflow = options.workflow;\n\n    for (var key in datatypes) {\n        extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n    }\n    for (key in node.input_terminals) {\n        input_terminal_names.push(node.input_terminals[key].name);\n    }\n    extensions.sort(function (a, b) {\n        return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n    });\n    extensions.unshift({\n        0: \"Sequences\",\n        1: \"Sequences\"\n    });\n    extensions.unshift({\n        0: \"Roadmaps\",\n        1: \"Roadmaps\"\n    });\n    extensions.unshift({\n        0: \"Leave unchanged\",\n        1: \"__empty__\"\n    });\n    var output;\n    var input_config = {\n        title: \"Configure Output: '\" + output_id + \"'\",\n        type: \"section\",\n        flat: true,\n        inputs: [{\n            label: \"Label\",\n            type: \"text\",\n            value: (output = node.getWorkflowOutput(output_id)) && output.label || \"\",\n            help: \"This will provide a short name to describe the output - this must be unique across workflows.\",\n            onchange: function onchange(new_value) {\n                workflow.attemptUpdateOutputLabel(node, output_id, new_value);\n            }\n        }, {\n            action: \"RenameDatasetAction\",\n            pja_arg: \"newname\",\n            label: \"Rename dataset\",\n            type: \"text\",\n            value: \"\",\n            ignore: \"\",\n            help: \"This action will rename the output dataset. Click <a href=\\\"https://galaxyproject.org/learn/advanced-workflow/variables/\\\">here</a> for more information. Valid inputs are: <strong>\" + input_terminal_names.join(\", \") + \"</strong>.\"\n        }, {\n            action: \"ChangeDatatypeAction\",\n            pja_arg: \"newtype\",\n            label: \"Change datatype\",\n            type: \"select\",\n            ignore: \"__empty__\",\n            value: \"__empty__\",\n            options: extensions,\n            help: \"This action will change the datatype of the output to the indicated value.\"\n        }, {\n            action: \"TagDatasetAction\",\n            pja_arg: \"tags\",\n            label: \"Add Tags\",\n            type: \"text\",\n            value: \"\",\n            ignore: \"\",\n            help: \"This action will set tags for the dataset.\"\n        }, {\n            action: \"RemoveTagDatasetAction\",\n            pja_arg: \"tags\",\n            label: \"Remove Tags\",\n            type: \"text\",\n            value: \"\",\n            ignore: \"\",\n            help: \"This action will remove tags for the dataset.\"\n        }, {\n            title: (0, _localization2.default)(\"Assign columns\"),\n            type: \"section\",\n            flat: true,\n            inputs: [{\n                action: \"ColumnSetAction\",\n                pja_arg: \"chromCol\",\n                label: \"Chrom column\",\n                type: \"integer\",\n                value: \"\",\n                ignore: \"\"\n            }, {\n                action: \"ColumnSetAction\",\n                pja_arg: \"startCol\",\n                label: \"Start column\",\n                type: \"integer\",\n                value: \"\",\n                ignore: \"\"\n            }, {\n                action: \"ColumnSetAction\",\n                pja_arg: \"endCol\",\n                label: \"End column\",\n                type: \"integer\",\n                value: \"\",\n                ignore: \"\"\n            }, {\n                action: \"ColumnSetAction\",\n                pja_arg: \"strandCol\",\n                label: \"Strand column\",\n                type: \"integer\",\n                value: \"\",\n                ignore: \"\"\n            }, {\n                action: \"ColumnSetAction\",\n                pja_arg: \"nameCol\",\n                label: \"Name column\",\n                type: \"integer\",\n                value: \"\",\n                ignore: \"\"\n            }],\n            help: \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n        }]\n    };\n    _visit(input_config, [], output_id, options);\n    return input_config;\n}\n\n/** Builds all sub sections */\nfunction _addSections(form) {\n    var options = form.model.attributes;\n    var inputs = options.inputs;\n    var node = options.node;\n    var post_job_actions = node.post_job_actions;\n    var output_id = node.output_terminals && Object.keys(node.output_terminals)[0];\n\n    if (output_id) {\n        inputs.push({\n            name: \"pja__\" + output_id + \"__EmailAction\",\n            label: \"Email notification\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[\"EmailAction\" + output_id])),\n            ignore: \"false\",\n            help: (0, _localization2.default)(\"An email notification will be sent when the job has completed.\"),\n            payload: {\n                host: window.location.host\n            }\n        });\n        inputs.push({\n            name: \"pja__\" + output_id + \"__DeleteIntermediatesAction\",\n            label: \"Output cleanup\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[\"DeleteIntermediatesAction\" + output_id])),\n            ignore: \"false\",\n            help: \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n        });\n        for (var i in node.output_terminals) {\n            inputs.push(_makeSection(i, options));\n        }\n    }\n}\n\nexports.default = {\n    Default: Default,\n    Tool: Tool\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///293\n");

/***/ }),

/***/ 294:
/*!****************************************!*\
  !*** ./galaxy/scripts/viz/circster.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _underscore = __webpack_require__(/*! libs/underscore */ 1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _d = __webpack_require__(/*! libs/d3 */ 295);\n\nvar d3 = _interopRequireWildcard(_d);\n\nvar _visualization = __webpack_require__(/*! viz/visualization */ 27);\n\nvar _visualization2 = _interopRequireDefault(_visualization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _config = __webpack_require__(/*! utils/config */ 37);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _iconButton = __webpack_require__(/*! mvc/ui/icon-button */ 41);\n\nvar _iconButton2 = _interopRequireDefault(_iconButton);\n\n__webpack_require__(/*! libs/farbtastic */ 40);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Utility class for working with SVG.\n */\n\nvar SVGUtils = Backbone.Model.extend({\n    /**\n     * Returns true if element is visible.\n     */\n    is_visible: function is_visible(svg_elt, svg) {\n        var eltBRect = svg_elt.getBoundingClientRect();\n        var svgBRect = $(\"svg\")[0].getBoundingClientRect();\n\n        if (\n        // To the left of screen?\n        eltBRect.right < 0 ||\n        // To the right of screen?\n        eltBRect.left > svgBRect.right ||\n        // Above screen?\n        eltBRect.bottom < 0 ||\n        // Below screen?\n        eltBRect.top > svgBRect.bottom) {\n            return false;\n        }\n        return true;\n    }\n});\n\n/**\n * Mixin for using ticks.\n */\nvar UsesTicks = {\n    drawTicks: function drawTicks(parent_elt, data, dataHandler, textTransform, horizontal) {\n        // Set up group elements for chroms and for each tick.\n        var ticks = parent_elt.append(\"g\").selectAll(\"g\").data(data).enter().append(\"g\").selectAll(\"g\").data(dataHandler).enter().append(\"g\").attr(\"class\", \"tick\").attr(\"transform\", function (d) {\n            return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")translate(\" + d.radius + \",0)\";\n        });\n\n        // Add line + text for ticks.\n        var tick_coords = [];\n\n        var text_coords = [];\n\n        var text_anchor = function text_anchor(d) {\n            return d.angle > Math.PI ? \"end\" : null;\n        };\n\n        if (horizontal) {\n            tick_coords = [0, 0, 0, -4];\n            text_coords = [4, 0, \"\", \".35em\"];\n            text_anchor = null;\n        } else {\n            tick_coords = [1, 0, 4, 0];\n            text_coords = [0, 4, \".35em\", \"\"];\n        }\n\n        ticks.append(\"line\").attr(\"x1\", tick_coords[0]).attr(\"y1\", tick_coords[1]).attr(\"x2\", tick_coords[2]).attr(\"y1\", tick_coords[3]).style(\"stroke\", \"#000\");\n\n        return ticks.append(\"text\").attr(\"x\", text_coords[0]).attr(\"y\", text_coords[1]).attr(\"dx\", text_coords[2]).attr(\"dy\", text_coords[3]).attr(\"text-anchor\", text_anchor).attr(\"transform\", textTransform).text(function (d) {\n            return d.label;\n        });\n    },\n\n    /**\n     * Format number for display at a tick.\n     */\n    formatNum: function formatNum(num, sigDigits) {\n        // Use default of 2 sig. digits.\n        if (sigDigits === undefined) sigDigits = 2;\n\n        // Verify input number\n        if (num === null) return null;\n\n        // Calculate return value\n        var rval = null;\n        if (Math.abs(num) < 1) {\n            rval = num.toPrecision(sigDigits);\n        } else {\n            // Use round to turn string from toPrecision() back into a number.\n            var roundedNum = Math.round(num.toPrecision(sigDigits));\n\n            // Use abbreviations.\n            num = Math.abs(num);\n            if (num < 1000) {\n                rval = roundedNum;\n            } else if (num < 1000000) {\n                // Use K.\n                rval = Math.round((roundedNum / 1000).toPrecision(3)).toFixed(0) + \"K\";\n            } else if (num < 1000000000) {\n                // Use M.\n                rval = Math.round((roundedNum / 1000000).toPrecision(3)).toFixed(0) + \"M\";\n            }\n        }\n\n        return rval;\n    }\n};\n\n/**\n * A label track.\n */\nvar CircsterLabelTrack = Backbone.Model.extend({});\n\n/**\n * Renders a full circster visualization.\n */\nvar CircsterView = Backbone.View.extend({\n    className: \"circster\",\n\n    initialize: function initialize(options) {\n        this.genome = options.genome;\n        this.label_arc_height = 50;\n        this.scale = 1;\n        this.circular_views = null;\n        this.chords_views = null;\n\n        // When tracks added to/removed from model, update view.\n        this.model.get(\"drawables\").on(\"add\", this.add_track, this);\n        this.model.get(\"drawables\").on(\"remove\", this.remove_track, this);\n\n        // When config settings change, update view.\n        var vis_config = this.model.get(\"config\");\n        vis_config.get(\"arc_dataset_height\").on(\"change:value\", this.update_track_bounds, this);\n        vis_config.get(\"track_gap\").on(\"change:value\", this.update_track_bounds, this);\n    },\n\n    // HACKs: using track_type for circular/chord distinction in the functions below for now.\n\n    /**\n     * Returns tracks to be rendered using circular view.\n     */\n    get_circular_tracks: function get_circular_tracks() {\n        return this.model.get(\"drawables\").filter(function (track) {\n            return track.get(\"track_type\") !== \"DiagonalHeatmapTrack\";\n        });\n    },\n\n    /**\n     * Returns tracks to be rendered using chords view.\n     */\n    get_chord_tracks: function get_chord_tracks() {\n        return this.model.get(\"drawables\").filter(function (track) {\n            return track.get(\"track_type\") === \"DiagonalHeatmapTrack\";\n        });\n    },\n\n    /**\n     * Returns a list of circular tracks' radius bounds.\n     */\n    get_tracks_bounds: function get_tracks_bounds() {\n        var circular_tracks = this.get_circular_tracks();\n\n        var dataset_arc_height = this.model.get(\"config\").get_value(\"arc_dataset_height\");\n\n        var track_gap = this.model.get(\"config\").get_value(\"track_gap\");\n\n        var // Subtract 20 to make sure chrom labels are on screen.\n        min_dimension = Math.min(this.$el.width(), this.$el.height()) - 20;\n\n        var // Compute radius start based on model, will be centered\n        // and fit entirely inside element by default.\n        radius_start = min_dimension / 2 - circular_tracks.length * (dataset_arc_height + track_gap) +\n        // Add track_gap back in because no gap is needed for last track.\n        track_gap - this.label_arc_height;\n\n        var // Compute range of track starting radii.\n        tracks_start_radii = d3.range(radius_start, min_dimension / 2, dataset_arc_height + track_gap);\n\n        // Map from track start to bounds.\n        var self = this;\n        return _.map(tracks_start_radii, function (radius) {\n            return [radius, radius + dataset_arc_height];\n        });\n    },\n\n    /**\n     * Renders circular tracks, chord tracks, and label tracks.\n     */\n    render: function render() {\n        var self = this;\n        var width = self.$el.width();\n        var height = self.$el.height();\n        var circular_tracks = this.get_circular_tracks();\n        var chords_tracks = this.get_chord_tracks();\n        var total_gap = self.model.get(\"config\").get_value(\"total_gap\");\n        var tracks_bounds = this.get_tracks_bounds();\n\n        var // Set up SVG element.\n        svg = d3.select(self.$el[0]).append(\"svg\").attr(\"width\", width).attr(\"height\", height).attr(\"pointer-events\", \"all\")\n        // Set up zooming, dragging.\n        .append(\"svg:g\").call(d3.behavior.zoom().on(\"zoom\", function () {\n            // Do zoom, drag.\n            var scale = d3.event.scale;\n            svg.attr(\"transform\", \"translate(\" + d3.event.translate + \") scale(\" + scale + \")\");\n\n            // Propagate scale changes to views.\n            if (self.scale !== scale) {\n                // Use timeout to wait for zooming/dragging to stop before rendering more detail.\n                if (self.zoom_drag_timeout) {\n                    clearTimeout(self.zoom_drag_timeout);\n                }\n                self.zoom_drag_timeout = setTimeout(function () {\n                    // Render more detail in tracks' visible elements.\n                    // FIXME: do not do this right now; it is not fully implemented--e.g. data bounds\n                    // are not updated when new data is fetched--and fetching more detailed quantitative\n                    // data is not that useful.\n                    /*\n                    _.each(self.circular_views, function(view) {\n                    view.update_scale(scale);\n                    });\n                    */\n                }, 400);\n            }\n        })).attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\").append(\"svg:g\").attr(\"class\", \"tracks\");\n\n        // -- Render circular tracks. --\n\n        // Create a view for each track in the visualization and render.\n        this.circular_views = circular_tracks.map(function (track, index) {\n            var view = new CircsterBigWigTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[index],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render chords tracks. --\n\n        this.chords_views = chords_tracks.map(function (track) {\n            var view = new CircsterChromInteractionsTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[0],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render label track. --\n\n        // Track bounds are:\n        // (a) outer radius of last circular track;\n        // (b)\n        var outermost_radius = this.circular_views[this.circular_views.length - 1].radius_bounds[1];\n\n        var track_bounds = [outermost_radius, outermost_radius + this.label_arc_height];\n\n        this.label_track_view = new CircsterChromLabelTrackView({\n            el: svg.append(\"g\")[0],\n            track: new CircsterLabelTrack(),\n            radius_bounds: track_bounds,\n            genome: self.genome,\n            total_gap: total_gap\n        });\n\n        this.label_track_view.render();\n    },\n\n    /**\n     * Render a single track on the outside of the current visualization.\n     */\n    add_track: function add_track(new_track) {\n        var total_gap = this.model.get(\"config\").get_value(\"total_gap\");\n\n        if (new_track.get(\"track_type\") === \"DiagonalHeatmapTrack\") {\n            // Added chords track.\n            var innermost_radius_bounds = this.circular_views[0].radius_bounds;\n\n            var new_view = new CircsterChromInteractionsTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: innermost_radius_bounds,\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            new_view.render();\n            this.chords_views.push(new_view);\n        } else {\n            // Added circular track.\n\n            // Recompute and update circular track bounds.\n            var new_track_bounds = this.get_tracks_bounds();\n            _.each(this.circular_views, function (track_view, i) {\n                track_view.update_radius_bounds(new_track_bounds[i]);\n            });\n\n            // Update chords tracks.\n            _.each(this.chords_views, function (track_view) {\n                track_view.update_radius_bounds(new_track_bounds[0]);\n            });\n\n            // Render new track.\n            var track_index = this.circular_views.length;\n\n            var track_view = new CircsterBigWigTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: new_track_bounds[track_index],\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            track_view.render();\n            this.circular_views.push(track_view);\n\n            // Update label track.\n            /*\n            FIXME: should never have to update label track because vis always expands to fit area\n            within label track.\n            var track_bounds = new_track_bounds[ new_track_bounds.length-1 ];\n            track_bounds[1] = track_bounds[0];\n            this.label_track_view.update_radius_bounds(track_bounds);\n            */\n        }\n    },\n\n    /**\n     * Remove a track from the view.\n     */\n    remove_track: function remove_track(track, tracks, options) {\n        // -- Remove track from view. --\n        var track_view = this.circular_views[options.index];\n        this.circular_views.splice(options.index, 1);\n        track_view.$el.remove();\n\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function (track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n    },\n\n    update_track_bounds: function update_track_bounds() {\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function (track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n\n        // Update chords tracks.\n        _.each(this.chords_views, function (track_view) {\n            track_view.update_radius_bounds(new_track_bounds[0]);\n        });\n    }\n});\n\n/**\n * Renders a track in a Circster visualization.\n */\nvar CircsterTrackView = Backbone.View.extend({\n    tagName: \"g\",\n\n    /* ----------------------- Public Methods ------------------------- */\n\n    initialize: function initialize(options) {\n        this.bg_stroke = \"#ddd\";\n        // Fill color when loading data.\n        this.loading_bg_fill = \"#ffc\";\n        // Fill color when data has been loaded.\n        this.bg_fill = \"#ddd\";\n        this.total_gap = options.total_gap;\n        this.track = options.track;\n        this.radius_bounds = options.radius_bounds;\n        this.genome = options.genome;\n        this.chroms_layout = this._chroms_layout();\n        this.data_bounds = [];\n        this.scale = 1;\n        this.parent_elt = d3.select(this.$el[0]);\n    },\n\n    /**\n     * Get fill color from config.\n     */\n    get_fill_color: function get_fill_color() {\n        var color = this.track.get(\"config\").get_value(\"block_color\");\n        if (!color) {\n            color = this.track.get(\"config\").get_value(\"color\");\n        }\n        return color;\n    },\n\n    /**\n     * Render track's data by adding SVG elements to parent.\n     */\n    render: function render() {\n        // -- Create track group element. --\n        var track_parent_elt = this.parent_elt;\n\n        // -- Render background arcs. --\n        var genome_arcs = this.chroms_layout;\n\n        var arc_gen = d3.svg.arc().innerRadius(this.radius_bounds[0]).outerRadius(this.radius_bounds[1]);\n\n        var // Attach data to group element.\n        chroms_elts = track_parent_elt.selectAll(\"g\").data(genome_arcs).enter().append(\"svg:g\");\n\n        var // Draw chrom arcs/paths.\n        chroms_paths = chroms_elts.append(\"path\").attr(\"d\", arc_gen).attr(\"class\", \"chrom-background\").style(\"stroke\", this.bg_stroke).style(\"fill\", this.loading_bg_fill);\n\n        // Append titles to paths.\n        chroms_paths.append(\"title\").text(function (d) {\n            return d.data.chrom;\n        });\n\n        // -- Render track data and, when track data is rendered, apply preferences and update chrom_elts fill. --\n\n        var self = this;\n\n        var data_manager = self.track.get(\"data_manager\");\n\n        var // If track has a data manager, get deferred that resolves when data is ready.\n        data_ready_deferred = data_manager ? data_manager.data_is_ready() : true;\n\n        // When data is ready, render track.\n        $.when(data_ready_deferred).then(function () {\n            $.when(self._render_data(track_parent_elt)).then(function () {\n                chroms_paths.style(\"fill\", self.bg_fill);\n\n                // Render labels after data is available so that data attributes are available.\n                self.render_labels();\n            });\n        });\n    },\n\n    /**\n     * Render track labels.\n     */\n    render_labels: function render_labels() {},\n\n    /**\n     * Update radius bounds.\n     */\n    update_radius_bounds: function update_radius_bounds(radius_bounds) {\n        // Update bounds.\n        this.radius_bounds = radius_bounds;\n\n        // -- Update background arcs. --\n        var new_d = d3.svg.arc().innerRadius(this.radius_bounds[0]).outerRadius(this.radius_bounds[1]);\n\n        this.parent_elt.selectAll(\"g>path.chrom-background\").transition().duration(1000).attr(\"d\", new_d);\n\n        this._transition_chrom_data();\n\n        this._transition_labels();\n    },\n\n    /**\n     * Update view scale. This fetches more data if scale is increased.\n     */\n    update_scale: function update_scale(new_scale) {\n        // -- Update scale and return if new scale is less than old scale. --\n\n        var old_scale = this.scale;\n        this.scale = new_scale;\n        if (new_scale <= old_scale) {\n            return;\n        }\n\n        // -- Scale increased, so render visible data with more detail. --\n\n        var self = this;\n\n        var utils = new SVGUtils();\n\n        // Select all chrom data and filter to operate on those that are visible.\n        this.parent_elt.selectAll(\"path.chrom-data\").filter(function (d, i) {\n            return utils.is_visible(this);\n        }).each(function (d, i) {\n            // -- Now operating on a single path element representing chromosome data. --\n\n            var path_elt = d3.select(this);\n\n            var chrom = path_elt.attr(\"chrom\");\n            var chrom_region = self.genome.get_chrom_region(chrom);\n            var data_manager = self.track.get(\"data_manager\");\n            var data_deferred;\n\n            // If can't get more detailed data, return.\n            if (!data_manager.can_get_more_detailed_data(chrom_region)) {\n                return;\n            }\n\n            // -- Get more detailed data. --\n            data_deferred = self.track.get(\"data_manager\").get_more_detailed_data(chrom_region, \"Coverage\", 0, new_scale);\n\n            // When more data is available, use new data to redraw path.\n            $.when(data_deferred).then(function (data) {\n                // Remove current data path.\n                path_elt.remove();\n\n                // Update data bounds with new data.\n                self._update_data_bounds();\n\n                // Find chromosome arc to draw data on.\n                var chrom_arc = _.find(self.chroms_layout, function (layout) {\n                    return layout.data.chrom === chrom;\n                });\n\n                // Add new data path and apply preferences.\n                var color = self.get_fill_color();\n                self._render_chrom_data(self.parent_elt, chrom_arc, data).style(\"stroke\", color).style(\"fill\", color);\n            });\n        });\n\n        return self;\n    },\n\n    /* ----------------------- Internal Methods ------------------------- */\n\n    /**\n     * Transitions chrom data to new values (e.g new radius or data bounds).\n     */\n    _transition_chrom_data: function _transition_chrom_data() {\n        var track = this.track;\n        var chrom_arcs = this.chroms_layout;\n        var chrom_data_paths = this.parent_elt.selectAll(\"g>path.chrom-data\");\n        var num_paths = chrom_data_paths[0].length;\n\n        if (num_paths > 0) {\n            var self = this;\n            $.when(track.get(\"data_manager\").get_genome_wide_data(this.genome)).then(function (genome_wide_data) {\n                // Map chrom data to path data, filtering out null values.\n                var path_data = _.reject(_.map(genome_wide_data, function (chrom_data, i) {\n                    var rval = null;\n\n                    var path_fn = self._get_path_function(chrom_arcs[i], chrom_data);\n\n                    if (path_fn) {\n                        rval = path_fn(chrom_data.data);\n                    }\n                    return rval;\n                }), function (p_data) {\n                    return p_data === null;\n                });\n\n                // Transition each path for data and color.\n                var color = track.get(\"config\").get_value(\"color\");\n                chrom_data_paths.each(function (path, index) {\n                    d3.select(this).transition().duration(1000).style(\"stroke\", color).style(\"fill\", color).attr(\"d\", path_data[index]);\n                });\n            });\n        }\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function _transition_labels() {},\n\n    /**\n     * Update data bounds. If there are new_bounds, use them; otherwise use\n     * default data bounds.\n     */\n    _update_data_bounds: function _update_data_bounds(new_bounds) {\n        var old_bounds = this.data_bounds;\n        this.data_bounds = new_bounds || this.get_data_bounds(this.track.get(\"data_manager\").get_genome_wide_data(this.genome));\n        this._transition_chrom_data();\n    },\n\n    /**\n     * Render data as elements attached to svg.\n     */\n    _render_data: function _render_data(svg) {\n        var self = this;\n        var chrom_arcs = this.chroms_layout;\n        var track = this.track;\n        var rendered_deferred = $.Deferred();\n\n        // When genome-wide data is available, render data.\n        $.when(track.get(\"data_manager\").get_genome_wide_data(this.genome)).then(function (genome_wide_data) {\n            // Set bounds.\n            self.data_bounds = self.get_data_bounds(genome_wide_data);\n\n            // Set min, max value in config so that they can be adjusted. Make this silent\n            // because these attributes are watched for changes and the viz is updated\n            // accordingly (set up in initialize). Because we are setting up, we don't want\n            // the watch to trigger events here.\n            track.get(\"config\").set_value(\"min_value\", self.data_bounds[0], {\n                silent: true\n            });\n            track.get(\"config\").set_value(\"max_value\", self.data_bounds[1], {\n                silent: true\n            });\n\n            // Merge chroms layout with data.\n            var layout_and_data = _.zip(chrom_arcs, genome_wide_data);\n\n            // Render each chromosome's data.\n            _.each(layout_and_data, function (chrom_info) {\n                var chrom_arc = chrom_info[0];\n                var data = chrom_info[1];\n                return self._render_chrom_data(svg, chrom_arc, data);\n            });\n\n            // Apply prefs to all track data.\n            var color = self.get_fill_color();\n            self.parent_elt.selectAll(\"path.chrom-data\").style(\"stroke\", color).style(\"fill\", color);\n\n            rendered_deferred.resolve(svg);\n        });\n\n        return rendered_deferred;\n    },\n\n    /**\n     * Render a chromosome data and attach elements to svg.\n     */\n    _render_chrom_data: function _render_chrom_data(svg, chrom_arc, data) {},\n\n    /**\n     * Returns data for creating a path for the given data using chrom_arc and data bounds.\n     */\n    _get_path_function: function _get_path_function(chrom_arc, chrom_data) {},\n\n    /**\n     * Returns arc layouts for genome's chromosomes/contigs. Arcs are arranged in a circle\n     * separated by gaps.\n     */\n    _chroms_layout: function _chroms_layout() {\n        // Setup chroms layout using pie.\n        var chroms_info = this.genome.get_chroms_info();\n\n        var pie_layout = d3.layout.pie().value(function (d) {\n            return d.len;\n        }).sort(null);\n\n        var init_arcs = pie_layout(chroms_info);\n        var gap_per_chrom = 2 * Math.PI * this.total_gap / chroms_info.length;\n\n        var chrom_arcs = _.map(init_arcs, function (arc, index) {\n            // For short chroms, endAngle === startAngle.\n            var new_endAngle = arc.endAngle - gap_per_chrom;\n            arc.endAngle = new_endAngle > arc.startAngle ? new_endAngle : arc.startAngle;\n            return arc;\n        });\n\n        return chrom_arcs;\n    }\n});\n\n/**\n * Render chromosome labels.\n */\nvar CircsterChromLabelTrackView = CircsterTrackView.extend({\n    initialize: function initialize(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n        // Use a single arc for rendering data.\n        this.innerRadius = this.radius_bounds[0];\n        this.radius_bounds[0] = this.radius_bounds[1];\n        this.bg_stroke = \"#fff\";\n        this.bg_fill = \"#fff\";\n\n        // Minimum arc distance for labels to be applied.\n        this.min_arc_len = 0.05;\n    },\n\n    /**\n     * Render labels.\n     */\n    _render_data: function _render_data(svg) {\n        // -- Add chromosome label where it will fit; an alternative labeling mechanism\n        // would be nice for small chromosomes. --\n        var self = this;\n\n        var chrom_arcs = svg.selectAll(\"g\");\n\n        chrom_arcs.selectAll(\"path\").attr(\"id\", function (d) {\n            return \"label-\" + d.data.chrom;\n        });\n\n        chrom_arcs.append(\"svg:text\").filter(function (d) {\n            return d.endAngle - d.startAngle > self.min_arc_len;\n        }).attr(\"text-anchor\", \"middle\").append(\"svg:textPath\").attr(\"class\", \"chrom-label\").attr(\"xlink:href\", function (d) {\n            return \"#label-\" + d.data.chrom;\n        }).attr(\"startOffset\", \"25%\").text(function (d) {\n            return d.data.chrom;\n        });\n\n        // -- Add ticks to denote chromosome length. --\n\n        /** Returns an array of tick angles and labels, given a chrom arc. */\n        var chromArcTicks = function chromArcTicks(d) {\n            var k = (d.endAngle - d.startAngle) / d.value;\n\n            var ticks = d3.range(0, d.value, 25000000).map(function (v, i) {\n                return {\n                    radius: self.innerRadius,\n                    angle: v * k + d.startAngle,\n                    label: i === 0 ? 0 : i % 3 ? null : self.formatNum(v)\n                };\n            });\n\n            // If there are fewer that 4 ticks, label last tick so that at least one non-zero tick is labeled.\n            if (ticks.length < 4) {\n                ticks[ticks.length - 1].label = self.formatNum(Math.round((ticks[ticks.length - 1].angle - d.startAngle) / k));\n            }\n\n            return ticks;\n        };\n\n        /** Rotate and move text as needed. */\n        var textTransform = function textTransform(d) {\n            return d.angle > Math.PI ? \"rotate(180)translate(-16)\" : null;\n        };\n\n        // Filter chroms for only those large enough for display.\n        var visibleChroms = _.filter(this.chroms_layout, function (c) {\n            return c.endAngle - c.startAngle > self.min_arc_len;\n        });\n\n        this.drawTicks(this.parent_elt, visibleChroms, chromArcTicks, textTransform);\n    }\n});\n_.extend(CircsterChromLabelTrackView.prototype, UsesTicks);\n\n/**\n * View for quantitative track in Circster.\n */\nvar CircsterQuantitativeTrackView = CircsterTrackView.extend({\n    initialize: function initialize(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n\n        // When config settings change, update view.\n        var track_config = this.track.get(\"config\");\n        track_config.get(\"min_value\").on(\"change:value\", this._update_min_max, this);\n        track_config.get(\"max_value\").on(\"change:value\", this._update_min_max, this);\n        track_config.get(\"color\").on(\"change:value\", this._transition_chrom_data, this);\n    },\n\n    /**\n     * Update track when min and/or max are changed.\n     */\n    _update_min_max: function _update_min_max() {\n        var track_config = this.track.get(\"config\");\n\n        var new_bounds = [track_config.get_value(\"min_value\"), track_config.get_value(\"max_value\")];\n\n        this._update_data_bounds(new_bounds);\n\n        // FIXME: this works to update tick/text bounds, but there's probably a better way to do this\n        // by updating the data itself.\n        this.parent_elt.selectAll(\".min_max\").text(function (d, i) {\n            return new_bounds[i];\n        });\n    },\n\n    /**\n     * Returns quantile for an array of numbers.\n     */\n    _quantile: function _quantile(numbers, quantile) {\n        numbers.sort(d3.ascending);\n        return d3.quantile(numbers, quantile);\n    },\n\n    /**\n     * Renders quantitative data with the form [x, value] and assumes data is equally spaced across\n     * chromosome. Attachs a dict with track and chrom name information to DOM element.\n     */\n    _render_chrom_data: function _render_chrom_data(svg, chrom_arc, chrom_data) {\n        var path_data = this._get_path_function(chrom_arc, chrom_data);\n\n        if (!path_data) {\n            return null;\n        }\n\n        // There is path data, so render as path.\n        var parent = svg.datum(chrom_data.data);\n\n        var path = parent.append(\"path\").attr(\"class\", \"chrom-data\").attr(\"chrom\", chrom_arc.data.chrom).attr(\"d\", path_data);\n\n        return path;\n    },\n\n    /**\n     * Returns function for creating a path across the chrom arc.\n     */\n    _get_path_function: function _get_path_function(chrom_arc, chrom_data) {\n        // If no chrom data, return null.\n        if (typeof chrom_data === \"string\" || !chrom_data.data || chrom_data.data.length === 0) {\n            return null;\n        }\n\n        // Radius scaler.\n        var radius = d3.scale.linear().domain(this.data_bounds).range(this.radius_bounds).clamp(true);\n\n        // Scaler for placing data points across arc.\n        var angle = d3.scale.linear().domain([0, chrom_data.data.length]).range([chrom_arc.startAngle, chrom_arc.endAngle]);\n\n        // Use line generator to create area.\n        var line = d3.svg.line.radial().interpolate(\"linear\").radius(function (d) {\n            return radius(d[1]);\n        }).angle(function (d, i) {\n            return angle(i);\n        });\n\n        return d3.svg.area.radial().interpolate(line.interpolate()).innerRadius(radius(0)).outerRadius(line.radius()).angle(line.angle());\n    },\n\n    /**\n     * Render track min, max using ticks.\n     */\n    render_labels: function render_labels() {\n        var self = this;\n\n        var // Keep counter of visible chroms.\n        textTransform = function textTransform() {\n            return \"rotate(90)\";\n        };\n\n        // FIXME:\n        // (1) using min_max class below is needed for _update_min_max, which could be improved.\n        // (2) showing config on tick click should be replaced by proper track config icon.\n\n        // Draw min, max on first chrom only.\n        var ticks = this.drawTicks(this.parent_elt, [this.chroms_layout[0]], this._data_bounds_ticks_fn(), textTransform, true).classed(\"min_max\", true);\n\n        // Show config when ticks are clicked on.\n        _.each(ticks, function (tick) {\n            $(tick).click(function () {\n                var view = new _config2.default.ConfigSettingCollectionView({\n                    collection: self.track.get(\"config\")\n                });\n                view.render_in_modal(\"Configure Track\");\n            });\n        });\n\n        /*\n        // Filter for visible chroms, then for every third chrom so that labels attached to only every\n        // third chrom.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; });\n        this.drawTicks(this.parent_elt, labeledChroms, this._data_bounds_ticks_fn(), textTransform, true);\n        */\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function _transition_labels() {\n        // FIXME: (a) pull out function for getting labeled chroms? and (b) function used in transition below\n        // is copied from UseTicks mixin, so pull out and make generally available.\n\n        // If there are no data bounds, nothing to transition.\n        if (this.data_bounds.length === 0) {\n            return;\n        }\n\n        // Transition labels to new radius bounds.\n        var self = this;\n\n        var visibleChroms = _.filter(this.chroms_layout, function (c) {\n            return c.endAngle - c.startAngle > 0.08;\n        });\n\n        var labeledChroms = _.filter(visibleChroms, function (c, i) {\n            return i % 3 === 0;\n        });\n\n        var new_data = _.flatten(_.map(labeledChroms, function (c) {\n            return self._data_bounds_ticks_fn()(c);\n        }));\n\n        this.parent_elt.selectAll(\"g.tick\").data(new_data).transition().attr(\"transform\", function (d) {\n            return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")translate(\" + d.radius + \",0)\";\n        });\n    },\n\n    /**\n     * Get function for locating data bounds ticks.\n     */\n    _data_bounds_ticks_fn: function _data_bounds_ticks_fn() {\n        // Closure vars.\n        var self = this;\n        visibleChroms = 0;\n\n        // Return function for locating ticks based on chrom arc data.\n        return function (d // Set up data to display min, max ticks.\n        ) {\n            return [{\n                radius: self.radius_bounds[0],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[0])\n            }, {\n                radius: self.radius_bounds[1],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[1])\n            }];\n        };\n    },\n\n    /**\n     * Returns an array with two values denoting the minimum and maximum\n     * values for the track.\n     */\n    get_data_bounds: function get_data_bounds(data) {}\n});\n_.extend(CircsterQuantitativeTrackView.prototype, UsesTicks);\n\n/**\n * Bigwig track view in Circster.\n */\nvar CircsterBigWigTrackView = CircsterQuantitativeTrackView.extend({\n    get_data_bounds: function get_data_bounds(data) {\n        // Set max across dataset by extracting all values, flattening them into a\n        // single array, and getting third quartile.\n        var values = _.flatten(_.map(data, function (d) {\n            if (d) {\n                // Each data point has the form [position, value], so return all values.\n                return _.map(d.data, function (p // Null is used for a lack of data; resolve null to 0 for comparison.\n                ) {\n                    return parseInt(p[1], 10) || 0;\n                });\n            } else {\n                return 0;\n            }\n        }));\n\n        // For max, use 98% quantile in attempt to avoid very large values. However, this max may be 0\n        // for sparsely populated data, so use max in that case.\n        return [_.min(values), this._quantile(values, 0.98) || _.max(values)];\n    }\n});\n\n/**\n * Chromosome interactions track view in Circster.\n */\nvar CircsterChromInteractionsTrackView = CircsterTrackView.extend({\n    render: function render() {\n        var self = this;\n\n        // When data is ready, render track.\n        $.when(self.track.get(\"data_manager\").data_is_ready()).then(function () {\n            // When data has been fetched, render track.\n            $.when(self.track.get(\"data_manager\").get_genome_wide_data(self.genome)).then(function (genome_wide_data) {\n                var chord_data = [];\n                var chroms_info = self.genome.get_chroms_info();\n                // Convert chromosome data into chord data.\n                _.each(genome_wide_data, function (chrom_data, index) {\n                    // Map each interaction into chord data.\n                    var cur_chrom = chroms_info[index].chrom;\n                    var chrom_chord_data = _.map(chrom_data.data, function (datum) {\n                        // Each datum is an interaction/chord.\n                        var source_angle = self._get_region_angle(cur_chrom, datum[1]);\n\n                        var target_angle = self._get_region_angle(datum[3], datum[4]);\n\n                        return {\n                            source: {\n                                startAngle: source_angle,\n                                endAngle: source_angle + 0.01\n                            },\n                            target: {\n                                startAngle: target_angle,\n                                endAngle: target_angle + 0.01\n                            }\n                        };\n                    });\n\n                    chord_data = chord_data.concat(chrom_chord_data);\n                });\n\n                self.parent_elt.append(\"g\").attr(\"class\", \"chord\").selectAll(\"path\").data(chord_data).enter().append(\"path\").style(\"fill\", self.get_fill_color()).attr(\"d\", d3.svg.chord().radius(self.radius_bounds[0])).style(\"opacity\", 1);\n            });\n        });\n    },\n\n    update_radius_bounds: function update_radius_bounds(radius_bounds) {\n        this.radius_bounds = radius_bounds;\n        this.parent_elt.selectAll(\"path\").transition().attr(\"d\", d3.svg.chord().radius(this.radius_bounds[0]));\n    },\n\n    /**\n     * Returns radians for a genomic position.\n     */\n    _get_region_angle: function _get_region_angle(chrom, position) {\n        // Find chrom angle data\n        var chrom_angle_data = _.find(this.chroms_layout, function (chrom_layout) {\n            return chrom_layout.data.chrom === chrom;\n        });\n\n        // Return angle at position.\n        return chrom_angle_data.endAngle - (chrom_angle_data.endAngle - chrom_angle_data.startAngle) * (chrom_angle_data.data.len - position) / chrom_angle_data.data.len;\n    }\n});\n\n// circster app loader\nvar Circster = Backbone.View.extend({\n    initialize: function initialize() {\n        // load css\n        _utils2.default.cssLoadFile(\"static/style/circster.css\");\n        // -- Configure visualization --\n        var genome = new _visualization2.default.Genome(galaxy_config.app.genome);\n\n        var vis = new _visualization2.default.GenomeVisualization(galaxy_config.app.viz_config);\n\n        // Add Circster-specific config options.\n        vis.get(\"config\").add([{\n            key: \"arc_dataset_height\",\n            label: \"Arc Dataset Height\",\n            type: \"int\",\n            value: 25,\n            view: \"circster\"\n        }, {\n            key: \"track_gap\",\n            label: \"Gap Between Tracks\",\n            type: \"int\",\n            value: 5,\n            view: \"circster\"\n        }, {\n            key: \"total_gap\",\n            label: \"Gap [0-1]\",\n            type: \"float\",\n            value: 0.4,\n            view: \"circster\",\n            hidden: true\n        }]);\n\n        var viz_view = new CircsterView({\n            // view pane\n            el: $(\"#center .unified-panel-body\"),\n            genome: genome,\n            model: vis\n        });\n\n        // Render vizualization\n        viz_view.render();\n\n        // setup title\n        $(\"#center .unified-panel-header-inner\").append(galaxy_config.app.viz_config.title + \" \" + galaxy_config.app.viz_config.dbkey);\n\n        // setup menu\n        var menu = _iconButton2.default.create_icon_buttons_menu([{\n            icon_class: \"plus-button\",\n            title: (0, _localization2.default)(\"Add tracks\"),\n            on_click: function on_click() {\n                _visualization2.default.select_datasets({ dbkey: vis.get(\"dbkey\") }, function (tracks) {\n                    vis.add_tracks(tracks);\n                });\n            }\n        }, {\n            icon_class: \"gear\",\n            title: (0, _localization2.default)(\"Settings\"),\n            on_click: function on_click() {\n                var view = new _config2.default.ConfigSettingCollectionView({\n                    collection: vis.get(\"config\")\n                });\n                view.render_in_modal(\"Configure Visualization\");\n            }\n        }, {\n            icon_class: \"disk--arrow\",\n            title: (0, _localization2.default)(\"Save\"),\n            on_click: function on_click() {\n                // show saving dialog box\n                Galaxy.modal.show({\n                    title: (0, _localization2.default)(\"Saving...\"),\n                    body: \"progress\"\n                });\n\n                // send to server\n                $.ajax({\n                    url: Galaxy.root + \"visualization/save\",\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        id: vis.get(\"vis_id\"),\n                        title: vis.get(\"title\"),\n                        dbkey: vis.get(\"dbkey\"),\n                        type: \"trackster\",\n                        vis_json: JSON.stringify(vis)\n                    }\n                }).success(function (vis_info) {\n                    Galaxy.modal.hide();\n                    vis.set(\"vis_id\", vis_info.vis_id);\n                }).error(function () {\n                    // show dialog\n                    Galaxy.modal.show({\n                        title: (0, _localization2.default)(\"Could Not Save\"),\n                        body: \"Could not save visualization. Please try again later.\",\n                        buttons: {\n                            Cancel: function Cancel() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                });\n            }\n        }, {\n            icon_class: \"cross-circle\",\n            title: (0, _localization2.default)(\"Close\"),\n            on_click: function on_click() {\n                window.location = Galaxy.root + \"visualizations/list\";\n            }\n        }], { tooltip_config: { placement: \"bottom\" } });\n\n        // add menu\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#center .unified-panel-header-inner\").append(menu.$el);\n\n        // manual tooltip config because default gravity is S and cannot be changed\n        $(\".menu-button\").tooltip({ placement: \"bottom\" });\n    }\n});\n\n// Module exports.\nexports.default = {\n    GalaxyApp: Circster\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///294\n");

/***/ }),

/***/ 295:
/*!***********************************!*\
  !*** ./galaxy/scripts/libs/d3.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///295\n");

/***/ }),

/***/ 296:
/*!******************************************!*\
  !*** ./galaxy/scripts/galaxy.library.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _libraryFolderlistView = __webpack_require__(/*! mvc/library/library-folderlist-view */ 298);\n\nvar _libraryFolderlistView2 = _interopRequireDefault(_libraryFolderlistView);\n\nvar _libraryLibrarylistView = __webpack_require__(/*! mvc/library/library-librarylist-view */ 300);\n\nvar _libraryLibrarylistView2 = _interopRequireDefault(_libraryLibrarylistView);\n\nvar _libraryLibrarytoolbarView = __webpack_require__(/*! mvc/library/library-librarytoolbar-view */ 302);\n\nvar _libraryLibrarytoolbarView2 = _interopRequireDefault(_libraryLibrarytoolbarView);\n\nvar _libraryFoldertoolbarView = __webpack_require__(/*! mvc/library/library-foldertoolbar-view */ 303);\n\nvar _libraryFoldertoolbarView2 = _interopRequireDefault(_libraryFoldertoolbarView);\n\nvar _libraryDatasetView = __webpack_require__(/*! mvc/library/library-dataset-view */ 127);\n\nvar _libraryDatasetView2 = _interopRequireDefault(_libraryDatasetView);\n\nvar _libraryLibraryView = __webpack_require__(/*! mvc/library/library-library-view */ 304);\n\nvar _libraryLibraryView2 = _interopRequireDefault(_libraryLibraryView);\n\nvar _libraryFolderView = __webpack_require__(/*! mvc/library/library-folder-view */ 305);\n\nvar _libraryFolderView2 = _interopRequireDefault(_libraryFolderView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ============================================================================\n/**\n * The Data Libraries router. Takes care about triggering routes\n * and sends users to proper pieces of the application.\n */\nvar LibraryRouter = Backbone.Router.extend({\n    initialize: function initialize() {\n        this.routesHit = 0;\n        // keep count of number of routes handled by the application\n        Backbone.history.on(\"route\", function () {\n            this.routesHit++;\n        }, this);\n\n        this.bind(\"route\", this.trackPageview);\n    },\n\n    routes: {\n        \"\": \"libraries\",\n        \"page/:show_page\": \"libraries_page\",\n        \"library/:library_id/permissions\": \"library_permissions\",\n        \"folders/:folder_id/permissions\": \"folder_permissions\",\n        \"folders/:id\": \"folder_content\",\n        \"folders/:id/page/:show_page\": \"folder_page\",\n        \"folders/:folder_id/datasets/:dataset_id\": \"dataset_detail\",\n        \"folders/:folder_id/datasets/:dataset_id/permissions\": \"dataset_permissions\",\n        \"folders/:folder_id/datasets/:dataset_id/versions/:ldda_id\": \"dataset_version\",\n        \"folders/:folder_id/download/:format\": \"download\",\n        \"folders/:folder_id/import/:source\": \"import_datasets\"\n    },\n\n    /**\n     * If more than one route has been hit the user did not land on current\n     * page directly so we can go back safely. Otherwise go to the home page.\n     * Use replaceState if available so the navigation doesn't create an\n     * extra history entry\n     */\n    back: function back() {\n        if (this.routesHit > 1) {\n            window.history.back();\n        } else {\n            this.navigate(\"#\", { trigger: true, replace: true });\n        }\n    },\n\n    /**\n     * Track every route change as a page view in Google Analytics.\n     */\n    trackPageview: function trackPageview() {\n        var url = Backbone.history.getFragment();\n        //prepend slash\n        if (!/^\\//.test(url) && url != \"\") {\n            url = \"/\" + url;\n        }\n        if (typeof ga !== \"undefined\") {\n            ga(\"send\", \"pageview\", Galaxy.root + \"library/list\" + url);\n        }\n    }\n});\n\n// ============================================================================\n/** session storage for library preferences */\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// === MAIN GALAXY LIBRARY MODULE ====\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\nvar LibraryPrefs = _baseMvc2.default.SessionStorageModel.extend({\n    defaults: {\n        with_deleted: false,\n        without_restricted: false,\n        sort_order: \"asc\",\n        sort_by: \"name\",\n        library_page_size: 20,\n        folder_page_size: 15\n    }\n});\n\n// ============================================================================\n/**\n * Main view of the Galaxy Data Libraries. Stores pointers to other subviews\n * and defines what router should do on the route triggers.\n */\nvar GalaxyLibrary = Backbone.View.extend({\n    libraryToolbarView: null,\n    libraryListView: null,\n    library_router: null,\n    libraryView: null,\n    folderToolbarView: null,\n    folderListView: null,\n    datasetView: null,\n\n    initialize: function initialize() {\n        // This should go upstream in the js app once available\n        if (window.Galaxy.config.ga_code) {\n            (function (i, s, o, g, r, a, m) {\n                i[\"GoogleAnalyticsObject\"] = r;\n                i[r] = i[r] || function () {\n                    (i[r].q = i[r].q || []).push(arguments);\n                }, i[r].l = 1 * new Date();\n                a = s.createElement(o), m = s.getElementsByTagName(o)[0];\n                a.async = 1;\n                a.src = g;\n                m.parentNode.insertBefore(a, m);\n            })(window, document, \"script\", \"//www.google-analytics.com/analytics.js\", \"ga\");\n            ga(\"create\", window.Galaxy.config.ga_code, \"auto\");\n            ga(\"send\", \"pageview\");\n        }\n\n        Galaxy.libraries = this;\n\n        this.preferences = new LibraryPrefs({ id: \"global-lib-prefs\" });\n\n        this.library_router = new LibraryRouter();\n\n        this.library_router.on(\"route:libraries\", function () {\n            if (Galaxy.libraries.libraryToolbarView) {\n                Galaxy.libraries.libraryToolbarView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.libraryToolbarView = new _libraryLibrarytoolbarView2.default.LibraryToolbarView();\n            Galaxy.libraries.libraryListView = new _libraryLibrarylistView2.default.LibraryListView();\n        });\n\n        this.library_router.on(\"route:libraries_page\", function (show_page) {\n            if (Galaxy.libraries.libraryToolbarView === null) {\n                Galaxy.libraries.libraryToolbarView = new _libraryLibrarytoolbarView2.default.LibraryToolbarView();\n                Galaxy.libraries.libraryListView = new _libraryLibrarylistView2.default.LibraryListView({ show_page: show_page });\n            } else {\n                Galaxy.libraries.libraryListView.render({\n                    show_page: show_page\n                });\n            }\n        });\n\n        this.library_router.on(\"route:folder_content\", function (id) {\n            if (Galaxy.libraries.folderToolbarView) {\n                Galaxy.libraries.folderToolbarView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.folderToolbarView = new _libraryFoldertoolbarView2.default.FolderToolbarView({ id: id });\n            Galaxy.libraries.folderListView = new _libraryFolderlistView2.default.FolderListView({ id: id });\n        });\n\n        this.library_router.on(\"route:folder_page\", function (id, show_page) {\n            if (Galaxy.libraries.folderToolbarView === null) {\n                Galaxy.libraries.folderToolbarView = new _libraryFoldertoolbarView2.default.FolderToolbarView({ id: id });\n                Galaxy.libraries.folderListView = new _libraryFolderlistView2.default.FolderListView({\n                    id: id,\n                    show_page: show_page\n                });\n            } else {\n                Galaxy.libraries.folderListView.render({\n                    id: id,\n                    show_page: parseInt(show_page)\n                });\n            }\n        });\n\n        this.library_router.on(\"route:download\", function (folder_id, format) {\n            if ($(\"#folder_list_body\").find(\":checked\").length === 0) {\n                _toastr2.default.info(\"You must select at least one dataset to download\");\n                Galaxy.libraries.library_router.navigate(\"folders/\" + folder_id, { trigger: true, replace: true });\n            } else {\n                Galaxy.libraries.folderToolbarView.download(folder_id, format);\n                Galaxy.libraries.library_router.navigate(\"folders/\" + folder_id, { trigger: false, replace: true });\n            }\n        });\n\n        this.library_router.on(\"route:dataset_detail\", function (folder_id, dataset_id) {\n            if (Galaxy.libraries.datasetView) {\n                Galaxy.libraries.datasetView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.datasetView = new _libraryDatasetView2.default.LibraryDatasetView({\n                id: dataset_id,\n                show_version: false,\n                show_permissions: false\n            });\n        });\n\n        this.library_router.on(\"route:dataset_version\", function (folder_id, dataset_id, ldda_id) {\n            if (Galaxy.libraries.datasetView) {\n                Galaxy.libraries.datasetView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.datasetView = new _libraryDatasetView2.default.LibraryDatasetView({\n                id: dataset_id,\n                ldda_id: ldda_id,\n                show_version: true\n            });\n        });\n\n        this.library_router.on(\"route:dataset_permissions\", function (folder_id, dataset_id) {\n            if (Galaxy.libraries.datasetView) {\n                Galaxy.libraries.datasetView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.datasetView = new _libraryDatasetView2.default.LibraryDatasetView({\n                id: dataset_id,\n                show_permissions: true\n            });\n        });\n\n        this.library_router.on(\"route:library_permissions\", function (library_id) {\n            if (Galaxy.libraries.libraryView) {\n                Galaxy.libraries.libraryView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.libraryView = new _libraryLibraryView2.default.LibraryView({\n                id: library_id,\n                show_permissions: true\n            });\n        });\n\n        this.library_router.on(\"route:folder_permissions\", function (folder_id) {\n            if (Galaxy.libraries.folderView) {\n                Galaxy.libraries.folderView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.folderView = new _libraryFolderView2.default.FolderView({\n                id: folder_id,\n                show_permissions: true\n            });\n        });\n\n        this.library_router.on(\"route:import_datasets\", function (folder_id, source) {\n            if (Galaxy.libraries.folderToolbarView && Galaxy.libraries.folderListView) {\n                Galaxy.libraries.folderToolbarView.showImportModal({\n                    source: source\n                });\n            } else {\n                Galaxy.libraries.folderToolbarView = new _libraryFoldertoolbarView2.default.FolderToolbarView({ id: folder_id });\n                Galaxy.libraries.folderListView = new _libraryFolderlistView2.default.FolderListView({ id: folder_id });\n                Galaxy.libraries.folderToolbarView.showImportModal({\n                    source: source\n                });\n            }\n        });\n\n        Backbone.history.start({ pushState: false });\n    }\n});\n\nexports.default = {\n    GalaxyApp: GalaxyLibrary\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///296\n");

/***/ }),

/***/ 297:
/*!****************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-util.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Create alphabetical based two-argument comparator\n * that takes into account that Folder comes before Dataset.\n * If sort_key is not present it is set to ''.\n * @param  {str} sort_key   key to sort by\n * @param  {str} sort_order order to sort by (asc, desc)\n * @return {function} two-argument comparator function\n */\nvar generateFolderComparator = function generateFolderComparator(sort_key, sort_order) {\n    return function (itemA, itemB) {\n        if (itemA.get(\"type\") === itemB.get(\"type\")) {\n            if (!itemA.has(sort_key) && !itemB.has(sort_key)) {\n                return 0;\n            } else if (!itemA.has(sort_key)) {\n                return 1;\n            } else if (!itemB.has(sort_key)) {\n                return -1;\n            }\n            if (itemA.get(sort_key).toLowerCase() > itemB.get(sort_key).toLowerCase()) {\n                return sort_order === \"asc\" ? 1 : -1;\n            }\n            if (itemB.get(sort_key).toLowerCase() > itemA.get(sort_key).toLowerCase()) {\n                return sort_order === \"asc\" ? -1 : 1;\n            }\n            return 0; // equal\n        } else {\n            if (itemA.get(\"type\") === \"folder\") {\n                return -1; // folder is always before dataset\n            }\n            return 1;\n        }\n    };\n};\n/**\n * Create alphabetical based two-argument comparator\n * @param  {str} sort_key   key to sort by\n * @param  {str} sort_order order to sort by (asc, desc)\n * @return {function} two-argument comparator function\n */\nvar generateLibraryComparator = function generateLibraryComparator(sort_key, sort_order) {\n    return function (libraryA, libraryB) {\n        if (libraryA.get(sort_key).toLowerCase() > libraryB.get(sort_key).toLowerCase()) {\n            return sort_order === \"asc\" ? 1 : -1;\n        }\n        if (libraryB.get(sort_key).toLowerCase() > libraryA.get(sort_key).toLowerCase()) {\n            return sort_order === \"asc\" ? -1 : 1;\n        }\n        return 0; // equal\n    };\n};\nexports.default = {\n    generateFolderComparator: generateFolderComparator,\n    generateLibraryComparator: generateLibraryComparator\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9saWJyYXJ5L2xpYnJhcnktdXRpbC5qcz82YTc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlIGFscGhhYmV0aWNhbCBiYXNlZCB0d28tYXJndW1lbnQgY29tcGFyYXRvclxuICogdGhhdCB0YWtlcyBpbnRvIGFjY291bnQgdGhhdCBGb2xkZXIgY29tZXMgYmVmb3JlIERhdGFzZXQuXG4gKiBJZiBzb3J0X2tleSBpcyBub3QgcHJlc2VudCBpdCBpcyBzZXQgdG8gJycuXG4gKiBAcGFyYW0gIHtzdHJ9IHNvcnRfa2V5ICAga2V5IHRvIHNvcnQgYnlcbiAqIEBwYXJhbSAge3N0cn0gc29ydF9vcmRlciBvcmRlciB0byBzb3J0IGJ5IChhc2MsIGRlc2MpXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gdHdvLWFyZ3VtZW50IGNvbXBhcmF0b3IgZnVuY3Rpb25cbiAqL1xudmFyIGdlbmVyYXRlRm9sZGVyQ29tcGFyYXRvciA9IChzb3J0X2tleSwgc29ydF9vcmRlcikgPT4gKGl0ZW1BLCBpdGVtQikgPT4ge1xuICAgIGlmIChpdGVtQS5nZXQoXCJ0eXBlXCIpID09PSBpdGVtQi5nZXQoXCJ0eXBlXCIpKSB7XG4gICAgICAgIGlmICghaXRlbUEuaGFzKHNvcnRfa2V5KSAmJiAhaXRlbUIuaGFzKHNvcnRfa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSBpZiAoIWl0ZW1BLmhhcyhzb3J0X2tleSkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2UgaWYgKCFpdGVtQi5oYXMoc29ydF9rZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1BLmdldChzb3J0X2tleSkudG9Mb3dlckNhc2UoKSA+IGl0ZW1CLmdldChzb3J0X2tleSkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRfb3JkZXIgPT09IFwiYXNjXCIgPyAxIDogLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1CLmdldChzb3J0X2tleSkudG9Mb3dlckNhc2UoKSA+IGl0ZW1BLmdldChzb3J0X2tleSkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRfb3JkZXIgPT09IFwiYXNjXCIgPyAtMSA6IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7IC8vIGVxdWFsXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGl0ZW1BLmdldChcInR5cGVcIikgPT09IFwiZm9sZGVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTsgLy8gZm9sZGVyIGlzIGFsd2F5cyBiZWZvcmUgZGF0YXNldFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZSBhbHBoYWJldGljYWwgYmFzZWQgdHdvLWFyZ3VtZW50IGNvbXBhcmF0b3JcbiAqIEBwYXJhbSAge3N0cn0gc29ydF9rZXkgICBrZXkgdG8gc29ydCBieVxuICogQHBhcmFtICB7c3RyfSBzb3J0X29yZGVyIG9yZGVyIHRvIHNvcnQgYnkgKGFzYywgZGVzYylcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSB0d28tYXJndW1lbnQgY29tcGFyYXRvciBmdW5jdGlvblxuICovXG52YXIgZ2VuZXJhdGVMaWJyYXJ5Q29tcGFyYXRvciA9IChzb3J0X2tleSwgc29ydF9vcmRlcikgPT4gKGxpYnJhcnlBLCBsaWJyYXJ5QikgPT4ge1xuICAgIGlmIChsaWJyYXJ5QS5nZXQoc29ydF9rZXkpLnRvTG93ZXJDYXNlKCkgPiBsaWJyYXJ5Qi5nZXQoc29ydF9rZXkpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRfb3JkZXIgPT09IFwiYXNjXCIgPyAxIDogLTE7XG4gICAgfVxuICAgIGlmIChsaWJyYXJ5Qi5nZXQoc29ydF9rZXkpLnRvTG93ZXJDYXNlKCkgPiBsaWJyYXJ5QS5nZXQoc29ydF9rZXkpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRfb3JkZXIgPT09IFwiYXNjXCIgPyAtMSA6IDE7XG4gICAgfVxuICAgIHJldHVybiAwOyAvLyBlcXVhbFxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBnZW5lcmF0ZUZvbGRlckNvbXBhcmF0b3I6IGdlbmVyYXRlRm9sZGVyQ29tcGFyYXRvcixcbiAgICBnZW5lcmF0ZUxpYnJhcnlDb21wYXJhdG9yOiBnZW5lcmF0ZUxpYnJhcnlDb21wYXJhdG9yXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9saWJyYXJ5L2xpYnJhcnktdXRpbC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7QUFRQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF0QkE7QUF1QkE7Ozs7OztBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFTQTtBQUNBO0FBQ0E7QUFGQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///297\n");

/***/ }),

/***/ 298:
/*!***************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-folderlist-view.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _libraryFolderrowView = __webpack_require__(/*! mvc/library/library-folderrow-view */ 299);\n\nvar _libraryFolderrowView2 = _interopRequireDefault(_libraryFolderrowView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FolderListView = Backbone.View.extend({\n    el: \"#folder_items_element\",\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    current_sort_order: \"asc\",\n\n    current_sort_key: \"name\",\n\n    events: {\n        \"click #select-all-checkboxes\": \"selectAll\",\n        \"click .dataset_row\": \"selectClickedRow\",\n        \"click .folder_row\": \"selectClickedRow\",\n        \"click .sort-folder-name\": \"sortColumnClicked\",\n        \"click .sort-folder-file_ext\": \"sortColumnClicked\",\n        \"click .sort-folder-description\": \"sortColumnClicked\",\n        \"click .sort-folder-state\": \"sortColumnClicked\"\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize: function initialize(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new _libraryModel2.default.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo(this.collection, \"add\", this.renderOne);\n        this.listenTo(this.collection, \"remove\", this.removeOne);\n        this.listenTo(this.collection, \"sort\", this.rePaint);\n        this.listenTo(this.collection, \"reset\", this.rePaint);\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function fetchFolder(options) {\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var self = this;\n\n        this.folderContainer = new _libraryModel2.default.FolderContainer({\n            id: this.options.id\n        });\n        this.folderContainer.url = this.folderContainer.attributes.urlRoot + this.options.id + \"/contents\";\n\n        if (this.options.include_deleted) {\n            this.folderContainer.url = this.folderContainer.url + \"?include_deleted=true\";\n        }\n        this.folderContainer.fetch({\n            success: function success(folder_container) {\n                self.folder_container = folder_container;\n                self.render();\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg + \" Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    _toastr2.default.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    render: function render(options) {\n        this.options = _.extend(this.options, options);\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if (path.length === 1) {\n            // the library is above us\n            upper_folder_id = 0;\n        } else {\n            upper_folder_id = path[path.length - 2][0];\n        }\n\n        this.$el.html(template({\n            path: this.folderContainer.attributes.metadata.full_path,\n            parent_library_id: this.folderContainer.attributes.metadata.parent_library_id,\n            id: this.options.id,\n            upper_folder_id: upper_folder_id,\n            order: this.current_sort_order\n        }));\n\n        // when dataset_id is present render its details too\n        if (this.options.dataset_id) {\n            var row = _.findWhere(self.rowViews, {\n                id: this.options.dataset_id\n            });\n            if (row) {\n                row.showDatasetDetails();\n            } else {\n                _toastr2.default.error(\"Requested dataset not found. Showing folder instead.\");\n            }\n        } else {\n            if (this.options.show_page === null || this.options.show_page < 1) {\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    paginate: function paginate(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.show_page === null || this.options.show_page < 1) {\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get(\"folder\").models.length;\n        this.options.page_count = Math.ceil(this.options.total_items_count / Galaxy.libraries.preferences.get(\"folder_page_size\"));\n        var page_start = Galaxy.libraries.preferences.get(\"folder_page_size\") * (this.options.show_page - 1);\n        var items_to_render = null;\n        items_to_render = this.folder_container.get(\"folder\").models.slice(page_start, page_start + Galaxy.libraries.preferences.get(\"folder_page_size\"));\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if (Galaxy.libraries.preferences.get(\"folder_page_size\") * this.options.show_page > this.options.total_items_count + Galaxy.libraries.preferences.get(\"folder_page_size\")) {\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator(this.options);\n        this.collection.reset(items_to_render);\n    },\n\n    rePaint: function rePaint(options) {\n        this.options = _.extend(this.options, options);\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function addAll(models) {\n        _.each(models, function (model) {\n            Galaxy.libraries.folderListView.collection.add(model, {\n                current_sort_order: false\n            });\n        });\n        $(\"#center [data-toggle]\").tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function postRender() {\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder = typeof this.collection.findWhere({ type: \"file\" }) !== \"undefined\" || typeof this.collection.findWhere({ type: \"folder\" }) !== \"undefined\";\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function renderAll() {\n        var self = this;\n        _.each(this.collection.models.reverse(), function (model) {\n            self.renderOne(model);\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function renderOne(model) {\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n        // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set(\"folder_id\", this.id);\n        var rowView = new _libraryFolderrowView2.default.FolderRowView({\n            model: model\n        });\n\n        // save new rowView to cache\n        this.rowViews[model.get(\"id\")] = rowView;\n\n        this.$el.find(\"#first_folder_item\").after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function removeOne(model) {\n        this.$el.find(\"tr\").filter(function () {\n            return $(this).data(\"id\") && $(this).data(\"id\") === model.id;\n        }).remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function removeAllRows() {\n        $(\".library-row\").remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness: function checkEmptiness() {\n        if (this.$el.find(\".dataset_row\").length === 0 && this.$el.find(\".folder_row\").length === 0) {\n            this.$el.find(\".empty-folder-message\").show();\n        } else {\n            this.$el.find(\".empty-folder-message\").hide();\n        }\n    },\n\n    sortColumnClicked: function sortColumnClicked(event) {\n        event.preventDefault();\n        this.current_sort_order = this.current_sort_order === \"asc\" ? \"desc\" : \"asc\";\n        this.current_sort_key = event.currentTarget.className.replace(\"sort-folder-\", \"\");\n        this.collection.sortFolder(this.current_sort_key, this.current_sort_order);\n        this.renderSortIcon();\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll: function selectAll(event) {\n        var selected = event.target.checked;\n        var self = this;\n        // Iterate each checkbox\n        $(\":checkbox\", \"#folder_list_body\").each(function () {\n            this.checked = selected;\n            var $row = $(this).closest(\"tr\");\n            // Change color of selected/unselected\n            if (selected) {\n                self.makeDarkRow($row);\n            } else {\n                self.makeWhiteRow($row);\n            }\n        });\n    },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow: function selectClickedRow(event) {\n        var checkbox = \"\";\n        var $row;\n        var source;\n        $row = $(event.target).closest(\"tr\");\n        if (event.target.localName === \"input\") {\n            checkbox = event.target;\n            source = \"input\";\n        } else if (event.target.localName === \"td\") {\n            checkbox = $row.find(\":checkbox\")[0];\n            source = \"td\";\n        }\n        if (checkbox.checked) {\n            if (source === \"td\") {\n                checkbox.checked = \"\";\n                this.makeWhiteRow($row);\n            } else if (source === \"input\") {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source === \"td\") {\n                checkbox.checked = \"selected\";\n                this.makeDarkRow($row);\n            } else if (source === \"input\") {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function makeDarkRow($row) {\n        $row.removeClass(\"light\").addClass(\"dark\");\n        $row.find(\"a\").removeClass(\"light\").addClass(\"dark\");\n        $row.find(\".fa-file-o\").removeClass(\"fa-file-o\").addClass(\"fa-file\");\n        $row.find(\".fa-folder-o\").removeClass(\"fa-folder-o\").addClass(\"fa-folder\");\n    },\n\n    makeWhiteRow: function makeWhiteRow($row) {\n        $row.removeClass(\"dark\").addClass(\"light\");\n        $row.find(\"a\").removeClass(\"dark\").addClass(\"light\");\n        $row.find(\".fa-file\").removeClass(\"fa-file\").addClass(\"fa-file-o\");\n        $row.find(\".fa-folder\").removeClass(\"fa-folder\").addClass(\"fa-folder-o\");\n    },\n\n    renderSortIcon: function renderSortIcon() {\n        if (this.current_sort_order === \"asc\") {\n            $('[class*=\"sort-icon\"]').removeClass(\"fa-sort-alpha-desc\").removeClass(\"fa-sort-alpha-asc\");\n            $(\".sort-icon-\" + this.current_sort_key).addClass(\"fa-sort-alpha-asc\");\n        } else {\n            $(\".sort-icon-\" + this.current_sort_key).addClass(\"fa-sort-alpha-desc\");\n        }\n    },\n\n    templateFolder: function templateFolder() {\n        return _.template([\n        // BREADCRUMBS\n        '<ol class=\"breadcrumb\">', '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>', \"<% _.each(path, function(path_item) { %>\", \"<% if (path_item[0] != id) { %>\", '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ', \"<% } else { %>\", '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>', \"<% } %>\", \"<% }); %>\", \"</ol>\",\n\n        // FOLDER CONTENT\n        '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">', \"<thead>\", '<th class=\"button_heading\"></th>', '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>', '<th><a class=\"sort-folder-name\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-name fa fa-sort-alpha-<%- order %>\"></span></th>', '<th style=\"width:20%;\"><a class=\"sort-folder-description\" title=\"Click to reverse order\" href=\"#\">description</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-description fa\"></span></th>', '<th style=\"width:5%;\"><a class=\"sort-folder-file_ext\" title=\"Click to reverse order\" href=\"#\">data type</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-file_ext fa\"></span></th>', '<th style=\"width:10%;\">size</th>', '<th style=\"width:160px;\">time updated (UTC)</th>', '<th style=\"width:5%;\"><a class=\"sort-folder-state\" title=\"Click to reverse order\" href=\"#\">state</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-state fa\"></span></th>', '<th style=\"width:150px;\"></th> ', \"</thead>\", '<tbody id=\"folder_list_body\">', '<tr id=\"first_folder_item\">', \"<td>\", '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>', \"</td>\", \"<td></td>\", \"<td></td>\", \"<td></td>\", \"<td></td>\", \"<td></td>\", \"<td></td>\", \"<td></td>\", \"<td></td>\", \"</tr>\", \"</tbody>\", \"</table>\", '<div class=\"empty-folder-message\" style=\"display:none;\">', \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\", ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>', ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.', \"</div>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    FolderListView: FolderListView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///298\n");

/***/ }),

/***/ 299:
/*!**************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-folderrow-view.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _libraryDatasetView = __webpack_require__(/*! mvc/library/library-dataset-view */ 127);\n\nvar _libraryDatasetView2 = _interopRequireDefault(_libraryDatasetView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FolderRowView = Backbone.View.extend({\n    events: {\n        \"click .undelete_dataset_btn\": \"undeleteDataset\",\n        \"click .undelete_folder_btn\": \"undeleteFolder\",\n        \"click .edit_folder_btn\": \"startModifications\",\n        \"click .cancel_folder_btn\": \"cancelModifications\",\n        \"click .save_folder_btn\": \"saveModifications\"\n    },\n\n    defaults: {\n        type: null,\n        visibility_config: {\n            edit_folder_btn: false,\n            save_folder_btn: false,\n            cancel_folder_btn: false,\n            permission_folder_btn: false\n        },\n        edit_mode: false\n    },\n\n    initialize: function initialize(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.render(this.options);\n    },\n\n    render: function render(options) {\n        this.options = _.extend(this.options, options);\n        var folder_item = this.options.model;\n        var template = null;\n\n        if (folder_item.get(\"type\") === \"folder\" || folder_item.get(\"model_class\") === \"LibraryFolder\") {\n            this.options.type = \"folder\";\n            this.prepareButtons(folder_item);\n            if (folder_item.get(\"deleted\")) {\n                template = this.templateRowDeletedFolder();\n            } else {\n                template = this.templateRowFolder();\n            }\n        } else if (folder_item.get(\"type\") === \"file\" || folder_item.get(\"model_class\") === \"LibraryDatasetDatasetAssociation\" || folder_item.get(\"model_class\") === \"LibraryDataset\") {\n            this.options.type = \"file\";\n            if (folder_item.get(\"deleted\")) {\n                template = this.templateRowDeletedFile();\n            } else {\n                template = this.templateRowFile();\n            }\n        } else {\n            Galaxy.emit.error(\"Unknown library item type found.\");\n            Galaxy.emit.error(folder_item.get(\"type\") || folder_item.get(\"model_class\"));\n        }\n        this.setElement(template({\n            content_item: folder_item,\n            edit_mode: this.options.edit_mode,\n            button_config: this.options.visibility_config\n        }));\n        this.$el.show();\n        return this;\n    },\n\n    /**\n     * Modify the visibility of buttons for\n     * the filling of the row template of a given folder.\n     */\n    prepareButtons: function prepareButtons(folder) {\n        var vis_config = this.options.visibility_config;\n        if (this.options.edit_mode === false) {\n            vis_config.save_folder_btn = false;\n            vis_config.cancel_folder_btn = false;\n            if (folder.get(\"deleted\") === true) {\n                vis_config.edit_folder_btn = false;\n                vis_config.permission_folder_btn = false;\n            } else if (folder.get(\"deleted\") === false) {\n                vis_config.save_folder_btn = false;\n                vis_config.cancel_folder_btn = false;\n                if (folder.get(\"can_modify\") === true) {\n                    vis_config.edit_folder_btn = true;\n                }\n                if (folder.get(\"can_manage\") === true) {\n                    vis_config.permission_folder_btn = true;\n                }\n            }\n        } else if (this.options.edit_mode === true) {\n            vis_config.edit_folder_btn = false;\n            vis_config.permission_folder_btn = false;\n            vis_config.save_folder_btn = true;\n            vis_config.cancel_folder_btn = true;\n        }\n        this.options.visibility_config = vis_config;\n    },\n\n    /* Show the page with dataset details. */\n    showDatasetDetails: function showDatasetDetails() {\n        Galaxy.libraries.datasetView = new _libraryDatasetView2.default.LibraryDatasetView({ id: this.id });\n    },\n\n    /* Undelete the dataset on server and render the row again. */\n    undeleteDataset: function undeleteDataset(event) {\n        $(\".tooltip\").hide();\n        var that = this;\n        var dataset_id = $(event.target).closest(\"tr\").data(\"id\");\n        var dataset = Galaxy.libraries.folderListView.collection.get(dataset_id);\n        dataset.url = dataset.urlRoot + dataset.id + \"?undelete=true\";\n        dataset.destroy({\n            success: function success(model, response) {\n                Galaxy.libraries.folderListView.collection.remove(dataset_id);\n                var updated_dataset = new _libraryModel2.default.Item(response);\n                Galaxy.libraries.folderListView.collection.add(updated_dataset);\n                Galaxy.libraries.folderListView.collection.sortFolder(\"name\", \"asc\");\n                _toastr2.default.success(\"Dataset undeleted. Click this to see it.\", \"\", {\n                    onclick: function onclick() {\n                        var folder_id = that.model.get(\"folder_id\");\n                        window.location = Galaxy.root + \"library/list#folders/\" + folder_id + \"/datasets/\" + that.id;\n                    }\n                });\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(\"Dataset was not undeleted. \" + response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occured! Dataset was not undeleted. Please try again.\");\n                }\n            }\n        });\n    },\n\n    /* Undelete the folder on server and render the row again. */\n    undeleteFolder: function undeleteFolder(event) {\n        $(\".tooltip\").hide();\n        var that = this;\n        var folder_id = $(event.target).closest(\"tr\").data(\"id\");\n        var folder = Galaxy.libraries.folderListView.collection.get(folder_id);\n        folder.url = folder.urlRoot + folder.id + \"?undelete=true\";\n        folder.destroy({\n            success: function success(model, response) {\n                Galaxy.libraries.folderListView.collection.remove(folder_id);\n                var updated_folder = new _libraryModel2.default.FolderAsModel(response);\n                Galaxy.libraries.folderListView.collection.add(updated_folder);\n                Galaxy.libraries.folderListView.collection.sortFolder(\"name\", \"asc\");\n                _toastr2.default.success(\"Folder undeleted.\");\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(\"Folder was not undeleted. \" + response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occured! Folder was not undeleted. Please try again.\");\n                }\n            }\n        });\n    },\n\n    /* User clicked the 'edit' button on row so render the row as editable. */\n    startModifications: function startModifications() {\n        this.options.edit_mode = true;\n        this.repaint();\n    },\n\n    /* User clicked the 'cancel' button so render normal row */\n    cancelModifications: function cancelModifications() {\n        this.options.edit_mode = false;\n        this.repaint();\n    },\n\n    saveModifications: function saveModifications() {\n        var folder = Galaxy.libraries.folderListView.collection.get(this.$el.data(\"id\"));\n        var is_changed = false;\n        var new_name = this.$el.find(\".input_folder_name\").val();\n        if (typeof new_name !== \"undefined\" && new_name !== folder.get(\"name\")) {\n            if (new_name.length > 2) {\n                folder.set(\"name\", new_name);\n                is_changed = true;\n            } else {\n                _toastr2.default.warning(\"Folder name has to be at least 3 characters long.\");\n                return;\n            }\n        }\n        var new_description = this.$el.find(\".input_folder_description\").val();\n        if (typeof new_description !== \"undefined\" && new_description !== folder.get(\"description\")) {\n            folder.set(\"description\", new_description);\n            is_changed = true;\n        }\n        if (is_changed) {\n            var row_view = this;\n            folder.save(null, {\n                patch: true,\n                success: function success(folder) {\n                    row_view.options.edit_mode = false;\n                    row_view.repaint(folder);\n                    _toastr2.default.success(\"Changes to folder saved.\");\n                },\n                error: function error(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occured while attempting to update the folder.\");\n                    }\n                }\n            });\n        } else {\n            this.options.edit_mode = false;\n            this.repaint(folder);\n            _toastr2.default.info(\"Nothing has changed.\");\n        }\n    },\n\n    repaint: function repaint() {\n        /* need to hide manually because of the element removal in setElement\n        invoked in render() */\n        $(\".tooltip\").hide();\n        /* we need to store the old element to be able to replace it with\n        new one */\n        var old_element = this.$el;\n        /* if user canceled the folder param is undefined,\n        if user saved and succeeded the updated folder is rendered */\n        this.render();\n        old_element.replaceWith(this.$el);\n        /* now we attach new tooltips to the newly created row element */\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    templateRowFolder: function templateRowFolder() {\n        return _.template(['<tr class=\"folder_row light library-row\" data-id=\"<%- content_item.id %>\">', \"<td>\", '<span title=\"Folder\" class=\"fa fa-folder-o\"/>', \"</td>\", '<td style=\"text-align: center; \"><input style=\"margin: 0;\" type=\"checkbox\"></td>', \"<% if(!edit_mode) { %>\", \"<td>\", '<a href=\"#folders/<%- content_item.id %>\"><%- content_item.get(\"name\") %></a>', \"</td>\", \"<td>\", '<%- content_item.get(\"description\") %>', \"</td>\", \"<% } else if(edit_mode){ %>\", '<td><textarea rows=\"4\" class=\"form-control input_folder_name\" placeholder=\"name\" ><%- content_item.get(\"name\") %></textarea></td>', '<td><textarea rows=\"4\" class=\"form-control input_folder_description\" placeholder=\"description\" ><%- content_item.get(\"description\") %></textarea></td>', \"<% } %>\", \"<td>folder</td>\", \"<td></td>\", \"<td>\", '<%= _.escape(content_item.get(\"update_time\")) %>', \"</td>\", \"<td></td>\", \"<td>\", \"<% if(edit_mode) { %>\", // start edit mode\n        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save changes\" class=\"primary-button btn-xs save_folder_btn\" type=\"button\" style=\"<% if(button_config.save_folder_btn === false) { print(\"display:none;\") } %>\">', '<span class=\"fa fa-floppy-o\"/> Save', \"</button>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Discard changes\" class=\"primary-button btn-xs cancel_folder_btn\" type=\"button\" style=\"<% if(button_config.cancel_folder_btn === false) { print(\"display:none;\") } %>\">', '<span class=\"fa fa-times\"/> Cancel', \"</button>\", \"<% } else if (!edit_mode){%>\", // start no edit mode\n        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Modify \\'<%- content_item.get(\"name\") %>\\'\" class=\"primary-button btn-xs edit_folder_btn\" type=\"button\" style=\"<% if(button_config.edit_folder_btn === false) { print(\"display:none;\") } %>\">', '<span class=\"fa fa-pencil\"/> Edit', \"</button>\", '<a href=\"#/folders/<%- content_item.id %>/permissions\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" class=\"primary-button btn-xs permission_folder_btn\" title=\"Permissions of \\'<%- content_item.get(\"name\") %>\\'\" style=\"<% if(button_config.permission_folder_btn === false) { print(\"display:none;\") } %>\">', '<span class=\"fa fa-group\"/> Manage', \"</button>\", \"</a>\", \"<% } %>\", //end no edit mode\n        \"</td>\", \"</tr>\"].join(\"\"));\n    },\n\n    templateRowFile: function templateRowFile() {\n        return _.template(['<tr class=\"dataset_row light library-row\" data-id=\"<%- content_item.id %>\">', \"<td>\", '<span title=\"Dataset\" class=\"fa fa-file-o\"/>', \"</td>\", '<td style=\"text-align: center; \">', '<input style=\"margin: 0;\" type=\"checkbox\">', \"</td>\", \"<td>\", '<a href=\"#folders/<%- content_item.get(\"folder_id\") %>/datasets/<%- content_item.id %>\" class=\"library-dataset\">', '<%- content_item.get(\"name\") %>', \"<a>\", \"</td>\", '<td><%- content_item.get(\"message\") %></td>', '<td><%= _.escape(content_item.get(\"file_ext\")) %></td>', '<td><%= _.escape(content_item.get(\"file_size\")) %></td>', '<td><%= _.escape(content_item.get(\"update_time\")) %></td>', \"<td>\", '<% if ( content_item.get(\"state\") !== \"ok\" ) { %>', '<%= _.escape(content_item.get(\"state\")) %>', \"<% } %>\", \"</td>\", \"<td>\", '<% if (content_item.get(\"is_unrestricted\")) { %>', '<span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Unrestricted dataset\" style=\"color:grey;\" class=\"fa fa-globe fa-lg\"/>', \"<% } %>\", '<% if (content_item.get(\"is_private\")) { %>', '<span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Private dataset\" style=\"color:grey;\" class=\"fa fa-key fa-lg\"/>', \"<% } %>\", '<% if ((content_item.get(\"is_unrestricted\") === false) && (content_item.get(\"is_private\") === false)) { %>', '<span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Restricted dataset\" style=\"color:grey;\" class=\"fa fa-shield fa-lg\"/>', \"<% } %>\", '<% if (content_item.get(\"can_manage\")) { %>', '<a href=\"#folders/<%- content_item.get(\"folder_id\") %>/datasets/<%- content_item.id %>/permissions\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" class=\"primary-button btn-xs permissions-dataset-btn\" title=\"Permissions of \\'<%- content_item.get(\"name\") %>\\'\">', '<span class=\"fa fa-group\"/> Manage', \"</button>\", \"</a>\", \"<% } %>\", \"</td>\", \"</tr>\"].join(\"\"));\n    },\n\n    templateRowDeletedFile: function templateRowDeletedFile() {\n        return _.template(['<tr class=\"active deleted_dataset library-row\" data-id=\"<%- content_item.id %>\">', \"<td>\", '<span title=\"Dataset\" class=\"fa fa-file-o\"/>', \"</td>\", \"<td></td>\", '<td style=\"color:grey;\">', '<%- content_item.get(\"name\") %>', \"</td>\", \"<td>\", '<%- content_item.get(\"message\") %>', \"</td>\", \"<td>\", '<%= _.escape(content_item.get(\"file_ext\")) %>', \"</td>\", \"<td>\", '<%= _.escape(content_item.get(\"file_size\")) %>', \"</td>\", \"<td>\", '<%= _.escape(content_item.get(\"update_time\")) %>', \"</td>\", \"<td>\", '<% if ( content_item.get(\"state\") !== \"ok\" ) { %>', '<%= _.escape(content_item.get(\"state\")) %>', \"<% } %>\", \"</td>\", \"<td>\", '<span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Marked deleted\" style=\"color:grey;\" class=\"fa fa-ban fa-lg\"/>', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Undelete \\'<%- content_item.get(\"name\") %>\\'\" class=\"primary-button btn-xs undelete_dataset_btn\" type=\"button\" style=\"margin-left:1em;\">', '<span class=\"fa fa-unlock\"/> Undelete', \"</button>\", \"</td>\", \"</tr>\"].join(\"\"));\n    },\n\n    templateRowDeletedFolder: function templateRowDeletedFolder() {\n        return _.template(['<tr class=\"active deleted_folder light library-row\" data-id=\"<%- content_item.id %>\">', \"<td>\", '<span title=\"Folder\" class=\"fa fa-folder-o\"/>', \"</td>\", \"<td></td>\", '<td style=\"color:grey;\">', '<%- content_item.get(\"name\") %>', \"</td>\", \"<td>\", '<%- content_item.get(\"description\") %>', \"</td>\", \"<td>\", \"folder\", \"</td>\", \"<td></td>\", \"<td>\", '<%= _.escape(content_item.get(\"update_time\")) %>', \"</td>\", \"<td></td>\", \"<td>\", '<span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Marked deleted\" style=\"color:grey;\" class=\"fa fa-ban fa-lg\"/>', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Undelete \\'<%- content_item.get(\"name\") %>\\'\" class=\"primary-button btn-xs undelete_folder_btn\" type=\"button\" style=\"margin-left:1em;\">', '<span class=\"fa fa-unlock\"/> Undelete', \"</button>\", \"</td>\", \"</tr>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    FolderRowView: FolderRowView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9saWJyYXJ5L2xpYnJhcnktZm9sZGVycm93LXZpZXcuanM/NmE1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kX3RvYXN0ciBmcm9tIFwibGlicy90b2FzdHJcIjtcbmltcG9ydCBtb2RfbGlicmFyeV9tb2RlbCBmcm9tIFwibXZjL2xpYnJhcnkvbGlicmFyeS1tb2RlbFwiO1xuaW1wb3J0IG1vZF9saWJyYXJ5X2RhdGFzZXRfdmlldyBmcm9tIFwibXZjL2xpYnJhcnkvbGlicmFyeS1kYXRhc2V0LXZpZXdcIjtcbnZhciBGb2xkZXJSb3dWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIGV2ZW50czoge1xuICAgICAgICBcImNsaWNrIC51bmRlbGV0ZV9kYXRhc2V0X2J0blwiOiBcInVuZGVsZXRlRGF0YXNldFwiLFxuICAgICAgICBcImNsaWNrIC51bmRlbGV0ZV9mb2xkZXJfYnRuXCI6IFwidW5kZWxldGVGb2xkZXJcIixcbiAgICAgICAgXCJjbGljayAuZWRpdF9mb2xkZXJfYnRuXCI6IFwic3RhcnRNb2RpZmljYXRpb25zXCIsXG4gICAgICAgIFwiY2xpY2sgLmNhbmNlbF9mb2xkZXJfYnRuXCI6IFwiY2FuY2VsTW9kaWZpY2F0aW9uc1wiLFxuICAgICAgICBcImNsaWNrIC5zYXZlX2ZvbGRlcl9idG5cIjogXCJzYXZlTW9kaWZpY2F0aW9uc1wiXG4gICAgfSxcblxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgIHZpc2liaWxpdHlfY29uZmlnOiB7XG4gICAgICAgICAgICBlZGl0X2ZvbGRlcl9idG46IGZhbHNlLFxuICAgICAgICAgICAgc2F2ZV9mb2xkZXJfYnRuOiBmYWxzZSxcbiAgICAgICAgICAgIGNhbmNlbF9mb2xkZXJfYnRuOiBmYWxzZSxcbiAgICAgICAgICAgIHBlcm1pc3Npb25fZm9sZGVyX2J0bjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdF9tb2RlOiBmYWxzZVxuICAgIH0sXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF8uZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwgdGhpcy5kZWZhdWx0cyk7XG4gICAgICAgIHRoaXMucmVuZGVyKHRoaXMub3B0aW9ucyk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBfLmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgZm9sZGVyX2l0ZW0gPSB0aGlzLm9wdGlvbnMubW9kZWw7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKGZvbGRlcl9pdGVtLmdldChcInR5cGVcIikgPT09IFwiZm9sZGVyXCIgfHwgZm9sZGVyX2l0ZW0uZ2V0KFwibW9kZWxfY2xhc3NcIikgPT09IFwiTGlicmFyeUZvbGRlclwiKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudHlwZSA9IFwiZm9sZGVyXCI7XG4gICAgICAgICAgICB0aGlzLnByZXBhcmVCdXR0b25zKGZvbGRlcl9pdGVtKTtcbiAgICAgICAgICAgIGlmIChmb2xkZXJfaXRlbS5nZXQoXCJkZWxldGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlUm93RGVsZXRlZEZvbGRlcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVSb3dGb2xkZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGZvbGRlcl9pdGVtLmdldChcInR5cGVcIikgPT09IFwiZmlsZVwiIHx8XG4gICAgICAgICAgICBmb2xkZXJfaXRlbS5nZXQoXCJtb2RlbF9jbGFzc1wiKSA9PT0gXCJMaWJyYXJ5RGF0YXNldERhdGFzZXRBc3NvY2lhdGlvblwiIHx8XG4gICAgICAgICAgICBmb2xkZXJfaXRlbS5nZXQoXCJtb2RlbF9jbGFzc1wiKSA9PT0gXCJMaWJyYXJ5RGF0YXNldFwiXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnR5cGUgPSBcImZpbGVcIjtcbiAgICAgICAgICAgIGlmIChmb2xkZXJfaXRlbS5nZXQoXCJkZWxldGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlUm93RGVsZXRlZEZpbGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlUm93RmlsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgR2FsYXh5LmVtaXQuZXJyb3IoXCJVbmtub3duIGxpYnJhcnkgaXRlbSB0eXBlIGZvdW5kLlwiKTtcbiAgICAgICAgICAgIEdhbGF4eS5lbWl0LmVycm9yKGZvbGRlcl9pdGVtLmdldChcInR5cGVcIikgfHwgZm9sZGVyX2l0ZW0uZ2V0KFwibW9kZWxfY2xhc3NcIikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudChcbiAgICAgICAgICAgIHRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICBjb250ZW50X2l0ZW06IGZvbGRlcl9pdGVtLFxuICAgICAgICAgICAgICAgIGVkaXRfbW9kZTogdGhpcy5vcHRpb25zLmVkaXRfbW9kZSxcbiAgICAgICAgICAgICAgICBidXR0b25fY29uZmlnOiB0aGlzLm9wdGlvbnMudmlzaWJpbGl0eV9jb25maWdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuJGVsLnNob3coKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vZGlmeSB0aGUgdmlzaWJpbGl0eSBvZiBidXR0b25zIGZvclxuICAgICAqIHRoZSBmaWxsaW5nIG9mIHRoZSByb3cgdGVtcGxhdGUgb2YgYSBnaXZlbiBmb2xkZXIuXG4gICAgICovXG4gICAgcHJlcGFyZUJ1dHRvbnM6IGZ1bmN0aW9uKGZvbGRlcikge1xuICAgICAgICB2YXIgdmlzX2NvbmZpZyA9IHRoaXMub3B0aW9ucy52aXNpYmlsaXR5X2NvbmZpZztcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5lZGl0X21vZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2aXNfY29uZmlnLnNhdmVfZm9sZGVyX2J0biA9IGZhbHNlO1xuICAgICAgICAgICAgdmlzX2NvbmZpZy5jYW5jZWxfZm9sZGVyX2J0biA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGZvbGRlci5nZXQoXCJkZWxldGVkXCIpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmlzX2NvbmZpZy5lZGl0X2ZvbGRlcl9idG4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2aXNfY29uZmlnLnBlcm1pc3Npb25fZm9sZGVyX2J0biA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb2xkZXIuZ2V0KFwiZGVsZXRlZFwiKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB2aXNfY29uZmlnLnNhdmVfZm9sZGVyX2J0biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZpc19jb25maWcuY2FuY2VsX2ZvbGRlcl9idG4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoZm9sZGVyLmdldChcImNhbl9tb2RpZnlcIikgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlzX2NvbmZpZy5lZGl0X2ZvbGRlcl9idG4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZm9sZGVyLmdldChcImNhbl9tYW5hZ2VcIikgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlzX2NvbmZpZy5wZXJtaXNzaW9uX2ZvbGRlcl9idG4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZWRpdF9tb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2aXNfY29uZmlnLmVkaXRfZm9sZGVyX2J0biA9IGZhbHNlO1xuICAgICAgICAgICAgdmlzX2NvbmZpZy5wZXJtaXNzaW9uX2ZvbGRlcl9idG4gPSBmYWxzZTtcbiAgICAgICAgICAgIHZpc19jb25maWcuc2F2ZV9mb2xkZXJfYnRuID0gdHJ1ZTtcbiAgICAgICAgICAgIHZpc19jb25maWcuY2FuY2VsX2ZvbGRlcl9idG4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy52aXNpYmlsaXR5X2NvbmZpZyA9IHZpc19jb25maWc7XG4gICAgfSxcblxuICAgIC8qIFNob3cgdGhlIHBhZ2Ugd2l0aCBkYXRhc2V0IGRldGFpbHMuICovXG4gICAgc2hvd0RhdGFzZXREZXRhaWxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgR2FsYXh5LmxpYnJhcmllcy5kYXRhc2V0VmlldyA9IG5ldyBtb2RfbGlicmFyeV9kYXRhc2V0X3ZpZXcuTGlicmFyeURhdGFzZXRWaWV3KHsgaWQ6IHRoaXMuaWQgfSk7XG4gICAgfSxcblxuICAgIC8qIFVuZGVsZXRlIHRoZSBkYXRhc2V0IG9uIHNlcnZlciBhbmQgcmVuZGVyIHRoZSByb3cgYWdhaW4uICovXG4gICAgdW5kZWxldGVEYXRhc2V0OiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAkKFwiLnRvb2x0aXBcIikuaGlkZSgpO1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBkYXRhc2V0X2lkID0gJChldmVudC50YXJnZXQpXG4gICAgICAgICAgICAuY2xvc2VzdChcInRyXCIpXG4gICAgICAgICAgICAuZGF0YShcImlkXCIpO1xuICAgICAgICB2YXIgZGF0YXNldCA9IEdhbGF4eS5saWJyYXJpZXMuZm9sZGVyTGlzdFZpZXcuY29sbGVjdGlvbi5nZXQoZGF0YXNldF9pZCk7XG4gICAgICAgIGRhdGFzZXQudXJsID0gYCR7ZGF0YXNldC51cmxSb290ICsgZGF0YXNldC5pZH0/dW5kZWxldGU9dHJ1ZWA7XG4gICAgICAgIGRhdGFzZXQuZGVzdHJveSh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihtb2RlbCwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBHYWxheHkubGlicmFyaWVzLmZvbGRlckxpc3RWaWV3LmNvbGxlY3Rpb24ucmVtb3ZlKGRhdGFzZXRfaWQpO1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkX2RhdGFzZXQgPSBuZXcgbW9kX2xpYnJhcnlfbW9kZWwuSXRlbShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgR2FsYXh5LmxpYnJhcmllcy5mb2xkZXJMaXN0Vmlldy5jb2xsZWN0aW9uLmFkZCh1cGRhdGVkX2RhdGFzZXQpO1xuICAgICAgICAgICAgICAgIEdhbGF4eS5saWJyYXJpZXMuZm9sZGVyTGlzdFZpZXcuY29sbGVjdGlvbi5zb3J0Rm9sZGVyKFwibmFtZVwiLCBcImFzY1wiKTtcbiAgICAgICAgICAgICAgICBtb2RfdG9hc3RyLnN1Y2Nlc3MoXCJEYXRhc2V0IHVuZGVsZXRlZC4gQ2xpY2sgdGhpcyB0byBzZWUgaXQuXCIsIFwiXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9sZGVyX2lkID0gdGhhdC5tb2RlbC5nZXQoXCJmb2xkZXJfaWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgJHtHYWxheHkucm9vdH1saWJyYXJ5L2xpc3QjZm9sZGVycy8ke2ZvbGRlcl9pZH0vZGF0YXNldHMvJHt0aGF0LmlkfWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24obW9kZWwsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5yZXNwb25zZUpTT04gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kX3RvYXN0ci5lcnJvcihgRGF0YXNldCB3YXMgbm90IHVuZGVsZXRlZC4gJHtyZXNwb25zZS5yZXNwb25zZUpTT04uZXJyX21zZ31gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtb2RfdG9hc3RyLmVycm9yKFwiQW4gZXJyb3Igb2NjdXJlZCEgRGF0YXNldCB3YXMgbm90IHVuZGVsZXRlZC4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyogVW5kZWxldGUgdGhlIGZvbGRlciBvbiBzZXJ2ZXIgYW5kIHJlbmRlciB0aGUgcm93IGFnYWluLiAqL1xuICAgIHVuZGVsZXRlRm9sZGVyOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAkKFwiLnRvb2x0aXBcIikuaGlkZSgpO1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBmb2xkZXJfaWQgPSAkKGV2ZW50LnRhcmdldClcbiAgICAgICAgICAgIC5jbG9zZXN0KFwidHJcIilcbiAgICAgICAgICAgIC5kYXRhKFwiaWRcIik7XG4gICAgICAgIHZhciBmb2xkZXIgPSBHYWxheHkubGlicmFyaWVzLmZvbGRlckxpc3RWaWV3LmNvbGxlY3Rpb24uZ2V0KGZvbGRlcl9pZCk7XG4gICAgICAgIGZvbGRlci51cmwgPSBgJHtmb2xkZXIudXJsUm9vdCArIGZvbGRlci5pZH0/dW5kZWxldGU9dHJ1ZWA7XG4gICAgICAgIGZvbGRlci5kZXN0cm95KHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKG1vZGVsLCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIEdhbGF4eS5saWJyYXJpZXMuZm9sZGVyTGlzdFZpZXcuY29sbGVjdGlvbi5yZW1vdmUoZm9sZGVyX2lkKTtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZF9mb2xkZXIgPSBuZXcgbW9kX2xpYnJhcnlfbW9kZWwuRm9sZGVyQXNNb2RlbChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgR2FsYXh5LmxpYnJhcmllcy5mb2xkZXJMaXN0Vmlldy5jb2xsZWN0aW9uLmFkZCh1cGRhdGVkX2ZvbGRlcik7XG4gICAgICAgICAgICAgICAgR2FsYXh5LmxpYnJhcmllcy5mb2xkZXJMaXN0Vmlldy5jb2xsZWN0aW9uLnNvcnRGb2xkZXIoXCJuYW1lXCIsIFwiYXNjXCIpO1xuICAgICAgICAgICAgICAgIG1vZF90b2FzdHIuc3VjY2VzcyhcIkZvbGRlciB1bmRlbGV0ZWQuXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihtb2RlbCwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlLnJlc3BvbnNlSlNPTiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBtb2RfdG9hc3RyLmVycm9yKGBGb2xkZXIgd2FzIG5vdCB1bmRlbGV0ZWQuICR7cmVzcG9uc2UucmVzcG9uc2VKU09OLmVycl9tc2d9YCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kX3RvYXN0ci5lcnJvcihcIkFuIGVycm9yIG9jY3VyZWQhIEZvbGRlciB3YXMgbm90IHVuZGVsZXRlZC4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyogVXNlciBjbGlja2VkIHRoZSAnZWRpdCcgYnV0dG9uIG9uIHJvdyBzbyByZW5kZXIgdGhlIHJvdyBhcyBlZGl0YWJsZS4gKi9cbiAgICBzdGFydE1vZGlmaWNhdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZWRpdF9tb2RlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZXBhaW50KCk7XG4gICAgfSxcblxuICAgIC8qIFVzZXIgY2xpY2tlZCB0aGUgJ2NhbmNlbCcgYnV0dG9uIHNvIHJlbmRlciBub3JtYWwgcm93ICovXG4gICAgY2FuY2VsTW9kaWZpY2F0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5lZGl0X21vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXBhaW50KCk7XG4gICAgfSxcblxuICAgIHNhdmVNb2RpZmljYXRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGZvbGRlciA9IEdhbGF4eS5saWJyYXJpZXMuZm9sZGVyTGlzdFZpZXcuY29sbGVjdGlvbi5nZXQodGhpcy4kZWwuZGF0YShcImlkXCIpKTtcbiAgICAgICAgdmFyIGlzX2NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIG5ld19uYW1lID0gdGhpcy4kZWwuZmluZChcIi5pbnB1dF9mb2xkZXJfbmFtZVwiKS52YWwoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdfbmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuZXdfbmFtZSAhPT0gZm9sZGVyLmdldChcIm5hbWVcIikpIHtcbiAgICAgICAgICAgIGlmIChuZXdfbmFtZS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgZm9sZGVyLnNldChcIm5hbWVcIiwgbmV3X25hbWUpO1xuICAgICAgICAgICAgICAgIGlzX2NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb2RfdG9hc3RyLndhcm5pbmcoXCJGb2xkZXIgbmFtZSBoYXMgdG8gYmUgYXQgbGVhc3QgMyBjaGFyYWN0ZXJzIGxvbmcuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3X2Rlc2NyaXB0aW9uID0gdGhpcy4kZWwuZmluZChcIi5pbnB1dF9mb2xkZXJfZGVzY3JpcHRpb25cIikudmFsKCk7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3X2Rlc2NyaXB0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIG5ld19kZXNjcmlwdGlvbiAhPT0gZm9sZGVyLmdldChcImRlc2NyaXB0aW9uXCIpKSB7XG4gICAgICAgICAgICBmb2xkZXIuc2V0KFwiZGVzY3JpcHRpb25cIiwgbmV3X2Rlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGlzX2NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc19jaGFuZ2VkKSB7XG4gICAgICAgICAgICB2YXIgcm93X3ZpZXcgPSB0aGlzO1xuICAgICAgICAgICAgZm9sZGVyLnNhdmUobnVsbCwge1xuICAgICAgICAgICAgICAgIHBhdGNoOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGZvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICByb3dfdmlldy5vcHRpb25zLmVkaXRfbW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByb3dfdmlldy5yZXBhaW50KGZvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgIG1vZF90b2FzdHIuc3VjY2VzcyhcIkNoYW5nZXMgdG8gZm9sZGVyIHNhdmVkLlwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihtb2RlbCwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5yZXNwb25zZUpTT04gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZF90b2FzdHIuZXJyb3IocmVzcG9uc2UucmVzcG9uc2VKU09OLmVycl9tc2cpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kX3RvYXN0ci5lcnJvcihcIkFuIGVycm9yIG9jY3VyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byB1cGRhdGUgdGhlIGZvbGRlci5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5lZGl0X21vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVwYWludChmb2xkZXIpO1xuICAgICAgICAgICAgbW9kX3RvYXN0ci5pbmZvKFwiTm90aGluZyBoYXMgY2hhbmdlZC5cIik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVwYWludDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qIG5lZWQgdG8gaGlkZSBtYW51YWxseSBiZWNhdXNlIG9mIHRoZSBlbGVtZW50IHJlbW92YWwgaW4gc2V0RWxlbWVudFxuICAgIGludm9rZWQgaW4gcmVuZGVyKCkgKi9cbiAgICAgICAgJChcIi50b29sdGlwXCIpLmhpZGUoKTtcbiAgICAgICAgLyogd2UgbmVlZCB0byBzdG9yZSB0aGUgb2xkIGVsZW1lbnQgdG8gYmUgYWJsZSB0byByZXBsYWNlIGl0IHdpdGhcbiAgICBuZXcgb25lICovXG4gICAgICAgIHZhciBvbGRfZWxlbWVudCA9IHRoaXMuJGVsO1xuICAgICAgICAvKiBpZiB1c2VyIGNhbmNlbGVkIHRoZSBmb2xkZXIgcGFyYW0gaXMgdW5kZWZpbmVkLFxuICAgICAgaWYgdXNlciBzYXZlZCBhbmQgc3VjY2VlZGVkIHRoZSB1cGRhdGVkIGZvbGRlciBpcyByZW5kZXJlZCAqL1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICBvbGRfZWxlbWVudC5yZXBsYWNlV2l0aCh0aGlzLiRlbCk7XG4gICAgICAgIC8qIG5vdyB3ZSBhdHRhY2ggbmV3IHRvb2x0aXBzIHRvIHRoZSBuZXdseSBjcmVhdGVkIHJvdyBlbGVtZW50ICovXG4gICAgICAgIHRoaXMuJGVsLmZpbmQoXCJbZGF0YS10b2dnbGVdXCIpLnRvb2x0aXAoKTtcbiAgICB9LFxuXG4gICAgdGVtcGxhdGVSb3dGb2xkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZShcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnPHRyIGNsYXNzPVwiZm9sZGVyX3JvdyBsaWdodCBsaWJyYXJ5LXJvd1wiIGRhdGEtaWQ9XCI8JS0gY29udGVudF9pdGVtLmlkICU+XCI+JyxcbiAgICAgICAgICAgICAgICBcIjx0ZD5cIixcbiAgICAgICAgICAgICAgICAnPHNwYW4gdGl0bGU9XCJGb2xkZXJcIiBjbGFzcz1cImZhIGZhLWZvbGRlci1vXCIvPicsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgICc8dGQgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IFwiPjxpbnB1dCBzdHlsZT1cIm1hcmdpbjogMDtcIiB0eXBlPVwiY2hlY2tib3hcIj48L3RkPicsXG4gICAgICAgICAgICAgICAgXCI8JSBpZighZWRpdF9tb2RlKSB7ICU+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjZm9sZGVycy88JS0gY29udGVudF9pdGVtLmlkICU+XCI+PCUtIGNvbnRlbnRfaXRlbS5nZXQoXCJuYW1lXCIpICU+PC9hPicsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8JS0gY29udGVudF9pdGVtLmdldChcImRlc2NyaXB0aW9uXCIpICU+JyxcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8JSB9IGVsc2UgaWYoZWRpdF9tb2RlKXsgJT5cIixcbiAgICAgICAgICAgICAgICAnPHRkPjx0ZXh0YXJlYSByb3dzPVwiNFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGlucHV0X2ZvbGRlcl9uYW1lXCIgcGxhY2Vob2xkZXI9XCJuYW1lXCIgPjwlLSBjb250ZW50X2l0ZW0uZ2V0KFwibmFtZVwiKSAlPjwvdGV4dGFyZWE+PC90ZD4nLFxuICAgICAgICAgICAgICAgICc8dGQ+PHRleHRhcmVhIHJvd3M9XCI0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXRfZm9sZGVyX2Rlc2NyaXB0aW9uXCIgcGxhY2Vob2xkZXI9XCJkZXNjcmlwdGlvblwiID48JS0gY29udGVudF9pdGVtLmdldChcImRlc2NyaXB0aW9uXCIpICU+PC90ZXh0YXJlYT48L3RkPicsXG4gICAgICAgICAgICAgICAgXCI8JSB9ICU+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+Zm9sZGVyPC90ZD5cIixcbiAgICAgICAgICAgICAgICBcIjx0ZD48L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8JT0gXy5lc2NhcGUoY29udGVudF9pdGVtLmdldChcInVwZGF0ZV90aW1lXCIpKSAlPicsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8JSBpZihlZGl0X21vZGUpIHsgJT5cIiwgLy8gc3RhcnQgZWRpdCBtb2RlXG4gICAgICAgICAgICAgICAgJzxidXR0b24gZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIlNhdmUgY2hhbmdlc1wiIGNsYXNzPVwicHJpbWFyeS1idXR0b24gYnRuLXhzIHNhdmVfZm9sZGVyX2J0blwiIHR5cGU9XCJidXR0b25cIiBzdHlsZT1cIjwlIGlmKGJ1dHRvbl9jb25maWcuc2F2ZV9mb2xkZXJfYnRuID09PSBmYWxzZSkgeyBwcmludChcImRpc3BsYXk6bm9uZTtcIikgfSAlPlwiPicsXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmEgZmEtZmxvcHB5LW9cIi8+IFNhdmUnLFxuICAgICAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgICAgICAgICAgJzxidXR0b24gZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIkRpc2NhcmQgY2hhbmdlc1wiIGNsYXNzPVwicHJpbWFyeS1idXR0b24gYnRuLXhzIGNhbmNlbF9mb2xkZXJfYnRuXCIgdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwiPCUgaWYoYnV0dG9uX2NvbmZpZy5jYW5jZWxfZm9sZGVyX2J0biA9PT0gZmFsc2UpIHsgcHJpbnQoXCJkaXNwbGF5Om5vbmU7XCIpIH0gJT5cIj4nLFxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZhIGZhLXRpbWVzXCIvPiBDYW5jZWwnLFxuICAgICAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgICAgICAgICAgXCI8JSB9IGVsc2UgaWYgKCFlZGl0X21vZGUpeyU+XCIsIC8vIHN0YXJ0IG5vIGVkaXQgbW9kZVxuICAgICAgICAgICAgICAgICc8YnV0dG9uIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCJNb2RpZnkgXFwnPCUtIGNvbnRlbnRfaXRlbS5nZXQoXCJuYW1lXCIpICU+XFwnXCIgY2xhc3M9XCJwcmltYXJ5LWJ1dHRvbiBidG4teHMgZWRpdF9mb2xkZXJfYnRuXCIgdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwiPCUgaWYoYnV0dG9uX2NvbmZpZy5lZGl0X2ZvbGRlcl9idG4gPT09IGZhbHNlKSB7IHByaW50KFwiZGlzcGxheTpub25lO1wiKSB9ICU+XCI+JyxcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYSBmYS1wZW5jaWxcIi8+IEVkaXQnLFxuICAgICAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjL2ZvbGRlcnMvPCUtIGNvbnRlbnRfaXRlbS5pZCAlPi9wZXJtaXNzaW9uc1wiPicsXG4gICAgICAgICAgICAgICAgJzxidXR0b24gZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiBjbGFzcz1cInByaW1hcnktYnV0dG9uIGJ0bi14cyBwZXJtaXNzaW9uX2ZvbGRlcl9idG5cIiB0aXRsZT1cIlBlcm1pc3Npb25zIG9mIFxcJzwlLSBjb250ZW50X2l0ZW0uZ2V0KFwibmFtZVwiKSAlPlxcJ1wiIHN0eWxlPVwiPCUgaWYoYnV0dG9uX2NvbmZpZy5wZXJtaXNzaW9uX2ZvbGRlcl9idG4gPT09IGZhbHNlKSB7IHByaW50KFwiZGlzcGxheTpub25lO1wiKSB9ICU+XCI+JyxcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYSBmYS1ncm91cFwiLz4gTWFuYWdlJyxcbiAgICAgICAgICAgICAgICBcIjwvYnV0dG9uPlwiLFxuICAgICAgICAgICAgICAgIFwiPC9hPlwiLFxuICAgICAgICAgICAgICAgIFwiPCUgfSAlPlwiLCAvL2VuZCBubyBlZGl0IG1vZGVcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8L3RyPlwiXG4gICAgICAgICAgICBdLmpvaW4oXCJcIilcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgdGVtcGxhdGVSb3dGaWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF8udGVtcGxhdGUoXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJzx0ciBjbGFzcz1cImRhdGFzZXRfcm93IGxpZ2h0IGxpYnJhcnktcm93XCIgZGF0YS1pZD1cIjwlLSBjb250ZW50X2l0ZW0uaWQgJT5cIj4nLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8c3BhbiB0aXRsZT1cIkRhdGFzZXRcIiBjbGFzcz1cImZhIGZhLWZpbGUtb1wiLz4nLFxuICAgICAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICAgICAnPHRkIHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyOyBcIj4nLFxuICAgICAgICAgICAgICAgICc8aW5wdXQgc3R5bGU9XCJtYXJnaW46IDA7XCIgdHlwZT1cImNoZWNrYm94XCI+JyxcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjZm9sZGVycy88JS0gY29udGVudF9pdGVtLmdldChcImZvbGRlcl9pZFwiKSAlPi9kYXRhc2V0cy88JS0gY29udGVudF9pdGVtLmlkICU+XCIgY2xhc3M9XCJsaWJyYXJ5LWRhdGFzZXRcIj4nLFxuICAgICAgICAgICAgICAgICc8JS0gY29udGVudF9pdGVtLmdldChcIm5hbWVcIikgJT4nLFxuICAgICAgICAgICAgICAgIFwiPGE+XCIsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgICc8dGQ+PCUtIGNvbnRlbnRfaXRlbS5nZXQoXCJtZXNzYWdlXCIpICU+PC90ZD4nLFxuICAgICAgICAgICAgICAgICc8dGQ+PCU9IF8uZXNjYXBlKGNvbnRlbnRfaXRlbS5nZXQoXCJmaWxlX2V4dFwiKSkgJT48L3RkPicsXG4gICAgICAgICAgICAgICAgJzx0ZD48JT0gXy5lc2NhcGUoY29udGVudF9pdGVtLmdldChcImZpbGVfc2l6ZVwiKSkgJT48L3RkPicsXG4gICAgICAgICAgICAgICAgJzx0ZD48JT0gXy5lc2NhcGUoY29udGVudF9pdGVtLmdldChcInVwZGF0ZV90aW1lXCIpKSAlPjwvdGQ+JyxcbiAgICAgICAgICAgICAgICBcIjx0ZD5cIixcbiAgICAgICAgICAgICAgICAnPCUgaWYgKCBjb250ZW50X2l0ZW0uZ2V0KFwic3RhdGVcIikgIT09IFwib2tcIiApIHsgJT4nLFxuICAgICAgICAgICAgICAgICc8JT0gXy5lc2NhcGUoY29udGVudF9pdGVtLmdldChcInN0YXRlXCIpKSAlPicsXG4gICAgICAgICAgICAgICAgXCI8JSB9ICU+XCIsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8JSBpZiAoY29udGVudF9pdGVtLmdldChcImlzX3VucmVzdHJpY3RlZFwiKSkgeyAlPicsXG4gICAgICAgICAgICAgICAgJzxzcGFuIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCJVbnJlc3RyaWN0ZWQgZGF0YXNldFwiIHN0eWxlPVwiY29sb3I6Z3JleTtcIiBjbGFzcz1cImZhIGZhLWdsb2JlIGZhLWxnXCIvPicsXG4gICAgICAgICAgICAgICAgXCI8JSB9ICU+XCIsXG4gICAgICAgICAgICAgICAgJzwlIGlmIChjb250ZW50X2l0ZW0uZ2V0KFwiaXNfcHJpdmF0ZVwiKSkgeyAlPicsXG4gICAgICAgICAgICAgICAgJzxzcGFuIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCJQcml2YXRlIGRhdGFzZXRcIiBzdHlsZT1cImNvbG9yOmdyZXk7XCIgY2xhc3M9XCJmYSBmYS1rZXkgZmEtbGdcIi8+JyxcbiAgICAgICAgICAgICAgICBcIjwlIH0gJT5cIixcbiAgICAgICAgICAgICAgICAnPCUgaWYgKChjb250ZW50X2l0ZW0uZ2V0KFwiaXNfdW5yZXN0cmljdGVkXCIpID09PSBmYWxzZSkgJiYgKGNvbnRlbnRfaXRlbS5nZXQoXCJpc19wcml2YXRlXCIpID09PSBmYWxzZSkpIHsgJT4nLFxuICAgICAgICAgICAgICAgICc8c3BhbiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIHRpdGxlPVwiUmVzdHJpY3RlZCBkYXRhc2V0XCIgc3R5bGU9XCJjb2xvcjpncmV5O1wiIGNsYXNzPVwiZmEgZmEtc2hpZWxkIGZhLWxnXCIvPicsXG4gICAgICAgICAgICAgICAgXCI8JSB9ICU+XCIsXG4gICAgICAgICAgICAgICAgJzwlIGlmIChjb250ZW50X2l0ZW0uZ2V0KFwiY2FuX21hbmFnZVwiKSkgeyAlPicsXG4gICAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjZm9sZGVycy88JS0gY29udGVudF9pdGVtLmdldChcImZvbGRlcl9pZFwiKSAlPi9kYXRhc2V0cy88JS0gY29udGVudF9pdGVtLmlkICU+L3Blcm1pc3Npb25zXCI+JyxcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIGNsYXNzPVwicHJpbWFyeS1idXR0b24gYnRuLXhzIHBlcm1pc3Npb25zLWRhdGFzZXQtYnRuXCIgdGl0bGU9XCJQZXJtaXNzaW9ucyBvZiBcXCc8JS0gY29udGVudF9pdGVtLmdldChcIm5hbWVcIikgJT5cXCdcIj4nLFxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZhIGZhLWdyb3VwXCIvPiBNYW5hZ2UnLFxuICAgICAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgICAgICAgICAgXCI8L2E+XCIsXG4gICAgICAgICAgICAgICAgXCI8JSB9ICU+XCIsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPC90cj5cIlxuICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHRlbXBsYXRlUm93RGVsZXRlZEZpbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXy50ZW1wbGF0ZShcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnPHRyIGNsYXNzPVwiYWN0aXZlIGRlbGV0ZWRfZGF0YXNldCBsaWJyYXJ5LXJvd1wiIGRhdGEtaWQ9XCI8JS0gY29udGVudF9pdGVtLmlkICU+XCI+JyxcbiAgICAgICAgICAgICAgICBcIjx0ZD5cIixcbiAgICAgICAgICAgICAgICAnPHNwYW4gdGl0bGU9XCJEYXRhc2V0XCIgY2xhc3M9XCJmYSBmYS1maWxlLW9cIi8+JyxcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+PC90ZD5cIixcbiAgICAgICAgICAgICAgICAnPHRkIHN0eWxlPVwiY29sb3I6Z3JleTtcIj4nLFxuICAgICAgICAgICAgICAgICc8JS0gY29udGVudF9pdGVtLmdldChcIm5hbWVcIikgJT4nLFxuICAgICAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICAgICBcIjx0ZD5cIixcbiAgICAgICAgICAgICAgICAnPCUtIGNvbnRlbnRfaXRlbS5nZXQoXCJtZXNzYWdlXCIpICU+JyxcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgJzwlPSBfLmVzY2FwZShjb250ZW50X2l0ZW0uZ2V0KFwiZmlsZV9leHRcIikpICU+JyxcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgJzwlPSBfLmVzY2FwZShjb250ZW50X2l0ZW0uZ2V0KFwiZmlsZV9zaXplXCIpKSAlPicsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8JT0gXy5lc2NhcGUoY29udGVudF9pdGVtLmdldChcInVwZGF0ZV90aW1lXCIpKSAlPicsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8JSBpZiAoIGNvbnRlbnRfaXRlbS5nZXQoXCJzdGF0ZVwiKSAhPT0gXCJva1wiICkgeyAlPicsXG4gICAgICAgICAgICAgICAgJzwlPSBfLmVzY2FwZShjb250ZW50X2l0ZW0uZ2V0KFwic3RhdGVcIikpICU+JyxcbiAgICAgICAgICAgICAgICBcIjwlIH0gJT5cIixcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgJzxzcGFuIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCJNYXJrZWQgZGVsZXRlZFwiIHN0eWxlPVwiY29sb3I6Z3JleTtcIiBjbGFzcz1cImZhIGZhLWJhbiBmYS1sZ1wiLz4nLFxuICAgICAgICAgICAgICAgICc8YnV0dG9uIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCJVbmRlbGV0ZSBcXCc8JS0gY29udGVudF9pdGVtLmdldChcIm5hbWVcIikgJT5cXCdcIiBjbGFzcz1cInByaW1hcnktYnV0dG9uIGJ0bi14cyB1bmRlbGV0ZV9kYXRhc2V0X2J0blwiIHR5cGU9XCJidXR0b25cIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjFlbTtcIj4nLFxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZhIGZhLXVubG9ja1wiLz4gVW5kZWxldGUnLFxuICAgICAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPC90cj5cIlxuICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHRlbXBsYXRlUm93RGVsZXRlZEZvbGRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfLnRlbXBsYXRlKFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICc8dHIgY2xhc3M9XCJhY3RpdmUgZGVsZXRlZF9mb2xkZXIgbGlnaHQgbGlicmFyeS1yb3dcIiBkYXRhLWlkPVwiPCUtIGNvbnRlbnRfaXRlbS5pZCAlPlwiPicsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgJzxzcGFuIHRpdGxlPVwiRm9sZGVyXCIgY2xhc3M9XCJmYSBmYS1mb2xkZXItb1wiLz4nLFxuICAgICAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICAgICBcIjx0ZD48L3RkPlwiLFxuICAgICAgICAgICAgICAgICc8dGQgc3R5bGU9XCJjb2xvcjpncmV5O1wiPicsXG4gICAgICAgICAgICAgICAgJzwlLSBjb250ZW50X2l0ZW0uZ2V0KFwibmFtZVwiKSAlPicsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8JS0gY29udGVudF9pdGVtLmdldChcImRlc2NyaXB0aW9uXCIpICU+JyxcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAgICAgXCJmb2xkZXJcIixcbiAgICAgICAgICAgICAgICBcIjwvdGQ+XCIsXG4gICAgICAgICAgICAgICAgXCI8dGQ+PC90ZD5cIixcbiAgICAgICAgICAgICAgICBcIjx0ZD5cIixcbiAgICAgICAgICAgICAgICAnPCU9IF8uZXNjYXBlKGNvbnRlbnRfaXRlbS5nZXQoXCJ1cGRhdGVfdGltZVwiKSkgJT4nLFxuICAgICAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICAgICBcIjx0ZD48L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgICc8c3BhbiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIHRpdGxlPVwiTWFya2VkIGRlbGV0ZWRcIiBzdHlsZT1cImNvbG9yOmdyZXk7XCIgY2xhc3M9XCJmYSBmYS1iYW4gZmEtbGdcIi8+JyxcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIHRpdGxlPVwiVW5kZWxldGUgXFwnPCUtIGNvbnRlbnRfaXRlbS5nZXQoXCJuYW1lXCIpICU+XFwnXCIgY2xhc3M9XCJwcmltYXJ5LWJ1dHRvbiBidG4teHMgdW5kZWxldGVfZm9sZGVyX2J0blwiIHR5cGU9XCJidXR0b25cIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjFlbTtcIj4nLFxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZhIGZhLXVubG9ja1wiLz4gVW5kZWxldGUnLFxuICAgICAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgICAgIFwiPC90cj5cIlxuICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBGb2xkZXJSb3dWaWV3OiBGb2xkZXJSb3dWaWV3XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9saWJyYXJ5L2xpYnJhcnktZm9sZGVycm93LXZpZXcuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBUkE7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQkE7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEE7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkE7QUFlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEwQkE7QUFPQTtBQVNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUE0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFvQ0E7QUFDQTtBQUNBO0FBQ0E7QUE4QkE7QUExWUE7QUFDQTtBQTRZQTtBQUNBO0FBREE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///299\n");

/***/ }),

/***/ 300:
/*!****************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-librarylist-view.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _libraryLibraryrowView = __webpack_require__(/*! mvc/library/library-libraryrow-view */ 301);\n\nvar _libraryLibraryrowView2 = _interopRequireDefault(_libraryLibraryrowView);\n\nvar _underscore = __webpack_require__(/*! libs/underscore */ 1);\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LibraryListView = Backbone.View.extend({\n    el: \"#libraries_element\",\n\n    events: {\n        \"click .sort-libraries-link\": \"sort_clicked\"\n    },\n\n    defaults: {\n        page_count: null,\n        show_page: null,\n        all_fetched: false\n    },\n\n    /**\n     * Initialize and fetch the libraries from server.\n     * Async render afterwards.\n     * @param  {object} options an object with options\n     */\n    initialize: function initialize(options) {\n        this.options = _underscore2.default.defaults(this.options || {}, options, this.defaults);\n        var that = this;\n        this.modal = null;\n        // collection of {Item}s\n        this.collection = new _libraryModel2.default.Libraries();\n        this.collection.url = this.collection.urlRoot + \"?deleted=false\";\n        this.collection.fetch({\n            success: function success() {\n                that.render();\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n     * Render the libraries table either from the object's own collection,\n     * or from a given array of library models,\n     * or render an empty list in case no data is given.\n     */\n    render: function render(options) {\n        this.options = _underscore2.default.extend(this.options, options);\n        this.setElement(\"#libraries_element\");\n        var template = this.templateLibraryList();\n        var libraries_to_render = null;\n        var models = null;\n        var is_public = function is_public(model) {\n            return model.get(\"public\") === true;\n        };\n        $(\".tooltip\").hide();\n        if (typeof options !== \"undefined\") {\n            models = typeof options.models !== \"undefined\" ? options.models : null;\n        }\n        if (this.collection !== null && models === null) {\n            this.sortLibraries();\n            if (Galaxy.libraries.preferences.get(\"with_deleted\")) {\n                libraries_to_render = this.collection.models;\n            } else {\n                libraries_to_render = this.collection.where({\n                    deleted: false\n                });\n            }\n            if (Galaxy.libraries.preferences.get(\"without_restricted\")) {\n                libraries_to_render = _underscore2.default.filter(libraries_to_render, is_public);\n            }\n        } else if (models !== null) {\n            if (Galaxy.libraries.preferences.get(\"with_deleted\")) {\n                libraries_to_render = models;\n            } else {\n                var is_deleted = function is_deleted(model) {\n                    return model.get(\"deleted\") === false;\n                };\n                libraries_to_render = _underscore2.default.filter(models, is_deleted);\n            }\n            if (Galaxy.libraries.preferences.get(\"without_restricted\")) {\n                libraries_to_render = _underscore2.default.filter(libraries_to_render, is_public);\n            }\n        } else {\n            libraries_to_render = [];\n        }\n\n        // pagination\n        if (this.options.show_page === null || this.options.show_page < 1) {\n            this.options.show_page = 1;\n        }\n        this.options.total_libraries_count = libraries_to_render.length;\n        var page_start = Galaxy.libraries.preferences.get(\"library_page_size\") * (this.options.show_page - 1);\n        this.options.page_count = Math.ceil(this.options.total_libraries_count / Galaxy.libraries.preferences.get(\"library_page_size\"));\n        if (this.options.total_libraries_count > 0 && page_start < this.options.total_libraries_count) {\n            libraries_to_render = libraries_to_render.slice(page_start, page_start + Galaxy.libraries.preferences.get(\"library_page_size\"));\n            this.options.libraries_shown = libraries_to_render.length;\n            // User requests page with no libraries\n            if (Galaxy.libraries.preferences.get(\"library_page_size\") * this.options.show_page > this.options.total_libraries_count + Galaxy.libraries.preferences.get(\"library_page_size\")) {\n                libraries_to_render = [];\n            }\n            this.$el.html(template({\n                length: 1,\n                order: Galaxy.libraries.preferences.get(\"sort_order\"),\n                search_term: Galaxy.libraries.libraryToolbarView.options.search_term\n            }));\n            Galaxy.libraries.libraryToolbarView.renderPaginator(this.options);\n            this.renderRows(libraries_to_render);\n        } else {\n            this.$el.html(template({\n                length: 0,\n                order: Galaxy.libraries.preferences.get(\"sort_order\"),\n                search_term: Galaxy.libraries.libraryToolbarView.options.search_term\n            }));\n            Galaxy.libraries.libraryToolbarView.renderPaginator(this.options);\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    fetchDeleted: function fetchDeleted() {\n        if (this.options.all_fetched) {\n            this.render();\n        } else {\n            var that = this;\n            this.collection.url = this.collection.urlRoot + \"?deleted=true\";\n            this.collection.fetch({\n                remove: false,\n                success: function success() {\n                    that.options.all_fetched = true;\n                    that.render();\n                },\n                error: function error(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    /**\n     * Render all given models as rows in the library list\n     * @param  {array} libraries_to_render array of library models to render\n     */\n    renderRows: function renderRows(libraries_to_render) {\n        for (var i = 0; i < libraries_to_render.length; i++) {\n            var library = libraries_to_render[i];\n            this.renderOne({ library: library });\n        }\n    },\n\n    /**\n     * Create a view for the given model and add it to the libraries view.\n     * @param {Library} model of the view that will be rendered\n     */\n    renderOne: function renderOne(options) {\n        var library = options.library;\n        var rowView = new _libraryLibraryrowView2.default.LibraryRowView(library);\n        this.$el.find(\"#library_list_body\").append(rowView.el);\n    },\n\n    /**\n     * Table heading was clicked, update sorting preferences and re-render.\n     * @return {[type]} [description]\n     */\n    sort_clicked: function sort_clicked() {\n        if (Galaxy.libraries.preferences.get(\"sort_order\") === \"asc\") {\n            Galaxy.libraries.preferences.set({ sort_order: \"desc\" });\n        } else {\n            Galaxy.libraries.preferences.set({ sort_order: \"asc\" });\n        }\n        this.render();\n    },\n\n    /**\n     * Sort the underlying collection according to the parameters received.\n     * Currently supports only sorting by name.\n     */\n    sortLibraries: function sortLibraries() {\n        if (Galaxy.libraries.preferences.get(\"sort_by\") === \"name\") {\n            if (Galaxy.libraries.preferences.get(\"sort_order\") === \"asc\") {\n                this.collection.sortLibraries(\"name\", \"asc\");\n            } else if (Galaxy.libraries.preferences.get(\"sort_order\") === \"desc\") {\n                this.collection.sortLibraries(\"name\", \"desc\");\n            }\n        }\n    },\n\n    /**\n     * In case the search_term is not empty perform the search and render\n     * the result. Render all visible libraries otherwise.\n     * @param  {string} search_term string to search for\n     */\n    searchLibraries: function searchLibraries(search_term) {\n        var trimmed_term = $.trim(search_term);\n        if (trimmed_term !== \"\") {\n            var results = null;\n            results = this.collection.search(search_term);\n            this.options.searching = true;\n            this.render({ models: results, show_page: 1 });\n        } else {\n            this.options.searching = false;\n            this.render();\n        }\n    },\n\n    // MMMMMMMMMMMMMMMMMM\n    // === TEMPLATES ====\n    // MMMMMMMMMMMMMMMMMM\n\n    templateLibraryList: function templateLibraryList() {\n        return _underscore2.default.template(['<div class=\"library_container table-responsive\">', \"<% if(length === 0) { %>\", \"<% if(search_term.length > 0) { %>\", \"<div>\", \"There are no libraries matching your search. Try different keyword.\", \"</div>\", \"<% } else{ %>\", \"<div>\", \"There are no libraries visible to you here. If you expected some to show up please consult the\", ' <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>', ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.', \"</div>\", \"<% }%>\", \"<% } else{ %>\", '<table class=\"grid table table-condensed\">', \"<thead>\", '<th style=\"width:30%;\">', '<a class=\"sort-libraries-link\" title=\"Click to reverse order\" href=\"#\">', \"name\", \"</a>\", '<span title=\"Sorted alphabetically\" class=\"fa fa-sort-alpha-<%- order %>\"/>', \"</th>\", '<th style=\"width:22%;\">description</th>', '<th style=\"width:22%;\">synopsis</th> ', '<th style=\"width:26%;\"></th>', \"</thead>\", '<tbody id=\"library_list_body\">',\n        // library item views will attach here\n        \"</tbody>\", \"</table>\", \"<% }%>\", \"</div>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    LibraryListView: LibraryListView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///300\n");

/***/ }),

/***/ 301:
/*!***************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-libraryrow-view.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// galaxy library row view\nvar LibraryRowView = Backbone.View.extend({\n    events: {\n        \"click .edit_library_btn\": \"edit_button_clicked\",\n        \"click .cancel_library_btn\": \"cancel_library_modification\",\n        \"click .save_library_btn\": \"save_library_modification\",\n        \"click .delete_library_btn\": \"delete_library\",\n        \"click .undelete_library_btn\": \"undelete_library\"\n    },\n\n    edit_mode: false,\n\n    element_visibility_config: {\n        upload_library_btn: false,\n        edit_library_btn: false,\n        permission_library_btn: false,\n        save_library_btn: false,\n        cancel_library_btn: false,\n        delete_library_btn: false,\n        undelete_library_btn: false\n    },\n\n    initialize: function initialize(library) {\n        this.render(library);\n    },\n\n    render: function render(library) {\n        if (typeof library === \"undefined\") {\n            library = Galaxy.libraries.libraryListView.collection.get(this.$el.data(\"id\"));\n        }\n        this.prepareButtons(library);\n        var tmpl = this.templateRow();\n        this.setElement(tmpl({\n            library: library,\n            button_config: this.element_visibility_config,\n            edit_mode: this.edit_mode\n        }));\n        this.$el.show();\n        return this;\n    },\n\n    repaint: function repaint(library) {\n        /* need to hide manually because of the element removal in setElement\n        invoked in render() */\n        $(\".tooltip\").hide();\n        /* we need to store the old element to be able to replace it with\n        new one */\n        var old_element = this.$el;\n        /* if user canceled the library param is undefined,\n        if user saved and succeeded the updated library is rendered */\n        this.render();\n        old_element.replaceWith(this.$el);\n        /* now we attach new tooltips to the newly created row element */\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    /**\n     * Function modifies the visibility of buttons for\n     * the filling of the row template of given library.\n     */\n    prepareButtons: function prepareButtons(library) {\n        var vis_config = this.element_visibility_config;\n\n        if (this.edit_mode === false) {\n            vis_config.save_library_btn = false;\n            vis_config.cancel_library_btn = false;\n            vis_config.delete_library_btn = false;\n            if (library.get(\"deleted\") === true) {\n                vis_config.undelete_library_btn = true;\n                vis_config.upload_library_btn = false;\n                vis_config.edit_library_btn = false;\n                vis_config.permission_library_btn = false;\n            } else if (library.get(\"deleted\") === false) {\n                vis_config.save_library_btn = false;\n                vis_config.cancel_library_btn = false;\n                vis_config.undelete_library_btn = false;\n                if (library.get(\"can_user_add\") === true) {\n                    vis_config.upload_library_btn = true;\n                }\n                if (library.get(\"can_user_modify\") === true) {\n                    vis_config.edit_library_btn = true;\n                }\n                if (library.get(\"can_user_manage\") === true) {\n                    vis_config.permission_library_btn = true;\n                }\n            }\n        } else if (this.edit_mode === true) {\n            vis_config.upload_library_btn = false;\n            vis_config.edit_library_btn = false;\n            vis_config.permission_library_btn = false;\n            vis_config.save_library_btn = true;\n            vis_config.cancel_library_btn = true;\n            vis_config.delete_library_btn = true;\n            vis_config.undelete_library_btn = false;\n        }\n\n        this.element_visibility_config = vis_config;\n    },\n\n    /* User clicked the 'edit' button on row so we render a new row\n    that allows editing */\n    edit_button_clicked: function edit_button_clicked() {\n        this.edit_mode = true;\n        this.repaint();\n    },\n\n    /* User clicked the 'cancel' button so we render normal rowView */\n    cancel_library_modification: function cancel_library_modification() {\n        // mod_toastr.info('Modifications canceled');\n        this.edit_mode = false;\n        this.repaint();\n    },\n\n    save_library_modification: function save_library_modification() {\n        var library = Galaxy.libraries.libraryListView.collection.get(this.$el.data(\"id\"));\n        var is_changed = false;\n\n        var new_name = this.$el.find(\".input_library_name\").val();\n        if (typeof new_name !== \"undefined\" && new_name !== library.get(\"name\")) {\n            if (new_name.length > 2) {\n                library.set(\"name\", new_name);\n                is_changed = true;\n            } else {\n                _toastr2.default.warning(\"Library name has to be at least 3 characters long.\");\n                return;\n            }\n        }\n\n        var new_description = this.$el.find(\".input_library_description\").val();\n        if (typeof new_description !== \"undefined\" && new_description !== library.get(\"description\")) {\n            library.set(\"description\", new_description);\n            is_changed = true;\n        }\n\n        var new_synopsis = this.$el.find(\".input_library_synopsis\").val();\n        if (typeof new_synopsis !== \"undefined\" && new_synopsis !== library.get(\"synopsis\")) {\n            library.set(\"synopsis\", new_synopsis);\n            is_changed = true;\n        }\n\n        if (is_changed) {\n            var row_view = this;\n            library.save(null, {\n                patch: true,\n                success: function success(library) {\n                    row_view.edit_mode = false;\n                    row_view.repaint(library);\n                    _toastr2.default.success(\"Changes to library saved.\");\n                },\n                error: function error(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occured while attempting to update the library.\");\n                    }\n                }\n            });\n        } else {\n            this.edit_mode = false;\n            this.repaint(library);\n            _toastr2.default.info(\"Nothing has changed.\");\n        }\n    },\n\n    delete_library: function delete_library() {\n        var library = Galaxy.libraries.libraryListView.collection.get(this.$el.data(\"id\"));\n        var row_view = this;\n        // mark the library deleted\n        library.destroy({\n            success: function success(library) {\n                library.set(\"deleted\", true);\n                // add the new deleted library back to the collection (Galaxy specialty)\n                Galaxy.libraries.libraryListView.collection.add(library);\n                row_view.edit_mode = false;\n                if (Galaxy.libraries.preferences.get(\"with_deleted\") === false) {\n                    $(\".tooltip\").hide();\n                    row_view.repaint(library);\n                    row_view.$el.remove();\n                } else if (Galaxy.libraries.preferences.get(\"with_deleted\") === true) {\n                    row_view.repaint(library);\n                }\n                _toastr2.default.success(\"Library has been marked deleted.\");\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occured during deleting the library.\");\n                }\n            }\n        });\n    },\n\n    undelete_library: function undelete_library() {\n        var library = Galaxy.libraries.libraryListView.collection.get(this.$el.data(\"id\"));\n        var row_view = this;\n\n        // mark the library undeleted\n        library.url = library.urlRoot + library.id + \"?undelete=true\";\n        library.destroy({\n            success: function success(library) {\n                // add the newly undeleted library back to the collection\n                // backbone does not accept changes through destroy, so update it too\n                library.set(\"deleted\", false);\n                Galaxy.libraries.libraryListView.collection.add(library);\n                row_view.edit_mode = false;\n                row_view.repaint(library);\n                _toastr2.default.success(\"Library has been undeleted.\");\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occured while undeleting the library.\");\n                }\n            }\n        });\n    },\n\n    templateRow: function templateRow() {\n        return _.template(['<tr class=\"<% if(library.get(\"deleted\") === true) { print(\"active\") } %>\" style=\"display:none;\" data-id=\"<%- library.get(\"id\") %>\">', \"<% if(!edit_mode) { %>\", '<% if(library.get(\"deleted\")) { %>', '<td style=\"color:grey;\"><%- library.get(\"name\") %></td>', \"<% } else { %>\", '<td><a href=\"#folders/<%- library.get(\"root_folder_id\") %>\"><%- library.get(\"name\") %></a></td>', \"<% } %>\", '<% if(library.get(\"description\")) { %>', '<% if( (library.get(\"description\")).length> 80 ) { %>', '<td data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"<%= _.escape(library.get(\"description\")) %>\"><%= _.escape(library.get(\"description\")).substring(0, 80) + \"...\" %></td>', \"<% } else { %>\", '<td><%= _.escape(library.get(\"description\"))%></td>', \"<% } %>\", \"<% } else { %>\", \"<td></td>\", \"<% } %>\", '<% if(library.get(\"synopsis\")) { %>', '<% if( (library.get(\"synopsis\")).length> 120 ) { %>', '<td data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"<%= _.escape(library.get(\"synopsis\")) %>\"><%= _.escape(library.get(\"synopsis\")).substring(0, 120) + \"...\" %></td>', \"<% } else { %>\", '<td><%= _.escape(library.get(\"synopsis\"))%></td>', \"<% } %>\", \"<% } else { %>\", \"<td></td>\", \"<% } %>\", \"<% } else if(edit_mode){ %>\", '<td><textarea rows=\"4\" class=\"form-control input_library_name\" placeholder=\"name\" ><%- library.get(\"name\") %></textarea></td>', '<td><textarea rows=\"4\" class=\"form-control input_library_description\" placeholder=\"description\" ><%- library.get(\"description\") %></textarea></td>', '<td><textarea rows=\"4\" class=\"form-control input_library_synopsis\" placeholder=\"synopsis\" ><%- library.get(\"synopsis\") %></textarea></td>', \"<% } %>\", '<td class=\"right-center\">', '<% if( (library.get(\"public\")) && (library.get(\"deleted\") === false) ) { %>', '<span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Unrestricted library\" style=\"color:grey;\" class=\"fa fa-globe fa-lg\"> </span>', \"<% }%>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Modify \\'<%- library.get(\"name\") %>\\'\" class=\"primary-button btn-xs edit_library_btn\" type=\"button\" style=\"<% if(button_config.edit_library_btn === false) { print(\"display:none;\") } %>\"><span class=\"fa fa-pencil\"></span> Edit</button>', '<a href=\"#library/<%- library.get(\"id\") %>/permissions\"><button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Permissions of \\'<%- library.get(\"name\") %>\\'\" class=\"primary-button btn-xs permission_library_btn\" type=\"button\" style=\"<% if(button_config.permission_library_btn === false) { print(\"display:none;\") } %>\"><span class=\"fa fa-group\"></span> Manage</button></a>', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save changes\" class=\"primary-button btn-xs save_library_btn\" type=\"button\" style=\"<% if(button_config.save_library_btn === false) { print(\"display:none;\") } %>\"><span class=\"fa fa-floppy-o\"></span> Save</button>', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Discard changes\" class=\"primary-button btn-xs cancel_library_btn\" type=\"button\" style=\"<% if(button_config.cancel_library_btn === false) { print(\"display:none;\") } %>\"><span class=\"fa fa-times\"></span> Cancel</button>', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete \\'<%- library.get(\"name\") %>\\'\" class=\"primary-button btn-xs delete_library_btn\" type=\"button\" style=\"<% if(button_config.delete_library_btn === false) { print(\"display:none;\") } %>\"><span class=\"fa fa-trash-o\"></span> Delete</button>',\n        // For deleted libraries\n        '<span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Marked deleted\" style=\"color:grey; <% if(button_config.undelete_library_btn === false) { print(\"display:none;\") } %>\" class=\"fa fa-ban fa-lg\"></span>', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Undelete \\'<%- library.get(\"name\") %>\\' \" class=\"primary-button btn-xs undelete_library_btn\" type=\"button\" style=\"<% if(button_config.undelete_library_btn === false) { print(\"display:none;\") } %>\"><span class=\"fa fa-unlock\"></span> Undelete</button>', \"</td>\", \"</tr>\"].join(\"\"));\n    }\n}); // dependencies\nexports.default = {\n    LibraryRowView: LibraryRowView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///301\n");

/***/ }),

/***/ 302:
/*!*******************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-librarytoolbar-view.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This view represents the top part of the library page.\n * It contains the tool bar with controls.\n */\nvar LibraryToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    defaults: {\n        search_term: \"\"\n    },\n\n    events: {\n        \"click #create_new_library_btn\": \"createLibraryFromModal\",\n        \"click #include_deleted_chk\": \"includeDeletedChecked\",\n        \"click #exclude_restricted_chk\": \"excludeRestrictedChecked\",\n        \"click .page_size_prompt\": \"showPageSizePrompt\",\n        \"keyup .library-search-input\": \"searchLibraries\"\n    },\n\n    initialize: function initialize(options) {\n        this.options = _.defaults(this.options || {}, options, this.defaults);\n        this.render();\n    },\n\n    render: function render() {\n        var toolbar_template = this.templateToolBar();\n        var is_admin = false;\n        var is_anonym = true;\n        if (Galaxy.user) {\n            is_admin = Galaxy.user.isAdmin();\n            is_anonym = Galaxy.user.isAnonymous();\n        }\n        this.$el.html(toolbar_template({ admin_user: is_admin, anon_user: is_anonym }));\n        if (is_admin) {\n            this.$el.find(\"#include_deleted_chk\")[0].checked = Galaxy.libraries.preferences.get(\"with_deleted\");\n            this.$el.find(\"#exclude_restricted_chk\")[0].checked = Galaxy.libraries.preferences.get(\"without_restricted\");\n        }\n    },\n\n    /**\n     * Renders the element that shows pages into its div within the toolbar.\n     */\n    renderPaginator: function renderPaginator(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        this.$el.find(\"#library_paginator\").html(paginator_template({\n            show_page: parseInt(this.options.show_page),\n            page_count: parseInt(this.options.page_count),\n            total_libraries_count: this.options.total_libraries_count,\n            libraries_shown: this.options.libraries_shown,\n            library_page_size: Galaxy.libraries.preferences.get(\"library_page_size\")\n        }));\n    },\n\n    /**\n     * User clicked on 'New library' button. Show modal to\n     * satisfy the wish.\n     */\n    createLibraryFromModal: function createLibraryFromModal(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        var self = this;\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: (0, _localization2.default)(\"Create New Library\"),\n            body: this.templateNewLibraryInModal(),\n            buttons: {\n                Create: function Create() {\n                    self.createNewLibrary();\n                },\n                Close: function Close() {\n                    self.modal.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Create the new library using the API asynchronously.\n     */\n    createNewLibrary: function createNewLibrary() {\n        var libraryDetails = this.serializeNewLibrary();\n        if (this.validateNewLibrary(libraryDetails)) {\n            var library = new _libraryModel2.default.Library();\n            var self = this;\n            library.save(libraryDetails, {\n                success: function success(library) {\n                    Galaxy.libraries.libraryListView.collection.add(library);\n                    self.modal.hide();\n                    self.clearLibraryModal();\n                    Galaxy.libraries.libraryListView.render();\n                    _toastr2.default.success(\"Library created.\");\n                },\n                error: function error(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occured.\");\n                    }\n                }\n            });\n        } else {\n            _toastr2.default.error(\"Library's name is missing.\");\n        }\n        return false;\n    },\n\n    /**\n     * Show user the propmpt to change the number of libs shown on page.\n     */\n    showPageSizePrompt: function showPageSizePrompt(e) {\n        e.preventDefault();\n        var library_page_size = prompt(\"How many libraries per page do you want to see?\", Galaxy.libraries.preferences.get(\"library_page_size\"));\n        if (library_page_size != null && library_page_size == parseInt(library_page_size)) {\n            Galaxy.libraries.preferences.set({\n                library_page_size: parseInt(library_page_size)\n            });\n            Galaxy.libraries.libraryListView.render({ show_page: 1 });\n        }\n    },\n\n    /**\n     * Clear the library modal once it is saved.\n     */\n    clearLibraryModal: function clearLibraryModal() {\n        $(\"input[name='Name']\").val(\"\");\n        $(\"input[name='Description']\").val(\"\");\n        $(\"input[name='Synopsis']\").val(\"\");\n    },\n\n    /**\n     * Prepare new library variables to be submitted to API.\n     */\n    serializeNewLibrary: function serializeNewLibrary() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val(),\n            synopsis: $(\"input[name='Synopsis']\").val()\n        };\n    },\n\n    /**\n     * Check whether entered values are valid.\n     */\n    validateNewLibrary: function validateNewLibrary(libraryDetails) {\n        return libraryDetails.name !== \"\";\n    },\n\n    /**\n     * Include or exclude deleted libraries in the view.\n     */\n    includeDeletedChecked: function includeDeletedChecked(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.preferences.set({ with_deleted: true });\n            Galaxy.libraries.libraryListView.fetchDeleted();\n        } else {\n            Galaxy.libraries.preferences.set({ with_deleted: false });\n            Galaxy.libraries.libraryListView.render();\n        }\n    },\n\n    /**\n     * Include or exclude restricted libraries in the view.\n     */\n    excludeRestrictedChecked: function excludeRestrictedChecked(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.preferences.set({ without_restricted: true });\n        } else {\n            Galaxy.libraries.preferences.set({ without_restricted: false });\n        }\n        Galaxy.libraries.libraryListView.render();\n    },\n\n    /**\n     * Take the contents of the search field and send it to the list view\n     * to query the collection of libraries.\n     */\n    searchLibraries: function searchLibraries(event) {\n        var search_term = $(\".library-search-input\").val();\n        this.options.search_term = search_term;\n        Galaxy.libraries.libraryListView.searchLibraries(search_term);\n    },\n\n    templateToolBar: function templateToolBar() {\n        return _.template(['<div class=\"library_style_container\">', '<div id=\"toolbar_form\">', '<div id=\"library_toolbar\">', '<form class=\"form-inline\" role=\"form\">', '<span><strong><a href=\"#\" title=\"Go to first page\">DATA LIBRARIES</a></strong></span>', '<span id=\"library_paginator\" class=\"library-paginator\">',\n        // paginator will append here\n        \"</span>\", '<div class=\"form-group toolbar-item\">', '<input type=\"text\" class=\"form-control library-search-input\" placeholder=\"Search\" size=\"30\">', \"</div>\",\n        // only admins see the following\n        \"<% if(admin_user === true) { %>\", '<div class=\"checkbox toolbar-item\" style=\"height: 20px;\">', \"<label>\", '<input id=\"include_deleted_chk\" type=\"checkbox\">', \"include deleted \", \"</input>\", \"</label>\", \"<label>\", '<input id=\"exclude_restricted_chk\" type=\"checkbox\">', \"exclude restricted\", \"</input>\", \"</label>\", \"</div>\", '<span class=\"toolbar-item\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Library\">', '<button id=\"create_new_library_btn\" class=\"primary-button btn-xs\" type=\"button\"><span class=\"fa fa-plus\"></span> New Library</button>', \"</span>\", \"<% } %>\", '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">', '<a href=\"https://galaxyproject.org/data-libraries/screen/list-of-libraries/\" target=\"_blank\">', '<button class=\"primary-button\" type=\"button\"><span class=\"fa fa-question-circle\"></span> Help</button>', \"</a>\", \"</span>\", \"</form>\", \"</div>\", \"</div>\", '<div id=\"libraries_element\">',\n        // table with libraries will append here\n        \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templatePaginator: function templatePaginator() {\n        return _.template(['<ul class=\"pagination pagination-sm\">', \"<% if ( ( show_page - 1 ) > 0 ) { %>\", \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n        '<li><a href=\"#page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>', '<li class=\"disabled\"><a href=\"#page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>', \"<% } else { %>\", '<li><a href=\"#page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>', '<li><a href=\"#page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>', \"<% } %>\", \"<% } else { %>\", // we are on the first page\n        '<li class=\"disabled\"><a href=\"#page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>', '<li class=\"disabled\"><a href=\"#page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>', \"<% } %>\", '<li class=\"active\">', '<a href=\"#page/<% print( show_page ) %>\"><% print( show_page ) %></a>', \"</li>\", \"<% if ( ( show_page ) < page_count ) { %>\", '<li><a href=\"#page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>', '<li><a href=\"#page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>', \"<% } else { %>\", '<li class=\"disabled\"><a href=\"#page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>', '<li class=\"disabled\"><a href=\"#page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>', \"<% } %>\", \"</ul>\", \"<span>\", ' <%- libraries_shown %> libraries shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- library_page_size %> per page\" class=\"page_size_prompt\">(change)</a>', \"</span>\", \"<span>\", \" <%- total_libraries_count %> total\", \"</span>\"].join(\"\"));\n    },\n\n    templateNewLibraryInModal: function templateNewLibraryInModal() {\n        return _.template(['<div id=\"new_library_modal\">', \"<form>\", '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>', '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">', '<input type=\"text\" name=\"Synopsis\" value=\"\" placeholder=\"Synopsis\">', \"</form>\", \"</div>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    LibraryToolbarView: LibraryToolbarView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///302\n");

/***/ }),

/***/ 303:
/*!******************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-foldertoolbar-view.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\n__webpack_require__(/*! libs/jquery/jstree */ 128);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FolderToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    events: {\n        \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n        \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n        \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n        \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n        \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n        \"click .page_size_prompt\": \"showPageSizePrompt\"\n    },\n\n    defaults: {\n        can_add_library_item: false,\n        contains_file_or_folder: false,\n        chain_call_control: {\n            total_number: 0,\n            failed_number: 0\n        },\n        disabled_jstree_element: \"folders\"\n    },\n\n    modal: null,\n\n    // directory browsing object\n    jstree: null,\n\n    // user's histories\n    histories: null,\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description: \"This system will try to detect the file type automatically.\" + \" If your file is not detected properly as one of the known formats,\" + \" it most likely means that it has some format problems (e.g., different\" + \" number of columns on different rows). You can still coerce the system\" + \" to set your data to the format you think it should be.\" + \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function initialize(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.fetchExtAndGenomes();\n        this.render();\n    },\n\n    render: function render(options) {\n        this.options = _.extend(this.options, options);\n        var toolbar_template = this.templateToolBar();\n        var template_defaults = {\n            id: this.options.id,\n            is_admin: false,\n            is_anonym: true,\n            mutiple_add_dataset_options: false\n        };\n        if (Galaxy.user) {\n            template_defaults.is_admin = Galaxy.user.isAdmin();\n            template_defaults.is_anonym = Galaxy.user.isAnonymous();\n            if (Galaxy.config.user_library_import_dir !== null || Galaxy.config.allow_library_path_paste !== false || Galaxy.config.library_import_dir !== null) {\n                template_defaults.mutiple_add_dataset_options = true;\n            }\n        }\n        this.$el.html(toolbar_template(template_defaults));\n    },\n\n    /**\n     * Called from FolderListView when needed.\n     * @param  {object} options common options\n     */\n    renderPaginator: function renderPaginator(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        $(\"body\").find(\".folder-paginator\").html(paginator_template({\n            id: this.options.id,\n            show_page: parseInt(this.options.show_page),\n            page_count: parseInt(this.options.page_count),\n            total_items_count: this.options.total_items_count,\n            items_shown: this.options.items_shown,\n            folder_page_size: Galaxy.libraries.preferences.get(\"folder_page_size\")\n        }));\n    },\n\n    configureElements: function configureElements(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.can_add_library_item === true) {\n            $(\".add-library-items\").show();\n        } else {\n            $(\".add-library-items\").hide();\n        }\n        if (this.options.contains_file_or_folder === true) {\n            if (Galaxy.user) {\n                if (!Galaxy.user.isAnonymous()) {\n                    $(\".logged-dataset-manipulation\").show();\n                    $(\".dataset-manipulation\").show();\n                } else {\n                    $(\".dataset-manipulation\").show();\n                    $(\".logged-dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n        } else {\n            $(\".logged-dataset-manipulation\").hide();\n            $(\".dataset-manipulation\").hide();\n        }\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    // shows modal for creating folder\n    createFolderFromModal: function createFolderFromModal(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // create modal\n        var self = this;\n        var template = this.templateNewFolderInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: (0, _localization2.default)(\"Create New Folder\"),\n            body: template(),\n            buttons: {\n                Create: function Create() {\n                    self.create_new_folder_event();\n                },\n                Close: function Close() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    // create the new folder from modal\n    create_new_folder_event: function create_new_folder_event() {\n        var folderDetails = this.serialize_new_folder();\n        if (this.validate_new_folder(folderDetails)) {\n            var folder = new _libraryModel2.default.FolderAsModel();\n            var url_items = Backbone.history.fragment.split(\"/\");\n            var current_folder_id;\n            if (url_items.indexOf(\"page\") > -1) {\n                current_folder_id = url_items[url_items.length - 3];\n            } else {\n                current_folder_id = url_items[url_items.length - 1];\n            }\n            folder.url = folder.urlRoot + current_folder_id;\n\n            folder.save(folderDetails, {\n                success: function success(folder) {\n                    Galaxy.modal.hide();\n                    _toastr2.default.success(\"Folder created.\");\n                    folder.set({ type: \"folder\" });\n                    Galaxy.libraries.folderListView.collection.add(folder);\n                },\n                error: function error(model, response) {\n                    Galaxy.modal.hide();\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occurred.\");\n                    }\n                }\n            });\n        } else {\n            _toastr2.default.error(\"Folder's name is missing.\");\n        }\n        return false;\n    },\n\n    // serialize data from the modal\n    serialize_new_folder: function serialize_new_folder() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val()\n        };\n    },\n\n    // validate new folder info\n    validate_new_folder: function validate_new_folder(folderDetails) {\n        return folderDetails.name !== \"\";\n    },\n\n    // show bulk import modal\n    modalBulkImport: function modalBulkImport() {\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            _toastr2.default.info(\"You must select some datasets first.\");\n        } else {\n            var that = this;\n            this.histories = new _libraryModel2.default.GalaxyHistories();\n            this.histories.fetch().done(function () {\n                var template = that.templateBulkImportInModal();\n                that.modal = Galaxy.modal;\n                that.modal.show({\n                    closing_events: true,\n                    title: (0, _localization2.default)(\"Import into History\"),\n                    body: template({\n                        histories: that.histories.models\n                    }),\n                    buttons: {\n                        Import: function Import() {\n                            that.importAllIntoHistory();\n                        },\n                        Close: function Close() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }).fail(function (model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occurred.\");\n                }\n            });\n        }\n    },\n\n    /**\n     * Import all selected datasets into history.\n     */\n    importAllIntoHistory: function importAllIntoHistory() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        var that = this;\n        if (new_history_name !== \"\") {\n            $.post(Galaxy.root + \"api/histories\", {\n                name: new_history_name\n            }).done(function (new_history) {\n                that.options.last_used_history_id = new_history.id;\n                that.processImportToHistory(new_history.id, new_history.name);\n            }).fail(function (xhr, status, error) {\n                _toastr2.default.error(\"An error occurred.\");\n            }).always(function () {\n                that.modal.enableButton(\"Import\");\n            });\n        } else {\n            var history_id = $(\"select[name=dataset_import_bulk] option:selected\").val();\n            this.options.last_used_history_id = history_id;\n            var history_name = $(\"select[name=dataset_import_bulk] option:selected\").text();\n            this.processImportToHistory(history_id, history_name);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    processImportToHistory: function processImportToHistory(history_id, history_name) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function () {\n            var row_id = $(this).closest(\"tr\").data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        // prepare the dataset objects to be imported\n        var datasets_to_import = [];\n        for (var i = dataset_ids.length - 1; i >= 0; i--) {\n            var library_dataset_id = dataset_ids[i];\n            var historyItem = new _libraryModel2.default.HistoryItem();\n            historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n            historyItem.content = library_dataset_id;\n            historyItem.source = \"library\";\n            datasets_to_import.push(historyItem);\n        }\n\n        // prepare the folder objects to be imported\n        var folders_to_import = [];\n        for (var i = folder_ids.length - 1; i >= 0; i--) {\n            var library_folder_id = folder_ids[i];\n            var historyItem = new _libraryModel2.default.HistoryItem();\n            historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n            historyItem.content = library_folder_id;\n            historyItem.source = \"library_folder\";\n            datasets_to_import.push(historyItem);\n        }\n\n        this.initChainCallControl({\n            length: datasets_to_import.length,\n            action: \"to_history\",\n            history_name: history_name\n        });\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(Galaxy.root + \"history/set_as_current?id=\" + history_id);\n        this.chainCallImportingIntoHistory(datasets_to_import, history_name);\n    },\n\n    /**\n     * Update the progress bar in modal window.\n     */\n    updateProgress: function updateProgress() {\n        this.progress += this.progressStep;\n        $(\".progress-bar-import\").width(Math.round(this.progress) + \"%\");\n        var txt_representation = Math.round(this.progress) + \"% Complete\";\n        $(\".completion_span\").text(txt_representation);\n    },\n\n    /**\n     * download selected datasets\n     * @param  {str} folder_id id of the current folder\n     * @param  {str} format    requested archive format\n     */\n    download: function download(folder_id, format) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function () {\n            var row_id = $(this).closest(\"tr\").data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        var url = Galaxy.root + \"api/libraries/datasets/download/\" + format;\n        var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n        this.processDownload(url, data, \"get\");\n    },\n\n    /**\n     * Create hidden form and submit it through POST\n     * to initialize the download.\n     * @param  {str} url    url to call\n     * @param  {obj} data   data to include in the request\n     * @param  {str} method method of the request\n     */\n    processDownload: function processDownload(url, data, method) {\n        if (url && data) {\n            // data can be string of parameters or array/object\n            data = typeof data === \"string\" ? data : $.param(data);\n            // split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function () {\n                var pair = this.split(\"=\");\n                inputs += \"<input type=\\\"hidden\\\" name=\\\"\" + pair[0] + \"\\\" value=\\\"\" + pair[1] + \"\\\" />\";\n            });\n            // send request\n            $(\"<form action=\\\"\" + url + \"\\\" method=\\\"\" + (method || \"post\") + \"\\\">\" + inputs + \"</form>\").appendTo(\"body\").submit().remove();\n            _toastr2.default.info(\"Your download will begin soon.\");\n        } else {\n            _toastr2.default.error(\"An error occurred.\");\n        }\n    },\n\n    addFilesFromHistoryModal: function addFilesFromHistoryModal() {\n        this.histories = new _libraryModel2.default.GalaxyHistories();\n        var self = this;\n        this.histories.fetch().done(function () {\n            self.modal = Galaxy.modal;\n            var template_modal = self.templateAddFilesFromHistory();\n            self.modal.show({\n                closing_events: true,\n                title: (0, _localization2.default)(\"Adding datasets from your history\"),\n                body: template_modal({\n                    histories: self.histories.models\n                }),\n                buttons: {\n                    Add: function Add() {\n                        self.addAllDatasetsFromHistory();\n                    },\n                    Close: function Close() {\n                        Galaxy.modal.hide();\n                    }\n                },\n                closing_callback: function closing_callback() {\n                    Galaxy.libraries.library_router.navigate(\"folders/\" + self.id, { trigger: true });\n                }\n            });\n            self.fetchAndDisplayHistoryContents(self.histories.models[0].id);\n            $(\"#dataset_add_bulk\").change(function (event) {\n                self.fetchAndDisplayHistoryContents(event.target.value);\n            });\n        }).fail(function (model, response) {\n            if (typeof response.responseJSON !== \"undefined\") {\n                _toastr2.default.error(response.responseJSON.err_msg);\n            } else {\n                _toastr2.default.error(\"An error occurred.\");\n            }\n        });\n    },\n\n    /**\n     * Create modal for importing from Galaxy path.\n     * This feature is admin-only.\n     */\n    importFilesFromPathModal: function importFilesFromPathModal() {\n        var that = this;\n        this.modal = Galaxy.modal;\n        var template_modal = this.templateImportPathModal();\n        this.modal.show({\n            closing_events: true,\n            title: (0, _localization2.default)(\"Please enter paths to import\"),\n            body: template_modal({}),\n            buttons: {\n                Import: function Import() {\n                    that.importFromPathsClicked(that);\n                },\n                Close: function Close() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function closing_callback() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, {\n                    trigger: true\n                });\n            }\n        });\n        this.renderSelectBoxes();\n    },\n\n    /**\n     * Request all extensions and genomes from Galaxy\n     * and save them sorted in arrays.\n     */\n    fetchExtAndGenomes: function fetchExtAndGenomes() {\n        var that = this;\n        _utils2.default.get({\n            url: Galaxy.root + \"api/datatypes?extension_only=False\",\n            success: function success(datatypes) {\n                that.list_extensions = [];\n                for (var key in datatypes) {\n                    that.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url\n                    });\n                }\n                that.list_extensions.sort(function (a, b) {\n                    return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                });\n                that.list_extensions.unshift(that.auto);\n            },\n            cache: true\n        });\n        _utils2.default.get({\n            url: Galaxy.root + \"api/genomes\",\n            success: function success(genomes) {\n                that.list_genomes = [];\n                for (var key in genomes) {\n                    that.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                that.list_genomes.sort(function (a, b) {\n                    return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                });\n            },\n            cache: true\n        });\n    },\n\n    renderSelectBoxes: function renderSelectBoxes() {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        // TODO switch to common resources:\n        // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n        var that = this;\n        this.select_genome = new _uiSelect2.default.View({\n            css: \"library-genome-select\",\n            data: that.list_genomes,\n            container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n            value: \"?\"\n        });\n        this.select_extension = new _uiSelect2.default.View({\n            css: \"library-extension-select\",\n            data: that.list_extensions,\n            container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n            value: \"auto\"\n        });\n    },\n\n    /**\n     * Create modal for importing from given directory\n     * on Galaxy. Bind jQuery events.\n     */\n    importFilesFromGalaxyFolderModal: function importFilesFromGalaxyFolderModal(options) {\n        var that = this;\n        var template_modal = this.templateBrowserModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: (0, _localization2.default)(\"Please select folders or files\"),\n            body: template_modal({}),\n            buttons: {\n                Import: function Import() {\n                    that.importFromJstreePath(that, options);\n                },\n                Close: function Close() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function closing_callback() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, {\n                    trigger: true\n                });\n            }\n        });\n\n        $(\".libimport-select-all\").bind(\"click\", function () {\n            $(\"#jstree_browser\").jstree(\"check_all\");\n        });\n        $(\".libimport-select-none\").bind(\"click\", function () {\n            $(\"#jstree_browser\").jstree(\"uncheck_all\");\n        });\n\n        this.renderSelectBoxes();\n        options.disabled_jstree_element = \"folders\";\n        this.renderJstree(options);\n\n        $(\"input[type=radio]\").change(function (event) {\n            if (event.target.value === \"jstree-disable-folders\") {\n                options.disabled_jstree_element = \"folders\";\n                that.renderJstree(options);\n                $(\".jstree-folders-message\").hide();\n                $(\".jstree-preserve-structure\").hide();\n                $(\".jstree-files-message\").show();\n            } else if (event.target.value === \"jstree-disable-files\") {\n                $(\".jstree-files-message\").hide();\n                $(\".jstree-folders-message\").show();\n                $(\".jstree-preserve-structure\").show();\n                options.disabled_jstree_element = \"files\";\n                that.renderJstree(options);\n            }\n        });\n    },\n\n    /**\n     * Fetch the contents of user directory on Galaxy\n     * and render jstree component based on received\n     * data.\n     * @param  {[type]} options [description]\n     */\n    renderJstree: function renderJstree(options) {\n        var that = this;\n        this.options = _.extend(this.options, options);\n        var target = options.source || \"userdir\";\n        var disabled_jstree_element = this.options.disabled_jstree_element;\n        this.jstree = new _libraryModel2.default.Jstree();\n        this.jstree.url = this.jstree.urlRoot + \"?target=\" + target + \"&format=jstree&disable=\" + disabled_jstree_element;\n        this.jstree.fetch({\n            success: function success(model, response) {\n                $(\"#jstree_browser\").jstree(\"destroy\");\n                $(\"#jstree_browser\").jstree({\n                    core: {\n                        data: model\n                    },\n                    plugins: [\"types\", \"checkbox\"],\n                    types: {\n                        folder: {\n                            icon: \"jstree-folder\"\n                        },\n                        file: {\n                            icon: \"jstree-file\"\n                        }\n                    },\n                    checkbox: {\n                        three_state: false\n                    }\n                });\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    if (response.responseJSON.err_code === 404001) {\n                        _toastr2.default.warning(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    }\n                } else {\n                    _toastr2.default.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n     * Take the paths from the textarea, split it, create\n     * a request queue and call a function that starts sending\n     * one by one to be imported on the server.\n     */\n    importFromPathsClicked: function importFromPathsClicked() {\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var paths = $(\"textarea#import_paths\").val();\n        var valid_paths = [];\n        if (!paths) {\n            _toastr2.default.info(\"Please enter a path relative to Galaxy root.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            paths = paths.split(\"\\n\");\n            for (var i = paths.length - 1; i >= 0; i--) {\n                var trimmed = paths[i].trim();\n                if (trimmed.length !== 0) {\n                    valid_paths.push(trimmed);\n                }\n            }\n            this.initChainCallControl({\n                length: valid_paths.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallImportingFolders({\n                paths: valid_paths,\n                preserve_dirs: preserve_dirs,\n                link_data: link_data,\n                space_to_tab: space_to_tab,\n                to_posix_lines: to_posix_lines,\n                source: \"admin_path\",\n                file_type: file_type,\n                tag_using_filenames: tag_using_filenames,\n                dbkey: dbkey\n            });\n        }\n    },\n\n    /**\n     * Initialize the control of chaining requests\n     * in the current modal.\n     * @param {int} length The number of items in the chain call.\n     */\n    initChainCallControl: function initChainCallControl(options) {\n        var template;\n        switch (options.action) {\n            case \"adding_datasets\":\n                template = this.templateAddingDatasetsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template({\n                    folder_name: this.options.folder_name\n                }));\n                break;\n            case \"deleting_datasets\":\n                template = this.templateDeletingItemsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template());\n                break;\n            case \"to_history\":\n                template = this.templateImportIntoHistoryProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template({ history_name: options.history_name }));\n                break;\n            default:\n                Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                break;\n        }\n\n        // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n        // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n        this.progress = 0;\n        this.progressStep = 100 / options.length;\n        this.options.chain_call_control.total_number = options.length;\n        this.options.chain_call_control.failed_number = 0;\n    },\n\n    /**\n     * Take the selected items from the jstree, create a request queue\n     * and send them one by one to the server for importing into\n     * the current folder.\n     *\n     * jstree.js has to be loaded before\n     * @see renderJstree\n     */\n    importFromJstreePath: function importFromJstreePath(that, options) {\n        var all_nodes = $(\"#jstree_browser\").jstree().get_selected(true);\n        // remove the disabled elements that could have been trigerred with the 'select all'\n        var selected_nodes = _.filter(all_nodes, function (node) {\n            return node.state.disabled == false;\n        });\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var selection_type = selected_nodes[0].type;\n        var paths = [];\n        if (selected_nodes.length < 1) {\n            _toastr2.default.info(\"Please select some items first.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                if (selected_nodes[i].li_attr.full_path !== undefined) {\n                    paths.push(selected_nodes[i].li_attr.full_path);\n                }\n            }\n            this.initChainCallControl({\n                length: paths.length,\n                action: \"adding_datasets\"\n            });\n            if (selection_type === \"folder\") {\n                var full_source = options.source + \"_folder\";\n                this.chainCallImportingFolders({\n                    paths: paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    tag_using_filenames: tag_using_filenames\n                });\n            } else if (selection_type === \"file\") {\n                var full_source = options.source + \"_file\";\n                this.chainCallImportingUserdirFiles({\n                    paths: paths,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    tag_using_filenames: tag_using_filenames\n                });\n            }\n        }\n    },\n\n    fetchAndDisplayHistoryContents: function fetchAndDisplayHistoryContents(history_id) {\n        var history_contents = new _libraryModel2.default.HistoryContents({\n            id: history_id\n        });\n        var self = this;\n        history_contents.fetch({\n            success: function success(history_contents) {\n                var history_contents_template = self.templateHistoryContents();\n                self.histories.get(history_id).set({ contents: history_contents });\n                self.modal.$el.find(\"#selected_history_content\").html(history_contents_template({\n                    history_contents: history_contents.models.reverse()\n                }));\n                self.modal.$el.find(\".history-import-select-all\").bind(\"click\", function () {\n                    $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", true);\n                });\n                self.modal.$el.find(\".history-import-unselect-all\").bind(\"click\", function () {\n                    $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", false);\n                });\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg);\n                } else {\n                    _toastr2.default.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n     * Import all selected datasets from history into the current folder.\n     */\n    addAllDatasetsFromHistory: function addAllDatasetsFromHistory() {\n        var checked_hdas = this.modal.$el.find(\"#selected_history_content\").find(\":checked\");\n        var history_item_ids = []; // can be hda or hdca\n        var history_item_types = [];\n        var items_to_add = [];\n        if (checked_hdas.length < 1) {\n            _toastr2.default.info(\"You must select some datasets first.\");\n        } else {\n            this.modal.disableButton(\"Add\");\n            checked_hdas.each(function () {\n                var hid = $(this).closest(\"li\").data(\"id\");\n                if (hid) {\n                    var item_type = $(this).closest(\"li\").data(\"name\");\n                    history_item_ids.push(hid);\n                    history_item_types.push(item_type);\n                }\n            });\n            for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                var history_item_id = history_item_ids[i];\n                var folder_item = new _libraryModel2.default.Item();\n                folder_item.url = Galaxy.root + \"api/folders/\" + this.options.id + \"/contents\";\n                if (history_item_types[i] === \"collection\") {\n                    folder_item.set({ from_hdca_id: history_item_id });\n                } else {\n                    folder_item.set({ from_hda_id: history_item_id });\n                }\n                items_to_add.push(folder_item);\n            }\n            this.initChainCallControl({\n                length: items_to_add.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallAddingHdas(items_to_add);\n        }\n    },\n\n    /**\n     * Take array of empty history items and make request for each of them\n     * to create it on server. Update progress in between calls.\n     * @param  {array} history_item_set array of empty history items\n     * @param  {str} history_name     name of the history to import to\n     */\n    chainCallImportingIntoHistory: function chainCallImportingIntoHistory(history_item_set, history_name) {\n        var self = this;\n        var popped_item = history_item_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                _toastr2.default.success(\"Selected datasets imported into history. Click this to start analyzing it.\", \"\", {\n                    onclick: function onclick() {\n                        window.location = Galaxy.root;\n                    }\n                });\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                _toastr2.default.error(\"There was an error and no datasets were imported into history.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                _toastr2.default.warning(\"Some of the datasets could not be imported into history. Click this to see what was imported.\", \"\", {\n                    onclick: function onclick() {\n                        window.location = Galaxy.root;\n                    }\n                });\n            }\n            Galaxy.modal.hide();\n            return true;\n        }\n        var promise = $.when(popped_item.save({\n            content: popped_item.content,\n            source: popped_item.source\n        }));\n\n        promise.done(function () {\n            self.updateProgress();\n            self.chainCallImportingIntoHistory(history_item_set, history_name);\n        }).fail(function () {\n            self.options.chain_call_control.failed_number += 1;\n            self.updateProgress();\n            self.chainCallImportingIntoHistory(history_item_set, history_name);\n        });\n    },\n\n    /**\n     * Take the array of paths and create a request for each of them\n     * calling them in chain. Update the progress bar in between each.\n     * @param  {array} paths                    paths relative to user folder on Galaxy\n     * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n     */\n    chainCallImportingUserdirFiles: function chainCallImportingUserdirFiles(options) {\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                _toastr2.default.success(\"Selected files imported into the current folder\");\n                Galaxy.modal.hide();\n            } else {\n                _toastr2.default.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when($.post(Galaxy.root + \"api/libraries/datasets?encoded_folder_id=\" + that.id + \"&source=\" + options.source + \"&path=\" + popped_item + \"&file_type=\" + options.file_type + \"&link_data=\" + options.link_data + \"&space_to_tab=\" + options.space_to_tab + \"&to_posix_lines=\" + options.to_posix_lines + \"&dbkey=\" + options.dbkey + \"&tag_using_filenames=\" + options.tag_using_filenames));\n        promise.done(function (response) {\n            that.updateProgress();\n            that.chainCallImportingUserdirFiles(options);\n        }).fail(function () {\n            that.options.chain_call_control.failed_number += 1;\n            that.updateProgress();\n            that.chainCallImportingUserdirFiles(options);\n        });\n    },\n\n    /**\n     * Take the array of paths and create a request for each of them\n     * calling them in series. Update the progress bar in between each.\n     * @param  {array} paths                    paths relative to Galaxy root folder\n     * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n     * @param  {boolean} link_data              copy files to Galaxy or link instead\n     * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n     * @param  {boolean} space_to_tab           convert spaces to tabs\n     * @param  {str} source                     string representing what type of folder\n     *                                          is the source of import\n     * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n     */\n    chainCallImportingFolders: function chainCallImportingFolders(options) {\n        // TODO need to check which paths to call\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                _toastr2.default.success(\"Selected folders and their contents imported into the current folder.\");\n                Galaxy.modal.hide();\n            } else {\n                // TODO better error report\n                _toastr2.default.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when($.post(Galaxy.root + \"api/libraries/datasets?encoded_folder_id=\" + that.id + \"&source=\" + options.source + \"&path=\" + popped_item + \"&preserve_dirs=\" + options.preserve_dirs + \"&link_data=\" + options.link_data + \"&to_posix_lines=\" + options.to_posix_lines + \"&space_to_tab=\" + options.space_to_tab + \"&file_type=\" + options.file_type + \"&dbkey=\" + options.dbkey + \"&tag_using_filenames=\" + options.tag_using_filenames));\n        promise.done(function (response) {\n            that.updateProgress();\n            that.chainCallImportingFolders(options);\n        }).fail(function () {\n            that.options.chain_call_control.failed_number += 1;\n            that.updateProgress();\n            that.chainCallImportingFolders(options);\n        });\n    },\n\n    /**\n     * Take the array of hdas and create a request for each.\n     * Call them in chain and update progress bar in between each.\n     * @param  {array} hdas_set array of empty hda objects\n     */\n    chainCallAddingHdas: function chainCallAddingHdas(hdas_set) {\n        var self = this;\n        this.added_hdas = new _libraryModel2.default.Folder();\n        var popped_item = hdas_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                _toastr2.default.success(\"Selected datasets from history added to the folder\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                _toastr2.default.error(\"There was an error and no datasets were added to the folder.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                _toastr2.default.warning(\"Some of the datasets could not be added to the folder\");\n            }\n            Galaxy.modal.hide();\n            return this.added_hdas;\n        }\n        var promise = $.when(popped_item.save({\n            from_hda_id: popped_item.get(\"from_hda_id\")\n        }));\n\n        promise.done(function (model) {\n            Galaxy.libraries.folderListView.collection.add(model);\n            self.updateProgress();\n            self.chainCallAddingHdas(hdas_set);\n        }).fail(function () {\n            self.options.chain_call_control.failed_number += 1;\n            self.updateProgress();\n            self.chainCallAddingHdas(hdas_set);\n        });\n    },\n\n    /**\n     * Take the array of lddas, create request for each and\n     * call them in chain. Update progress bar in between each.\n     * @param  {array} lddas_set array of lddas to delete\n     */\n    chainCallDeletingItems: function chainCallDeletingItems(items_to_delete) {\n        var self = this;\n        this.deleted_items = new _libraryModel2.default.Folder();\n        var item_to_delete = items_to_delete.pop();\n        if (typeof item_to_delete === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                _toastr2.default.success(\"Selected items were deleted.\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                _toastr2.default.error(\"There was an error and no items were deleted. Please make sure you have sufficient permissions.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                _toastr2.default.warning(\"Some of the items could not be deleted. Please make sure you have sufficient permissions.\");\n            }\n            Galaxy.modal.hide();\n            return this.deleted_items;\n        }\n        item_to_delete.destroy().done(function (item) {\n            Galaxy.libraries.folderListView.collection.remove(item_to_delete.id);\n            self.updateProgress();\n            // add the deleted item to collection, triggers rendering\n            if (Galaxy.libraries.folderListView.options.include_deleted) {\n                var updated_item = null;\n                if (item.type === \"folder\" || item.model_class === \"LibraryFolder\") {\n                    updated_item = new _libraryModel2.default.FolderAsModel(item);\n                } else if (item.type === \"file\" || item.model_class === \"LibraryDataset\") {\n                    updated_item = new _libraryModel2.default.Item(item);\n                } else {\n                    Galaxy.emit.error(\"Unknown library item type found.\", \"datalibs\");\n                    Galaxy.emit.error(item.type || item.model_class, \"datalibs\");\n                }\n                Galaxy.libraries.folderListView.collection.add(updated_item);\n            }\n            self.chainCallDeletingItems(items_to_delete);\n        }).fail(function () {\n            self.options.chain_call_control.failed_number += 1;\n            self.updateProgress();\n            self.chainCallDeletingItems(items_to_delete);\n        });\n    },\n\n    /**\n     * Handles the click on 'show deleted' checkbox\n     */\n    checkIncludeDeleted: function checkIncludeDeleted(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: true\n            });\n        } else {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: false\n            });\n        }\n    },\n\n    /**\n     * Delete the selected items. Atomic. One by one.\n     */\n    deleteSelectedItems: function deleteSelectedItems() {\n        var dataset_ids = [];\n        var folder_ids = [];\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            _toastr2.default.info(\"You must select at least one item for deletion.\");\n        } else {\n            var template = this.templateDeletingItemsProgressBar();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: (0, _localization2.default)(\"Deleting selected items\"),\n                body: template({}),\n                buttons: {\n                    Close: function Close() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n            // init the control counters\n            this.options.chain_call_control.total_number = 0;\n            this.options.chain_call_control.failed_number = 0;\n            $checkedValues.each(function () {\n                var row_id = $(this).closest(\"tr\").data(\"id\");\n                if (row_id !== undefined) {\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                }\n            });\n            // init the progress bar\n            var items_total = dataset_ids.length + folder_ids.length;\n            this.progressStep = 100 / items_total;\n            this.progress = 0;\n\n            // prepare the dataset items to be added\n            var items_to_delete = [];\n            for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                var dataset = new _libraryModel2.default.Item({\n                    id: dataset_ids[i]\n                });\n                items_to_delete.push(dataset);\n            }\n            for (var i = folder_ids.length - 1; i >= 0; i--) {\n                var folder = new _libraryModel2.default.FolderAsModel({\n                    id: folder_ids[i]\n                });\n                items_to_delete.push(folder);\n            }\n\n            this.options.chain_call_control.total_number = items_total;\n            // call the recursive function to call ajax one after each other (request FIFO queue)\n            this.chainCallDeletingItems(items_to_delete);\n        }\n    },\n\n    showLocInfo: function showLocInfo() {\n        var library = null;\n        var that = this;\n        if (Galaxy.libraries.libraryListView !== null) {\n            library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n            this.showLocInfoModal(library);\n        } else {\n            library = new _libraryModel2.default.Library({\n                id: this.options.parent_library_id\n            });\n            library.fetch({\n                success: function success() {\n                    that.showLocInfoModal(library);\n                },\n                error: function error(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        _toastr2.default.error(response.responseJSON.err_msg);\n                    } else {\n                        _toastr2.default.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    showLocInfoModal: function showLocInfoModal(library) {\n        var that = this;\n        var template = this.templateLocInfoInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: (0, _localization2.default)(\"Location Details\"),\n            body: template({ library: library, options: that.options }),\n            buttons: {\n                Close: function Close() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    showImportModal: function showImportModal(options) {\n        switch (options.source) {\n            case \"history\":\n                this.addFilesFromHistoryModal();\n                break;\n            case \"importdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"importdir\"\n                });\n                break;\n            case \"path\":\n                this.importFilesFromPathModal();\n                break;\n            case \"userdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"userdir\"\n                });\n                break;\n            default:\n                Galaxy.libraries.library_router.back();\n                _toastr2.default.error(\"Invalid import source.\");\n                break;\n        }\n    },\n\n    /**\n     * Show user the prompt to change the number of items shown on page.\n     */\n    showPageSizePrompt: function showPageSizePrompt(e) {\n        e.preventDefault();\n        var folder_page_size = prompt(\"How many items per page do you want to see?\", Galaxy.libraries.preferences.get(\"folder_page_size\"));\n        if (folder_page_size != null && folder_page_size == parseInt(folder_page_size)) {\n            Galaxy.libraries.preferences.set({\n                folder_page_size: parseInt(folder_page_size)\n            });\n            Galaxy.libraries.folderListView.render({\n                id: this.options.id,\n                show_page: 1\n            });\n        }\n    },\n\n    findCheckedRows: function findCheckedRows() {\n        return $(\"#folder_list_body\").find(\":checked\");\n    },\n\n    templateToolBar: function templateToolBar() {\n        return _.template([\n        // container start\n        '<div class=\"library_style_container\">',\n        // toolbar start\n        '<div id=\"library_toolbar\">', '<form class=\"form-inline\" role=\"form\">', \"<span><strong>DATA LIBRARIES</strong></span>\",\n        // paginator will append here\n        '<span class=\"library-paginator folder-paginator\"></span>', '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">', \"<label>\", '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>', \"</label>\", \"</div>\", '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">', '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>', \"</button>\", \"<% if(mutiple_add_dataset_options) { %>\", '<div class=\"btn-group add-library-items\" style=\"display:none;\">', '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">', '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>', \"</button>\", '<ul class=\"dropdown-menu\" role=\"menu\">', '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>', \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\", '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>', \"<% } %>\", \"<% if(Galaxy.config.allow_library_path_paste) { %>\", '<li class=\"divider\"></li>', '<li class=\"dropdown-header\">Admins only</li>', \"<% if(Galaxy.config.library_import_dir !== null) { %>\", '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>', \"<% } %>\", \"<% if(Galaxy.config.allow_library_path_paste) { %>\", '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>', \"<% } %>\", \"<% } %>\", \"</ul>\", \"</div>\", \"<% } else { %>\", '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">', '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>', \"</a>\", \"<% } %>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">', '<span class=\"fa fa-book\"></span>', \"&nbsp;to History\", \"</button>\", '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">', '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">', '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>', \"</button>\", '<ul class=\"dropdown-menu\" role=\"menu\">', '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>', '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>', '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>', \"</ul>\", \"</div>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">', '<span class=\"fa fa-times\"></span> Delete</button>', '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">', '<span class=\"fa fa-info-circle\"></span>', \"&nbsp;Details\", \"</button>\", '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">', '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">', '<button class=\"primary-button\" type=\"button\">', '<span class=\"fa fa-question-circle\"></span>', \"&nbsp;Help\", \"</button>\", \"</a>\", \"</span>\", \"</div>\", \"</form>\",\n        // toolbar end\n        '<div id=\"folder_items_element\">', \"</div>\",\n        // paginator will append here\n        '<div class=\"folder-paginator paginator-bottom\"></div>',\n        // container end\n        \"</div>\"].join(\"\"));\n    },\n\n    templateLocInfoInModal: function templateLocInfoInModal() {\n        return _.template([\"<div>\", '<table class=\"grid table table-condensed\">', \"<thead>\", '<th style=\"width: 25%;\">library</th>', \"<th></th>\", \"</thead>\", \"<tbody>\", \"<tr>\", \"<td>name</td>\", '<td><%- library.get(\"name\") %></td>', \"</tr>\", '<% if(library.get(\"description\") !== \"\") { %>', \"<tr>\", \"<td>description</td>\", '<td><%- library.get(\"description\") %></td>', \"</tr>\", \"<% } %>\", '<% if(library.get(\"synopsis\") !== \"\") { %>', \"<tr>\", \"<td>synopsis</td>\", '<td><%- library.get(\"synopsis\") %></td>', \"</tr>\", \"<% } %>\", '<% if(library.get(\"create_time_pretty\") !== \"\") { %>', \"<tr>\", \"<td>created</td>\", '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>', \"</tr>\", \"<% } %>\", \"<tr>\", \"<td>id</td>\", '<td><%- library.get(\"id\") %></td>', \"</tr>\", \"</tbody>\", \"</table>\", '<table class=\"grid table table-condensed\">', \"<thead>\", '<th style=\"width: 25%;\">folder</th>', \"<th></th>\", \"</thead>\", \"<tbody>\", \"<tr>\", \"<td>name</td>\", \"<td><%- options.folder_name %></td>\", \"</tr>\", '<% if(options.folder_description !== \"\") { %>', \"<tr>\", \"<td>description</td>\", \"<td><%- options.folder_description %></td>\", \"</tr>\", \"<% } %>\", \"<tr>\", \"<td>id</td>\", \"<td><%- options.id %></td>\", \"</tr>\", \"</tbody>\", \"</table>\", \"</div>\"].join(\"\"));\n    },\n\n    templateNewFolderInModal: function templateNewFolderInModal() {\n        return _.template(['<div id=\"new_folder_modal\">', \"<form>\", '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>', '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">', \"</form>\", \"</div>\"].join(\"\"));\n    },\n\n    templateBulkImportInModal: function templateBulkImportInModal() {\n        return _.template([\"<div>\", '<div class=\"library-modal-item\">', \"Select history: \", '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>', \"<% _.each(histories, function(history) { %>\", '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>', \"<% }); %>\", \"</select>\", \"</div>\", '<div class=\"library-modal-item\">', \"or create new: \", '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">', \"</input>\", \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templateImportIntoHistoryProgressBar: function templateImportIntoHistoryProgressBar() {\n        return _.template(['<div class=\"import_text\">', \"Importing selected items to history <b><%= _.escape(history_name) %></b>\", \"</div>\", '<div class=\"progress\">', '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">', '<span class=\"completion_span\">0% Complete</span>', \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templateAddingDatasetsProgressBar: function templateAddingDatasetsProgressBar() {\n        return _.template(['<div class=\"import_text\">', \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\", \"</div>\", '<div class=\"progress\">', '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">', '<span class=\"completion_span\">0% Complete</span>', \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templateDeletingItemsProgressBar: function templateDeletingItemsProgressBar() {\n        return _.template(['<div class=\"import_text\">', \"</div>\", '<div class=\"progress\">', '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">', '<span class=\"completion_span\">0% Complete</span>', \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templateBrowserModal: function templateBrowserModal() {\n        return _.template(['<div id=\"file_browser_modal\">', '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>', '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>', '<div style=\"margin-bottom:1em;\">', '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">', '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files', \"</label>\", '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">', '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders', \"</label>\", \"</div>\", '<div style=\"margin-bottom:1em;\">', '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">', '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">', \"Preserve directory structure\", \"</label>\", '<label class=\"checkbox-inline\">', '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">', \"Link files instead of copying\", \"</label>\", '<label class=\"checkbox-inline\">', '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">', \"Convert line endings to POSIX\", \"</label>\", '<label class=\"checkbox-inline\">', '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">', \"Convert spaces to tabs\", \"</label>\", \"</div>\", '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">', \"Select all\", \"</button>\", '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">', \"Unselect all\", \"</button>\", \"<hr />\",\n        // append jstree object here\n        '<div id=\"jstree_browser\">', \"</div>\", \"<hr />\", \"<p>You can set extension type and genome for all imported datasets at once:</p>\", \"<div>\", 'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />', 'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />', \"</div>\", \"<br>\", \"<div>\", '<label class=\"checkbox-inline tag-files\">', \"Tag datasets based on file names\", '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\">', \"</label>\", \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templateImportPathModal: function templateImportPathModal() {\n        return _.template(['<div id=\"file_browser_modal\">', '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>', '<div style=\"margin-bottom: 0.5em;\">', '<label class=\"checkbox-inline\">', '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">', \"Preserve directory structure\", \"</label>\", '<label class=\"checkbox-inline\">', '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">', \"Link files instead of copying\", \"</label>\", \"<br>\", '<label class=\"checkbox-inline\">', '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">', \"Convert line endings to POSIX\", \"</label>\", '<label class=\"checkbox-inline\">', '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">', \"Convert spaces to tabs\", \"</label>\", \"</div>\", '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>', \"<hr />\", \"<p>You can set extension type and genome for all imported datasets at once:</p>\", \"<div>\", 'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />', 'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />', \"</div>\", \"<div>\", '<label class=\"checkbox-inline tag-files\">', \"Tag datasets based on file names\", '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\">', \"</label>\", \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templateAddFilesFromHistory: function templateAddFilesFromHistory() {\n        return _.template(['<div id=\"add_files_modal\">', \"<div>\", \"1.&nbsp;Select history:&nbsp;\", '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ', \"<% _.each(histories, function(history) { %>\", //history select box\n        '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>', \"<% }); %>\", \"</select>\", \"</div>\", \"<br/>\", '<div id=\"selected_history_content\">', \"</div>\", \"</div>\"].join(\"\"));\n    },\n\n    templateHistoryContents: function templateHistoryContents() {\n        return _.template([\"<p>2.&nbsp;Choose the datasets to import:</p>\", \"<div>\", '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">', \"Select all\", \"</button>\", '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">', \"Unselect all\", \"</button>\", \"</div>\", \"<br>\", \"<ul>\", \"<% _.each(history_contents, function(history_item) { %>\", '<% if (history_item.get(\"deleted\") != true ) { %>', '<% var item_name = history_item.get(\"name\") %>', '<% if (history_item.get(\"type\") === \"collection\") { %>', '<% var collection_type = history_item.get(\"collection_type\") %>', '<% if (collection_type === \"list\") { %>', '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">', \"<label>\", '<label title=\"<%= _.escape(item_name) %>\">', '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ', '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)', \"</label>\", \"</li>\", \"<% } else { %>\", '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">', '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">', '<%= _.escape(history_item.get(\"hid\")) %>: ', '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)', \"</span>\", \"</li>\", \"<% } %>\", '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>', '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">', '<label title=\"<%= _.escape(item_name) %>\">', '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ', '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>', \"</label>\", \"</li>\", \"<% } %>\", \"<% } %>\", \"<% }); %>\", \"</ul>\"].join(\"\"));\n    },\n\n    templatePaginator: function templatePaginator() {\n        return _.template(['<ul class=\"pagination pagination-sm\">', \"<% if ( ( show_page - 1 ) > 0 ) { %>\", \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n        '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>', '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>', \"<% } else { %>\", '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>', '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>', \"<% } %>\", \"<% } else { %>\", // we are on the first page\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>', '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>', \"<% } %>\", '<li class=\"active\">', '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>', \"</li>\", \"<% if ( ( show_page ) < page_count ) { %>\", '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>', '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>', \"<% } else { %>\", '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>', '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>', \"<% } %>\", \"</ul>\", \"<span>\", ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page_size_prompt\">(change)</a>', \"</span>\", \"<span>\", \" <%- total_items_count %> total\", \"</span>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    FolderToolbarView: FolderToolbarView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///303\n");

/***/ }),

/***/ 304:
/*!************************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-library-view.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LibraryView = Backbone.View.extend({\n    el: \"#center\",\n\n    model: null,\n\n    options: {},\n\n    events: {\n        \"click .toolbtn_save_permissions\": \"savePermissions\"\n    },\n\n    initialize: function initialize(options) {\n        this.options = _.extend(this.options, options);\n        if (this.options.id) {\n            this.fetchLibrary();\n        }\n    },\n\n    fetchLibrary: function fetchLibrary(options) {\n        this.options = _.extend(this.options, options);\n        this.model = new _libraryModel2.default.Library({\n            id: this.options.id\n        });\n        var that = this;\n        this.model.fetch({\n            success: function success() {\n                if (that.options.show_permissions) {\n                    that.showPermissions();\n                }\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg + \" Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    _toastr2.default.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    showPermissions: function showPermissions(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n\n        if (this.options.fetched_permissions !== undefined) {\n            if (this.options.fetched_permissions.access_library_role_list.length === 0) {\n                this.model.set({ is_unrestricted: true });\n            } else {\n                this.model.set({ is_unrestricted: false });\n            }\n        }\n        var is_admin = false;\n        if (Galaxy.user) {\n            is_admin = Galaxy.user.isAdmin();\n        }\n        var template = this.templateLibraryPermissions();\n        this.$el.html(template({ library: this.model, is_admin: is_admin }));\n\n        var self = this;\n        $.get(Galaxy.root + \"api/libraries/\" + self.id + \"/permissions?scope=current\").done(function (fetched_permissions) {\n            self.prepareSelectBoxes({\n                fetched_permissions: fetched_permissions\n            });\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to fetch library permissions.\");\n        });\n\n        $(\"#center [data-toggle]\").tooltip();\n        //hack to show scrollbars\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    _serializeRoles: function _serializeRoles(role_list) {\n        var selected_roles = [];\n        for (var i = 0; i < role_list.length; i++) {\n            selected_roles.push(role_list[i][1] + \":\" + role_list[i][0]);\n        }\n        return selected_roles;\n    },\n\n    prepareSelectBoxes: function prepareSelectBoxes(options) {\n        this.options = _.extend(this.options, options);\n        var fetched_permissions = this.options.fetched_permissions;\n        var self = this;\n\n        var selected_access_library_roles = this._serializeRoles(fetched_permissions.access_library_role_list);\n        var selected_add_item_roles = this._serializeRoles(fetched_permissions.add_library_item_role_list);\n        var selected_manage_library_roles = this._serializeRoles(fetched_permissions.manage_library_role_list);\n        var selected_modify_library_roles = this._serializeRoles(fetched_permissions.modify_library_role_list);\n\n        self.accessSelectObject = new _uiSelect2.default.View(this._createSelectOptions(this, \"access_perm\", selected_access_library_roles, true));\n        self.addSelectObject = new _uiSelect2.default.View(this._createSelectOptions(this, \"add_perm\", selected_add_item_roles, false));\n        self.manageSelectObject = new _uiSelect2.default.View(this._createSelectOptions(this, \"manage_perm\", selected_manage_library_roles, false));\n        self.modifySelectObject = new _uiSelect2.default.View(this._createSelectOptions(this, \"modify_perm\", selected_modify_library_roles, false));\n    },\n\n    _createSelectOptions: function _createSelectOptions(self, id, init_data, is_library_access) {\n        is_library_access = is_library_access === true ? is_library_access : false;\n        var select_options = {\n            minimumInputLength: 0,\n            css: id,\n            multiple: true,\n            placeholder: \"Click to select a role\",\n            container: self.$el.find(\"#\" + id),\n            ajax: {\n                url: Galaxy.root + \"api/libraries/\" + self.id + \"/permissions?scope=available&is_library_access=\" + is_library_access,\n                dataType: \"json\",\n                quietMillis: 100,\n                data: function data(term, page) {\n                    // page is the one-based page number tracked by Select2\n                    return {\n                        q: term, //search term\n                        page_limit: 10, // page size\n                        page: page // page number\n                    };\n                },\n                results: function results(data, page) {\n                    var more = page * 10 < data.total; // whether or not there are more results available\n                    // notice we return the value of more so Select2 knows if more results can be loaded\n                    return { results: data.roles, more: more };\n                }\n            },\n            formatResult: function roleFormatResult(role) {\n                return role.name + \" type: \" + role.type;\n            },\n\n            formatSelection: function roleFormatSelection(role) {\n                return role.name;\n            },\n            initSelection: function initSelection(element, callback) {\n                // the input tag has a value attribute preloaded that points to a preselected role's id\n                // this function resolves that id attribute to an object that select2 can render\n                // using its formatResult renderer - that way the role name is shown preselected\n                var data = [];\n                $(element.val().split(\",\")).each(function () {\n                    var item = this.split(\":\");\n                    data.push({\n                        id: item[0],\n                        name: item[1]\n                    });\n                });\n                callback(data);\n            },\n            // initialData: init_data.join(','),\n            initialData: init_data,\n            dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n        };\n\n        return select_options;\n    },\n\n    makeDatasetPrivate: function makeDatasetPrivate() {\n        var self = this;\n        $.post(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?action=make_private\").done(function (fetched_permissions) {\n            self.model.set({ is_unrestricted: false });\n            self.showPermissions({\n                fetched_permissions: fetched_permissions\n            });\n            _toastr2.default.success(\"The dataset is now private to you.\");\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to make dataset private.\");\n        });\n    },\n\n    removeDatasetRestrictions: function removeDatasetRestrictions() {\n        var self = this;\n        $.post(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?action=remove_restrictions\").done(function (fetched_permissions) {\n            self.model.set({ is_unrestricted: true });\n            self.showPermissions({\n                fetched_permissions: fetched_permissions\n            });\n            _toastr2.default.success(\"Access to this dataset is now unrestricted.\");\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to make dataset unrestricted.\");\n        });\n    },\n\n    _extractIds: function _extractIds(roles_list) {\n        var ids_list = [];\n        for (var i = roles_list.length - 1; i >= 0; i--) {\n            ids_list.push(roles_list[i].id);\n        }\n        return ids_list;\n    },\n    savePermissions: function savePermissions(event) {\n        var self = this;\n\n        var access_ids = this._extractIds(this.accessSelectObject.$el.select2(\"data\"));\n        var add_ids = this._extractIds(this.addSelectObject.$el.select2(\"data\"));\n        var manage_ids = this._extractIds(this.manageSelectObject.$el.select2(\"data\"));\n        var modify_ids = this._extractIds(this.modifySelectObject.$el.select2(\"data\"));\n\n        $.post(Galaxy.root + \"api/libraries/\" + self.id + \"/permissions?action=set_permissions\", {\n            \"access_ids[]\": access_ids,\n            \"add_ids[]\": add_ids,\n            \"manage_ids[]\": manage_ids,\n            \"modify_ids[]\": modify_ids\n        }).done(function (fetched_permissions) {\n            //fetch dataset again\n            self.showPermissions({\n                fetched_permissions: fetched_permissions\n            });\n            _toastr2.default.success(\"Permissions saved.\");\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to set library permissions.\");\n        });\n    },\n\n    templateLibraryPermissions: function templateLibraryPermissions() {\n        return _.template(['<div class=\"library_style_container\">', '<div id=\"library_toolbar\">', '<a href=\"#\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the list of Libraries\" class=\"btn btn-default primary-button\" type=\"button\">', '<span class=\"fa fa-list\"/>', \"&nbsp;Libraries\", \"</button>\", \"</a>\", \"</div>\", \"<h1>\", 'Library: <%= _.escape(library.get(\"name\")) %>', \"</h1>\", '<div class=\"alert alert-warning\">', \"<% if (is_admin) { %>\", \"You are logged in as an <strong>administrator</strong> therefore you can manage any library on this Galaxy instance. Please make sure you understand the consequences.\", \"<% } else { %>\", \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\", \"<% }%>\", \"</div>\", '<div class=\"dataset_table\">', \"<h2>Library permissions</h2>\", \"<h4>Roles that can access the library</h4>\", '<div id=\"access_perm\" class=\"access_perm roles-selection\"/>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can access this library. If there are no access roles set on the library it is considered <strong>unrestricted</strong>.\", \"</div>\", \"<h4>Roles that can manage permissions on this library</h4>\", '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can manage permissions on this library (includes giving access).\", \"</div>\", \"<h4>Roles that can add items to this library</h4>\", '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can add items to this library (folders and datasets).\", \"</div>\", \"<h4>Roles that can modify this library</h4>\", '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can modify this library (name, synopsis, etc.).\", \"</div>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications made on this page\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">', '<span class=\"fa fa-floppy-o\"/>', \"&nbsp;Save\", \"</button>\", \"</div>\", \"</div>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    LibraryView: LibraryView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///304\n");

/***/ }),

/***/ 305:
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/library/library-folder-view.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar _toastr2 = _interopRequireDefault(_toastr);\n\nvar _libraryModel = __webpack_require__(/*! mvc/library/library-model */ 13);\n\nvar _libraryModel2 = _interopRequireDefault(_libraryModel);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FolderView = Backbone.View.extend({\n    el: \"#center\",\n\n    model: null,\n\n    options: {},\n\n    events: {\n        \"click .toolbtn_save_permissions\": \"savePermissions\"\n    },\n\n    initialize: function initialize(options) {\n        this.options = _.extend(this.options, options);\n        if (this.options.id) {\n            this.fetchFolder();\n        }\n    },\n\n    fetchFolder: function fetchFolder(options) {\n        this.options = _.extend(this.options, options);\n        this.model = new _libraryModel2.default.FolderAsModel({\n            id: this.options.id\n        });\n        var that = this;\n        this.model.fetch({\n            success: function success() {\n                if (that.options.show_permissions) {\n                    that.showPermissions();\n                }\n            },\n            error: function error(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    _toastr2.default.error(response.responseJSON.err_msg + \" Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    _toastr2.default.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function onclick() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    showPermissions: function showPermissions(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n\n        var is_admin = false;\n        if (Galaxy.user) {\n            is_admin = Galaxy.user.isAdmin();\n        }\n        var template = this.templateFolderPermissions();\n        this.$el.html(template({ folder: this.model, is_admin: is_admin }));\n\n        var self = this;\n        $.get(Galaxy.root + \"api/folders/\" + self.id + \"/permissions?scope=current\").done(function (fetched_permissions) {\n            self.prepareSelectBoxes({\n                fetched_permissions: fetched_permissions\n            });\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to fetch folder permissions.\");\n        });\n\n        $(\"#center [data-toggle]\").tooltip();\n        //hack to show scrollbars\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    _serializeRoles: function _serializeRoles(role_list) {\n        var selected_roles = [];\n        for (var i = 0; i < role_list.length; i++) {\n            selected_roles.push(role_list[i][1] + \":\" + role_list[i][0]);\n        }\n        return selected_roles;\n    },\n\n    prepareSelectBoxes: function prepareSelectBoxes(options) {\n        this.options = _.extend(this.options, options);\n        var fetched_permissions = this.options.fetched_permissions;\n        var self = this;\n\n        var selected_add_item_roles = this._serializeRoles(fetched_permissions.add_library_item_role_list);\n        var selected_manage_folder_roles = this._serializeRoles(fetched_permissions.manage_folder_role_list);\n        var selected_modify_folder_roles = this._serializeRoles(fetched_permissions.modify_folder_role_list);\n\n        self.addSelectObject = new _uiSelect2.default.View(this._createSelectOptions(this, \"add_perm\", selected_add_item_roles, false));\n        self.manageSelectObject = new _uiSelect2.default.View(this._createSelectOptions(this, \"manage_perm\", selected_manage_folder_roles, false));\n        self.modifySelectObject = new _uiSelect2.default.View(this._createSelectOptions(this, \"modify_perm\", selected_modify_folder_roles, false));\n    },\n\n    _createSelectOptions: function _createSelectOptions(self, id, init_data) {\n        var select_options = {\n            minimumInputLength: 0,\n            css: id,\n            multiple: true,\n            placeholder: \"Click to select a role\",\n            container: self.$el.find(\"#\" + id),\n            ajax: {\n                url: Galaxy.root + \"api/folders/\" + self.id + \"/permissions?scope=available\",\n                dataType: \"json\",\n                quietMillis: 100,\n                data: function data(term, page) {\n                    // page is the one-based page number tracked by Select2\n                    return {\n                        q: term, //search term\n                        page_limit: 10, // page size\n                        page: page // page number\n                    };\n                },\n                results: function results(data, page) {\n                    var more = page * 10 < data.total; // whether or not there are more results available\n                    // notice we return the value of more so Select2 knows if more results can be loaded\n                    return { results: data.roles, more: more };\n                }\n            },\n            formatResult: function roleFormatResult(role) {\n                return role.name + \" type: \" + role.type;\n            },\n\n            formatSelection: function roleFormatSelection(role) {\n                return role.name;\n            },\n            initSelection: function initSelection(element, callback) {\n                // the input tag has a value attribute preloaded that points to a preselected role's id\n                // this function resolves that id attribute to an object that select2 can render\n                // using its formatResult renderer - that way the role name is shown preselected\n                var data = [];\n                $(element.val().split(\",\")).each(function () {\n                    var item = this.split(\":\");\n                    data.push({\n                        id: item[0],\n                        name: item[1]\n                    });\n                });\n                callback(data);\n            },\n            initialData: init_data.join(\",\"),\n            dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n        };\n\n        return select_options;\n    },\n\n    /**\n     * Extract the role ids from Select2 elements's 'data'\n     */\n    _extractIds: function _extractIds(roles_list) {\n        var ids_list = [];\n        for (var i = roles_list.length - 1; i >= 0; i--) {\n            ids_list.push(roles_list[i].id);\n        }\n        return ids_list;\n    },\n\n    /**\n     * Save the permissions for roles entered in the select boxes.\n     */\n    savePermissions: function savePermissions(event) {\n        var self = this;\n        var add_ids = this._extractIds(this.addSelectObject.$el.select2(\"data\"));\n        var manage_ids = this._extractIds(this.manageSelectObject.$el.select2(\"data\"));\n        var modify_ids = this._extractIds(this.modifySelectObject.$el.select2(\"data\"));\n        $.post(Galaxy.root + \"api/folders/\" + self.id + \"/permissions?action=set_permissions\", {\n            \"add_ids[]\": add_ids,\n            \"manage_ids[]\": manage_ids,\n            \"modify_ids[]\": modify_ids\n        }).done(function (fetched_permissions) {\n            self.showPermissions({\n                fetched_permissions: fetched_permissions\n            });\n            _toastr2.default.success(\"Permissions saved.\");\n        }).fail(function () {\n            _toastr2.default.error(\"An error occurred while attempting to set folder permissions.\");\n        });\n    },\n\n    templateFolderPermissions: function templateFolderPermissions() {\n        return _.template(['<div class=\"library_style_container\">', '<div id=\"library_toolbar\">', '<a href=\"#/folders/<%= folder.get(\"parent_id\") %>\">', '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the parent folder\" class=\"btn btn-default primary-button\" type=\"button\">', '<span class=\"fa fa-caret-left fa-lg\"/>', \"&nbsp;Parent folder\", \"</button>\", \"</a>\", \"</div>\", \"<h1>\", 'Folder: <%= _.escape(folder.get(\"name\")) %>', \"</h1>\", '<div class=\"alert alert-warning\">', \"<% if (is_admin) { %>\", \"You are logged in as an <strong>administrator</strong> therefore you can manage any folder on this Galaxy instance. Please make sure you understand the consequences.\", \"<% } else { %>\", \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\", \"<% }%>\", \"</div>\", '<div class=\"dataset_table\">', \"<h2>Folder permissions</h2>\", \"<h4>\", \"Roles that can manage permissions on this folder\", \"</h4>\", '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can manage permissions on this folder.\", \"</div>\", \"<h4>\", \"Roles that can add items to this folder\", \"</h4>\", '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can add items to this folder (folders and datasets).\", \"</div>\", \"<h4>\", \"Roles that can modify this folder\", \"</h4>\", '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>', '<div class=\"alert alert-info roles-selection\">', \"User with <strong>any</strong> of these roles can modify this folder (name, etc.).\", \"</div>\", '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">', '<span class=\"fa fa-floppy-o\"/>', \"&nbsp;Save\", \"</button>\", \"</div>\", \"</div>\"].join(\"\"));\n    }\n});\n\nexports.default = {\n    FolderView: FolderView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///305\n");

/***/ }),

/***/ 306:
/*!******************************************!*\
  !*** ./galaxy/scripts/admin.toolshed.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _shedListView = __webpack_require__(/*! mvc/toolshed/shed-list-view */ 307);\n\nvar _shedListView2 = _interopRequireDefault(_shedListView);\n\nvar _categoriesView = __webpack_require__(/*! mvc/toolshed/categories-view */ 308);\n\nvar _categoriesView2 = _interopRequireDefault(_categoriesView);\n\nvar _repositoriesView = __webpack_require__(/*! mvc/toolshed/repositories-view */ 309);\n\nvar _repositoriesView2 = _interopRequireDefault(_repositoriesView);\n\nvar _repositoryView = __webpack_require__(/*! mvc/toolshed/repository-view */ 310);\n\nvar _repositoryView2 = _interopRequireDefault(_repositoryView);\n\nvar _repositoryQueueView = __webpack_require__(/*! mvc/toolshed/repository-queue-view */ 311);\n\nvar _repositoryQueueView2 = _interopRequireDefault(_repositoryQueueView);\n\nvar _repoStatusView = __webpack_require__(/*! mvc/toolshed/repo-status-view */ 312);\n\nvar _repoStatusView2 = _interopRequireDefault(_repoStatusView);\n\nvar _workflowsView = __webpack_require__(/*! mvc/toolshed/workflows-view */ 313);\n\nvar _workflowsView2 = _interopRequireDefault(_workflowsView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AdminToolshedRouter = Backbone.Router.extend({\n    initialize: function initialize() {\n        this.routesHit = 0;\n        // keep count of number of routes handled by the application\n        Backbone.history.on(\"route\", function () {\n            this.routesHit++;\n        }, this);\n        this.bind(\"route\", this.trackPageview);\n    },\n\n    routes: {\n        \"\": \"toolsheds\",\n        sheds: \"toolsheds\",\n        queue: \"queue\",\n        workflows: \"workflows\",\n        \"status/r/:repositories\": \"status\",\n        status: \"status\",\n        \"categories/s/:tool_shed\": \"categories\",\n        \"category/s/:tool_shed/c/:cateory_id\": \"repositories\",\n        \"repository/s/:tool_shed/r/:repository_id\": \"repository\"\n    },\n\n    /**\n     * If more than one route has been hit the user did not land on current\n     * page directly so we can go back safely. Otherwise go to the home page.\n     * Use replaceState if available so the navigation doesn't create an\n     * extra history entry\n     */\n    back: function back() {\n        if (this.routesHit > 1) {\n            window.history.back();\n        } else {\n            this.navigate(\"#\", { trigger: true, replace: true });\n        }\n    }\n});\n\nvar GalaxyAdminToolshedApp = Backbone.View.extend({\n    app_config: {\n        known_views: [\"toolsheds\", \"queue\", \"status\", \"categories\", \"repositories\", \"repoository\"]\n    },\n\n    initialize: function initialize() {\n        Galaxy.admintoolshedapp = this;\n        this.admin_toolshed_router = new AdminToolshedRouter();\n\n        this.admin_toolshed_router.on(\"route:queue\", function () {\n            if (Galaxy.admintoolshedapp.adminRepoQueueView) {\n                Galaxy.admintoolshedapp.adminRepoQueueView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminRepoQueueView = new _repositoryQueueView2.default.RepoQueueView();\n            }\n        });\n        this.admin_toolshed_router.on(\"route:toolsheds\", function () {\n            if (Galaxy.admintoolshedapp.adminShedListView) {\n                Galaxy.admintoolshedapp.adminShedListView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminShedListView = new _shedListView2.default.ShedListView();\n            }\n        });\n        this.admin_toolshed_router.on(\"route:categories\", function (tool_shed) {\n            if (Galaxy.admintoolshedapp.adminShedCategoriesView) {\n                Galaxy.admintoolshedapp.adminShedCategoriesView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\")\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminShedCategoriesView = new _categoriesView2.default.CategoryView({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\")\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:repositories\", function (tool_shed, category_id) {\n            if (Galaxy.admintoolshedapp.adminShedCategoryView) {\n                Galaxy.admintoolshedapp.adminShedCategoryView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    category_id: category_id\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminShedCategoryView = new _repositoriesView2.default.Category({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    category_id: category_id\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:repository\", function (tool_shed, repository_id) {\n            if (Galaxy.admintoolshedapp.adminRepositoryView) {\n                Galaxy.admintoolshedapp.adminRepositoryView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    repository_id: repository_id\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminRepositoryView = new _repositoryView2.default.RepoDetails({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    repository_id: repository_id\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:status\", function (repositories) {\n            if (Galaxy.admintoolshedapp.adminRepoStatusView) {\n                Galaxy.admintoolshedapp.adminRepoStatusView.reDraw({\n                    repositories: repositories.split(\"|\")\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminRepoStatusView = new _repoStatusView2.default.RepoStatus({\n                    repositories: repositories.split(\"|\")\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:workflows\", function () {\n            if (Galaxy.admintoolshedapp.adminWorkflowsView) {\n                Galaxy.admintoolshedapp.adminWorkflowsView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminWorkflowsView = new _workflowsView2.default.Workflows();\n            }\n        });\n\n        Backbone.history.start({ pushState: false });\n    }\n});\n\nexports.default = {\n    GalaxyApp: GalaxyAdminToolshedApp\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///306\n");

/***/ }),

/***/ 307:
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/shed-list-view.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _toolshedModel = __webpack_require__(/*! mvc/toolshed/toolshed-model */ 17);\n\nvar _toolshedModel2 = _interopRequireDefault(_toolshedModel);\n\nvar _util = __webpack_require__(/*! mvc/toolshed/util */ 18);\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    defaults: {\n        tool_sheds: [{\n            url: \"https://toolshed.g2.bx.psu.edu/\",\n            name: \"Galaxy Main Tool Shed\"\n        }]\n    },\n\n    initialize: function initialize(options) {\n        var self = this;\n        this.options = _.defaults(this.options || {}, this.defaults);\n        this.model = new _toolshedModel2.default.ShedsCollection();\n        this.listenTo(this.model, \"sync\", this.render);\n        this.model.fetch();\n    },\n\n    el: \"#center\",\n\n    render: function render(options) {\n        this.options = _.defaults(this.options || {}, options, this.defaults);\n        var toolshed_list_template = this.templateToolshedList;\n        this.$el.html(toolshed_list_template({\n            title: (0, _localization2.default)(\"Configured Galaxy Tool Sheds\"),\n            tool_sheds: this.model.models,\n            queue: _util2.default.queueLength()\n        }));\n    },\n\n    reDraw: function reDraw(options) {\n        this.$el.empty();\n        this.render(options);\n    },\n\n    templateToolshedList: _.template(['<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">', '<div class=\"unified-panel-header-inner\"><%= title %></div>', '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>', \"</div>\", '<div class=\"unified-panel-body\" id=\"list_toolsheds\">', '<div class=\"form-row\">', '<table class=\"grid\">', \"<% _.each(tool_sheds, function(shed) { %>\", '<tr class=\"libraryTitle\">', \"<td>\", '<div style=\"float: left; margin-left: 1px;\" class=\"menubutton split\">', '<a class=\"view-info shed-selector\" href=\"#/categories/s/<%= shed.get(\"url\") %>\"><%= shed.get(\"name\") %></a>', \"</div>\", \"</td>\", \"</tr>\", \"<% }); %>\", \"</table>\", \"</div>\", '<div style=\"clear: both\"></div>', \"</div>\"].join(\"\"))\n});\n\nexports.default = {\n    ShedListView: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC9zaGVkLWxpc3Qtdmlldy5qcz81YjczIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG5pbXBvcnQgdG9vbHNoZWRfbW9kZWwgZnJvbSBcIm12Yy90b29sc2hlZC90b29sc2hlZC1tb2RlbFwiO1xuaW1wb3J0IHRvb2xzaGVkX3V0aWwgZnJvbSBcIm12Yy90b29sc2hlZC91dGlsXCI7XG52YXIgVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBkZWZhdWx0czoge1xuICAgICAgICB0b29sX3NoZWRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vdG9vbHNoZWQuZzIuYngucHN1LmVkdS9cIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdhbGF4eSBNYWluIFRvb2wgU2hlZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF8uZGVmYXVsdHModGhpcy5vcHRpb25zIHx8IHt9LCB0aGlzLmRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyB0b29sc2hlZF9tb2RlbC5TaGVkc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcInN5bmNcIiwgdGhpcy5yZW5kZXIpO1xuICAgICAgICB0aGlzLm1vZGVsLmZldGNoKCk7XG4gICAgfSxcblxuICAgIGVsOiBcIiNjZW50ZXJcIixcblxuICAgIHJlbmRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBfLmRlZmF1bHRzKHRoaXMub3B0aW9ucyB8fCB7fSwgb3B0aW9ucywgdGhpcy5kZWZhdWx0cyk7XG4gICAgICAgIHZhciB0b29sc2hlZF9saXN0X3RlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZVRvb2xzaGVkTGlzdDtcbiAgICAgICAgdGhpcy4kZWwuaHRtbChcbiAgICAgICAgICAgIHRvb2xzaGVkX2xpc3RfdGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBfbChcIkNvbmZpZ3VyZWQgR2FsYXh5IFRvb2wgU2hlZHNcIiksXG4gICAgICAgICAgICAgICAgdG9vbF9zaGVkczogdGhpcy5tb2RlbC5tb2RlbHMsXG4gICAgICAgICAgICAgICAgcXVldWU6IHRvb2xzaGVkX3V0aWwucXVldWVMZW5ndGgoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgcmVEcmF3OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuJGVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMucmVuZGVyKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZVRvb2xzaGVkTGlzdDogXy50ZW1wbGF0ZShcbiAgICAgICAgW1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlclwiIGlkPVwicGFuZWxfaGVhZGVyXCIgdW5zZWxlY3RhYmxlPVwib25cIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlci1pbm5lclwiPjwlPSB0aXRsZSAlPjwvZGl2PicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVuaWZpZWQtcGFuZWwtaGVhZGVyLWlubmVyXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHJpZ2h0OiA1cHg7IHRvcDogMHB4O1wiPjxhIGhyZWY9XCIjL3F1ZXVlXCI+UmVwb3NpdG9yeSBRdWV1ZSAoPCU9IHF1ZXVlICU+KTwvYT48L2Rpdj4nLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidW5pZmllZC1wYW5lbC1ib2R5XCIgaWQ9XCJsaXN0X3Rvb2xzaGVkc1wiPicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZvcm0tcm93XCI+JyxcbiAgICAgICAgICAgICc8dGFibGUgY2xhc3M9XCJncmlkXCI+JyxcbiAgICAgICAgICAgIFwiPCUgXy5lYWNoKHRvb2xfc2hlZHMsIGZ1bmN0aW9uKHNoZWQpIHsgJT5cIixcbiAgICAgICAgICAgICc8dHIgY2xhc3M9XCJsaWJyYXJ5VGl0bGVcIj4nLFxuICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAnPGRpdiBzdHlsZT1cImZsb2F0OiBsZWZ0OyBtYXJnaW4tbGVmdDogMXB4O1wiIGNsYXNzPVwibWVudWJ1dHRvbiBzcGxpdFwiPicsXG4gICAgICAgICAgICAnPGEgY2xhc3M9XCJ2aWV3LWluZm8gc2hlZC1zZWxlY3RvclwiIGhyZWY9XCIjL2NhdGVnb3JpZXMvcy88JT0gc2hlZC5nZXQoXCJ1cmxcIikgJT5cIj48JT0gc2hlZC5nZXQoXCJuYW1lXCIpICU+PC9hPicsXG4gICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgXCI8L3RyPlwiLFxuICAgICAgICAgICAgXCI8JSB9KTsgJT5cIixcbiAgICAgICAgICAgIFwiPC90YWJsZT5cIixcbiAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAnPGRpdiBzdHlsZT1cImNsZWFyOiBib3RoXCI+PC9kaXY+JyxcbiAgICAgICAgICAgIFwiPC9kaXY+XCJcbiAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgKVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBTaGVkTGlzdFZpZXc6IFZpZXdcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL3Rvb2xzaGVkL3NoZWQtbGlzdC12aWV3LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUZBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckNBO0FBQ0E7QUE4REE7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///307\n");

/***/ }),

/***/ 308:
/*!********************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/categories-view.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toolshedModel = __webpack_require__(/*! mvc/toolshed/toolshed-model */ 17);\n\nvar _toolshedModel2 = _interopRequireDefault(_toolshedModel);\n\nvar _util = __webpack_require__(/*! mvc/toolshed/util */ 18);\n\nvar _util2 = _interopRequireDefault(_util);\n\n__webpack_require__(/*! libs/jquery/jquery-ui */ 30);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ToolShedCategories = Backbone.View.extend({\n    el: \"#center\",\n\n    defaults: {\n        tool_shed: \"https://toolshed.g2.bx.psu.edu/\"\n    },\n\n    initialize: function initialize(options) {\n        var self = this;\n        var shed = options.tool_shed.replace(/\\//g, \"%2f\");\n        this.options = _.defaults(this.options || options, this.defaults);\n        this.model = new _toolshedModel2.default.Categories();\n        this.listenTo(this.model, \"sync\", this.render);\n        this.model.url = this.model.url + \"?tool_shed_url=\" + this.options.tool_shed;\n        this.model.tool_shed = shed;\n        this.model.fetch();\n    },\n\n    render: function render(options) {\n        this.options = _.extend(this.options, options);\n        this.options.categories = this.model.models;\n        this.options.queue = _util2.default.queueLength();\n        var category_list_template = this.templateCategoryList;\n        this.$el.html(category_list_template(this.options));\n        $(\"#center\").css(\"overflow\", \"auto\");\n        this.bindEvents();\n    },\n\n    bindEvents: function bindEvents() {\n        var that = this;\n        $(\"#search_box\").autocomplete({\n            source: function source(request, response) {\n                var shed_url = that.model.tool_shed.replace(/%2f/g, \"/\");\n                var base_url = Galaxy.root + \"api/tool_shed/search\";\n                var params = {\n                    term: request.term,\n                    tool_shed_url: shed_url\n                };\n                $.post(base_url, params, function (data) {\n                    console.log(data);\n                    var result_list = _util2.default.shedParser(data);\n                    response(result_list);\n                });\n            },\n            minLength: 3,\n            select: function select(event, ui) {\n                var tsr_id = ui.item.value;\n                var api_url = Galaxy.root + \"api/tool_shed/repository\";\n                var params = {\n                    tool_shed_url: that.model.tool_shed,\n                    tsr_id: tsr_id\n                };\n                var new_route = \"repository/s/\" + that.model.tool_shed + \"/r/\" + tsr_id;\n                Backbone.history.navigate(new_route, {\n                    trigger: true,\n                    replace: true\n                });\n            }\n        });\n    },\n\n    reDraw: function reDraw(options) {\n        this.$el.empty();\n        this.model.url = this.model.url + \"?tool_shed_url=\" + this.options.tool_shed;\n        this.initialize(options);\n    },\n\n    templateCategoryList: _.template(['<style type=\"text/css\">', \".ui-autocomplete { background-color: #fff; }\", \"li.ui-menu-item { list-style-type: none; }\", \"</style>\", '<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">', '<div class=\"unified-panel-header-inner\" style=\"layout: inline;\">Categories in <%= tool_shed.replace(/%2f/g, \"/\") %></div>', '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>', \"</div>\", '<div class=\"unified-panel-body\" id=\"list_categories\">', '<div id=\"standard-search\" style=\"height: 2em; margin: 1em;\">', '<span class=\"ui-widget\" >', '<input class=\"search-box-input\" id=\"search_box\" data-shedurl=\"<%= tool_shed.replace(/%2f/g, \"/\") %>\" name=\"search\" placeholder=\"Search repositories by name or id\" size=\"60\" type=\"text\" />', \"</span>\", \"</div>\", '<div style=\"clear: both; margin-top: 1em;\">', '<table class=\"grid\">', '<thead id=\"grid-table-header\">', \"<tr>\", \"<th>Name</th>\", \"<th>Description</th>\", \"<th>Repositories</th>\", \"</tr>\", \"</thead>\", \"<% _.each(categories, function(category) { %>\", \"<tr>\", \"<td>\", '<a href=\"#/category/s/<%= tool_shed %>/c/<%= category.get(\"id\") %>\"><%= category.get(\"name\") %></a>', \"</td>\", '<td><%= category.get(\"description\") %></td>', '<td><%= category.get(\"repositories\") %></td>', \"</tr>\", \"<% }); %>\", \"</table>\", \"</div>\", \"</div>\"].join(\"\"))\n});\n\nexports.default = {\n    CategoryView: ToolShedCategories\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC9jYXRlZ29yaWVzLXZpZXcuanM/Y2I5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdG9vbHNoZWRfbW9kZWwgZnJvbSBcIm12Yy90b29sc2hlZC90b29sc2hlZC1tb2RlbFwiO1xuaW1wb3J0IHRvb2xzaGVkX3V0aWwgZnJvbSBcIm12Yy90b29sc2hlZC91dGlsXCI7XG5pbXBvcnQgXCJsaWJzL2pxdWVyeS9qcXVlcnktdWlcIjtcbnZhciBUb29sU2hlZENhdGVnb3JpZXMgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgZWw6IFwiI2NlbnRlclwiLFxuXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgdG9vbF9zaGVkOiBcImh0dHBzOi8vdG9vbHNoZWQuZzIuYngucHN1LmVkdS9cIlxuICAgIH0sXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHNoZWQgPSBvcHRpb25zLnRvb2xfc2hlZC5yZXBsYWNlKC9cXC8vZywgXCIlMmZcIik7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF8uZGVmYXVsdHModGhpcy5vcHRpb25zIHx8IG9wdGlvbnMsIHRoaXMuZGVmYXVsdHMpO1xuICAgICAgICB0aGlzLm1vZGVsID0gbmV3IHRvb2xzaGVkX21vZGVsLkNhdGVnb3JpZXMoKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcInN5bmNcIiwgdGhpcy5yZW5kZXIpO1xuICAgICAgICB0aGlzLm1vZGVsLnVybCA9IGAke3RoaXMubW9kZWwudXJsfT90b29sX3NoZWRfdXJsPSR7dGhpcy5vcHRpb25zLnRvb2xfc2hlZH1gO1xuICAgICAgICB0aGlzLm1vZGVsLnRvb2xfc2hlZCA9IHNoZWQ7XG4gICAgICAgIHRoaXMubW9kZWwuZmV0Y2goKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF8uZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jYXRlZ29yaWVzID0gdGhpcy5tb2RlbC5tb2RlbHM7XG4gICAgICAgIHRoaXMub3B0aW9ucy5xdWV1ZSA9IHRvb2xzaGVkX3V0aWwucXVldWVMZW5ndGgoKTtcbiAgICAgICAgdmFyIGNhdGVnb3J5X2xpc3RfdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlQ2F0ZWdvcnlMaXN0O1xuICAgICAgICB0aGlzLiRlbC5odG1sKGNhdGVnb3J5X2xpc3RfdGVtcGxhdGUodGhpcy5vcHRpb25zKSk7XG4gICAgICAgICQoXCIjY2VudGVyXCIpLmNzcyhcIm92ZXJmbG93XCIsIFwiYXV0b1wiKTtcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgfSxcblxuICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICQoXCIjc2VhcmNoX2JveFwiKS5hdXRvY29tcGxldGUoe1xuICAgICAgICAgICAgc291cmNlOiBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBzaGVkX3VybCA9IHRoYXQubW9kZWwudG9vbF9zaGVkLnJlcGxhY2UoLyUyZi9nLCBcIi9cIik7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VfdXJsID0gYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9zZWFyY2hgO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRlcm06IHJlcXVlc3QudGVybSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbF9zaGVkX3VybDogc2hlZF91cmxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICQucG9zdChiYXNlX3VybCwgcGFyYW1zLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRfbGlzdCA9IHRvb2xzaGVkX3V0aWwuc2hlZFBhcnNlcihkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UocmVzdWx0X2xpc3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pbkxlbmd0aDogMyxcbiAgICAgICAgICAgIHNlbGVjdDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRzcl9pZCA9IHVpLml0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGFwaV91cmwgPSBgJHtHYWxheHkucm9vdH1hcGkvdG9vbF9zaGVkL3JlcG9zaXRvcnlgO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xfc2hlZF91cmw6IHRoYXQubW9kZWwudG9vbF9zaGVkLFxuICAgICAgICAgICAgICAgICAgICB0c3JfaWQ6IHRzcl9pZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIG5ld19yb3V0ZSA9IGByZXBvc2l0b3J5L3MvJHt0aGF0Lm1vZGVsLnRvb2xfc2hlZH0vci8ke3Rzcl9pZH1gO1xuICAgICAgICAgICAgICAgIEJhY2tib25lLmhpc3RvcnkubmF2aWdhdGUobmV3X3JvdXRlLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlRHJhdzogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB0aGlzLiRlbC5lbXB0eSgpO1xuICAgICAgICB0aGlzLm1vZGVsLnVybCA9IGAke3RoaXMubW9kZWwudXJsfT90b29sX3NoZWRfdXJsPSR7dGhpcy5vcHRpb25zLnRvb2xfc2hlZH1gO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfSxcblxuICAgIHRlbXBsYXRlQ2F0ZWdvcnlMaXN0OiBfLnRlbXBsYXRlKFxuICAgICAgICBbXG4gICAgICAgICAgICAnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPicsXG4gICAgICAgICAgICBcIi51aS1hdXRvY29tcGxldGUgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XCIsXG4gICAgICAgICAgICBcImxpLnVpLW1lbnUtaXRlbSB7IGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsgfVwiLFxuICAgICAgICAgICAgXCI8L3N0eWxlPlwiLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlclwiIGlkPVwicGFuZWxfaGVhZGVyXCIgdW5zZWxlY3RhYmxlPVwib25cIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlci1pbm5lclwiIHN0eWxlPVwibGF5b3V0OiBpbmxpbmU7XCI+Q2F0ZWdvcmllcyBpbiA8JT0gdG9vbF9zaGVkLnJlcGxhY2UoLyUyZi9nLCBcIi9cIikgJT48L2Rpdj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlci1pbm5lclwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyByaWdodDogNXB4OyB0b3A6IDBweDtcIj48YSBocmVmPVwiIy9xdWV1ZVwiPlJlcG9zaXRvcnkgUXVldWUgKDwlPSBxdWV1ZSAlPik8L2E+PC9kaXY+JyxcbiAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVuaWZpZWQtcGFuZWwtYm9keVwiIGlkPVwibGlzdF9jYXRlZ29yaWVzXCI+JyxcbiAgICAgICAgICAgICc8ZGl2IGlkPVwic3RhbmRhcmQtc2VhcmNoXCIgc3R5bGU9XCJoZWlnaHQ6IDJlbTsgbWFyZ2luOiAxZW07XCI+JyxcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInVpLXdpZGdldFwiID4nLFxuICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlYXJjaC1ib3gtaW5wdXRcIiBpZD1cInNlYXJjaF9ib3hcIiBkYXRhLXNoZWR1cmw9XCI8JT0gdG9vbF9zaGVkLnJlcGxhY2UoLyUyZi9nLCBcIi9cIikgJT5cIiBuYW1lPVwic2VhcmNoXCIgcGxhY2Vob2xkZXI9XCJTZWFyY2ggcmVwb3NpdG9yaWVzIGJ5IG5hbWUgb3IgaWRcIiBzaXplPVwiNjBcIiB0eXBlPVwidGV4dFwiIC8+JyxcbiAgICAgICAgICAgIFwiPC9zcGFuPlwiLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICc8ZGl2IHN0eWxlPVwiY2xlYXI6IGJvdGg7IG1hcmdpbi10b3A6IDFlbTtcIj4nLFxuICAgICAgICAgICAgJzx0YWJsZSBjbGFzcz1cImdyaWRcIj4nLFxuICAgICAgICAgICAgJzx0aGVhZCBpZD1cImdyaWQtdGFibGUtaGVhZGVyXCI+JyxcbiAgICAgICAgICAgIFwiPHRyPlwiLFxuICAgICAgICAgICAgXCI8dGg+TmFtZTwvdGg+XCIsXG4gICAgICAgICAgICBcIjx0aD5EZXNjcmlwdGlvbjwvdGg+XCIsXG4gICAgICAgICAgICBcIjx0aD5SZXBvc2l0b3JpZXM8L3RoPlwiLFxuICAgICAgICAgICAgXCI8L3RyPlwiLFxuICAgICAgICAgICAgXCI8L3RoZWFkPlwiLFxuICAgICAgICAgICAgXCI8JSBfLmVhY2goY2F0ZWdvcmllcywgZnVuY3Rpb24oY2F0ZWdvcnkpIHsgJT5cIixcbiAgICAgICAgICAgIFwiPHRyPlwiLFxuICAgICAgICAgICAgXCI8dGQ+XCIsXG4gICAgICAgICAgICAnPGEgaHJlZj1cIiMvY2F0ZWdvcnkvcy88JT0gdG9vbF9zaGVkICU+L2MvPCU9IGNhdGVnb3J5LmdldChcImlkXCIpICU+XCI+PCU9IGNhdGVnb3J5LmdldChcIm5hbWVcIikgJT48L2E+JyxcbiAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICc8dGQ+PCU9IGNhdGVnb3J5LmdldChcImRlc2NyaXB0aW9uXCIpICU+PC90ZD4nLFxuICAgICAgICAgICAgJzx0ZD48JT0gY2F0ZWdvcnkuZ2V0KFwicmVwb3NpdG9yaWVzXCIpICU+PC90ZD4nLFxuICAgICAgICAgICAgXCI8L3RyPlwiLFxuICAgICAgICAgICAgXCI8JSB9KTsgJT5cIixcbiAgICAgICAgICAgIFwiPC90YWJsZT5cIixcbiAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgIF0uam9pbihcIlwiKVxuICAgIClcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgQ2F0ZWdvcnlWaWV3OiBUb29sU2hlZENhdGVnb3JpZXNcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL3Rvb2xzaGVkL2NhdGVnb3JpZXMtdmlldy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUEzQkE7QUE2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkVBO0FBQ0E7QUEyR0E7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///308\n");

/***/ }),

/***/ 309:
/*!**********************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/repositories-view.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toolshedModel = __webpack_require__(/*! mvc/toolshed/toolshed-model */ 17);\n\nvar _toolshedModel2 = _interopRequireDefault(_toolshedModel);\n\nvar _util = __webpack_require__(/*! mvc/toolshed/util */ 18);\n\nvar _util2 = _interopRequireDefault(_util);\n\n__webpack_require__(/*! libs/jquery/jquery-ui */ 30);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ToolShedCategoryContentsView = Backbone.View.extend({\n    el: \"#center\",\n\n    initialize: function initialize(params) {\n        var self = this;\n        this.model = new _toolshedModel2.default.CategoryCollection();\n        this.listenTo(this.model, \"sync\", this.render);\n        var shed = params.tool_shed.replace(/\\//g, \"%2f\");\n        this.model.url += \"?tool_shed_url=\" + shed + \"&category_id=\" + params.category_id;\n        this.model.tool_shed = shed;\n        this.model.category = params.category_id;\n        this.model.fetch();\n    },\n\n    render: function render(options) {\n        this.options = _.extend(this.options, options);\n        var category_contents_template = this.templateCategoryContents;\n        this.$el.html(category_contents_template({\n            category: this.model.models[0],\n            tool_shed: this.model.tool_shed,\n            queue: _util2.default.queueLength()\n        }));\n        $(\"#center\").css(\"overflow\", \"auto\");\n        this.bindEvents();\n    },\n\n    bindEvents: function bindEvents() {\n        var that = this;\n        $(\"#search_box\").autocomplete({\n            source: function source(request, response) {\n                var shed_url = that.model.tool_shed.replace(/%2f/g, \"/\");\n                var base_url = Galaxy.root + \"api/tool_shed/search\";\n                var params = {\n                    term: request.term,\n                    tool_shed_url: shed_url\n                };\n                $.post(base_url, params, function (data) {\n                    var result_list = _util2.default.shedParser(data);\n                    response(result_list);\n                });\n            },\n            minLength: 3,\n            select: function select(event, ui) {\n                var tsr_id = ui.item.value;\n                var new_route = \"repository/s/\" + that.model.tool_shed + \"/r/\" + tsr_id;\n                Backbone.history.navigate(new_route, {\n                    trigger: true,\n                    replace: true\n                });\n            }\n        });\n    },\n\n    reDraw: function reDraw(options) {\n        this.$el.empty();\n        this.initialize(options);\n    },\n\n    templateCategoryContents: _.template(['<style type=\"text/css\">', \".ui-autocomplete { background-color: #fff; }\", \"li.ui-menu-item { list-style-type: none; }\", \"</style>\", '<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">', '<div class=\"unified-panel-header-inner\">Repositories in <%= category.get(\"name\") %></div>', '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>', \"</div>\", '<div class=\"unified-panel-body\" id=\"list_repositories\">', '<div id=\"standard-search\" style=\"height: 2em; margin: 1em;\">', '<span class=\"ui-widget\" >', '<input class=\"search-box-input\" id=\"search_box\" name=\"search\" data-shedurl=\"<%= tool_shed.replace(/%2f/g, \"/\") %>\" placeholder=\"Search repositories by name or id\" size=\"60\" type=\"text\" />', \"</span>\", \"</div>\", '<div style=\"clear: both; margin-top: 1em;\">', '<table class=\"grid\">', '<thead id=\"grid-table-header\">', \"<tr>\", '<th style=\"width: 10%;\">Owner</th>', '<th style=\"width: 15%;\">Name</th>', \"<th>Synopsis</th>\", '<th style=\"width: 10%;\">Type</th>', \"</tr>\", \"</thead>\", '<% _.each(category.get(\"repositories\"), function(repository) { %>', \"<tr>\", \"<td><%= repository.owner %></td>\", \"<td>\", '<div style=\"float: left; margin-left: 1px;\" class=\"menubutton split\">', '<a href=\"#/repository/s/<%= tool_shed %>/r/<%= repository.id %>\"><%= repository.name %></a>', \"</div>\", \"</td>\", \"<td><%= repository.description %></td>\", \"<td><%= repository.type %></td>\", \"</tr>\", \"<% }); %>\", \"</table>\", \"</div>\", \"</div>\"].join(\"\"))\n});\n\nexports.default = {\n    Category: ToolShedCategoryContentsView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC9yZXBvc2l0b3JpZXMtdmlldy5qcz9jZDFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0b29sc2hlZF9tb2RlbCBmcm9tIFwibXZjL3Rvb2xzaGVkL3Rvb2xzaGVkLW1vZGVsXCI7XG5pbXBvcnQgdG9vbHNoZWRfdXRpbCBmcm9tIFwibXZjL3Rvb2xzaGVkL3V0aWxcIjtcbmltcG9ydCBcImxpYnMvanF1ZXJ5L2pxdWVyeS11aVwiO1xudmFyIFRvb2xTaGVkQ2F0ZWdvcnlDb250ZW50c1ZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgZWw6IFwiI2NlbnRlclwiLFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyB0b29sc2hlZF9tb2RlbC5DYXRlZ29yeUNvbGxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcInN5bmNcIiwgdGhpcy5yZW5kZXIpO1xuICAgICAgICB2YXIgc2hlZCA9IHBhcmFtcy50b29sX3NoZWQucmVwbGFjZSgvXFwvL2csIFwiJTJmXCIpO1xuICAgICAgICB0aGlzLm1vZGVsLnVybCArPSBgP3Rvb2xfc2hlZF91cmw9JHtzaGVkfSZjYXRlZ29yeV9pZD0ke3BhcmFtcy5jYXRlZ29yeV9pZH1gO1xuICAgICAgICB0aGlzLm1vZGVsLnRvb2xfc2hlZCA9IHNoZWQ7XG4gICAgICAgIHRoaXMubW9kZWwuY2F0ZWdvcnkgPSBwYXJhbXMuY2F0ZWdvcnlfaWQ7XG4gICAgICAgIHRoaXMubW9kZWwuZmV0Y2goKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF8uZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHZhciBjYXRlZ29yeV9jb250ZW50c190ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVDYXRlZ29yeUNvbnRlbnRzO1xuICAgICAgICB0aGlzLiRlbC5odG1sKFxuICAgICAgICAgICAgY2F0ZWdvcnlfY29udGVudHNfdGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiB0aGlzLm1vZGVsLm1vZGVsc1swXSxcbiAgICAgICAgICAgICAgICB0b29sX3NoZWQ6IHRoaXMubW9kZWwudG9vbF9zaGVkLFxuICAgICAgICAgICAgICAgIHF1ZXVlOiB0b29sc2hlZF91dGlsLnF1ZXVlTGVuZ3RoKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgICQoXCIjY2VudGVyXCIpLmNzcyhcIm92ZXJmbG93XCIsIFwiYXV0b1wiKTtcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgfSxcblxuICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICQoXCIjc2VhcmNoX2JveFwiKS5hdXRvY29tcGxldGUoe1xuICAgICAgICAgICAgc291cmNlOiBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBzaGVkX3VybCA9IHRoYXQubW9kZWwudG9vbF9zaGVkLnJlcGxhY2UoLyUyZi9nLCBcIi9cIik7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VfdXJsID0gYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9zZWFyY2hgO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRlcm06IHJlcXVlc3QudGVybSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbF9zaGVkX3VybDogc2hlZF91cmxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICQucG9zdChiYXNlX3VybCwgcGFyYW1zLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdF9saXN0ID0gdG9vbHNoZWRfdXRpbC5zaGVkUGFyc2VyKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZShyZXN1bHRfbGlzdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWluTGVuZ3RoOiAzLFxuICAgICAgICAgICAgc2VsZWN0OiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHNyX2lkID0gdWkuaXRlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3X3JvdXRlID0gYHJlcG9zaXRvcnkvcy8ke3RoYXQubW9kZWwudG9vbF9zaGVkfS9yLyR7dHNyX2lkfWA7XG4gICAgICAgICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZShuZXdfcm91dGUsIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgcmVEcmF3OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuJGVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgdGVtcGxhdGVDYXRlZ29yeUNvbnRlbnRzOiBfLnRlbXBsYXRlKFxuICAgICAgICBbXG4gICAgICAgICAgICAnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPicsXG4gICAgICAgICAgICBcIi51aS1hdXRvY29tcGxldGUgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XCIsXG4gICAgICAgICAgICBcImxpLnVpLW1lbnUtaXRlbSB7IGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsgfVwiLFxuICAgICAgICAgICAgXCI8L3N0eWxlPlwiLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlclwiIGlkPVwicGFuZWxfaGVhZGVyXCIgdW5zZWxlY3RhYmxlPVwib25cIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlci1pbm5lclwiPlJlcG9zaXRvcmllcyBpbiA8JT0gY2F0ZWdvcnkuZ2V0KFwibmFtZVwiKSAlPjwvZGl2PicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVuaWZpZWQtcGFuZWwtaGVhZGVyLWlubmVyXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHJpZ2h0OiA1cHg7IHRvcDogMHB4O1wiPjxhIGhyZWY9XCIjL3F1ZXVlXCI+UmVwb3NpdG9yeSBRdWV1ZSAoPCU9IHF1ZXVlICU+KTwvYT48L2Rpdj4nLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidW5pZmllZC1wYW5lbC1ib2R5XCIgaWQ9XCJsaXN0X3JlcG9zaXRvcmllc1wiPicsXG4gICAgICAgICAgICAnPGRpdiBpZD1cInN0YW5kYXJkLXNlYXJjaFwiIHN0eWxlPVwiaGVpZ2h0OiAyZW07IG1hcmdpbjogMWVtO1wiPicsXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJ1aS13aWRnZXRcIiA+JyxcbiAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZWFyY2gtYm94LWlucHV0XCIgaWQ9XCJzZWFyY2hfYm94XCIgbmFtZT1cInNlYXJjaFwiIGRhdGEtc2hlZHVybD1cIjwlPSB0b29sX3NoZWQucmVwbGFjZSgvJTJmL2csIFwiL1wiKSAlPlwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIHJlcG9zaXRvcmllcyBieSBuYW1lIG9yIGlkXCIgc2l6ZT1cIjYwXCIgdHlwZT1cInRleHRcIiAvPicsXG4gICAgICAgICAgICBcIjwvc3Bhbj5cIixcbiAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAnPGRpdiBzdHlsZT1cImNsZWFyOiBib3RoOyBtYXJnaW4tdG9wOiAxZW07XCI+JyxcbiAgICAgICAgICAgICc8dGFibGUgY2xhc3M9XCJncmlkXCI+JyxcbiAgICAgICAgICAgICc8dGhlYWQgaWQ9XCJncmlkLXRhYmxlLWhlYWRlclwiPicsXG4gICAgICAgICAgICBcIjx0cj5cIixcbiAgICAgICAgICAgICc8dGggc3R5bGU9XCJ3aWR0aDogMTAlO1wiPk93bmVyPC90aD4nLFxuICAgICAgICAgICAgJzx0aCBzdHlsZT1cIndpZHRoOiAxNSU7XCI+TmFtZTwvdGg+JyxcbiAgICAgICAgICAgIFwiPHRoPlN5bm9wc2lzPC90aD5cIixcbiAgICAgICAgICAgICc8dGggc3R5bGU9XCJ3aWR0aDogMTAlO1wiPlR5cGU8L3RoPicsXG4gICAgICAgICAgICBcIjwvdHI+XCIsXG4gICAgICAgICAgICBcIjwvdGhlYWQ+XCIsXG4gICAgICAgICAgICAnPCUgXy5lYWNoKGNhdGVnb3J5LmdldChcInJlcG9zaXRvcmllc1wiKSwgZnVuY3Rpb24ocmVwb3NpdG9yeSkgeyAlPicsXG4gICAgICAgICAgICBcIjx0cj5cIixcbiAgICAgICAgICAgIFwiPHRkPjwlPSByZXBvc2l0b3J5Lm93bmVyICU+PC90ZD5cIixcbiAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgJzxkaXYgc3R5bGU9XCJmbG9hdDogbGVmdDsgbWFyZ2luLWxlZnQ6IDFweDtcIiBjbGFzcz1cIm1lbnVidXR0b24gc3BsaXRcIj4nLFxuICAgICAgICAgICAgJzxhIGhyZWY9XCIjL3JlcG9zaXRvcnkvcy88JT0gdG9vbF9zaGVkICU+L3IvPCU9IHJlcG9zaXRvcnkuaWQgJT5cIj48JT0gcmVwb3NpdG9yeS5uYW1lICU+PC9hPicsXG4gICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgXCI8dGQ+PCU9IHJlcG9zaXRvcnkuZGVzY3JpcHRpb24gJT48L3RkPlwiLFxuICAgICAgICAgICAgXCI8dGQ+PCU9IHJlcG9zaXRvcnkudHlwZSAlPjwvdGQ+XCIsXG4gICAgICAgICAgICBcIjwvdHI+XCIsXG4gICAgICAgICAgICBcIjwlIH0pOyAlPlwiLFxuICAgICAgICAgICAgXCI8L3RhYmxlPlwiLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgIFwiPC9kaXY+XCJcbiAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgKVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBDYXRlZ29yeTogVG9vbFNoZWRDYXRlZ29yeUNvbnRlbnRzVmlld1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvdG9vbHNoZWQvcmVwb3NpdG9yaWVzLXZpZXcuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFyQkE7QUF1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTVEQTtBQUNBO0FBd0dBO0FBQ0E7QUFEQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///309\n");

/***/ }),

/***/ 310:
/*!********************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/repository-view.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toolshedModel = __webpack_require__(/*! mvc/toolshed/toolshed-model */ 17);\n\nvar _toolshedModel2 = _interopRequireDefault(_toolshedModel);\n\nvar _jstree = __webpack_require__(/*! libs/jquery/jstree */ 128);\n\nvar _jstree2 = _interopRequireDefault(_jstree);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiModal = __webpack_require__(/*! mvc/ui/ui-modal */ 8);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nvar _util = __webpack_require__(/*! mvc/toolshed/util */ 18);\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ToolShedRepositoryView = Backbone.View.extend({\n    el: \"#center\",\n\n    initialize: function initialize(params) {\n        var self = this;\n        this.options = _.defaults(this.options || {}, this.defaults);\n        this.model = new _toolshedModel2.default.RepositoryCollection();\n        this.listenTo(this.model, \"sync\", this.render);\n        var shed = params.tool_shed.replace(/\\//g, \"%2f\");\n        this.model.url += \"?tool_shed_url=\" + shed + \"&repository_id=\" + params.repository_id;\n        this.model.tool_shed_url = params.tool_shed.replace(/%2f/g, \"/\");\n        this.model.tool_shed = shed;\n        this.model.category = params.repository_id;\n        this.model.fetch();\n    },\n\n    render: function render(options) {\n        var repo_details_template = this.templateRepoDetails;\n        var models = this.model.models[0];\n        this.options = {\n            repository: models.get(\"repository\"),\n            tool_shed: this.model.tool_shed,\n            queue: _util2.default.queueLength()\n        };\n        var changesets = Object.keys(this.options.repository.metadata).sort(function (a, b) {\n            return parseInt(a.split(\":\")[0] - b.split(\":\")[0]);\n        });\n        var ordered_metadata = {};\n        var unordered_metadata = this.options.repository.metadata;\n        changesets.forEach(function (key) {\n            ordered_metadata[key] = unordered_metadata[key];\n        });\n        this.options.repository.metadata = ordered_metadata;\n        this.options.current_changeset = this.options.current_changeset || changesets[changesets.length - 1];\n        this.options.current_metadata = this.options.repository.metadata[this.options.current_changeset];\n        this.options.current_metadata.tool_shed_url = this.model.tool_shed_url;\n        this.options.tools = this.options.current_metadata.tools;\n        this.options.repository_dependencies_template = this.templateRepoDependencies;\n        this.options.repository_dependency_template = this.templateRepoDependency;\n        this.options.tps_template_global_select = this.templateGlobalSectionSelect;\n        this.options.tps_template_tool_select = this.templateToolSectionSelect;\n        this.options.tps_select_options = this.templatePanelSelectOptions;\n        this.options.tool_dependencies = models.get(\"tool_dependencies\");\n        this.options.shed_tool_conf = this.templateShedToolConf({\n            shed_tool_confs: models.get(\"shed_conf\")\n        });\n        this.options.panel_section_dict = models.get(\"panel_section_dict\");\n        this.options.api_url = Galaxy.root + \"api/tool_shed_repositories/install?async=True\";\n        this.options = _.extend(this.options, options);\n        this.$el.html(repo_details_template(this.options));\n        this.checkInstalled(this.options.current_metadata);\n        this.bindEvents();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    bindEvents: function bindEvents() {\n        var that = this;\n        $(\"#changeset\").on(\"change\", function () {\n            that.options.current_changeset = $(\"#changeset\").find(\"option:selected\").text();\n            that.options.current_metadata = that.options.repository.metadata[that.options.current_changeset];\n            that.checkInstalled(that.options.current_metadata);\n            that.reDraw(that.options);\n        });\n        $(\"#tool_panel_section_select\").on(\"change\", function () {\n            that.tpsSelection();\n        });\n        $(\"#install_repository\").on(\"click\", function (ev) {\n            var form = $(\"#repository_installation\");\n            ev.preventDefault();\n            var params = {};\n            params.repositories = JSON.stringify([[$(\"#install_repository\").attr(\"data-tsrid\"), $(\"#changeset\").find(\"option:selected\").val()]]);\n            params.tool_shed_repository_ids = JSON.stringify([$(\"#install_repository\").attr(\"data-tsrid\")]);\n            params.tool_shed_url = that.model.tool_shed_url;\n            params.install_tool_dependencies = $(\"#install_tool_dependencies\").val();\n            params.install_repository_dependencies = $(\"#install_repository_dependencies\").val();\n            params.install_resolver_dependencies = $(\"#install_resolver_dependencies\").val();\n            var tps = that.panelSelect(params);\n            params.tool_panel_section = JSON.stringify(that.panelSelect(params));\n            params.shed_tool_conf = $(\"select[name='shed_tool_conf']\").find(\"option:selected\").val();\n            params.changeset = $(\"#changeset\").find(\"option:selected\").val();\n            var url = $(\"#repository_installation\").attr(\"action\");\n            that.prepareInstall(params, url);\n        });\n        $(\"#queue_install\").on(\"click\", function (ev) {\n            that.options.current_changeset = $(\"#changeset\").find(\"option:selected\").text();\n            that.options.current_metadata = that.options.repository.metadata[that.options.current_changeset];\n            var changeset = that.options.current_changeset;\n            var repository_metadata = {};\n            _.each(Object.keys(that.options.current_metadata), function (key) {\n                if (!repository_metadata[key]) {\n                    repository_metadata[key] = that.options.current_metadata[key];\n                }\n            });\n            repository_metadata.install_tool_dependencies = $(\"#install_tool_dependencies\").val();\n            repository_metadata.install_repository_dependencies = $(\"#install_repository_dependencies\").val();\n            repository_metadata.install_resolver_dependencies = $(\"#install_resolver_dependencies\").val();\n            repository_metadata.tool_panel_section = JSON.stringify(that.panelSelect({}));\n            repository_metadata.shed_tool_conf = $(\"select[name='shed_tool_conf']\").find(\"option:selected\").val();\n            repository_metadata.tool_shed_url = that.model.tool_shed_url;\n            if (repository_metadata.tool_shed_url.substr(-1) == \"/\") {\n                repository_metadata.tool_shed_url = repository_metadata.tool_shed_url.substr(0, repository_metadata.tool_shed_url.length - 1);\n            }\n            _util2.default.addToQueue(repository_metadata);\n            that.checkInstalled(repository_metadata);\n        });\n        $(\".tool_panel_section_picker\").on(\"change\", function () {\n            var new_value = $(this).find(\"option:selected\").val();\n            var default_tps = $(\"#tool_panel_section_select\").find(\"option:selected\").val();\n            if (new_value == default_tps) {\n                $(this).attr(\"default\", \"active\");\n            } else {\n                $(this).removeAttr(\"default\");\n            }\n        });\n        $(function () {\n            $(\"#repository_dependencies\").jstree();\n        });\n        $(\".tool_form\").on(\"click\", function () {\n            var guid = $(this).attr(\"data-guid\");\n            var clean = $(this).attr(\"data-clean\");\n            var name = $(this).attr(\"data-name\");\n            var desc = $(this).attr(\"data-desc\");\n            var tool_shed_url = that.model.tool_shed_url;\n            var tsr_id = $(\"#repository_details\").attr(\"data-tsrid\");\n            var changeset = $(\"#changeset\").find(\"option:selected\").val();\n            var api_url = Galaxy.root + \"api/tool_shed/tool_json\";\n            var params = {\n                guid: guid,\n                tool_shed_url: tool_shed_url,\n                tsr_id: tsr_id,\n                changeset: changeset\n            };\n            $.get(api_url, params, function (data) {\n                data.cls = \"ui-portlet-plain\";\n                var toolform = new _formView2.default(data);\n                _utils2.default.deepeach(data.inputs, function (input) {\n                    if (input.type) {\n                        if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                            input.type = \"hidden\";\n                            input.info = \"Data input '\" + input.name + \"' (\" + _utils2.default.textify(input.extensions) + \")\";\n                        }\n                    }\n                });\n                var modal = new _uiModal2.default.View();\n                var modal_title = \"<u>\" + name + \"</u> \" + desc;\n                modal.show({\n                    closing_events: true,\n                    title: modal_title,\n                    body: toolform.$el,\n                    buttons: {\n                        Close: function Close() {\n                            modal.hide();\n                        }\n                    }\n                });\n            });\n        });\n    },\n\n    checkInstalled: function checkInstalled(metadata) {\n        var that = this;\n        var params = { name: metadata.name, owner: metadata.owner };\n        var already_installed = false;\n        var queued = that.repoQueued(metadata);\n        $.get(Galaxy.root + \"api/tool_shed_repositories\", params, function (data) {\n            for (var index = 0; index < data.length; index++) {\n                var repository = data[index];\n                var installed = !repository.deleted && !repository.uninstalled;\n                var changeset_match = repository.changeset_revision == metadata.changeset_revision || repository.installed_changeset_revision == metadata.changeset_revision;\n                if (repository.name == metadata.repository.name && repository.owner == metadata.repository.owner && installed && changeset_match) {\n                    already_installed = true;\n                }\n                if (already_installed) {\n                    $(\"#install_repository\").prop(\"disabled\", true);\n                    $(\"#install_repository\").val(\"This revision is already installed\");\n                } else {\n                    $(\"#install_repository\").prop(\"disabled\", false);\n                    $(\"#install_repository\").val(\"Install this revision\");\n                }\n            }\n            if (that.repoQueued(metadata) || already_installed) {\n                $(\"#queue_install\").hide();\n                $(\"#queue_install\").val(\"This revision is already in the queue\");\n            } else {\n                $(\"#queue_install\").show();\n                $(\"#queue_install\").val(\"Install this revision later\");\n            }\n        });\n    },\n\n    panelSelect: function panelSelect(params) {\n        var tool_panel_section = {};\n        if ($(\"#tool_panel_section_select\").length) {\n            params.tool_panel_section_id = $(\"#tool_panel_section_select\").find(\"option:selected\").val();\n        } else {\n            params.new_tool_panel_section = $(\"#new_tool_panel_section\").val();\n        }\n        $(\".tool_panel_section_picker\").each(function () {\n            var element_name = $(this).attr(\"name\");\n            var tool_guid = $(this).attr(\"data-toolguid\");\n            if (element_name === \"tool_panel_section_id\") {\n                tool_panel_section[tool_guid] = {\n                    tool_panel_section: $(this).find(\"option:selected\").val(),\n                    action: \"append\"\n                };\n            } else {\n                tool_panel_section[tool_guid] = {\n                    tool_panel_section: $(this).val(),\n                    action: \"create\"\n                };\n            }\n        });\n        return tool_panel_section;\n    },\n\n    reDraw: function reDraw(options) {\n        this.$el.empty();\n        this.render(options);\n    },\n\n    repoQueued: function repoQueued(metadata) {\n        var that = this;\n        if (!localStorage.repositories) {\n            return;\n        }\n        var queue_key = that.queueKey(metadata);\n        var queued_repos;\n        if (localStorage.repositories) {\n            queued_repos = JSON.parse(localStorage.repositories);\n        }\n        if (queued_repos && queued_repos.hasOwnProperty(queue_key)) {\n            return true;\n        }\n        return false;\n    },\n\n    queueKey: function queueKey(metadata) {\n        var shed_url = this.model.tool_shed_url;\n        // Make sure there is never a trailing slash on the shed URL.\n        if (shed_url.substr(-1) == \"/\") {\n            shed_url = shed_url.substr(0, shed_url.length - 1);\n        }\n        return shed_url + \"|\" + metadata.repository_id + \"|\" + metadata.changeset_revision;\n    },\n\n    tpsSelection: function tpsSelection() {\n        new_tps = $(\"#tool_panel_section_select\").find(\"option:selected\").val();\n        $('.tool_panel_section_picker[default=\"active\"]').each(function () {\n            $(this).val(new_tps);\n        });\n    },\n\n    prepareInstall: function prepareInstall(params, api_url) {\n        var that = this;\n        $.post(api_url, params, function (data) {\n            var iri_parameters = JSON.parse(data);\n            that.doInstall(iri_parameters);\n        });\n    },\n\n    doInstall: function doInstall(params) {\n        var controller_url = Galaxy.root + \"admin_toolshed/install_repositories\";\n        var repositories = params.repositories;\n        var new_route = \"status/r/\" + repositories.join(\"|\");\n        $.post(controller_url, params, function (data) {\n            console.log(\"Initializing repository installation succeeded\");\n        });\n        Backbone.history.navigate(new_route, {\n            trigger: true,\n            replace: true\n        });\n    },\n\n    templateRepoDetails: _.template(['<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">', '<div class=\"unified-panel-header-inner\">Repository information for <strong><%= repository.name %></strong> from <strong><%= repository.owner %></strong></div>', '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>', \"</div>\", '<div class=\"unified-panel-body\" id=\"repository_details\" data-tsrid=\"<%= repository.id %>\">', '<form id=\"repository_installation\" name=\"install_repository\" method=\"post\" action=\"<%= api_url %>\">', '<input type=\"hidden\" id=\"repositories\" name=\"<%= repository.id %>\" value=\"ID\" />', '<input type=\"hidden\" id=\"tool_shed_url\" name=\"tool_shed_url\" value=\"<%= tool_shed %>\" />', '<div class=\"toolForm\">', '<div class=\"toolFormTitle\">Changeset</div>', '<div class=\"toolFormBody changeset\">', '<select id=\"changeset\" name=\"changeset\" style=\"margin: 5px;\">', \"<% _.each(Object.keys(repository.metadata), function(changeset) { %>\", '<% if (changeset == current_changeset) { var selected = \"selected \"; } else { var selected = \"\"; } %>', '<option <%= selected %>value=\"<%= changeset.split(\":\")[1] %>\"><%= changeset %></option>', \"<% }); %>\", \"</select>\", '<input class=\"btn btn-primary preview-button\" data-tsrid=\"<%= current_metadata.repository.id %>\" type=\"submit\" id=\"install_repository\" name=\"install_repository\" value=\"Install this revision now\" />', '<input class=\"btn btn-primary preview-button\" type=\"button\" id=\"queue_install\" name=\"queue_install\" value=\"Install this revision later\" />', '<div class=\"toolParamHelp\" style=\"clear: both;\">Please select a revision and review the settings below before installing.</div>', \"</div>\", \"</div>\", \"<%= shed_tool_conf %>\", \"<% if (current_metadata.has_repository_dependencies) { %>\", '<div class=\"toolFormTitle\">Repository dependencies for <strong id=\"current_changeset\"><%= current_changeset %></strong></div>', '<div class=\"toolFormBody\">', '<p id=\"install_repository_dependencies_checkbox\">', '<input type=\"checkbox\" checked id=\"install_repository_dependencies\" />', '<label for=\"install_repository_dependencies\">Install repository dependencies</label>', \"</p>\", \"<% current_metadata.repository_dependency_template = repository_dependency_template; %>\", '<div class=\"tables container-table\" id=\"repository_dependencies\">', '<div class=\"expandLink\">', '<a class=\"toggle_folder\" data_target=\"repository_dependencies_table\">', \"Repository dependencies &ndash; <em>installation of these additional repositories is required</em>\", \"</a>\", \"</div>\", \"<%= repository_dependencies_template(current_metadata) %>\", \"</div>\", \"</div>\", \"<% } %>\", \"<% if (current_metadata.includes_tool_dependencies) { %>\", '<div class=\"toolFormTitle\">Tool dependencies</div>', '<div class=\"toolFormBody\">', '<p id=\"install_resolver_dependencies_checkbox\">', '<input type=\"checkbox\" checked id=\"install_resolver_dependencies\" />', '<label for=\"install_resolver_dependencies\">Install resolver dependencies</label>', \"</p>\", '<p id=\"install_tool_dependencies_checkbox\">', '<input type=\"checkbox\" checked id=\"install_tool_dependencies\" />', '<label for=\"install_tool_dependencies\">Install tool dependencies</label>', \"</p>\", '<div class=\"tables container-table\" id=\"tool_dependencies\">', '<div class=\"expandLink\">', '<a class=\"toggle_folder\" data_target=\"tool_dependencies_table\">', \"Tool dependencies &ndash; <em>repository tools require handling of these dependencies</em>\", \"</a>\", \"</div>\", '<table class=\"tables container-table\" id=\"tool_dependencies_table\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">', \"<thead>\", '<tr style=\"display: table-row;\" class=\"datasetRow\" parent=\"0\" id=\"libraryItem-rt-f9cad7b01a472135\">', '<th style=\"padding-left: 40px;\">Name</th>', \"<th>Version</th>\", \"<th>Type</th>\", \"</tr>\", \"</thead>\", '<tbody id=\"tool_deps\">', \"<% _.each(tool_dependencies[current_changeset], function(dependency) { %>\", '<tr class=\"datasetRow tool_dependency_row\" style=\"display: table-row;\">', '<td style=\"padding-left: 40px;\">', \"<%= dependency.name %></td>\", \"<td><%= dependency.version %></td>\", \"<td><%= dependency.type %></td>\", \"</tr>\", \"<% }); %>\", \"</tbody>\", \"</table>\", \"</div>\", \"</div>\", \"<% } %>\", \"<% if (current_metadata.includes_tools_for_display_in_tool_panel) { %>\", '<div class=\"toolFormTitle\">Tools &ndash; <em>click the name to preview the tool and use the pop-up menu to inspect all metadata</em></div>', '<div class=\"toolFormBody\">', '<div class=\"tables container-table\" id=\"tools_toggle\">', '<table class=\"tables container-table\" id=\"valid_tools\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">', \"<thead>\", '<tr style=\"display: table-row;\" class=\"datasetRow\" parent=\"0\" id=\"libraryItem-rt-f9cad7b01a472135\">', '<th style=\"padding-left: 40px;\">Name</th>', \"<th>Description</th>\", \"<th>Version</th>\", \"<th><%= tps_template_global_select({tps: panel_section_dict, tps_select_options: tps_select_options}) %></tr>\", \"</thead>\", '<tbody id=\"tools_in_repo\">', \"<% _.each(current_metadata.tools, function(tool) { %>\", '<tr id=\"libraryItem-<%= tool.clean %>\" class=\"tool_row\" style=\"display: table-row;\" style=\"width: 15%\">', '<td style=\"padding-left: 40px;\">', '<div id=\"tool-<%= tool.clean %>\" class=\"menubutton split popup\" style=\"float: left;\">', '<a class=\"tool_form view-info\" data-toggle=\"modal\" data-target=\"toolform_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" data-guid=\"<%= tool.guid %>\" data-name=\"<%= tool.name %>\" data-desc=\"<%= tool.description %>\"><%= tool.name %></a>', \"</div>\", \"</td>\", \"<td><%= tool.description %></td>\", '<td style=\"width: 15%\"><%= tool.version %></td>', '<td style=\"width: 35%\" id=\"tool_tps_<%= tool.clean %>\">', \"<%= tps_template_tool_select({tool: tool, tps: panel_section_dict, tps_select_options: tps_select_options}) %>\", \"</td>\", \"</tr>\", \"<% }); %>\", \"</tbody>\", \"</table>\", \"</div>\", \"</div>\", \"<% } %>\", \"</form>\", \"</div>\"].join(\"\")),\n\n    templateRepoDependencies: _.template(['<div class=\"toolFormTitle\">Repository Dependencies</div>', '<div class=\"toolFormBody tables container-table\" id=\"repository_dependencies\">', \"<ul>\", \"<li>Repository installation requires the following\", \"<% if (has_repository_dependencies) { %>\", \"<% _.each(repository_dependencies, function(dependency) { %>\", \"<% dependency.repository_dependency_template = repository_dependency_template; %>\", \"<%= repository_dependency_template(dependency) %>\", \"<% }); %>\", \"<% } %>\", \"</li>\", \"</ul>\", \"</div>\"].join(\"\")),\n\n    templateRepoDependency: _.template(['<li id=\"metadata_<%= id %>\" class=\"datasetRow repository_dependency_row\">', \"Repository <b><%= repository.name %></b> revision <b><%= changeset_revision %></b> owned by <b><%= repository.owner %></b>\", \"<% if (has_repository_dependencies) { %>\", '<ul class=\"child_dependencies\">', \"<% _.each(repository_dependencies, function(dependency) { %>\", \"<% dependency.repository_dependency_template = repository_dependency_template; %>\", \"<%= repository_dependency_template(dependency) %>\", \"<% }); %>\", \"</ul>\", \"<% } %>\", \"</li>\"].join(\"\")),\n\n    templateShedToolConf: _.template(['<div class=\"toolFormTitle\">Shed tool configuration file:</div>', '<div class=\"toolFormBody\">', '<div class=\"form-row\">', '<select name=\"shed_tool_conf\">', \"<% _.each(shed_tool_confs.options, function(conf) { %>\", '<option value=\"<%= conf.value %>\"><%= conf.label %></option>', \"<% }); %>\", '</select>', '<div class=\"toolParamHelp\" style=\"clear: both;\">Select the file whose <b>tool_path</b> setting you want used for installing repositories.</div>', \"</div>\", \"</div>\"].join(\"\")),\n\n    templateToolDependency: _.template([\"<% if (has_repository_dependencies) { %>\", \"<% _.each(repository_dependencies, function(dependency) { %>\", \"<% if (dependency.includes_tool_dependencies) { %>\", \"<% dependency.tool_dependency_template = tool_dependency_template %>\", \"<%= tool_dependency_template(dependency) %>\", \"<% } %>\", \"<% }); %>\", \"<% } %>\"].join(\"\")),\n\n    templateGlobalSectionCreate: _.template(['<div id=\"tool_panel_section\">', '<div class=\"form-row\" id=\"new_tps\">', '<input id=\"new_tool_panel_section\" name=\"new_tool_panel_section\" type=\"textfield\" value=\"\" size=\"40\"/>', '<input class=\"btn btn-primary\" type=\"button\" id=\"select_existing\" value=\"Select existing\" />', '<div class=\"toolParamHelp\" style=\"clear: both;\">', \"Add a new tool panel section to contain the installed tools (optional).\", \"</div>\", \"</div>\", \"</div>\"].join(\"\")),\n\n    templateGlobalSectionSelect: _.template(['<div id=\"tool_panel_section\">', '<div class=\"toolFormTitle\">Tool Panel Section</div>', '<div class=\"toolFormBody\">', '<div class=\"tab-pane\" id=\"select_tps\">', '<select name=\"<%= name %>\" id=\"<%= tps.id %>\">', \"<%= tps_select_options({sections: tps.sections}) %>\", \"</select>\", '<input class=\"btn btn-primary\" type=\"button\" id=\"create_new\" value=\"Create new\" />', '<div class=\"toolParamHelp\" style=\"clear: both;\">', \"Select an existing tool panel section to contain the installed tools (optional).\", \"</div>\", \"</div>\", \"</div>\", \"</div>\"].join(\"\")),\n\n    templateToolSectionCreate: _.template(['<div id=\"new_tps_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" class=\"form-row\">', '<input data-toolguid=\"<%= tool.guid %>\" class=\"tool_panel_section_picker\" size=\"40\" name=\"new_tool_panel_section\" id=\"new_tool_panel_section_<%= tool.clean %>\" type=\"text\">', '<input id=\"per_tool_select_<%= tool.clean %>\" class=\"btn btn-primary\" data-toolguid=\"<%= tool.guid %>\" value=\"Select existing\" id=\"select_existing_<%= tool.clean %>\" type=\"button\">', \"</div>\"].join(\"\")),\n\n    templateToolSectionSelect: _.template(['<div id=\"select_tps_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" class=\"tps_creator\">', '<select default=\"active\" style=\"width: 30em;\" data-toolguid=\"<%= tool.guid %>\" class=\"tool_panel_section_picker\" name=\"tool_panel_section_id\" id=\"tool_panel_section_select_<%= tool.clean %>\">', \"<%= tps_select_options({sections: tps.sections}) %>\", \"</select>\", '<input id=\"per_tool_create_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" class=\"btn btn-primary create-tps-button\" data-toolguid=\"<%= tool.guid %>\" value=\"Create new\" id=\"create_new_<%= tool.clean %>\" type=\"button\">', '<div style=\"clear: both;\" class=\"toolParamHelp\"></div>', \"</div>\"].join(\"\")),\n\n    templatePanelSelectOptions: _.template([\"<% _.each(sections, function(section) { %>\", '<option value=\"<%= section.id %>\"><%= section.name %></option>', \"<% }); %>\"].join(\"\"))\n});\n\nexports.default = {\n    RepoDetails: ToolShedRepositoryView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///310\n");

/***/ }),

/***/ 311:
/*!**************************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/repository-queue-view.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _toolshedModel = __webpack_require__(/*! mvc/toolshed/toolshed-model */ 17);\n\nvar _toolshedModel2 = _interopRequireDefault(_toolshedModel);\n\nvar _util = __webpack_require__(/*! mvc/toolshed/util */ 18);\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    el: \"#center\",\n\n    defaults: [{}],\n\n    initialize: function initialize(options) {\n        var that = this;\n        this.model = new _toolshedModel2.default.RepoQueue();\n        this.listenTo(this.model, \"sync\", this.render);\n        this.model.fetch();\n        that.render();\n    },\n\n    render: function render(options) {\n        var that = this;\n        var repo_queue_template = that.templateRepoQueue;\n        var repositories = that.model.models;\n        that.$el.html(repo_queue_template({\n            title: (0, _localization2.default)(\"Repository Installation Queue\"),\n            repositories: repositories,\n            queue: _util2.default.queueLength()\n        }));\n        $(\"#center\").css(\"overflow\", \"auto\");\n        that.bindEvents();\n    },\n\n    bindEvents: function bindEvents() {\n        var that = this;\n        $(\".install_one\").on(\"click\", function () {\n            var repository_metadata = that.loadFromQueue($(this).attr(\"data-repokey\"));\n            that.installFromQueue(repository_metadata, $(this).attr(\"data-repokey\"));\n        });\n        $(\".remove_one\").on(\"click\", function () {\n            var queue_key = $(this).attr(\"data-repokey\");\n            var repo_queue = JSON.parse(localStorage.repositories);\n            if (repo_queue.hasOwnProperty(queue_key)) {\n                var repository_id = repo_queue[queue_key].repository.id;\n                delete repo_queue[queue_key];\n                $(\"#queued_repository_\" + repository_id).remove();\n            }\n            localStorage.repositories = JSON.stringify(repo_queue);\n        });\n        $(\"#clear_queue\").on(\"click\", function () {\n            localStorage.repositories = \"{}\";\n        });\n        $(\"#from_workflow\").on(\"click\", function () {\n            Backbone.history.navigate(\"workflows\", {\n                trigger: true,\n                replace: true\n            });\n        });\n    },\n\n    installFromQueue: function installFromQueue(repository_metadata, queue_key) {\n        var that = this;\n        var params = Object();\n        params.install_tool_dependencies = repository_metadata.install_tool_dependencies;\n        params.install_repository_dependencies = repository_metadata.install_repository_dependencies;\n        params.install_resolver_dependencies = repository_metadata.install_resolver_dependencies;\n        params.tool_panel_section = repository_metadata.tool_panel_section;\n        params.shed_tool_conf = repository_metadata.shed_tool_conf;\n        params.repositories = JSON.stringify([[repository_metadata.repository.id, repository_metadata.changeset_revision]]);\n        params.tool_shed_repository_ids = JSON.stringify([repository_metadata.repository.id]);\n        params.tool_shed_url = queue_key.split(\"|\")[0];\n        params.changeset = repository_metadata.changeset_revision;\n        var url = Galaxy.root + \"api/tool_shed_repositories/install?async=True\";\n        $(\"#queued_repository_\" + repository_metadata.repository.id).remove();\n        if (localStorage.repositories) {\n            if (queue_key === undefined) {\n                queue_key = _util2.default.queueKey(repository_metadata);\n            }\n            var repository_queue = JSON.parse(localStorage.repositories);\n            if (repository_queue.hasOwnProperty(queue_key)) {\n                delete repository_queue[queue_key];\n                localStorage.repositories = JSON.stringify(repository_queue);\n            }\n        }\n\n        $.post(url, params, function (data) {\n            var iri_params = JSON.parse(data);\n            var repositories = iri_params.repositories;\n            var new_route = \"status/r/\" + repositories.join(\"|\");\n            $.post(Galaxy.root + \"admin_toolshed/install_repositories\", iri_params, function (data) {\n                console.log(\"Initializing repository installation succeeded\");\n            });\n            Backbone.history.navigate(new_route, {\n                trigger: true,\n                replace: true\n            });\n        });\n    },\n\n    loadFromQueue: function loadFromQueue(queue_key) {\n        var repository_queue = JSON.parse(localStorage.repositories);\n        if (repository_queue.hasOwnProperty(queue_key)) {\n            return repository_queue[queue_key];\n        }\n        return undefined;\n    },\n\n    reDraw: function reDraw(options) {\n        this.$el.empty();\n        this.initialize(options);\n        this.model.fetch();\n        this.render(options);\n    },\n\n    templateRepoQueue: _.template(['<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">', '<div class=\"unified-panel-header-inner\"><%= title %></div>', '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>', \"</div>\", '<div class=\"tab-pane\" id=\"panel_header\" id=\"repository_queue\">', '<table id=\"queued_repositories\" class=\"grid\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">', '<thead id=\"grid-table-header\">', \"<tr>\", '<th class=\"datasetRow\">Name</th>', '<th class=\"datasetRow\">Owner</th>', '<th class=\"datasetRow\">Revision</th>', '<th class=\"datasetRow\">ToolShed</th>', '<th class=\"datasetRow\">Install</th>', '<th class=\"datasetRow\"><input class=\"btn btn-primary\" type=\"submit\" id=\"clear_queue\" name=\"clear_queue\" value=\"Clear queue\" /></th>', \"</tr>\", \"</thead>\", \"<tbody>\", \"<% _.each(repositories, function(repository) { %>\", '<tr id=\"queued_repository_<%= repository.get(\"id\") %>\">', '<td class=\"datasetRow\"><%= repository.get(\"repository\").name %></td>', '<td class=\"datasetRow\"><%= repository.get(\"repository\").owner %></td>', '<td class=\"datasetRow\"><%= repository.get(\"changeset_revision\") %></td>', '<td class=\"datasetRow\"><%= repository.get(\"tool_shed_url\") %></td>', '<td class=\"datasetRow\">', '<input class=\"btn btn-primary install_one\" data-repokey=\"<%= repository.get(\"queue_key\") %>\" type=\"submit\" id=\"install_repository_<%= repository.get(\"id\") %>\" name=\"install_repository\" value=\"Install now\" />', \"</td>\", '<td class=\"datasetRow\">', '<input class=\"btn btn-primary remove_one\" data-repokey=\"<%= repository.get(\"queue_key\") %>\" type=\"submit\" id=\"unqueue_repository_<%= repository.get(\"id\") %>\" name=\"unqueue_repository\" value=\"Remove from queue\" />', \"</td>\", \"</tr>\", \"<% }); %>\", \"</tbody>\", \"</table>\", '<input type=\"button\" class=\"btn btn-primary\" id=\"from_workflow\" value=\"Add from workflow\" />', \"</div>\"].join(\"\"))\n});\n\nexports.default = {\n    RepoQueueView: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC9yZXBvc2l0b3J5LXF1ZXVlLXZpZXcuanM/NWM0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuaW1wb3J0IHRvb2xzaGVkX21vZGVsIGZyb20gXCJtdmMvdG9vbHNoZWQvdG9vbHNoZWQtbW9kZWxcIjtcbmltcG9ydCB0b29sc2hlZF91dGlsIGZyb20gXCJtdmMvdG9vbHNoZWQvdXRpbFwiO1xudmFyIFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgZWw6IFwiI2NlbnRlclwiLFxuXG4gICAgZGVmYXVsdHM6IFt7fV0sXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyB0b29sc2hlZF9tb2RlbC5SZXBvUXVldWUoKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcInN5bmNcIiwgdGhpcy5yZW5kZXIpO1xuICAgICAgICB0aGlzLm1vZGVsLmZldGNoKCk7XG4gICAgICAgIHRoYXQucmVuZGVyKCk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciByZXBvX3F1ZXVlX3RlbXBsYXRlID0gdGhhdC50ZW1wbGF0ZVJlcG9RdWV1ZTtcbiAgICAgICAgdmFyIHJlcG9zaXRvcmllcyA9IHRoYXQubW9kZWwubW9kZWxzO1xuICAgICAgICB0aGF0LiRlbC5odG1sKFxuICAgICAgICAgICAgcmVwb19xdWV1ZV90ZW1wbGF0ZSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IF9sKFwiUmVwb3NpdG9yeSBJbnN0YWxsYXRpb24gUXVldWVcIiksXG4gICAgICAgICAgICAgICAgcmVwb3NpdG9yaWVzOiByZXBvc2l0b3JpZXMsXG4gICAgICAgICAgICAgICAgcXVldWU6IHRvb2xzaGVkX3V0aWwucXVldWVMZW5ndGgoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgJChcIiNjZW50ZXJcIikuY3NzKFwib3ZlcmZsb3dcIiwgXCJhdXRvXCIpO1xuICAgICAgICB0aGF0LmJpbmRFdmVudHMoKTtcbiAgICB9LFxuXG4gICAgYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgJChcIi5pbnN0YWxsX29uZVwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJlcG9zaXRvcnlfbWV0YWRhdGEgPSB0aGF0LmxvYWRGcm9tUXVldWUoJCh0aGlzKS5hdHRyKFwiZGF0YS1yZXBva2V5XCIpKTtcbiAgICAgICAgICAgIHRoYXQuaW5zdGFsbEZyb21RdWV1ZShyZXBvc2l0b3J5X21ldGFkYXRhLCAkKHRoaXMpLmF0dHIoXCJkYXRhLXJlcG9rZXlcIikpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChcIi5yZW1vdmVfb25lXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcXVldWVfa2V5ID0gJCh0aGlzKS5hdHRyKFwiZGF0YS1yZXBva2V5XCIpO1xuICAgICAgICAgICAgdmFyIHJlcG9fcXVldWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5yZXBvc2l0b3JpZXMpO1xuICAgICAgICAgICAgaWYgKHJlcG9fcXVldWUuaGFzT3duUHJvcGVydHkocXVldWVfa2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciByZXBvc2l0b3J5X2lkID0gcmVwb19xdWV1ZVtxdWV1ZV9rZXldLnJlcG9zaXRvcnkuaWQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlcG9fcXVldWVbcXVldWVfa2V5XTtcbiAgICAgICAgICAgICAgICAkKGAjcXVldWVkX3JlcG9zaXRvcnlfJHtyZXBvc2l0b3J5X2lkfWApLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlcG9zaXRvcmllcyA9IEpTT04uc3RyaW5naWZ5KHJlcG9fcXVldWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChcIiNjbGVhcl9xdWV1ZVwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZXBvc2l0b3JpZXMgPSBcInt9XCI7XG4gICAgICAgIH0pO1xuICAgICAgICAkKFwiI2Zyb21fd29ya2Zsb3dcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBCYWNrYm9uZS5oaXN0b3J5Lm5hdmlnYXRlKFwid29ya2Zsb3dzXCIsIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcGxhY2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgaW5zdGFsbEZyb21RdWV1ZTogZnVuY3Rpb24ocmVwb3NpdG9yeV9tZXRhZGF0YSwgcXVldWVfa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHBhcmFtcyA9IE9iamVjdCgpO1xuICAgICAgICBwYXJhbXMuaW5zdGFsbF90b29sX2RlcGVuZGVuY2llcyA9IHJlcG9zaXRvcnlfbWV0YWRhdGEuaW5zdGFsbF90b29sX2RlcGVuZGVuY2llcztcbiAgICAgICAgcGFyYW1zLmluc3RhbGxfcmVwb3NpdG9yeV9kZXBlbmRlbmNpZXMgPSByZXBvc2l0b3J5X21ldGFkYXRhLmluc3RhbGxfcmVwb3NpdG9yeV9kZXBlbmRlbmNpZXM7XG4gICAgICAgIHBhcmFtcy5pbnN0YWxsX3Jlc29sdmVyX2RlcGVuZGVuY2llcyA9IHJlcG9zaXRvcnlfbWV0YWRhdGEuaW5zdGFsbF9yZXNvbHZlcl9kZXBlbmRlbmNpZXM7XG4gICAgICAgIHBhcmFtcy50b29sX3BhbmVsX3NlY3Rpb24gPSByZXBvc2l0b3J5X21ldGFkYXRhLnRvb2xfcGFuZWxfc2VjdGlvbjtcbiAgICAgICAgcGFyYW1zLnNoZWRfdG9vbF9jb25mID0gcmVwb3NpdG9yeV9tZXRhZGF0YS5zaGVkX3Rvb2xfY29uZjtcbiAgICAgICAgcGFyYW1zLnJlcG9zaXRvcmllcyA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAgICAgIFtyZXBvc2l0b3J5X21ldGFkYXRhLnJlcG9zaXRvcnkuaWQsIHJlcG9zaXRvcnlfbWV0YWRhdGEuY2hhbmdlc2V0X3JldmlzaW9uXVxuICAgICAgICBdKTtcbiAgICAgICAgcGFyYW1zLnRvb2xfc2hlZF9yZXBvc2l0b3J5X2lkcyA9IEpTT04uc3RyaW5naWZ5KFtyZXBvc2l0b3J5X21ldGFkYXRhLnJlcG9zaXRvcnkuaWRdKTtcbiAgICAgICAgcGFyYW1zLnRvb2xfc2hlZF91cmwgPSBxdWV1ZV9rZXkuc3BsaXQoXCJ8XCIpWzBdO1xuICAgICAgICBwYXJhbXMuY2hhbmdlc2V0ID0gcmVwb3NpdG9yeV9tZXRhZGF0YS5jaGFuZ2VzZXRfcmV2aXNpb247XG4gICAgICAgIHZhciB1cmwgPSBgJHtHYWxheHkucm9vdH1hcGkvdG9vbF9zaGVkX3JlcG9zaXRvcmllcy9pbnN0YWxsP2FzeW5jPVRydWVgO1xuICAgICAgICAkKGAjcXVldWVkX3JlcG9zaXRvcnlfJHtyZXBvc2l0b3J5X21ldGFkYXRhLnJlcG9zaXRvcnkuaWR9YCkucmVtb3ZlKCk7XG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UucmVwb3NpdG9yaWVzKSB7XG4gICAgICAgICAgICBpZiAocXVldWVfa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZV9rZXkgPSB0b29sc2hlZF91dGlsLnF1ZXVlS2V5KHJlcG9zaXRvcnlfbWV0YWRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlcG9zaXRvcnlfcXVldWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5yZXBvc2l0b3JpZXMpO1xuICAgICAgICAgICAgaWYgKHJlcG9zaXRvcnlfcXVldWUuaGFzT3duUHJvcGVydHkocXVldWVfa2V5KSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXBvc2l0b3J5X3F1ZXVlW3F1ZXVlX2tleV07XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlcG9zaXRvcmllcyA9IEpTT04uc3RyaW5naWZ5KHJlcG9zaXRvcnlfcXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJC5wb3N0KHVybCwgcGFyYW1zLCBkYXRhID0+IHtcbiAgICAgICAgICAgIHZhciBpcmlfcGFyYW1zID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICAgIHZhciByZXBvc2l0b3JpZXMgPSBpcmlfcGFyYW1zLnJlcG9zaXRvcmllcztcbiAgICAgICAgICAgIHZhciBuZXdfcm91dGUgPSBgc3RhdHVzL3IvJHtyZXBvc2l0b3JpZXMuam9pbihcInxcIil9YDtcbiAgICAgICAgICAgICQucG9zdChgJHtHYWxheHkucm9vdH1hZG1pbl90b29sc2hlZC9pbnN0YWxsX3JlcG9zaXRvcmllc2AsIGlyaV9wYXJhbXMsIGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSW5pdGlhbGl6aW5nIHJlcG9zaXRvcnkgaW5zdGFsbGF0aW9uIHN1Y2NlZWRlZFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZShuZXdfcm91dGUsIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcGxhY2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgbG9hZEZyb21RdWV1ZTogZnVuY3Rpb24ocXVldWVfa2V5KSB7XG4gICAgICAgIHZhciByZXBvc2l0b3J5X3F1ZXVlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucmVwb3NpdG9yaWVzKTtcbiAgICAgICAgaWYgKHJlcG9zaXRvcnlfcXVldWUuaGFzT3duUHJvcGVydHkocXVldWVfa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcG9zaXRvcnlfcXVldWVbcXVldWVfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICByZURyYXc6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy4kZWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm1vZGVsLmZldGNoKCk7XG4gICAgICAgIHRoaXMucmVuZGVyKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZVJlcG9RdWV1ZTogXy50ZW1wbGF0ZShcbiAgICAgICAgW1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlclwiIGlkPVwicGFuZWxfaGVhZGVyXCIgdW5zZWxlY3RhYmxlPVwib25cIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlci1pbm5lclwiPjwlPSB0aXRsZSAlPjwvZGl2PicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVuaWZpZWQtcGFuZWwtaGVhZGVyLWlubmVyXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHJpZ2h0OiA1cHg7IHRvcDogMHB4O1wiPjxhIGhyZWY9XCIjL3F1ZXVlXCI+UmVwb3NpdG9yeSBRdWV1ZSAoPCU9IHF1ZXVlICU+KTwvYT48L2Rpdj4nLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGFiLXBhbmVcIiBpZD1cInBhbmVsX2hlYWRlclwiIGlkPVwicmVwb3NpdG9yeV9xdWV1ZVwiPicsXG4gICAgICAgICAgICAnPHRhYmxlIGlkPVwicXVldWVkX3JlcG9zaXRvcmllc1wiIGNsYXNzPVwiZ3JpZFwiIGJvcmRlcj1cIjBcIiBjZWxscGFkZGluZz1cIjJcIiBjZWxsc3BhY2luZz1cIjJcIiB3aWR0aD1cIjEwMCVcIj4nLFxuICAgICAgICAgICAgJzx0aGVhZCBpZD1cImdyaWQtdGFibGUtaGVhZGVyXCI+JyxcbiAgICAgICAgICAgIFwiPHRyPlwiLFxuICAgICAgICAgICAgJzx0aCBjbGFzcz1cImRhdGFzZXRSb3dcIj5OYW1lPC90aD4nLFxuICAgICAgICAgICAgJzx0aCBjbGFzcz1cImRhdGFzZXRSb3dcIj5Pd25lcjwvdGg+JyxcbiAgICAgICAgICAgICc8dGggY2xhc3M9XCJkYXRhc2V0Um93XCI+UmV2aXNpb248L3RoPicsXG4gICAgICAgICAgICAnPHRoIGNsYXNzPVwiZGF0YXNldFJvd1wiPlRvb2xTaGVkPC90aD4nLFxuICAgICAgICAgICAgJzx0aCBjbGFzcz1cImRhdGFzZXRSb3dcIj5JbnN0YWxsPC90aD4nLFxuICAgICAgICAgICAgJzx0aCBjbGFzcz1cImRhdGFzZXRSb3dcIj48aW5wdXQgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiB0eXBlPVwic3VibWl0XCIgaWQ9XCJjbGVhcl9xdWV1ZVwiIG5hbWU9XCJjbGVhcl9xdWV1ZVwiIHZhbHVlPVwiQ2xlYXIgcXVldWVcIiAvPjwvdGg+JyxcbiAgICAgICAgICAgIFwiPC90cj5cIixcbiAgICAgICAgICAgIFwiPC90aGVhZD5cIixcbiAgICAgICAgICAgIFwiPHRib2R5PlwiLFxuICAgICAgICAgICAgXCI8JSBfLmVhY2gocmVwb3NpdG9yaWVzLCBmdW5jdGlvbihyZXBvc2l0b3J5KSB7ICU+XCIsXG4gICAgICAgICAgICAnPHRyIGlkPVwicXVldWVkX3JlcG9zaXRvcnlfPCU9IHJlcG9zaXRvcnkuZ2V0KFwiaWRcIikgJT5cIj4nLFxuICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImRhdGFzZXRSb3dcIj48JT0gcmVwb3NpdG9yeS5nZXQoXCJyZXBvc2l0b3J5XCIpLm5hbWUgJT48L3RkPicsXG4gICAgICAgICAgICAnPHRkIGNsYXNzPVwiZGF0YXNldFJvd1wiPjwlPSByZXBvc2l0b3J5LmdldChcInJlcG9zaXRvcnlcIikub3duZXIgJT48L3RkPicsXG4gICAgICAgICAgICAnPHRkIGNsYXNzPVwiZGF0YXNldFJvd1wiPjwlPSByZXBvc2l0b3J5LmdldChcImNoYW5nZXNldF9yZXZpc2lvblwiKSAlPjwvdGQ+JyxcbiAgICAgICAgICAgICc8dGQgY2xhc3M9XCJkYXRhc2V0Um93XCI+PCU9IHJlcG9zaXRvcnkuZ2V0KFwidG9vbF9zaGVkX3VybFwiKSAlPjwvdGQ+JyxcbiAgICAgICAgICAgICc8dGQgY2xhc3M9XCJkYXRhc2V0Um93XCI+JyxcbiAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgaW5zdGFsbF9vbmVcIiBkYXRhLXJlcG9rZXk9XCI8JT0gcmVwb3NpdG9yeS5nZXQoXCJxdWV1ZV9rZXlcIikgJT5cIiB0eXBlPVwic3VibWl0XCIgaWQ9XCJpbnN0YWxsX3JlcG9zaXRvcnlfPCU9IHJlcG9zaXRvcnkuZ2V0KFwiaWRcIikgJT5cIiBuYW1lPVwiaW5zdGFsbF9yZXBvc2l0b3J5XCIgdmFsdWU9XCJJbnN0YWxsIG5vd1wiIC8+JyxcbiAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICc8dGQgY2xhc3M9XCJkYXRhc2V0Um93XCI+JyxcbiAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgcmVtb3ZlX29uZVwiIGRhdGEtcmVwb2tleT1cIjwlPSByZXBvc2l0b3J5LmdldChcInF1ZXVlX2tleVwiKSAlPlwiIHR5cGU9XCJzdWJtaXRcIiBpZD1cInVucXVldWVfcmVwb3NpdG9yeV88JT0gcmVwb3NpdG9yeS5nZXQoXCJpZFwiKSAlPlwiIG5hbWU9XCJ1bnF1ZXVlX3JlcG9zaXRvcnlcIiB2YWx1ZT1cIlJlbW92ZSBmcm9tIHF1ZXVlXCIgLz4nLFxuICAgICAgICAgICAgXCI8L3RkPlwiLFxuICAgICAgICAgICAgXCI8L3RyPlwiLFxuICAgICAgICAgICAgXCI8JSB9KTsgJT5cIixcbiAgICAgICAgICAgIFwiPC90Ym9keT5cIixcbiAgICAgICAgICAgIFwiPC90YWJsZT5cIixcbiAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgaWQ9XCJmcm9tX3dvcmtmbG93XCIgdmFsdWU9XCJBZGQgZnJvbSB3b3JrZmxvd1wiIC8+JyxcbiAgICAgICAgICAgIFwiPC9kaXY+XCJcbiAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgKVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBSZXBvUXVldWVWaWV3OiBWaWV3XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC9yZXBvc2l0b3J5LXF1ZXVlLXZpZXcuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBL0dBO0FBQ0E7QUF1SkE7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///311\n");

/***/ }),

/***/ 312:
/*!*********************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/repo-status-view.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _toolshedModel = __webpack_require__(/*! mvc/toolshed/toolshed-model */ 17);\n\nvar _toolshedModel2 = _interopRequireDefault(_toolshedModel);\n\nvar _util = __webpack_require__(/*! mvc/toolshed/util */ 18);\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ToolShedRepoStatusView = Backbone.View.extend({\n    el: \"#center\",\n\n    initialize: function initialize(options) {\n        var self = this;\n        this.options = _.defaults(this.options || [{}], options, this.defaults);\n        this.model = new _toolshedModel2.default.RepoStatus();\n        this.listenTo(this.model, \"sync\", this.render);\n        this.model.url += \"?repositories=\" + this.options.repositories.join(\"|\");\n        this.model.fetch();\n        this.timer = setInterval(function (self) {\n            var terminal_states = [\"installed\", \"error\"];\n            var all_done = true;\n            _.some(self.model.models, function (repository) {\n                repo_id = repository.get(\"id\");\n                var repo_status = repository.get(\"status\").toLowerCase();\n                if (terminal_states.indexOf(repo_status) === -1) {\n                    all_done = false;\n                    return true;\n                }\n            });\n            if (all_done) {\n                clearInterval(self.timer);\n            } else {\n                self.model.fetch();\n            }\n        }, 2000, this);\n    },\n\n    close: function close() {\n        clearInterval(this.timer);\n    },\n\n    render: function render(options) {\n        this.options = _.extend(this.options, options);\n        var repo_status_template = this.templateRepoStatus;\n        this.$el.html(repo_status_template({\n            title: (0, _localization2.default)(\"Repository Status\"),\n            repositories: this.model.models,\n            queue: _util2.default.queueLength()\n        }));\n        $(\"#center\").css(\"overflow\", \"auto\");\n        this.bindEvents();\n    },\n\n    bindEvents: function bindEvents() {\n        var that = this;\n    },\n\n    reDraw: function reDraw(options) {\n        this.$el.empty();\n        this.initialize(options);\n    },\n\n    templateRepoStatus: _.template(['<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">', '<div class=\"unified-panel-header-inner\"><%= title %></div>', '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>', \"</div>\", '<style type=\"text/css\">', \".state-color-new,\", \".state-color-deactivated,\", \".state-color-uninstalled { border-color:#bfbfbf; background:#eee }\", \".state-color-cloning,\", \".state-color-setting-tool-versions,\", \".state-color-installing-repository-dependencies,\", \".state-color-installing-tool-dependencies,\", \".state-color-loading-proprietary-datatypes { border-color:#AAAA66; background:#FFFFCC }\", \".state-color-installed { border-color:#20b520; background:#b0f1b0 }\", \".state-color-error { border-color:#dd1b15; background:#f9c7c5 }\", \"</style>\", '<table id=\"grid-table\" class=\"grid\">', '<thead id=\"grid-table-header\">', \"<tr>\", '<th id=\"null-header\">Name<span class=\"sort-arrow\"></span></th>', '<th id=\"null-header\">Description<span class=\"sort-arrow\"></span></th>', '<th id=\"null-header\">Owner<span class=\"sort-arrow\"></span></th>', '<th id=\"null-header\">Revision<span class=\"sort-arrow\"></span></th>', '<th id=\"null-header\">Installation Status<span class=\"sort-arrow\"></span></th>', \"</tr>\", \"</thead>\", '<tbody id=\"grid-table-body\">', \"<% _.each(repositories, function(repository) { %>\", \"<tr>\", \"<td>\", '<div id=\"\" class=\"\">', '<label id=\"repo-name-<%= repository.get(\"id\") %>\" for=\"<%= repository.get(\"id\") %>\">', '<%= repository.get(\"name\") %>', \"</label>\", \"</div>\", \"</td>\", \"<td>\", '<div id=\"\" class=\"\">', '<label id=\"repo-desc-<%= repository.get(\"id\") %>\" for=\"<%= repository.get(\"id\") %>\">', '<%= repository.get(\"description\") %>', \"</label>\", \"</div>\", \"</td>\", \"<td>\", '<div id=\"\" class=\"\">', '<label id=\"repo-user-<%= repository.get(\"id\") %>\" for=\"<%= repository.get(\"id\") %>\">', '<%= repository.get(\"owner\") %>', \"</label>\", \"</div>\", \"</td>\", \"<td>\", '<div id=\"\" class=\"\">', '<label id=\"repo-changeset-<%= repository.get(\"id\") %>\" for=\"<%= repository.get(\"id\") %>\">', '<%= repository.get(\"changeset_revision\") %>', \"</label>\", \"</div>\", \"</td>\", \"<td>\", '<div id=\"\" class=\"\">', '<label id=\"RepositoryStatus-<%= repository.get(\"id\") %>\" for=\"<%= repository.get(\"id\") %>\">', '<div class=\"repo-status count-box state-color-<%= repository.get(\"status\").toLowerCase().replace(/ /g, \"-\") %>\" id=\"RepositoryStatus-<%= repository.get(\"id\") %>\">', '<%= repository.get(\"status\") %>', \"</div>\", \"</label>\", \"</div>\", \"</td>\", \"</tr>\", \"<% }); %>\", \"</tbody>\", '<tfoot id=\"grid-table-footer\"></tfoot>', \"</table>\"].join(\"\"))\n});\n\nexports.default = {\n    RepoStatus: ToolShedRepoStatusView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///312\n");

/***/ }),

/***/ 313:
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/toolshed/workflows-view.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _toolshedModel = __webpack_require__(/*! mvc/toolshed/toolshed-model */ 17);\n\nvar _toolshedModel2 = _interopRequireDefault(_toolshedModel);\n\nvar _util = __webpack_require__(/*! mvc/toolshed/util */ 18);\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    el: \"#center\",\n\n    defaults: [{}],\n\n    initialize: function initialize(options) {\n        var that = this;\n        this.model = new _toolshedModel2.default.WorkflowTools();\n        this.listenTo(this.model, \"sync\", this.render);\n        this.model.fetch();\n        that.render();\n    },\n\n    render: function render(options) {\n        var that = this;\n        var workflows_missing_tools = that.templateWorkflows;\n        var workflows = that.model.models;\n        that.$el.html(workflows_missing_tools({\n            title: (0, _localization2.default)(\"Workflows Missing Tools\"),\n            workflows: workflows,\n            queue: _util2.default.queueLength()\n        }));\n        $(\"#center\").css(\"overflow\", \"auto\");\n        that.bindEvents();\n    },\n\n    bindEvents: function bindEvents() {\n        var that = this;\n        var repository_id;\n        $(\".show_wf_repo\").on(\"click\", function () {\n            var tool_ids = $(this).attr(\"data-toolids\");\n            var toolshed = $(this).attr(\"data-shed\");\n            var api_url = Galaxy.root + \"api/tool_shed/repository\";\n            var params = { tool_ids: tool_ids };\n            $.get(api_url, params, function (data) {\n                repository_id = data.repository.id;\n                var new_route = \"repository/s/\" + toolshed.replace(/:/g, \"%3a\").replace(/\\//g, \"%2f\") + \"/r/\" + data.repository.id;\n                Backbone.history.navigate(new_route, {\n                    trigger: true,\n                    replace: true\n                });\n            });\n        });\n        $(\".queue_wf_repo\").on(\"click\", function () {\n            var elem = $(this);\n            var tool_ids = elem.attr(\"data-toolids\");\n            var toolshed = elem.attr(\"data-shed\");\n            var api_url = Galaxy.root + \"api/tool_shed/repository\";\n            var params = { tool_ids: tool_ids };\n            $.get(api_url, params, function (data) {\n                repository_id = data.repository.id;\n                params = {\n                    tool_shed_url: toolshed,\n                    repository_id: repository_id\n                };\n                $.get(api_url, params, function (data) {\n                    var changesets = Object.keys(data.repository.metadata);\n                    var current_changeset = changesets[0];\n                    var current_metadata = data.repository.metadata[current_changeset];\n                    current_metadata.tool_shed_url = toolshed;\n                    _util2.default.addToQueue(current_metadata);\n                    elem.remove();\n                });\n            });\n        });\n        $(\"#from_workflow\").on(\"click\", that.loadWorkflows);\n    },\n\n    reDraw: function reDraw(options) {\n        this.$el.empty();\n        this.initialize(options);\n    },\n\n    templateWorkflows: _.template(['<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">', '<div class=\"unified-panel-header-inner\"><%= title %></div>', '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>', \"</div>\", '<style type=\"text/css\">', \".workflow_names, .workflow_tools { list-style-type: none; } ul.workflow_tools, ul.workflow_names {  padding-left: 0px; }\", \"</style>\", '<table id=\"workflows_missing_tools\" class=\"grid\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">', '<thead id=\"grid-table-header\">', \"<tr>\", '<th class=\"datasetRow\">Workflows</th>', '<th class=\"datasetRow\">Tool IDs</th>', '<th class=\"datasetRow\">Shed</th>', '<th class=\"datasetRow\">Name</th>', '<th class=\"datasetRow\">Owner</th>', '<th class=\"datasetRow\">Actions</th>', \"</tr>\", \"</thead>\", \"<tbody>\", \"<% _.each(workflows, function(workflow) { %>\", \"<tr>\", '<td class=\"datasetRow\">', '<ul class=\"workflow_names\">', '<% _.each(workflow.get(\"workflows\"), function(name) { %>', '<li class=\"workflow_names\"><%= name %></li>', \"<% }); %>\", \"</ul>\", \"</td>\", '<td class=\"datasetRow\">', '<ul class=\"workflow_tools\">', '<% _.each(workflow.get(\"tools\"), function(tool) { %>', '<li class=\"workflow_tools\"><%= tool %></li>', \"<% }); %>\", \"</ul>\", \"</td>\", '<td class=\"datasetRow\"><%= workflow.get(\"shed\") %></td>', '<td class=\"datasetRow\"><%= workflow.get(\"repository\") %></td>', '<td class=\"datasetRow\"><%= workflow.get(\"owner\") %></td>', '<td class=\"datasetRow\">', '<ul class=\"workflow_tools\">', '<li class=\"workflow_tools\">', '<input type=\"button\" class=\"show_wf_repo btn btn-primary\" data-shed=\"<%= workflow.get(\"shed\") %>\" data-owner=\"<%= workflow.get(\"owner\") %>\" data-repo=\"<%= workflow.get(\"repository\") %>\" data-toolids=\"<%= workflow.get(\"tools\").join(\",\") %>\" value=\"Show Repository\" /></li>', \"</ul>\", \"</td>\", \"</tr>\", \"<% }); %>\", \"</ul>\", \"</div>\"].join(\"\"))\n});\n\nexports.default = {\n    Workflows: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC93b3JrZmxvd3Mtdmlldy5qcz9mNGI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG5pbXBvcnQgdG9vbHNoZWRfbW9kZWwgZnJvbSBcIm12Yy90b29sc2hlZC90b29sc2hlZC1tb2RlbFwiO1xuaW1wb3J0IHRvb2xzaGVkX3V0aWwgZnJvbSBcIm12Yy90b29sc2hlZC91dGlsXCI7XG52YXIgVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBlbDogXCIjY2VudGVyXCIsXG5cbiAgICBkZWZhdWx0czogW3t9XSxcblxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB0aGlzLm1vZGVsID0gbmV3IHRvb2xzaGVkX21vZGVsLldvcmtmbG93VG9vbHMoKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcInN5bmNcIiwgdGhpcy5yZW5kZXIpO1xuICAgICAgICB0aGlzLm1vZGVsLmZldGNoKCk7XG4gICAgICAgIHRoYXQucmVuZGVyKCk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciB3b3JrZmxvd3NfbWlzc2luZ190b29scyA9IHRoYXQudGVtcGxhdGVXb3JrZmxvd3M7XG4gICAgICAgIHZhciB3b3JrZmxvd3MgPSB0aGF0Lm1vZGVsLm1vZGVscztcbiAgICAgICAgdGhhdC4kZWwuaHRtbChcbiAgICAgICAgICAgIHdvcmtmbG93c19taXNzaW5nX3Rvb2xzKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogX2woXCJXb3JrZmxvd3MgTWlzc2luZyBUb29sc1wiKSxcbiAgICAgICAgICAgICAgICB3b3JrZmxvd3M6IHdvcmtmbG93cyxcbiAgICAgICAgICAgICAgICBxdWV1ZTogdG9vbHNoZWRfdXRpbC5xdWV1ZUxlbmd0aCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICAkKFwiI2NlbnRlclwiKS5jc3MoXCJvdmVyZmxvd1wiLCBcImF1dG9cIik7XG4gICAgICAgIHRoYXQuYmluZEV2ZW50cygpO1xuICAgIH0sXG5cbiAgICBiaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgcmVwb3NpdG9yeV9pZDtcbiAgICAgICAgJChcIi5zaG93X3dmX3JlcG9cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0b29sX2lkcyA9ICQodGhpcykuYXR0cihcImRhdGEtdG9vbGlkc1wiKTtcbiAgICAgICAgICAgIHZhciB0b29sc2hlZCA9ICQodGhpcykuYXR0cihcImRhdGEtc2hlZFwiKTtcbiAgICAgICAgICAgIHZhciBhcGlfdXJsID0gYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9yZXBvc2l0b3J5YDtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7IHRvb2xfaWRzOiB0b29sX2lkcyB9O1xuICAgICAgICAgICAgJC5nZXQoYXBpX3VybCwgcGFyYW1zLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICByZXBvc2l0b3J5X2lkID0gZGF0YS5yZXBvc2l0b3J5LmlkO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfcm91dGUgPSBgcmVwb3NpdG9yeS9zLyR7dG9vbHNoZWQucmVwbGFjZSgvOi9nLCBcIiUzYVwiKS5yZXBsYWNlKC9cXC8vZywgXCIlMmZcIil9L3IvJHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5yZXBvc2l0b3J5LmlkXG4gICAgICAgICAgICAgICAgfWA7XG4gICAgICAgICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZShuZXdfcm91dGUsIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKFwiLnF1ZXVlX3dmX3JlcG9cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlbGVtID0gJCh0aGlzKTtcbiAgICAgICAgICAgIHZhciB0b29sX2lkcyA9IGVsZW0uYXR0cihcImRhdGEtdG9vbGlkc1wiKTtcbiAgICAgICAgICAgIHZhciB0b29sc2hlZCA9IGVsZW0uYXR0cihcImRhdGEtc2hlZFwiKTtcbiAgICAgICAgICAgIHZhciBhcGlfdXJsID0gYCR7R2FsYXh5LnJvb3R9YXBpL3Rvb2xfc2hlZC9yZXBvc2l0b3J5YDtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7IHRvb2xfaWRzOiB0b29sX2lkcyB9O1xuICAgICAgICAgICAgJC5nZXQoYXBpX3VybCwgcGFyYW1zLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICByZXBvc2l0b3J5X2lkID0gZGF0YS5yZXBvc2l0b3J5LmlkO1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbF9zaGVkX3VybDogdG9vbHNoZWQsXG4gICAgICAgICAgICAgICAgICAgIHJlcG9zaXRvcnlfaWQ6IHJlcG9zaXRvcnlfaWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICQuZ2V0KGFwaV91cmwsIHBhcmFtcywgZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VzZXRzID0gT2JqZWN0LmtleXMoZGF0YS5yZXBvc2l0b3J5Lm1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRfY2hhbmdlc2V0ID0gY2hhbmdlc2V0c1swXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRfbWV0YWRhdGEgPSBkYXRhLnJlcG9zaXRvcnkubWV0YWRhdGFbY3VycmVudF9jaGFuZ2VzZXRdO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50X21ldGFkYXRhLnRvb2xfc2hlZF91cmwgPSB0b29sc2hlZDtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHNoZWRfdXRpbC5hZGRUb1F1ZXVlKGN1cnJlbnRfbWV0YWRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKFwiI2Zyb21fd29ya2Zsb3dcIikub24oXCJjbGlja1wiLCB0aGF0LmxvYWRXb3JrZmxvd3MpO1xuICAgIH0sXG5cbiAgICByZURyYXc6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy4kZWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZVdvcmtmbG93czogXy50ZW1wbGF0ZShcbiAgICAgICAgW1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlclwiIGlkPVwicGFuZWxfaGVhZGVyXCIgdW5zZWxlY3RhYmxlPVwib25cIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1bmlmaWVkLXBhbmVsLWhlYWRlci1pbm5lclwiPjwlPSB0aXRsZSAlPjwvZGl2PicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVuaWZpZWQtcGFuZWwtaGVhZGVyLWlubmVyXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHJpZ2h0OiA1cHg7IHRvcDogMHB4O1wiPjxhIGhyZWY9XCIjL3F1ZXVlXCI+UmVwb3NpdG9yeSBRdWV1ZSAoPCU9IHF1ZXVlICU+KTwvYT48L2Rpdj4nLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+JyxcbiAgICAgICAgICAgIFwiLndvcmtmbG93X25hbWVzLCAud29ya2Zsb3dfdG9vbHMgeyBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7IH0gdWwud29ya2Zsb3dfdG9vbHMsIHVsLndvcmtmbG93X25hbWVzIHsgIHBhZGRpbmctbGVmdDogMHB4OyB9XCIsXG4gICAgICAgICAgICBcIjwvc3R5bGU+XCIsXG4gICAgICAgICAgICAnPHRhYmxlIGlkPVwid29ya2Zsb3dzX21pc3NpbmdfdG9vbHNcIiBjbGFzcz1cImdyaWRcIiBib3JkZXI9XCIwXCIgY2VsbHBhZGRpbmc9XCIyXCIgY2VsbHNwYWNpbmc9XCIyXCIgd2lkdGg9XCIxMDAlXCI+JyxcbiAgICAgICAgICAgICc8dGhlYWQgaWQ9XCJncmlkLXRhYmxlLWhlYWRlclwiPicsXG4gICAgICAgICAgICBcIjx0cj5cIixcbiAgICAgICAgICAgICc8dGggY2xhc3M9XCJkYXRhc2V0Um93XCI+V29ya2Zsb3dzPC90aD4nLFxuICAgICAgICAgICAgJzx0aCBjbGFzcz1cImRhdGFzZXRSb3dcIj5Ub29sIElEczwvdGg+JyxcbiAgICAgICAgICAgICc8dGggY2xhc3M9XCJkYXRhc2V0Um93XCI+U2hlZDwvdGg+JyxcbiAgICAgICAgICAgICc8dGggY2xhc3M9XCJkYXRhc2V0Um93XCI+TmFtZTwvdGg+JyxcbiAgICAgICAgICAgICc8dGggY2xhc3M9XCJkYXRhc2V0Um93XCI+T3duZXI8L3RoPicsXG4gICAgICAgICAgICAnPHRoIGNsYXNzPVwiZGF0YXNldFJvd1wiPkFjdGlvbnM8L3RoPicsXG4gICAgICAgICAgICBcIjwvdHI+XCIsXG4gICAgICAgICAgICBcIjwvdGhlYWQ+XCIsXG4gICAgICAgICAgICBcIjx0Ym9keT5cIixcbiAgICAgICAgICAgIFwiPCUgXy5lYWNoKHdvcmtmbG93cywgZnVuY3Rpb24od29ya2Zsb3cpIHsgJT5cIixcbiAgICAgICAgICAgIFwiPHRyPlwiLFxuICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImRhdGFzZXRSb3dcIj4nLFxuICAgICAgICAgICAgJzx1bCBjbGFzcz1cIndvcmtmbG93X25hbWVzXCI+JyxcbiAgICAgICAgICAgICc8JSBfLmVhY2god29ya2Zsb3cuZ2V0KFwid29ya2Zsb3dzXCIpLCBmdW5jdGlvbihuYW1lKSB7ICU+JyxcbiAgICAgICAgICAgICc8bGkgY2xhc3M9XCJ3b3JrZmxvd19uYW1lc1wiPjwlPSBuYW1lICU+PC9saT4nLFxuICAgICAgICAgICAgXCI8JSB9KTsgJT5cIixcbiAgICAgICAgICAgIFwiPC91bD5cIixcbiAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICc8dGQgY2xhc3M9XCJkYXRhc2V0Um93XCI+JyxcbiAgICAgICAgICAgICc8dWwgY2xhc3M9XCJ3b3JrZmxvd190b29sc1wiPicsXG4gICAgICAgICAgICAnPCUgXy5lYWNoKHdvcmtmbG93LmdldChcInRvb2xzXCIpLCBmdW5jdGlvbih0b29sKSB7ICU+JyxcbiAgICAgICAgICAgICc8bGkgY2xhc3M9XCJ3b3JrZmxvd190b29sc1wiPjwlPSB0b29sICU+PC9saT4nLFxuICAgICAgICAgICAgXCI8JSB9KTsgJT5cIixcbiAgICAgICAgICAgIFwiPC91bD5cIixcbiAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgICc8dGQgY2xhc3M9XCJkYXRhc2V0Um93XCI+PCU9IHdvcmtmbG93LmdldChcInNoZWRcIikgJT48L3RkPicsXG4gICAgICAgICAgICAnPHRkIGNsYXNzPVwiZGF0YXNldFJvd1wiPjwlPSB3b3JrZmxvdy5nZXQoXCJyZXBvc2l0b3J5XCIpICU+PC90ZD4nLFxuICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImRhdGFzZXRSb3dcIj48JT0gd29ya2Zsb3cuZ2V0KFwib3duZXJcIikgJT48L3RkPicsXG4gICAgICAgICAgICAnPHRkIGNsYXNzPVwiZGF0YXNldFJvd1wiPicsXG4gICAgICAgICAgICAnPHVsIGNsYXNzPVwid29ya2Zsb3dfdG9vbHNcIj4nLFxuICAgICAgICAgICAgJzxsaSBjbGFzcz1cIndvcmtmbG93X3Rvb2xzXCI+JyxcbiAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2hvd193Zl9yZXBvIGJ0biBidG4tcHJpbWFyeVwiIGRhdGEtc2hlZD1cIjwlPSB3b3JrZmxvdy5nZXQoXCJzaGVkXCIpICU+XCIgZGF0YS1vd25lcj1cIjwlPSB3b3JrZmxvdy5nZXQoXCJvd25lclwiKSAlPlwiIGRhdGEtcmVwbz1cIjwlPSB3b3JrZmxvdy5nZXQoXCJyZXBvc2l0b3J5XCIpICU+XCIgZGF0YS10b29saWRzPVwiPCU9IHdvcmtmbG93LmdldChcInRvb2xzXCIpLmpvaW4oXCIsXCIpICU+XCIgdmFsdWU9XCJTaG93IFJlcG9zaXRvcnlcIiAvPjwvbGk+JyxcbiAgICAgICAgICAgIFwiPC91bD5cIixcbiAgICAgICAgICAgIFwiPC90ZD5cIixcbiAgICAgICAgICAgIFwiPC90cj5cIixcbiAgICAgICAgICAgIFwiPCUgfSk7ICU+XCIsXG4gICAgICAgICAgICBcIjwvdWw+XCIsXG4gICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgIF0uam9pbihcIlwiKVxuICAgIClcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgV29ya2Zsb3dzOiBWaWV3XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy90b29sc2hlZC93b3JrZmxvd3Mtdmlldy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBN0VBO0FBQ0E7QUFrSUE7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///313\n");

/***/ }),

/***/ 61:
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-icons.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    tool: \"fa-wrench\",\n    data_input: \"fa-file-o\",\n    data_collection_input: \"fa-folder-o\",\n    subworkflow: \"fa-sitemap fa-rotate-270\",\n    pause: \"fa-pause\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL3dvcmtmbG93L3dvcmtmbG93LWljb25zLmpzPzVlZGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRvb2w6IFwiZmEtd3JlbmNoXCIsXG4gICAgZGF0YV9pbnB1dDogXCJmYS1maWxlLW9cIixcbiAgICBkYXRhX2NvbGxlY3Rpb25faW5wdXQ6IFwiZmEtZm9sZGVyLW9cIixcbiAgICBzdWJ3b3JrZmxvdzogXCJmYS1zaXRlbWFwIGZhLXJvdGF0ZS0yNzBcIixcbiAgICBwYXVzZTogXCJmYS1wYXVzZVwiXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy93b3JrZmxvdy93b3JrZmxvdy1pY29ucy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n");

/***/ })

},[284]);
//# sourceMappingURL=extended.js.map