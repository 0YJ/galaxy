{"version":3,"sources":["webpack:///login.bundled.js","webpack:///./galaxy/scripts/viz/trackster/util.js","webpack:///./galaxy/scripts/utils/config.js","webpack:///./galaxy/scripts/mvc/grid/grid-view.js","webpack:///./galaxy/scripts/mvc/webhooks.js","webpack:///./galaxy/scripts/apps/login.js","webpack:///./galaxy/scripts/mvc/ui/ui-frames.js","webpack:///./galaxy/scripts/mvc/ui/icon-button.js","webpack:///./galaxy/scripts/utils/add-logging.js","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js","webpack:///./galaxy/scripts/mvc/ui/ui-tabs.js","webpack:///./galaxy/scripts/mvc/user/user-model.js","webpack:///./galaxy/scripts/mvc/tool/tools.js","webpack:///./galaxy/scripts/mvc/tool/tool-form.js","webpack:///./galaxy/scripts/layout/masthead.js","webpack:///./galaxy/scripts/layout/menu.js","webpack:///./galaxy/scripts/layout/generic-nav-view.js","webpack:///./galaxy/scripts/layout/scratchbook.js","webpack:///./galaxy/scripts/mvc/grid/grid-model.js","webpack:///./galaxy/scripts/mvc/grid/grid-template.js","webpack:///./galaxy/scripts/viz/trackster.js","webpack:///./galaxy/scripts/viz/trackster/tracks.js","webpack:///./galaxy/scripts/viz/viz_views.js","webpack:///./galaxy/scripts/viz/trackster/slotting.js","webpack:///./galaxy/scripts/viz/trackster/painters.js","webpack:///./galaxy/scripts/viz/trackster/filters.js","webpack:///./galaxy/scripts/viz/bbi-data-manager.js","webpack:///./galaxy/scripts/libs/bbi/bigwig.js","webpack:///./galaxy/scripts/libs/bbi/spans.js","webpack:///./galaxy/scripts/libs/bbi/jszlib.js","webpack:///./galaxy/scripts/libs/bbi/jquery-ajax-native.js","webpack:///./galaxy/scripts/mvc/user/user-quotameter.js","webpack:///./galaxy/scripts/mvc/base-mvc.js","webpack:///./galaxy/scripts/galaxy.js","webpack:///./galaxy/scripts/utils/metrics-logger.js","webpack:///./galaxy/scripts/layout/page.js","webpack:///./galaxy/scripts/mvc/dataset/data.js","webpack:///./galaxy/scripts/viz/visualization.js"],"names":["webpackJsonp","10","module","exports","__webpack_require__","Backbone","$","commatize","number","rgx","test","replace","Object","defineProperty","value","is_deferred","d","ServerStateDeferred","Model","extend","defaults","ajax_settings","interval","success_fn","result","go","deferred","Deferred","self","this","get","_go","ajax","success","resolve","setTimeout","get_random_color","colors","i","length","parseInt","slice","new_color","nr","ng","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","brightness","r","g","b","ok","num_tries","Math","round","random","r1","g1","b1","r2","g2","b2","max","min","abs","toString","substr","default","call","11","_interopRequireDefault","obj","__esModule","_underscore","_","newObj","key","prototype","hasOwnProperty","_util","_util2","_config","ConfigSetting","initialize","options","set","find","label","type","default_value","mode","hidden","s","undefined","set_value","parseFloat","ConfigSettingCollection","Collection","model","to_key_value_dict","rval","each","setting","get_value","set_default_value","from_models_and_saved_values","models","saved_values","map","m","ConfigSettingCollectionView","View","className","render","container","$el","collection","param","index","id","row","appendTo","append","attr","text","val","click","select","option","container_div","input","css","e","removeClass","tip","siblings","addClass","left","position","width","top","height","show","stopPropagation","document","bind","hide","unbind","new_color_icon","tooltip","tip_inner","farb_obj","farbtastic","callback","color","fixed_farb_obj","setColor","help","render_in_modal","title","cancel_fn","Galaxy","modal","window","ok_fn","update_from_form","check_enter_esc","keyCode","which","children","body","buttons","Cancel","OK","is","12","jQuery","_utils","_utils2","_gridModel","_gridModel2","_gridTemplate","_gridTemplate2","_popupMenu","_popupMenu2","ajaxSettings","traditional","grid","grid_config","dict_format","add_tag_to_grid_filter","tag_name","tag_value","tag","slideToggle","add_filter_condition","setElement","url_base","items","url_data","filters","v","k","url","response","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","currHistoryPanel","loadCurrentHistory","attributes","allow_title_display","setWindowTitle","html","header","footer","message","use_hide_message","init_grid_elements","init_grid_controls","init_refresh_on_change","off","submit_operation","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","parent","remove","remove_filter_condition","set_categorical_filter","on","check_all_items","checkboxes","check_count","update_checked","filter","change","rating","set_page","execute","href","target","item","button","popup","operation","_add_operation","settings","operation_config","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","preventDefault","onclick","encode_id","findItemByHtml","name","add_filter","t","filter_element","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","empty","new_page","page_num","split","cur_page","operation_button","operation_name","findWhere","operations","item_ids","push","check","state","prop","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","advanced_search","method","data","error","alert","response_text","insert","json","parseJSON","complete","13","WebhookModel","activate","Webhooks","WebhookView","el","me","toolId","toolVersion","urlRoot","fetch","webhook","toJSON","styles","script","add","webhooks","root","148","_jquery","_jquery2","_galaxy","_galaxy2","_localization","_localization2","_page","_page2","app","bootstrapped","GalaxyApp","debug","redirect","encodeURI","show_welcome_with_login","params","LoginPage","page","_template","welcome_url","Right","17","FrameView","placement","$header","$title","$content","listenTo","menu","$option","icon","isFunction","disabled","content","defaultOptions","frame","cols","rows","cell","margin","scroll","top_min","frame_max","visible","top_max","frame_z","frame_counter","frame_uid","frame_list","frame_shadow","event","_frameInit","_frameResize","_panelRefresh","resize","Close","frame_id","_toPixelCoord","_frameInsert","trigger","del","$frame","fadeOut","_panelAnimationComplete","fadeIn","events","mousemove","mouseup","mouseleave","mousewheel","DOMMouseScroll","mousedown .frame","mousedown .frame-background","mousedown .frame-scroll-up","mousedown .frame-scroll-down","mousedown .f-close","_eventFrameMouseDown","hasClass","_frameIdentify","xy","x","originalEvent","pageX","y","pageY","_frameDragStart","_eventFrameMouseMove","event_xy_new","event_xy_delta","p","_frameScreen","min_dim","_toGridCoord","_frameOffset","l","_eventFrameMouseUp","_frameDragStop","_eventFrameClose","_eventHide","_eventPanelScroll","srcElement","parents","_panelScroll","detail","wheelDelta","_eventPanelScroll_up","_eventPanelScroll_down","closest","_frameFocus","_frameGrid","grid_location","px","sign","_toGrid","_toPixel","_isCollision","a","_locationRank","loc","animate","promise","done","delta","top_new","screen_location","grid_rank","new_loc","place_list","f","sort","place","_framePlace","j","console","log","has_focus","18","IconButton","icon_class","on_click","menu_options","is_menu_button","enabled","tooltip_config","IconButtonView","new_elem","template","replaceWith","buffer","IconButtonCollection","IconButtonMenuView","tagName","elt","make_popupmenu","create_icon_buttons_menu","config","global_config","button_config","19","addLogging","namespace","addTo","_logNamespace","LOGGING_FNS","forEach","logFn","logger","emit","arguments","apply","20","PopupMenu","$button","_renderAndShow","clickEvent","_getShownPosition","_setUpCloseBehavior","li","_templateOptions","join","divider","checked","menuWidth","scrollLeft","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","create","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","$link","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","21","onchange","$nav","_add","_remove","_change","_reset","first","size","current","delAll","reset","showTab","hideTab","tab_model","_template_tab","$tmpl","$href","24","_interopRequireWildcard","_backbone","_baseMvc","_baseMvc2","User","LoggableMixin","username","email","total_disk_usage","nice_total_disk_usage","quota_percent","is_admin","resp","changes","isAnonymous","isAdmin","loadFromApi","idOrCurrent","CURRENT_ID_STR","userFn","newModel","clearSessionStorage","sessionStorage","userInfo","unshift","getCurrentUserFromApi","currentUser","25","_data","_data2","_toolForm","VisibilityMixin","toggle","is_visible","ToolParameter","num_samples","unescape","copy","ToolParameterCollection","DataToolParameter","IntegerToolParameter","get_samples","d3","scale","linear","domain","ticks","FloatToolParameter","SelectToolParameter","subModelTypes","integer","float","Tool","description","inputs","outputs","remove_inputs","types","tool","incompatible_inputs","only_samplable_inputs","valid_inputs","apply_search_results","results","set_input_value","set_input_values","inputs_dict","keys","input_name","run","_run","rerun","target_dataset","regions","action","target_dataset_id","get_inputs_dict","input_dict","additional_params","payload","tool_id","run_deferred","ss_deferred","JSON","stringify","dataType","contentType","when","then","DatasetCollection","ToolCollection","ToolSectionLabel","ToolSection","elems","open","clear_search_results","cur_label","all_hidden","ToolSearch","search_hint_string","min_chars_for_search","clear_btn_url","query","clear_key","do_search","q","timer","clearTimeout","ga","clear_search","ToolPanel","tool_search","tools","layout","parse","parse_elt","elt_dict","model_class","panel_elt","BaseView","update_visible","ToolLinkView","templates","tool_link","formStyle","upload","router","version","ToolSectionLabelView","ToolSectionView","update_open","panel_section","section_body","tool_view","label_view","click .toolSectionTitle > a","slideDown","slideUp","ToolSearchView","keyup :input","change :input","click #search-clear-btn","focus_and_select","focus","clear","query_changed","evData","ToolPanelView","handle_search_results","search_view","section_title_view","ToolFormView","tool_form","tool_panel_view","tool_form_view","show_tool","variable","26","_uiMisc","_uiMisc2","_uiModal","_uiModal2","_toolFormBase","_toolFormBase2","_webhooks","_webhooks2","form","merge","listen_to_history","always_refresh","buildmodel","process","build_url","build_data","job_id","display","_customize","status","error_message","err_msg","prepend","Message","persistent","large","reject","postchange","current_state","tool_version","wait","request","update","execute_button","Button","cls","wait_cls","portlet","disable","unwait","enable","job_remap","ignore","job_def","validate","$f","enctype","_templateSuccess","jobs","refreshContents","input_found","err_data","error_messages","matchResponse","input_id","highlight","_templateError","job_inputs","batch_n","batch_src","job_input_id","input_value","match","input_field","field_list","input_def","input_list","optional","batch","n","values","src","njobs","njobs_text","$message","output","hid","27","_menu","_menu2","_scratchbook","_scratchbook2","_userQuotameter","_userQuotameter2","$navbarBrandLink","$navbarBrandImage","$navbarBrandTitle","$navbarTabs","$quoteMeter","Tab","quotaMeter","UserQuotaMeter","user","$download_link","brand","logo_url","logo_src","28","_genericNavView","_genericNavView2","extendedNavItem","GenericNavView","ready","function","Function","masthead","appendScriptStyle","helpTab","support_url","search_url","mailing_lists","screencasts_url","wiki_url","citation_url","terms_url","biostar_url","biostar_url_redirect","userTab","session_csrf_token","allow_user_creation","noscratchbook","activeView","active_view","$dropdown","$toggle","$menu","$note","click .dropdown-toggle","visibility","_formatUrl","menuItem","_buildMenuItem","_toggleClick","buildLink","popover","charAt","29","makeModalIframe","host","communication_server_host","port","communication_server_port","escape","persistent_communication_rooms","query_string","$el_chat_modal_header","$el_chat_modal_body","iframe_template","closing_events","title_separator","removeAttr","frame_width","frame_height","30","_uiFrames","_uiFrames2","_visualization","_visualization2","_trackster","_trackster2","frames","buttonActive","active","show_note","note_cls","onbeforeunload","buttonLoad","note","history_cache","addDataset","dataset_id","current_dataset","history_id","historyId","dataset_ids","_findDataset","dataset","offset","history_details","dataset_list","pos","_loadDatasetOffset","new_dataset_id","_loadDataset","new_dataset","Dataset","is_tabular","data_type","createTabularDatasetChunkedView","TabularDataset","addTrackster","viz_id","viz","Visualization","ui","TracksterUI","frame_config","parent_elt","view_config","dbkey","stand_alone","latest_revision","drawables","view","hda_ldda","create_visualization","viewport","bookmarks","$galaxy_main","31","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","new_val","cur_val","condition","condition_index","pairs","get_url","args","32","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_offset","max_range","max_page","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","33","_tracks","_tracks2","_iconButton","_iconButton2","_queryStringParsing","_queryStringParsing2","_gridView","_gridView2","Base","baseURL","cssLoadFile","save_viz","annotation","overview_track_name","overview_drawable","viz_config","to_dict","chrom","start","low","end","high","overview","vis_id","vis_json","vis_info","has_changes","history","pushState","hash","createButtonMenu","select_datasets","new_tracks","track","add_drawable","object_from_template","DrawableGroup","force_right_panel","handle_unsaved_changes","buttonMenu","add_bookmark","editable","bookmarks_container","new_bookmark","position_div","annotation_div","delete_icon_container","prependTo","make_text_editable","num_rows","use_textarea","help_text","viewport_config","drawables_config","bookmarks_config","TracksterView","editor","load_chroms_deferred","chrom_info","overview_drawable_name","change_chrom","set_overview","bookmark","set_up_router","TrackBrowserRouter","init_keyboard_nav","move_fraction","viewport_container","scrollTop","Leave without Saving","Save","resize_window","galaxy_config","view_existing","choose_existing_or_new","view_new","listTracksParams","dataset_params","gene_region","View in saved visualization","view_in_saved","View in new visualization","tracks_grid","Add to visualization","tracks","init_editor","template_view_new","Create","create_browser","dbkeys_in_genomes","default_dbkey","contains","select2","add_dataset","track_data","34","num","places","pow","supportsByteRanges","beforeSend","xhr","setRequestHeader","_viz_views","_viz_views2","_slotting","_slotting2","_painters","_painters2","_filters","_filters2","_tools","_tools2","_config2","_bbiDataManager","_bbiDataManager2","html_elt_js_obj_dict","is_container","element","moveable","handle_class","container_selector","element_js_obj","handle","relative","child","bottom","this_obj","outerHeight","cur_container","offsetY","insertBefore","remove_drawable","add_drawable_before","insertAfter","move_drawable","deltaY","DATA_NOCONVERTER","CONTINUOUS_DATA_MODES","Drawable","obj_dict","id_counter","drag_handle_class","is_overview","action_icons","config_params","prefs","config_onchange","build_container_div","header_div","header_view","TrackHeaderView","icons_div","hover","action_icons_def","css_class","on_click_fn","drawable","toggle_icon","hide_contents","show_contents","init","changed","can_draw","request_draw","_draw","set_name","new_name","old_name","revert_name","update_intro_div","update_icons","get_drawables","DrawableCollection","obj_type","unpack_drawables","drawables_array","dictified_drawables","other","replace_drawable","old_drawable","new_drawable","update_html","new_position","get_tracks","track_type","queue","shift","concat","content_div","filters_manager","FiltersManager","after","parent_div","saved_filters_managers","old_manager","setup_multitrack_filtering","group","show_composite_track","clear_filters","_restore_filter_managers","clear_tile_cache","tiles_div","num_drawables","composite_icon","filters_icon","CompositeTrack","a_type","get_type","num_feature_tracks","can_composite","FeatureTrack","LineTrack","shared_filters","remove_all","new_filter","filter_name","NumberFilter","init_filters","composite_track","label_tracks","tracks_to_be_redrawn","max_low","max_high","zoom_factor","min_separation","canvas_manager","CanvasManager","ownerDocument","requested_redraw","parent_element","top_container","browser_content_div","bottom_container","top_labeltrack","intro_div","nav_container","nav","overview_viewport","overview_close","overview_highlight","overview_box_background","overview_box","default_overview_height","nav_controls","chrom_select","submit_nav","location_span","nav_input","autocomplete","source","all_features","feature_search_deferreds","data_manager","search_features","term","dataset_features","feature","minLength","hidden_input","zo_link","zoom_out","zi_link","zoom_in","load_chroms","current_x","offsetX","delta_chrom","move_delta","reset_overview","clientX","original_low","current_height","clientY","new_scroll","proxy","startX","span","update_location","old_low","request_redraw","add_label_track","LabelTrack","resize_timer","redraw","get_base_color","base","trigger_navigate","new_chrom","new_low","new_high","delay","url_parms","chrom_data","reference","ref_track","ReferenceTrack","reference_track","len","chrom_option","prev_chroms","next_chroms","chrom_start_index","start_index","found","grep","str","chrom_pos","fraction","current_chrom_span","data_fetch","redraw_on_move_fn","label_track","track_list","track_options","to","requestAnimationFrame","_redraw","floor","ceil","resolution_px_b","left_px","width_px","point","cur_center","new_half","resize_viewport","postdraw_actions","TracksterTool","tool_state","state_dict","ToolParameterView","param_div","update_value","update_event","TracksterToolView","set_visible","keydown","param_view","run_tool_row","run_on_dataset_button","run_on_region","run_on_dataset","update_params","region","GenomeRegion","url_params","current_track","track_name","tool_region_and_parameters_str","new_track","constructor","init_for_tool_data","change_mode","set_filters_manager","set_dataset","success_callback","FilterScaler","default_val","Scaler","gen_val","feature_data","Number","MAX_VALUE","Tile","w_scale","canvas","html_elt","stale","predisplay_actions","LineTrackTile","FeatureTrackTile","all_slotted","feature_mapper","incomplete_features","seq_data","has_icons","other_tiles_features_drawn","Track","dataset_check_type","data_url_extra_params","data_query_wait","GenomeDataManager","genome","Genome","chroms_info","data_mode_compatible","data_and_mode_compatible","can_subset","min_height_px","max_height_px","visible_height_px","add_resize_handle","regions_to_use","view_region","bookmarked_regions","from_str","No","Yes","on_resize","in_handle","in_drag","drag_control","original_height","new_height","tile_cache","ReadTrack","VariantTrack","show_message","msg_html","retry","init_deferred","getJSON","kind","valid_chroms","predraw_init","msg_elt","stats","min_value","max_value","mean","sd","TiledTrack","filters_available","Cache","left_offset","dynamic_tool_div","overlay_div","slotters","max_rows","set_min_max","isNaN","new_mode","mode_icon","tools_icon","param_space_viz_icon","_gen_tile_cache_key","tile_region","before_draw","clear_after","resolution","tile_promise","tile_width","tile_index","tile_promises","tiles","draw_helper","tile","_add_yaxis_label","on_change","pref_name","num_cols","on_finish","force","get_mode","update_auto_mode","display_mode","_get_drawables","get_elt","o","show_tile","get_tile_data","data_mode","tile_data","get_data","tile_drawn","set_elt","tracks_data","subset_entry","pop","drawing_modes","drawing_heights","get_canvas_height","new_canvas","tile_low","tile_high","ctx","getContext","translate","globalAlpha","globalCompositeOperation","draw_tile","canvas_width","_draw_line_track_tile","LinePainter","draw","ref_seq","tile_element","track_height","dataset_type","extra_info","entry","range","tickDistance","new_div","screenPosition","display_modes","build_config_params","union","show_group","visible_height","init_deferreds","update_all_min_max","max_height","char_width_px","data_url","GenomeReferenceDataManager","new_visible","cur_visible","subset","font","manager","default_font","textAlign","str_len","fillStyle","fillText","BBIDataManager","DiagonalHeatmapTrack","DiagonalHeatmapPainter","summary_draw_height","start_end_dct","set_painter_from_config","painter","ArcLinkedFeaturePainter","LinkedFeaturePainter","all_incomplete_features","pluck","inc_features","tile_incomplete_features","omit","features","new_canvas_ctx","drawImage","new_tile","update_ui_elt","example_feature","applies_to","show_more_rows_icon","incremental_slots","level","dummy_context","slotter","FeatureSlotter","measureText","slot_features","rows_required","dummy_painter","get_required_height","cur_tile","filtered","slots","hide_feature","flen","update_attrs","keep","filter_alpha_scaler","alpha_filter","filter_height_scaler","height_filter","draw_results","translation","VariantPainter","get_metadata","deferreds","line_track_tiles","sample_names","font_size","font-size","samples_div_html","line-height","ReadPainter","addable_objects","VcfTrack","drawable_type","35","update_name","render_action_icons","dblclick","icon_dict","add_action_icon","set_display_modes","new_modes","init_mode","mode_mapping","36","SlottedInfo","slot","include_label","_get_draw_coords","draw_start","draw_end","f_name","text_len","_find_slot","draw_coords","slot_num","has_overlap","k_len","s_e","feature_uid","undone","highest_slot","slotted_info","old_draw_coords","new_draw_coords","slotted_coords","dc","37","compute_overlap","first_region","second_region","first_start","first_end","second_start","second_end","is_overlap","overlap","dashedLine","x1","y1","x2","y2","dashLen","dX","dY","dashes","sqrt","dashX","dashY","fillRect","drawDownwardEquilateralTriangle","down_vertex_x","down_vertex_y","side_len","beginPath","moveTo","lineTo","strokeStyle","fill","stroke","closePath","DrawResults","Painter","view_start","view_end","default_prefs","get_start_draw_pos","_chrom_pos_to_draw_pos","get_end_draw_pos","get_draw_pos","overflow_color","in_path","vertical_range","height_px","save","y_zero","x_scaled","delta_x_pxs","delta_x_px","painter_color","block_color","pref_color","pref_r","pref_g","pref_b","top_overflow","bot_overflow","saturation","new_r","new_g","new_b","overflow_x","restore","FeaturePositionMapper","slot_height","feature_positions","y_translation","map_feature_data","x_start","x_end","get_feature_data","feature_dict","FeaturePainter","alpha_scaler","height_scaler","max_label_length","connector_color","required_height","get_row_height","y_scale","get_top_padding","x_draw_coords","feature_start","feature_end","draw_element","draw_background_connector","draw_individual_connectors","y_start","feature_name","feature_strand","f_start","f_end","thick_start","thick_end","reverse_strand_color","label_color","feature_ts","feature_te","feature_blocks","full_height","thin_height","thick_height","cur_y_start","cur_height","SQUISH_FEATURE_HEIGHT","get_pattern","last_block_start","last_block_end","block","block_start","block_end","block_thick_start","block_thick_end","draw_connector","hscale_factor","ws_height","base_color_fn","show_insertions","_parse_cigar","cigar_str","cigar_ops","blocks","cur_block","base_pos","parsed_cigar","op_len","op_char","cigar","draw_read","strand","read_seq","get_draw_coord","sequence_coord","s_start","s_end","base_offset","seq_offset","gap","detail_block_color","pack_mode","draw_height","rect_y","paint_utils","ReadPainterUtils","drawing_blocks","draw_last","cig_id","cig","cig_op","cig_len","seq_start","cur_seq","start_pos","show_differences","c_start","draw_deletion","insert_x_coord","seq","x_center","Array","connector","b1_end","b2_start","line_height","longest_feature_length","calculate_longest_feature_length","view_range","block1_start","block1_end","block2_start","block2_end","radius","PI","arc","Color","rgb","isArray","alpha","eval","toCSS","toHSL","h","toARGB","mix","color2","weight","color1","w","w1","w2","LinearRamp","start_color","end_color","start_value","end_value","value_range","map_value","SplitRamp","middle_color","positive_ramp","negative_ramp","Infinity","pos_color","neg_color","s1","e1","s2","e2","invsqrt2","ramp","rotate","row_height","px_per_base","draw_details","delete_details_thickness","thickness","divider_height","summary_height","show_sample_data","locus_data","ref","alt","sample_gts","allele_counts","variant","draw_x_start","draw_y_start","genotype","get_indel_info","ref_len","alt_len","base_px","feature_height","draw_summary","flatten","alt_info","indel_info","allele_frac","snp","38","Filter","tool_exp_name","create_action_icon","slider","slider_label","filter_label","values_span","values_span_container","slider_div","control_element","step","get_slider_step","slide","input_size","multi_value","slider_row","blur","slider_min","slider_max","invalid","a_val","display_controls_div","transparency_icon","height_icon","_keep_val","to_filter","returnVal","updated","alpha_filter_name","height_filter_name","filters_dict","run_buttons_row","filter_manager","filter_dicts","tool_filter_conditions","get_or_create_dict_item","dict","new_item","active_filters","active_filters_list","run_filter","input_dataset_id","filter_tuple","tool_filters","tool_filter_str","cond","run_tool_url","39","_bigwig","bigwig","load_data","extra_params","set_data","makeBwg","bb","readWigData","prev","MIN_VALUE","score","40","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","spans","jszlib","DASFeature","DASGroup","readInt","ba","read","timeout","xhrObj","xhrFields","responseType","bwg_readOffset","M1","M2","M3","M4","BigWig","BigWigView","bwg","cirTreeOffset","cirTreeLength","isSummary","Uint8Array","sa","Int16Array","la","Int32Array","magic","BIG_WIG_MAGIC","BIG_BED_MAGIC","BIG_WIG_MAGIC_BE","BIG_BED_MAGIC_BE","numZoomLevels","chromTreeOffset","unzoomedDataOffset","unzoomedIndexOffset","fieldCount","definedFieldCount","asOffset","totalSummaryOffset","uncompressBufSize","extHeaderOffset","zoomLevels","zl","zlReduction","zlData","zlIndex","reduction","dataOffset","indexOffset","readChromTree","getAutoSQL","as","schema","BBIExtraIndex","bbi","field","Range","intersection","jszlib_inflate_buffer","inflateBuffer","arrayCopy","BED_COLOR_REGEXP","RegExp","thisB","chromsToIDs","idsToChroms","maxID","udo","bpt","keySize","bptReadNode","nodeType","cnt","childOffset","ki","charCode","String","fromCharCode","chromId","chrName","chr","readWigDataById","cirHeader","cirBlockSize","blocksToFetch","outstanding","Date","now","fmin","fmax","toks","cirFobRecur","instrument","cachedCirRoot","cirFobRecur2","fetchFeatures","maxCirBlockSpan","blockSpan","fetchRanges","ranges","fr","cirFobStartFetch","attempts","resultBuffer","cirBlockData","isLeaf","lo","startChrom","startBase","endChrom","endBase","blockOffset","blockSize","recurOffsets","b0","createFeature","opts","_chromId","segment","tramp","parseFeatures","fetchStart","fetchSize","bi","fb","tmp","fa","Float32Array","itemCount","byteLength","validCnt","maxVal","sumData","summaryOpts","maxScore","blockStart","itemStep","itemSpan","blockType","Error","dfc","rest","ch","bedColumns","featureOpts","orientation","itemRgb","col","fields","thickStart","thickEnd","blockCount","blockSizes","blockStarts","exonFrames","grp","notes","groups","geneId","geneName","geneName2","gg","spanList","bmin","bmax","tsList","ts","codingRegion","tl","tlList","readingFrame","tlOffset","readframe","brf","readframeExplicit","getFirstAdjacent","dir","getFirstAdjacentById","blockToFetch","bestBlockChr","bestBlockOffset","chrx","bestFeature","bestChr","bestPos","fi","exec","bestRecur","getUnzoomedView","getZoomedView","unzoomedView","cirLen","z","zh","_tsFetch","zoom","topLevelReductionCache","feats","thresholdSearch","referencePoint","threshold","fbThresholdSearchRecur","candidates","c1","c2","chrOrd","candidate","rp","fromRef","initialChr","chrId","header_re","field_re","headerMatch","declType","comment","getExtraIndices","extraIndexCount","extraIndexListOffset","eil","indices","ii","eiType","eiFieldCount","eiOffset","eiField","lookup","nodeOffset","valSize","node","Uint16Array","Uint32Array","lastChildOffset","localeCompare","41","_min","_max","_Compound","sorted","_rangeOrder","merged","_ranges","s0","insertRange","r0","l0","l1","i0","i1","lapMin","lapMax","coverage","tot","rl","ri","rangeOrder","isContiguous","_pushRanges","lower_bound","lb","ub","rangeOver","42","ZStream","Inflate","was","InfBlocks","checkfn","hufts","MANY","IB_TYPE","table","blens","tb","codes","InfCodes","last","bitk","bitb","write","inftree","InfTree","inflate_trees_fixed","bl","bd","td","fixed_bl","fixed_bd","fixed_tl","fixed_td","Z_OK","srcOffset","dest","destOffset","count","arrayCopy_fast","hasSubarray","subarray","BYTES_PER_ELEMENT","byteOffset","arrayCopy_slow","afterUncOffset","inflateInit","DEF_WBITS","next_in","next_in_index","avail_in","oBlockList","totalSize","obuf","next_out","next_out_index","avail_out","inflate","Z_NO_FLUSH","Z_STREAM_END","Z_BUF_ERROR","msg","newob","out","cursor","inflate_mask","cplens","cplext","cpdist","cpdext","istate","inflateEnd","ret","inflateSync","inflateSetDictionary","dictionary","dictLength","inflateReset","total_in","total_out","free","wbits","marker","need","adler","proc","_adler","adler32","set_dictionary","mark","inflateSyncPoint","sync_point","INFBLOCKS_BORDER","inflate_flush","inflate_trees_bits","inflate_trees_dynamic","tl_index","td_index","lbits","dbits","ltree","ltree_index","dtree","dtree_index","tree","tindex","inflate_fast","tree_index","lit","dist","tp","tp_index","ml","md","tp_index_t_3","huft_build","bindex","hp","hn","mask","xp","u","initWorkArea","nl","nd","vsize","BMAX","testArray","43","__WEBPACK_AMD_DEFINE_FACTORY__","factory","responseFields","native","converters","support","xhrId","xhrSuccessStatus","0","1223","xhrCallbacks","xhrSupported","ActiveXObject","cors","ajaxTransport","crossDomain","send","headers","responses","password","mimeType","overrideMimeType","onload","onerror","abort","statusText","getAllResponseHeaders","hasContent","getNative","44","warnAtPercent","errorAtPercent","isOverQuota","_render_quota","modelJson","percent","$meter","_templateQuotaMeter","$bar","_render_usage","usage","_templateUsage","meterHtml","5","mixin","mixinHash1","propsHash","lastArg","wrapTemplate","jsonNamespace","templateFn","templateVars","_l","buildComparator","attribute_name","ascending","_addLogging","_addLogging2","SessionStorageModel","initialAttrs","_checkEnabledSessionStorage","existing","isNew","_read","silent","sync","returned","_create","_update","_delete","setItem","DOMException","navigator","userAgent","getItem","_log","SearchableModelMixin","searchAttributes","searchAliases","searchAttribute","attrKey","searchFor","attrVal","_searchArrayAttribute","array","any","search","matches","matchesAll","terms","all","HiddenUntilActivatedViewMixin","hiddenUntilActivated","$activator","HUAVOptions","$elementShown","showFn","showSpeed","hasBeenShown","isHidden","ev","onshowFirstTime","onshow","onhide","DraggableViewMixin","draggable","$dragHandle","toggleDraggable","draggableOff","draggableOn","dragStartHandler","_dragStartHandler","dragEndHandler","_dragEndHandler","addEventListener","removeEventListener","dataTransfer","effectAllowed","setData","SelectableViewMixin","selectable","selected","$selector","_renderSelected","toggleClass","toggleSelector","hideSelector","showSelector","speed","fxSpeed","toggleSelect","deselect","59","_init","_userModel","_userModel2","_metricsLogger","_metricsLogger2","NAMESPACE_KEY","DEBUGGING_KEY","localDebugging","localStorage","storageErr","Events","_processOptions","_initConfig","_patchGalaxy","_initLogger","loggerOptions","_initLocale","localize","_initUser","_setUpListeners","patchExisting","patchWith","consoleLogger","consoleLevel","MetricsLogger","ALL","consoleNamespaceWhitelist","consoleFlattenMessages","userJSON","lastAjax","debugging","debuggingNamespaces","namespaces","csv","newSettings","60","userId","usefulToString","arg","asStr","LoggingCache","_typeof","Symbol","iterator","LOG","DEBUG","INFO","WARN","ERROR","METRIC","NONE","logLevel","defaultNamespace","clientPrefix","maxCacheSize","postSize","addTime","cacheKeyPrefix","postUrl","delayPostInMs","getPingData","onServerResponse","_parseLevel","_sending","_waiting","_postSize","_initCache","cache","maxSize","_emitToConsole","upper","toUpperCase","logArguments","_addToCache","_buildEntry","_postCache","time","toISOString","entries","entriesLength","postData","metrics","post","always","fail","readyState","responseJSON","responseText","_delayPost","whitelist","info","warn","metric","_hasStorage","_initStorage","_cache","_fetchAndParse","overage","_unparseAndStore","removed","print","61","_masthead","_masthead2","_panel","_panel2","_panelids","message_box_visible","message_box_content","message_box_class","show_inactivity_warning","inactivity_box_content","center","Router","CenterPanel","$messagebox","$inactivebox","panels","panel_id","panel_class_name","panel_class","panel_instance","SidePanel","renderMessageBox","renderInactivityBox","renderPanels","_checkCommunicationServerOnline","verificationLink","panel","preferences","$chat_icon_element","communication_server","8","DatasetMetadata","metadata","_set_metadata","new_key","attribute","chunk_url","first_data_chunk","at_eof","url_viz","get_next_chunk","next_chunk","chunk","ck_data","TabularDatasetChunkedView","row_count","loading_chunk","TabularButtonTracksterView","expand_to_container","scroll_elt","attempt_to_fetch","scrolled_to_bottom","loading_indicator","_renderChunk","data_table","cellpadding","column_names","header_container","header_row","first_chunk","_renderCell","cell_contents","colspan","$cell","column_types","_renderRow","line","cells","num_columns","TopLevelTabularDatasetChunkedView","EmbeddedTabularDatasetChunkedView","innerHeight","scrollHeight","genome_build","file_ext","btn_viz","mouseover tr","eq","isFinite","btn_viz_pars","dataset_config","9","_uiTabs","_uiTabs2","CustomToJSON","to_json_keys","to_json_mappers","history_grid","library_grid","tabs","Add","requests","track_defs","dummy_canvas","patterns","load_pattern","path","image","Image","createPattern","num_elements","obj_cache","key_ary","key_str","move_key_to_end","most_recently_added","init_data","min_region_size","initial_entries","add_data","data_is_ready","ready_deferred","query_type","filter_names","filter_cols","entry_region","is_subregion","last_request","DEEP_DATA_REQ","BROAD_DATA_REQ","get_more_data","req_type","cur_data","_mark_stale","query_low","start_val","query_region","new_data_request","new_data_available","can_get_more_detailed_data","get_more_detailed_data","detail_multiplier","get_genome_wide_data","all_data_available","gw_data","genome_wide_data","subregion","subset_fns","data_point","refseq","subregion_data","same","dataset_placeholder","get_chroms_info","get_chrom_region","chr_name","get_chrom_len","str_val","pieces","start_end","a_region","first_chrom","second_chrom","overlap_results","DIF_CHROMS","BEFORE","OVERLAP_START","CONTAINS","AFTER","CONTAINED_BY","OVERLAP_END","chrom_len","overlaps","GenomeRegionCollection","BrowserBookmark","BrowserBookmarkCollection","BackboneTrack","preloaded_data","BackboneTrackCollection","GenomeVisualization","unset","add_tracks","dummy","content_visible","route","navigate","change_location"],"mappings":"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+BACA,+BACA,6BACA,8BACA,+BACA,+BACA,6BACA,6BACA,+BACA,+BACA,8BACA,8BACA,+BACA,8BACA,6BACA,6BACA,+BACA,+BACA,8BACA,6BACA,+BACA,+BACA,6BACA,6BACA,+BACA,+BACA,8BACA,gCACA,+BAEA,8BACA,6BACA,6BACA,+BACA,+BACA,6BACA,8BACA,+BACA,+BACA,6BACA,6BACA,+BACA,+BACA,8BACA,8BACA,+BACA,8BACA,6BACA,6BACA,+BACA,+BACA,8BACA,6BACA,+BACA,+BACA,6BACA,6BACA,+BACA,+BACA,8BACA,gCACA,+BACA,8BACA,6BACA,6BACA,+BACA,+BACA,6BACA,8BACA,+BACA,+BACA,6BACA,6BACA,+BACA,+BACA,8BACA,8BACA,+BACA,8BACA,6BACA,6BACA,+BACA,+BACA,8BACA,6BACA,+BACA,+BACA,6BACA,6BACA,+BACA,+BACA,+BAEAC,GACA,kCACA,oCACA,kCACA,sCACA,kCACA,oCACA,mCACA,wCAIAiC,GACA,yCACA,kDAIAC,GACA,gCACA,mCAGAC,GACA,2CACA,8CACA,wBAGAC,GACA,gCACA,wBACA,YAUA9D,GAAA7jE,UAAAomE,YAAA,SAAAla,EAAAt0B,GAQA,MAPAs0B,KACAA,EAAAma,GAEAzuC,IACAA,GAAA,GAEAl7B,KAAAkrE,OAAA,GAAA9D,GACApnE,KAAAkrE,OAAAxB,YAAA1pE,KAAAk7B,GAAAs0B,MAGA2X,EAAA7jE,UAAA+mE,QAAA,SAAAzuD,GACA,aAAA5b,KAAAkrE,QA9NA,EA+NAlrE,KAAAkrE,OAAAb,QAAArqE,KAAA4b,IAGAurD,EAAA7jE,UAAA6nE,WAAA,WACA,SAAAnrE,KAAAkrE,OAAA,OAnOA,CAoOA,IAAAE,GAAAF,OAAAC,WAAAnrE,KAEA,OADAA,MAAAkrE,OAAA,KACAE,GAEAjE,EAAA7jE,UAAA+nE,YAAA,WAEA,MAAAH,QAAAG,YAAArrE,OAEAmnE,EAAA7jE,UAAAgoE,qBAAA,SAAAC,EAAAC,GAEA,MAAAN,QAAAI,qBAAAtrE,KAAAurE,EAAAC,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","file":"login.bundled.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize(number) {\n    number += \"\"; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, \"$1\" + \",\" + \"$2\");\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = function is_deferred(d) {\n    return \"promise\" in d;\n};\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function success_fn(result) {\n            return true;\n        }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function go() {\n        var deferred = $.Deferred();\n        var self = this;\n        var ajax_settings = self.get(\"ajax_settings\");\n        var success_fn = self.get(\"success_fn\");\n        var interval = self.get(\"interval\");\n\n        var _go = function _go() {\n            $.ajax(ajax_settings).success(function (result) {\n                if (success_fn(result)) {\n                    // Result is good, so resolve.\n                    deferred.resolve(result);\n                } else {\n                    // Result not good, try again.\n                    setTimeout(_go, interval);\n                }\n            });\n        };\n\n        _go();\n        return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = function get_random_color(colors) {\n    // Default for colors is white.\n    if (!colors) {\n        colors = \"#ffffff\";\n    }\n\n    // If needed, create list of colors.\n    if (typeof colors === \"string\") {\n        colors = [colors];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt(colors[i].slice(1), 16);\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = function brightness(r, g, b) {\n        return (r * 299 + g * 587 + b * 114) / 1000;\n    };\n\n    // Compute color difference:\n    var difference = function difference(r1, g1, b1, r2, g2, b2) {\n        return Math.max(r1, r2) - Math.min(r1, r2) + (Math.max(g1, g2) - Math.min(g1, g2)) + (Math.max(b1, b2) - Math.min(b1, b2));\n    };\n\n    // Create new random color.\n    var new_color;\n\n    var nr;\n    var ng;\n    var nb;\n    var other_color;\n    var or;\n    var og;\n    var ob;\n    var n_brightness;\n    var o_brightness;\n    var diff;\n    var ok = false;\n    var num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round(Math.random() * 0xffffff);\n        nr = (new_color & 0xff0000) >> 16;\n        ng = (new_color & 0x00ff00) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = (other_color & 0xff0000) >> 16;\n            og = (other_color & 0x00ff00) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if (Math.abs(n_brightness - o_brightness) < 40 || diff < 200) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++;\n    } while (!ok && num_tries <= 10);\n\n    // Add 0x1000000 to left pad number with 0s.\n    return \"#\" + (0x1000000 + new_color).toString(16).substr(1, 6);\n};\n\nexports.default = {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred: ServerStateDeferred,\n    get_random_color: get_random_color\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _util = __webpack_require__(10);\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _config = __webpack_require__(11);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function initialize(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find([{\n            key: \"name\",\n            label: \"Name\",\n            type: \"text\",\n            default_value: \"\"\n        }, {\n            key: \"color\",\n            label: \"Color\",\n            type: \"color\",\n            default_value: null\n        }, {\n            key: \"min_value\",\n            label: \"Min Value\",\n            type: \"float\",\n            default_value: null\n        }, {\n            key: \"max_value\",\n            label: \"Max Value\",\n            type: \"float\",\n            default_value: null\n        }, {\n            key: \"mode\",\n            type: \"string\",\n            default_value: this.mode,\n            hidden: true\n        }, {\n            key: \"height\",\n            type: \"int\",\n            default_value: 32,\n            hidden: true\n        }, {\n            key: \"pos_color\",\n            label: \"Positive Color\",\n            type: \"color\",\n            default_value: \"#FF8C00\"\n        }, {\n            key: \"neg_color\",\n            label: \"Negative Color\",\n            type: \"color\",\n            default_value: \"#4169E1\"\n        }, {\n            key: \"block_color\",\n            label: \"Block color\",\n            type: \"color\",\n            default_value: null\n        }, {\n            key: \"label_color\",\n            label: \"Label color\",\n            type: \"color\",\n            default_value: \"black\"\n        }, {\n            key: \"show_insertions\",\n            label: \"Show insertions\",\n            type: \"bool\",\n            default_value: false\n        }, {\n            key: \"show_counts\",\n            label: \"Show summary counts\",\n            type: \"bool\",\n            default_value: true\n        }, {\n            key: \"reverse_strand_color\",\n            label: \"Antisense strand color\",\n            type: \"color\",\n            default_value: null\n        }, {\n            key: \"show_differences\",\n            label: \"Show differences only\",\n            type: \"bool\",\n            default_value: true\n        }], function (s) {\n            return s.key === key;\n        });\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get(\"value\") === undefined && this.get(\"default_value\") !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", _util2.default.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function set_value(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend({\n    model: ConfigSetting,\n\n    /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n    to_key_value_dict: function to_key_value_dict() {\n        var rval = {};\n        this.each(function (setting) {\n            rval[setting.get(\"key\")] = setting.get(\"value\");\n        });\n\n        return rval;\n    },\n\n    /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n    get_value: function get_value(key) {\n        var s = this.get(key);\n        if (s) {\n            return s.get(\"value\");\n        }\n\n        return undefined;\n    },\n\n    /**\n     * Set value for a setting.\n     */\n    set_value: function set_value(key, value, options) {\n        var s = this.get(key);\n        if (s) {\n            return s.set_value(value, options);\n        }\n\n        return undefined;\n    },\n\n    /**\n     * Set default value for a setting.\n     */\n    set_default_value: function set_default_value(key, default_value) {\n        var s = this.get(key);\n        if (s) {\n            return s.set(\"default_value\", default_value);\n        }\n\n        return undefined;\n    }\n}, {\n    /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n    from_models_and_saved_values: function from_models_and_saved_values(models, saved_values) {\n        // If there are saved values, copy models and update with saved values.\n        if (saved_values) {\n            models = _.map(models, function (m) {\n                return _.extend({}, m, { value: saved_values[m.key] });\n            });\n        }\n\n        return new ConfigSettingCollection(models);\n    }\n});\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function render() {\n        var container = this.$el;\n\n        this.collection.each(function (param, index) {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = \"param_\" + index;\n\n            var type = param.get(\"type\");\n            var value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append($(\"<label />\").attr(\"for\", id).text(param.get(\"label\") + \":\"));\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append($('<input type=\"checkbox\" />').attr(\"id\", id).attr(\"name\", id).attr(\"checked\", value));\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append($('<input type=\"text\"/>').attr(\"id\", id).val(value).click(function () {\n                    $(this).select();\n                }));\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), function (option) {\n                    $(\"<option/>\").text(option.label).attr(\"value\", option.value).appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row);\n\n                var input = $(\"<input />\").attr(\"id\", id).attr(\"name\", id).val(value).css(\"float\", \"left\").appendTo(container_div).click(function (e) {\n                    // Hide other pickers.\n                    $(\".tooltip\").removeClass(\"in\");\n\n                    // Show input's color picker.\n                    var tip = $(this).siblings(\".tooltip\").addClass(\"in\");\n                    tip.css({\n                        // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                        // top: $(this).position().top + $(this.height)\n                        left: $(this).position().left + $(this).width() + 5,\n                        top: $(this).position().top - $(tip).height() / 2 + $(this).height() / 2\n                    }).show();\n\n                    // Click management:\n\n                    // Keep showing tip if clicking in tip.\n                    tip.click(function (e) {\n                        e.stopPropagation();\n                    });\n\n                    // Hide tip if clicking outside of tip.\n                    $(document).bind(\"click.color-picker\", function () {\n                        tip.hide();\n                        $(document).unbind(\"click.color-picker\");\n                    });\n\n                    // No propagation to avoid triggering document click (and tip hiding) above.\n                    e.stopPropagation();\n                });\n\n                var // Icon for setting a new random color; behavior set below.\n                new_color_icon = $(\"<a href='javascript:void(0)'/>\").addClass(\"icon-button arrow-circle\").appendTo(container_div).attr(\"title\", \"Set new random color\").tooltip();\n\n                var // Color picker in tool tip style.\n                tip = $(\"<div class='tooltip right' style='position: absolute;' />\").appendTo(container_div).hide();\n\n                var // Inner div for padding purposes\n                tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip);\n\n                var tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip);\n\n                var farb_obj = $.farbtastic(tip_inner, {\n                    width: 100,\n                    height: 100,\n                    callback: input,\n                    color: value\n                });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (function (fixed_farb_obj) {\n                    new_color_icon.click(function () {\n                        fixed_farb_obj.setColor(_util2.default.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append($(\"<input />\").attr(\"id\", id).attr(\"name\", id).val(value));\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function render_in_modal(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this;\n\n        var cancel_fn = function cancel_fn() {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n        };\n\n        var ok_fn = function ok_fn() {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n            self.update_from_form();\n        };\n\n        var check_enter_esc = function check_enter_esc(e) {\n            if ((e.keyCode || e.which) === 27) {\n                // Escape key\n                cancel_fn();\n            } else if ((e.keyCode || e.which) === 13) {\n                // Enter key\n                ok_fn();\n            }\n        };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function update_from_form() {\n        var self = this;\n        this.collection.each(function (setting, index) {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = \"param_\" + index;\n                var value = self.$el.find(\"#\" + id).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(\"#\" + id).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexports.default = {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _gridModel = __webpack_require__(31);\n\nvar _gridModel2 = _interopRequireDefault(_gridModel);\n\nvar _gridTemplate = __webpack_require__(32);\n\nvar _gridTemplate2 = _interopRequireDefault(_gridTemplate);\n\nvar _popupMenu = __webpack_require__(20);\n\nvar _popupMenu2 = _interopRequireDefault(_popupMenu);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\n\n// grid view\nexports.default = Backbone.View.extend({\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function initialize(grid_config) {\n        this.grid = new _gridModel2.default();\n        this.dict_format = grid_config.dict_format;\n        this.title = grid_config.title;\n        var self = this;\n        window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n            // Put tag name and value together.\n            var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n            var advanced_search = $(\"#advanced-search\").is(\":visible\");\n            if (!advanced_search) {\n                $(\"#standard-search\").slideToggle(\"fast\");\n                $(\"#advanced-search\").slideToggle(\"fast\");\n            }\n            self.add_filter_condition(\"tags\", tag);\n        };\n\n        // set element\n        if (this.dict_format) {\n            this.setElement(\"<div/>\");\n            if (grid_config.url_base && !grid_config.items) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function (v, k) {\n                    url_data[\"f-\" + k] = v;\n                });\n                $.ajax({\n                    url: grid_config.url_base + \"?\" + $.param(url_data),\n                    success: function success(response) {\n                        response.embedded = grid_config.embedded;\n                        response.filters = grid_config.filters || {};\n                        self.init_grid(response);\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement(\"#grid-container\");\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $(\"#center\").css({\n                padding: \"10px\",\n                overflow: \"auto\"\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function handle_refresh(refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray(\"history\", refresh_frames) > -1) {\n                if (window.top.Galaxy && window.top.Galaxy.currHistoryPanel) {\n                    window.top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function init_grid(grid_config) {\n        this.grid.set(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        if (this.allow_title_display && options.title) {\n            _utils2.default.setWindowTitle(options.title);\n        }\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get(\"url_base\");\n        url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n        this.grid.set(\"url_base\", url);\n\n        // append main template\n        this.$el.html(_gridTemplate2.default.grid(options));\n\n        // update div contents\n        this.$el.find(\"#grid-table-header\").html(_gridTemplate2.default.header(options));\n        this.$el.find(\"#grid-table-body\").html(_gridTemplate2.default.body(options));\n        this.$el.find(\"#grid-table-footer\").html(_gridTemplate2.default.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find(\"#grid-message\").html(_gridTemplate2.default.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout(function () {\n                    self.$el.find(\"#grid-message\").html(\"\");\n                }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function init_grid_controls() {\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find(\".operation-button\").each(function () {\n            $(this).off();\n            $(this).click(function () {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find(\"input[type=text]\").each(function () {\n            $(this).off();\n            $(this).click(function () {\n                $(this).select();\n            }).keyup(function () {\n                $(this).css(\"font-style\", \"normal\");\n            });\n        });\n\n        // Initialize sort links.\n        this.$el.find(\".sort-link\").each(function () {\n            $(this).off();\n            $(this).click(function () {\n                self.set_sort_condition($(this).attr(\"sort_key\"));\n                return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find(\".text-filter-form\").each(function () {\n            $(this).off();\n            $(this).submit(function () {\n                var column_key = $(this).attr(\"column_key\");\n                var text_input_obj = $(\"#input-\" + column_key + \"-filter\");\n                var text_input = text_input_obj.val();\n                text_input_obj.val(\"\");\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".text-filter-val > a\").each(function () {\n            $(this).off();\n            $(this).click(function () {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".categorical-filter > a\").each(function () {\n            $(this).off();\n            $(this).click(function () {\n                self.set_categorical_filter($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find(\".advanced-search-toggle\").each(function () {\n            $(this).off();\n            $(this).click(function () {\n                self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find(\"#check_all\").off();\n        this.$el.find(\"#check_all\").on(\"click\", function () {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements: function init_grid_elements() {\n        // Initialize grid selection checkboxes.\n        this.$el.find(\".grid\").each(function () {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function update_checked() {\n                check_count.text($(checkboxes).filter(\":checked\").length);\n            };\n\n            $(checkboxes).each(function () {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find(\".community_rating_star\").length !== 0) this.$el.find(\".community_rating_star\").rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find(\".page-link > a\").each(function () {\n            $(this).click(function () {\n                self.set_page($(this).attr(\"page_num\"));\n                return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find(\".use-target\").each(function () {\n            $(this).click(function (e) {\n                self.execute({\n                    href: $(this).attr(\"href\"),\n                    target: $(this).attr(\"target\")\n                });\n                return false;\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each(options.items, function (item, index) {\n            var button = self.$(\"#grid-\" + index + \"-popup\").off();\n            var popup = new _popupMenu2.default(button);\n            _.each(options[\"operations\"], function (operation) {\n                self._add_operation(popup, operation, item);\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function _add_operation(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function func(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function add_filter_condition(name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(_gridTemplate2.default.filter_element(name, value));\n        var self = this;\n        t.click(function () {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find(\"#\" + name + \"-filtering-criteria\");\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function remove_filter_condition(name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function set_sort_condition(col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get(\"sort_key\");\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== \"-\") {\n                new_sort = \"-\" + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find(\".sort-arrow\").remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n        var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\"sort-arrow\");\n\n        // Add to header\n        this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n        // Update grid.\n        this.grid.set(\"sort_key\", new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function set_categorical_filter(name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get(\"categorical_filters\")[name];\n\n        var cur_value = this.grid.get(\"filters\")[name];\n        var self = this;\n        this.$el.find(\".\" + name + \"-filter\").each(function () {\n            var text = $.trim($(this).text());\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass(\"current-filter\");\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $(\"<a href=\\\"#\\\">\" + text + \"</a>\");\n                t.click(function () {\n                    self.set_categorical_filter(name, filter_value);\n                });\n                $(this).removeClass(\"current-filter\");\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function set_page(new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find(\".page-link\").each(function () {\n            var id = $(this).attr(\"id\");\n\n            var // Id has form 'page-link-<page_num>\n            page_num = parseInt(id.split(\"-\")[2], 10);\n\n            var cur_page = self.grid.get(\"cur_page\");\n            var text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass(\"inactive-link\");\n                $(this).text(text);\n            } else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass(\"inactive-link\");\n                var t = $(\"<a href=\\\"#\\\">\" + text + \"</a>\");\n                t.click(function () {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === \"all\") {\n            this.grid.set(\"cur_page\", new_page);\n        } else {\n            this.grid.set(\"cur_page\", parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function submit_operation(operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {\n            label: operation_name\n        });\n        if (operation && !confirmation_text) {\n            confirmation_text = operation.confirm || \"\";\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find(\"input[name=id]:checked\").each(function () {\n            item_ids.push($(this).val());\n        });\n\n        // execute operation\n        var options = {\n            operation: operation_name,\n            id: item_ids,\n            confirmation_text: confirmation_text\n        };\n        if (operation.target == \"top\" || operation.target == \"center\") {\n            options = _.extend(options, {\n                href: operation.href,\n                target: operation.target\n            });\n        }\n        this.execute(options);\n        return true;\n    },\n\n    check_all_items: function check_all_items() {\n        var check = this.$(\".grid-row-select-checkbox\");\n        var state = this.$(\"#check_all\").prop(\"checked\");\n        _.each(check, function (c) {\n            $(c).prop(\"checked\", state);\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function go_page_one() {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get(\"cur_page\");\n        if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n            this.grid.set(\"cur_page\", 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function execute(options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf(\"operation\") != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split(\"=\")[1];\n                            operation = operation.replace(/\\+/g, \" \");\n                        } else if (href_parms[index].indexOf(\"id\") != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split(\"=\")[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != \"\" && confirmation_text != \"None\" && confirmation_text != \"null\") if (!confirm(confirmation_text)) return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if (target == \"top\") {\n                window.top.location = href + \"?\" + $.param(this.grid.get_url_data());\n            } else if (target == \"center\") {\n                $(\"#galaxy_main\").attr(\"src\", href + \"?\" + $.param(this.grid.get_url_data()));\n            } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get(\"async\") || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function go_to(target, href) {\n        // get aysnc status\n        var async = this.grid.get(\"async\");\n        this.grid.set(\"async\", false);\n\n        // get slide status\n        var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n        this.grid.set(\"advanced_search\", advanced_search);\n\n        // get default url\n        if (!href) {\n            href = this.grid.get(\"url_base\") + \"?\" + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case \"center\":\n                $(\"#galaxy_main\").attr(\"src\", href);\n                break;\n            case \"top\":\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function update_grid() {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find(\".loading-elt-overlay\").show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get(\"url_base\"),\n            data: self.grid.get_url_data(),\n            error: function error(response) {\n                alert(\"Grid refresh failed\");\n            },\n            success: function success(response_text) {\n                // backup\n                var embedded = self.grid.get(\"embedded\");\n                var insert = self.grid.get(\"insert\");\n                var advanced_search = self.$el.find(\"#advanced-search\").is(\":visible\");\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find(\".loading-elt-overlay\").hide();\n            },\n            complete: function complete() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2), __webpack_require__(0), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 13:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n  Webhooks\n**/\n\nvar WebhookModel = Backbone.Model.extend({\n    defaults: {\n        activate: false\n    }\n});\n\nvar Webhooks = Backbone.Collection.extend({\n    model: WebhookModel\n});\n\nvar WebhookView = Backbone.View.extend({\n    el: \"#webhook-view\",\n\n    initialize: function initialize(options) {\n        var me = this;\n        var toolId = options.toolId || \"\";\n        var toolVersion = options.toolVersion || \"\";\n\n        this.$el.attr(\"tool_id\", toolId);\n        this.$el.attr(\"tool_version\", toolVersion);\n\n        this.model = new WebhookModel();\n        this.model.urlRoot = options.urlRoot;\n        this.model.fetch({\n            success: function success() {\n                me.render();\n            }\n        });\n    },\n\n    render: function render() {\n        var webhook = this.model.toJSON();\n\n        this.$el.html(\"<div id=\\\"\" + webhook.name + \"\\\"></div>\");\n        if (webhook.styles) $(\"<style/>\", { type: \"text/css\" }).text(webhook.styles).appendTo(\"head\");\n        if (webhook.script) $(\"<script/>\", { type: \"text/javascript\" }).text(webhook.script).appendTo(\"head\");\n\n        return this;\n    }\n});\n\nvar add = function add(options) {\n    var webhooks = new Webhooks();\n\n    webhooks.url = Galaxy.root + options.url;\n    webhooks.fetch({\n        async: options.async ? options.async : true,\n        success: options.callback\n    });\n};\n\nexports.default = {\n    Webhooks: Webhooks,\n    WebhookView: WebhookView,\n    add: add\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 148:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _galaxy = __webpack_require__(59);\n\nvar _galaxy2 = _interopRequireDefault(_galaxy);\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _page = __webpack_require__(61);\n\nvar _page2 = _interopRequireDefault(_page);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar $ = _jquery2.default;\n\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new _galaxy2.default.GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"login app\");\n    var redirect = encodeURI(options.redirect);\n\n    // TODO: remove iframe for user login (at least) and render login page from here\n    // then remove this redirect\n    if (!options.show_welcome_with_login) {\n        var params = _jquery2.default.param({ use_panels: \"True\", redirect: redirect });\n        window.location.href = Galaxy.root + \"user/login?\" + params;\n        return;\n    }\n\n    var LoginPage = Backbone.View.extend({\n        initialize: function initialize(page) {\n            this.page = page;\n            this.model = new Backbone.Model({ title: (0, _localization2.default)(\"Login required\") });\n            this.setElement(this._template());\n        },\n        render: function render() {\n            this.page.$(\"#galaxy_main\").prop(\"src\", options.welcome_url);\n        },\n        _template: function _template() {\n            var login_url = options.root + \"user/login?\" + $.param({\n                redirect: redirect\n            });\n            return \"<iframe src=\\\"\" + login_url + \"\\\" frameborder=\\\"0\\\" style=\\\"width: 100%; height: 100%;\\\"/>\";\n        }\n    });\n\n    $(function () {\n        Galaxy.page = new _page2.default.View(_.extend(options, {\n            Right: LoginPage\n        }));\n    });\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/** Frame view */\nvar FrameView = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model(options);\n        this.setElement($(\"<div/>\").addClass(\"corner frame\"));\n        this.$el.append($(\"<div/>\").addClass(\"f-header corner\").append($(\"<div/>\").addClass(\"f-title\")).append($(\"<div/>\").addClass(\"f-icon f-close fa fa-close\").tooltip({\n            title: \"Close\",\n            placement: \"bottom\"\n        }))).append($(\"<div/>\").addClass(\"f-content\")).append($(\"<div/>\").addClass(\"f-resize f-icon corner fa fa-expand\").tooltip({ title: \"Resize\" })).append($(\"<div/>\").addClass(\"f-cover\"));\n        this.$header = this.$(\".f-header\");\n        this.$title = this.$(\".f-title\");\n        this.$content = this.$(\".f-content\");\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    render: function render() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$title.html(options.title || \"\");\n        this.$header.find(\".f-icon-left\").remove();\n        _.each(options.menu, function (option) {\n            var $option = $(\"<div/>\").addClass(\"f-icon-left\").addClass(option.icon);\n            if (_.isFunction(option.disabled) && option.disabled()) {\n                $option.attr(\"disabled\", true);\n            } else {\n                $option.on(\"click\", function () {\n                    option.onclick(self);\n                }).tooltip({\n                    title: option.tooltip,\n                    placement: \"bottom\"\n                });\n            }\n            self.$header.append($option);\n        });\n        if (options.url) {\n            this.$content.html($(\"<iframe/>\").addClass(\"f-iframe\").attr(\"scrolling\", \"auto\").attr(\"src\", options.url + (options.url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"widget=True\"));\n        } else if (options.content) {\n            _.isFunction(options.content) ? options.content(self.$content) : self.$content.html(options.content);\n        }\n    }\n});\n\n/** Scratchbook viewer */\nvar View = Backbone.View.extend({\n    defaultOptions: {\n        frame: {\n            // default frame size in cells\n            cols: 6,\n            rows: 3\n        },\n        rows: 1000, // maximum number of rows\n        cell: 130, // cell size in px\n        margin: 5, // margin between frames\n        scroll: 5, // scroll speed\n        top_min: 40, // top margin\n        frame_max: 9, // maximum number of frames\n        visible: true // initial visibility\n    },\n\n    cols: 0, // number of columns\n    top: 0, // scroll/element top\n    top_max: 0, // viewport scrolling state\n    frame_z: 0, // frame z-index\n    frame_counter: 0, // frame counter\n    frame_uid: 0, // unique frame id counter\n    frame_list: {}, // list of all frames\n    frame_shadow: null, // frame shown as placeholder when moving active frames\n    visible: false, // flag indicating if scratchbook viewer is visible or not\n    event: {}, // dictionary keeping track of current event\n\n    initialize: function initialize(options) {\n        var self = this;\n        this.options = _.defaults(options || {}, this.defaultOptions);\n        this.visible = this.options.visible;\n        this.top = this.top_max = this.options.top_min;\n        this.setElement($(\"<div/>\").addClass(\"galaxy-frame\").append($(\"<div/>\").addClass(\"frame-background\")).append($(\"<div/>\").addClass(\"frame-menu frame-scroll-up fa fa-chevron-up fa-2x\")).append($(\"<div/>\").addClass(\"frame-menu frame-scroll-down fa fa-chevron-down fa-2x\")));\n\n        // initialize shadow to guiding drag/resize events\n        this.frame_shadow = new Backbone.View({\n            el: $(\"<div/>\").addClass(\"corner frame-shadow\")\n        });\n        this.$el.append(this.frame_shadow.$el);\n        this._frameInit(this.frame_shadow, \"#frame-shadow\");\n        this._frameResize(this.frame_shadow, { width: 0, height: 0 });\n        this.frame_list[\"#frame-shadow\"] = this.frame_shadow;\n\n        // initialize panel\n        this.visible ? this.show() : this.hide();\n        this._panelRefresh();\n        $(window).resize(function () {\n            self.visible && self._panelRefresh();\n        });\n    },\n\n    /** Render */\n    render: function render() {\n        this.$(\".frame-scroll-up\")[this.top != this.options.top_min && \"show\" || \"hide\"]();\n        this.$(\".frame-scroll-down\")[this.top != this.top_max && \"show\" || \"hide\"]();\n    },\n\n    /**\n     * Adds and displays a new frame.\n     *\n     * options:\n     *  url     : loaded into an iframe\n     *  content : content is treated as a function or raw HTML, function is passed a single\n     *              argument that is the frame's content DOM element\n     */\n    add: function add(options) {\n        if (this.frame_counter >= this.options.frame_max) {\n            Galaxy.modal.show({\n                title: \"Warning\",\n                body: \"You have reached the maximum number of allowed frames (\" + this.options.frame_max + \").\",\n                buttons: {\n                    Close: function Close() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        } else {\n            var frame_id = \"#frame-\" + this.frame_uid++;\n            if ($(frame_id).length !== 0) {\n                Galaxy.modal.show({\n                    title: \"Error\",\n                    body: \"This frame already exists. This page might contain multiple frame managers.\",\n                    buttons: {\n                        Close: function Close() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            } else {\n                // initialize new frame elements\n                this.top = this.options.top_min;\n                var frame = new FrameView(options);\n                this.$el.append(frame.$el);\n\n                // set dimensions\n                options.width = this._toPixelCoord(\"width\", this.options.frame.cols);\n                options.height = this._toPixelCoord(\"height\", this.options.frame.rows);\n\n                // set default z-index and add to ui and frame list\n                this.frame_z = parseInt(frame.$el.css(\"z-index\"));\n                this.frame_list[frame_id] = frame;\n                this.frame_counter++;\n                this._frameInit(frame, frame_id);\n                this._frameResize(frame, {\n                    width: options.width,\n                    height: options.height\n                });\n                this._frameInsert(frame, { top: 0, left: 0 }, true);\n                !this.visible && this.show();\n                this.trigger(\"add\");\n            }\n        }\n    },\n\n    /** Remove a frame */\n    del: function del(frame) {\n        var self = this;\n        var $frame = frame.$el;\n        $frame.fadeOut(\"fast\", function () {\n            $frame.remove();\n            delete self.frame_list[frame.id];\n            self.frame_counter--;\n            self._panelRefresh(true);\n            self._panelAnimationComplete();\n            self.trigger(\"remove\");\n        });\n    },\n\n    /** Show panel */\n    show: function show() {\n        this.visible = true;\n        this.$el.fadeIn(\"fast\");\n        this.trigger(\"show\");\n    },\n\n    /** Hide panel */\n    hide: function hide() {\n        if (!this.event.type) {\n            this.visible = false;\n            this.$el.fadeOut(\"fast\", function () {\n                $(this).hide();\n            });\n            this.trigger(\"hide\");\n        }\n    },\n\n    /** Returns the number of frames */\n    length: function length() {\n        return this.frame_counter;\n    },\n\n    /*\n        EVENT HANDLING\n    */\n    events: {\n        // global frame events\n        mousemove: \"_eventFrameMouseMove\",\n        mouseup: \"_eventFrameMouseUp\",\n        mouseleave: \"_eventFrameMouseUp\",\n        mousewheel: \"_eventPanelScroll\",\n        DOMMouseScroll: \"_eventPanelScroll\",\n\n        // events fixed to elements\n        \"mousedown .frame\": \"_eventFrameMouseDown\",\n        \"mousedown .frame-background\": \"_eventHide\",\n        \"mousedown .frame-scroll-up\": \"_eventPanelScroll_up\",\n        \"mousedown .frame-scroll-down\": \"_eventPanelScroll_down\",\n        \"mousedown .f-close\": \"_eventFrameClose\"\n    },\n\n    /** Start drag/resize event */\n    _eventFrameMouseDown: function _eventFrameMouseDown(e) {\n        $(\".tooltip\").hide();\n        if (!this.event.type) {\n            if ($(e.target).hasClass(\"f-header\") || $(e.target).hasClass(\"f-title\")) {\n                this.event.type = \"drag\";\n            }\n            if ($(e.target).hasClass(\"f-resize\")) {\n                this.event.type = \"resize\";\n            }\n            if (this.event.type) {\n                e.preventDefault();\n                this.event.target = this._frameIdentify(e.target);\n                this.event.xy = {\n                    x: e.originalEvent.pageX,\n                    y: e.originalEvent.pageY\n                };\n                this._frameDragStart(this.event.target);\n            }\n        }\n    },\n\n    /** Processes drag/resize events */\n    _eventFrameMouseMove: function _eventFrameMouseMove(e) {\n        if (this.event.type) {\n            // get mouse motion and delta\n            var event_xy_new = {\n                x: e.originalEvent.pageX,\n                y: e.originalEvent.pageY\n            };\n            var event_xy_delta = {\n                x: event_xy_new.x - this.event.xy.x,\n                y: event_xy_new.y - this.event.xy.y\n            };\n            this.event.xy = event_xy_new;\n\n            // get current screen position and size of frame\n            var p = this._frameScreen(this.event.target);\n\n            // drag/resize event\n            if (this.event.type == \"resize\") {\n                p.width += event_xy_delta.x;\n                p.height += event_xy_delta.y;\n                var min_dim = this.options.cell - this.options.margin - 1;\n                p.width = Math.max(p.width, min_dim);\n                p.height = Math.max(p.height, min_dim);\n                this._frameResize(this.event.target, p);\n                p.width = this._toGridCoord(\"width\", p.width) + 1;\n                p.height = this._toGridCoord(\"height\", p.height) + 1;\n                p.width = this._toPixelCoord(\"width\", p.width);\n                p.height = this._toPixelCoord(\"height\", p.height);\n                this._frameResize(this.frame_shadow, p);\n                this._frameInsert(this.frame_shadow, {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                });\n            } else if (this.event.type == \"drag\") {\n                p.left += event_xy_delta.x;\n                p.top += event_xy_delta.y;\n                this._frameOffset(this.event.target, p);\n                var l = {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                };\n                l.left !== 0 && l.left++;\n                this._frameInsert(this.frame_shadow, l);\n            }\n        }\n    },\n\n    /** Stop drag/resize events */\n    _eventFrameMouseUp: function _eventFrameMouseUp(e) {\n        if (this.event.type) {\n            this._frameDragStop(this.event.target);\n            this.event.type = null;\n        }\n    },\n\n    /** Destroy a frame */\n    _eventFrameClose: function _eventFrameClose(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this.del(this._frameIdentify(e.target));\n        }\n    },\n\n    /** Hide all frames */\n    _eventHide: function _eventHide(e) {\n        !this.event.type && this.hide();\n    },\n\n    /** Fired when scrolling occurs on panel */\n    _eventPanelScroll: function _eventPanelScroll(e) {\n        if (!this.event.type && this.visible) {\n            // Stop propagation if scrolling is happening inside a frame.\n            // TODO: could propagate scrolling if at top/bottom of frame.\n            var frames = $(e.srcElement).parents(\".frame\");\n            if (frames.length !== 0) {\n                e.stopPropagation();\n            } else {\n                e.preventDefault();\n                this._panelScroll(e.originalEvent.detail ? e.originalEvent.detail : e.originalEvent.wheelDelta / -3);\n            }\n        }\n    },\n\n    /** Handle scroll up event */\n    _eventPanelScroll_up: function _eventPanelScroll_up(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(-this.options.scroll);\n        }\n    },\n\n    /** Handle scroll down */\n    _eventPanelScroll_down: function _eventPanelScroll_down(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(this.options.scroll);\n        }\n    },\n\n    /*\n        FRAME EVENTS SUPPORT\n    */\n\n    /** Identify the target frame */\n    _frameIdentify: function _frameIdentify(target) {\n        return this.frame_list[\"#\" + $(target).closest(\".frame\").attr(\"id\")];\n    },\n\n    /** Provides drag support */\n    _frameDragStart: function _frameDragStart(frame) {\n        this._frameFocus(frame, true);\n        var p = this._frameScreen(frame);\n        this._frameResize(this.frame_shadow, p);\n        this._frameGrid(this.frame_shadow, frame.grid_location);\n        frame.grid_location = null;\n        this.frame_shadow.$el.show();\n        $(\".f-cover\").show();\n    },\n\n    /** Removes drag support */\n    _frameDragStop: function _frameDragStop(frame) {\n        this._frameFocus(frame, false);\n        var p = this._frameScreen(this.frame_shadow);\n        this._frameResize(frame, p);\n        this._frameGrid(frame, this.frame_shadow.grid_location, true);\n        this.frame_shadow.grid_location = null;\n        this.frame_shadow.$el.hide();\n        $(\".f-cover\").hide();\n        this._panelAnimationComplete();\n    },\n\n    /*\n        GRID/PIXEL CONVERTER\n    */\n\n    /** Converts a pixel to a grid dimension */\n    _toGridCoord: function _toGridCoord(type, px) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        type == \"top\" && (px -= this.top);\n        return parseInt((px + sign * this.options.margin) / this.options.cell, 10);\n    },\n\n    /** Converts a grid to a pixels dimension */\n    _toPixelCoord: function _toPixelCoord(type, g) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        var px = g * this.options.cell - sign * this.options.margin;\n        type == \"top\" && (px += this.top);\n        return px;\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toGrid: function _toGrid(px) {\n        return {\n            top: this._toGridCoord(\"top\", px.top),\n            left: this._toGridCoord(\"left\", px.left),\n            width: this._toGridCoord(\"width\", px.width),\n            height: this._toGridCoord(\"height\", px.height)\n        };\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toPixel: function _toPixel(g) {\n        return {\n            top: this._toPixelCoord(\"top\", g.top),\n            left: this._toPixelCoord(\"left\", g.left),\n            width: this._toPixelCoord(\"width\", g.width),\n            height: this._toPixelCoord(\"height\", g.height)\n        };\n    },\n\n    /* \n        COLLISION DETECTION\n    */\n\n    /** Check collisions for a grid coordinate set */\n    _isCollision: function _isCollision(g) {\n        function is_collision_pair(a, b) {\n            return !(a.left > b.left + b.width - 1 || a.left + a.width - 1 < b.left || a.top > b.top + b.height - 1 || a.top + a.height - 1 < b.top);\n        }\n        for (var i in this.frame_list) {\n            var frame = this.frame_list[i];\n            if (frame.grid_location !== null && is_collision_pair(g, frame.grid_location)) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** Return location/grid rank */\n    _locationRank: function _locationRank(loc) {\n        return loc.top * this.cols + loc.left;\n    },\n\n    /*\n        PANEL/WINDOW FUNCTIONS\n    */\n\n    /** Refresh panel */\n    _panelRefresh: function _panelRefresh(animate) {\n        this.cols = parseInt($(window).width() / this.options.cell, 10) + 1;\n        this._frameInsert(null, null, animate);\n    },\n\n    /** Complete panel animation / frames not moving */\n    _panelAnimationComplete: function _panelAnimationComplete() {\n        var self = this;\n        $(\".frame\").promise().done(function () {\n            self._panelScroll(0, true);\n        });\n    },\n\n    /** Scroll panel */\n    _panelScroll: function _panelScroll(delta, animate) {\n        var top_new = this.top - this.options.scroll * delta;\n        top_new = Math.max(top_new, this.top_max);\n        top_new = Math.min(top_new, this.options.top_min);\n        if (this.top != top_new) {\n            for (var i in this.frame_list) {\n                var frame = this.frame_list[i];\n                if (frame.grid_location !== null) {\n                    var screen_location = {\n                        top: frame.screen_location.top - (this.top - top_new),\n                        left: frame.screen_location.left\n                    };\n                    this._frameOffset(frame, screen_location, animate);\n                }\n            }\n            this.top = top_new;\n        }\n        this.render();\n    },\n\n    /*\n        FRAME FUNCTIONS\n    */\n\n    /** Initialize a new frame */\n    _frameInit: function _frameInit(frame, id) {\n        frame.id = id;\n        frame.screen_location = {};\n        frame.grid_location = {};\n        frame.grid_rank = null;\n        frame.$el.attr(\"id\", id.substring(1));\n    },\n\n    /** Insert frame at given location */\n    _frameInsert: function _frameInsert(frame, new_loc, animate) {\n        var self = this;\n        var place_list = [];\n        if (frame) {\n            frame.grid_location = null;\n            place_list.push([frame, this._locationRank(new_loc)]);\n        }\n        _.each(this.frame_list, function (f) {\n            if (f.grid_location !== null) {\n                f.grid_location = null;\n                place_list.push([f, f.grid_rank]);\n            }\n        });\n        place_list.sort(function (a, b) {\n            return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0;\n        });\n        _.each(place_list, function (place) {\n            self._framePlace(place[0], animate);\n        });\n        this.top_max = 0;\n        _.each(this.frame_list, function (f) {\n            if (f.grid_location !== null) {\n                self.top_max = Math.max(self.top_max, f.grid_location.top + f.grid_location.height);\n            }\n        });\n        this.top_max = $(window).height() - this.top_max * this.options.cell - 2 * this.options.margin;\n        this.top_max = Math.min(this.top_max, this.options.top_min);\n        this.render();\n    },\n\n    /** Naive frame placement */\n    _framePlace: function _framePlace(frame, animate) {\n        frame.grid_location = null;\n        var g = this._toGrid(this._frameScreen(frame));\n        var done = false;\n        for (var i = 0; i < this.options.rows; i++) {\n            for (var j = 0; j < Math.max(1, this.cols - g.width); j++) {\n                g.top = i;\n                g.left = j;\n                if (!this._isCollision(g)) {\n                    done = true;\n                    break;\n                }\n            }\n            if (done) {\n                break;\n            }\n        }\n        if (done) {\n            this._frameGrid(frame, g, animate);\n        } else {\n            console.log(\"Grid dimensions exceeded.\");\n        }\n    },\n\n    /** Handle frame focussing */\n    _frameFocus: function _frameFocus(frame, has_focus) {\n        frame.$el.css(\"z-index\", this.frame_z + (has_focus ? 1 : 0));\n    },\n\n    /** New left/top position frame */\n    _frameOffset: function _frameOffset(frame, p, animate) {\n        frame.screen_location.left = p.left;\n        frame.screen_location.top = p.top;\n        if (animate) {\n            this._frameFocus(frame, true);\n            var self = this;\n            frame.$el.animate({ top: p.top, left: p.left }, \"fast\", function () {\n                self._frameFocus(frame, false);\n            });\n        } else {\n            frame.$el.css({ top: p.top, left: p.left });\n        }\n    },\n\n    /** Resize frame */\n    _frameResize: function _frameResize(frame, p) {\n        frame.$el.css({ width: p.width, height: p.height });\n        frame.screen_location.width = p.width;\n        frame.screen_location.height = p.height;\n    },\n\n    /** Push frame to new grid location */\n    _frameGrid: function _frameGrid(frame, l, animate) {\n        frame.grid_location = l;\n        this._frameOffset(frame, this._toPixel(l), animate);\n        frame.grid_rank = this._locationRank(l);\n    },\n\n    /** Get frame dimensions */\n    _frameScreen: function _frameScreen(frame) {\n        var p = frame.screen_location;\n        return {\n            top: p.top,\n            left: p.left,\n            width: p.width,\n            height: p.height\n        };\n    }\n});\n\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 18:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//=============================================================================\n/**\n * backbone model for icon buttons\n */\nvar IconButton = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        icon_class: \"\",\n        on_click: null,\n        menu_options: null,\n        is_menu_button: true,\n        id: null,\n        href: null,\n        target: null,\n        enabled: true,\n        visible: true,\n        tooltip_config: {}\n    }\n});\n\n/**\n *  backbone view for icon buttons\n */\nvar IconButtonView = Backbone.View.extend({\n    initialize: function initialize() {\n        // better rendering this way\n        this.model.attributes.tooltip_config = { placement: \"bottom\" };\n        this.model.bind(\"change\", this.render, this);\n    },\n\n    render: function render() {\n        // hide tooltip\n        this.$el.tooltip(\"hide\");\n\n        var new_elem = this.template(this.model.toJSON());\n        // configure tooltip\n        new_elem.tooltip(this.model.get(\"tooltip_config\"));\n        this.$el.replaceWith(new_elem);\n        this.setElement(new_elem);\n        return this;\n    },\n\n    events: {\n        click: \"click\"\n    },\n\n    click: function click(event) {\n        // if on_click pass to that function\n        if (_.isFunction(this.model.get(\"on_click\"))) {\n            this.model.get(\"on_click\")(event);\n            return false;\n        }\n        // otherwise, bubble up ( to href or whatever )\n        return true;\n    },\n\n    // generate html element\n    template: function template(options) {\n        var buffer = \"title=\\\"\" + options.title + \"\\\" class=\\\"icon-button\";\n\n        if (options.is_menu_button) {\n            buffer += \" menu-button\";\n        }\n\n        buffer += \" \" + options.icon_class;\n\n        if (!options.enabled) {\n            buffer += \"_disabled\";\n        }\n\n        // close class tag\n        buffer += '\"';\n\n        if (options.id) {\n            buffer += \" id=\\\"\" + options.id + \"\\\"\";\n        }\n\n        buffer += \" href=\\\"\" + options.href + \"\\\"\";\n        // add target for href\n        if (options.target) {\n            buffer += \" target=\\\"\" + options.target + \"\\\"\";\n        }\n        // set visibility\n        if (!options.visible) {\n            buffer += ' style=\"display: none;\"';\n        }\n\n        // enabled/disabled\n        if (options.enabled) {\n            buffer = \"<a \" + buffer + \"/>\";\n        } else {\n            buffer = \"<span \" + buffer + \"/>\";\n        }\n\n        // return element\n        return $(buffer);\n    }\n});\n\n// define collection\nvar IconButtonCollection = Backbone.Collection.extend({\n    model: IconButton\n});\n\n/**\n * menu with multiple icon buttons\n * views are not needed nor used for individual buttons\n */\nvar IconButtonMenuView = Backbone.View.extend({\n    tagName: \"div\",\n\n    initialize: function initialize() {\n        this.render();\n    },\n\n    render: function render() {\n        // initialize icon buttons\n        var self = this;\n        this.collection.each(function (button) {\n            // create and add icon button to menu\n            var elt = $(\"<a/>\").attr(\"href\", \"javascript:void(0)\").attr(\"title\", button.attributes.title).addClass(\"icon-button menu-button\").addClass(button.attributes.icon_class).appendTo(self.$el).click(button.attributes.on_click);\n\n            // configure tooltip\n            if (button.attributes.tooltip_config) {\n                elt.tooltip(button.attributes.tooltip_config);\n            }\n\n            // add popup menu to icon\n            var menu_options = button.get(\"options\");\n            if (menu_options) {\n                make_popupmenu(elt, menu_options);\n            }\n        });\n\n        // return\n        return this;\n    }\n});\n\n/**\n * Returns an IconButtonMenuView for the provided configuration.\n * Configuration is a list of dictionaries where each dictionary\n * defines an icon button. Each dictionary must have the following\n * elements: icon_class, title, and on_click.\n */\nvar create_icon_buttons_menu = function create_icon_buttons_menu(config, global_config) {\n    // initialize global configuration\n    if (!global_config) global_config = {};\n\n    // create and initialize menu\n    var buttons = new IconButtonCollection(_.map(config, function (button_config) {\n        return new IconButton(_.extend(button_config, global_config));\n    }));\n\n    // return menu\n    return new IconButtonMenuView({ collection: buttons });\n};\n\n//=============================================================================\nexports.default = {\n    IconButton: IconButton,\n    IconButtonView: IconButtonView,\n    IconButtonCollection: IconButtonCollection,\n    IconButtonMenuView: IconButtonMenuView,\n    create_icon_buttons_menu: create_icon_buttons_menu\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//==============================================================================\nvar LOGGING_FNS = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"];\n/** adds logging functions to an obj.prototype (or obj directly) adding a namespace for filtering\n *  @param {Object} obj\n *  @param {String} namespace\n */\nfunction addLogging(obj, namespace) {\n    var addTo = obj.prototype !== undefined ? obj.prototype : obj;\n    if (namespace !== undefined) {\n        addTo._logNamespace = namespace;\n    }\n    //yagni?: without this, may not capture Galaxy.config.debug and add Galaxy.logger properly\n    // if( window.Galaxy && window.Galaxy.config && window.Galaxy.config.debug ){\n    //     addTo.logger = window.Galaxy.logger;\n    // }\n\n    // give the object each\n    LOGGING_FNS.forEach(function (logFn) {\n        addTo[logFn] = function () {\n            if (!this.logger) {\n                return undefined;\n            }\n            if (this.logger.emit) {\n                return this.logger.emit(logFn, this._logNamespace, arguments);\n            }\n            if (this.logger[logFn]) {\n                //TODO:! there has to be a way to get the lineno/file into this\n                // http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n                // http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n                return this.logger[logFn].apply(this.logger, arguments);\n            }\n            return undefined;\n        };\n    });\n    return obj;\n}\n\n//==============================================================================\nexports.default = addLogging;\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n    //TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function initialize($button, options) {\n        // default settings\n        this.$button = $button;\n        if (!this.$button.length) {\n            this.$button = $(\"<div/>\");\n        }\n        this.options = options || [];\n        this.$button.data(\"popupmenu\", this);\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click(function (event) {\n            // if there's already a menu open, remove it\n            $(\".popmenu-wrapper\").remove();\n            menu._renderAndShow(event);\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function _renderAndShow(clickEvent) {\n        this.render();\n        this.$el.appendTo(\"body\").css(this._getShownPosition(clickEvent)).show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function render() {\n        // render the menu body absolute and hidden, fill with template\n        this.$el.addClass(\"popmenu-wrapper\").hide().css({ position: \"absolute\" }).html(this.template(this.$button.attr(\"id\"), this.options));\n\n        // set up behavior on each link/anchor elem\n        if (this.options.length) {\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find(\"li\").each(function (i, li) {\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if (option.func) {\n                    $(this).children(\"a.popupmenu-option\").click(function (event) {\n                        option.func.call(menu, event, option);\n                        // We must preventDefault otherwise clicking \"cancel\"\n                        // on a purge or something still navigates and causes\n                        // the action.\n                        event.preventDefault();\n                        // bubble up so that an option click will call the close behavior\n                    });\n                }\n            });\n        }\n        return this;\n    },\n\n    template: function template(id, options) {\n        return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), \"</ul>\"].join(\"\");\n    },\n\n    _templateOptions: function _templateOptions(options) {\n        if (!options.length) {\n            return \"<li>(no options)</li>\";\n        }\n        return _.map(options, function (option) {\n            if (option.divider) {\n                return '<li class=\"divider\"></li>';\n            } else if (option.header) {\n                return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, \"</a></li>\"].join(\"\");\n            }\n            var href = option.href || \"javascript:void(0);\";\n            var target = option.target ? \" target=\\\"\" + option.target + \"\\\"\" : \"\";\n\n            var check = option.checked ? '<span class=\"fa fa-check\"></span>' : \"\";\n\n            return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, \">\", check, option.html, \"</a></li>\"].join(\"\");\n        }).join(\"\");\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition: function _getShownPosition(clickEvent) {\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n        x = Math.max(x, $(document).scrollLeft() + 5);\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function _setUpCloseBehavior() {\n        var menu = this;\n        //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup(event) {\n            $(document).off(\"click.close_popup\");\n            if (window && window.parent !== window) {\n                try {\n                    $(window.parent.document).off(\"click.close_popup\");\n                } catch (err) {}\n            } else {\n                try {\n                    $(\"iframe#galaxy_main\").contents().off(\"click.close_popup\");\n                } catch (err) {}\n            }\n            menu.remove();\n        }\n\n        $(\"html\").one(\"click.close_popup\", closePopup);\n        if (window && window.parent !== window) {\n            try {\n                $(window.parent.document).find(\"html\").one(\"click.close_popup\", closePopup);\n            } catch (err) {}\n        } else {\n            try {\n                $(\"iframe#galaxy_main\").contents().one(\"click.close_popup\", closePopup);\n            } catch (err) {}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function addItem(item, index) {\n        // append to end if no index\n        index = index >= 0 ? index : this.options.length;\n        this.options.splice(index, 0, item);\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function removeItem(index) {\n        if (index >= 0) {\n            this.options.splice(index, 1);\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function findIndexByHtml(html) {\n        for (var i = 0; i < this.options.length; i++) {\n            if (_.has(this.options[i], \"html\") && this.options[i].html === html) {\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function findItemByHtml(html) {\n        return this.options[this.findIndexByHtml(html)];\n    },\n\n    // string representation\n    toString: function toString() {\n        return \"PopupMenu\";\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create($button, options) {\n    return new PopupMenu($button, options);\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = function (button_element, initial_options) {\n    var convertedOptions = [];\n    _.each(initial_options, function (optionVal, optionKey) {\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if (optionVal === null) {\n            // !optionVal? (null only?)\n            newOption.header = true;\n\n            // keys with function values indicate: a menu option\n        } else if (jQuery.type(optionVal) === \"function\") {\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push(newOption);\n    });\n    return new PopupMenu($(button_element), convertedOptions);\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = function ($parent, selector) {\n    $parent = $($parent);\n    selector = selector || \"a\";\n    var options = [];\n    $parent.find(selector).each(function (elem, i) {\n        var option = {};\n        var $link = $(elem);\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if ($link.attr(\"href\")) {\n            var linkHref = $link.attr(\"href\");\n            var linkTarget = $link.attr(\"target\");\n            var confirmText = $link.attr(\"confirm\");\n\n            option.func = function () {\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if (confirmText && !confirm(confirmText)) {\n                    return;\n                }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch (linkTarget) {\n                    // relocate the center panel\n                    case \"_parent\":\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case \"_top\":\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push(option);\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n    $buttonElement = $($buttonElement);\n    $menuElement = $($menuElement);\n    var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu($buttonElement, options);\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || \"div[popupmenu]\";\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n        return \"#\" + $menuElement.attr(\"popupmenu\");\n    };\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $(parent).find(menuSelector).each(function () {\n        var $menuElement = $(this);\n\n        var $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n\n        popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n        $buttonElement.addClass(\"popup\");\n    });\n    return popupMenusCreated;\n};\n\n// =============================================================================\nexports.default = PopupMenu;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 21:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.collection = new Backbone.Collection();\n        this.model = options && options.model || new Backbone.Model({\n            onchange: null,\n            visible: true\n        }).set(options);\n        this.setElement($(this._template()));\n        this.$nav = this.$(\".tab-navigation\");\n        this.$content = this.$(\".tab-content\");\n        this.$el.on(\"click\", function () {\n            $(\".tooltip\").hide();\n        });\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.listenTo(this.collection, \"add\", this._add, this);\n        this.listenTo(this.collection, \"remove\", this._remove, this);\n        this.listenTo(this.collection, \"change\", this._change, this);\n        this.listenTo(this.collection, \"reset\", this._reset, this);\n        this.listenTo(this.collection, \"add remove reset\", this.render, this);\n    },\n\n    render: function render() {\n        var id = this.model.get(\"current\");\n        id = this.$(\"#\" + id).length > 0 ? id : this.first();\n        if (id) {\n            this.$nav.children().removeClass(\"active\");\n            this.$content.children().removeClass(\"active\");\n            this.$(\"#tab-\" + id).addClass(\"active\");\n            this.$(\"#\" + id).addClass(\"active\");\n        }\n        this.$el[this.model.get(\"visible\") ? \"fadeIn\" : \"fadeOut\"](\"fast\");\n        this.$nav[this.size() > 1 ? \"show\" : \"hide\"]();\n    },\n\n    /** Returns tab id for currently shown tab */\n    current: function current() {\n        return this.model.get(\"current\");\n    },\n\n    /** Show tab view and highlight a tab by id */\n    show: function show(id) {\n        if (id) {\n            this.model.set({ current: id, visible: true });\n            this.model.get(\"onchange\") && this.model.get(\"onchange\")(id);\n        }\n    },\n\n    /** Hide tab view */\n    hide: function hide() {\n        this.model.set(\"visible\", false);\n    },\n\n    /** Returns first tab */\n    first: function first() {\n        var model = this.collection.first();\n        return model && model.id;\n    },\n\n    /** Returns current number of tabs */\n    size: function size() {\n        return this.collection.length;\n    },\n\n    /** Adds a new tab */\n    add: function add(options) {\n        this.collection.add(options);\n    },\n\n    /** Delete tab */\n    del: function del(id) {\n        this.collection.remove(id);\n    },\n\n    /** Delete all tabs */\n    delAll: function delAll() {\n        this.collection.reset();\n    },\n\n    /** Show tab */\n    showTab: function showTab(id) {\n        this.collection.get(id).set(\"hidden\", false);\n    },\n\n    /** Hide tab */\n    hideTab: function hideTab(id) {\n        this.collection.get(id).set(\"hidden\", true);\n    },\n\n    /** Adds a new tab */\n    _add: function _add(tab_model) {\n        var self = this;\n        var options = tab_model.attributes;\n        this.$content.append($(\"<div/>\").attr(\"id\", options.id).addClass(\"tab-pane\").append(options.$el));\n        this.$nav.append($(this._template_tab(options)).show().tooltip({\n            title: options.tooltip,\n            placement: \"bottom\",\n            container: self.$el\n        }).on(\"click\", function (e) {\n            e.preventDefault();\n            self.show(options.id);\n        }));\n        if (this.size() == 1) {\n            this.show(options.id);\n        }\n    },\n\n    /** Delete tab */\n    _remove: function _remove(tab_model) {\n        this.$(\"#tab-\" + tab_model.id).remove();\n        this.$(\"#\" + tab_model.id).remove();\n    },\n\n    /** Reset collection */\n    _reset: function _reset() {\n        this.$nav.empty();\n        this.$content.empty();\n    },\n\n    /** Change tab */\n    _change: function _change(tab_model) {\n        this.$(\"#tab-\" + tab_model.id)[tab_model.get(\"hidden\") ? \"hide\" : \"show\"]();\n    },\n\n    /** Main template */\n    _template: function _template() {\n        return $(\"<div/>\").addClass(\"ui-tabs tabbable tabs-left\").append($(\"<ul/>\").addClass(\"tab-navigation nav nav-tabs\")).append($(\"<div/>\").addClass(\"tab-content\"));\n    },\n\n    /** Tab template */\n    _template_tab: function _template_tab(options) {\n        var $tmpl = $(\"<li/>\").addClass(\"tab-element\").attr(\"id\", \"tab-\" + options.id).append($(\"<a/>\").attr(\"id\", \"tab-title-link-\" + options.id));\n        var $href = $tmpl.find(\"a\");\n        options.icon && $href.append($(\"<i/>\").addClass(\"tab-icon fa\").addClass(options.icon));\n        $href.append($(\"<span/>\").attr(\"id\", \"tab-title-text-\" + options.id).addClass(\"tab-title-text\").append(options.title));\n        return $tmpl;\n    }\n}); /**\n     *  Renders tabs e.g. used in the charts editor, behaves similar to repeat and section rendering\n     */\nexports.default = { View: View };\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 24:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _backbone = __webpack_require__(2);\n\nvar Backbone = _interopRequireWildcard(_backbone);\n\nvar _baseMvc = __webpack_require__(5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\nvar User = Backbone.Model.extend(_baseMvc2.default.LoggableMixin).extend(\n/** @lends User.prototype */{\n    _logNamespace: logNamespace,\n\n    /** API location for this resource */\n    urlRoot: function urlRoot() {\n        return Galaxy.root + \"api/users\";\n    },\n\n    /** Model defaults\n     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n     */\n    defaults: /** @lends User.prototype */{\n        id: null,\n        username: \"(\" + (0, _localization2.default)(\"anonymous user\") + \")\",\n        email: \"\",\n        total_disk_usage: 0,\n        nice_total_disk_usage: \"\",\n        quota_percent: null,\n        is_admin: false\n    },\n\n    /** Set up and bind events\n     *  @param {Object} data Initial model data.\n     */\n    initialize: function initialize(data) {\n        this.log(\"User.initialize:\", data);\n\n        this.on(\"loaded\", function (model, resp) {\n            this.log(this + \" has loaded:\", model, resp);\n        });\n        this.on(\"change\", function (model, data) {\n            this.log(this + \" has changed:\", model, data.changes);\n        });\n    },\n\n    isAnonymous: function isAnonymous() {\n        return !this.get(\"email\");\n    },\n\n    isAdmin: function isAdmin() {\n        return this.get(\"is_admin\");\n    },\n\n    /** Load a user with the API using an id.\n     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n     *      (e.g. 'current') and the API will return the current transaction's user data.\n     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n     */\n    loadFromApi: function loadFromApi(idOrCurrent, options) {\n        idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n        options = options || {};\n        var model = this;\n        var userFn = options.success;\n\n        /** @ignore */\n        options.success = function (newModel, response) {\n            model.trigger(\"loaded\", newModel, response);\n            if (userFn) {\n                userFn(newModel, response);\n            }\n        };\n\n        // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n        if (idOrCurrent === User.CURRENT_ID_STR) {\n            options.url = this.urlRoot + \"/\" + User.CURRENT_ID_STR;\n        }\n        return Backbone.Model.prototype.fetch.call(this, options);\n    },\n\n    /** Clears all data from the sessionStorage.\n     */\n    clearSessionStorage: function clearSessionStorage() {\n        for (var key in sessionStorage) {\n            //TODO: store these under the user key so we don't have to do this\n            // currently only history\n            if (key.indexOf(\"history:\") === 0) {\n                sessionStorage.removeItem(key);\n            } else if (key === \"history-panel\") {\n                sessionStorage.removeItem(key);\n            }\n        }\n    },\n\n    /** string representation */\n    toString: function toString() {\n        var userInfo = [this.get(\"username\")];\n        if (this.get(\"id\")) {\n            userInfo.unshift(this.get(\"id\"));\n            userInfo.push(this.get(\"email\"));\n        }\n        return \"User(\" + userInfo.join(\":\") + \")\";\n    }\n});\n\n// string to send to tell server to return this transaction's user (see api/users.py)\nUser.CURRENT_ID_STR = \"current\";\n\n// class method to load the current user via the api and return that model\nUser.getCurrentUserFromApi = function (options) {\n    var currentUser = new User();\n    currentUser.loadFromApi(User.CURRENT_ID_STR, options);\n    return currentUser;\n};\n\n// (stub) collection for users (shouldn't be common unless admin UI)\nvar UserCollection = Backbone.Collection.extend(_baseMvc2.default.LoggableMixin).extend({\n    model: User,\n    urlRoot: function urlRoot() {\n        return Galaxy.root + \"api/users\";\n    }\n    //logger  : console,\n});\n\n//==============================================================================\nexports.default = {\n    User: User\n};\n\n/***/ }),\n\n/***/ 25:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _util = __webpack_require__(10);\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _data = __webpack_require__(8);\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _toolForm = __webpack_require__(26);\n\nvar _toolForm2 = _interopRequireDefault(_toolForm);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Mixin for tracking model visibility.\n */\n/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function show() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function hide() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function toggle() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function is_visible() {\n        return !this.attributes.hidden;\n    }\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function initialize(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function copy() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function set_value(value) {\n        this.set(\"value\", value || \"\");\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function set_value(value) {\n        this.set(\"value\", parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function get_samples() {\n        return d3.scale.linear().domain([this.get(\"min\"), this.get(\"max\")]).ticks(this.get(\"num_samples\"));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function set_value(value) {\n        this.set(\"value\", parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function get_samples() {\n        return _.map(this.get(\"options\"), function (option) {\n            return option[0];\n        });\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    integer: IntegerToolParameter,\n    float: FloatToolParameter,\n    data: DataToolParameter,\n    select: SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function initialize(options) {\n        // Set parameters.\n        this.set(\"inputs\", new ToolParameterCollection(_.map(options.inputs, function (p) {\n            var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n            return new p_class(p);\n        })));\n    },\n\n    /**\n     *\n     */\n    toJSON: function toJSON() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get(\"inputs\").map(function (i) {\n            return i.toJSON();\n        });\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function remove_inputs(types) {\n        var tool = this;\n\n        var incompatible_inputs = tool.get(\"inputs\").filter(function (input) {\n            return types.indexOf(input.get(\"type\")) !== -1;\n        });\n\n        tool.get(\"inputs\").remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function copy(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get(\"inputs\").each(function (input) {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set(\"inputs\", valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function apply_search_results(results) {\n        _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide();\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function set_input_value(name, value) {\n        this.get(\"inputs\").find(function (input) {\n            return input.get(\"name\") === name;\n        }).set(\"value\", value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function set_input_values(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), function (input_name) {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function run() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function rerun(target_dataset, regions) {\n        return this._run({\n            action: \"rerun\",\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function get_inputs_dict() {\n        var input_dict = {};\n        this.get(\"inputs\").each(function (input) {\n            input_dict[input.get(\"name\")] = input.get(\"value\");\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function _run(additional_params) {\n        // Create payload.\n        var payload = _.extend({\n            tool_id: this.id,\n            inputs: this.get_inputs_dict()\n        }, additional_params);\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred();\n\n        var ss_deferred = new _util2.default.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function success_fn(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(function (result) {\n            run_deferred.resolve(new _data2.default.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function clear_search_results() {\n        _.each(this.attributes.elems, function (elt) {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function apply_search_results(results) {\n        var all_hidden = true;\n        var cur_label;\n        _.each(this.attributes.elems, function (elt) {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            } else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        } else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function initialize() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function do_search() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(function () {\n            // log the search to analytics if present\n            if (typeof ga !== \"undefined\") {\n                ga(\"send\", \"pageview\", Galaxy.root + \"?q=\" + q);\n            }\n            $.get(self.urlRoot, { q: q }, function (data) {\n                self.set(\"results\", data);\n                $(\"#search-spinner\").hide();\n                $(\"#search-clear-btn\").show();\n            }, \"json\");\n        }, 400);\n    },\n\n    clear_search: function clear_search() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n    initialize: function initialize(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection(this.parse(options.layout));\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function parse(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this;\n\n        var // Helper to recursively parse tool panel.\n        parse_elt = function parse_elt(elt_dict) {\n            var type = elt_dict.model_class;\n            // There are many types of tools; for now, anything that ends in 'Tool'\n            // is treated as a generic tool.\n            if (type.indexOf(\"Tool\") === type.length - 4) {\n                return self.attributes.tools.get(elt_dict.id);\n            } else if (type === \"ToolSection\") {\n                // Parse elements.\n                var elems = _.map(elt_dict.elems, parse_elt);\n                elt_dict.elems = elems;\n                return new ToolSection(elt_dict);\n            } else if (type === \"ToolSectionLabel\") {\n                return new ToolSectionLabel(elt_dict);\n            }\n        };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function clear_search_results() {\n        this.get(\"layout\").each(function (panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            } else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function apply_search_results() {\n        var results = this.get(\"tool_search\").get(\"results\");\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get(\"layout\").each(function (panel_elt) {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            } else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            } else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function initialize() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function update_visible() {\n        this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: \"div\",\n\n    render: function render() {\n        // create element\n        var $link = $(\"<div/>\");\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get(\"form_style\", null);\n        // open upload dialog for upload tool\n        if (this.model.id === \"upload1\") {\n            $link.find(\"a\").on(\"click\", function (e) {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        } else if (formStyle === \"regular\") {\n            // regular tools\n            var self = this;\n            $link.find(\"a\").on(\"click\", function (e) {\n                e.preventDefault();\n                Galaxy.router.push(\"/\", {\n                    tool_id: self.model.id,\n                    version: self.model.get(\"version\")\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolPanelLabel\",\n\n    render: function render() {\n        this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolSectionWrapper\",\n\n    initialize: function initialize() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function render() {\n        // Build using template.\n        this.$el.append(templates.panel_section(this.model.toJSON()));\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, function (elt) {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: elt,\n                    className: \"toolTitle\"\n                });\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            } else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: elt\n                });\n                label_view.render();\n                section_body.append(label_view.$el);\n            } else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        \"click .toolSectionTitle > a\": \"toggle\"\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function toggle() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function update_open() {\n        this.model.attributes.open ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\") : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: \"div\",\n    id: \"tool-search\",\n    className: \"bar\",\n\n    events: {\n        click: \"focus_and_select\",\n        \"keyup :input\": \"query_changed\",\n        \"change :input\": \"query_changed\",\n        \"click #search-clear-btn\": \"clear\"\n    },\n\n    render: function render() {\n        this.$el.append(templates.tool_search(this.model.toJSON()));\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\", \"95px\");\n        }\n\n        this.$el.find(\"[title]\").tooltip();\n        return this;\n    },\n\n    focus_and_select: function focus_and_select() {\n        this.$el.find(\":input\").focus().select();\n    },\n\n    clear: function clear() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val(\"\");\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function query_changed(evData) {\n        // check for the 'clear key' (ESC) first\n        if (this.model.attributes.clear_key && this.model.attributes.clear_key === evData.which) {\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"toolMenu\",\n\n    /**\n     * Set up view.\n     */\n    initialize: function initialize() {\n        this.model.get(\"tool_search\").on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function render() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView({\n            model: this.model.get(\"tool_search\")\n        });\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get(\"layout\").each(function (panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({\n                    model: panel_elt\n                });\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            } else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: panel_elt,\n                    className: \"toolTitleNoSection\"\n                });\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            } else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: panel_elt\n                });\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function (e) {\n            // Tool id is always the first class.\n            var tool_id = $(this).attr(\"class\").split(/\\s+/)[0];\n\n            var tool = self.model.get(\"tools\").get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function handle_search_results() {\n        var results = this.model.get(\"tool_search\").get(\"results\");\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        } else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: \"toolForm\",\n\n    render: function render() {\n        this.$el.children().remove();\n        this.$el.append(templates.tool_form(this.model.toJSON()));\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: \"toolMenuAndView\",\n\n    initialize: function initialize() {\n        this.tool_panel_view = new ToolPanelView({\n            collection: this.collection\n        });\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function render() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", function (e, tool) {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function show_tool(tool) {\n        var self = this;\n        tool.fetch().done(function () {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $(\"#left\").width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search: _.template(['<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ', 'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />', '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n    //TODO: replace with icon\n    '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'].join(\"\")),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section: _.template(['<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">', '<a href=\"javascript:void(0)\"><span><%- name %></span></a>', \"</div>\", '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">', '<div class=\"toolSectionBg\"></div>', \"<div>\"].join(\"\")),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link: _.template(['<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">', '<span class=\"labels\">', \"<% _.each( labels, function( label ){ %>\", '<span class=\"label label-default label-<%- label %>\">', \"<%- label %>\", \"</span>\", \"<% }); %>\", \"</span>\", '<span class=\"tool-old-link\">', \"<%- name %>\", \"</span>\", \" <%- description %>\", \"</a>\"].join(\"\")),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form: _.template(['<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>', '<div class=\"toolFormBody\">', \"<% _.each( tool.inputs, function( input ){ %>\", '<div class=\"form-row\">', '<label for=\"<%- input.name %>\"><%- input.label %>:</label>', '<div class=\"form-row-input\">', \"<%= input.html %>\", \"</div>\", '<div class=\"toolParamHelp\" style=\"clear: both;\">', \"<%- input.help %>\", \"</div>\", '<div style=\"clear: both;\"></div>', \"</div>\", \"<% }); %>\", \"</div>\", '<div class=\"form-row form-actions\">', '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />', \"</div>\", '<div class=\"toolHelp\">', '<div class=\"toolHelpBody\"><% tool.help %></div>', \"</div>\"\n    // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n    // which implies a leaky variable that I can't find\n    ].join(\"\"), { variable: \"tool\" })\n};\n\n// Exports\nexports.default = {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 26:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiMisc = __webpack_require__(6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _uiModal = __webpack_require__(7);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _toolFormBase = __webpack_require__(47);\n\nvar _toolFormBase2 = _interopRequireDefault(_toolFormBase);\n\nvar _webhooks = __webpack_require__(13);\n\nvar _webhooks2 = _interopRequireDefault(_webhooks);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new _uiModal2.default.View();\n        this.form = new _toolFormBase2.default(_utils2.default.merge({\n            listen_to_history: true,\n            always_refresh: false,\n            buildmodel: function buildmodel(process, form) {\n                var options = form.model.attributes;\n\n                // build request url\n                var build_url = \"\";\n                var build_data = {};\n                var job_id = options.job_id;\n                if (job_id) {\n                    build_url = Galaxy.root + \"api/jobs/\" + job_id + \"/build_for_rerun\";\n                } else {\n                    build_url = Galaxy.root + \"api/tools/\" + options.id + \"/build\";\n                    build_data = $.extend({}, Galaxy.params);\n                    build_data[\"tool_id\"] && delete build_data[\"tool_id\"];\n                }\n                options.version && (build_data[\"tool_version\"] = options.version);\n\n                // get initial model\n                _utils2.default.get({\n                    url: build_url,\n                    data: build_data,\n                    success: function success(data) {\n                        if (!data.display) {\n                            window.location = Galaxy.root;\n                            return;\n                        }\n                        form.model.set(data);\n                        self._customize(form);\n                        Galaxy.emit.debug(\"tool-form-base::_buildModel()\", \"Initial tool model ready.\", data);\n                        process.resolve();\n                    },\n                    error: function error(response, status) {\n                        var error_message = response && response.err_msg || \"Uncaught error.\";\n                        if (status == 401) {\n                            window.location = Galaxy.root + \"user/login?\" + $.param({\n                                redirect: Galaxy.root + \"?tool_id=\" + options.id\n                            });\n                        } else if (form.$el.is(\":empty\")) {\n                            form.$el.prepend(new _uiMisc2.default.Message({\n                                message: error_message,\n                                status: \"danger\",\n                                persistent: true,\n                                large: true\n                            }).$el);\n                        } else {\n                            Galaxy.modal && Galaxy.modal.show({\n                                title: \"Tool request failed\",\n                                body: error_message,\n                                buttons: {\n                                    Close: function Close() {\n                                        Galaxy.modal.hide();\n                                    }\n                                }\n                            });\n                        }\n                        Galaxy.emit.debug(\"tool-form-base::_buildModel()\", \"Initial tool model request failed.\", response);\n                        process.reject();\n                    }\n                });\n            },\n            postchange: function postchange(process, form) {\n                var current_state = {\n                    tool_id: form.model.get(\"id\"),\n                    tool_version: form.model.get(\"version\"),\n                    inputs: $.extend(true, {}, form.data.create())\n                };\n                form.wait(true);\n                Galaxy.emit.debug(\"tool-form::postchange()\", \"Sending current state.\", current_state);\n                _utils2.default.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/tools/\" + form.model.get(\"id\") + \"/build\",\n                    data: current_state,\n                    success: function success(data) {\n                        form.update(data);\n                        form.wait(false);\n                        Galaxy.emit.debug(\"tool-form::postchange()\", \"Received new model.\", data);\n                        process.resolve();\n                    },\n                    error: function error(response) {\n                        Galaxy.emit.debug(\"tool-form::postchange()\", \"Refresh request failed.\", response);\n                        process.reject();\n                    }\n                });\n            }\n        }, options));\n        this.deferred = this.form.deferred;\n        this.setElement(\"<div/>\");\n        this.$el.append(this.form.$el);\n    },\n\n    _customize: function _customize(form) {\n        var self = this;\n        var options = form.model.attributes;\n        // build execute button\n        var execute_button = new _uiMisc2.default.Button({\n            icon: \"fa-check\",\n            tooltip: \"Execute: \" + options.name + \" (\" + options.version + \")\",\n            title: \"Execute\",\n            cls: \"btn btn-primary ui-clear-float\",\n            wait_cls: \"btn btn-info ui-clear-float\",\n            onclick: function onclick() {\n                execute_button.wait();\n                form.portlet.disable();\n                self.submit(options, function () {\n                    execute_button.unwait();\n                    form.portlet.enable();\n                });\n            }\n        });\n        options.buttons = { execute: execute_button };\n\n        // remap feature\n        if (options.job_id && options.job_remap) {\n            options.inputs.push({\n                label: \"Resume dependencies from this job\",\n                name: \"rerun_remap_job_id\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                help: \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n            });\n        }\n    },\n\n    /** Submit a regular job.\n     * @param{dict}     options   - Specifies tool id and version\n     * @param{function} callback  - Called when request has completed\n     */\n    submit: function submit(options, callback) {\n        var self = this;\n        var job_def = {\n            tool_id: options.id,\n            tool_version: options.version,\n            inputs: this.form.data.create()\n        };\n        this.form.trigger(\"reset\");\n        if (!self.validate(job_def)) {\n            Galaxy.emit.debug(\"tool-form::submit()\", \"Submission canceled. Validation failed.\");\n            callback && callback();\n            return;\n        }\n        if (options.action !== Galaxy.root + \"tool_runner/index\") {\n            var $f = $(\"<form/>\").attr({\n                action: options.action,\n                method: options.method,\n                enctype: options.enctype\n            });\n            _.each(job_def.inputs, function (value, key) {\n                $f.append($(\"<input/>\").attr({ name: key, value: value }));\n            });\n            $f.hide().appendTo(\"body\").submit().remove();\n            callback && callback();\n            return;\n        }\n        Galaxy.emit.debug(\"tool-form::submit()\", \"Validation complete.\", job_def);\n        _utils2.default.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/tools\",\n            data: job_def,\n            success: function success(response) {\n                callback && callback();\n                self.$el.children().hide();\n                self.$el.append(self._templateSuccess(response));\n                // Show Webhook if job is running\n                if (response.jobs && response.jobs.length > 0) {\n                    self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                    var WebhookApp = new _webhooks2.default.WebhookView({\n                        urlRoot: Galaxy.root + \"api/webhooks/tool\",\n                        toolId: job_def.tool_id\n                    });\n                }\n                parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n            },\n            error: function error(response) {\n                callback && callback();\n                Galaxy.emit.debug(\"tool-form::submit\", \"Submission failed.\", response);\n                var input_found = false;\n                if (response && response.err_data) {\n                    var error_messages = self.form.data.matchResponse(response.err_data);\n                    for (var input_id in error_messages) {\n                        self.form.highlight(input_id, error_messages[input_id]);\n                        input_found = true;\n                        break;\n                    }\n                }\n                if (!input_found) {\n                    self.modal.show({\n                        title: \"Job submission failed\",\n                        body: self._templateError(job_def, response && response.err_msg),\n                        buttons: {\n                            Close: function Close() {\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /** Validate job dictionary.\n     * @param{dict}     job_def   - Job execution dictionary\n     */\n    validate: function validate(job_def) {\n        var job_inputs = job_def.inputs;\n        var batch_n = -1;\n        var batch_src = null;\n        for (var job_input_id in job_inputs) {\n            var input_value = job_inputs[job_input_id];\n            var input_id = this.form.data.match(job_input_id);\n            var input_field = this.form.field_list[input_id];\n            var input_def = this.form.input_list[input_id];\n            if (!input_id || !input_def || !input_field) {\n                Galaxy.emit.debug(\"tool-form::validate()\", \"Retrieving input objects failed.\");\n                continue;\n            }\n            if (!input_def.optional && input_value == null) {\n                this.form.highlight(input_id);\n                return false;\n            }\n            if (input_value && input_value.batch) {\n                var n = input_value.values.length;\n                var src = n > 0 && input_value.values[0] && input_value.values[0].src;\n                if (src) {\n                    if (batch_src === null) {\n                        batch_src = src;\n                    } else if (batch_src !== src) {\n                        this.form.highlight(input_id, \"Please select either dataset or dataset list fields for all batch mode fields.\");\n                        return false;\n                    }\n                }\n                if (batch_n === -1) {\n                    batch_n = n;\n                } else if (batch_n !== n) {\n                    this.form.highlight(input_id, \"Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>\" + n + \"</b> selection(s) while a previous field contains <b>\" + batch_n + \"</b>.\");\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    _templateSuccess: function _templateSuccess(response) {\n        if (response.jobs && response.jobs.length > 0) {\n            var njobs = response.jobs.length;\n            var njobs_text = njobs == 1 ? \"1 job has\" : njobs + \" jobs have\";\n            var $message = $(\"<div/>\").addClass(\"donemessagelarge\").append($(\"<p/>\").text(njobs_text + \" been successfully added to the queue - resulting in the following datasets:\"));\n            _.each(response.outputs, function (output) {\n                $message.append($(\"<p/>\").addClass(\"messagerow\").append($(\"<b/>\").text(output.hid + \": \" + output.name)));\n            });\n            $message.append($(\"<p/>\").append(\"<b/>\").text(\"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"));\n            return $message;\n        } else {\n            return this._templateError(response, \"Invalid success response. No jobs found.\");\n        }\n    },\n\n    _templateError: function _templateError(response, err_msg) {\n        return $(\"<div/>\").addClass(\"errormessagelarge\").append($(\"<p/>\").text(\"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" + (err_msg || \"\"))).append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n}); /* This is the regular tool form */\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 27:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _menu = __webpack_require__(28);\n\nvar _menu2 = _interopRequireDefault(_menu);\n\nvar _scratchbook = __webpack_require__(30);\n\nvar _scratchbook2 = _interopRequireDefault(_scratchbook);\n\nvar _userQuotameter = __webpack_require__(44);\n\nvar _userQuotameter2 = _interopRequireDefault(_userQuotameter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Masthead **/\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.options = options;\n        this.setElement(this._template());\n        this.$navbarBrandLink = this.$(\".navbar-brand-link\");\n        this.$navbarBrandImage = this.$(\".navbar-brand-image\");\n        this.$navbarBrandTitle = this.$(\".navbar-brand-title\");\n        this.$navbarTabs = this.$(\".navbar-tabs\");\n        this.$quoteMeter = this.$(\".quota-meter-container\");\n\n        // build tabs\n        this.collection = new _menu2.default.Collection();\n        this.collection.on(\"add\", function (model) {\n            self.$navbarTabs.append(new _menu2.default.Tab({ model: model }).render().$el);\n        }).on(\"reset\", function () {\n            self.$navbarTabs.empty();\n        }).on(\"dispatch\", function (callback) {\n            self.collection.each(function (m) {\n                callback(m);\n            });\n        }).fetch(this.options);\n\n        // scratchbook\n        Galaxy.frame = this.frame = new _scratchbook2.default({\n            collection: this.collection\n        });\n\n        // set up the quota meter (And fetch the current user data from trans)\n        // add quota meter to masthead\n        Galaxy.quotaMeter = this.quotaMeter = new _userQuotameter2.default.UserQuotaMeter({\n            model: Galaxy.user,\n            el: this.$quoteMeter\n        });\n\n        // loop through beforeunload functions if the user attempts to unload the page\n        $(window).on(\"click\", function (e) {\n            var $download_link = $(e.target).closest(\"a[download]\");\n            if ($download_link.length == 1) {\n                if ($(\"iframe[id=download]\").length === 0) {\n                    $(\"body\").append($(\"<iframe/>\").attr(\"id\", \"download\").hide());\n                }\n                $(\"iframe[id=download]\").attr(\"src\", $download_link.attr(\"href\"));\n                e.preventDefault();\n            }\n        }).on(\"beforeunload\", function () {\n            var text = \"\";\n            self.collection.each(function (model) {\n                var q = model.get(\"onbeforeunload\") && model.get(\"onbeforeunload\")();\n                q && (text += q + \" \");\n            });\n            if (text !== \"\") {\n                return text;\n            }\n        });\n    },\n\n    render: function render() {\n        this.$navbarBrandTitle.html(\"Galaxy \" + (this.options.brand && \"/ \" + this.options.brand || \"\"));\n        this.$navbarBrandLink.attr(\"href\", this.options.logo_url);\n        this.$navbarBrandImage.attr(\"src\", this.options.logo_src);\n        this.quotaMeter.render();\n        return this;\n    },\n\n    /** body template */\n    _template: function _template() {\n        return '<div id=\"masthead\" class=\"navbar navbar-fixed-top navbar-inverse\">' + '<div class=\"navbar-header\">' + '<div class=\"navbar-tabs\"/>' + \"</div>\" + '<div class=\"navbar-brand\">' + '<a class=\"navbar-brand-link\">' + '<img class=\"navbar-brand-image\"/>' + '<span class=\"navbar-brand-title\"/>' + \"</a>\" + \"</div>\" + '<div class=\"quota-meter-container\"/>' + '<div class=\"navbar-icons\"/>' + \"</div>\";\n    }\n});\n\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 28:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, jQuery, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _genericNavView = __webpack_require__(29);\n\nvar _genericNavView2 = _interopRequireDefault(_genericNavView);\n\nvar _webhooks = __webpack_require__(13);\n\nvar _webhooks2 = _interopRequireDefault(_webhooks);\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Masthead Collection **/\nvar Collection = Backbone.Collection.extend({\n    model: Backbone.Model.extend({\n        defaults: {\n            visible: true,\n            target: \"_parent\"\n        }\n    }),\n    fetch: function fetch(options) {\n        var self = this;\n        options = options || {};\n        this.reset();\n\n        //\n        // Chat server tab\n        //\n        var extendedNavItem = new _genericNavView2.default.GenericNavView();\n        this.add(extendedNavItem.render());\n\n        //\n        // Analyze data tab.\n        //\n        this.add({\n            id: \"analysis\",\n            title: (0, _localization2.default)(\"Analyze Data\"),\n            url: \"\",\n            tooltip: (0, _localization2.default)(\"Analysis home view\")\n        });\n\n        //\n        // Workflow tab.\n        //\n        this.add({\n            id: \"workflow\",\n            title: (0, _localization2.default)(\"Workflow\"),\n            tooltip: (0, _localization2.default)(\"Chain tools into workflows\"),\n            disabled: !Galaxy.user.id,\n            url: \"workflow\"\n        });\n\n        //\n        // 'Shared Items' or Libraries tab.\n        //\n        this.add({\n            id: \"shared\",\n            title: (0, _localization2.default)(\"Shared Data\"),\n            url: \"library/index\",\n            tooltip: (0, _localization2.default)(\"Access published resources\"),\n            menu: [{\n                title: (0, _localization2.default)(\"Data Libraries\"),\n                url: \"library/list\"\n            }, {\n                title: (0, _localization2.default)(\"Histories\"),\n                url: \"histories/list_published\"\n            }, {\n                title: (0, _localization2.default)(\"Workflows\"),\n                url: \"workflows/list_published\"\n            }, {\n                title: (0, _localization2.default)(\"Visualizations\"),\n                url: \"visualizations/list_published\"\n            }, {\n                title: (0, _localization2.default)(\"Pages\"),\n                url: \"pages/list_published\"\n            }]\n        });\n\n        //\n        // Visualization tab.\n        //\n        this.add({\n            id: \"visualization\",\n            title: (0, _localization2.default)(\"Visualization\"),\n            url: \"visualizations/list\",\n            tooltip: (0, _localization2.default)(\"Visualize datasets\"),\n            disabled: !Galaxy.user.id,\n            menu: [{\n                title: (0, _localization2.default)(\"New Track Browser\"),\n                url: \"visualization/trackster\",\n                target: \"_frame\"\n            }, {\n                title: (0, _localization2.default)(\"Saved Visualizations\"),\n                url: \"visualizations/list\",\n                target: \"_frame\"\n            }, {\n                title: (0, _localization2.default)(\"Interactive Environments\"),\n                url: \"visualization/gie_list\",\n                target: \"galaxy_main\"\n            }]\n        });\n\n        //\n        // Webhooks\n        //\n        _webhooks2.default.add({\n            url: \"api/webhooks/masthead/all\",\n            callback: function callback(webhooks) {\n                $(document).ready(function () {\n                    $.each(webhooks.models, function (index, model) {\n                        var webhook = model.toJSON();\n                        if (webhook.activate) {\n                            var obj = {\n                                id: webhook.name,\n                                icon: webhook.config.icon,\n                                url: webhook.config.url,\n                                tooltip: webhook.config.tooltip,\n                                onclick: webhook.config.function && new Function(webhook.config.function)\n                            };\n\n                            // Galaxy.page is undefined for data libraries, workflows pages\n                            if (Galaxy.page) {\n                                Galaxy.page.masthead.collection.add(obj);\n                            } else if (Galaxy.masthead) {\n                                Galaxy.masthead.collection.add(obj);\n                            }\n\n                            // Append masthead script and styles to Galaxy main\n                            _utils2.default.appendScriptStyle(webhook);\n                        }\n                    });\n                });\n            }\n        });\n\n        //\n        // Admin.\n        //\n        Galaxy.user.get(\"is_admin\") && this.add({\n            id: \"admin\",\n            title: (0, _localization2.default)(\"Admin\"),\n            url: \"admin\",\n            tooltip: (0, _localization2.default)(\"Administer this Galaxy\"),\n            cls: \"admin-only\"\n        });\n\n        //\n        // Help tab.\n        //\n        var helpTab = {\n            id: \"help\",\n            title: (0, _localization2.default)(\"Help\"),\n            tooltip: (0, _localization2.default)(\"Support, contact, and community\"),\n            menu: [{\n                title: (0, _localization2.default)(\"Support\"),\n                url: options.support_url,\n                target: \"_blank\"\n            }, {\n                title: (0, _localization2.default)(\"Search\"),\n                url: options.search_url,\n                target: \"_blank\"\n            }, {\n                title: (0, _localization2.default)(\"Mailing Lists\"),\n                url: options.mailing_lists,\n                target: \"_blank\"\n            }, {\n                title: (0, _localization2.default)(\"Videos\"),\n                url: options.screencasts_url,\n                target: \"_blank\"\n            }, {\n                title: (0, _localization2.default)(\"Wiki\"),\n                url: options.wiki_url,\n                target: \"_blank\"\n            }, {\n                title: (0, _localization2.default)(\"How to Cite Galaxy\"),\n                url: options.citation_url,\n                target: \"_blank\"\n            }, {\n                title: (0, _localization2.default)(\"Interactive Tours\"),\n                url: \"tours\"\n            }]\n        };\n        options.terms_url && helpTab.menu.push({\n            title: (0, _localization2.default)(\"Terms and Conditions\"),\n            url: options.terms_url,\n            target: \"_blank\"\n        });\n        options.biostar_url && helpTab.menu.unshift({\n            title: (0, _localization2.default)(\"Ask a question\"),\n            url: \"biostar/biostar_question_redirect\",\n            target: \"_blank\"\n        });\n        options.biostar_url && helpTab.menu.unshift({\n            title: (0, _localization2.default)(\"Galaxy Biostar\"),\n            url: options.biostar_url_redirect,\n            target: \"_blank\"\n        });\n        this.add(helpTab);\n\n        //\n        // User tab.\n        //\n        var userTab = {};\n        if (!Galaxy.user.id) {\n            if (options.allow_user_creation) {\n                userTab = {\n                    id: \"user\",\n                    title: (0, _localization2.default)(\"Login or Register\"),\n                    cls: \"loggedout-only\",\n                    tooltip: (0, _localization2.default)(\"Account registration or login\"),\n                    menu: [{\n                        title: (0, _localization2.default)(\"Login\"),\n                        url: \"user/login\",\n                        target: \"galaxy_main\",\n                        noscratchbook: true\n                    }, {\n                        title: (0, _localization2.default)(\"Register\"),\n                        url: \"user/create\",\n                        target: \"galaxy_main\",\n                        noscratchbook: true\n                    }]\n                };\n            } else {\n                userTab = {\n                    id: \"user\",\n                    title: (0, _localization2.default)(\"Login\"),\n                    cls: \"loggedout-only\",\n                    tooltip: (0, _localization2.default)(\"Login\"),\n                    url: \"user/login\",\n                    target: \"galaxy_main\",\n                    noscratchbook: true\n                };\n            }\n        } else {\n            userTab = {\n                id: \"user\",\n                title: (0, _localization2.default)(\"User\"),\n                cls: \"loggedin-only\",\n                tooltip: (0, _localization2.default)(\"Account and saved data\"),\n                menu: [{\n                    title: (0, _localization2.default)(\"Logged in as\") + \" \" + Galaxy.user.get(\"email\")\n                }, {\n                    title: (0, _localization2.default)(\"Preferences\"),\n                    url: \"user\"\n                }, {\n                    title: (0, _localization2.default)(\"Custom Builds\"),\n                    url: \"custom_builds\"\n                }, {\n                    title: (0, _localization2.default)(\"Logout\"),\n                    url: \"user/logout?session_csrf_token=\" + Galaxy.session_csrf_token,\n                    target: \"_top\",\n                    divider: true\n                }, {\n                    title: (0, _localization2.default)(\"Saved Histories\"),\n                    url: \"histories/list\",\n                    target: \"_top\"\n                }, {\n                    title: (0, _localization2.default)(\"Saved Datasets\"),\n                    url: \"datasets/list\",\n                    target: \"_top\"\n                }, {\n                    title: (0, _localization2.default)(\"Saved Pages\"),\n                    url: \"pages/list\",\n                    target: \"_top\"\n                }]\n            };\n        }\n        this.add(userTab);\n        var activeView = this.get(options.active_view);\n        activeView && activeView.set(\"active\", true);\n        return new jQuery.Deferred().resolve().promise();\n    }\n});\n\n/** Masthead tab **/\nvar Tab = Backbone.View.extend({\n    initialize: function initialize(options) {\n        this.model = options.model;\n        this.setElement(this._template());\n        this.$dropdown = this.$(\".dropdown\");\n        this.$toggle = this.$(\".dropdown-toggle\");\n        this.$menu = this.$(\".dropdown-menu\");\n        this.$note = this.$(\".dropdown-note\");\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    events: {\n        \"click .dropdown-toggle\": \"_toggleClick\"\n    },\n\n    render: function render() {\n        var self = this;\n        $(\".tooltip\").remove();\n        this.$el.attr(\"id\", this.model.id).css({\n            visibility: this.model.get(\"visible\") && \"visible\" || \"hidden\"\n        });\n        this.model.set(\"url\", this._formatUrl(this.model.get(\"url\")));\n        this.$note.html(this.model.get(\"note\") || \"\").removeClass().addClass(\"dropdown-note\").addClass(this.model.get(\"note_cls\")).css({\n            display: this.model.get(\"show_note\") && \"block\" || \"none\"\n        });\n        this.$toggle.html(this.model.get(\"title\") || \"\").removeClass().addClass(\"dropdown-toggle\").addClass(this.model.get(\"cls\")).addClass(this.model.get(\"icon\") && \"dropdown-icon fa \" + this.model.get(\"icon\")).addClass(this.model.get(\"toggle\") && \"toggle\").attr(\"target\", this.model.get(\"target\")).attr(\"href\", this.model.get(\"url\")).attr(\"title\", this.model.get(\"tooltip\")).tooltip(\"destroy\");\n        this.model.get(\"tooltip\") && this.$toggle.tooltip({ placement: \"bottom\" });\n        this.$dropdown.removeClass().addClass(\"dropdown\").addClass(this.model.get(\"disabled\") && \"disabled\").addClass(this.model.get(\"active\") && \"active\");\n        if (this.model.get(\"menu\") && this.model.get(\"show_menu\")) {\n            this.$menu.show();\n            $(\"#dd-helper\").show().off().on(\"click\", function () {\n                $(\"#dd-helper\").hide();\n                self.model.set(\"show_menu\", false);\n            });\n        } else {\n            self.$menu.hide();\n            $(\"#dd-helper\").hide();\n        }\n        this.$menu.empty().removeClass(\"dropdown-menu\");\n        if (this.model.get(\"menu\")) {\n            _.each(this.model.get(\"menu\"), function (menuItem) {\n                self.$menu.append(self._buildMenuItem(menuItem));\n                menuItem.divider && self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n            });\n            self.$menu.addClass(\"dropdown-menu\");\n            self.$toggle.append($(\"<b/>\").addClass(\"caret\"));\n        }\n        return this;\n    },\n\n    /** Add new menu item */\n    _buildMenuItem: function _buildMenuItem(options) {\n        var self = this;\n        options = _.defaults(options || {}, {\n            title: \"\",\n            url: \"\",\n            target: \"_parent\",\n            noscratchbook: false\n        });\n        options.url = self._formatUrl(options.url);\n        return $(\"<li/>\").append($(\"<a/>\").attr(\"href\", options.url).attr(\"target\", options.target).html(options.title).on(\"click\", function (e) {\n            e.preventDefault();\n            self.model.set(\"show_menu\", false);\n            if (options.onclick) {\n                options.onclick();\n            } else {\n                Galaxy.frame.add(options);\n            }\n        }));\n    },\n\n    /** Handle click event */\n    _toggleClick: function _toggleClick(e) {\n        var self = this;\n        var model = this.model;\n        e.preventDefault();\n        $(\".tooltip\").hide();\n        model.trigger(\"dispatch\", function (m) {\n            model.id !== m.id && m.get(\"menu\") && m.set(\"show_menu\", false);\n        });\n        if (!model.get(\"disabled\")) {\n            if (!model.get(\"menu\")) {\n                model.get(\"onclick\") ? model.get(\"onclick\")() : Galaxy.frame.add(model.attributes);\n            } else {\n                model.set(\"show_menu\", true);\n            }\n        } else {\n            var buildLink = function buildLink(label, url) {\n                return $(\"<div/>\").append($(\"<a/>\").attr(\"href\", Galaxy.root + url).html(label)).html();\n            };\n\n            this.$toggle.popover && this.$toggle.popover(\"destroy\");\n            this.$toggle.popover({\n                html: true,\n                placement: \"bottom\",\n                content: \"Please \" + buildLink(\"login\", \"user/login?use_panels=True\") + \" or \" + buildLink(\"register\", \"user/create?use_panels=True\") + \" to use this feature.\"\n            }).popover(\"show\");\n            setTimeout(function () {\n                self.$toggle.popover(\"destroy\");\n            }, 5000);\n        }\n    },\n\n    /** Url formatting */\n    _formatUrl: function _formatUrl(url) {\n        return typeof url == \"string\" && url.indexOf(\"//\") === -1 && url.charAt(0) != \"/\" ? Galaxy.root + url : url;\n    },\n\n    /** body tempate */\n    _template: function _template() {\n        return '<ul class=\"nav navbar-nav\">' + '<li class=\"dropdown\">' + '<a class=\"dropdown-toggle\"/>' + '<ul class=\"dropdown-menu\"/>' + '<div class=\"dropdown-note\"/>' + \"</li>\" + \"</ul>\";\n    }\n});\n\nexports.default = {\n    Collection: Collection,\n    Tab: Tab\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0), __webpack_require__(0), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _uiModal = __webpack_require__(7);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GenericNavView = Backbone.View.extend({\n    initialize: function initialize() {\n        this.modal = null;\n    },\n\n    /** makes bootstrap modal and iframe inside it */\n    makeModalIframe: function makeModalIframe(e) {\n        // make modal\n        var host = window.Galaxy.config.communication_server_host;\n\n        var port = window.Galaxy.config.communication_server_port;\n        var username = escape(window.Galaxy.user.attributes.username);\n\n        var persistent_communication_rooms = escape(window.Galaxy.config.persistent_communication_rooms);\n\n        var query_string = '?username=' + username + '&persistent_communication_rooms=' + persistent_communication_rooms;\n\n        var src = host + ':' + port + query_string;\n        var $el_chat_modal_header = null;\n        var $el_chat_modal_body = null;\n\n        var iframe_template = '<iframe class=\"f-iframe fade in communication-iframe\" src=\"' + src + '\"> </iframe>';\n\n        var header_template = '<i class=\"fa fa-comment\" aria-hidden=\"true\" title=\"Communicate with other users\"></i>' + '<i class=\"fa fa-expand expand-compress-modal\" aria-hidden=\"true\" title=\"Maximize\"></i>' + '<i class=\"fa fa-times close-modal\" aria-hidden=\"true\" title=\"Close\"></i>';\n\n        var frame_height = 350;\n        var frame_width = 600;\n        var class_names = \"ui-modal chat-modal\";\n\n        // deletes the chat modal if already present and create one\n        if ($(\".chat-modal\").length > 0) {\n            $(\".chat-modal\").remove();\n        }\n        // creates a modal\n        GenericNavView.modal = new _uiModal2.default.View({\n            body: iframe_template,\n            height: frame_height,\n            width: frame_width,\n            closing_events: true,\n            title_separator: false,\n            cls: class_names\n        });\n\n        // shows modal\n        GenericNavView.modal.show();\n        $el_chat_modal_header = $(\".chat-modal .modal-header\");\n        $el_chat_modal_body = $(\".chat-modal .modal-body\");\n        // adjusts the css of bootstrap modal for chat\n        $el_chat_modal_header.addClass(\"modal-header-body\");\n        $el_chat_modal_body.addClass(\"modal-header-body\");\n        $el_chat_modal_header.find(\"h4\").remove();\n        $el_chat_modal_header.removeAttr(\"min-height padding border\");\n        $el_chat_modal_header.append(header_template);\n        // click event of the close button for chat\n        $(\".close-modal\").click(function (e) {\n            $(\".chat-modal\").css(\"display\", \"none\");\n        });\n        // click event of expand and compress icon\n        $(\".expand-compress-modal\").click(function (e) {\n            if ($(\".expand-compress-modal\").hasClass(\"fa-expand\")) {\n                $(\".chat-modal .modal-dialog\").width(\"1000px\");\n                $(\".chat-modal .modal-body\").height(\"575px\");\n                $(\".expand-compress-modal\").removeClass(\"fa-expand\").addClass(\"fa-compress\");\n                $(\".expand-compress-modal\").attr(\"title\", \"Minimize\");\n                $(\".expand-compress-modal\").css(\"margin-left\", \"96.2%\");\n            } else {\n                $(\".chat-modal .modal-dialog\").width(frame_width + 'px');\n                $(\".chat-modal .modal-body\").height(frame_height + 'px');\n                $(\".expand-compress-modal\").removeClass(\"fa-compress\").addClass(\"fa-expand\");\n                $(\".expand-compress-modal\").attr(\"title\", \"Maximize\");\n                $(\".expand-compress-modal\").css(\"margin-left\", \"93.2%\");\n            }\n        });\n        return this;\n    },\n\n    /**renders the chat icon as a nav item*/\n    render: function render() {\n        var self = this;\n        var navItem = {};\n        navItem = {\n            id: \"show-chat-online\",\n            icon: \"fa-comment-o\",\n            tooltip: \"Chat online\",\n            visible: false,\n            onclick: self.makeModalIframe\n        };\n        return navItem;\n    }\n}); /** Real-time Communication feature **/\nexports.default = {\n    GenericNavView: GenericNavView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 30:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _uiFrames = __webpack_require__(17);\n\nvar _uiFrames2 = _interopRequireDefault(_uiFrames);\n\nvar _data = __webpack_require__(8);\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _visualization = __webpack_require__(9);\n\nvar _visualization2 = _interopRequireDefault(_visualization);\n\nvar _trackster = __webpack_require__(33);\n\nvar _trackster2 = _interopRequireDefault(_trackster);\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        options = options || {};\n        this.frames = new _uiFrames2.default.View({ visible: false });\n        this.setElement(this.frames.$el);\n        this.buttonActive = options.collection.add({\n            id: \"enable-scratchbook\",\n            icon: \"fa-th\",\n            tooltip: (0, _localization2.default)(\"Enable/Disable Scratchbook\"),\n            onclick: function onclick() {\n                self.active = !self.active;\n                self.buttonActive.set({\n                    toggle: self.active,\n                    show_note: self.active,\n                    note_cls: self.active && \"fa fa-check\"\n                });\n                !self.active && self.frames.hide();\n            },\n            onbeforeunload: function onbeforeunload() {\n                if (self.frames.length() > 0) {\n                    return \"You opened \" + self.frames.length() + \" frame(s) which will be lost.\";\n                }\n            }\n        });\n        this.buttonLoad = options.collection.add({\n            id: \"show-scratchbook\",\n            icon: \"fa-eye\",\n            tooltip: (0, _localization2.default)(\"Show/Hide Scratchbook\"),\n            show_note: true,\n            visible: false,\n            onclick: function onclick(e) {\n                self.frames.visible ? self.frames.hide() : self.frames.show();\n            }\n        });\n        this.frames.on(\"add remove\", function () {\n            this.visible && this.length() == 0 && this.hide();\n            self.buttonLoad.set({\n                note: this.length(),\n                visible: this.length() > 0\n            });\n        }).on(\"show hide \", function () {\n            self.buttonLoad.set({\n                toggle: this.visible,\n                icon: this.visible && \"fa-eye\" || \"fa-eye-slash\"\n            });\n        });\n        this.history_cache = {};\n    },\n\n    /** Add a dataset to the frames */\n    addDataset: function addDataset(dataset_id) {\n        var self = this;\n        var current_dataset = null;\n        if (Galaxy && Galaxy.currHistoryPanel) {\n            var history_id = Galaxy.currHistoryPanel.collection.historyId;\n            this.history_cache[history_id] = {\n                name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                dataset_ids: []\n            };\n            Galaxy.currHistoryPanel.collection.each(function (model) {\n                !model.get(\"deleted\") && model.get(\"visible\") && self.history_cache[history_id].dataset_ids.push(model.get(\"id\"));\n            });\n        }\n        var _findDataset = function _findDataset(dataset, offset) {\n            if (dataset) {\n                var history_details = self.history_cache[dataset.get(\"history_id\")];\n                if (history_details && history_details.dataset_ids) {\n                    var dataset_list = history_details.dataset_ids;\n                    var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                    if (pos !== -1 && pos + offset >= 0 && pos + offset < dataset_list.length) {\n                        return dataset_list[pos + offset];\n                    }\n                }\n            }\n        };\n        var _loadDatasetOffset = function _loadDatasetOffset(dataset, offset, frame) {\n            var new_dataset_id = _findDataset(dataset, offset);\n            if (new_dataset_id) {\n                self._loadDataset(new_dataset_id, function (new_dataset, config) {\n                    current_dataset = new_dataset;\n                    frame.model.set(config);\n                });\n            } else {\n                frame.model.trigger(\"change\");\n            }\n        };\n        this._loadDataset(dataset_id, function (dataset, config) {\n            current_dataset = dataset;\n            self.add(_.extend({\n                menu: [{\n                    icon: \"fa fa-chevron-circle-left\",\n                    tooltip: \"Previous in History\",\n                    onclick: function onclick(frame) {\n                        _loadDatasetOffset(current_dataset, -1, frame);\n                    },\n                    disabled: function disabled() {\n                        return !_findDataset(current_dataset, -1);\n                    }\n                }, {\n                    icon: \"fa fa-chevron-circle-right\",\n                    tooltip: \"Next in History\",\n                    onclick: function onclick(frame) {\n                        _loadDatasetOffset(current_dataset, 1, frame);\n                    },\n                    disabled: function disabled() {\n                        return !_findDataset(current_dataset, 1);\n                    }\n                }]\n            }, config));\n        });\n    },\n\n    _loadDataset: function _loadDataset(dataset_id, callback) {\n        var self = this;\n        var dataset = new _data2.default.Dataset({ id: dataset_id });\n        $.when(dataset.fetch()).then(function () {\n            var is_tabular = _.find([\"tabular\", \"interval\"], function (data_type) {\n                return dataset.get(\"data_type\").indexOf(data_type) !== -1;\n            });\n            var title = dataset.get(\"name\");\n            var history_details = self.history_cache[dataset.get(\"history_id\")];\n            if (history_details) {\n                title = history_details.name + \": \" + title;\n            }\n            callback(dataset, is_tabular ? {\n                title: title,\n                url: null,\n                content: _data2.default.createTabularDatasetChunkedView({\n                    model: new _data2.default.TabularDataset(dataset.toJSON()),\n                    embedded: true,\n                    height: \"100%\"\n                }).$el\n            } : {\n                title: title,\n                url: Galaxy.root + \"datasets/\" + dataset_id + \"/display/?preview=True\",\n                content: null\n            });\n        });\n    },\n\n    /** Add a trackster visualization to the frames. */\n    addTrackster: function addTrackster(viz_id) {\n        var self = this;\n        var viz = new _visualization2.default.Visualization({ id: viz_id });\n        $.when(viz.fetch()).then(function () {\n            var ui = new _trackster2.default.TracksterUI(Galaxy.root);\n\n            // Construct frame config based on dataset's type.\n            var frame_config = {\n                title: viz.get(\"name\"),\n                type: \"other\",\n                content: function content(parent_elt) {\n                    // Create view config.\n                    var view_config = {\n                        container: parent_elt,\n                        name: viz.get(\"title\"),\n                        id: viz.id,\n                        // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                        dbkey: viz.get(\"dbkey\"),\n                        stand_alone: false\n                    };\n\n                    var latest_revision = viz.get(\"latest_revision\");\n                    var drawables = latest_revision.config.view.drawables;\n\n                    // Set up datasets in drawables.\n                    _.each(drawables, function (d) {\n                        d.dataset = {\n                            hda_ldda: d.hda_ldda,\n                            id: d.dataset_id\n                        };\n                    });\n                    view = ui.create_visualization(view_config, latest_revision.config.viewport, latest_revision.config.view.drawables, latest_revision.config.bookmarks, false);\n                }\n            };\n            self.add(frame_config);\n        });\n    },\n\n    /** Add and display a new frame/window based on options. */\n    add: function add(options) {\n        if (options.target == \"_blank\") {\n            window.open(options.url);\n        } else if (options.target == \"_top\" || options.target == \"_parent\" || options.target == \"_self\") {\n            window.location = options.url;\n        } else if (!this.active || options.noscratchbook) {\n            var $galaxy_main = $(window.parent.document).find(\"#galaxy_main\");\n            if (options.target == \"galaxy_main\" || options.target == \"center\") {\n                if ($galaxy_main.length === 0) {\n                    window.location = options.url + (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") + \"use_panels=True\";\n                } else {\n                    $galaxy_main.attr(\"src\", options.url);\n                }\n            } else window.location = options.url;\n        } else {\n            this.frames.add(options);\n        }\n    }\n}); /** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// dependencies\n\n// grid model\nexports.default = Backbone.Model.extend({\n    defaults: {\n        url_base: \"\",\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function can_async_op(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function add_filter(key, value, append) {\n        // Update URL arg with new condition.\n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key];\n\n            var new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } else if (typeof cur_val == \"string\") {\n                if (cur_val == \"All\" || cur_val == value) {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;\n                }\n            } else {\n                // Current value is an array.\n                new_val = cur_val;\n                if (new_val.indexOf(value) === -1) {\n                    new_val.push(value);\n                }\n            }\n            this.attributes.filters[key] = new_val;\n        } else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function remove_filter(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;\n        }\n\n        if (typeof cur_val === \"string\") {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = \"\";\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = \"\";\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function get_url_data() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), function (k) {\n            url_data[\"f-\" + k[0]] = k[1];\n        });\n        return url_data;\n    },\n\n    // Return URL for obtaining a new grid\n    get_url: function get_url(args) {\n        return this.get(\"url_base\") + \"?\" + $.param(this.get_url_data()) + \"&\" + $.param(args);\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 32:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// grid view templates\nexports.default = {\n    // template\n    grid: function grid(options) {\n        var tmpl = \"\";\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = \"<div class=\\\"loading-elt-overlay\\\"></div><table><tr><td width=\\\"75%\\\">\" + this.grid_header(options) + \"</td><td></td><td></td></tr><tr><td width=\\\"100%\\\" id=\\\"grid-message\\\" valign=\\\"top\\\"></td><td></td><td></td></tr></table>\" + this.grid_table(options);\n        }\n\n        // add info text\n        if (options.info_text) {\n            tmpl += \"<br><div class=\\\"toolParamHelp\\\" style=\\\"clear: both;\\\">\" + options.info_text + \"</div>\";\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    grid_table: function grid_table(options) {\n        return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + \"</table>\" + \"</form>\";\n    },\n\n    // template\n    grid_header: function grid_header(options) {\n        var tmpl = '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl += \"<h2>\" + options.title + \"</h2>\";\n        }\n        if (options.global_actions) {\n            tmpl += '<ul class=\"manage-table-actions\">';\n            var show_popup = options.global_actions.length >= 3;\n            if (show_popup) {\n                tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (var i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl += \"<li><a class=\\\"action-button use-target\\\" target=\\\"\" + action.target + \"\\\" href=\\\"\" + action.url_args + \"\\\" onclick=\\\"return false;\\\" >\" + action.label + \"</a></li>\";\n            }\n            if (show_popup) {\n                tmpl += \"</div>\";\n            }\n            tmpl += \"</ul>\";\n        }\n        if (options.insert) {\n            tmpl += options.insert;\n        }\n\n        // add grid filters\n        tmpl += this.grid_filters(options);\n        tmpl += \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function header(options) {\n        // start\n        var tmpl = \"<tr>\";\n\n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl += \"<th>\";\n            if (options.items.length > 0) {\n                tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl += \"</th>\";\n        }\n\n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl += \"<th id=\\\"\" + column.key + \"-header\\\">\";\n                if (column.href) {\n                    tmpl += \"<a href=\\\"\" + column.href + \"\\\" class=\\\"sort-link\\\" sort_key=\\\"\" + column.key + \"\\\">\" + column.label + \"</a>\";\n                } else {\n                    tmpl += column.label;\n                }\n                tmpl += \"<span class=\\\"sort-arrow\\\">\" + column.extra + \"</span></th>\";\n            }\n        }\n\n        // finalize\n        tmpl += \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    body: function body(options) {\n        // initialize\n        var tmpl = \"\";\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n\n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n\n        // create rows\n        for (var i in options.items) {\n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n            // Tag current\n            tmpl += \"<tr \";\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += \">\";\n\n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += \"<td style=\\\"width: 1.5em;\\\"><input type=\\\"checkbox\\\" name=\\\"id\\\" value=\\\"\" + encoded_id + \"\\\" id=\\\"\" + encoded_id + \"\\\" class=\\\"grid-row-select-checkbox\\\" /></td>\";\n            }\n\n            // Data columns\n            for (var j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = \"\";\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n\n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n\n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n\n                    // unescape value\n                    if (jQuery.type(value) === \"string\") {\n                        value = value.replace(/\\/\\//g, \"/\");\n                    }\n\n                    // Attach popup menu?\n                    var id = \"\";\n                    var cls = \"\";\n                    if (column.attach_popup) {\n                        id = \"grid-\" + i + \"-popup\";\n                        cls = \"menubutton\";\n                        if (link != \"\") {\n                            cls += \" split\";\n                        }\n                        cls += \" popup\";\n                    }\n\n                    // Check for row wrapping\n                    tmpl += \"<td \" + nowrap + \">\";\n\n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += \"<div id=\\\"\" + id + \"\\\" class=\\\"\" + cls + \"\\\" style=\\\"float: left;\\\">\";\n                        }\n                        tmpl += \"<a class=\\\"menubutton-label use-target\\\" target=\\\"\" + target + \"\\\" href=\\\"\" + link + \"\\\" onclick=\\\"return false;\\\">\" + value + \"</a>\";\n                        if (options.operations.length != 0) {\n                            tmpl += \"</div>\";\n                        }\n                    } else {\n                        tmpl += \"<div id=\\\"\" + id + \"\\\" class=\\\"\" + cls + \"\\\"><label id=\\\"\" + column.label_id_prefix + encoded_id + \"\\\" for=\\\"\" + encoded_id + \"\\\">\" + (value || \"\") + \"</label></div>\";\n                    }\n                    tmpl += \"</td>\";\n                }\n            }\n            tmpl += \"</tr>\";\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function footer(options) {\n        // create template string\n        var tmpl = \"\";\n\n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links = options.num_page_links;\n            var cur_page_num = options.cur_page_num;\n            var num_pages = options.num_pages;\n\n            // First pass on min page.\n            var page_link_range = num_page_links / 2;\n            var min_page = cur_page_num - page_link_range;\n            var min_offset = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - (cur_page_num - min_page);\n            }\n\n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - (max_page + 1 - cur_page_num);\n            }\n\n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset;\n                if (min_page < 1) {\n                    min_page = 1;\n                }\n            }\n\n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += \"<td></td>\";\n            }\n            tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n            if (min_page > 1) {\n                tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n\n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                if (page_index == options.cur_page_num) {\n                    tmpl += \"<span class=\\\"page-link inactive-link\\\" id=\\\"page-link-\" + page_index + \"\\\">\" + page_index + \"</span>\";\n                } else {\n                    tmpl += \"<span class=\\\"page-link\\\" id=\\\"page-link-\" + page_index + \"\\\"><a href=\\\"javascript:void(0);\\\" onclick=\\\"return false;\\\" page_num=\\\"\" + page_index + \"\\\">\" + page_index + \"</a></span>\";\n                }\n            }\n\n            // show last page\n            if (max_page < num_pages) {\n                tmpl += \"...<span class=\\\"page-link\\\" id=\\\"page-link-\" + num_pages + \"\\\"><a href=\\\"javascript:void(0);\\\" onclick=\\\"return false;\\\" page_num=\\\"\" + num_pages + \"\\\">\" + num_pages + \"</a></span>\";\n            }\n            tmpl += \"</span>\";\n\n            // Show all link\n            tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + \"</td>\" + \"</tr>\";\n        }\n\n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += \"<tr>\" + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + \"<td></td>\" + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n            // configure buttons for operations\n            for (var i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += \"<input type=\\\"button\\\" value=\\\"\" + operation.label + \"\\\" class=\\\"operation-button action-button\\\">&nbsp;\";\n                }\n            }\n\n            // finalize template\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n\n        // add global operations\n        if (found_global) {\n            tmpl += \"<tr>\" + '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += \"<a class=\\\"action-button\\\" href=\\\"\" + operation.global_operation + \"\\\">\" + operation.label + \"</a>\";\n                }\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // add legend\n        if (options.legend) {\n            tmpl += \"<tr><td colspan=\\\"100\\\">\" + options.legend + \"</td></tr>\";\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    message: function message(options) {\n        var status = options.status;\n        if ([\"success\", \"ok\"].indexOf(status) != -1) {\n            status = \"done\";\n        }\n        return \"<p><div class=\\\"\" + status + \"message transient-message\\\">\" + _.escape(options.message) + \"</div><div style=\\\"clear: both\\\"></div></p>\";\n    },\n\n    // template\n    grid_filters: function grid_filters(options) {\n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = \"none\";\n        if (options.advanced_search) {\n            advanced_search_display = \"block\";\n        }\n\n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = \"block\";\n                }\n                show_advanced_search_link = true;\n            }\n        }\n\n        // hide standard search if advanced is shown\n        var standard_search_display = \"block\";\n        if (advanced_search_display == \"block\") {\n            standard_search_display = \"none\";\n        }\n\n        //\n        // standard search\n        //\n        var tmpl = \"<div id=\\\"standard-search\\\" style=\\\"display: \" + standard_search_display + \";\\\"><table><tr><td style=\\\"padding: 0;\\\"><table>\";\n\n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"standard\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize standard search\n        tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n\n        // finalize standard search display\n        tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n        //\n        // advanced search\n        //\n        tmpl += \"<div id=\\\"advanced-search\\\" style=\\\"display: \" + advanced_search_display + \"; margin-top: 5px; border: 1px solid #ccc;\\\"><table><tr><td style=\\\"text-align: left\\\" colspan=\\\"100\\\"><a href=\\\"\\\" class=\\\"advanced-search-toggle\\\">Close Advanced Search</a></td></tr>\";\n\n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize advanced search template\n        tmpl += \"</table>\" + \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    grid_column_filter: function grid_column_filter(options, column) {\n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == \"advanced\") {\n            column_label = column_label.toLowerCase();\n        }\n\n        // start\n        var tmpl = \"<tr>\";\n\n        if (column.filterable == \"advanced\") {\n            tmpl += \"<td align=\\\"left\\\" style=\\\"padding-left: 10px\\\">\" + column_label + \":</td>\";\n        }\n        tmpl += '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl += \"<form class=\\\"text-filter-form\\\" column_key=\\\"\" + column_key + \"\\\" action=\\\"\" + options.url + \"\\\" method=\\\"get\\\" >\";\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != \"All\") {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify(filter_value);\n                        }\n                        tmpl += \"<input type=\\\"hidden\\\" id=\\\"\" + temp_column.key + \"\\\" name=\\\"f-\" + temp_column.key + \"\\\" value=\\\"\" + filter_value + \"\\\"/>\";\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl += \"<span id=\\\"\" + column_key + \"-filtering-criteria\\\">\";\n\n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n\n                // single filter value\n                if (type == \"string\") {\n                    if (column_filter != \"All\") {\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter);\n                    }\n                }\n\n                // multiple filter values\n                if (type == \"array\") {\n                    for (var i in column_filter) {\n                        // get filter\n                        var filter = column_filter[i];\n\n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl += this.filter_element(column_key, filter);\n                    }\n                }\n            }\n\n            // close span\n            tmpl += \"</span>\";\n\n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = \"\";\n            if (column.filterable == \"standard\") {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n\n            // print input field for column\n            tmpl += \"<span class=\\\"search-box\\\"><input class=\\\"search-box-input\\\" id=\\\"input-\" + column_key + \"-filter\\\" name=\\\"f-\" + column_key + \"\\\" type=\\\"text\\\" placeholder=\\\"\" + value + \"\\\" size=\\\"\" + size + \"\\\"/><button type=\\\"submit\\\" style=\\\"background: transparent; border: none; padding: 4px; margin: 0px;\\\"><i class=\\\"fa fa-search\\\"></i></button></span></form>\";\n        } else {\n            // filter criteria\n            tmpl += \"<span id=\\\"\" + column_key + \"-filtering-criteria\\\">\";\n\n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n\n                // each filter will have only a single argument, so get that single argument\n                var cf_key = \"\";\n                var cf_arg = \"\";\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n\n                // add seperator\n                if (seperator) {\n                    tmpl += \" | \";\n                }\n                seperator = true;\n\n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl += \"<span class=\\\"categorical-filter \" + column_key + \"-filter current-filter\\\">\" + cf_label + \"</span>\";\n                } else {\n                    tmpl += \"<span class=\\\"categorical-filter \" + column_key + \"-filter\\\"><a href=\\\"javascript:void(0);\\\" filter_key=\\\"\" + cf_key + \"\\\" filter_val=\\\"\" + cf_arg + \"\\\">\" + cf_label + \"</a></span>\";\n                }\n            }\n            tmpl += \"</span>\";\n        }\n        tmpl += \"</td>\" + \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template for filter items\n    filter_element: function filter_element(filter_key, filter_value) {\n        filter_value = _utils2.default.sanitize(filter_value);\n        return \"<span class=\\\"text-filter-val\\\">\" + filter_value + \"<a href=\\\"javascript:void(0);\\\" filter_key=\\\"\" + filter_key + \"\\\" filter_val=\\\"\" + filter_value + \"\\\"><i class=\\\"fa fa-times\\\" style=\\\"padding-left: 5px; padding-bottom: 6px;\\\"/></a></span>\";\n    }\n}; // dependencies\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 33:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _tracks = __webpack_require__(34);\n\nvar _tracks2 = _interopRequireDefault(_tracks);\n\nvar _visualization = __webpack_require__(9);\n\nvar _visualization2 = _interopRequireDefault(_visualization);\n\nvar _iconButton = __webpack_require__(18);\n\nvar _iconButton2 = _interopRequireDefault(_iconButton);\n\nvar _queryStringParsing = __webpack_require__(16);\n\nvar _queryStringParsing2 = _interopRequireDefault(_queryStringParsing);\n\nvar _gridView = __webpack_require__(12);\n\nvar _gridView2 = _interopRequireDefault(_gridView);\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\n__webpack_require__(51);\n\n__webpack_require__(50);\n\n__webpack_require__(52);\n\n__webpack_require__(56);\n\n__webpack_require__(55);\n\n__webpack_require__(57);\n\n__webpack_require__(53);\n\n__webpack_require__(54);\n\n__webpack_require__(15);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// trackster viewer\n\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function Base() {\n    if (this.initialize) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function initialize(baseURL) {\n        _utils2.default.cssLoadFile(\"static/style/jquery.rating.css\");\n        _utils2.default.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n        _utils2.default.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n        _utils2.default.cssLoadFile(\"static/style/library.css\");\n        _utils2.default.cssLoadFile(\"static/style/trackster.css\");\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function save_viz() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function () {\n            bookmarks.push({\n                position: $(this).children(\".position\").text(),\n                annotation: $(this).children(\".annotation\").text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = view.overview_drawable ? view.overview_drawable.config.get_value(\"name\") : null;\n\n        var viz_config = {\n            view: view.to_dict(),\n            viewport: {\n                chrom: view.chrom,\n                start: view.low,\n                end: view.high,\n                overview: overview_track_name\n            },\n            bookmarks: bookmarks\n        };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: view.vis_id,\n                title: view.config.get_value(\"name\"),\n                dbkey: view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        }).success(function (vis_info) {\n            Galaxy.modal.hide();\n            view.vis_id = vis_info.vis_id;\n            view.has_changes = false;\n\n            // Needed to set URL when first saving a visualization.\n            window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n        }).error(function () {\n            // show dialog\n            Galaxy.modal.show({\n                title: \"Could Not Save\",\n                body: \"Could not save visualization. Please try again later.\",\n                buttons: {\n                    Cancel: function Cancel() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function createButtonMenu() {\n        var self = this;\n\n        var menu = _iconButton2.default.create_icon_buttons_menu([{\n            icon_class: \"plus-button\",\n            title: \"Add tracks\",\n            on_click: function on_click() {\n                _visualization2.default.select_datasets({ dbkey: view.dbkey }, function (new_tracks) {\n                    _.each(new_tracks, function (track) {\n                        view.add_drawable(_tracks2.default.object_from_template(track, view, view));\n                    });\n                });\n            }\n        }, {\n            icon_class: \"block--plus\",\n            title: \"Add group\",\n            on_click: function on_click() {\n                view.add_drawable(new _tracks2.default.DrawableGroup(view, view, {\n                    name: \"New Group\"\n                }));\n            }\n        }, {\n            icon_class: \"bookmarks\",\n            title: \"Bookmarks\",\n            on_click: function on_click() {\n                // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                force_right_panel($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\");\n            }\n        }, {\n            icon_class: \"globe\",\n            title: \"Circster\",\n            on_click: function on_click() {\n                window.location = self.baseURL + \"visualization/circster?id=\" + view.vis_id;\n            }\n        }, {\n            icon_class: \"disk--arrow\",\n            title: \"Save\",\n            on_click: function on_click() {\n                self.save_viz();\n            }\n        }, {\n            icon_class: \"cross-circle\",\n            title: \"Close\",\n            on_click: function on_click() {\n                self.handle_unsaved_changes(view);\n            }\n        }], {\n            tooltip_config: { placement: \"bottom\" }\n        });\n\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function add_bookmark(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\");\n\n        var new_bookmark = $(\"<div/>\").addClass(\"bookmark\").appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\").addClass(\"position\").appendTo(new_bookmark);\n\n        var position_link = $(\"<a href=''/>\").text(position).appendTo(position_div).click(function () {\n            view.go_to(position);\n            return false;\n        });\n\n        var annotation_div = $(\"<div/>\").text(annotation).appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\").addClass(\"delete-icon-container\").prependTo(new_bookmark).click(function () {\n                // Remove bookmark.\n                new_bookmark.slideUp(\"fast\");\n                new_bookmark.remove();\n                view.has_changes = true;\n                return false;\n            });\n\n            var delete_icon = $(\"<a href=''/>\").addClass(\"icon-button delete\").appendTo(delete_icon_container);\n\n            annotation_div.make_text_editable({\n                num_rows: 3,\n                use_textarea: true,\n                help_text: \"Edit bookmark note\"\n            }).addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function create_visualization(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n        // Create view.\n        var self = this;\n\n        var view = new _tracks2.default.TracksterView(_.extend(view_config, { header: false }));\n\n        view.editor = true;\n        $.when(view.load_chroms_deferred).then(function (chrom_info) {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom;\n                var start = viewport_config.start;\n                var end = viewport_config.end;\n                var overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config;\n\n                var drawable_type;\n                var drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable(_tracks2.default.object_from_template(drawables_config[i], view, view));\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (view.drawables[i].config.get_value(\"name\") === overview_drawable_name) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(bookmark[\"position\"], bookmark[\"annotation\"], editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: view });\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router: function set_up_router(options) {\n        new _visualization2.default.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function init_keyboard_nav(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(function (e) {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function handle_unsaved_changes(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: function Cancel() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": function LeaveWithoutSaving() {\n                        $(window).off(\"beforeunload\");\n                        window.location = Galaxy.root + \"visualization\";\n                    },\n                    Save: function Save() {\n                        $.when(self.save_viz()).then(function () {\n                            window.location = Galaxy.root + \"visualization\";\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = Galaxy.root + \"visualization\";\n        }\n    }\n});\n\nvar TracksterView = Backbone.View.extend({\n    // initalize trackster\n    initialize: function initialize() {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\");\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(function () {\n            view.resize_window();\n        });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id) {\n            this.view_existing();\n        } else if (_queryStringParsing2.default.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new: function choose_existing_or_new() {\n        var self = this;\n        var dbkey = _queryStringParsing2.default.get(\"dbkey\");\n        var listTracksParams = {};\n\n        var dataset_params = {\n            dbkey: dbkey,\n            dataset_id: _queryStringParsing2.default.get(\"dataset_id\"),\n            hda_ldda: _queryStringParsing2.default.get(\"hda_ldda\"),\n            gene_region: _queryStringParsing2.default.get(\"gene_region\")\n        };\n\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body: \"<p><ul style='list-style: disc inside none'>You can add this dataset as:<li>a new track to one of your existing, saved Trackster sessions if they share the genome build: <b>\" + (dbkey || \"Not available.\") + \"</b></li><li>or create a new session with this dataset as the only track</li></ul></p>\",\n            buttons: {\n                Cancel: function Cancel() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"View in saved visualization\": function ViewInSavedVisualization() {\n                    self.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": function ViewInNewVisualization() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved: function view_in_saved(dataset_params) {\n        var tracks_grid = new _gridView2.default({\n            url_base: Galaxy.root + \"visualization/list_tracks\",\n            dict_format: true,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: \"Add Data to Saved Visualization\",\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: function Cancel() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"Add to visualization\": function AddToVisualization() {\n                    $(parent.document).find(\"input[name=id]:checked\").each(function () {\n                        dataset_params.id = $(this).val();\n                        window.location = Galaxy.root + \"visualization/trackster?\" + $.param(dataset_params);\n                    });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing: function view_existing() {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization({\n            container: $(\"#center .unified-panel-body\"),\n            name: viz_config.title,\n            vis_id: viz_config.vis_id,\n            dbkey: viz_config.dbkey\n        }, viz_config.viewport, viz_config.tracks, viz_config.bookmarks, true);\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new: function view_new() {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax({\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function error() {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: function success(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"New Visualization\",\n                    body: self.template_view_new(response),\n                    buttons: {\n                        Cancel: function Cancel() {\n                            window.location = Galaxy.root + \"visualizations/list\";\n                        },\n                        Create: function Create() {\n                            self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val());\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(function (r) {\n                    return r[1];\n                });\n                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes, galaxy_config.app.default_dbkey)) {\n                    $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function template_view_new(response) {\n        // start template\n        var html = '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' + '<div class=\"form-row\">' + '<label for=\"new-title\">Browser name:</label>' + '<div class=\"form-row-input\">' + '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' + \"</div>\" + '<div style=\"clear: both;\"></div>' + \"</div>\" + '<div class=\"form-row\">' + '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' + '<div class=\"form-row-input\">' + '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += \"<option value=\\\"\" + response[i][1] + \"\\\">\" + response[i][0] + \"</option>\";\n        }\n\n        // close selection/finalize template\n        html += \"</select></div><div style=\\\"clear: both;\\\"></div></div><div class=\\\"form-row\\\">Is the build not listed here? <a href=\\\"\" + Galaxy.root + \"user/dbkeys?use_panels=True\\\">Add a Custom Build</a></div></form>\";\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser: function create_browser(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization({\n            container: $(\"#center .unified-panel-body\"),\n            name: name,\n            dbkey: dbkey\n        }, galaxy_config.app.gene_region);\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor: function init_editor() {\n        // set title\n        $(\"#center .unified-panel-title\").text(view.config.get_value(\"name\") + \" (\" + view.dbkey + \")\");\n\n        // add dataset\n        if (galaxy_config.app.add_dataset) $.ajax({\n            url: Galaxy.root + \"api/datasets/\" + galaxy_config.app.add_dataset,\n            data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n            dataType: \"json\",\n            success: function success(track_data) {\n                view.add_drawable(_tracks2.default.object_from_template(track_data, view, view));\n            }\n        });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(function () {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high;\n\n            var annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on(\"beforeunload\", function () {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nexports.default = {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 34:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _visualization = __webpack_require__(9);\n\nvar _visualization2 = _interopRequireDefault(_visualization);\n\nvar _viz_views = __webpack_require__(35);\n\nvar _viz_views2 = _interopRequireDefault(_viz_views);\n\nvar _util = __webpack_require__(10);\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _slotting = __webpack_require__(36);\n\nvar _slotting2 = _interopRequireDefault(_slotting);\n\nvar _painters = __webpack_require__(37);\n\nvar _painters2 = _interopRequireDefault(_painters);\n\nvar _filters = __webpack_require__(38);\n\nvar _filters2 = _interopRequireDefault(_filters);\n\nvar _data = __webpack_require__(8);\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _tools = __webpack_require__(25);\n\nvar _tools2 = _interopRequireDefault(_tools);\n\nvar _config = __webpack_require__(11);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _bbiDataManager = __webpack_require__(39);\n\nvar _bbiDataManager2 = _interopRequireDefault(_bbiDataManager);\n\n__webpack_require__(15);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function is_container(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function moveable(element, handle_class, container_selector, element_js_obj) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element.bind(\"drag\", { handle: \".\" + handle_class, relative: true }, function (e, d) {\n        var element = $(this);\n        var parent = $(this).parent();\n\n        var // Only sorting amongst tracks and groups.\n        children = parent.children(\".track,.group\");\n\n        var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n        var child;\n        var container;\n        var top;\n        var bottom;\n        var i;\n\n        //\n        // Enable three types of dragging: (a) out of container; (b) into container;\n        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n        //\n\n        // Handle dragging out of container.\n        container = $(this).parents(container_selector);\n        if (container.length !== 0) {\n            top = container.position().top;\n            bottom = top + container.outerHeight();\n            var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n            if (d.offsetY < top) {\n                // Moving above container.\n                $(this).insertBefore(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable_before(this_obj, cur_container);\n                return;\n            } else if (d.offsetY > bottom) {\n                // Moving below container.\n                $(this).insertAfter(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle dragging into container. Child is appended to container's content_div.\n        container = null;\n        for (i = 0; i < children.length; i++) {\n            child = $(children.get(i));\n            top = child.position().top;\n            bottom = top + child.outerHeight();\n            // Dragging into container if child is a container and offset is inside container.\n            if (child.is(container_selector) && this !== child.get(0) && d.offsetY >= top && d.offsetY <= bottom) {\n                // Append/prepend based on where offsetY is closest to and return.\n                if (d.offsetY - top < bottom - d.offsetY) {\n                    child.find(\".content-div\").prepend(this);\n                } else {\n                    child.find(\".content-div\").append(this);\n                }\n                // Update containers. Object may not have container if it is being moved quickly.\n                if (this_obj.container) {\n                    this_obj.container.remove_drawable(this_obj);\n                }\n                html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle sibling movement, aka sorting.\n\n        // Determine new position\n        for (i = 0; i < children.length; i++) {\n            child = $(children.get(i));\n            if (d.offsetY < child.position().top &&\n            // Cannot move tracks above reference track or intro div.\n            !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\"))) {\n                break;\n            }\n        }\n\n        // If not already in the right place, move. Need\n        // to handle the end specially since we don't have\n        // insert at index\n        if (i === children.length) {\n            if (this !== children.get(i - 1)) {\n                parent.append(this);\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n            }\n        } else if (this !== children.get(i)) {\n            $(this).insertBefore(children.get(i));\n            // Need to adjust insert position if moving down because move is changing\n            // indices of all list items.\n            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n        }\n    }).bind(\"dragstart\", function () {\n        $(this).addClass(\"dragging\");\n    }).bind(\"dragend\", function () {\n        $(this).removeClass(\"dragging\");\n    });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\nERROR_PADDING = 20;\n\nvar // Maximum number of rows un a slotted track\nMAX_FEATURE_DEPTH = 100;\n\nvar // Minimum width for window for squish to be used.\nMIN_SQUISH_VIEW_WIDTH = 12000;\n\nvar // Number of pixels per tile, not including left offset.\nTILE_SIZE = 400;\n\nvar DEFAULT_DATA_QUERY_WAIT = 5000;\n\nvar // Maximum number of chromosomes that are selectable at any one time.\nMAX_CHROMS_SELECTABLE = 100;\n\nvar DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nvar DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nvar DATA_NONE = \"No data for this chrom/contig.\";\n\nvar DATA_PENDING = \"Preparing data. This can take a while for a large dataset. \" + \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nvar DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\nvar DATA_LOADING = \"Loading data...\";\nvar DATA_OK = \"Ready for display\";\nvar TILE_CACHE_SIZE = 10;\nvar DATA_CACHE_SIZE = 20;\n\nvar // Numerical/continuous data display modes.\nCONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function beforeSend(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function success(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function Drawable(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = _config2.default.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new _viz_views2.default.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(function () {\n            icons_div.show();\n        }, function () {\n            icons_div.hide();\n        });\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n// Hide/show drawable content.\n// FIXME: make this an odict for easier lookup.\n{\n    name: \"toggle_icon\",\n    title: \"Hide/show content\",\n    css_class: \"toggle\",\n    on_click_fn: function on_click_fn(drawable) {\n        if (drawable.config.get_value(\"content_visible\")) {\n            drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n            drawable.hide_contents();\n            drawable.config.set_value(\"content_visible\", false);\n        } else {\n            drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n            drawable.config.set_value(\"content_visible\", true);\n            drawable.show_contents();\n        }\n    }\n},\n// Edit settings.\n{\n    name: \"settings_icon\",\n    title: \"Edit settings\",\n    css_class: \"gear\",\n    on_click_fn: function on_click_fn(drawable) {\n        var view = new _config2.default.ConfigSettingCollectionView({\n            collection: drawable.config\n        });\n        view.render_in_modal(\"Configure Track\");\n    }\n},\n// Remove.\n{\n    name: \"remove_icon\",\n    title: \"Remove\",\n    css_class: \"remove-icon\",\n    on_click_fn: function on_click_fn(drawable) {\n        // Tooltip for remove icon must be deleted when drawable is deleted.\n        $(\".tooltip\").remove();\n        drawable.remove();\n    }\n}];\n\nextend(Drawable.prototype, {\n    config_params: [{ key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" }, {\n        key: \"content_visible\",\n        type: \"bool\",\n        default_value: true,\n        hidden: true\n    }],\n\n    config_onchange: function config_onchange() {},\n\n    init: function init() {},\n\n    changed: function changed() {\n        this.view.changed();\n    },\n\n    can_draw: function can_draw() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function request_draw() {},\n\n    _draw: function _draw(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function to_dict() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function set_name(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function revert_name() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function remove() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function () {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function build_container_div() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function update_icons() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function hide_contents() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function show_contents() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function get_drawables() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function DrawableCollection(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function unpack_drawables(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function init() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function _draw(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function to_dict() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function add_drawable(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function add_drawable_before(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function replace_drawable(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function remove_drawable(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function move_drawable(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function get_drawables() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function get_tracks(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function DrawableGroup(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\").addClass(\"content-div\").attr(\"id\", \"group_\" + this.id + \"_content_div\").appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new _filters2.default.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new _filters2.default.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [Drawable.prototype.action_icons_def[0], Drawable.prototype.action_icons_def[1],\n    // Replace group with composite track.\n    {\n        name: \"composite_icon\",\n        title: \"Show composite track\",\n        css_class: \"layers-stack\",\n        on_click_fn: function on_click_fn(group) {\n            $(\".tooltip\").remove();\n            group.show_composite_track();\n        }\n    },\n    // Toggle track filters.\n    {\n        name: \"filters_icon\",\n        title: \"Filters\",\n        css_class: \"ui-slider-050\",\n        on_click_fn: function on_click_fn(group) {\n            // TODO: update Tooltip text.\n            if (group.filters_manager.visible()) {\n                // Hiding filters.\n                group.filters_manager.clear_filters();\n                group._restore_filter_managers();\n                // TODO: maintain current filter by restoring and setting saved manager's\n                // settings to current/shared manager's settings.\n                // TODO: need to restore filter managers when moving drawable outside group.\n            } else {\n                // Showing filters.\n                group.setup_multitrack_filtering();\n                group.request_draw({ clear_tile_cache: true });\n            }\n            group.filters_manager.toggle();\n        }\n    }, Drawable.prototype.action_icons_def[2]],\n\n    build_container_div: function build_container_div() {\n        var container_div = $(\"<div/>\").addClass(\"group\").attr(\"id\", \"group_\" + this.id);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function hide_contents() {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function show_contents() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function update_icons() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        } else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        } else {\n            // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i;\n\n            var j;\n            var drawable;\n            var same_type = true;\n            var a_type = this.drawables[0].get_type();\n            var num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            } else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {};\n\n                var filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var filters;\n                var new_filter;\n                var min;\n                var max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new _filters2.default.NumberFilter({\n                            name: filters[0].name,\n                            index: filters[0].index\n                        });\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            } else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function _restore_filter_managers() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function setup_multitrack_filtering() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                var drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function show_composite_track() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value(\"name\"),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function add_drawable(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function remove_drawable(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function to_dict() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), {\n            filters: this.filters_manager.to_dict()\n        });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function request_draw(options) {\n        _.each(this.drawables, function (d) {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function initialize(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new _visualization2.default.CanvasManager(this.container.get(0).ownerDocument);\n        this.reset();\n\n        // Define track configuration\n        this.config = _config2.default.ConfigSettingCollection.from_models_and_saved_values([{\n            key: \"name\",\n            label: \"Name\",\n            type: \"text\",\n            default_value: \"\"\n        }, {\n            key: \"a_color\",\n            label: \"A Color\",\n            type: \"color\",\n            default_value: \"#FF0000\"\n        }, {\n            key: \"c_color\",\n            label: \"C Color\",\n            type: \"color\",\n            default_value: \"#00FF00\"\n        }, {\n            key: \"g_color\",\n            label: \"G Color\",\n            type: \"color\",\n            default_value: \"#0000FF\"\n        }, {\n            key: \"t_color\",\n            label: \"T Color\",\n            type: \"color\",\n            default_value: \"#FF00FF\"\n        }, {\n            key: \"n_color\",\n            label: \"N Color\",\n            type: \"color\",\n            default_value: \"#AAAAAA\"\n        }], { name: obj_dict.name });\n    },\n\n    render: function render() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\").addClass(\"top-container\").appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\").addClass(\"content\").appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\").addClass(\"bottom-container\").appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\").addClass(\"top-labeltrack\").appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\").addClass(\"viewport-container\").attr(\"id\", \"viewport-container\").appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\").addClass(\"intro\").appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\").text(\"Add Datasets to Visualization\").addClass(\"action-button\").appendTo(this.intro_div).click(function () {\n            _visualization2.default.select_datasets({ dbkey: view.dbkey }, function (tracks) {\n                _.each(tracks, function (track) {\n                    view.add_drawable(object_from_template(track, view, view));\n                });\n            });\n        });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\").addClass(\"trackster-nav-container\").prependTo(this.top_container);\n        this.nav = $(\"<div/>\").addClass(\"trackster-nav\").appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\").addClass(\"overview\").appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\").addClass(\"overview-viewport\").appendTo(this.overview);\n        this.overview_close = $(\"<a/>\").attr(\"title\", \"Close overview\").addClass(\"icon-button overview-close tooltip\").hide().appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\").addClass(\"overview-highlight\").hide().appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\").addClass(\"overview-boxback\").appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\").addClass(\"overview-box\").appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\").addClass(\"nav-controls\").appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\").attr({ name: \"chrom\" }).addClass(\"chrom-nav\").append(\"<option value=''>Loading</option>\").appendTo(this.nav_controls);\n        var submit_nav = function submit_nav(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\").addClass(\"nav-input\").hide().bind(\"keyup focusout\", submit_nav).appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\").addClass(\"location\").attr(\"title\", \"Click to change location\").tooltip({ placement: \"bottom\" }).appendTo(this.nav_controls);\n        this.location_span.click(function () {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function source(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function (t) {\n                        return t.data_manager.search_features(request.term).success(function (dataset_features) {\n                            all_features = all_features.concat(dataset_features);\n                        });\n                    });\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function () {\n                        response($.map(all_features, function (feature) {\n                            return {\n                                label: feature[0],\n                                value: feature[1]\n                            };\n                        }));\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\").attr(\"type\", \"hidden\").val(this.vis_id).appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\").attr(\"id\", \"zoom-out\").attr(\"title\", \"Zoom out\").tooltip({ placement: \"bottom\" }).click(function () {\n            view.zoom_out();\n        }).appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\").attr(\"id\", \"zoom-in\").attr(\"title\", \"Zoom in\").tooltip({ placement: \"bottom\" }).click(function () {\n            view.zoom_in();\n        }).appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", function () {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function (e) {\n            $(this).find(\"input\").trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function (e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box.bind(\"dragstart\", function (e, d) {\n            this.current_x = d.offsetX;\n        }).bind(\"drag\", function (e, d) {\n            var delta = d.offsetX - this.current_x;\n            this.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low));\n            view.move_delta(-delta_chrom);\n        });\n\n        this.overview_close.click(function () {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container.bind(\"draginit\", function (e, d) {\n            // Disable interaction if started in scrollbar (for webkit)\n            if (e.clientX > view.viewport_container.width() - 16) {\n                return false;\n            }\n        }).bind(\"dragstart\", function (e, d) {\n            d.original_low = view.low;\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n        }).bind(\"drag\", function (e, d) {\n            var container = $(this);\n            var delta = d.offsetX - d.current_x;\n            var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n            container.scrollTop(new_scroll);\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n            view.move_delta(delta_chrom);\n        });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n         // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack.bind(\"dragstart\", function (e, d) {\n            return $(\"<div/>\").addClass(\"zoom-area\").css(\"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1).appendTo($(this));\n        }).bind(\"drag\", function (e, d) {\n            $(d.proxy).css({\n                left: Math.min(e.pageX, d.startX) - view.container.offset().left,\n                width: Math.abs(e.pageX - d.startX)\n            });\n\n            var min = Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n            var max = Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n            var span = view.high - view.low;\n            var width = view.viewport_container.width();\n            view.update_location(Math.round(min / width * span) + view.low, Math.round(max / width * span) + view.low);\n        }).bind(\"dragend\", function (e, d) {\n            var min = Math.min(e.pageX, d.startX);\n            var max = Math.max(e.pageX, d.startX);\n            var span = view.high - view.low;\n            var width = view.viewport_container.width();\n            var old_low = view.low;\n            view.low = Math.round(min / width * span) + old_low;\n            view.high = Math.round(max / width * span) + old_low;\n            $(d.proxy).remove();\n            view.request_redraw();\n        });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n         // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(new LabelTrack(this, { content_div: this.top_labeltrack }));\n\n        $(window).bind(\"resize\", function () {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function () {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", function () {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function get_base_color(base) {\n        return this.config.get_value(base.toLowerCase() + \"_color\") || this.config.get_value(\"n_color\");\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function changed() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function update_intro_div() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function trigger_navigate(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function () {\n                self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n            }, 500);\n        } else {\n            view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n        }\n    },\n\n    update_location: function update_location(low, high) {\n        this.location_span.text(_util2.default.commatize(low) + \" - \" + _util2.default.commatize(high));\n        this.nav_input.val(this.chrom + \":\" + _util2.default.commatize(low) + \"-\" + _util2.default.commatize(high));\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function load_chroms(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this;\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function success(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($(\"<option value=\\\"previous\\\">Previous \" + MAX_CHROMS_SELECTABLE + \"</option>\"));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($(\"<option value=\\\"next\\\">Next \" + MAX_CHROMS_SELECTABLE + \"</option>\"));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function error() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function change_chrom(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function () {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function (v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, function () {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function go_to(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function move_fraction(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function move_delta(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function () {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function add_drawable(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", function () {\n            self.changed();\n        });\n    },\n\n    add_label_track: function add_label_track(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function remove_drawable(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function () {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function reset() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function request_redraw(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function (track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function (to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function () {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function _redraw() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = this.low / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var width_px = (this.high - this.low) / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box.css({\n            left: left_px,\n            width: Math.max(min_width_px, width_px)\n        }).show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px) / 2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function (track_options) {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function (label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function zoom_in(point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function zoom_out() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function resize_viewport() {\n        this.viewport_container.height(this.container.height() - this.top_container.height() - this.bottom_container.height());\n    },\n\n    /** Called when window is resized. */\n    resize_window: function resize_window() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function set_overview(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function () {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(view.overview_drawable.content_div.height() + view.overview_box.outerHeight());\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function reset_overview() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = _tools2.default.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function initialize(options) {\n        _tools2.default.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function state_dict(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function render() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\").addClass(\"param-label\").text(param.get(\"label\")).appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\").addClass(\"param-input\").html(param.get(\"html\")).appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function update_value(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function initialize(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function render() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div.bind(\"drag\", function (e) {\n            e.stopPropagation();\n        }).click(function (e) {\n            e.stopPropagation();\n        }).bind(\"dblclick\", function (e) {\n            e.stopPropagation();\n        }).keydown(function (e) {\n            e.stopPropagation();\n        });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\").appendTo(parent_div).text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(function (param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function () {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\").addClass(\"param-row\").appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on visible region\").appendTo(run_tool_row);\n        run_on_region_button.click(function () {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(function () {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function set_visible() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function update_params() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function run_on_dataset() {\n        var tool = this.model;\n        this.run(\n        // URL params.\n        {\n            target_dataset_id: this.model.get(\"track\").dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id\n        }, null, function (track_data) {\n            Galaxy.modal.show({\n                title: tool.get(\"name\") + \" is Running\",\n                body: tool.get(\"name\") + \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                buttons: {\n                    Close: function Close() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        });\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function run_on_region() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new _visualization2.default.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        var current_track = track;\n\n        var // Set name of track to include tool name, parameters, and region used.\n        track_name = tool.get(\"name\") + current_track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track, function (track_data) {\n            new_track.set_dataset(new _data2.default.Dataset(track_data));\n            new_track.tiles_div.text(\"Running job.\");\n            new_track.init();\n        });\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function run(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new _util2.default.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function success_fn(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function (response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function FilterScaler(filter, default_val) {\n    _painters2.default.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function (feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (this.filter.high === Number.MAX_VALUE || this.filter.low === -Number.MAX_VALUE || this.filter.low === this.filter.high) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (parseFloat(feature_data[this.filter.index]) - this.filter.low) / (this.filter.high - this.filter.low);\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function Tile(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function () {};\n\nvar LineTrackTile = function LineTrackTile(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function () {};\n\nvar FeatureTrackTile = function FeatureTrackTile(track, region, w_scale, canvas, data, mode, message, all_slotted, feature_mapper, incomplete_features, seq_data) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n         var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n         // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n         // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n         more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function () {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n     // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n     $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n         if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n                 // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n                 // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n             // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n             // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function Track(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset = obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new _data2.default.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait = \"data_query_wait\" in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager = \"data_manager\" in obj_dict ? obj_dict.data_manager : new _visualization2.default.GenomeDataManager({\n        dataset: this.dataset,\n        // HACK: simulate 'genome' attributes from view for now.\n        // View should eventually use Genome object.\n        genome: new _visualization2.default.Genome({\n            key: view.dbkey,\n            chroms_info: {\n                chrom_info: view.chrom_data\n            }\n        }),\n        data_mode_compatible: this.data_and_mode_compatible,\n        can_subset: this.can_subset\n    });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n    // Change track mode.\n    {\n        name: \"mode_icon\",\n        title: \"Set display mode\",\n        css_class: \"chevron-expand\",\n        on_click_fn: function on_click_fn() {}\n    },\n    // Hide/show content.\n    Drawable.prototype.action_icons_def[0],\n    // Set track as overview.\n    {\n        name: \"overview_icon\",\n        title: \"Set as overview\",\n        css_class: \"application-dock-270\",\n        on_click_fn: function on_click_fn(track) {\n            track.view.set_overview(track);\n        }\n    },\n    // Edit config.\n    Drawable.prototype.action_icons_def[1],\n    // Toggle track filters.\n    {\n        name: \"filters_icon\",\n        title: \"Filters\",\n        css_class: \"ui-slider-050\",\n        on_click_fn: function on_click_fn(drawable) {\n            // TODO: update Tooltip text.\n            if (drawable.filters_manager.visible()) {\n                drawable.filters_manager.clear_filters();\n            } else {\n                drawable.filters_manager.init_filters();\n            }\n            drawable.filters_manager.toggle();\n        }\n    },\n    // Toggle track tool.\n    {\n        name: \"tools_icon\",\n        title: \"Tool\",\n        css_class: \"hammer\",\n        on_click_fn: function on_click_fn(track) {\n            // TODO: update Tooltip text.\n\n            track.tool.toggle();\n\n            // Update track name.\n            if (track.tool.is_visible()) {\n                track.set_name(track.config.get_value(\"name\") + track.tool_region_and_parameters_str());\n            } else {\n                track.revert_name();\n            }\n            // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n            $(\".tooltip\").remove();\n        }\n    },\n    // Go to parameter exploration visualization.\n    {\n        name: \"param_space_viz_icon\",\n        title: \"Tool parameter space visualization\",\n        css_class: \"arrow-split\",\n        on_click_fn: function on_click_fn(track) {\n            var html = \"<strong>Tool</strong>:\" + track.tool.get(\"name\") + \"<br/><strong>Dataset</strong>:\" + track.config.get_value(\"name\") + \"<br/><strong>Region(s)</strong>: <select name=\\\"regions\\\"><option value=\\\"cur\\\">current viewing area</option><option value=\\\"bookmarks\\\">bookmarks</option><option value=\\\"both\\\">current viewing area and bookmarks</option></select>\";\n\n            var cancel_fn = function cancel_fn() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n            };\n\n            var ok_fn = function ok_fn() {\n                var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                    regions,\n                    view_region = new _visualization2.default.GenomeRegion({\n                    chrom: view.chrom,\n                    start: view.low,\n                    end: view.high\n                }),\n                    bookmarked_regions = _.map($(\".bookmark\"), function (elt) {\n                    return new _visualization2.default.GenomeRegion({\n                        from_str: $(elt).children(\".position\").text()\n                    });\n                });\n\n                // Get regions for visualization.\n                if (regions_to_use === \"cur\") {\n                    // Use only current region.\n                    regions = [view_region];\n                } else if (regions_to_use === \"bookmarks\") {\n                    // Use only bookmarks.\n                    regions = bookmarked_regions;\n                } else {\n                    // Use both current region and bookmarks.\n                    regions = [view_region].concat(bookmarked_regions);\n                }\n\n                Galaxy.modal.hide();\n\n                // Go to visualization.\n                window.location.href = Galaxy.root + \"visualization/sweepster?\" + $.param({\n                    dataset_id: track.dataset.id,\n                    hda_ldda: track.dataset.get(\"hda_ldda\"),\n                    regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                });\n            };\n\n            var check_enter_esc = function check_enter_esc(e) {\n                if ((e.keyCode || e.which) === 27) {\n                    // Escape key\n                    cancel_fn();\n                } else if ((e.keyCode || e.which) === 13) {\n                    // Enter key\n                    ok_fn();\n                }\n            };\n\n            // show dialog\n            Galaxy.modal.show({\n                title: \"Visualize tool parameter space and output from different parameter settings?\",\n                body: html,\n                buttons: { No: cancel_fn, Yes: ok_fn }\n            });\n        }\n    },\n    // Remove track.\n    Drawable.prototype.action_icons_def[2]],\n\n    can_draw: function can_draw() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function build_container_div() {\n        return $(\"<div/>\").addClass(\"track\").attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function set_dataset(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function on_resize() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function add_resize_handle() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(function () {\n            if (track.config.get_value(\"content_visible\")) {\n                in_handle = true;\n                drag_control.show();\n            }\n        }, function () {\n            in_handle = false;\n            if (!in_drag) {\n                drag_control.hide();\n            }\n        });\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control.hide().bind(\"dragstart\", function (e, d) {\n            in_drag = true;\n            d.original_height = $(track.content_div).height();\n        }).bind(\"drag\", function (e, d) {\n            var new_height = Math.min(Math.max(d.original_height + d.deltaY, track.min_height_px), track.max_height_px);\n            $(track.tiles_div).css(\"height\", new_height);\n            track.visible_height_px = track.max_height_px === new_height ? 0 : new_height;\n            track.on_resize();\n        }).bind(\"dragend\", function (e, d) {\n            track.tile_cache.clear();\n            in_drag = false;\n            if (!in_handle) {\n                drag_control.hide();\n            }\n            track.config.set_value(\"height\", track.visible_height_px);\n            track.changed();\n        }).appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function hide_contents() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function show_contents() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function get_type() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function show_message(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\").addClass(\"message\").html(msg_html).appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function init(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, function (result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append($(\"<a href='javascript:void(0);'></a>\").text(\"View error\").click(function () {\n                        Galaxy.modal.show({\n                            title: \"Trackster Error\",\n                            body: \"<pre>\" + result.message + \"</pre>\",\n                            buttons: {\n                                Close: function Close() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    }));\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append($(\"<a href='javascript:void(0);'></a>\").text(\"Try again\").click(function () {\n                        track.init(true);\n                    }));\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (result === \"no data\" || result.data !== undefined && (result.data === null || result.data.length === 0)) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function () {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\"height\", track.visible_height_px + \"px\");\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function () {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function predraw_init() {\n        var track = this;\n        return $.getJSON(track.dataset.url(), {\n            data_type: \"data\",\n            stats: true,\n            chrom: track.view.chrom,\n            low: 0,\n            high: track.view.max_high,\n            hda_ldda: track.dataset.get(\"hda_ldda\")\n        }, function (result) {\n            var data = result.data;\n\n            // Tracks may not have stat data either because there is no data or data is not yet ready.\n            if (data && data.min !== undefined && data.max !== undefined) {\n                // Compute default minimum and maximum values\n                var min_value = data.min;\n\n                var max_value = data.max;\n                // If mean and sd are present, use them to compute a ~95% window\n                // but only if it would shrink the range on one side\n                min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                // Update config, prefs\n                track.config.set_default_value(\"min_value\", min_value);\n                track.config.set_default_value(\"max_value\", max_value);\n                track.config.set_value(\"min_value\", min_value);\n                track.config.set_value(\"max_value\", max_value);\n            }\n        });\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function get_drawables() {\n        return this;\n    }\n});\n\nvar TiledTrack = function TiledTrack(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new _filters2.default.FiltersManager(this, \"filters\" in obj_dict ? obj_dict.filters : null);\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool ? new TracksterTool(_.extend(obj_dict.tool, {\n        track: this,\n        tool_state: obj_dict.tool_state\n    })) : null;\n    this.tile_cache = new _visualization2.default.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\").addClass(\"overlay\").appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n    // Show more rows when all features are not slotted.\n    {\n        name: \"show_more_rows_icon\",\n        title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n        css_class: \"exclamation\",\n        on_click_fn: function on_click_fn(track) {\n            $(\".tooltip\").remove();\n            track.slotters[track.view.resolution_px_b].max_rows *= 2;\n            track.request_draw({ clear_tile_cache: true });\n        },\n        hide: true\n    }]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function copy(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function set_filters_manager(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function to_dict() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function set_min_max() {\n        var track = this;\n\n        return $.getJSON(track.dataset.url(), {\n            data_type: \"data\",\n            stats: true,\n            chrom: track.view.chrom,\n            low: 0,\n            high: track.view.max_high,\n            hda_ldda: track.dataset.get(\"hda_ldda\")\n        }, function (result) {\n            var data = result.data;\n            if (isNaN(parseFloat(track.config.get_value(\"min_value\"))) || isNaN(parseFloat(track.config.get_value(\"max_value\")))) {\n                // Compute default minimum and maximum values\n                var min_value = data.min;\n\n                var max_value = data.max;\n                // If mean and sd are present, use them to compute a ~95% window\n                // but only if it would shrink the range on one side\n                min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                // Update the prefs\n                track.config.set_value(\"min_value\", min_value);\n                track.config.set_value(\"max_value\", max_value);\n            }\n        });\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function change_mode(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function update_icons() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function _gen_tile_cache_key(w_scale, tile_region) {\n        return w_scale + \"_\" + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function request_draw(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function before_draw() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function _draw(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new _visualization2.default.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function (tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div.children(\".remove\").removeClass(\"remove\").remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function () {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function (t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function _add_yaxis_label(type, on_change) {\n        var track = this;\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(\".yaxislabel.\" + css_class);\n        var value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change = on_change || function () {\n            track.request_draw({ clear_tile_cache: true });\n        };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\").text(value).make_text_editable({\n                num_cols: 12,\n                on_finish: function on_finish(new_val) {\n                    $(\".tooltip\").remove();\n                    track.config.set_value(pref_name, round(new_val, 1));\n                    on_change();\n                },\n                help_text: \"Set \" + text + \" value\"\n            }).addClass(\"yaxislabel \" + css_class).css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function postdraw_actions(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function (tile) {\n            return tile instanceof LineTrackTile;\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function (tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function (tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function (tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function get_mode(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function update_auto_mode(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function _get_drawables() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function draw_helper(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var // Useful vars.\n        track = this;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = function is_tile(o) {\n            return o && \"track\" in o;\n        };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function get_tile_data() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, function (m) {\n                return m === mode;\n            }) ? \"Coverage\" : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function (d // Get the track data/promise.\n            ) {\n                return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(view.reference_track.data_manager.get_data(region, mode, resolution, view.reference_track.data_url_extra_params));\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(function () {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, function (d) {\n                return _util2.default.is_deferred(d);\n            })) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(function (tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n\n            var drawing_heights = [];\n\n            _.each(drawables, function (d, i) {\n                var mode = d.mode;\n                var data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var all_data_index = 0;\n\n            var width = Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset;\n\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function (d, i) {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function get_canvas_height(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function _draw_line_track_tile(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ([undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ([undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1) {\n            this.config.set_value(\"max_value\", _.max(_.map(result.data, function (d) {\n                return d[1];\n            })) || 0);\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new _painters2.default.LinePainter(result.data, region.get(\"start\"), region.get(\"end\"), this.config.to_key_value_dict(), mode);\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function draw_tile(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function show_tile(tile, w_scale) {\n        var track = this;\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round((tile.low - (this.is_overview ? this.view.max_low : this.view.low)) * w_scale);\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element.parent().children().css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function tool_region_and_parameters_str(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function data_and_mode_compatible(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (data.dataset_type === \"bigwig\" || data.extra_info === \"no_detail\") {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function can_subset(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function init_for_tool_data() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n             // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n             // Tool-execution specific post-draw init:\n             // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n             // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n             // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function LabelTrack(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function init() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function predraw_init() {},\n\n    _draw: function _draw(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(Math.pow(10, Math.floor(Math.log(range) / Math.log(10))));\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor((position - view.low) / range * width);\n            new_div.append($(\"<div/>\").addClass(\"pos-label\").text(_util2.default.commatize(position)).css({\n                left: screenPosition\n            }));\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function CompositeTrack(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function (d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function build_config_params() {\n        return _.union(Drawable.prototype.config_params, [{\n            key: \"min_value\",\n            label: \"Min Value\",\n            type: \"float\",\n            default_value: undefined\n        }, {\n            key: \"max_value\",\n            label: \"Max Value\",\n            type: \"float\",\n            default_value: undefined\n        }, {\n            key: \"mode\",\n            type: \"string\",\n            default_value: this.mode,\n            hidden: true\n        }, {\n            key: \"height\",\n            type: \"int\",\n            default_value: 30,\n            hidden: true\n        }]);\n    },\n\n    action_icons_def: [\n    // Create composite track from group's tracks.\n    {\n        name: \"composite_icon\",\n        title: \"Show individual tracks\",\n        css_class: \"layers-stack\",\n        on_click_fn: function on_click_fn(track) {\n            $(\".tooltip\").remove();\n            track.show_group();\n        }\n    }].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function config_onchange() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function on_resize() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function (d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function change_mode(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function init() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function () {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function update_icons() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function _get_drawables() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function show_group() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function before_draw() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, function (d) {\n            return d.config.get_value(\"min_value\");\n        }));\n\n        var max = _.max(_.map(this.drawables, function (d) {\n            return d.config.get_value(\"max_value\");\n        }));\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function (d) {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function update_all_min_max() {\n        var track = this;\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, function (d) {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function postdraw_actions(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = function t() {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function ReferenceTrack(view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new _visualization2.default.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function build_config_params() {\n        return _.union(Drawable.prototype.config_params, [{\n            key: \"height\",\n            type: \"int\",\n            default_value: 13,\n            hidden: true\n        }]);\n    },\n\n    init: function init() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function predraw_init() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function draw_helper(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function can_subset(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function draw_tile(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function LineTrack(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\")).then(function (supportsByteRanges) {\n        if (supportsByteRanges) {\n            self.data_manager = new _bbiDataManager2.default.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function build_config_params() {\n        return _.union(Drawable.prototype.config_params, [{ key: \"color\", label: \"Color\", type: \"color\" }, {\n            key: \"min_value\",\n            label: \"Min Value\",\n            type: \"float\",\n            default_value: undefined\n        }, {\n            key: \"max_value\",\n            label: \"Max Value\",\n            type: \"float\",\n            default_value: undefined\n        }, {\n            key: \"mode\",\n            type: \"string\",\n            default_value: this.mode,\n            hidden: true\n        }, {\n            key: \"height\",\n            type: \"int\",\n            default_value: 30,\n            hidden: true\n        }]);\n    },\n\n    config_onchange: function config_onchange() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function before_draw() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function draw_tile(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function can_subset(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function postdraw_actions(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function DiagonalHeatmapTrack(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    build_config_params: function build_config_params() {\n        return _.union(Drawable.prototype.config_params, [{\n            key: \"pos_color\",\n            label: \"Positive Color\",\n            type: \"color\",\n            default_value: \"#FF8C00\"\n        }, {\n            key: \"neg_color\",\n            label: \"Negative Color\",\n            type: \"color\",\n            default_value: \"#4169E1\"\n        }, {\n            key: \"min_value\",\n            label: \"Min Value\",\n            type: \"int\",\n            default_value: undefined\n        }, {\n            key: \"max_value\",\n            label: \"Max Value\",\n            type: \"int\",\n            default_value: undefined\n        }, {\n            key: \"mode\",\n            type: \"string\",\n            default_value: this.mode,\n            hidden: true\n        }, {\n            key: \"height\",\n            type: \"int\",\n            default_value: 500,\n            hidden: true\n        }]);\n    },\n\n    config_onchange: function config_onchange() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function predraw_init() {\n        var track = this;\n        return $.getJSON(track.dataset.url(), {\n            data_type: \"data\",\n            stats: true,\n            chrom: track.view.chrom,\n            low: 0,\n            high: track.view.max_high,\n            hda_ldda: track.dataset.get(\"hda_ldda\")\n        }, function (result) {\n            var data = result.data;\n        });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function draw_tile(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas;\n\n        var painter = new _painters2.default.DiagonalHeatmapPainter(result.data, region.get(\"start\"), region.get(\"end\"), this.config.to_key_value_dict(), mode);\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function FeatureTrack(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function build_config_params() {\n        return _.union(Drawable.prototype.config_params, [{\n            key: \"block_color\",\n            label: \"Block color\",\n            type: \"color\"\n        }, {\n            key: \"reverse_strand_color\",\n            label: \"Antisense strand color\",\n            type: \"color\"\n        }, {\n            key: \"label_color\",\n            label: \"Label color\",\n            type: \"color\",\n            default_value: \"black\"\n        }, {\n            key: \"show_counts\",\n            label: \"Show summary counts\",\n            type: \"bool\",\n            default_value: true,\n            help: \"Show the number of items in each bin when drawing summary histogram\"\n        }, {\n            key: \"min_value\",\n            label: \"Histogram minimum\",\n            type: \"float\",\n            default_value: undefined,\n            help: \"clear value to set automatically\"\n        }, {\n            key: \"max_value\",\n            label: \"Histogram maximum\",\n            type: \"float\",\n            default_value: undefined,\n            help: \"clear value to set automatically\"\n        }, {\n            key: \"connector_style\",\n            label: \"Connector style\",\n            type: \"select\",\n            default_value: \"fishbones\",\n            options: [{\n                label: \"Line with arrows\",\n                value: \"fishbone\"\n            }, { label: \"Arcs\", value: \"arcs\" }]\n        }, {\n            key: \"mode\",\n            type: \"string\",\n            default_value: this.mode,\n            hidden: true\n        }, {\n            key: \"height\",\n            type: \"int\",\n            default_value: 0,\n            hidden: true\n        }]);\n    },\n\n    config_onchange: function config_onchange() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function set_painter_from_config() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = _painters2.default.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = _painters2.default.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function postdraw_actions(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this;\n        var i;\n\n        var line_track_tiles = _.filter(tiles, function (t) {\n            return t instanceof LineTrackTile;\n        });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), function (inc_features) {\n                _.each(inc_features, function (feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function (tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(all_incomplete_features, _.map(tile.incomplete_features, function (f) {\n                    return f[0];\n                }));\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = self.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(tile.canvas.height, self.get_canvas_height(features, tile.mode, tile.w_scale, 100));\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(features, new_canvas_ctx, tile.mode, tile.region, tile.w_scale, tile.seq_data);\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n             for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (filter.applies_to(example_feature) && filter.min !== filter.max) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function update_auto_mode(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function incremental_slots(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new _slotting2.default.FeatureSlotter(level, mode, MAX_FEATURE_DEPTH, function (x) {\n                return dummy_context.measureText(x);\n            });\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function get_mode(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function get_canvas_height(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width));\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function draw_tile(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter ? new FilterScaler(this.filters_manager.alpha_filter) : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter ? new FilterScaler(this.filters_manager.height_filter) : null;\n\n        var painter = new this.painter(filtered, tile_low, tile_high, this.config.to_key_value_dict(), mode, filter_alpha_scaler, filter_height_scaler,\n        // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n        ref_seq, function (b) {\n            return track.view.get_base_color(b);\n        });\n\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(track, region, w_scale, canvas, result.data, mode, result.message, all_slotted, feature_mapper, incomplete_features, ref_seq);\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function VariantTrack(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = _painters2.default.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function build_config_params() {\n        return _.union(Drawable.prototype.config_params, [{\n            key: \"color\",\n            label: \"Histogram color\",\n            type: \"color\"\n        }, {\n            key: \"show_sample_data\",\n            label: \"Show sample data\",\n            type: \"bool\",\n            default_value: true\n        }, {\n            key: \"show_labels\",\n            label: \"Show summary and sample labels\",\n            type: \"bool\",\n            default_value: true\n        }, {\n            key: \"summary_height\",\n            label: \"Locus summary height\",\n            type: \"float\",\n            default_value: 20\n        }, {\n            key: \"mode\",\n            type: \"string\",\n            default_value: this.mode,\n            hidden: true\n        }, {\n            key: \"height\",\n            type: \"int\",\n            default_value: 0,\n            hidden: true\n        }]);\n    },\n\n    config_onchange: function config_onchange() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function draw_tile(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(result.data, region.get(\"start\"), region.get(\"end\"), this.config.to_key_value_dict(), mode, function (b) {\n                return view.get_base_color(b);\n            });\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function get_canvas_height(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\") ? this.dataset.get_metadata(\"sample_names\").length : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function predraw_init() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function postdraw_actions(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, function (t) {\n            return t instanceof LineTrackTile;\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (line_track_tiles.length === 0 && this.config.get_value(\"show_labels\") && sample_names && sample_names.length > 1) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend($(\"<div/>\").text(\"Summary\").addClass(\"yaxislabel variant top\").css({\n                    \"font-size\": font_size + \"px\",\n                    top: (this.config.get_value(\"summary_height\") - font_size) / 2 + \"px\"\n                }));\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend($(\"<div/>\").html(samples_div_html).addClass(\"yaxislabel variant top sample\").css({\n                        top: this.config.get_value(\"summary_height\")\n                    }));\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n            $(this.tiles_div).find(\".sample\").css({\n                \"font-size\": font_size,\n                \"line-height\": font_size\n            });\n            // Color labels to preference color.\n            $(this.tiles_div).find(\".yaxislabel\").css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function ReadTrack(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = _painters2.default.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    build_config_params: function build_config_params() {\n        return _.union(Drawable.prototype.config_params, [{\n            key: \"block_color\",\n            label: \"Histogram color\",\n            type: \"color\"\n        }, {\n            key: \"detail_block_color\",\n            label: \"Sense strand block color\",\n            type: \"color\",\n            default_value: \"#AAAAAA\"\n        }, {\n            key: \"reverse_strand_color\",\n            label: \"Antisense strand block color\",\n            type: \"color\",\n            default_value: \"#DDDDDD\"\n        }, {\n            key: \"label_color\",\n            label: \"Label color\",\n            type: \"color\",\n            default_value: \"black\"\n        }, {\n            key: \"show_insertions\",\n            label: \"Show insertions\",\n            type: \"bool\",\n            default_value: false\n        }, {\n            key: \"show_differences\",\n            label: \"Show differences only\",\n            type: \"bool\",\n            default_value: true\n        }, {\n            key: \"show_counts\",\n            label: \"Show summary counts\",\n            type: \"bool\",\n            default_value: true\n        }, {\n            key: \"mode\",\n            type: \"string\",\n            default_value: this.mode,\n            hidden: true\n        }, {\n            key: \"min_value\",\n            label: \"Histogram minimum\",\n            type: \"float\",\n            default_value: undefined,\n            help: \"clear value to set automatically\"\n        }, {\n            key: \"max_value\",\n            label: \"Histogram maximum\",\n            type: \"float\",\n            default_value: undefined,\n            help: \"clear value to set automatically\"\n        }, {\n            key: \"height\",\n            type: \"int\",\n            default_value: 0,\n            hidden: true\n        }]);\n    },\n\n    config_onchange: function config_onchange() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function object_from_template(template, view, container) {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexports.default = {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 35:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * View for track/group header.\n */\nvar TrackHeaderView = Backbone.View.extend({\n    className: \"track-header\",\n\n    initialize: function initialize() {\n        // Watch and update name changes.\n        this.model.config.get(\"name\").on(\"change:value\", this.update_name, this);\n        this.render();\n    },\n\n    render: function render() {\n        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n        this.$el.append($(\"<div/>\").addClass(\"track-name\").text(this.model.config.get_value(\"name\")));\n\n        // Icons container.\n        this.action_icons = {};\n        this.render_action_icons();\n\n        // Suppress double clicks in header so that they do not impact viz under header.\n        this.$el.dblclick(function (e) {\n            e.stopPropagation();\n        });\n\n        // Needed for floating elts in header.\n        this.$el.append($(\"<div style='clear: both'/>\"));\n    },\n\n    update_name: function update_name() {\n        this.$el.find(\".track-name\").text(this.model.config.get_value(\"name\"));\n    },\n\n    render_action_icons: function render_action_icons() {\n        var self = this;\n        this.icons_div = $(\"<div/>\").addClass(\"track-icons\").hide().appendTo(this.$el);\n        _.each(this.model.action_icons_def, function (icon_dict) {\n            self.add_action_icon(icon_dict.name, icon_dict.title, icon_dict.css_class, icon_dict.on_click_fn, icon_dict.prepend, icon_dict.hide);\n        });\n\n        // Set up behavior for modes popup.\n        this.set_display_modes(this.model.display_modes);\n    },\n\n    /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n    add_action_icon: function add_action_icon(name, title, css_class, on_click_fn, prepend, hide) {\n        var self = this;\n        this.action_icons[name] = $(\"<a/>\").attr(\"title\", title).addClass(\"icon-button\").addClass(css_class).tooltip().click(function () {\n            on_click_fn(self.model);\n        }).appendTo(this.icons_div);\n        if (hide) {\n            this.action_icons[name].hide();\n        }\n    },\n\n    /**\n     * Set track's modes and update mode icon popup.\n     */\n    set_display_modes: function set_display_modes(new_modes, init_mode) {\n        if (!new_modes) {\n            return;\n        }\n\n        // HACK: move this out of view and into track.\n\n        // Set modes, init mode.\n        this.model.display_modes = new_modes;\n        this.model.mode = init_mode || this.model.config.get_value(\"mode\") || this.model.display_modes[0];\n\n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + this.mode + \")\");\n\n        // Setup popup menu for changing modes.\n        var self = this;\n\n        var track = this.model;\n        var mode_mapping = {};\n        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n            var mode = track.display_modes[i];\n            mode_mapping[mode] = function (mode) {\n                return function () {\n                    track.change_mode(mode);\n                    // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                    // icons div for now.\n                    //self.icons_div.show();\n                    //track.container_div.mouseleave(function() { track.icons_div.hide(); } );\n                };\n            }(mode);\n        }\n\n        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n    }\n});\n\nexports.default = {\n    TrackHeaderView: TrackHeaderView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar extend = _.extend;\n\n// HACK: LABEL_SPACING is currently duplicated between here and painters\nvar LABEL_SPACING = 2;\n\nvar PACK_SPACING = 5;\n\n/**\n * Hold slotting information for a feature.\n */\nvar SlottedInfo = function SlottedInfo(slot, feature) {\n    this.slot = slot;\n    this.feature = feature;\n};\n\n/**\n * FeatureSlotter determines slots in which to draw features for vertical\n * packing.\n *\n * This implementation is incremental, any feature assigned a slot will be\n * retained for slotting future features.\n */\nvar FeatureSlotter = function FeatureSlotter(w_scale, mode, max_rows, measureText) {\n    this.slots = {};\n    this.start_end_dct = {};\n    this.w_scale = w_scale;\n    this.mode = mode;\n    this.include_label = mode === \"Pack\";\n    this.max_rows = max_rows;\n    this.measureText = measureText;\n};\n\n/**\n * Slot a set of features, `this.slots` will be updated with slots by id, and\n * the largest slot required for the passed set of features is returned\n */\nextend(FeatureSlotter.prototype, {\n    /**\n     * Get drawing coordinate for a feature.\n     */\n    _get_draw_coords: function _get_draw_coords(feature) {\n        // Get initial draw coordinates using w_scale.\n        var draw_start = Math.floor(feature[1] * this.w_scale);\n\n        var draw_end = Math.ceil(feature[2] * this.w_scale);\n        var f_name = feature[3];\n        var text_align;\n\n        // Update start, end drawing locations to include feature name.\n        // Try to put the name on the left, if not, put on right.\n        if (f_name !== undefined && this.include_label) {\n            // Add gap for label spacing and extra pack space padding\n            // TODO: Fix constants\n            var text_len = this.measureText(f_name).width + (LABEL_SPACING + PACK_SPACING);\n            if (draw_start - text_len >= 0) {\n                draw_start -= text_len;\n                text_align = \"left\";\n            } else {\n                draw_end += text_len;\n                text_align = \"right\";\n            }\n        }\n\n        /*\n        if (slot_num < 0) {\n            \n            TODO: this is not yet working --\n            console.log(feature_uid, \"looking for slot with text on the right\");\n            // Slot not found. If text was on left, try on right and see\n            // if slot can be found.\n            // TODO: are there any checks we need to do to ensure that text\n            // will fit on tile?\n            if (text_align === \"left\") {\n                draw_start -= text_len;\n                draw_end -= text_len;\n                text_align = \"right\";\n                slot_num = find_slot(draw_start, draw_end);\n            }\n            if (slot_num >= 0) {\n                console.log(feature_uid, \"found slot with text on the right\");\n            }\n         }\n        */\n\n        return [draw_start, draw_end];\n    },\n\n    /**\n     * Find the first slot such that current feature doesn't overlap any other features in that slot.\n     * Returns -1 if no slot was found.\n     */\n    _find_slot: function _find_slot(draw_coords) {\n        // TODO: Use a data structure for faster searching of available slots.\n        var draw_start = draw_coords[0];\n\n        var draw_end = draw_coords[1];\n        for (var slot_num = 0; slot_num <= this.max_rows; slot_num++) {\n            var has_overlap = false;\n            var slot = this.start_end_dct[slot_num];\n            if (slot !== undefined) {\n                // Iterate through features already in slot to see if current feature will fit.\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    var s_e = slot[k];\n                    if (draw_end > s_e[0] && draw_start < s_e[1]) {\n                        // There is overlap\n                        has_overlap = true;\n                        break;\n                    }\n                }\n            }\n            if (!has_overlap) {\n                return slot_num;\n            }\n        }\n        return -1;\n    },\n\n    /**\n     * Slot features.\n     */\n    slot_features: function slot_features(features) {\n        var start_end_dct = this.start_end_dct;\n        var undone = [];\n        var highest_slot = 0;\n        var feature;\n        var feature_uid;\n\n        // Loop through features to (a) find those that are not yet slotted and (b) update\n        // those that are slotted if new information is availabe. For (a), features already\n        // slotted (based on slotting from other tiles) will retain their current slot.\n        for (var i = 0, len = features.length; i < len; i++) {\n            feature = features[i];\n            feature_uid = feature[0];\n            var slotted_info = this.slots[feature_uid];\n\n            // Separate and handle slotted vs. unslotted features.\n            if (slotted_info) {\n                // Feature is slotted; if feature now has larger start/end coordinates,\n                // update drawing coordinates.\n                if (feature[1] < slotted_info.feature[1] || slotted_info.feature[2] < feature[2]) {\n                    // Feature has changed (e.g. a single read now has its pair), so recalculate its\n                    // drawing coordinates.\n                    var old_draw_coords = this._get_draw_coords(slotted_info.feature);\n\n                    var new_draw_coords = this._get_draw_coords(feature);\n                    var slotted_coords = this.start_end_dct[slotted_info.slot];\n                    for (var k = 0; k < slotted_coords.length; k++) {\n                        var dc = slotted_coords[k];\n                        if (dc[0] === old_draw_coords[0] && dc[1] === old_draw_coords[1]) {\n                            // Replace old drawing coordinates with new ones.\n                            slotted_coords[k] = new_draw_coords;\n                        }\n                    }\n                }\n                highest_slot = Math.max(highest_slot, this.slots[feature_uid].slot);\n            } else {\n                undone.push(i);\n            }\n        }\n\n        // Slot unslotted features.\n\n        // Do slotting.\n        for (var i = 0, len = undone.length; i < len; i++) {\n            feature = features[undone[i]];\n            feature_uid = feature[0];\n            var draw_coords = this._get_draw_coords(feature);\n\n            // Find slot.\n            var slot_num = this._find_slot(draw_coords);\n\n            // Do slotting.\n            if (slot_num >= 0) {\n                // Add current feature to slot.\n                if (start_end_dct[slot_num] === undefined) {\n                    start_end_dct[slot_num] = [];\n                }\n                start_end_dct[slot_num].push(draw_coords);\n                this.slots[feature_uid] = new SlottedInfo(slot_num, feature);\n                highest_slot = Math.max(highest_slot, slot_num);\n            }\n        }\n\n        // Debugging: view slots data.\n        /*\n        for (var i = 0; i < MAX_FEATURE_DEPTH; i++) {\n            var slot = start_end_dct[i];\n            if (slot !== undefined) {\n                console.log(i, \"*************\");\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    console.log(\"\\t\", slot[k][0], slot[k][1]);\n                }\n            }\n        }\n        */\n        return highest_slot + 1;\n    }\n});\n\nexports.default = {\n    FeatureSlotter: FeatureSlotter\n};\n\n/***/ }),\n\n/***/ 37:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Compute the type of overlap between two regions. They are assumed to be on the same chrom/contig.\n * The overlap is computed relative to the second region; hence, OVERLAP_START indicates that the first\n * region overlaps the start (but not the end) of the second region.\n * NOTE: Coordinates are assumed to be in BED format: half open (start is closed, end is open).\n */\nvar BEFORE = 1001;\n\nvar CONTAINS = 1002;\nvar OVERLAP_START = 1003;\nvar OVERLAP_END = 1004;\nvar CONTAINED_BY = 1005;\nvar AFTER = 1006;\nvar compute_overlap = function compute_overlap(first_region, second_region) {\n    var first_start = first_region[0];\n    var first_end = first_region[1];\n    var second_start = second_region[0];\n    var second_end = second_region[1];\n    var overlap;\n    if (first_start < second_start) {\n        if (first_end <= second_start) {\n            overlap = BEFORE;\n        } else if (first_end <= second_end) {\n            overlap = OVERLAP_START;\n        } else {\n            // first_end > second_end\n            overlap = CONTAINS;\n        }\n    } else {\n        // first_start >= second_start\n        if (first_start > second_end) {\n            overlap = AFTER;\n        } else if (first_end <= second_end) {\n            overlap = CONTAINED_BY;\n        } else {\n            overlap = OVERLAP_END;\n        }\n    }\n\n    return overlap;\n};\n\n/**\n * Returns true if regions overlap.\n */\nvar is_overlap = function is_overlap(first_region, second_region) {\n    var overlap = compute_overlap(first_region, second_region);\n    return overlap !== BEFORE && overlap !== AFTER;\n};\n\n/**\n * Draw a dashed line on a canvas using filled rectangles. This function is based on:\n * http://vetruvet.blogspot.com/2010/10/drawing-dashed-lines-on-html5-canvas.html\n * However, that approach uses lines, which don't seem to render as well, so use\n * rectangles instead.\n */\nvar dashedLine = function dashedLine(ctx, x1, y1, x2, y2, dashLen) {\n    if (dashLen === undefined) {\n        dashLen = 4;\n    }\n    var dX = x2 - x1;\n    var dY = y2 - y1;\n    var dashes = Math.floor(Math.sqrt(dX * dX + dY * dY) / dashLen);\n    var dashX = dX / dashes;\n    var dashY = dY / dashes;\n    var q;\n\n    for (q = 0; q < dashes; q++, x1 += dashX, y1 += dashY) {\n        if (q % 2 !== 0) {\n            continue;\n        }\n        ctx.fillRect(x1, y1, dashLen, 1);\n    }\n};\n\n/**\n * Draw an isosceles triangle that points down.\n */\nvar drawDownwardEquilateralTriangle = function drawDownwardEquilateralTriangle(ctx, down_vertex_x, down_vertex_y, side_len) {\n    // Compute other two points of triangle.\n    var x1 = down_vertex_x - side_len / 2;\n\n    var x2 = down_vertex_x + side_len / 2;\n    var y = down_vertex_y - Math.sqrt(side_len * 3 / 2);\n\n    // Draw and fill.\n    ctx.beginPath();\n    ctx.moveTo(x1, y);\n    ctx.lineTo(x2, y);\n    ctx.lineTo(down_vertex_x, down_vertex_y);\n    ctx.lineTo(x1, y);\n\n    ctx.strokeStyle = this.fillStyle;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n};\n\n/**\n * Base class for all scalers. Scalers produce values that are used to change (scale) drawing attributes.\n */\nvar Scaler = function Scaler(default_val) {\n    this.default_val = default_val ? default_val : 1;\n};\n\n/**\n * Produce a scaling value.\n */\nScaler.prototype.gen_val = function (input) {\n    return this.default_val;\n};\n\n/**\n * Results from painter.draw()\n */\nvar DrawResults = function DrawResults(options) {\n    this.incomplete_features = options.incomplete_features;\n    this.feature_mapper = options.feature_mapper;\n};\n\n/**\n * Base class for painters\n *\n * -- Mode and prefs are both optional\n */\nvar Painter = function Painter(data, view_start, view_end, prefs, mode) {\n    // Data and data properties\n    this.data = data;\n    // View\n    this.view_start = view_start;\n    this.view_end = view_end;\n    // Drawing prefs\n    this.prefs = _.extend({}, this.default_prefs, prefs);\n    this.mode = mode;\n};\n\nPainter.prototype.default_prefs = {};\n\n/**\n * Draw on the context using a rectangle of width x height using scale w_scale.\n */\nPainter.prototype.draw = function (ctx, width, height, w_scale) {};\n\n/**\n * Get starting drawing position, which is offset a half-base left of coordinate.\n */\nPainter.prototype.get_start_draw_pos = function (chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, -0.5);\n};\n\n/**\n * Get end drawing position, which is offset a half-base right of coordinate.\n */\nPainter.prototype.get_end_draw_pos = function (chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0.5);\n};\n\n/**\n * Get drawing position.\n */\nPainter.prototype.get_draw_pos = function (chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0);\n};\n\n/**\n * Convert chromosome position to drawing position.\n */\nPainter.prototype._chrom_pos_to_draw_pos = function (chrom_pos, w_scale, offset) {\n    return Math.floor(w_scale * (Math.max(0, chrom_pos - this.view_start) + offset));\n};\n\nvar LinePainter = function LinePainter(data, view_start, view_end, prefs, mode) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n};\n\nLinePainter.prototype.default_prefs = {\n    min_value: undefined,\n    max_value: undefined,\n    mode: \"Histogram\",\n    color: \"#000\",\n    overflow_color: \"#F66\"\n};\n\nLinePainter.prototype.draw = function (ctx, width, height, w_scale) {\n    var in_path = false;\n    var min_value = this.prefs.min_value;\n    var max_value = this.prefs.max_value;\n    var vertical_range = max_value - min_value;\n    var height_px = height;\n    var view_start = this.view_start;\n    var mode = this.mode;\n    var data = this.data;\n\n    ctx.save();\n\n    // Pixel position of 0 on the y axis\n    var y_zero = Math.round(height + min_value / vertical_range * height);\n\n    // Horizontal line to denote x-axis\n    if (mode !== \"Intensity\") {\n        ctx.fillStyle = \"#aaa\";\n        ctx.fillRect(0, y_zero, width, 1);\n    }\n\n    ctx.beginPath();\n    var x_scaled;\n    var y;\n    var delta_x_pxs;\n    if (data.length > 1) {\n        delta_x_pxs = _.map(data.slice(0, -1), function (d, i) {\n            return Math.ceil((data[i + 1][0] - data[i][0]) * w_scale);\n        });\n    } else {\n        delta_x_pxs = [10];\n    }\n\n    // Painter color can be in either block_color (FeatureTrack) or color pref (LineTrack).\n    var painter_color = this.prefs.block_color || this.prefs.color;\n\n    var // Extract RGB from preference color.\n    pref_color = parseInt(painter_color.slice(1), 16);\n\n    var pref_r = (pref_color & 0xff0000) >> 16;\n    var pref_g = (pref_color & 0x00ff00) >> 8;\n    var pref_b = pref_color & 0x0000ff;\n    var top_overflow = false;\n    var bot_overflow = false;\n\n    // Paint track.\n    var delta_x_px;\n    for (var i = 0, len = data.length; i < len; i++) {\n        // Reset attributes for next point.\n        ctx.fillStyle = ctx.strokeStyle = painter_color;\n        top_overflow = bot_overflow = false;\n        delta_x_px = delta_x_pxs[i];\n\n        x_scaled = Math.floor((data[i][0] - view_start - 0.5) * w_scale);\n        y = data[i][1];\n\n        // Process Y (scaler) value.\n        if (y === null) {\n            if (in_path && mode === \"Filled\") {\n                ctx.lineTo(x_scaled, height_px);\n            }\n            in_path = false;\n            continue;\n        }\n\n        // Bound Y value by min, max.\n        if (y < min_value) {\n            bot_overflow = true;\n            y = min_value;\n        } else if (y > max_value) {\n            top_overflow = true;\n            y = max_value;\n        }\n\n        // Draw point.\n        if (mode === \"Histogram\") {\n            // y becomes the bar height in pixels, which is the negated for canvas coords\n            y = Math.round(y / vertical_range * height_px);\n            ctx.fillRect(x_scaled, y_zero, delta_x_px, -y);\n        } else if (mode === \"Intensity\") {\n            var saturation = (y - min_value) / vertical_range;\n\n            var // Range is [pref_color, 255] where saturation = 0 --> 255 and saturation = 1 --> pref color\n            new_r = Math.round(pref_r + (255 - pref_r) * (1 - saturation));\n\n            var new_g = Math.round(pref_g + (255 - pref_g) * (1 - saturation));\n            var new_b = Math.round(pref_b + (255 - pref_b) * (1 - saturation));\n            ctx.fillStyle = \"rgb(\" + new_r + \",\" + new_g + \",\" + new_b + \")\";\n            ctx.fillRect(x_scaled, 0, delta_x_px, height_px);\n        } else {\n            // mode is Coverage/Line or Filled.\n\n            // Scale Y value.\n            y = Math.round(height_px - (y - min_value) / vertical_range * height_px);\n            if (in_path) {\n                ctx.lineTo(x_scaled, y);\n            } else {\n                in_path = true;\n                if (mode === \"Filled\") {\n                    ctx.moveTo(x_scaled, height_px);\n                    ctx.lineTo(x_scaled, y);\n                } else {\n                    ctx.moveTo(x_scaled, y);\n                    // Use this approach (note: same as for filled) to draw line from 0 to\n                    // first data point.\n                    //ctx.moveTo(x_scaled, height_px);\n                    //ctx.lineTo(x_scaled, y);\n                }\n            }\n        }\n\n        // Draw lines at boundaries if overflowing min or max\n        ctx.fillStyle = this.prefs.overflow_color;\n        if (top_overflow || bot_overflow) {\n            var overflow_x;\n            if (mode === \"Histogram\" || mode === \"Intensity\") {\n                overflow_x = delta_x_px;\n            } else {\n                // Line and Filled, which are points\n                x_scaled -= 2; // Move it over to the left so it's centered on the point\n                overflow_x = 4;\n            }\n            if (top_overflow) {\n                ctx.fillRect(x_scaled, 0, overflow_x, 3);\n            }\n            if (bot_overflow) {\n                ctx.fillRect(x_scaled, height_px - 3, overflow_x, 3);\n            }\n        }\n        ctx.fillStyle = painter_color;\n    }\n    if (mode === \"Filled\") {\n        if (in_path) {\n            ctx.lineTo(x_scaled, y_zero);\n            ctx.lineTo(0, y_zero);\n        }\n        ctx.fill();\n    } else {\n        ctx.stroke();\n    }\n\n    ctx.restore();\n};\n\n/**\n * Mapper that contains information about feature locations and data.\n */\nvar FeaturePositionMapper = function FeaturePositionMapper(slot_height) {\n    this.feature_positions = {};\n    this.slot_height = slot_height;\n    this.translation = 0;\n    this.y_translation = 0;\n};\n\n/**\n * Map feature data to a position defined by <slot, x_start, x_end>.\n */\nFeaturePositionMapper.prototype.map_feature_data = function (feature_data, slot, x_start, x_end) {\n    if (!this.feature_positions[slot]) {\n        this.feature_positions[slot] = [];\n    }\n    this.feature_positions[slot].push({\n        data: feature_data,\n        x_start: x_start,\n        x_end: x_end\n    });\n};\n\n/**\n * Get feature data for position <x, y>\n */\nFeaturePositionMapper.prototype.get_feature_data = function (x, y) {\n    // Find slot using Y.\n    var slot = Math.floor((y - this.y_translation) / this.slot_height);\n\n    var feature_dict;\n\n    // May not be over a slot due to padding, margin, etc.\n    if (!this.feature_positions[slot]) {\n        return null;\n    }\n\n    // Find feature using X.\n    x += this.translation;\n    for (var i = 0; i < this.feature_positions[slot].length; i++) {\n        feature_dict = this.feature_positions[slot][i];\n        if (x >= feature_dict.x_start && x <= feature_dict.x_end) {\n            return feature_dict.data;\n        }\n    }\n};\n\n/**\n * Abstract object for painting feature tracks. Subclasses must implement draw_element() for painting to work.\n * Painter uses a 0-based, half-open coordinate system; start coordinate is closed--included--and the end is open.\n * This coordinate system matches the BED format.\n */\nvar FeaturePainter = function FeaturePainter(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    this.alpha_scaler = alpha_scaler ? alpha_scaler : new Scaler();\n    this.height_scaler = height_scaler ? height_scaler : new Scaler();\n    this.max_label_length = 200;\n};\n\nFeaturePainter.prototype.default_prefs = {\n    block_color: \"#FFF\",\n    connector_color: \"#FFF\"\n};\n\n_.extend(FeaturePainter.prototype, {\n    get_required_height: function get_required_height(rows_required, width) {\n        // y_scale is the height per row\n        var required_height = this.get_row_height();\n\n        var y_scale = required_height;\n        var mode = this.mode;\n        // If using a packing mode, need to multiply by the number of slots used\n        if (mode === \"no_detail\" || mode === \"Squish\" || mode === \"Pack\") {\n            required_height = rows_required * y_scale;\n        }\n        return required_height + this.get_top_padding(width);\n    },\n\n    /** Extra padding before first row of features */\n    get_top_padding: function get_top_padding(width) {\n        return 0;\n    },\n\n    /**\n     * Draw data on ctx using slots and within the rectangle defined by width and height. Returns\n     * a FeaturePositionMapper object with information about where features were drawn.\n     */\n    draw: function draw(ctx, width, height, w_scale, slots) {\n        var data = this.data;\n        var view_start = this.view_start;\n        var view_end = this.view_end;\n\n        ctx.save();\n\n        ctx.fillStyle = this.prefs.block_color;\n        ctx.textAlign = \"right\";\n\n        var y_scale = this.get_row_height();\n        var feature_mapper = new FeaturePositionMapper(y_scale);\n        var x_draw_coords;\n        var incomplete_features = [];\n\n        for (var i = 0, len = data.length; i < len; i++) {\n            var feature = data[i];\n            var feature_uid = feature[0];\n            var feature_start = feature[1];\n            var feature_end = feature[2];\n\n            var // Slot valid only if features are slotted and this feature is slotted;\n            // feature may not be due to lack of space.\n            slot = slots && slots[feature_uid] !== undefined ? slots[feature_uid].slot : null;\n\n            // Draw feature if (a) mode is dense or feature is slotted (as it must be for all non-dense modes) and\n            // (b) there's overlap between the feature and drawing region.\n            if ((this.mode === \"Dense\" || slot !== null) && feature_start < view_end && feature_end > view_start) {\n                x_draw_coords = this.draw_element(ctx, this.mode, feature, slot, view_start, view_end, w_scale, y_scale, width);\n                feature_mapper.map_feature_data(feature, slot, x_draw_coords[0], x_draw_coords[1]);\n\n                // Add to incomplete features if it's not drawn completely in region.\n                if (feature_start < view_start || feature_end > view_end) {\n                    incomplete_features.push(feature);\n                }\n            }\n        }\n\n        ctx.restore();\n\n        feature_mapper.y_translation = this.get_top_padding(width);\n        return new DrawResults({\n            incomplete_features: incomplete_features,\n            feature_mapper: feature_mapper\n        });\n    },\n\n    /**\n     * Abstract function for drawing an individual feature.\n     */\n    draw_element: function draw_element(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n        return [0, 0];\n    }\n});\n\n// Constants specific to feature tracks moved here (HACKING, these should\n// basically all be configuration options)\nvar DENSE_TRACK_HEIGHT = 10;\n\nvar NO_DETAIL_TRACK_HEIGHT = 3;\nvar SQUISH_TRACK_HEIGHT = 5;\nvar PACK_TRACK_HEIGHT = 10;\nvar NO_DETAIL_FEATURE_HEIGHT = 1;\nvar DENSE_FEATURE_HEIGHT = 9;\nvar SQUISH_FEATURE_HEIGHT = 3;\nvar PACK_FEATURE_HEIGHT = 9;\nvar LABEL_SPACING = 2;\nvar CONNECTOR_COLOR = \"#ccc\";\n\nvar LinkedFeaturePainter = function LinkedFeaturePainter(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    // Whether to draw a single connector in the background that spans the entire feature (the intron fishbone)\n    this.draw_background_connector = true;\n    // Whether to call draw_connector for every pair of blocks\n    this.draw_individual_connectors = false;\n};\n\n_.extend(LinkedFeaturePainter.prototype, FeaturePainter.prototype, {\n    /**\n     * Height of a single row, depends on mode\n     */\n    get_row_height: function get_row_height() {\n        var mode = this.mode;\n        var height;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        } else if (mode === \"no_detail\") {\n            height = NO_DETAIL_TRACK_HEIGHT;\n        } else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        } else {\n            // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n        }\n        return height;\n    },\n\n    /**\n     * Draw a feature. Returns an array with feature's start and end X coordinates.\n     */\n    draw_element: function draw_element(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n        var feature_uid = feature[0];\n        var feature_start = feature[1];\n        var feature_end = feature[2];\n        var feature_name = feature[3];\n        var feature_strand = feature[4];\n\n        var // -0.5 to offset region between bases.\n        f_start = Math.floor(Math.max(0, (feature_start - tile_low - 0.5) * w_scale));\n\n        var f_end = Math.ceil(Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)));\n\n        var draw_start = f_start;\n        var draw_end = f_end;\n\n        var y_start = (mode === \"Dense\" ? 0 : 0 + slot) * y_scale + this.get_top_padding(width);\n\n        var thickness;\n        var y_start;\n        var thick_start = null;\n        var thick_end = null;\n\n        var // TODO: is there any reason why block, label color cannot be set at the Painter level?\n        // For now, assume '.' === '+'\n        block_color = !feature_strand || feature_strand === \"+\" || feature_strand === \".\" ? this.prefs.block_color : this.prefs.reverse_strand_color;\n\n        var label_color = this.prefs.label_color;\n\n        // Set global alpha.\n        ctx.globalAlpha = this.alpha_scaler.gen_val(feature);\n\n        // In dense mode, put all data in top slot.\n        if (mode === \"Dense\") {\n            slot = 1;\n        }\n\n        if (mode === \"no_detail\") {\n            // No details for feature, so only one way to display.\n            ctx.fillStyle = block_color;\n            ctx.fillRect(f_start, y_start + 5, f_end - f_start, NO_DETAIL_FEATURE_HEIGHT);\n        } else {\n            // Mode is either Squish or Pack:\n            // Feature details.\n            var feature_ts = feature[5];\n\n            var feature_te = feature[6];\n            var feature_blocks = feature[7];\n\n            var // Whether we are drawing full height or squished features\n            full_height = true;\n\n            if (feature_ts && feature_te) {\n                thick_start = Math.floor(Math.max(0, (feature_ts - tile_low) * w_scale));\n                thick_end = Math.ceil(Math.min(width, Math.max(0, (feature_te - tile_low) * w_scale)));\n            }\n\n            // Set vars that depend on mode.\n            var thin_height;\n\n            var thick_height;\n            if (mode === \"Squish\") {\n                thin_height = 1;\n                thick_height = SQUISH_FEATURE_HEIGHT;\n                full_height = false;\n            } else if (mode === \"Dense\") {\n                thin_height = 5;\n                thick_height = DENSE_FEATURE_HEIGHT;\n            } else {\n                // mode === \"Pack\"\n                thin_height = 5;\n                thick_height = PACK_FEATURE_HEIGHT;\n            }\n\n            // Draw feature/feature blocks + connectors.\n            if (!feature_blocks) {\n                // If there are no blocks, treat the feature as one big exon.\n                ctx.fillStyle = block_color;\n                ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n                // If strand is specified, draw arrows over feature\n                if (feature_strand && full_height) {\n                    if (feature_strand === \"+\") {\n                        ctx.fillStyle = ctx.canvas.manager.get_pattern(\"right_strand_inv\");\n                    } else if (feature_strand === \"-\") {\n                        ctx.fillStyle = ctx.canvas.manager.get_pattern(\"left_strand_inv\");\n                    }\n                    ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n                }\n            } else {\n                //\n                // There are feature blocks and mode is either Squish or Pack.\n                //\n                // Approach: (a) draw whole feature as connector/intron and (b) draw blocks as\n                // needed. This ensures that whole feature, regardless of whether it starts with\n                // a block, is visible.\n                //\n\n                // Compute y axis start position and height\n                var cur_y_start;\n\n                var cur_height;\n                if (mode === \"Squish\" || mode === \"Dense\") {\n                    cur_y_start = y_start + Math.floor(SQUISH_FEATURE_HEIGHT / 2) + 1;\n                    cur_height = 1;\n                } else {\n                    // mode === \"Pack\"\n                    if (feature_strand) {\n                        cur_y_start = y_start;\n                        cur_height = thick_height;\n                    } else {\n                        cur_y_start += SQUISH_FEATURE_HEIGHT / 2 + 1;\n                        cur_height = 1;\n                    }\n                }\n\n                // Draw whole feature as connector/intron.\n                if (this.draw_background_connector) {\n                    if (mode === \"Squish\" || mode === \"Dense\") {\n                        ctx.fillStyle = CONNECTOR_COLOR;\n                    } else {\n                        // mode === \"Pack\"\n                        if (feature_strand) {\n                            if (feature_strand === \"+\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"right_strand\");\n                            } else if (feature_strand === \"-\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"left_strand\");\n                            }\n                        } else {\n                            ctx.fillStyle = CONNECTOR_COLOR;\n                        }\n                    }\n                    ctx.fillRect(f_start, cur_y_start, f_end - f_start, cur_height);\n                }\n\n                // Draw blocks.\n                var start_and_height;\n                for (var k = 0, k_len = feature_blocks.length; k < k_len; k++) {\n                    var block = feature_blocks[k];\n\n                    var // -0.5 to offset block between bases.\n                    block_start = Math.floor(Math.max(0, (block[0] - tile_low - 0.5) * w_scale));\n\n                    var block_end = Math.ceil(Math.min(width, Math.max((block[1] - tile_low - 0.5) * w_scale)));\n\n                    var last_block_start;\n                    var last_block_end;\n\n                    // Skip drawing if block not on tile.\n                    if (block_start > block_end) {\n                        continue;\n                    }\n\n                    // Draw thin block.\n                    ctx.fillStyle = block_color;\n                    ctx.fillRect(block_start, y_start + (thick_height - thin_height) / 2 + 1, block_end - block_start, thin_height);\n\n                    // If block intersects with thick region, draw block as thick.\n                    // - No thick is sometimes encoded as thick_start == thick_end, so don't draw in that case\n                    if (thick_start !== undefined && feature_te > feature_ts && !(block_start > thick_end || block_end < thick_start)) {\n                        var block_thick_start = Math.max(block_start, thick_start);\n\n                        var block_thick_end = Math.min(block_end, thick_end);\n                        ctx.fillRect(block_thick_start, y_start + 1, block_thick_end - block_thick_start, thick_height);\n                        if (feature_blocks.length === 1 && mode === \"Pack\") {\n                            // Exactly one block means we have no introns, but do have a distinct \"thick\" region,\n                            // draw arrows over it if in pack mode.\n                            if (feature_strand === \"+\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"right_strand_inv\");\n                            } else if (feature_strand === \"-\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"left_strand_inv\");\n                            }\n                            // If region is wide enough in pixels, pad a bit\n                            if (block_thick_start + 14 < block_thick_end) {\n                                block_thick_start += 2;\n                                block_thick_end -= 2;\n                            }\n                            ctx.fillRect(block_thick_start, y_start + 1, block_thick_end - block_thick_start, thick_height);\n                        }\n                    }\n                    // Draw individual connectors if required\n                    if (this.draw_individual_connectors && last_block_start) {\n                        this.draw_connector(ctx, last_block_start, last_block_end, block_start, block_end, y_start);\n                    }\n                    last_block_start = block_start;\n                    last_block_end = block_end;\n                }\n\n                // FIXME: Height scaling only works in Pack mode right now.\n                if (mode === \"Pack\") {\n                    // Reset alpha so height scaling is not impacted by alpha scaling.\n                    ctx.globalAlpha = 1;\n\n                    // Height scaling: draw white lines to reduce height according to height scale factor.\n                    ctx.fillStyle = \"white\"; // TODO: set this to background color.\n                    var hscale_factor = this.height_scaler.gen_val(feature);\n\n                    var // Ceil ensures that min height is >= 1.\n                    new_height = Math.ceil(thick_height * hscale_factor);\n\n                    var ws_height = Math.round((thick_height - new_height) / 2);\n                    if (hscale_factor !== 1) {\n                        ctx.fillRect(f_start, cur_y_start + 1, f_end - f_start, ws_height);\n                        ctx.fillRect(f_start, cur_y_start + thick_height - ws_height + 1, f_end - f_start, ws_height);\n                    }\n                }\n            }\n\n            // Reset alpha so that label is not transparent.\n            ctx.globalAlpha = 1;\n\n            // Draw label for Pack mode.\n            if (feature_name && mode === \"Pack\" && feature_start > tile_low) {\n                ctx.fillStyle = label_color;\n                // FIXME: assumption here that the entire view starts at 0\n                if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n                    ctx.textAlign = \"left\";\n                    ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 8, this.max_label_length);\n                    draw_end += ctx.measureText(feature_name).width + LABEL_SPACING;\n                } else {\n                    ctx.textAlign = \"right\";\n                    ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 8, this.max_label_length);\n                    draw_start -= ctx.measureText(feature_name).width + LABEL_SPACING;\n                }\n                //ctx.fillStyle = block_color;\n            }\n        }\n\n        // Reset global alpha.\n        ctx.globalAlpha = 1;\n\n        return [draw_start, draw_end];\n    }\n});\n\nvar ReadPainter = function ReadPainter(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler, ref_seq, base_color_fn) {\n    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    this.ref_seq = ref_seq ? ref_seq.data : null;\n    this.base_color_fn = base_color_fn;\n};\n\n_.extend(ReadPainter.prototype, FeaturePainter.prototype, {\n    /**\n     * Returns height based on mode.\n     */\n    get_row_height: function get_row_height() {\n        var height;\n        var mode = this.mode;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        } else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        } else {\n            // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n            if (this.prefs.show_insertions) {\n                height *= 2;\n            }\n        }\n        return height;\n    },\n\n    /**\n     * Parse CIGAR string to get (a) a list of contiguous drawing blocks (MD=X) and\n     * (b) an array of [ op_index, op_len ] pairs where op_index is an index into the\n     * string 'MIDNSHP=X' Return value is a dictionary with two entries, blocks and cigar\n     */\n    _parse_cigar: function _parse_cigar(cigar_str) {\n        var cigar_ops = \"MIDNSHP=X\";\n\n        // Parse cigar.\n        var blocks = [[0, 0]];\n\n        var cur_block = blocks[0];\n        var base_pos = 0;\n\n        var // Parse cigar operations out and update/create blocks as needed.\n        parsed_cigar = _.map(cigar_str.match(/[0-9]+[MIDNSHP=X]/g), function (op) {\n            // Get operation length, character.\n            var op_len = parseInt(op.slice(0, -1), 10),\n                op_char = op.slice(-1);\n\n            // Update drawing block.\n            if (op_char === \"N\") {\n                // At skip, so need to start new block if current block represents\n                // drawing area.\n                if (cur_block[1] !== 0) {\n                    cur_block = [base_pos + op_len, base_pos + op_len];\n                    blocks.push(cur_block);\n                }\n            } else if (\"ISHP\".indexOf(op_char) === -1) {\n                // Operation is M,D,=,X.\n                cur_block[1] += op_len;\n                base_pos += op_len;\n            }\n\n            // Return parsed cigar.\n            return [cigar_ops.indexOf(op_char), op_len];\n        });\n\n        return {\n            blocks: blocks,\n            cigar: parsed_cigar\n        };\n    },\n\n    /**\n     * Draw a single read from reference-based read sequence and cigar.\n     */\n    draw_read: function draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature_start, cigar, strand, read_seq) {\n        // Helper function to update base and sequnence offsets.\n        var update_base_offset = function update_base_offset(offset, cig_op, cig_len) {\n            if (\"M=NXD\".indexOf(cig_op) !== -1) {\n                offset += cig_len;\n            }\n            return offset;\n        };\n\n        var update_seq_offset = function update_seq_offset(offset, cig_op, cig_len) {\n            if (\"IX\".indexOf(cig_op) !== -1) {\n                offset += cig_len;\n            }\n            return offset;\n        };\n\n        var // Gets drawing coordinate for a sequence coordinate. Assumes closure variables w_scale and tile_low.\n        get_draw_coord = function get_draw_coord(sequence_coord // -0.5 to offset sequence between bases.\n        ) {\n            return Math.floor(Math.max(0, (sequence_coord - tile_low - 0.5) * w_scale));\n        };\n\n        ctx.textAlign = \"center\";\n        var tile_region = [tile_low, tile_high];\n        var base_offset = 0;\n        var seq_offset = 0;\n        var gap = Math.round(w_scale / 2);\n        var char_width_px = ctx.canvas.manager.char_width_px;\n\n        var block_color = strand === \"+\" ? this.prefs.detail_block_color : this.prefs.reverse_strand_color;\n\n        var pack_mode = mode === \"Pack\";\n\n        var draw_height = pack_mode ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT;\n\n        var rect_y = y_start + 1;\n        var paint_utils = new ReadPainterUtils(ctx, draw_height, w_scale, mode);\n        var drawing_blocks = [];\n        var s_start;\n        var s_end;\n\n        // Keep list of items that need to be drawn on top of initial drawing layer.\n        var draw_last = [];\n\n        // Parse cigar and get drawing blocks.\n        var t = this._parse_cigar(cigar);\n        cigar = t.cigar;\n        drawing_blocks = t.blocks;\n\n        // Draw blocks.\n        for (var i = 0; i < drawing_blocks.length; i++) {\n            var block = drawing_blocks[i];\n\n            if (is_overlap([feature_start + block[0], feature_start + block[1]], tile_region)) {\n                s_start = get_draw_coord(feature_start + block[0]);\n                s_end = get_draw_coord(feature_start + block[1]);\n\n                // Make sure that block is drawn even if it too small to be rendered officially; in this case,\n                // read is drawn at 1px.\n                // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n                // and drawing.\n                if (s_start === s_end) {\n                    s_end += 1;\n                }\n\n                // Draw read base as rectangle.\n                ctx.fillStyle = block_color;\n                ctx.fillRect(s_start, rect_y, s_end - s_start, draw_height);\n            }\n        }\n\n        // Draw read features.\n        for (var cig_id = 0, len = cigar.length; cig_id < len; cig_id++) {\n            var cig = cigar[cig_id];\n            var cig_op = \"MIDNSHP=X\"[cig[0]];\n            var cig_len = cig[1];\n\n            var seq_start = feature_start + base_offset;\n            s_start = get_draw_coord(seq_start);\n            s_end = get_draw_coord(seq_start + cig_len);\n\n            // Skip feature if it's not in tile.\n            if (!is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                // Update offsets.\n                base_offset = update_base_offset(base_offset, cig_op, cig_len);\n                seq_offset = update_seq_offset(seq_offset, cig_op, cig_len);\n                continue;\n            }\n\n            // Make sure that read is drawn even if it too small to be rendered officially; in this case,\n            // read is drawn at 1px.\n            // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n            // and drawing.\n            if (s_start === s_end) {\n                s_end += 1;\n            }\n\n            // Draw read feature.\n            switch (cig_op) {\n                case \"H\": // Hard clipping.\n                case \"S\": // Soft clipping.\n                case \"P\":\n                    // Padding.\n                    // Sequence not present and not related to alignment; do nothing.\n                    break;\n                case \"M\":\n                    // \"Match\".\n                    // Because it's not known whether there is a match, ignore.\n                    base_offset += cig_len;\n                    break;\n                case \"=\": // Match with reference.\n                case \"X\":\n                    // Mismatch with reference.\n                    //\n                    // Draw sequence and/or variants.\n                    //\n\n                    // Get sequence to draw.\n                    var cur_seq = \"\";\n                    if (cig_op === \"X\") {\n                        // Get sequence from read_seq.\n                        cur_seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n                    } else if (this.ref_seq) {\n                        // && cig_op === '='\n                        // Use reference sequence.\n                        cur_seq = this.ref_seq.slice(\n                        // If read starts after tile start, slice at read start.\n                        Math.max(0, seq_start - tile_low),\n                        // If read ends before tile end, slice at read end.\n                        Math.min(seq_start - tile_low + cig_len, tile_high - tile_low));\n                    }\n\n                    // Draw sequence. Because cur_seq starts and read/tile start, go to there to start writing.\n                    var start_pos = Math.max(seq_start, tile_low);\n                    for (var c = 0; c < cur_seq.length; c++) {\n                        // Draw base if showing all (i.e. not showing differences) or there is a mismatch.\n                        if (cur_seq && !this.prefs.show_differences || cig_op === \"X\") {\n                            // Draw base.\n                            var c_start = Math.floor(Math.max(0, (start_pos + c - tile_low) * w_scale));\n                            ctx.fillStyle = this.base_color_fn(cur_seq[c]);\n                            if (pack_mode && w_scale > char_width_px) {\n                                ctx.fillText(cur_seq[c], c_start, y_start + 9);\n                            } else if (w_scale > 0.05) {\n                                // Require a minimum w_scale so that variants are only drawn when somewhat zoomed in.\n                                ctx.fillRect(c_start - gap, rect_y, Math.max(1, Math.round(w_scale)), draw_height);\n                            }\n                        }\n                    }\n\n                    // Move forward in sequence only if sequence used to get mismatches.\n                    if (cig_op === \"X\") {\n                        seq_offset += cig_len;\n                    }\n                    base_offset += cig_len;\n\n                    break;\n                case \"N\":\n                    // Skipped bases.\n                    ctx.fillStyle = CONNECTOR_COLOR;\n                    ctx.fillRect(s_start, rect_y + (draw_height - 1) / 2, s_end - s_start, 1);\n                    // No change in seq_offset because sequence not used when skipping.\n                    base_offset += cig_len;\n                    break;\n                case \"D\":\n                    // Deletion.\n                    paint_utils.draw_deletion(s_start, rect_y, cig_len);\n                    base_offset += cig_len;\n                    break;\n                case \"I\":\n                    // Insertion.\n                    // Check to see if sequence should be drawn at all by looking at the overlap between\n                    // the sequence region and the tile region.\n                    var insert_x_coord = s_start - gap;\n\n                    if (is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                        var seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n                        // Insertion point is between the sequence start and the previous base: (-gap) moves\n                        // back from sequence start to insertion point.\n                        if (this.prefs.show_insertions) {\n                            //\n                            // Show inserted sequence above, centered on insertion point.\n                            //\n\n                            // Draw sequence.\n                            // X center is offset + start - <half_sequence_length>\n                            var x_center = s_start - (s_end - s_start) / 2;\n                            if ((mode === \"Pack\" || this.mode === \"Auto\") && read_seq !== undefined && w_scale > char_width_px) {\n                                // Draw sequence container.\n                                ctx.fillStyle = \"yellow\";\n                                ctx.fillRect(x_center - gap, y_start - 9, s_end - s_start, 9);\n                                draw_last[draw_last.length] = {\n                                    type: \"triangle\",\n                                    data: [insert_x_coord, y_start + 4, 5]\n                                };\n                                ctx.fillStyle = CONNECTOR_COLOR;\n                                // Based on overlap b/t sequence and tile, get sequence to be drawn.\n                                switch (compute_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                                    case OVERLAP_START:\n                                        seq = seq.slice(tile_low - seq_start);\n                                        break;\n                                    case OVERLAP_END:\n                                        seq = seq.slice(0, seq_start - tile_high);\n                                        break;\n                                    case CONTAINED_BY:\n                                        // All of sequence drawn.\n                                        break;\n                                    case CONTAINS:\n                                        seq = seq.slice(tile_low - seq_start, seq_start - tile_high);\n                                        break;\n                                }\n                                // Draw sequence.\n                                for (var c = 0, str_len = seq.length; c < str_len; c++) {\n                                    var c_start = Math.floor(Math.max(0, (seq_start + c - tile_low) * w_scale));\n                                    ctx.fillText(seq[c], c_start - (s_end - s_start) / 2, y_start);\n                                }\n                            } else {\n                                // Draw block.\n                                ctx.fillStyle = \"yellow\";\n                                // TODO: This is a pretty hack-ish way to fill rectangle based on mode.\n                                ctx.fillRect(x_center, y_start + (this.mode !== \"Dense\" ? 2 : 5), s_end - s_start, mode !== \"Dense\" ? SQUISH_FEATURE_HEIGHT : DENSE_FEATURE_HEIGHT);\n                            }\n                        } else {\n                            if ((mode === \"Pack\" || this.mode === \"Auto\") && read_seq !== undefined && w_scale > char_width_px) {\n                                // Show insertions with a single number at the insertion point.\n                                draw_last.push({\n                                    type: \"text\",\n                                    data: [seq.length, insert_x_coord, y_start + 9]\n                                });\n                            } else {\n                                // TODO: probably can merge this case with code above.\n                            }\n                        }\n                    }\n                    seq_offset += cig_len;\n                    // No change to base offset because insertions are drawn above sequence/read.\n                    break;\n            }\n        }\n\n        //\n        // Draw last items.\n        //\n        ctx.fillStyle = \"yellow\";\n        var item;\n        var type;\n        var data;\n        for (var i = 0; i < draw_last.length; i++) {\n            item = draw_last[i];\n            type = item.type;\n            data = item.data;\n            if (type === \"text\") {\n                ctx.save();\n                ctx.font = \"bold \" + ctx.font;\n                ctx.fillText(data[0], data[1], data[2]);\n                ctx.restore();\n            } else if (type === \"triangle\") {\n                drawDownwardEquilateralTriangle(ctx, data[0], data[1], data[2]);\n            }\n        }\n    },\n\n    /**\n     * Draw a complete read pair\n     */\n    draw_element: function draw_element(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n        // All features need a start, end, and vertical center.\n        var feature_uid = feature[0];\n\n        var feature_start = feature[1];\n        var feature_end = feature[2];\n        var feature_name = feature[3];\n\n        var // -0.5 to put element between bases.\n        f_start = Math.floor(Math.max(-0.5 * w_scale, (feature_start - tile_low - 0.5) * w_scale));\n\n        var f_end = Math.ceil(Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)));\n\n        var y_start = (mode === \"Dense\" ? 0 : 0 + slot) * y_scale;\n\n        var draw_height = mode === \"Pack\" ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT;\n\n        var label_color = this.prefs.label_color;\n\n        // Draw read.\n        if (feature[5] instanceof Array) {\n            // Read is paired.\n            var connector = true;\n\n            // Draw left/forward read.\n            if (feature[4][1] >= tile_low && feature[4][0] <= tile_high && feature[4][2]) {\n                this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature[4][0], feature[4][2], feature[4][3], feature[4][4]);\n            } else {\n                connector = false;\n            }\n\n            // Draw right/reverse read.\n            if (feature[5][1] >= tile_low && feature[5][0] <= tile_high && feature[5][2]) {\n                this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature[5][0], feature[5][2], feature[5][3], feature[5][4]);\n            } else {\n                connector = false;\n            }\n\n            // Draw connector if both reads were drawn.\n            // TODO: currently, there is no way to connect reads drawn on different tiles; to connect reads on different tiles, data manager\n            // code is needed to join mate pairs from different regions. Alternatively, requesting multiple regions of data at once would\n            // make it possible to put together more easily.\n            // -0.5 to position connector correctly between reads.\n            var b1_end = Math.ceil(Math.min(width, Math.max(-0.5 * w_scale, (feature[4][1] - tile_low - 0.5) * w_scale)));\n\n            var b2_start = Math.floor(Math.max(-0.5 * w_scale, (feature[5][0] - tile_low - 0.5) * w_scale));\n\n            if (connector && b2_start > b1_end) {\n                ctx.fillStyle = CONNECTOR_COLOR;\n                var line_height = y_start + 1 + (draw_height - 1) / 2;\n                dashedLine(ctx, b1_end, line_height, b2_start, line_height);\n            }\n        } else {\n            // Read is single.\n            this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature_start, feature[4], feature[5], feature[6]);\n        }\n        if (mode === \"Pack\" && feature_start >= tile_low && feature_name !== \".\") {\n            // Draw label.\n            ctx.fillStyle = this.prefs.label_color;\n            if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n                ctx.textAlign = \"left\";\n                ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 9, this.max_label_length);\n            } else {\n                ctx.textAlign = \"right\";\n                ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 9, this.max_label_length);\n            }\n        }\n\n        // FIXME: provide actual coordinates for drawn read.\n        return [0, 0];\n    }\n});\n\nvar ArcLinkedFeaturePainter = function ArcLinkedFeaturePainter(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    LinkedFeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    // Need to know the longest feature length for adding spacing\n    this.longest_feature_length = this.calculate_longest_feature_length();\n    this.draw_background_connector = false;\n    this.draw_individual_connectors = true;\n};\n\n_.extend(ArcLinkedFeaturePainter.prototype, FeaturePainter.prototype, LinkedFeaturePainter.prototype, {\n    calculate_longest_feature_length: function calculate_longest_feature_length() {\n        var longest_feature_length = 0;\n        for (var i = 0, len = this.data.length; i < len; i++) {\n            var feature = this.data[i];\n            var feature_start = feature[1];\n            var feature_end = feature[2];\n            longest_feature_length = Math.max(longest_feature_length, feature_end - feature_start);\n        }\n        return longest_feature_length;\n    },\n\n    get_top_padding: function get_top_padding(width) {\n        var view_range = this.view_end - this.view_start;\n        var w_scale = width / view_range;\n        return Math.min(128, Math.ceil(this.longest_feature_length / 2 * w_scale));\n    },\n\n    draw_connector: function draw_connector(ctx, block1_start, block1_end, block2_start, block2_end, y_start) {\n        // Arc drawing -- from closest endpoints\n        var x_center = (block1_end + block2_start) / 2;\n\n        var radius = block2_start - x_center;\n\n        // For full half circles\n        var angle1 = Math.PI;\n\n        var angle2 = 0;\n        if (radius > 0) {\n            ctx.beginPath();\n            ctx.arc(x_center, y_start, block2_start - x_center, Math.PI, 0);\n            ctx.stroke();\n        }\n    }\n});\n\n// Color stuff from less.js\n\nvar Color = function Color(rgb, a) {\n    /**\n     * The end goal here, is to parse the arguments\n     * into an integer triplet, such as `128, 255, 0`\n     *\n     * This facilitates operations and conversions.\n     */\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb;\n    } else if (rgb.length == 6) {\n        this.rgb = rgb.match(/.{2}/g).map(function (c) {\n            return parseInt(c, 16);\n        });\n    } else if (rgb.length == 7) {\n        this.rgb = rgb.substring(1, 7).match(/.{2}/g).map(function (c) {\n            return parseInt(c, 16);\n        });\n    } else {\n        this.rgb = rgb.split(\"\").map(function (c) {\n            return parseInt(c + c, 16);\n        });\n    }\n    this.alpha = typeof a === \"number\" ? a : 1;\n};\nColor.prototype = {\n    eval: function _eval() {\n        return this;\n    },\n\n    //\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    //\n    toCSS: function toCSS() {\n        if (this.alpha < 1.0) {\n            return \"rgba(\" + this.rgb.map(function (c) {\n                return Math.round(c);\n            }).concat(this.alpha).join(\", \") + \")\";\n        } else {\n            return \"#\" + this.rgb.map(function (i) {\n                i = Math.round(i);\n                i = (i > 255 ? 255 : i < 0 ? 0 : i).toString(16);\n                return i.length === 1 ? \"0\" + i : i;\n            }).join(\"\");\n        }\n    },\n\n    toHSL: function toHSL() {\n        var r = this.rgb[0] / 255;\n        var g = this.rgb[1] / 255;\n        var b = this.rgb[2] / 255;\n        var a = this.alpha;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h;\n        var s;\n        var l = (max + min) / 2;\n        var d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s: s, l: l, a: a };\n    },\n\n    toARGB: function toARGB() {\n        var argb = [Math.round(this.alpha * 255)].concat(this.rgb);\n        return \"#\" + argb.map(function (i) {\n            i = Math.round(i);\n            i = (i > 255 ? 255 : i < 0 ? 0 : i).toString(16);\n            return i.length === 1 ? \"0\" + i : i;\n        }).join(\"\");\n    },\n\n    mix: function mix(color2, weight) {\n        var color1 = this;\n\n        var p = weight; // .value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2, color1.rgb[1] * w1 + color2.rgb[1] * w2, color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    }\n};\n\n// End colors from less.js\n\nvar LinearRamp = function LinearRamp(start_color, end_color, start_value, end_value) {\n    /**\n     * Simple linear gradient\n     */\n    this.start_color = new Color(start_color);\n    this.end_color = new Color(end_color);\n    this.start_value = start_value;\n    this.end_value = end_value;\n    this.value_range = end_value - start_value;\n};\n\nLinearRamp.prototype.map_value = function (value) {\n    value = Math.max(value, this.start_value);\n    value = Math.min(value, this.end_value);\n    value = (value - this.start_value) / this.value_range;\n    // HACK: just red for now\n    // return \"hsl(0,100%,\" + (value * 100) + \"%)\"\n    return this.start_color.mix(this.end_color, 1 - value).toCSS();\n};\n\nvar SplitRamp = function SplitRamp(start_color, middle_color, end_color, start_value, end_value) {\n    /**\n     * Two gradients split away from 0\n     */\n    this.positive_ramp = new LinearRamp(middle_color, end_color, 0, end_value);\n    this.negative_ramp = new LinearRamp(middle_color, start_color, 0, -start_value);\n    this.start_value = start_value;\n    this.end_value = end_value;\n};\n\nSplitRamp.prototype.map_value = function (value) {\n    value = Math.max(value, this.start_value);\n    value = Math.min(value, this.end_value);\n    if (value >= 0) {\n        return this.positive_ramp.map_value(value);\n    } else {\n        return this.negative_ramp.map_value(-value);\n    }\n};\n\nvar DiagonalHeatmapPainter = function DiagonalHeatmapPainter(data, view_start, view_end, prefs, mode) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    var i;\n    var len;\n\n    if (this.prefs.min_value === undefined) {\n        var min_value = Infinity;\n        for (i = 0, len = this.data.length; i < len; i++) {\n            min_value = Math.min(min_value, this.data[i][6]);\n        }\n        this.prefs.min_value = min_value;\n    }\n    if (this.prefs.max_value === undefined) {\n        var max_value = -Infinity;\n        for (i = 0, len = this.data.length; i < len; i++) {\n            max_value = Math.max(max_value, this.data[i][6]);\n        }\n        this.prefs.max_value = max_value;\n    }\n};\n\nDiagonalHeatmapPainter.prototype.default_prefs = {\n    min_value: undefined,\n    max_value: undefined,\n    mode: \"Heatmap\",\n    pos_color: \"#FF8C00\",\n    neg_color: \"#4169E1\"\n};\n\nDiagonalHeatmapPainter.prototype.draw = function (ctx, width, height, w_scale) {\n    var min_value = this.prefs.min_value;\n    var max_value = this.prefs.max_value;\n    var value_range = max_value - min_value;\n    var height_px = height;\n    var view_start = this.view_start;\n    var mode = this.mode;\n    var data = this.data;\n    var invsqrt2 = 1 / Math.sqrt(2);\n\n    var ramp = new SplitRamp(this.prefs.neg_color, \"#FFFFFF\", this.prefs.pos_color, min_value, max_value);\n\n    var d;\n    var s1;\n    var e1;\n    var s2;\n    var e2;\n    var value;\n\n    var scale = function scale(p) {\n        return (p - view_start) * w_scale;\n    };\n\n    ctx.save();\n\n    // Draw into triangle, then rotate and scale\n    ctx.rotate(-45 * Math.PI / 180);\n    ctx.scale(invsqrt2, invsqrt2);\n\n    // Paint track.\n    for (var i = 0, len = data.length; i < len; i++) {\n        d = data[i];\n\n        s1 = scale(d[1]);\n        e1 = scale(d[2]);\n        s2 = scale(d[4]);\n        e2 = scale(d[5]);\n        value = d[6];\n\n        ctx.fillStyle = ramp.map_value(value);\n        ctx.fillRect(s1, s2, e1 - s1, e2 - s2);\n    }\n\n    ctx.restore();\n};\n\n/**\n * Utilities for painting reads.\n */\nvar ReadPainterUtils = function ReadPainterUtils(ctx, row_height, px_per_base, mode) {\n    this.ctx = ctx;\n    this.row_height = row_height;\n    this.px_per_base = px_per_base;\n    this.draw_details = (mode === \"Pack\" || mode === \"Auto\") && px_per_base >= ctx.canvas.manager.char_width_px;\n    this.delete_details_thickness = 0.2;\n};\n\n_.extend(ReadPainterUtils.prototype, {\n    /**\n     * Draw deletion of base(s).\n     * @param draw_detail if true, drawing in detail and deletion is drawn more subtly\n     */\n    draw_deletion: function draw_deletion(x, y, len) {\n        this.ctx.fillStyle = \"black\";\n        var thickness = (this.draw_details ? this.delete_details_thickness : 1) * this.row_height;\n        y += 0.5 * (this.row_height - thickness);\n        this.ctx.fillRect(x, y, len * this.px_per_base, thickness);\n    }\n});\n\n/**\n * Paints variant data onto canvas.\n */\nvar VariantPainter = function VariantPainter(data, view_start, view_end, prefs, mode, base_color_fn) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    this.base_color_fn = base_color_fn;\n    this.divider_height = 1;\n};\n\n_.extend(VariantPainter.prototype, Painter.prototype, {\n    /**\n     * Height of a single row, depends on mode\n     */\n    get_row_height: function get_row_height() {\n        var mode = this.mode;\n        var height;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        } else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        } else {\n            // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n        }\n        return height;\n    },\n\n    /**\n     * Returns required height to draw a particular number of samples in a given mode.\n     */\n    get_required_height: function get_required_height(num_samples) {\n        // FIXME: for single-sample data, height should be summary_height when zoomed out and\n        // row_height when zoomed in.\n        var height = this.prefs.summary_height;\n\n        // If showing sample data, height is summary + divider + samples.\n        if (num_samples > 1 && this.prefs.show_sample_data) {\n            height += this.divider_height + num_samples * this.get_row_height();\n        }\n        return height;\n    },\n\n    /**\n     * Draw on the context using a rectangle of width x height with scale w_scale.\n     */\n    draw: function draw(ctx, width, height, w_scale) {\n        ctx.save();\n\n        var /**\n            * Returns dictionary of information about an indel; returns empty if there no indel. Assumes indel is left-aligned.\n            * Dict attributes:\n            *    -type: 'insertion' or 'deletion'\n            *    -start: where the deletion starts relative to reference start\n            *    -len: how long the deletion is\n            */\n        get_indel_info = function get_indel_info(ref, alt) {\n            var ref_len = ref.length;\n            var alt_len = alt.length;\n            var start = 0;\n            var len = 1;\n            var type = null;\n            if (alt === \"-\") {\n                type = \"deletion\";\n                len = ref.length;\n            } else if (ref.indexOf(alt) === 0 && ref_len > alt_len) {\n                type = \"deletion\";\n                len = ref_len - alt_len;\n                start = alt_len;\n            } else if (alt.indexOf(ref) === 0 && ref_len < alt_len) {\n                // Insertion.\n                type = \"insertion\";\n                len = alt_len - ref_len;\n                start = alt_len;\n            }\n\n            return type !== null ? { type: type, start: start, len: len } : {};\n        };\n\n        // Draw.\n        var locus_data;\n\n        var pos;\n        var id;\n        var ref;\n        var alt;\n        var qual;\n        var filter;\n        var sample_gts;\n        var allele_counts;\n        var variant;\n        var draw_x_start;\n        var draw_y_start;\n        var genotype;\n\n        var // Always draw variants at least 1 pixel wide.\n        base_px = Math.max(1, Math.floor(w_scale));\n\n        var // Determine number of samples.\n        num_samples = this.data.length ? this.data[0][7].split(\",\").length : 0;\n\n        var row_height = this.mode === \"Squish\" ? SQUISH_TRACK_HEIGHT : PACK_TRACK_HEIGHT;\n\n        var // If zoomed out, fill the whole row with feature to make it easier to read;\n        // when zoomed in, use feature height so that there are gaps in sample rows.\n        feature_height = w_scale < 0.1 ? row_height : this.mode === \"Squish\" ? SQUISH_FEATURE_HEIGHT : PACK_FEATURE_HEIGHT;\n\n        var draw_summary = true;\n\n        var paint_utils = new ReadPainterUtils(ctx, row_height, w_scale, this.mode);\n\n        var j;\n\n        // If there's a single sample, update drawing variables.\n        if (num_samples === 1) {\n            row_height = feature_height = w_scale < ctx.canvas.manager.char_width_px ? this.prefs.summary_height : row_height;\n            paint_utils.row_height = row_height;\n            // No summary when there's a single sample.\n            draw_summary = false;\n        }\n\n        // Draw divider between summary and samples.\n        if (this.prefs.show_sample_data && draw_summary) {\n            ctx.fillStyle = \"#F3F3F3\";\n            ctx.globalAlpha = 1;\n            ctx.fillRect(0, this.prefs.summary_height - this.divider_height, width, this.divider_height);\n        }\n\n        // Draw variants.\n        ctx.textAlign = \"center\";\n        for (var i = 0; i < this.data.length; i++) {\n            // Get locus data.\n            locus_data = this.data[i];\n            pos = locus_data[1];\n            ref = locus_data[3];\n            alt = [locus_data[4].split(\",\")];\n            sample_gts = locus_data[7].split(\",\");\n            allele_counts = locus_data.slice(8);\n\n            // Process alterate values to derive information about each alt.\n            alt = _.map(_.flatten(alt), function (a) {\n                var alt_info = {\n                    type: \"snp\",\n                    value: a,\n                    start: 0\n                };\n\n                var indel_info = get_indel_info(ref, a);\n\n                return _.extend(alt_info, indel_info);\n            });\n\n            // Only draw locus data if it's in viewing region.\n            if (pos < this.view_start || pos > this.view_end) {\n                continue;\n            }\n\n            // Draw summary for alleles.\n            if (draw_summary) {\n                ctx.fillStyle = \"#999999\";\n                ctx.globalAlpha = 1;\n                for (j = 0; j < alt.length; j++) {\n                    // Draw background for summary.\n                    draw_x_start = this.get_start_draw_pos(pos + alt[j].start, w_scale);\n                    ctx.fillRect(draw_x_start, 0, base_px, this.prefs.summary_height);\n                    draw_y_start = this.prefs.summary_height;\n                    // Draw allele fractions onto summary.\n                    for (j = 0; j < alt.length; j++) {\n                        ctx.fillStyle = alt[j].type === \"deletion\" ? \"black\" : this.base_color_fn(alt[j].value);\n                        var allele_frac = allele_counts / sample_gts.length;\n                        var draw_height = Math.ceil(this.prefs.summary_height * allele_frac);\n                        ctx.fillRect(draw_x_start, draw_y_start - draw_height, base_px, draw_height);\n                        draw_y_start -= draw_height;\n                    }\n                }\n            }\n\n            // Done drawing if not showing samples data.\n            if (!this.prefs.show_sample_data) {\n                continue;\n            }\n\n            // Draw sample genotype(s).\n            draw_y_start = draw_summary ? this.prefs.summary_height + this.divider_height : 0;\n            for (j = 0; j < sample_gts.length; j++, draw_y_start += row_height) {\n                genotype = sample_gts[j] ? sample_gts[j].split(/\\/|\\|/) : [\"0\", \"0\"];\n\n                // Get variant to draw and set drawing properties.\n                variant = null;\n                if (genotype[0] === genotype[1]) {\n                    if (genotype[0] === \".\") {\n                        // TODO: draw uncalled variant.\n                    } else if (genotype[0] !== \"0\") {\n                        // Homozygous for variant.\n                        variant = alt[parseInt(genotype[0], 10) - 1];\n                        ctx.globalAlpha = 1;\n                    }\n                    // else reference\n                } else {\n                    // Heterozygous for variant.\n                    variant = genotype[0] !== \"0\" ? genotype[0] : genotype[1];\n                    variant = alt[parseInt(variant, 10) - 1];\n                    ctx.globalAlpha = 0.5;\n                }\n\n                // If there's a variant, draw it.\n                if (variant) {\n                    draw_x_start = this.get_start_draw_pos(pos + variant.start, w_scale);\n                    if (variant.type === \"snp\") {\n                        var snp = variant.value;\n                        ctx.fillStyle = this.base_color_fn(snp);\n                        if (paint_utils.draw_details) {\n                            ctx.fillText(snp, this.get_draw_pos(pos, w_scale), draw_y_start + row_height);\n                        } else {\n                            ctx.fillRect(draw_x_start, draw_y_start + 1, base_px, feature_height);\n                        }\n                    } else if (variant.type === \"deletion\") {\n                        paint_utils.draw_deletion(draw_x_start, draw_y_start + 1, variant.len);\n                    } else {\n                        // TODO: handle insertions.\n                    }\n                }\n            }\n        }\n\n        ctx.restore();\n    }\n});\n\nexports.default = {\n    Scaler: Scaler,\n    LinePainter: LinePainter,\n    LinkedFeaturePainter: LinkedFeaturePainter,\n    ReadPainter: ReadPainter,\n    ArcLinkedFeaturePainter: ArcLinkedFeaturePainter,\n    DiagonalHeatmapPainter: DiagonalHeatmapPainter,\n    VariantPainter: VariantPainter\n};\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar extend = _.extend;\n\n/**\n * Filters that enable users to show/hide data points dynamically.\n */\nvar Filter = function Filter(obj_dict) {\n    this.manager = null;\n    this.name = obj_dict.name;\n    // Index into payload to filter.\n    this.index = obj_dict.index;\n    this.tool_id = obj_dict.tool_id;\n    // Name to use for filter when building expression for tool.\n    this.tool_exp_name = obj_dict.tool_exp_name;\n};\n\nextend(Filter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function to_dict() {\n        return {\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        };\n    }\n});\n\n/**\n * Creates an action icon.\n */\nvar create_action_icon = function create_action_icon(title, css_class, on_click_fn) {\n    return $(\"<a/>\").attr(\"href\", \"javascript:void(0);\").attr(\"title\", title).addClass(\"icon-button\").addClass(css_class).tooltip().click(on_click_fn);\n};\n\n/**\n * Number filters have a min, max as well as a low, high; low and high are used\n */\nvar NumberFilter = function NumberFilter(obj_dict) {\n    //\n    // Attribute init.\n    //\n    Filter.call(this, obj_dict);\n    // Filter low/high. These values are used to filter elements.\n    this.low = \"low\" in obj_dict ? obj_dict.low : -Number.MAX_VALUE;\n    this.high = \"high\" in obj_dict ? obj_dict.high : Number.MAX_VALUE;\n    // Slide min/max. These values are used to set/update slider.\n    this.min = \"min\" in obj_dict ? obj_dict.min : Number.MAX_VALUE;\n    this.max = \"max\" in obj_dict ? obj_dict.max : -Number.MAX_VALUE;\n    // UI elements associated with filter.\n    this.container = null;\n    this.slider = null;\n    this.slider_label = null;\n\n    //\n    // Create HTML.\n    //\n\n    // Function that supports inline text editing of slider values.\n    // Enable users to edit parameter's value via a text box.\n    var edit_slider_values = function edit_slider_values(container, span, slider) {\n        container.click(function () {\n            var cur_value = span.text();\n            var max = parseFloat(slider.slider(\"option\", \"max\"));\n\n            var input_size = max <= 1 ? 4 : max <= 1000000 ? max.toString().length : 6;\n\n            var multi_value = false;\n            var slider_row = $(this).parents(\".slider-row\");\n\n            // Row now has input.\n            slider_row.addClass(\"input\");\n\n            // Increase input size if there are two values.\n            if (slider.slider(\"option\", \"values\")) {\n                input_size = 2 * input_size + 1;\n                multi_value = true;\n            }\n            span.text(\"\");\n            // Temporary input for changing value.\n            $(\"<input type='text'/>\").attr(\"size\", input_size).attr(\"maxlength\", input_size).attr(\"value\", cur_value).appendTo(span).focus().select().click(function (e) {\n                // Don't want click to propogate up to values_span and restart everything.\n                e.stopPropagation();\n            }).blur(function () {\n                $(this).remove();\n                span.text(cur_value);\n                slider_row.removeClass(\"input\");\n            }).keyup(function (e) {\n                if (e.keyCode === 27) {\n                    // Escape key.\n                    $(this).trigger(\"blur\");\n                } else if (e.keyCode === 13) {\n                    //\n                    // Enter/return key initiates callback. If new value(s) are in slider range,\n                    // change value (which calls slider's change() function).\n                    //\n                    var slider_min = slider.slider(\"option\", \"min\");\n\n                    var slider_max = slider.slider(\"option\", \"max\");\n\n                    var invalid = function invalid(a_val) {\n                        return isNaN(a_val) || a_val > slider_max || a_val < slider_min;\n                    };\n\n                    var new_value = $(this).val();\n                    if (!multi_value) {\n                        new_value = parseFloat(new_value);\n                        if (invalid(new_value)) {\n                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n                            return $(this);\n                        }\n                    } else {\n                        // Multi value.\n                        new_value = new_value.split(\"-\");\n                        new_value = [parseFloat(new_value[0]), parseFloat(new_value[1])];\n                        if (invalid(new_value[0]) || invalid(new_value[1])) {\n                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n                            return $(this);\n                        }\n                    }\n\n                    // Updating the slider also updates slider values and removes input.\n                    slider.slider(multi_value ? \"values\" : \"value\", new_value);\n                    slider_row.removeClass(\"input\");\n                }\n            });\n        });\n    };\n\n    var filter = this;\n\n    filter.parent_div = $(\"<div/>\").addClass(\"filter-row slider-row\");\n\n    // Set up filter label (name, values).\n    var filter_label = $(\"<div/>\").addClass(\"elt-label\").appendTo(filter.parent_div);\n\n    var name_span = $(\"<span/>\").addClass(\"slider-name\").text(filter.name + \"  \").appendTo(filter_label);\n\n    var values_span = $(\"<span/>\").text(this.low + \"-\" + this.high);\n\n    var values_span_container = $(\"<span/>\").addClass(\"slider-value\").appendTo(filter_label).append(\"[\").append(values_span).append(\"]\");\n\n    filter.values_span = values_span;\n\n    // Set up slider for filter.\n    var slider_div = $(\"<div/>\").addClass(\"slider\").appendTo(filter.parent_div);\n    filter.control_element = $(\"<div/>\").attr(\"id\", filter.name + \"-filter-control\").appendTo(slider_div);\n    filter.control_element.slider({\n        range: true,\n        min: this.min,\n        max: this.max,\n        step: this.get_slider_step(this.min, this.max),\n        values: [this.low, this.high],\n        slide: function slide(event, ui) {\n            filter.slide(event, ui);\n        },\n        change: function change(event, ui) {\n            filter.control_element.slider(\"option\", \"slide\").call(filter.control_element, event, ui);\n        }\n    });\n    filter.slider = filter.control_element;\n    filter.slider_label = values_span;\n\n    // Enable users to edit slider values via text box.\n    edit_slider_values(values_span_container, values_span, filter.control_element);\n\n    // Set up filter display controls.\n    var display_controls_div = $(\"<div/>\").addClass(\"display-controls\").appendTo(filter.parent_div);\n    this.transparency_icon = create_action_icon(\"Use filter for data transparency\", \"layer-transparent\", function () {\n        if (filter.manager.alpha_filter !== filter) {\n            // Setting this filter as the alpha filter.\n            filter.manager.alpha_filter = filter;\n            // Update UI for new filter.\n            filter.manager.parent_div.find(\".layer-transparent\").removeClass(\"active\").hide();\n            filter.transparency_icon.addClass(\"active\").show();\n        } else {\n            // Clearing filter as alpha filter.\n            filter.manager.alpha_filter = null;\n            filter.transparency_icon.removeClass(\"active\");\n        }\n        filter.manager.track.request_draw({\n            force: true,\n            clear_after: true\n        });\n    }).appendTo(display_controls_div).hide();\n    this.height_icon = create_action_icon(\"Use filter for data height\", \"arrow-resize-090\", function () {\n        if (filter.manager.height_filter !== filter) {\n            // Setting this filter as the height filter.\n            filter.manager.height_filter = filter;\n            // Update UI for new filter.\n            filter.manager.parent_div.find(\".arrow-resize-090\").removeClass(\"active\").hide();\n            filter.height_icon.addClass(\"active\").show();\n        } else {\n            // Clearing filter as alpha filter.\n            filter.manager.height_filter = null;\n            filter.height_icon.removeClass(\"active\");\n        }\n        filter.manager.track.request_draw({\n            force: true,\n            clear_after: true\n        });\n    }).appendTo(display_controls_div).hide();\n    filter.parent_div.hover(function () {\n        filter.transparency_icon.show();\n        filter.height_icon.show();\n    }, function () {\n        if (filter.manager.alpha_filter !== filter) {\n            filter.transparency_icon.hide();\n        }\n        if (filter.manager.height_filter !== filter) {\n            filter.height_icon.hide();\n        }\n    });\n\n    // Add to clear floating layout.\n    $(\"<div style='clear: both;'/>\").appendTo(filter.parent_div);\n};\nextend(NumberFilter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function to_dict() {\n        var obj_dict = Filter.prototype.to_dict.call(this);\n        return extend(obj_dict, {\n            type: \"number\",\n            min: this.min,\n            max: this.max,\n            low: this.low,\n            high: this.high\n        });\n    },\n    /**\n     * Return a copy of filter.\n     */\n    copy: function copy() {\n        return new NumberFilter({\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        });\n    },\n    /**\n     * Get step for slider.\n     */\n    // FIXME: make this a \"static\" function.\n    get_slider_step: function get_slider_step(min, max) {\n        var range = max - min;\n        return range <= 2 ? 0.01 : 1;\n    },\n    /**\n     * Handle slide events.\n     */\n    slide: function slide(event, ui) {\n        var values = ui.values;\n\n        // Set new values in UI.\n        this.values_span.text(values[0] + \"-\" + values[1]);\n\n        // Set new values in filter.\n        this.low = values[0];\n        this.high = values[1];\n\n        // Set timeout to update if filter low, high are stable.\n        var self = this;\n        setTimeout(function () {\n            if (values[0] === self.low && values[1] === self.high) {\n                self.manager.track.request_draw({\n                    force: true,\n                    clear_after: true\n                });\n            }\n        }, 25);\n    },\n    /**\n     * Returns true if filter can be applied to element.\n     */\n    applies_to: function applies_to(element) {\n        if (element.length > this.index) {\n            return true;\n        }\n        return false;\n    },\n    /**\n     * Helper function: returns true if value in in filter's [low, high] range.\n     */\n    _keep_val: function _keep_val(val) {\n        return isNaN(val) || val >= this.low && val <= this.high;\n    },\n    /**\n     * Returns true if (a) element's value(s) is in [low, high] (range is inclusive)\n     * or (b) if value is non-numeric and hence unfilterable.\n     */\n    keep: function keep(element) {\n        if (!this.applies_to(element)) {\n            // No element to filter on.\n            return true;\n        }\n\n        // Keep value function.\n        var filter = this;\n\n        // Do filtering.\n        var to_filter = element[this.index];\n        if (to_filter instanceof Array) {\n            var returnVal = true;\n            for (var i = 0; i < to_filter.length; i++) {\n                if (!this._keep_val(to_filter[i])) {\n                    // Exclude element.\n                    returnVal = false;\n                    break;\n                }\n            }\n            return returnVal;\n        } else {\n            return this._keep_val(element[this.index]);\n        }\n    },\n    /**\n     * Update filter's min and max values based on element's values.\n     */\n    update_attrs: function update_attrs(element) {\n        var updated = false;\n        if (!this.applies_to(element)) {\n            return updated;\n        }\n\n        //\n        // Update filter's min, max based on element values.\n        //\n\n        // Make value(s) into an Array.\n        var values = element[this.index];\n        if (!(values instanceof Array)) {\n            values = [values];\n        }\n\n        // Loop through values and update min, max.\n        for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            if (value < this.min) {\n                this.min = Math.floor(value);\n                updated = true;\n            }\n            if (value > this.max) {\n                this.max = Math.ceil(value);\n                updated = true;\n            }\n        }\n        return updated;\n    },\n    /**\n     * Update filter's slider.\n     */\n    update_ui_elt: function update_ui_elt() {\n        // Only show filter if min < max because filter is not useful otherwise. This\n        // covers all corner cases, such as when min, max have not been defined and\n        // when min == max.\n        if (this.min < this.max) {\n            this.parent_div.show();\n        } else {\n            this.parent_div.hide();\n        }\n\n        var slider_min = this.slider.slider(\"option\", \"min\");\n        var slider_max = this.slider.slider(\"option\", \"max\");\n        if (this.min < slider_min || this.max > slider_max) {\n            // Update slider min, max, step.\n            this.slider.slider(\"option\", \"min\", this.min);\n            this.slider.slider(\"option\", \"max\", this.max);\n            this.slider.slider(\"option\", \"step\", this.get_slider_step(this.min, this.max));\n            // Refresh slider:\n            // TODO: do we want to keep current values or reset to min/max?\n            // Currently we reset values:\n            this.slider.slider(\"option\", \"values\", [this.min, this.max]);\n            // To use the current values.\n            //var values = this.slider.slider( \"option\", \"values\" );\n            //this.slider.slider( \"option\", \"values\", values );\n        }\n    }\n});\n\n/**\n * Manages a set of filters.\n */\nvar FiltersManager = function FiltersManager(track, obj_dict) {\n    this.track = track;\n    this.alpha_filter = null;\n    this.height_filter = null;\n    this.filters = [];\n\n    //\n    // Create HTML.\n    //\n\n    //\n    // Create parent div.\n    //\n    this.parent_div = $(\"<div/>\").addClass(\"filters\").hide();\n    // Disable dragging, double clicking, keys on div so that actions on slider do not impact viz.\n    this.parent_div.bind(\"drag\", function (e) {\n        e.stopPropagation();\n    }).click(function (e) {\n        e.stopPropagation();\n    }).bind(\"dblclick\", function (e) {\n        e.stopPropagation();\n    }).bind(\"keydown\", function (e) {\n        e.stopPropagation();\n    });\n\n    //\n    // Restore state from dict.\n    //\n    if (obj_dict && \"filters\" in obj_dict) {\n        // Second condition needed for backward compatibility.\n        var alpha_filter_name = \"alpha_filter\" in obj_dict ? obj_dict.alpha_filter : null;\n\n        var height_filter_name = \"height_filter\" in obj_dict ? obj_dict.height_filter : null;\n\n        var filters_dict = obj_dict.filters;\n        var filter;\n        for (var i = 0; i < filters_dict.length; i++) {\n            if (filters_dict[i].type === \"number\") {\n                filter = new NumberFilter(filters_dict[i]);\n                this.add_filter(filter);\n                if (filter.name === alpha_filter_name) {\n                    this.alpha_filter = filter;\n                    filter.transparency_icon.addClass(\"active\").show();\n                }\n                if (filter.name === height_filter_name) {\n                    this.height_filter = filter;\n                    filter.height_icon.addClass(\"active\").show();\n                }\n            } else {\n                console.log(\"ERROR: unsupported filter: \", name, type);\n            }\n        }\n\n        if (\"visible\" in obj_dict && obj_dict.visible) {\n            this.parent_div.show();\n        }\n    }\n\n    // Add button to filter complete dataset.\n    if (this.filters.length !== 0) {\n        var run_buttons_row = $(\"<div/>\").addClass(\"param-row\").appendTo(this.parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'/>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_buttons_row);\n        var filter_manager = this;\n        run_on_dataset_button.click(function () {\n            filter_manager.run_on_dataset();\n        });\n    }\n};\n\nextend(FiltersManager.prototype, {\n    // HTML manipulation and inspection.\n    show: function show() {\n        this.parent_div.show();\n    },\n    hide: function hide() {\n        this.parent_div.hide();\n    },\n    toggle: function toggle() {\n        this.parent_div.toggle();\n    },\n    visible: function visible() {\n        return this.parent_div.is(\":visible\");\n    },\n    /**\n     * Returns dictionary for manager.\n     */\n    to_dict: function to_dict() {\n        var obj_dict = {};\n        var filter_dicts = [];\n        var filter;\n\n        // Include individual filter states.\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            filter_dicts.push(filter.to_dict());\n        }\n        obj_dict.filters = filter_dicts;\n\n        // Include transparency, height filters.\n        obj_dict.alpha_filter = this.alpha_filter ? this.alpha_filter.name : null;\n        obj_dict.height_filter = this.height_filter ? this.height_filter.name : null;\n\n        // Include visibility.\n        obj_dict.visible = this.parent_div.is(\":visible\");\n\n        return obj_dict;\n    },\n    /**\n     * Return a copy of the manager.\n     */\n    copy: function copy(new_track) {\n        var copy = new FiltersManager(new_track);\n        for (var i = 0; i < this.filters.length; i++) {\n            copy.add_filter(this.filters[i].copy());\n        }\n        return copy;\n    },\n    /**\n     * Add a filter to the manager.\n     */\n    add_filter: function add_filter(filter) {\n        filter.manager = this;\n        this.parent_div.append(filter.parent_div);\n        this.filters.push(filter);\n    },\n    /**\n     * Remove all filters from manager.\n     */\n    remove_all: function remove_all() {\n        this.filters = [];\n        this.parent_div.children().remove();\n    },\n    /**\n     * Initialize filters.\n     */\n\n    init_filters: function init_filters() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.update_ui_elt();\n        }\n    },\n    /**\n     * Clear filters so that they do not impact track display.\n     */\n    clear_filters: function clear_filters() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.slider.slider(\"option\", \"values\", [filter.min, filter.max]);\n        }\n        this.alpha_filter = null;\n        this.height_filter = null;\n\n        // Hide icons for setting filters.\n        this.parent_div.find(\".icon-button\").hide();\n    },\n    run_on_dataset: function run_on_dataset() {\n        // Get or create dictionary item.\n        var get_or_create_dict_item = function get_or_create_dict_item(dict, key, new_item) {\n            // Add new item to dict if\n            if (!(key in dict)) {\n                dict[key] = new_item;\n            }\n            return dict[key];\n        };\n\n        //\n        // Find and group active filters. Active filters are those being used to hide data.\n        // Filters with the same tool id are grouped.\n        //\n        var active_filters = {};\n\n        var filter;\n        var tool_filter_conditions;\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            if (filter.tool_id) {\n                // Add filtering conditions if filter low/high are set.\n                if (filter.min !== filter.low) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" >= \" + filter.low;\n                }\n                if (filter.max !== filter.high) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" <= \" + filter.high;\n                }\n            }\n        }\n\n        //\n        // Use tools to run filters.\n        //\n\n        // Create list of (tool_id, tool_filters) tuples.\n        var active_filters_list = [];\n        for (var tool_id in active_filters) {\n            active_filters_list[active_filters_list.length] = [tool_id, active_filters[tool_id]];\n        }\n\n        // Invoke recursive function to run filters; this enables chaining of filters via\n        // iteratively application.\n        (function run_filter(input_dataset_id, filters) {\n            var // Set up filtering info and params.\n            filter_tuple = filters[0];\n\n            var tool_id = filter_tuple[0];\n            var tool_filters = filter_tuple[1];\n            var tool_filter_str = \"(\" + tool_filters.join(\") and (\") + \")\";\n\n            var url_params = {\n                cond: tool_filter_str,\n                input: input_dataset_id,\n                target_dataset_id: input_dataset_id,\n                tool_id: tool_id\n            };\n\n            // Remove current filter.\n            filters = filters.slice(1);\n\n            $.getJSON(run_tool_url, url_params, function (response) {\n                if (response.error) {\n                    // General error.\n                    Galaxy.modal.show({\n                        title: \"Filter Dataset\",\n                        body: \"Error running tool \" + tool_id,\n                        buttons: { Close: Galaxy.modal.hide() }\n                    });\n                } else if (filters.length === 0) {\n                    // No more filters to run.\n                    Galaxy.modal.show({\n                        title: \"Filtering Dataset\",\n                        body: \"Filter(s) are running on the complete dataset. Outputs are in dataset's history.\",\n                        buttons: { Close: Galaxy.modal.hide() }\n                    });\n                } else {\n                    // More filters to run.\n                    run_filter(response.dataset_id, filters);\n                }\n            });\n        })(this.track.dataset_id, active_filters_list);\n    }\n});\n\nexports.default = {\n    FiltersManager: FiltersManager,\n    NumberFilter: NumberFilter\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _visualization = __webpack_require__(9);\n\nvar _visualization2 = _interopRequireDefault(_visualization);\n\nvar _bigwig = __webpack_require__(40);\n\nvar bigwig = _interopRequireWildcard(_bigwig);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Data manager for BBI datasets/files, including BigWig and BigBed.\n */\nvar BBIDataManager = _visualization2.default.GenomeDataManager.extend({\n    /**\n     * Load data from server and manage data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function load_data(region, mode, resolution, extra_params) {\n        var deferred = $.Deferred();\n        this.set_data(region, deferred);\n\n        var url = Galaxy.root + \"datasets/\" + this.get(\"dataset\").id + \"/display\";\n\n        var self = this;\n        var promise = new $.Deferred();\n        $.when(bigwig.makeBwg(url)).then(function (bb, err) {\n            $.when(bb.readWigData(region.get(\"chrom\"), region.get(\"start\"), region.get(\"end\"))).then(function (data) {\n                // Transform data into \"bigwig\" format for LinePainter. \"bigwig\" format is an array of 2-element arrays\n                // where each element is [position, score]; unlike real bigwig format, no gaps are allowed.\n                var result = [];\n\n                var prev = { max: Number.MIN_VALUE };\n                data.forEach(function (d) {\n                    // If there is a gap between prev and d, fill it with an interval with score 0.\n                    // This is necessary for LinePainter to draw correctly.\n                    if (prev.max !== d.min - 1) {\n                        // +1 to start after previous region.\n                        result.push([prev.max + 1, 0]);\n                        // -2 = -1 for converting from 1-based to 0-based coordinates,\n                        //      -1 for ending before current region.\n                        result.push([d.min - 2, 0]);\n                    }\n\n                    // Add data point for entry start. -1 to convert from wiggle\n                    // 1-based coordinates to 0-based browser coordinates.\n                    result.push([d.min - 1, d.score]);\n\n                    // Add data point for entry end:\n                    result.push([d.max, d.score]);\n\n                    prev = d;\n                });\n\n                var entry = {\n                    data: result,\n                    region: region,\n                    dataset_type: \"bigwig\"\n                };\n\n                self.set_data(region, entry);\n                deferred.resolve(entry);\n            });\n        });\n\n        return deferred;\n    }\n});\n\nexports.default = {\n    BBIDataManager: BBIDataManager\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//\n// Author: Jeremy Goecks\n//\n// Modified from:\n//\n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// bigwig.js: indexed binary WIG (and BED) files\n//\n\n// Requirements:\n//  * jquery and ajax-native plugin for reading binary data, jquery for promises\n//  * spans for working working with genomic intervals\n//  * jszlib for decompression.\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(41), __webpack_require__(42), __webpack_require__(43)], __WEBPACK_AMD_DEFINE_RESULT__ = function(spans, jszlib) {\n    \"use strict\";\n\n    // -- Copied from das.js --\n\n    function DASFeature() {\n    }\n\n    function DASGroup(id) {\n        if (id)\n        this.id = id;\n    }\n\n    // -- End copy --\n\n    // -- Copied from bin.js --\n\n    function readInt(ba, offset) {\n        return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);\n    }\n\n    // -- End copy --\n\n    // Some globals.\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n\n    var BIG_WIG_MAGIC = 0x888FFC26;\n    var BIG_WIG_MAGIC_BE = 0x26FC8F88;\n    var BIG_BED_MAGIC = 0x8789F2EB;\n    var BIG_BED_MAGIC_BE = 0xEBF28987;\n\n\n    var BIG_WIG_TYPE_GRAPH = 1;\n    var BIG_WIG_TYPE_VSTEP = 2;\n    var BIG_WIG_TYPE_FSTEP = 3;\n\n    var M1 = 256;\n    var M2 = 256*256;\n    var M3 = 256*256*256;\n    var M4 = 256*256*256*256;\n\n    var BED_COLOR_REGEXP = new RegExp(\"^[0-9]+,[0-9]+,[0-9]+\");\n\n    /**\n     * Read binary data from a URL using HTTP Range header. Requires jQuery and ajax-native plugin.\n     */\n    function read(url, start, size) {\n        // Taken from bin.js:\n        // This may be necessary for Safari:\n        //   if ((isSafari || this.opts.salt) && url.indexOf('?') < 0) {\n        //       url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n        //   }\n\n        var chunkSizeLimit = Math.pow(10, 6); // 1 MB\n        if(size > chunkSizeLimit) {\n            // TODO: raise error.\n        }\n\n        // Read data from remote file.\n        return $.ajax({\n            type: 'GET',\n            dataType: 'native',\n            url: url,\n            // Potential timeout on first request to catch mixed-content errors on Chromium.\n            timeout: 5000,\n            beforeSend: function(xhrObj) {\n                // (size - 1) because range is inclusive.\n                xhrObj.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + (start + (size - 1)));\n            },\n            xhrFields: {\n                responseType: 'arraybuffer'\n            }\n        });\n    }\n\n    function bwg_readOffset(ba, o) {\n        var offset = ba[o] + ba[o+1]*M1 + ba[o+2]*M2 + ba[o+3]*M3 + ba[o+4]*M4;\n        return offset;\n    }\n\n    function BigWig() {\n    }\n\n    /**\n     * Read the chromosome B+ tree header.\n     */\n    BigWig.prototype.readChromTree = function() {\n        var thisB = this;\n        this.chromsToIDs = {};\n        this.idsToChroms = {};\n        this.maxID = 0;\n\n        var udo = this.unzoomedDataOffset;\n        var eb = (udo - this.chromTreeOffset) & 3;\n        udo = udo + 4 - eb;\n\n        // Read and parse the chrom tree, return the promise so that subsequent actions can be taken.\n        return $.when(read(this.url, this.chromTreeOffset, udo - this.chromTreeOffset)).then(function(bpt) {\n            var ba = new Uint8Array(bpt);\n            var sa = new Int16Array(bpt);\n            var la = new Int32Array(bpt);\n            var bptMagic = la[0];\n            var blockSize = la[1];\n            var keySize = la[2];\n            var valSize = la[3];\n            var itemCount = bwg_readOffset(ba, 16);\n            var rootNodeOffset = 32;\n\n            var bptReadNode = function(offset) {\n                var nodeType = ba[offset];\n                var cnt = sa[(offset/2) + 1];\n                offset += 4;\n                for (var n = 0; n < cnt; ++n) {\n                    if (nodeType === 0) {\n                        offset += keySize;\n                        var childOffset = bwg_readOffset(ba, offset);\n                        offset += 8;\n                        childOffset -= thisB.chromTreeOffset;\n                        bptReadNode(childOffset);\n                    } else {\n                        var key = '';\n                        for (var ki = 0; ki < keySize; ++ki) {\n                            var charCode = ba[offset++];\n                            if (charCode !== 0) {\n                                key += String.fromCharCode(charCode);\n                            }\n                        }\n                        var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n                        var chromSize = (ba[offset + 7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n                        offset += 8;\n\n                        thisB.chromsToIDs[key] = chromId;\n                        if (key.indexOf('chr') === 0) {\n                            thisB.chromsToIDs[key.substr(3)] = chromId;\n                        }\n                        thisB.idsToChroms[chromId] = key;\n                        thisB.maxID = Math.max(thisB.maxID, chromId);\n                    }\n                }\n            };\n            bptReadNode(rootNodeOffset);\n        });\n    }\n\n    function BigWigView(bwg, cirTreeOffset, cirTreeLength, isSummary) {\n        this.bwg = bwg;\n        this.cirTreeOffset = cirTreeOffset;\n        this.cirTreeLength = cirTreeLength;\n        this.isSummary = isSummary;\n    }\n\n\n\n    BigWigView.prototype.readWigData = function(chrName, min, max) {\n        var chr = this.bwg.chromsToIDs[chrName],\n            rval;\n        if (chr === undefined) {\n            // Not an error because some .bwgs won't have data for all chromosomes.\n            rval = [];\n        } else {\n            rval = this.readWigDataById(chr, min, max);\n        }\n\n        return rval;\n    };\n\n    BigWigView.prototype.readWigDataById = function(chr, min, max) {\n        var thisB = this,\n            promise = $.Deferred();\n\n        // Read the R-tree index header and then read data again.\n        if (!this.cirHeader) {\n            $.when(read(thisB.bwg.url, this.cirTreeOffset, 48)).then(function(result) {\n                thisB.cirHeader = result;\n                var la = new Int32Array(thisB.cirHeader);\n                thisB.cirBlockSize = la[1];\n                $.when(thisB.readWigDataById(chr, min, max)).then(function(result) {\n                    promise.resolve(result);\n                });\n            });\n            return promise;\n        }\n\n        var blocksToFetch = [];\n        var outstanding = 0;\n\n        var beforeBWG = Date.now();\n\n        var filter = function(chromId, fmin, fmax, toks) {\n            return ((chr < 0 || chromId == chr) && fmin <= max && fmax >= min);\n        };\n\n        var cirFobRecur = function(offset, level) {\n            if (thisB.bwg.instrument)\n            console.log('level=' + level + '; offset=' + offset + '; time=' + (Date.now()|0));\n\n            outstanding += offset.length;\n\n            if (offset.length == 1 && offset[0] - thisB.cirTreeOffset == 48 && thisB.cachedCirRoot) {\n                cirFobRecur2(thisB.cachedCirRoot, 0, level);\n                --outstanding;\n                if (outstanding === 0) {\n                    $.when(thisB.fetchFeatures(filter, blocksToFetch)).then(function(result) {\n                        promise.resolve(result);\n                    });\n                }\n                return;\n            }\n\n            var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n            var spans;\n            for (var i = 0; i < offset.length; ++i) {\n                var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n                spans = spans ? union(spans, blockSpan) : blockSpan;\n            }\n\n            var fetchRanges = spans.ranges();\n            for (var r = 0; r < fetchRanges.length; ++r) {\n                var fr = fetchRanges[r];\n                cirFobStartFetch(offset, fr, level);\n            }\n        };\n\n        var cirFobStartFetch = function(offset, fr, level, attempts) {\n            var length = fr.max() - fr.min();\n            $.when(read(thisB.bwg.url, fr.min(), fr.max() - fr.min())).then(function(resultBuffer) {\n                for (var i = 0; i < offset.length; ++i) {\n                    if (fr.contains(offset[i])) {\n                        cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n\n                        if (offset[i] - thisB.cirTreeOffset == 48 && offset[i] - fr.min() === 0)\n                            thisB.cachedCirRoot = resultBuffer;\n\n                        --outstanding;\n                        if (outstanding === 0) {\n                            $.when(thisB.fetchFeatures(filter, blocksToFetch)).then(function(result) {\n                                promise.resolve(result);\n                            });\n                        }\n                    }\n                }\n            });\n        };\n\n        var cirFobRecur2 = function(cirBlockData, offset, level) {\n            var ba = new Uint8Array(cirBlockData);\n            var sa = new Int16Array(cirBlockData);\n            var la = new Int32Array(cirBlockData);\n\n            var isLeaf = ba[offset];\n            var cnt = sa[offset/2 + 1];\n            offset += 4;\n\n            if (isLeaf !== 0) {\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = bwg_readOffset(ba, offset+16);\n                    var blockSize = bwg_readOffset(ba, offset+24);\n                    if (((chr < 0 || startChrom < chr) || (startChrom == chr && startBase <= max)) &&\n                    ((chr < 0 || endChrom   > chr) || (endChrom == chr && endBase >= min)))\n                    {\n                        blocksToFetch.push({offset: blockOffset, size: blockSize});\n                    }\n                    offset += 32;\n                }\n            } else {\n                var recurOffsets = [];\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = bwg_readOffset(ba, offset+16);\n                    if ((chr < 0 || startChrom < chr || (startChrom == chr && startBase <= max)) &&\n                    (chr < 0 || endChrom   > chr || (endChrom == chr && endBase >= min)))\n                    {\n                        recurOffsets.push(blockOffset);\n                    }\n                    offset += 24;\n                }\n                if (recurOffsets.length > 0) {\n                    cirFobRecur(recurOffsets, level + 1);\n                }\n            }\n        };\n\n        cirFobRecur([thisB.cirTreeOffset + 48], 1);\n        return promise;\n    };\n\n    /**\n     * Fetch data for a set of blocks. Returns a promise that resolves to fetched data.\n     */\n    BigWigView.prototype.fetchFeatures = function(filter, blocksToFetch) {\n        var thisB = this,\n            promise = $.Deferred();\n\n        blocksToFetch.sort(function(b0, b1) {\n            return (b0.offset|0) - (b1.offset|0);\n        });\n\n        if (blocksToFetch.length === 0) {\n            return [];\n        } else {\n            var features = [];\n            var createFeature = function(chr, fmin, fmax, opts) {\n                if (!opts) {\n                    opts = {};\n                }\n\n                var f = new DASFeature();\n                f._chromId = chr;\n                f.segment = thisB.bwg.idsToChroms[chr];\n                f.min = fmin;\n                f.max = fmax;\n                f.type = thisB.bwg.type;\n\n                for (var k in opts) {\n                    f[k] = opts[k];\n                }\n\n                features.push(f);\n            };\n\n            // Recursive function to read blocks of data.\n            var tramp = function() {\n                if (blocksToFetch.length === 0) {\n                    var afterBWG = Date.now();\n                    // dlog('BWG fetch took ' + (afterBWG - beforeBWG) + 'ms');\n                    return promise.resolve(features);\n                }\n                else {\n                    var block = blocksToFetch[0];\n                    if (block.data) {\n                        thisB.parseFeatures(block.data, createFeature, filter);\n                        blocksToFetch.splice(0, 1);\n                        tramp();\n                    }\n                    else {\n                        var fetchStart = block.offset;\n                        var fetchSize = block.size;\n                        var bi = 1;\n                        while (bi < blocksToFetch.length && blocksToFetch[bi].offset == (fetchStart + fetchSize)) {\n                            fetchSize += blocksToFetch[bi].size;\n                            ++bi;\n                        }\n\n                        $.when(read(thisB.bwg.url, fetchStart, fetchSize)).then(function(result) {\n                            var offset = 0;\n                            var bi = 0;\n                            while (offset < fetchSize) {\n                                var fb = blocksToFetch[bi];\n\n                                var data;\n                                if (thisB.bwg.uncompressBufSize > 0) {\n                                    data = jszlib_inflate_buffer(result, offset + 2, fb.size - 2);\n                                } else {\n                                    var tmp = new Uint8Array(fb.size);    // FIXME is this really the best we can do?\n                                    arrayCopy(new Uint8Array(result, offset, fb.size), 0, tmp, 0, fb.size);\n                                    data = tmp.buffer;\n                                }\n                                fb.data = data;\n\n                                offset += fb.size;\n                                ++bi;\n                            }\n                            tramp();\n                        });\n                    }\n                }\n            };\n            tramp();\n        }\n\n        return promise;\n    };\n\n    BigWigView.prototype.parseFeatures = function(data, createFeature, filter) {\n        var ba = new Uint8Array(data);\n\n        if (this.isSummary) {\n            var sa = new Int16Array(data);\n            var la = new Int32Array(data);\n            var fa = new Float32Array(data);\n\n            var itemCount = data.byteLength/32;\n            for (var i = 0; i < itemCount; ++i) {\n                var chromId =   la[(i*8)];\n                var start =     la[(i*8)+1];\n                var end =       la[(i*8)+2];\n                var validCnt =  la[(i*8)+3];\n                var minVal    = fa[(i*8)+4];\n                var maxVal    = fa[(i*8)+5];\n                var sumData   = fa[(i*8)+6];\n                var sumSqData = fa[(i*8)+7];\n\n                if (filter(chromId, start + 1, end)) {\n                    var summaryOpts = {type: 'bigwig', score: sumData/validCnt, maxScore: maxVal};\n                    if (this.bwg.type == 'bigbed') {\n                        summaryOpts.type = 'density';\n                    }\n                    createFeature(chromId, start + 1, end, summaryOpts);\n                }\n            }\n        }\n        else if (this.bwg.type == 'bigwig') {\n            var sa = new Int16Array(data);\n            var la = new Int32Array(data);\n            var fa = new Float32Array(data);\n\n            var chromId = la[0];\n            var blockStart = la[1];\n            var blockEnd = la[2];\n            var itemStep = la[3];\n            var itemSpan = la[4];\n            var blockType = ba[20];\n            var itemCount = sa[11];\n\n            if (blockType == BIG_WIG_TYPE_FSTEP) {\n                for (var i = 0; i < itemCount; ++i) {\n                    var score = fa[i + 6];\n                    var fmin = blockStart + (i*itemStep) + 1, fmax = blockStart + (i*itemStep) + itemSpan;\n                    if (filter(chromId, fmin, fmax))\n                    createFeature(chromId, fmin, fmax, {score: score});\n                }\n            } else if (blockType == BIG_WIG_TYPE_VSTEP) {\n                for (var i = 0; i < itemCount; ++i) {\n                    var start = la[(i*2) + 6] + 1;\n                    var end = start + itemSpan - 1;\n                    var score = fa[(i*2) + 7];\n                    if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n                }\n            } else if (blockType == BIG_WIG_TYPE_GRAPH) {\n                for (var i = 0; i < itemCount; ++i) {\n                    var start = la[(i*3) + 6] + 1;\n                    var end   = la[(i*3) + 7];\n                    var score = fa[(i*3) + 8];\n                    if (start > end) {\n                        start = end;\n                    }\n                    if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n                }\n            } else {\n                console.log('Currently not handling bwgType=' + blockType);\n            }\n        } else if (this.bwg.type == 'bigbed') {\n            var offset = 0;\n            var dfc = this.bwg.definedFieldCount;\n            var schema = this.bwg.schema;\n\n            while (offset < ba.length) {\n                var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n                var start = (ba[offset+7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n                var end = (ba[offset+11]<<24) | (ba[offset+10]<<16) | (ba[offset+9]<<8) | (ba[offset+8]);\n                offset += 12;\n                var rest = '';\n                while (true) {\n                    var ch = ba[offset++];\n                    if (ch != 0) {\n                        rest += String.fromCharCode(ch);\n                    } else {\n                        break;\n                    }\n                }\n\n                var featureOpts = {};\n\n                var bedColumns;\n                if (rest.length > 0) {\n                    bedColumns = rest.split('\\t');\n                } else {\n                    bedColumns = [];\n                }\n                if (bedColumns.length > 0 && dfc > 3) {\n                    featureOpts.label = bedColumns[0];\n                }\n                if (bedColumns.length > 1 && dfc > 4) {\n                    var score = parseInt(bedColumns[1]);\n                    if (!isNaN(score))\n                    featureOpts.score = score;\n                }\n                if (bedColumns.length > 2 && dfc > 5) {\n                    featureOpts.orientation = bedColumns[2];\n                }\n                if (bedColumns.length > 5 && dfc > 8) {\n                    var color = bedColumns[5];\n                    if (BED_COLOR_REGEXP.test(color)) {\n                        featureOpts.itemRgb = 'rgb(' + color + ')';\n                    }\n                }\n\n                if (bedColumns.length > dfc-3 && schema) {\n                    for (var col = dfc - 3; col < bedColumns.length; ++col) {\n                        featureOpts[schema.fields[col+3].name] = bedColumns[col];\n                    }\n                }\n\n                if (filter(chromId, start + 1, end, bedColumns)) {\n                    if (dfc < 12) {\n                        createFeature(chromId, start + 1, end, featureOpts);\n                    } else {\n                        // TODO: add block starts, sizes, thick start, thick end to feature.\n                        var thickStart = bedColumns[3]|0;\n                        var thickEnd   = bedColumns[4]|0;\n                        var blockCount = bedColumns[6]|0;\n                        var blockSizes = bedColumns[7].split(',');\n                        var blockStarts = bedColumns[8].split(',');\n\n                        if (featureOpts.exonFrames) {\n                            var exonFrames = featureOpts.exonFrames.split(',');\n                            featureOpts.exonFrames = undefined;\n                        }\n\n                        featureOpts.type = 'transcript'\n                        var grp = new DASGroup();\n                        for (var k in featureOpts) {\n                            grp[k] = featureOpts[k];\n                        }\n                        grp.id = bedColumns[0];\n                        grp.segment = this.bwg.idsToChroms[chromId];\n                        grp.min = start + 1;\n                        grp.max = end;\n                        grp.notes = [];\n                        featureOpts.groups = [grp];\n\n                        // Moving towards using bigGenePred model, but will\n                        // still support old Dalliance-style BED12+gene-name for the\n                        // foreseeable future.\n                        if (bedColumns.length > 9) {\n                            var geneId = featureOpts.geneName || bedColumns[9];\n                            var geneName = geneId;\n                            if (bedColumns.length > 10) {\n                                geneName = bedColumns[10];\n                            }\n                            if (featureOpts.geneName2)\n                            geneName = featureOpts.geneName2;\n\n                            var gg = $.extend({}, grp);\n                            gg.id = geneId;\n                            gg.label = geneName;\n                            gg.type = 'gene';\n                            featureOpts.groups.push(gg);\n                        }\n\n                        var spanList = [];\n                        for (var b = 0; b < blockCount; ++b) {\n                            var bmin = (blockStarts[b]|0) + start;\n                            var bmax = bmin + (blockSizes[b]|0);\n                            var span = new Range(bmin, bmax);\n                            spanList.push(span);\n                        }\n                        var spans = union(spanList);\n\n                        var tsList = spans.ranges();\n                        for (var s = 0; s < tsList.length; ++s) {\n                            var ts = tsList[s];\n                            createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                        }\n\n                        if (thickEnd > thickStart) {\n                            var codingRegion = (featureOpts.orientation == '+') ?\n                            new Range(thickStart, thickEnd + 3) :\n                            new Range(thickStart - 3, thickEnd);\n                            // +/- 3 to account for stop codon\n\n                            var tl = intersection(spans, codingRegion);\n                            if (tl) {\n                                featureOpts.type = 'translation';\n                                var tlList = tl.ranges();\n                                var readingFrame = 0;\n\n                                var tlOffset = 0;\n                                while (tlList[0].min() > tsList[tlOffset].max())\n                                tlOffset++;\n\n                                for (var s = 0; s < tlList.length; ++s) {\n                                    // Record reading frame for every exon\n                                    var index = s;\n                                    if (featureOpts.orientation == '-')\n                                    index = tlList.length - s - 1;\n                                    var ts = tlList[index];\n                                    featureOpts.readframe = readingFrame;\n                                    if (exonFrames) {\n                                        var brf = parseInt(exonFrames[index + tlOffset]);\n                                        if (typeof(brf) === 'number' && brf >= 0 && brf <= 2) {\n                                            featureOpts.readframe = brf;\n                                            featureOpts.readframeExplicit = true;\n                                        }\n                                    }\n                                    var length = ts.max() - ts.min();\n                                    readingFrame = (readingFrame + length) % 3;\n                                    createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            throw Error(\"Don't know what to do with \" + this.bwg.type);\n        }\n    }\n\n    //\n    // nasty cut/paste, should roll back in!\n    //\n\n    BigWigView.prototype.getFirstAdjacent = function(chrName, pos, dir, callback) {\n        var chr = this.bwg.chromsToIDs[chrName];\n        if (chr === undefined) {\n            // Not an error because some .bwgs won't have data for all chromosomes.\n            return callback([]);\n        } else {\n            this.getFirstAdjacentById(chr, pos, dir, callback);\n        }\n    }\n\n    BigWigView.prototype.getFirstAdjacentById = function(chr, pos, dir, callback) {\n        var thisB = this;\n        if (!this.cirHeader) {\n            this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {\n                thisB.cirHeader = result;\n                var la = new Int32Array(thisB.cirHeader);\n                thisB.cirBlockSize = la[1];\n                thisB.getFirstAdjacentById(chr, pos, dir, callback);\n            });\n            return;\n        }\n\n        var blockToFetch = null;\n        var bestBlockChr = -1;\n        var bestBlockOffset = -1;\n\n        var outstanding = 0;\n\n        var beforeBWG = Date.now();\n\n        var cirFobRecur = function(offset, level) {\n            outstanding += offset.length;\n\n            var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n            var spans;\n            for (var i = 0; i < offset.length; ++i) {\n                var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n                spans = spans ? union(spans, blockSpan) : blockSpan;\n            }\n\n            var fetchRanges = spans.ranges();\n            for (var r = 0; r < fetchRanges.length; ++r) {\n                var fr = fetchRanges[r];\n                cirFobStartFetch(offset, fr, level);\n            }\n        }\n\n        var cirFobStartFetch = function(offset, fr, level, attempts) {\n            var length = fr.max() - fr.min();\n            thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {\n                for (var i = 0; i < offset.length; ++i) {\n                    if (fr.contains(offset[i])) {\n                        cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n                        --outstanding;\n                        if (outstanding == 0) {\n                            if (!blockToFetch) {\n                                if (dir > 0 && (chr != 0 || pos > 0)) {\n                                    return thisB.getFirstAdjacentById(0, 0, dir, callback);\n                                } else if (dir < 0 && (chr != thisB.bwg.maxID || pos < 1000000000)) {\n                                    return thisB.getFirstAdjacentById(thisB.bwg.maxID, 1000000000, dir, callback);\n                                }\n                                return callback([]);\n                            }\n\n                            thisB.fetchFeatures(function(chrx, fmin, fmax, toks) {\n                                return (dir < 0 && (chrx < chr || fmax < pos)) || (dir > 0 && (chrx > chr || fmin > pos));\n                            }, [blockToFetch], function(features) {\n                                var bestFeature = null;\n                                var bestChr = -1;\n                                var bestPos = -1;\n                                for (var fi = 0; fi < features.length; ++fi) {\n                                    var f = features[fi];\n                                    var chrx = f._chromId, fmin = f.min, fmax = f.max;\n                                    if (bestFeature == null || ((dir < 0) && (chrx > bestChr || fmax > bestPos)) || ((dir > 0) && (chrx < bestChr || fmin < bestPos))) {\n                                        bestFeature = f;\n                                        bestPos = (dir < 0) ? fmax : fmin;\n                                        bestChr = chrx;\n                                    }\n                                }\n\n                                if (bestFeature != null)\n                                return callback([bestFeature]);\n                                else\n                                return callback([]);\n                            });\n                        }\n                    }\n                }\n            });\n        }\n\n        var cirFobRecur2 = function(cirBlockData, offset, level) {\n            var ba = new Uint8Array(cirBlockData);\n            var sa = new Int16Array(cirBlockData);\n            var la = new Int32Array(cirBlockData);\n\n            var isLeaf = ba[offset];\n            var cnt = sa[offset/2 + 1];\n            offset += 4;\n\n            if (isLeaf != 0) {\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = bwg_readOffset(ba, offset+16);\n                    var blockSize = bwg_readOffset(ba, offset+24);\n                    if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)))) ||\n                    (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)))))\n                    {\n                        // console.log('Got an interesting block: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                        if (/_random/.exec(thisB.bwg.idsToChroms[startChrom])) {\n                            // dlog('skipping random: ' + thisB.bwg.idsToChroms[startChrom]);\n                        } else if (blockToFetch == null || ((dir < 0) && (endChrom > bestBlockChr || (endChrom == bestBlockChr && endBase > bestBlockOffset)) ||\n                        (dir > 0) && (startChrom < bestBlockChr || (startChrom == bestBlockChr && startBase < bestBlockOffset))))\n                        {\n                            //                        dlog('best is: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                            blockToFetch = {offset: blockOffset, size: blockSize};\n                            bestBlockOffset = (dir < 0) ? endBase : startBase;\n                            bestBlockChr = (dir < 0) ? endChrom : startChrom;\n                        }\n                    }\n                    offset += 32;\n                }\n            } else {\n                var bestRecur = -1;\n                var bestPos = -1;\n                var bestChr = -1;\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = (la[lo + 4]<<32) | (la[lo + 5]);\n                    if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)) &&\n                    (endChrom   >= chr))) ||\n                    (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)) &&\n                    (startChrom <= chr))))\n                    {\n                        if (bestRecur < 0 || endBase > bestPos) {\n                            bestRecur = blockOffset;\n                            bestPos = (dir < 0) ? endBase : startBase;\n                            bestChr = (dir < 0) ? endChrom : startChrom;\n                        }\n                    }\n                    offset += 24;\n                }\n                if (bestRecur >= 0) {\n                    cirFobRecur([bestRecur], level + 1);\n                }\n            }\n        };\n\n\n        cirFobRecur([thisB.cirTreeOffset + 48], 1);\n    }\n\n    /**\n    * Automatically choose a zoom level and return data from that level.\n    */\n    BigWig.prototype.readWigData = function(chrName, min, max) {\n        // Maximum number of data points to return when reading a bigwig. This is used\n        // to choose the appropriate level. One data point ~= 25-65 bytes.\n        // FIXME: For targeted sequencing, data points returned is going to be much lower,\n        // so this will need to be tuned appropriately.\n        var MAX_DATA_POINTS = 25000;\n\n        var range = max - min,\n        view;\n        // If no zooming needed or available (common in bigbed), use unzoomed view.\n        if (range <= MAX_DATA_POINTS || this.zoomLevels.length === 0) {\n            view = this.getUnzoomedView();\n        }\n        else {\n            // Find reasonable zoom level. Reduction is the # of bases represented\n            // by each data point at that level.\n            for (var i = 0; i < this.zoomLevels.length; i++) {\n                if (range/this.zoomLevels[i].reduction < MAX_DATA_POINTS) {\n                    view = this.getZoomedView(i);\n                    break;\n                }\n            }\n        }\n\n        return view.readWigData(chrName, min, max);\n    }\n\n    BigWig.prototype.getUnzoomedView = function() {\n        if (!this.unzoomedView) {\n            var cirLen = 4000;\n            var nzl = this.zoomLevels[0];\n            if (nzl) {\n                cirLen = this.zoomLevels[0].dataOffset - this.unzoomedIndexOffset;\n            }\n            this.unzoomedView = new BigWigView(this, this.unzoomedIndexOffset, cirLen, false);\n        }\n        return this.unzoomedView;\n    }\n\n    BigWig.prototype.getZoomedView = function(z) {\n        var zh = this.zoomLevels[z];\n        if (!zh.view) {\n            zh.view = new BigWigView(this, zh.indexOffset, /* this.zoomLevels[z + 1].dataOffset - zh.indexOffset */ 4000, true);\n        }\n        return zh.view;\n    }\n\n    /**\n     * Create a BigWig object using a URL to a bigwig/bigbed file. Returns a promise\n     * that resolves to the object when it's available.\n     */\n    function makeBwg(url) {\n        var promise = $.Deferred(),\n        bwg = new BigWig();\n        bwg.url = url;\n\n        // Read and parse bigwig header, including chrom tree.\n        $.when(read(bwg.url, 0, 512)).then(function(result) {\n            if (!result) {\n                return promise.resolve(null, \"Couldn't fetch file\");\n            }\n\n            var header = result;\n            var ba = new Uint8Array(header);\n            var sa = new Int16Array(header);\n            var la = new Int32Array(header);\n            var magic = ba[0] + (M1 * ba[1]) + (M2 * ba[2]) + (M3 * ba[3]);\n            if (magic == BIG_WIG_MAGIC) {\n                bwg.type = 'bigwig';\n            } else if (magic == BIG_BED_MAGIC) {\n                bwg.type = 'bigbed';\n            } else if (magic == BIG_WIG_MAGIC_BE || magic == BIG_BED_MAGIC_BE) {\n                return promise.resolve(null, \"Currently don't support big-endian BBI files\");\n\n            } else {\n                return promise.resolve(null, \"Not a supported format, magic=0x\" + magic.toString(16));\n\n            }\n\n            bwg.version = sa[2];             // 4\n            bwg.numZoomLevels = sa[3];       // 6\n            bwg.chromTreeOffset = bwg_readOffset(ba, 8);\n            bwg.unzoomedDataOffset = bwg_readOffset(ba, 16);\n            bwg.unzoomedIndexOffset = bwg_readOffset(ba, 24);\n            bwg.fieldCount = sa[16];         // 32\n            bwg.definedFieldCount = sa[17];  // 34\n            bwg.asOffset = bwg_readOffset(ba, 36);\n            bwg.totalSummaryOffset = bwg_readOffset(ba, 44);\n            bwg.uncompressBufSize = la[13];  // 52\n            bwg.extHeaderOffset = bwg_readOffset(ba, 56);\n\n            bwg.zoomLevels = [];\n            for (var zl = 0; zl < bwg.numZoomLevels; ++zl) {\n                var zlReduction = la[zl*6 + 16]\n                var zlData = bwg_readOffset(ba, zl*24 + 72);\n                var zlIndex = bwg_readOffset(ba, zl*24 + 80);\n                bwg.zoomLevels.push({reduction: zlReduction, dataOffset: zlData, indexOffset: zlIndex});\n            }\n\n            $.when(bwg.readChromTree()).then(function() {\n                bwg.getAutoSQL(function(as) {\n                    bwg.schema = as;\n                    return promise.resolve(bwg);\n                });\n            });\n        });\n\n        return promise;\n    }\n\n\n    BigWig.prototype._tsFetch = function(zoom, chr, min, max, callback) {\n        var bwg = this;\n        if (zoom >= this.zoomLevels.length - 1) {\n            if (!this.topLevelReductionCache) {\n                this.getZoomedView(this.zoomLevels.length - 1).readWigDataById(-1, 0, 300000000, function(feats) {\n                    bwg.topLevelReductionCache = feats;\n                    return bwg._tsFetch(zoom, chr, min, max, callback);\n                });\n            } else {\n                var f = [];\n                var c = this.topLevelReductionCache;\n                for (var fi = 0; fi < c.length; ++fi) {\n                    if (c[fi]._chromId == chr) {\n                        f.push(c[fi]);\n                    }\n                }\n                return callback(f);\n            }\n        } else {\n            var view;\n            if (zoom < 0) {\n                view = this.getUnzoomedView();\n            } else {\n                view = this.getZoomedView(zoom);\n            }\n            return view.readWigDataById(chr, min, max, callback);\n        }\n    }\n\n    BigWig.prototype.thresholdSearch = function(chrName, referencePoint, dir, threshold, callback) {\n        dir = (dir<0) ? -1 : 1;\n        var bwg = this;\n        var initialChr = this.chromsToIDs[chrName];\n        var candidates = [{chrOrd: 0, chr: initialChr, zoom: bwg.zoomLevels.length - 4, min: 0, max: 300000000, fromRef: true}]\n        for (var i = 1; i <= this.maxID + 1; ++i) {\n            var chrId = (initialChr + (dir*i)) % (this.maxID + 1);\n            if (chrId < 0)\n            chrId += (this.maxID + 1);\n            candidates.push({chrOrd: i, chr: chrId, zoom: bwg.zoomLevels.length - 1, min: 0, max: 300000000})\n        }\n\n        function fbThresholdSearchRecur() {\n            if (candidates.length == 0) {\n                return callback(null);\n            }\n            candidates.sort(function(c1, c2) {\n                var d = c1.zoom - c2.zoom;\n                if (d != 0)\n                return d;\n\n                d = c1.chrOrd - c2.chrOrd;\n                if (d != 0)\n                return d;\n                else\n                return c1.min - c2.min * dir;\n            });\n\n            var candidate = candidates.splice(0, 1)[0];\n            bwg._tsFetch(candidate.zoom, candidate.chr, candidate.min, candidate.max, function(feats) {\n                var rp = dir > 0 ? 0 : 300000000;\n                if (candidate.fromRef)\n                rp = referencePoint;\n\n                for (var fi = 0; fi < feats.length; ++fi) {\n                    var f = feats[fi];\n                    var score;\n                    if (f.maxScore != undefined)\n                    score = f.maxScore;\n                    else\n                    score = f.score;\n\n                    if (dir > 0) {\n                        if (score > threshold) {\n                            if (candidate.zoom < 0) {\n                                if (f.min > rp)\n                                return callback(f);\n                            } else if (f.max > rp) {\n                                candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n                            }\n                        }\n                    } else {\n                        if (score > threshold) {\n                            if (candidate.zoom < 0) {\n                                if (f.max < rp)\n                                return callback(f);\n                            } else if (f.min < rp) {\n                                candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n                            }\n                        }\n                    }\n                }\n                fbThresholdSearchRecur();\n            });\n        }\n\n        fbThresholdSearchRecur();\n    }\n\n    BigWig.prototype.getAutoSQL = function(callback) {\n        var thisB = this;\n        if (!this.asOffset)\n        return callback(null);\n\n        $.when(read(this.url, this.asOffset, 2048)).then(function(result) {\n            var ba = new Uint8Array(result);\n            var s = '';\n            for (var i = 0; i < ba.length; ++i) {\n                if (ba[i] == 0)\n                break;\n                s += String.fromCharCode(ba[i]);\n            }\n\n            /*\n            * Quick'n'dirty attempt to parse autoSql format.\n            * See: http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/059/5949/5949l2.html\n            */\n\n            var header_re = /(\\w+)\\s+(\\w+)\\s+(\"([^\"]+)\")?\\s+\\(\\s*/;\n                var field_re = /([\\w\\[\\]]+)\\s+(\\w+)\\s*;\\s*(\"([^\"]+)\")?\\s*/g;\n\n            var headerMatch = header_re.exec(s);\n            if (headerMatch) {\n                var as = {\n                    declType: headerMatch[1],\n                    name: headerMatch[2],\n                    comment: headerMatch[4],\n\n                    fields: []\n                };\n\n                s = s.substring(headerMatch[0]);\n                for (var m = field_re.exec(s); m != null; m = field_re.exec(s)) {\n                    as.fields.push({type: m[1],\n                        name: m[2],\n                        comment: m[4]});\n                    }\n\n                    return callback(as);\n                }\n        });\n    };\n\n    BigWig.prototype.getExtraIndices = function(callback) {\n        var thisB = this;\n        if (this.version < 4 || this.extHeaderOffset == 0 || this.type != 'bigbed') {\n            return callback(null);\n        } else {\n            this.data.slice(this.extHeaderOffset, 64).fetch(function(result) {\n                if (!result) {\n                    return callback(null, \"Couldn't fetch extension header\");\n                }\n\n                var ba = new Uint8Array(result);\n                var sa = new Int16Array(result);\n                var la = new Int32Array(result);\n\n                var extHeaderSize = sa[0];\n                var extraIndexCount = sa[1];\n                var extraIndexListOffset = bwg_readOffset(ba, 4);\n\n                if (extraIndexCount == 0) {\n                    return callback(null);\n                }\n\n                // FIXME 20byte records only make sense for single-field indices.\n                // Right now, these seem to be the only things around, but the format\n                // is actually more general.\n                thisB.data.slice(extraIndexListOffset, extraIndexCount * 20).fetch(function(eil) {\n                    if (!eil) {\n                        return callback(null, \"Couldn't fetch index info\");\n                    }\n\n                    var ba = new Uint8Array(eil);\n                    var sa = new Int16Array(eil);\n                    var la = new Int32Array(eil);\n\n                    var indices = [];\n                    for (var ii = 0; ii < extraIndexCount; ++ii) {\n                        var eiType = sa[ii*10];\n                        var eiFieldCount = sa[ii*10 + 1];\n                        var eiOffset = bwg_readOffset(ba, ii*20 + 4);\n                        var eiField = sa[ii*10 + 8]\n                        var index = new BBIExtraIndex(thisB, eiType, eiFieldCount, eiOffset, eiField);\n                        indices.push(index);\n                    }\n                    callback(indices);\n                });\n            });\n        }\n    }\n\n    function BBIExtraIndex(bbi, type, fieldCount, offset, field) {\n        this.bbi = bbi;\n        this.type = type;\n        this.fieldCount = fieldCount;\n        this.offset = offset;\n        this.field = field;\n    }\n\n    BBIExtraIndex.prototype.lookup = function(name, callback) {\n        var thisB = this;\n\n        this.bbi.data.slice(this.offset, 32).fetch(function(bpt) {\n            var ba = new Uint8Array(bpt);\n            var sa = new Int16Array(bpt);\n            var la = new Int32Array(bpt);\n            var bptMagic = la[0];\n            var blockSize = la[1];\n            var keySize = la[2];\n            var valSize = la[3];\n            var itemCount = bwg_readOffset(ba, 16);\n            var rootNodeOffset = 32;\n\n            function bptReadNode(nodeOffset) {\n                thisB.bbi.data.slice(nodeOffset, 4 + (blockSize * (keySize + valSize))).fetch(function(node) {\n                    var ba = new Uint8Array(node);\n                    var sa = new Uint16Array(node);\n                    var la = new Uint32Array(node);\n\n                    var nodeType = ba[0];\n                    var cnt = sa[1];\n\n                    var offset = 4;\n                    if (nodeType == 0) {\n                        var lastChildOffset = null;\n                        for (var n = 0; n < cnt; ++n) {\n                            var key = '';\n                            for (var ki = 0; ki < keySize; ++ki) {\n                                var charCode = ba[offset++];\n                                if (charCode != 0) {\n                                    key += String.fromCharCode(charCode);\n                                }\n                            }\n\n                            var childOffset = bwg_readOffset(ba, offset);\n                            offset += 8;\n\n                            if (name.localeCompare(key) < 0 && lastChildOffset) {\n                                bptReadNode(lastChildOffset);\n                                return;\n                            }\n                            lastChildOffset = childOffset;\n                        }\n                        bptReadNode(lastChildOffset);\n                    } else {\n                        for (var n = 0; n < cnt; ++n) {\n                            var key = '';\n                            for (var ki = 0; ki < keySize; ++ki) {\n                                var charCode = ba[offset++];\n                                if (charCode != 0) {\n                                    key += String.fromCharCode(charCode);\n                                }\n                            }\n\n                            // Specific for EI case.\n                            if (key == name) {\n                                var start = bwg_readOffset(ba, offset);\n                                var length = readInt(ba, offset + 8);\n\n                                return thisB.bbi.getUnzoomedView().fetchFeatures(\n                                    function(chr, min, max, toks) {\n                                        if (toks && toks.length > thisB.field - 3)\n                                        return toks[thisB.field - 3] == name;\n                                    },\n                                    [{offset: start, size: length}],\n                                    callback);\n                                }\n                                offset += valSize;\n                            }\n                            return callback([]);\n                        }\n                    });\n                }\n\n                bptReadNode(thisB.offset + rootNodeOffset);\n        });\n    }\n\n    return {\n        makeBwg: makeBwg\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 41:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n//\n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// spans.js: JavaScript Intset/Location port.\n//\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\n\"use strict\";\n\n\nfunction Range(min, max)\n{\n    if (typeof(min) != 'number' || typeof(max) != 'number')\n        throw 'Bad range ' + min + ',' + max;\n    this._min = min;\n    this._max = max;\n}\n\nRange.prototype.min = function() {\n    return this._min;\n}\n\nRange.prototype.max = function() {\n    return this._max;\n}\n\nRange.prototype.contains = function(pos) {\n    return pos >= this._min && pos <= this._max;\n}\n\nRange.prototype.isContiguous = function() {\n    return true;\n}\n\nRange.prototype.ranges = function() {\n    return [this];\n}\n\nRange.prototype._pushRanges = function(ranges) {\n    ranges.push(this);\n}\n\nRange.prototype.toString = function() {\n    return '[' + this._min + '-' + this._max + ']';\n}\n\nfunction _Compound(ranges) {\n    // given: a set of unsorted possibly overlapping ranges\n    // sort the input ranges\n    var sorted = ranges.sort(_rangeOrder);\n    // merge overlaps between adjacent ranges\n    var merged = [];\n    var current = sorted.shift();\n    sorted.forEach(function(range) {\n        if (range._min <= current._max) {\n            if (range._max > current._max) {\n                current._max = range._max;\n            }\n        }\n        else {\n            merged.push(current);\n            current = range;\n        }\n    });\n    merged.push(current);\n    this._ranges = merged;\n}\n\n_Compound.prototype.min = function() {\n    return this._ranges[0].min();\n}\n\n_Compound.prototype.max = function() {\n    return this._ranges[this._ranges.length - 1].max();\n}\n\n// returns the index of the first range that is not less than pos\n_Compound.prototype.lower_bound = function(pos) {\n    // first check if pos is out of range\n    var r = this.ranges();\n    if (pos > this.max()) return r.length;\n    if (pos < this.min()) return 0;\n    // do a binary search\n    var a=0, b=r.length - 1;\n    while (a <= b) {\n        var m = Math.floor((a+b)/2);\n        if (pos > r[m]._max) {\n            a = m+1;\n        }\n        else if (pos < r[m]._min) {\n            b = m-1;\n        }\n        else {\n            return m;\n        }\n    }\n    return a;\n}\n\n_Compound.prototype.contains = function(pos) {\n    var lb = this.lower_bound(pos);\n    if (lb < this._ranges.length && this._ranges[lb].contains(pos)) {\n        return true;\n    }\n    return false;\n}\n\n_Compound.prototype.insertRange = function(range) {\n    var lb = this.lower_bound(range._min);\n    if (lb === this._ranges.length) { // range follows this\n        this._ranges.push(range);\n        return;\n    }\n\n    var r = this.ranges();\n    if (range._max < r[lb]._min) { // range preceeds lb\n        this._ranges.splice(lb,0,range);\n        return;\n    }\n\n    // range overlaps lb (at least)\n    if (r[lb]._min < range._min) range._min = r[lb]._min;\n    var ub = lb+1;\n    while (ub < r.length && r[ub]._min <= range._max) {\n        ub++;\n    }\n    ub--;\n    // ub is the upper bound of the new range\n    if (r[ub]._max > range._max) range._max = r[ub]._max;\n\n    // splice range into this._ranges\n    this._ranges.splice(lb,ub-lb+1,range);\n    return;\n}\n\n_Compound.prototype.isContiguous = function() {\n    return this._ranges.length > 1;\n}\n\n_Compound.prototype.ranges = function() {\n    return this._ranges;\n}\n\n_Compound.prototype._pushRanges = function(ranges) {\n    for (var ri = 0; ri < this._ranges.length; ++ri)\n        ranges.push(this._ranges[ri]);\n}\n\n_Compound.prototype.toString = function() {\n    var s = '';\n    for (var r = 0; r < this._ranges.length; ++r) {\n        if (r>0) {\n            s = s + ',';\n        }\n        s = s + this._ranges[r].toString();\n    }\n    return s;\n}\n\nfunction union(s0, s1) {\n    if (! (s0 instanceof _Compound)) {\n        if (! (s0 instanceof Array))\n            s0 = [s0];\n        s0 = new _Compound(s0);\n    }\n\n    if (s1)\n        s0.insertRange(s1);\n\n    return s0;\n}\n\nfunction intersection(s0, s1) {\n    var r0 = s0.ranges();\n    var r1 = s1.ranges();\n    var l0 = r0.length, l1 = r1.length;\n    var i0 = 0, i1 = 0;\n    var or = [];\n\n    while (i0 < l0 && i1 < l1) {\n        var s0 = r0[i0], s1 = r1[i1];\n        var lapMin = Math.max(s0.min(), s1.min());\n        var lapMax = Math.min(s0.max(), s1.max());\n        if (lapMax >= lapMin) {\n            or.push(new Range(lapMin, lapMax));\n        }\n        if (s0.max() > s1.max()) {\n            ++i1;\n        } else {\n            ++i0;\n        }\n    }\n\n    if (or.length == 0) {\n        return null; // FIXME\n    } else if (or.length == 1) {\n        return or[0];\n    } else {\n        return new _Compound(or);\n    }\n}\n\nfunction coverage(s) {\n    var tot = 0;\n    var rl = s.ranges();\n    for (var ri = 0; ri < rl.length; ++ri) {\n        var r = rl[ri];\n        tot += (r.max() - r.min() + 1);\n    }\n    return tot;\n}\n\n\n\nfunction rangeOrder(a, b)\n{\n    if (a.min() < b.min()) {\n        return -1;\n    } else if (a.min() > b.min()) {\n        return 1;\n    } else if (a.max() < b.max()) {\n        return -1;\n    } else if (b.max() > a.max()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nfunction _rangeOrder(a, b)\n{\n    if (a._min < b._min) {\n        return -1;\n    } else if (a._min > b._min) {\n        return 1;\n    } else if (a._max < b._max) {\n        return -1;\n    } else if (b._max > a._max) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nreturn {\n        Range: Range,\n        union: union,\n        intersection: intersection,\n        coverage: coverage,\n        rangeOver: rangeOrder,\n        _rangeOrder: _rangeOrder\n};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n\n/***/ 42:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n//\n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\nvar MAX_WBITS=15; // 32K LZ77 window\nvar DEF_WBITS=MAX_WBITS;\nvar MAX_MEM_LEVEL=9;\nvar MANY=1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT=0x20;\n\nvar Z_NO_FLUSH=0;\nvar Z_PARTIAL_FLUSH=1;\nvar Z_SYNC_FLUSH=2;\nvar Z_FULL_FLUSH=3;\nvar Z_FINISH=4;\n\nvar Z_DEFLATED=8;\n\nvar Z_OK=0;\nvar Z_STREAM_END=1;\nvar Z_NEED_DICT=2;\nvar Z_ERRNO=-1;\nvar Z_STREAM_ERROR=-2;\nvar Z_DATA_ERROR=-3;\nvar Z_MEM_ERROR=-4;\nvar Z_BUF_ERROR=-5;\nvar Z_VERSION_ERROR=-6;\n\nvar METHOD=0;   // waiting for method byte\nvar FLAG=1;     // waiting for flag byte\nvar DICT4=2;    // four dictionary check bytes to go\nvar DICT3=3;    // three dictionary check bytes to go\nvar DICT2=4;    // two dictionary check bytes to go\nvar DICT1=5;    // one dictionary check byte to go\nvar DICT0=6;    // waiting for inflateSetDictionary\nvar BLOCKS=7;   // decompressing blocks\nvar CHECK4=8;   // four check bytes to go\nvar CHECK3=9;   // three check bytes to go\nvar CHECK2=10;  // two check bytes to go\nvar CHECK1=11;  // one check byte to go\nvar DONE=12;    // finished check, done\nvar BAD=13;     // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE=0;  // get type bits (3, including end bit)\nvar IB_LENS=1;  // get lengths for stored\nvar IB_STORED=2;// processing stored block\nvar IB_TABLE=3; // get table lengths\nvar IB_BTREE=4; // get bit lengths tree for a dynamic block\nvar IB_DTREE=5; // get length, distance trees for a dynamic block\nvar IB_CODES=6; // processing fixed or dynamic block\nvar IB_DRY=7;   // output remaining window bytes\nvar IB_DONE=8;  // finished last block, done\nvar IB_BAD=9;   // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,192,\n    80,7,10, 0,8,96, 0,8,32, 0,9,160,\n    0,8,0, 0,8,128, 0,8,64, 0,9,224,\n    80,7,6, 0,8,88, 0,8,24, 0,9,144,\n    83,7,59, 0,8,120, 0,8,56, 0,9,208,\n    81,7,17, 0,8,104, 0,8,40, 0,9,176,\n    0,8,8, 0,8,136, 0,8,72, 0,9,240,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,200,\n    81,7,13, 0,8,100, 0,8,36, 0,9,168,\n    0,8,4, 0,8,132, 0,8,68, 0,9,232,\n    80,7,8, 0,8,92, 0,8,28, 0,9,152,\n    84,7,83, 0,8,124, 0,8,60, 0,9,216,\n    82,7,23, 0,8,108, 0,8,44, 0,9,184,\n    0,8,12, 0,8,140, 0,8,76, 0,9,248,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,196,\n    81,7,11, 0,8,98, 0,8,34, 0,9,164,\n    0,8,2, 0,8,130, 0,8,66, 0,9,228,\n    80,7,7, 0,8,90, 0,8,26, 0,9,148,\n    84,7,67, 0,8,122, 0,8,58, 0,9,212,\n    82,7,19, 0,8,106, 0,8,42, 0,9,180,\n    0,8,10, 0,8,138, 0,8,74, 0,9,244,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,204,\n    81,7,15, 0,8,102, 0,8,38, 0,9,172,\n    0,8,6, 0,8,134, 0,8,70, 0,9,236,\n    80,7,9, 0,8,94, 0,8,30, 0,9,156,\n    84,7,99, 0,8,126, 0,8,62, 0,9,220,\n    82,7,27, 0,8,110, 0,8,46, 0,9,188,\n    0,8,14, 0,8,142, 0,8,78, 0,9,252,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,194,\n    80,7,10, 0,8,97, 0,8,33, 0,9,162,\n    0,8,1, 0,8,129, 0,8,65, 0,9,226,\n    80,7,6, 0,8,89, 0,8,25, 0,9,146,\n    83,7,59, 0,8,121, 0,8,57, 0,9,210,\n    81,7,17, 0,8,105, 0,8,41, 0,9,178,\n    0,8,9, 0,8,137, 0,8,73, 0,9,242,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,202,\n    81,7,13, 0,8,101, 0,8,37, 0,9,170,\n    0,8,5, 0,8,133, 0,8,69, 0,9,234,\n    80,7,8, 0,8,93, 0,8,29, 0,9,154,\n    84,7,83, 0,8,125, 0,8,61, 0,9,218,\n    82,7,23, 0,8,109, 0,8,45, 0,9,186,\n    0,8,13, 0,8,141, 0,8,77, 0,9,250,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,198,\n    81,7,11, 0,8,99, 0,8,35, 0,9,166,\n    0,8,3, 0,8,131, 0,8,67, 0,9,230,\n    80,7,7, 0,8,91, 0,8,27, 0,9,150,\n    84,7,67, 0,8,123, 0,8,59, 0,9,214,\n    82,7,19, 0,8,107, 0,8,43, 0,9,182,\n    0,8,11, 0,8,139, 0,8,75, 0,9,246,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,206,\n    81,7,15, 0,8,103, 0,8,39, 0,9,174,\n    0,8,7, 0,8,135, 0,8,71, 0,9,238,\n    80,7,9, 0,8,95, 0,8,31, 0,9,158,\n    84,7,99, 0,8,127, 0,8,63, 0,9,222,\n    82,7,27, 0,8,111, 0,8,47, 0,9,190,\n    0,8,15, 0,8,143, 0,8,79, 0,9,254,\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,193,\n\n    80,7,10, 0,8,96, 0,8,32, 0,9,161,\n    0,8,0, 0,8,128, 0,8,64, 0,9,225,\n    80,7,6, 0,8,88, 0,8,24, 0,9,145,\n    83,7,59, 0,8,120, 0,8,56, 0,9,209,\n    81,7,17, 0,8,104, 0,8,40, 0,9,177,\n    0,8,8, 0,8,136, 0,8,72, 0,9,241,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,201,\n    81,7,13, 0,8,100, 0,8,36, 0,9,169,\n    0,8,4, 0,8,132, 0,8,68, 0,9,233,\n    80,7,8, 0,8,92, 0,8,28, 0,9,153,\n    84,7,83, 0,8,124, 0,8,60, 0,9,217,\n    82,7,23, 0,8,108, 0,8,44, 0,9,185,\n    0,8,12, 0,8,140, 0,8,76, 0,9,249,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,197,\n    81,7,11, 0,8,98, 0,8,34, 0,9,165,\n    0,8,2, 0,8,130, 0,8,66, 0,9,229,\n    80,7,7, 0,8,90, 0,8,26, 0,9,149,\n    84,7,67, 0,8,122, 0,8,58, 0,9,213,\n    82,7,19, 0,8,106, 0,8,42, 0,9,181,\n    0,8,10, 0,8,138, 0,8,74, 0,9,245,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,205,\n    81,7,15, 0,8,102, 0,8,38, 0,9,173,\n    0,8,6, 0,8,134, 0,8,70, 0,9,237,\n    80,7,9, 0,8,94, 0,8,30, 0,9,157,\n    84,7,99, 0,8,126, 0,8,62, 0,9,221,\n    82,7,27, 0,8,110, 0,8,46, 0,9,189,\n    0,8,14, 0,8,142, 0,8,78, 0,9,253,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,195,\n    80,7,10, 0,8,97, 0,8,33, 0,9,163,\n    0,8,1, 0,8,129, 0,8,65, 0,9,227,\n    80,7,6, 0,8,89, 0,8,25, 0,9,147,\n    83,7,59, 0,8,121, 0,8,57, 0,9,211,\n    81,7,17, 0,8,105, 0,8,41, 0,9,179,\n    0,8,9, 0,8,137, 0,8,73, 0,9,243,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,203,\n    81,7,13, 0,8,101, 0,8,37, 0,9,171,\n    0,8,5, 0,8,133, 0,8,69, 0,9,235,\n    80,7,8, 0,8,93, 0,8,29, 0,9,155,\n    84,7,83, 0,8,125, 0,8,61, 0,9,219,\n    82,7,23, 0,8,109, 0,8,45, 0,9,187,\n    0,8,13, 0,8,141, 0,8,77, 0,9,251,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,199,\n    81,7,11, 0,8,99, 0,8,35, 0,9,167,\n    0,8,3, 0,8,131, 0,8,67, 0,9,231,\n    80,7,7, 0,8,91, 0,8,27, 0,9,151,\n    84,7,67, 0,8,123, 0,8,59, 0,9,215,\n    82,7,19, 0,8,107, 0,8,43, 0,9,183,\n    0,8,11, 0,8,139, 0,8,75, 0,9,247,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,207,\n    81,7,15, 0,8,103, 0,8,39, 0,9,175,\n    0,8,7, 0,8,135, 0,8,71, 0,9,239,\n    80,7,9, 0,8,95, 0,8,31, 0,9,159,\n    84,7,99, 0,8,127, 0,8,63, 0,9,223,\n    82,7,27, 0,8,111, 0,8,47, 0,9,191,\n    0,8,15, 0,8,143, 0,8,79, 0,9,255\n];\nvar fixed_td = [\n    80,5,1, 87,5,257, 83,5,17, 91,5,4097,\n    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,\n    80,5,3, 88,5,513, 84,5,33, 92,5,8193,\n    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,\n    80,5,2, 87,5,385, 83,5,25, 91,5,6145,\n    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,\n    80,5,4, 88,5,769, 84,5,49, 92,5,12289,\n    82,5,13, 90,5,3073, 86,5,193, 192,5,24577\n];\n\n  // Tables for deflate from PKZIP's appnote.txt.\n  var cplens = [ // Copy lengths for literal codes 257..285\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n  ];\n\n  // see note #13 above about 258\n  var cplext = [ // Extra bits for literal codes 257..285\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid\n  ];\n\n var cpdist = [ // Copy offsets for distance codes 0..29\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n        8193, 12289, 16385, 24577\n  ];\n\n  var cpdext = [ // Extra bits for distance codes\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n        12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {\n}\n\n\nZStream.prototype.inflateInit = function(w, nowrap) {\n    if (!w) {\n\tw = DEF_WBITS;\n    }\n    if (nowrap) {\n\tnowrap = false;\n    }\n    this.istate = new Inflate();\n    return this.istate.inflateInit(this, nowrap?-w:w);\n}\n\nZStream.prototype.inflate = function(f) {\n    if(this.istate==null) return Z_STREAM_ERROR;\n    return this.istate.inflate(this, f);\n}\n\nZStream.prototype.inflateEnd = function(){\n    if(this.istate==null) return Z_STREAM_ERROR;\n    var ret=istate.inflateEnd(this);\n    this.istate = null;\n    return ret;\n}\nZStream.prototype.inflateSync = function(){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n}\nZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n}\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n    this.was = [0];\n}\n\nInflate.prototype.inflateReset = function(z) {\n    if(z == null || z.istate == null) return Z_STREAM_ERROR;\n\n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n}\n\nInflate.prototype.inflateEnd = function(z){\n    if(this.blocks != null)\n      this.blocks.free(z);\n    this.blocks=null;\n    return Z_OK;\n}\n\nInflate.prototype.inflateInit = function(z, w){\n    z.msg = null;\n    this.blocks = null;\n\n    // handle undocumented nowrap option (no zlib header or check)\n    nowrap = 0;\n    if(w < 0){\n      w = - w;\n      nowrap = 1;\n    }\n\n    // set window size\n    if(w<8 ||w>15){\n      this.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    this.wbits=w;\n\n    z.istate.blocks=new InfBlocks(z,\n\t\t\t\t  z.istate.nowrap!=0 ? null : this,\n\t\t\t\t  1<<w);\n\n    // reset state\n    this.inflateReset(z);\n    return Z_OK;\n  }\n\nInflate.prototype.inflate = function(z, f){\n    var r, b;\n\n    if(z == null || z.istate == null || z.next_in == null)\n      return Z_STREAM_ERROR;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    while (true){\n      switch (z.istate.mode){\n      case METHOD:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){\n          z.istate.mode = BAD;\n          z.msg=\"unknown compression method\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        if((z.istate.method>>4)+8>z.istate.wbits){\n          z.istate.mode = BAD;\n          z.msg=\"invalid window size\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        z.istate.mode=FLAG;\n      case FLAG:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        b = (z.next_in[z.next_in_index++])&0xff;\n\n        if((((z.istate.method << 8)+b) % 31)!=0){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        if((b&PRESET_DICT)==0){\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=DICT3;\n      case DICT3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode=DICT2;\n      case DICT2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode=DICT1;\n      case DICT1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++]&0xff);\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0;       // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if(r == Z_DATA_ERROR){\n          z.istate.mode = BAD;\n          z.istate.marker = 0;     // can try inflateSync\n          break;\n        }\n        if(r == Z_OK){\n          r = f;\n        }\n        if(r != Z_STREAM_END){\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if(z.istate.nowrap!=0){\n          z.istate.mode=DONE;\n          break;\n        }\n        z.istate.mode=CHECK4;\n      case CHECK4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=CHECK3;\n      case CHECK3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);\n\n        if(((z.istate.was[0])) != ((z.istate.need))){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n      }\n    }\n  }\n\n\nInflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {\n    var index=0;\n    var length = dictLength;\n    if(z==null || z.istate == null|| z.istate.mode != DICT0)\n      return Z_STREAM_ERROR;\n\n    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){\n      return Z_DATA_ERROR;\n    }\n\n    z.adler = z._adler.adler32(0, null, 0, 0);\n\n    if(length >= (1<<z.istate.wbits)){\n      length = (1<<z.istate.wbits)-1;\n      index=dictLength - length;\n    }\n    z.istate.blocks.set_dictionary(dictionary, index, length);\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n  }\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255]\n\nInflate.prototype.inflateSync = function(z){\n    var n;       // number of bytes to look at\n    var p;       // pointer to bytes\n    var m;       // number of marker bytes found in a row\n    var r, w;   // temporaries to save total_in and total_out\n\n    // set up\n    if(z == null || z.istate == null)\n      return Z_STREAM_ERROR;\n    if(z.istate.mode != BAD){\n      z.istate.mode = BAD;\n      z.istate.marker = 0;\n    }\n    if((n=z.avail_in)==0)\n      return Z_BUF_ERROR;\n    p=z.next_in_index;\n    m=z.istate.marker;\n\n    // search\n    while (n!=0 && m < 4){\n      if(z.next_in[p] == mark[m]){\n        m++;\n      }\n      else if(z.next_in[p]!=0){\n        m = 0;\n      }\n      else{\n        m = 4 - m;\n      }\n      p++; n--;\n    }\n\n    // restore\n    z.total_in += p-z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    z.istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if(m != 4){\n      return Z_DATA_ERROR;\n    }\n    r=z.total_in;  w=z.total_out;\n    this.inflateReset(z);\n    z.total_in=r;  z.total_out = w;\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function(z){\n    if(z == null || z.istate == null || z.istate.blocks == null)\n      return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n}\n\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n    this.hufts=new Int32Array(MANY*3);\n    this.window=new Uint8Array(w);\n    this.end=w;\n    this.checkfn = checkfn;\n    this.mode = IB_TYPE;\n    this.reset(z, null);\n\n    this.left = 0;            // if STORED, bytes left to copy\n\n    this.table = 0;           // table lengths (14 bits)\n    this.index = 0;           // index into blens (or border)\n    this.blens = null;         // bit lengths of codes\n    this.bb=new Int32Array(1); // bit length tree depth\n    this.tb=new Int32Array(1); // bit length decoding tree\n\n    this.codes = new InfCodes();\n\n    this.last = 0;            // true if this block is the last block\n\n  // mode independent information\n    this.bitk = 0;            // bits in bit buffer\n    this.bitb = 0;            // bit buffer\n    this.read = 0;            // window read pointer\n    this.write = 0;           // window write pointer\n    this.check = 0;          // check on output\n\n    this.inftree=new InfTree();\n}\n\n\n\n\nInfBlocks.prototype.reset = function(z, c){\n    if(c) c[0]=this.check;\n    if(this.mode==IB_CODES){\n      this.codes.free(z);\n    }\n    this.mode=IB_TYPE;\n    this.bitk=0;\n    this.bitb=0;\n    this.read=this.write=0;\n\n    if(this.checkfn)\n      z.adler=this.check=z._adler.adler32(0, null, 0, 0);\n  }\n\n InfBlocks.prototype.proc = function(z, r){\n    var t;              // temporary storage\n    var b;              // bit buffer\n    var k;              // bits in bit buffer\n    var p;              // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n\n    // copy input/output information to locals (UPDATE macro restores)\n    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}\n    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}\n\n    // process input based on current state\n    while(true){\n      switch (this.mode){\n      case IB_TYPE:\n\n\twhile(k<(3)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\tt = (b & 7);\n\tthis.last = t & 1;\n\n\tswitch (t >>> 1){\n        case 0:                         // stored\n          {b>>>=(3);k-=(3);}\n          t = k & 7;                    // go to byte boundary\n\n          {b>>>=(t);k-=(t);}\n          this.mode = IB_LENS;                  // get length of stored block\n          break;\n        case 1:                         // fixed\n          {\n              var bl=new Int32Array(1);\n\t      var bd=new Int32Array(1);\n              var tl=[];\n\t      var td=[];\n\n\t      inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n          }\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_CODES;\n          break;\n        case 2:                         // dynamic\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_TABLE;\n          break;\n        case 3:                         // illegal\n\n          {b>>>=(3);k-=(3);}\n          this.mode = BAD;\n          z.msg = \"invalid block type\";\n          r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tbreak;\n      case IB_LENS:\n\twhile(k<(32)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){\n\t  this.mode = BAD;\n\t  z.msg = \"invalid stored block lengths\";\n\t  r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tthis.left = (b & 0xffff);\n\tb = k = 0;                       // dump bits\n\tthis.mode = this.left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_STORED:\n\tif (n == 0){\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tif(m==0){\n\t  if(q==end&&read!=0){\n\t    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);\n\t  }\n\t  if(m==0){\n\t    this.write=q;\n\t    r=this.inflate_flush(z,r);\n\t    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    if(q==this.end && this.read != 0){\n\t      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    }\n\t    if(m==0){\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\tt = this.left;\n\tif(t>n) t = n;\n\tif(t>m) t = m;\n\tarrayCopy(z.next_in, p, this.window, q, t);\n\tp += t;  n -= t;\n\tq += t;  m -= t;\n\tif ((this.left -= t) != 0)\n\t  break;\n\tthis.mode = (this.last != 0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_TABLE:\n\n\twhile(k<(14)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.table = t = (b & 0x3fff);\n\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)\n\t  {\n\t    this.mode = IB_BAD;\n\t    z.msg = \"too many length or distance symbols\";\n\t    r = Z_DATA_ERROR;\n\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  }\n\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\tif(this.blens==null || this.blens.length<t){\n\t    this.blens=new Int32Array(t);\n\t}\n\telse{\n\t  for(var i=0; i<t; i++){\n              this.blens[i]=0;\n          }\n\t}\n\n\t{b>>>=(14);k-=(14);}\n\n\tthis.index = 0;\n\tmode = IB_BTREE;\n      case IB_BTREE:\n\twhile (this.index < 4 + (this.table >>> 10)){\n\t  while(k<(3)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;\n\n\t  {b>>>=(3);k-=(3);}\n\t}\n\n\twhile(this.index < 19){\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n\t}\n\n\tthis.bb[0] = 7;\n\tt = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n\tif (t != Z_OK){\n\t  r = t;\n\t  if (r == Z_DATA_ERROR){\n\t    this.blens=null;\n\t    this.mode = IB_BAD;\n\t  }\n\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tthis.index = 0;\n\tthis.mode = IB_DTREE;\n      case IB_DTREE:\n\twhile (true){\n\t  t = this.table;\n\t  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){\n\t    break;\n\t  }\n\n\t  var h; //int[]\n\t  var i, j, c;\n\n\t  t = this.bb[0];\n\n\t  while(k<(t)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n//\t  if (this.tb[0]==-1){\n//            dlog(\"null...\");\n//\t  }\n\n\t  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];\n\t  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];\n\n\t  if (c < 16){\n\t    b>>>=(t);k-=(t);\n\t    this.blens[this.index++] = c;\n\t  }\n\t  else { // c == 16..18\n\t    i = c == 18 ? 7 : c - 14;\n\t    j = c == 18 ? 11 : 3;\n\n\t    while(k<(t+i)){\n\t      if(n!=0){\n\t\tr=Z_OK;\n\t      }\n\t      else{\n\t\tthis.bitb=b; this.bitk=k;\n\t\tz.avail_in=n;\n\t\tz.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\tthis.write=q;\n\t\treturn this.inflate_flush(z,r);\n\t      };\n\t      n--;\n\t      b|=(z.next_in[p++]&0xff)<<k;\n\t      k+=8;\n\t    }\n\n\t    b>>>=(t);k-=(t);\n\n\t    j += (b & inflate_mask[i]);\n\n\t    b>>>=(i);k-=(i);\n\n\t    i = this.index;\n\t    t = this.table;\n\t    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||\n\t\t(c == 16 && i < 1)){\n\t      this.blens=null;\n\t      this.mode = IB_BAD;\n\t      z.msg = \"invalid bit length repeat\";\n\t      r = Z_DATA_ERROR;\n\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\n\t    c = c == 16 ? this.blens[i-1] : 0;\n\t    do{\n\t      this.blens[i++] = c;\n\t    }\n\t    while (--j!=0);\n\t    this.index = i;\n\t  }\n\t}\n\n\tthis.tb[0]=-1;\n\t{\n\t    var bl=new Int32Array(1);\n\t    var bd=new Int32Array(1);\n\t    var tl=new Int32Array(1);\n\t    var td=new Int32Array(1);\n\t    bl[0] = 9;         // must be <= 9 for lookahead assumptions\n\t    bd[0] = 6;         // must be <= 9 for lookahead assumptions\n\n\t    t = this.table;\n\t    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f),\n\t\t\t\t\t      1 + ((t >> 5) & 0x1f),\n\t\t\t\t\t      this.blens, bl, bd, tl, td, this.hufts, z);\n\n\t    if (t != Z_OK){\n\t        if (t == Z_DATA_ERROR){\n\t            this.blens=null;\n\t            this.mode = BAD;\n\t        }\n\t        r = t;\n\n\t        this.bitb=b; this.bitk=k;\n\t        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t        this.write=q;\n\t        return this.inflate_flush(z,r);\n\t    }\n\t    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n\t}\n\tthis.mode = IB_CODES;\n      case IB_CODES:\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\n\tif ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){\n\t  return this.inflate_flush(z, r);\n\t}\n\tr = Z_OK;\n\tthis.codes.free(z);\n\n\tp=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;\n\tq=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);\n\n\tif (this.last==0){\n\t  this.mode = IB_TYPE;\n\t  break;\n\t}\n\tthis.mode = IB_DRY;\n      case IB_DRY:\n\tthis.write=q;\n\tr = this.inflate_flush(z, r);\n\tq=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\tif (this.read != this.write){\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z, r);\n\t}\n\tmode = DONE;\n      case IB_DONE:\n\tr = Z_STREAM_END;\n\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      case IB_BAD:\n\tr = Z_DATA_ERROR;\n\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      }\n    }\n  }\n\nInfBlocks.prototype.free = function(z){\n    this.reset(z, null);\n    this.window=null;\n    this.hufts=null;\n}\n\nInfBlocks.prototype.set_dictionary = function(d, start, n){\n    arrayCopy(d, start, window, 0, n);\n    this.read = this.write = n;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH.\nInfBlocks.prototype.sync_point = function(){\n    return this.mode == IB_LENS;\n}\n\n  // copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function(z, r){\n    var n;\n    var p;\n    var q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = this.read;\n\n    // compute number of bytes to copy as far as end of window\n    n = ((q <= this.write ? this.write : this.end) - q);\n    if (n > z.avail_out) n = z.avail_out;\n    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if(this.checkfn != null)\n      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n    // copy as far as end of window\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of window\n    if (q == this.end){\n      // wrap pointers\n      q = 0;\n      if (this.write == this.end)\n        this.write = 0;\n\n      // compute bytes to copy\n      n = this.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // update check information\n      if(this.checkfn != null)\n\tz.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n      // copy\n      arrayCopy(this.window, q, z.next_out, p, n);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    this.read = q;\n\n    // done\n    return r;\n  }\n\n//\n// InfCodes.java\n//\n\nvar IC_START=0;  // x: set up for LEN\nvar IC_LEN=1;    // i: get length/literal/eob next\nvar IC_LENEXT=2; // i: getting length extra (have base)\nvar IC_DIST=3;   // i: get distance next\nvar IC_DISTEXT=4;// i: getting distance extra\nvar IC_COPY=5;   // o: copying bytes in window, waiting for space\nvar IC_LIT=6;    // o: got literal, waiting for output space\nvar IC_WASH=7;   // o: got eob, possibly still output waiting\nvar IC_END=8;    // x: got eob and all data flushed\nvar IC_BADCODE=9;// x: got error\n\nfunction InfCodes() {\n}\n\nInfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {\n    this.mode=IC_START;\n    this.lbits=bl;\n    this.dbits=bd;\n    this.ltree=tl;\n    this.ltree_index=tl_index;\n    this.dtree = td;\n    this.dtree_index=td_index;\n    this.tree=null;\n}\n\nInfCodes.prototype.proc = function(s, z, r){\n    var j;              // temporary storage\n    var t;              // temporary pointer (int[])\n    var tindex;         // temporary pointer\n    var e;              // extra bits or operation\n    var b=0;            // bit buffer\n    var k=0;            // bits in bit buffer\n    var p=0;            // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n    var f;              // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // process input and output based on current state\n    while (true){\n      switch (this.mode){\n\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:         // x: set up for LEN\n\tif (m >= 258 && n >= 10){\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  r = this.inflate_fast(this.lbits, this.dbits,\n\t\t\t   this.ltree, this.ltree_index,\n\t\t\t   this.dtree, this.dtree_index,\n\t\t\t   s, z);\n\n\t  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n\t  q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t  if (r != Z_OK){\n\t    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n\t    break;\n\t  }\n\t}\n\tthis.need = this.lbits;\n\tthis.tree = this.ltree;\n\tthis.tree_index=this.ltree_index;\n\n\tthis.mode = IC_LEN;\n      case IC_LEN:           // i: get length/literal/eob next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b&inflate_mask[j]))*3;\n\n\tb>>>=(this.tree[tindex+1]);\n\tk-=(this.tree[tindex+1]);\n\n\te=this.tree[tindex];\n\n\tif(e == 0){               // literal\n\t  this.lit = this.tree[tindex+2];\n\t  this.mode = IC_LIT;\n\t  break;\n\t}\n\tif((e & 16)!=0 ){          // length\n\t  this.get = e & 15;\n\t  this.len = this.tree[tindex+2];\n\t  this.mode = IC_LENEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tif ((e & 32)!=0){               // end of block\n\t  this.mode = IC_WASH;\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid literal/length code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_LENEXT:        // i: getting length extra (have base)\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.len += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.need = this.dbits;\n\tthis.tree = this.dtree;\n\tthis.tree_index = this.dtree_index;\n\tthis.mode = IC_DIST;\n      case IC_DIST:          // i: get distance next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b & inflate_mask[j]))*3;\n\n\tb>>=this.tree[tindex+1];\n\tk-=this.tree[tindex+1];\n\n\te = (this.tree[tindex]);\n\tif((e & 16)!=0){               // distance\n\t  this.get = e & 15;\n\t  this.dist = this.tree[tindex+2];\n\t  this.mode = IC_DISTEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid distance code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_DISTEXT:       // i: getting distance extra\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.dist += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.mode = IC_COPY;\n      case IC_COPY:          // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while(f < 0){     // modulo window size-\"while\" instead\n          f += s.end;     // of \"if\" handles invalid distances\n\t}\n\twhile (this.len!=0){\n\n\t  if(m==0){\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.write=q; r=s.inflate_flush(z,r);\n\t      q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\n\t      if(m==0){\n\t\ts.bitb=b;s.bitk=k;\n\t\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\ts.write=q;\n\t\treturn s.inflate_flush(z,r);\n\t      }\n\t    }\n\t  }\n\n\t  s.window[q++]=s.window[f++]; m--;\n\n\t  if (f == s.end)\n            f = 0;\n\t  this.len--;\n\t}\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_LIT:           // o: got literal, waiting for output space\n\tif(m==0){\n\t  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t  if(m==0){\n\t    s.write=q; r=s.inflate_flush(z,r);\n\t    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\t      return s.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\ts.window[q++]=this.lit; m--;\n\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_WASH:           // o: got eob, possibly more output\n\tif (k > 7){        // return unused byte, if any\n\t  k -= 8;\n\t  n++;\n\t  p--;             // can always return one\n\t}\n\n\ts.write=q; r=s.inflate_flush(z,r);\n\tq=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\tif (s.read != s.write){\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  return s.inflate_flush(z,r);\n\t}\n\tthis.mode = IC_END;\n      case IC_END:\n\tr = Z_STREAM_END;\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_BADCODE:       // x: got error\n\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n      }\n    }\n  }\n\nInfCodes.prototype.free = function(z){\n    //  ZFREE(z, c);\n}\n\n  // Called with number of bytes left to write in window at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten.  The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\nInfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {\n    var t;                // temporary pointer\n    var   tp;             // temporary pointer (int[])\n    var tp_index;         // temporary pointer\n    var e;                // extra bits or operation\n    var b;                // bit buffer\n    var k;                // bits in bit buffer\n    var p;                // input data pointer\n    var n;                // bytes available there\n    var q;                // output window write pointer\n    var m;                // bytes to end of window or read pointer\n    var ml;               // mask for literal/length tree\n    var md;               // mask for distance tree\n    var c;                // bytes to copy\n    var d;                // distance back to copy from\n    var r;                // copy source pointer\n\n    var tp_index_t_3;     // (tp_index+t)*3\n\n    // load input, output, bit values\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {                          // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while(k<(20)){              // max bits for literal/length code\n\tn--;\n\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n      }\n\n      t= b&ml;\n      tp=tl;\n      tp_index=tl_index;\n      tp_index_t_3=(tp_index+t)*3;\n      if ((e = tp[tp_index_t_3]) == 0){\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\ts.window[q++] = tp[tp_index_t_3+2];\n\tm--;\n\tcontinue;\n      }\n      do {\n\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\tif((e&16)!=0){\n\t  e &= 15;\n\t  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);\n\n\t  b>>=e; k-=e;\n\n\t  // decode distance base of block to copy\n\t  while(k<(15)){           // max bits for distance code\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t  }\n\n\t  t= b&md;\n\t  tp=td;\n\t  tp_index=td_index;\n          tp_index_t_3=(tp_index+t)*3;\n\t  e = tp[tp_index_t_3];\n\n\t  do {\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    if((e&16)!=0){\n\t      // get extra bits to add to distance base\n\t      e &= 15;\n\t      while(k<(e)){         // get extra bits (up to 13)\n\t\tn--;\n\t\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t      }\n\n\t      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);\n\n\t      b>>=(e); k-=(e);\n\n\t      // do the copy\n\t      m -= c;\n\t      if (q >= d){                // offset before dest\n\t\t//  just copy\n\t\tr=q-d;\n\t\tif(q-r>0 && 2>(q-r)){\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t\telse{\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t      }\n\t      else{                  // else offset after destination\n                r=q-d;\n                do{\n                  r+=s.end;          // force pointer in window\n                }while(r<0);         // covers invalid distances\n\t\te=s.end-r;\n\t\tif(c>e){             // if source crosses,\n\t\t  c-=e;              // wrapped copy\n\t\t  if(q-r>0 && e>(q-r)){\n\t\t    do{s.window[q++] = s.window[r++];}\n\t\t    while(--e!=0);\n\t\t  }\n\t\t  else{\n\t\t    arrayCopy(s.window, r, s.window, q, e);\n\t\t    q+=e; r+=e; e=0;\n\t\t  }\n\t\t  r = 0;                  // copy rest from start of window\n\t\t}\n\n\t      }\n\n\t      // copy all or what's left\n              do{s.window[q++] = s.window[r++];}\n\t\twhile(--c!=0);\n\t      break;\n\t    }\n\t    else if((e&64)==0){\n\t      t+=tp[tp_index_t_3+2];\n\t      t+=(b&inflate_mask[e]);\n\t      tp_index_t_3=(tp_index+t)*3;\n\t      e=tp[tp_index_t_3];\n\t    }\n\t    else{\n\t      z.msg = \"invalid distance code\";\n\n\t      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  while(true);\n\t  break;\n\t}\n\n\tif((e&64)==0){\n\t  t+=tp[tp_index_t_3+2];\n\t  t+=(b&inflate_mask[e]);\n\t  tp_index_t_3=(tp_index+t)*3;\n\t  if((e=tp[tp_index_t_3])==0){\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    s.window[q++]=tp[tp_index_t_3+2];\n\t    m--;\n\t    break;\n\t  }\n\t}\n\telse if((e&32)!=0){\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_STREAM_END;\n\t}\n\telse{\n\t  z.msg=\"invalid literal/length code\";\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_DATA_ERROR;\n\t}\n      }\n      while(true);\n    }\n    while(m>=258 && n>= 10);\n\n    // not enough input or output--restore pointers and return\n    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n    s.bitb=b;s.bitk=k;\n    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n    s.write=q;\n\n    return Z_OK;\n}\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {\n}\n\nInfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    var a;                       // counter for codes of length k\n    var f;                       // i repeats in table every f entries\n    var g;                       // maximum code length\n    var h;                       // table level\n    var i;                       // counter, current code\n    var j;                       // counter\n    var k;                       // number of bits in current code\n    var l;                       // bits per table (returned in m)\n    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP\n    var p;                       // pointer into c[], b[], or v[]\n    var q;                       // points to current table\n    var w;                       // bits before this table == (l * h)\n    var xp;                      // pointer into x\n    var y;                       // number of dummy codes added\n    var z;                       // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0; i = n;\n    do {\n      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX\n    }while(i!=0);\n\n    if(this.c[0] == n){                // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++)\n      if(this.c[j]!=0) break;\n    k = j;                        // minimum code length\n    if(l < j){\n      l = j;\n    }\n    for (i = BMAX; i!=0; i--){\n      if(this.c[i]!=0) break;\n    }\n    g = i;                        // maximum code length\n    if(l > i){\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1){\n      if ((y -= this.c[j]) < 0){\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= this.c[i]) < 0){\n      return Z_DATA_ERROR;\n    }\n    this.c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    this.x[1] = j = 0;\n    p = 1;  xp = 2;\n    while (--i!=0) {                 // note that i == g from above\n      this.x[xp] = (j += this.c[p]);\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0; p = 0;\n    do {\n      if ((j = b[bindex+p]) != 0){\n        this.v[this.x[j]++] = i;\n      }\n      p++;\n    }\n    while (++i < n);\n    n = this.x[g];                     // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    this.x[0] = i = 0;                 // first Huffman code is zero\n    p = 0;                        // grab values in bit order\n    h = -1;                       // no tables yet--level -1\n    w = -l;                       // bits decoded == (l * h)\n    this.u[0] = 0;                     // just to keep compilers happy\n    q = 0;                        // ditto\n    z = 0;                        // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++){\n      a = this.c[k];\n      while (a--!=0){\n\t// here i is the Huffman code of length k bits for value *p\n\t// make tables up to required level\n        while (k > w + l){\n          h++;\n          w += l;                 // previous table always l bits\n\t  // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = (z > l) ? l : z;        // table size upper limit\n          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table\n                                      // too few codes for k-w bit table\n            f -= a + 1;               // deduct codes from patterns left\n            xp = k;\n            if(j < z){\n              while (++j < z){        // try smaller tables up to z bits\n                if((f <<= 1) <= this.c[++xp])\n                  break;              // enough codes to use up j bits\n                f -= this.c[xp];           // else deduct codes from patterns\n              }\n\t    }\n          }\n          z = 1 << j;                 // table entries for j-bit table\n\n\t  // allocate new table\n          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR;       // overflow of MANY\n          }\n          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG\n          this.hn[0] += z;\n\n\t  // connect to last table, if there is one\n\t  if(h!=0){\n            this.x[h]=i;           // save pattern for backing up\n            this.r[0]=j;     // bits in this table\n            this.r[1]=l;     // bits to dump before this table\n            j=i>>>(w - l);\n            this.r[2] = (q - this.u[h-1] - j);               // offset to this table\n            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table\n          }\n          else{\n            t[0] = q;               // first table is returned result\n\t  }\n        }\n\n\t// set up table entry in r\n        this.r[1] = (k - w);\n        if (p >= n){\n          this.r[0] = 128 + 64;      // out of values--invalid code\n\t}\n        else if (v[p] < s){\n          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block\n          this.r[2] = this.v[p++];          // simple code is just the value\n        }\n        else{\n          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists\n          this.r[2]=d[this.v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f=1<<(k-w);\n        for (j=i>>>w;j<z;j+=f){\n          arrayCopy(this.r, 0, hp, (q+j)*3, 3);\n\t}\n\n\t// backwards increment the k-bit code i\n        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){\n          i ^= j;\n\t}\n        i ^= j;\n\n\t// backup over finished tables\n        mask = (1 << w) - 1;      // needed on HP, cc -O bug\n        while ((i & mask) != this.x[h]){\n          h--;                    // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n}\n\nInfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {\n    var result;\n    this.initWorkArea(19);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n    if(result == Z_DATA_ERROR){\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    }\n    else if(result == Z_BUF_ERROR || bb[0] == 0){\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n}\n\nInfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {\n    var result;\n\n    // build literal/length tree\n    this.initWorkArea(288);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n    if (result != Z_OK || bl[0] == 0){\n      if(result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed literal/length tree\";\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    this.initWorkArea(288);\n    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n    if (result != Z_OK || (bd[0] == 0 && nl > 257)){\n      if (result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed distance tree\";\n      }\n      else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    return Z_OK;\n}\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result\n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n    bl[0]=fixed_bl;\n    bd[0]=fixed_bd;\n    tl[0]=fixed_tl;\n    td[0]=fixed_td;\n    return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function(vsize){\n    if(this.hn==null){\n        this.hn=new Int32Array(1);\n        this.v=new Int32Array(vsize);\n        this.c=new Int32Array(BMAX+1);\n        this.r=new Int32Array(3);\n        this.u=new Int32Array(BMAX);\n        this.x=new Int32Array(BMAX+1);\n    }\n    if(this.v.length<vsize){\n        this.v=new Int32Array(vsize);\n    }\n    for(var i=0; i<vsize; i++){this.v[i]=0;}\n    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}\n    for(var i=0; i<3; i++){this.r[i]=0;}\n//  for(int i=0; i<BMAX; i++){u[i]=0;}\n    arrayCopy(this.c, 0, this.u, 0, BMAX);\n//  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    arrayCopy(this.c, 0, this.x, 0, BMAX+1);\n}\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = (typeof testArray.subarray === 'function');\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n    if (count == 0) {\n        return;\n    }\n    if (!src) {\n        throw \"Undef src\";\n    } else if (!dest) {\n        throw \"Undef dest\";\n    }\n\n    if (srcOffset == 0 && count == src.length) {\n        arrayCopy_fast(src, dest, destOffset);\n    } else if (hasSubarray) {\n        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset);\n    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n    } else {\n        arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n    }\n\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n     for (var i = 0; i < count; ++i) {\n        dest[destOffset + i] = src[srcOffset + i];\n    }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n    dest.set(src, destOffset);\n}\n\n\n  // largest prime smaller than 65536\nvar ADLER_BASE=65521;\n  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX=5552;\n\nfunction adler32(adler, /* byte[] */ buf,  index, len){\n    if(buf == null){ return 1; }\n\n    var s1=adler&0xffff;\n    var s2=(adler>>16)&0xffff;\n    var k;\n\n    while(len > 0) {\n      k=len<ADLER_NMAX?len:ADLER_NMAX;\n      len-=k;\n      while(k>=16){\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        k-=16;\n      }\n      if(k!=0){\n        do{\n          s1+=buf[index++]&0xff; s2+=s1;\n        }\n        while(--k!=0);\n      }\n      s1%=ADLER_BASE;\n      s2%=ADLER_BASE;\n    }\n    return (s2<<16)|s1;\n}\n\n\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n    if (!start) {\n        buffer = new Uint8Array(buffer);\n    } else if (!length) {\n        buffer = new Uint8Array(buffer, start, buffer.byteLength - start);\n    } else {\n        buffer = new Uint8Array(buffer, start, length);\n    }\n\n    var z = new ZStream();\n    z.inflateInit(DEF_WBITS, true);\n    z.next_in = buffer;\n    z.next_in_index = 0;\n    z.avail_in = buffer.length;\n\n    var oBlockList = [];\n    var totalSize = 0;\n    while (true) {\n        var obuf = new Uint8Array(32000);\n        z.next_out = obuf;\n        z.next_out_index = 0;\n        z.avail_out = obuf.length;\n        var status = z.inflate(Z_NO_FLUSH);\n        if (status != Z_OK && status != Z_STREAM_END && status != Z_BUF_ERROR) {\n            throw z.msg;\n        }\n        if (z.avail_out != 0) {\n            var newob = new Uint8Array(obuf.length - z.avail_out);\n            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));\n            obuf = newob;\n        }\n        oBlockList.push(obuf);\n        totalSize += obuf.length;\n        if (status == Z_STREAM_END || status == Z_BUF_ERROR) {\n            break;\n        }\n    }\n\n    if (afterUncOffset) {\n        afterUncOffset[0] = (start || 0) + z.next_in_index;\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0].buffer;\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = oBlockList[i];\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nreturn {\n    inflateBuffer: jszlib_inflate_buffer,\n    arrayCopy: arrayCopy\n  };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n\n/***/ 43:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     jQuery Ajax Native Plugin\n\n//     (c) 2015 Tarik Zakaria Benmerar, Acigna Inc.\n//      jQuery Ajax Native Plugin may be freely distributed under the MIT license.\n(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals (root is window)\n        factory(root.jQuery);\n    }\n}(this, function ( $ ) {\n    var ajaxSettings = $.ajaxSettings;\n    ajaxSettings.responseFields.native = 'responseNative';\n    ajaxSettings.converters[ '* native' ] = true;\n    var support = {},\n        xhrId = 0,\n        xhrSuccessStatus = {\n            // file protocol always yields status code 0, assume 200\n            0: 200,\n            // Support: IE9\n            // #1450: sometimes IE returns 1223 when it should be 204\n            1223: 204\n        },\n        xhrCallbacks = {},\n        xhrSupported = jQuery.ajaxSettings.xhr();\n    // Support: IE9\n    // Open requests must be manually aborted on unload (#5280)\n    if ( window.ActiveXObject ) {\n        $( window ).on( \"unload\", function() {\n            for ( var key in xhrCallbacks ) {\n                xhrCallbacks[ key ]();\n            }\n        });\n    }\n    support.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\n    support.ajax = xhrSupported = !!xhrSupported;\n\n    //Native Data Type Ajax Transport\n    $.ajaxTransport('native', function ( options ) {\n        var callback;\n        // Cross domain only allowed if supported through XMLHttpRequest\n        if ( support.cors || xhrSupported && !options.crossDomain ) {\n            return {\n                send: function( headers, complete ) {\n                    var i,\n                        xhr = options.xhr(),\n                        id = ++xhrId,\n                        responses = {};\n\n                    xhr.open( options.type, options.url, options.async, options.username, options.password );\n\n                    // Apply custom fields if provided\n                    if ( options.xhrFields ) {\n                        for ( i in options.xhrFields ) {\n                            xhr[ i ] = options.xhrFields[ i ];\n                        }\n                    }\n\n                    // Override mime type if needed\n                    if ( options.mimeType && xhr.overrideMimeType ) {\n                        xhr.overrideMimeType( options.mimeType );\n                    }\n\n                    // X-Requested-With header\n                    // For cross-domain requests, seeing as conditions for a preflight are\n                    // akin to a jigsaw puzzle, we simply never set it to be sure.\n                    // (it can always be set on a per-request basis or even using ajaxSetup)\n                    // For same-domain requests, won't change header if already provided.\n                    if ( !options.crossDomain && !headers[\"X-Requested-With\"] ) {\n                        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    }\n\n                    // Set headers\n                    for ( i in headers ) {\n                        xhr.setRequestHeader( i, headers[ i ] );\n                    }\n\n                    // Callback\n                    callback = function( type ) {\n                        return function() {\n                            if ( callback ) {\n                                delete xhrCallbacks[ id ];\n                                callback = xhr.onload = xhr.onerror = null;\n\n                                if ( type === \"abort\" ) {\n                                    xhr.abort();\n                                } else if ( type === \"error\" ) {\n                                    complete(\n                                        // file: protocol always yields status 0; see #8605, #14207\n                                        xhr.status,\n                                        xhr.statusText\n                                    );\n                                } else {\n                                    // The native response associated with the responseType\n                                    // Stored in the xhr.response attribute (XHR2 Spec)\n                                    if ( xhr.response ) {\n                                        responses.native = xhr.response;\n                                    }\n\n                                    complete(\n                                        xhrSuccessStatus[ xhr.status ] || xhr.status,\n                                        xhr.statusText,\n                                        responses,\n                                        xhr.getAllResponseHeaders()\n                                    );\n                                }\n                            }\n                        };\n                    };\n\n                    // Listen to events\n                    xhr.onload = callback();\n                    xhr.onerror = callback(\"error\");\n\n                    // Create the abort callback\n                    callback = xhrCallbacks[ id ] = callback(\"abort\");\n\n                    try {\n                        // Do send the request (this may raise an exception)\n                        xhr.send( options.hasContent && options.data || null );\n                    } catch ( e ) {\n                        // #14683: Only rethrow if this hasn't been notified as an error yet\n                        if ( callback ) {\n                            throw e;\n                        }\n                    }\n                },\n\n                abort: function() {\n                    if ( callback ) {\n                        callback();\n                    }\n                }\n            };\n        }\n    });\n\n\n    //$.getNative wrapper\n    $.getNative = function ( url, callback ) {\n        return $.ajax({\n            dataType: 'native',\n            url: url,\n            xhrFields: {\n                responseType: 'arraybuffer'\n            },\n            success: callback\n        });\n    }\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 44:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _baseMvc = __webpack_require__(5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class View to display a user's disk/storage usage\n *      either as a progress bar representing the percentage of a quota used\n *      or a simple text element displaying the human readable size used.\n *  @name UserQuotaMeter\n *  @augments Backbone.View\n */\nvar UserQuotaMeter = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend(\n/** @lends UserQuotaMeter.prototype */{\n    _logNamespace: logNamespace,\n\n    /** Defaults for optional settings passed to initialize */\n    options: {\n        warnAtPercent: 85,\n        errorAtPercent: 100\n    },\n\n    /** Set up, accept options, and bind events */\n    initialize: function initialize(options) {\n        this.log(this + \".initialize:\", options);\n        _.extend(this.options, options);\n\n        //this.bind( 'all', function( event, data ){ this.log( this + ' event:', event, data ); }, this );\n        this.listenTo(this.model, \"change:quota_percent change:total_disk_usage\", this.render);\n    },\n\n    /** Re-load user model data from the api */\n    update: function update(options) {\n        this.log(this + \" updating user data...\", options);\n        this.model.loadFromApi(this.model.get(\"id\"), options);\n        return this;\n    },\n\n    /** Is the user over their quota (if there is one)?\n     * @returns {Boolean} true if over quota, false if no quota or under quota\n     */\n    isOverQuota: function isOverQuota() {\n        return this.model.get(\"quota_percent\") !== null && this.model.get(\"quota_percent\") >= this.options.errorAtPercent;\n    },\n\n    /** Render the meter when they have an applicable quota. Will render as a progress bar\n     *      with their percentage of that quota in text over the bar.\n     *  @fires quota:over when user is over quota (>= this.errorAtPercent)\n     *  @fires quota:under when user is under quota\n     *  @fires quota:under:approaching when user is >= this.warnAtPercent of their quota\n     *  @fires quota:under:ok when user is below this.warnAtPercent\n     *  @returns {jQuery} the rendered meter\n     */\n    _render_quota: function _render_quota() {\n        var modelJson = this.model.toJSON();\n\n        var //prevPercent = this.model.previous( 'quota_percent' ),\n        percent = modelJson.quota_percent;\n\n        var //meter = $( UserQuotaMeter.templates.quota( modelJson ) );\n        $meter = $(this._templateQuotaMeter(modelJson));\n\n        var $bar = $meter.find(\".progress-bar\");\n        //this.log( this + '.rendering quota, percent:', percent, 'meter:', meter );\n\n        // OVER QUOTA: color the quota bar and show the quota error message\n        if (this.isOverQuota()) {\n            //this.log( '\\t over quota' );\n            $bar.attr(\"class\", \"progress-bar progress-bar-danger\");\n            $meter.find(\".quota-meter-text\").css(\"color\", \"white\");\n            //TODO: only trigger event if state has changed\n            this.trigger(\"quota:over\", modelJson);\n\n            // APPROACHING QUOTA: color the quota bar\n        } else if (percent >= this.options.warnAtPercent) {\n            //this.log( '\\t approaching quota' );\n            $bar.attr(\"class\", \"progress-bar progress-bar-warning\");\n            //TODO: only trigger event if state has changed\n            this.trigger(\"quota:under quota:under:approaching\", modelJson);\n\n            // otherwise, hide/don't use the msg box\n        } else {\n            $bar.attr(\"class\", \"progress-bar progress-bar-success\");\n            //TODO: only trigger event if state has changed\n            this.trigger(\"quota:under quota:under:ok\", modelJson);\n        }\n        return $meter;\n    },\n\n    /** Render the meter when the user has NO applicable quota. Will render as text\n     *      showing the human readable sum storage their data is using.\n     *  @returns {jQuery} the rendered text\n     */\n    _render_usage: function _render_usage() {\n        //var usage = $( UserQuotaMeter.templates.usage( this.model.toJSON() ) );\n        var usage = $(this._templateUsage(this.model.toJSON()));\n        this.log(this + \".rendering usage:\", usage);\n        return usage;\n    },\n\n    /** Render either the quota percentage meter or the human readable disk usage\n     *      depending on whether the user model has quota info (quota_percent === null -> no quota)\n     *  @returns {Object} this UserQuotaMeter\n     */\n    render: function render() {\n        //this.log( this + '.rendering' );\n        var meterHtml = null;\n\n        // no quota on server ('quota_percent' === null (can be valid at 0)), show usage instead\n        this.log(this + \".model.quota_percent:\", this.model.get(\"quota_percent\"));\n        if (this.model.get(\"quota_percent\") === null || this.model.get(\"quota_percent\") === undefined) {\n            meterHtml = this._render_usage();\n\n            // otherwise, render percent of quota (and warning, error)\n        } else {\n            meterHtml = this._render_quota();\n            //TODO: add the original text for unregistered quotas\n            //tooltip = \"Your disk quota is %s.  You can increase your quota by registering a Galaxy account.\"\n        }\n\n        this.$el.html(meterHtml);\n        this.$el.find(\".quota-meter-text\").tooltip();\n        return this;\n    },\n\n    _templateQuotaMeter: function _templateQuotaMeter(data) {\n        return ['<div id=\"quota-meter\" class=\"quota-meter progress\">', '<div class=\"progress-bar\" style=\"width: ', data.quota_percent, '%\"></div>', '<div class=\"quota-meter-text\" data-placement=\"left\" style=\"top: 6px\"', data.nice_total_disk_usage ? \" title=\\\"Using \" + data.nice_total_disk_usage + \".  This value is recalculated when you log out.\\\">\" : \">\", (0, _localization2.default)(\"Using\"), \" \", data.quota_percent, \"%\", \"</div>\", \"</div>\"].join(\"\");\n    },\n\n    _templateUsage: function _templateUsage(data) {\n        return ['<div id=\"quota-meter\" class=\"quota-meter\" style=\"background-color: transparent\">', '<div class=\"quota-meter-text\" data-placement=\"left\" data-original-title=\"This value is recalculated when you log out.\" style=\"top: 6px; color: white\">', data.nice_total_disk_usage ? (0, _localization2.default)(\"Using \") + data.nice_total_disk_usage : \"\", \"</div>\", \"</div>\"].join(\"\");\n    },\n\n    toString: function toString() {\n        return \"UserQuotaMeter(\" + this.model + \")\";\n    }\n});\n\n//==============================================================================\nexports.default = {\n    UserQuotaMeter: UserQuotaMeter\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 5:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _backbone = __webpack_require__(2);\n\nvar Backbone = _interopRequireWildcard(_backbone);\n\nvar _addLogging = __webpack_require__(19);\n\nvar _addLogging2 = _interopRequireDefault(_addLogging);\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//==============================================================================\n/** @class Mixin to add logging capabilities to an object.\n *      Designed to allow switching an objects log output off/on at one central\n *      statement. Can be used with plain browser console (or something more\n *      complex like an AJAX logger).\n *  <br />NOTE: currently only uses the console.debug log function\n *  (as opposed to debug, error, warn, etc.)\n *  @name LoggableMixin\n *\n *  @example\n *  // Add to your models/views at the definition using chaining:\n *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n *\n *  // or - more explicitly AFTER the definition:\n *      var MyModel = Backbone.Model.extend({\n *          logger  : console\n *          // ...\n *          this.log( '$#%& it! - broken already...' );\n *      })\n *      _.extend( MyModel.prototype, LoggableMixin )\n *\n */\nvar LoggableMixin = /** @lends LoggableMixin# */{\n    // replace null with console (if available) to see all logs for a particular view/model\n    /** The logging object whose log function will be used to output\n     *      messages. Null will supress all logging. Commonly set to console.\n     */\n    logger: null,\n    /** @type {String} a namespace for filtering/focusing log output */\n    _logNamespace: \".\"\n};\n(0, _addLogging2.default)(LoggableMixin);\n\n//==============================================================================\n/** Backbone model that syncs to the browser's sessionStorage API.\n *      This all largely happens behind the scenes and no special calls are required.\n */\nvar SessionStorageModel = Backbone.Model.extend({\n    initialize: function initialize(initialAttrs) {\n        // check for sessionStorage and error if no id is provided\n        this._checkEnabledSessionStorage();\n        if (!initialAttrs.id) {\n            throw new Error(\"SessionStorageModel requires an id in the initial attributes\");\n        }\n        this.id = initialAttrs.id;\n\n        // load existing from storage (if any), clear any attrs set by bbone before init is called,\n        //  layer initial over existing and defaults, and save\n        var existing = !this.isNew() ? this._read(this) : {};\n        this.clear({ silent: true });\n        this.save(_.extend({}, this.defaults, existing, initialAttrs), {\n            silent: true\n        });\n\n        // save on any change to it immediately\n        this.on(\"change\", function () {\n            this.save();\n        });\n    },\n\n    _checkEnabledSessionStorage: function _checkEnabledSessionStorage() {\n        try {\n            return window.sessionStorage.length >= 0;\n        } catch (err) {\n            alert(\"Please enable cookies in your browser for this Galaxy site\");\n            return false;\n        }\n    },\n\n    /** override of bbone sync to save to sessionStorage rather than REST\n     *      bbone options (success, errror, etc.) should still apply\n     */\n    sync: function sync(method, model, options) {\n        if (!options.silent) {\n            model.trigger(\"request\", model, {}, options);\n        }\n        var returned = {};\n        switch (method) {\n            case \"create\":\n                returned = this._create(model);\n                break;\n            case \"read\":\n                returned = this._read(model);\n                break;\n            case \"update\":\n                returned = this._update(model);\n                break;\n            case \"delete\":\n                returned = this._delete(model);\n                break;\n        }\n        if (returned !== undefined || returned !== null) {\n            if (options.success) {\n                options.success();\n            }\n        } else {\n            if (options.error) {\n                options.error();\n            }\n        }\n        return returned;\n    },\n\n    /** set storage to the stringified item */\n    _create: function _create(model) {\n        try {\n            var json = model.toJSON();\n            var set = sessionStorage.setItem(model.id, JSON.stringify(json));\n            return set === null ? set : json;\n            // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n            // http://stackoverflow.com/questions/14555347\n            // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n        } catch (err) {\n            if (!(err instanceof DOMException && navigator.userAgent.indexOf(\"Safari\") > -1)) {\n                throw err;\n            }\n        }\n        return null;\n    },\n\n    /** read and parse json from storage */\n    _read: function _read(model) {\n        return JSON.parse(sessionStorage.getItem(model.id));\n    },\n\n    /** set storage to the item (alias to create) */\n    _update: function _update(model) {\n        return model._create(model);\n    },\n\n    /** remove the item from storage */\n    _delete: function _delete(model) {\n        return sessionStorage.removeItem(model.id);\n    },\n\n    /** T/F whether sessionStorage contains the model's id (data is present) */\n    isNew: function isNew() {\n        return !sessionStorage.hasOwnProperty(this.id);\n    },\n\n    _log: function _log() {\n        return JSON.stringify(this.toJSON(), null, \"  \");\n    },\n    toString: function toString() {\n        return \"SessionStorageModel(\" + this.id + \")\";\n    }\n});\n(function () {\n    SessionStorageModel.prototype = _.omit(SessionStorageModel.prototype, \"url\", \"urlRoot\");\n})();\n\n//==============================================================================\n/** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n *      (before the more local class overrides/hash).\n *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n *  @example:\n *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n *\n *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n */\nfunction mixin(mixinHash1, /* mixinHash2, etc: ... variadic */propsHash) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var lastArg = args.pop();\n    args.unshift(lastArg);\n    return _.defaults.apply(_, args);\n}\n\n//==============================================================================\n/** A mixin for models that allow T/F/Matching to their attributes - useful when\n *      searching or filtering collections of models.\n * @example:\n *      see hda-model for searchAttribute and searchAliases definition examples.\n *      see history-contents.matches for how collections are filtered\n *      and see readonly-history-view.searchHdas for how user input is connected to the filtering\n */\nvar SearchableModelMixin = {\n    /** what attributes of an HDA will be used in a text search */\n    searchAttributes: [\n        // override\n    ],\n\n    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n    searchAliases: {\n        // override\n    },\n\n    /** search the attribute with key attrKey for the string searchFor; T/F if found */\n    searchAttribute: function searchAttribute(attrKey, searchFor) {\n        var attrVal = this.get(attrKey);\n        //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n        // bail if empty searchFor or unsearchable values\n        if (!searchFor || attrVal === undefined || attrVal === null) {\n            return false;\n        }\n        // pass to sep. fn for deep search of array attributes\n        if (_.isArray(attrVal)) {\n            return this._searchArrayAttribute(attrVal, searchFor);\n        }\n        return attrVal.toString().toLowerCase().indexOf(searchFor.toLowerCase()) !== -1;\n    },\n\n    /** deep(er) search for array attributes; T/F if found */\n    _searchArrayAttribute: function _searchArrayAttribute(array, searchFor) {\n        //this.debug( '_searchArrayAttribute', array, searchFor );\n        searchFor = searchFor.toLowerCase();\n        //precondition: searchFor has already been validated as non-empty string\n        //precondition: assumes only 1 level array\n        //TODO: could possibly break up searchFor more (CSV...)\n        return _.any(array, function (elem) {\n            return elem.toString().toLowerCase().indexOf(searchFor.toLowerCase()) !== -1;\n        });\n    },\n\n    /** search all searchAttributes for the string searchFor,\n     *      returning a list of keys of attributes that contain searchFor\n     */\n    search: function search(searchFor) {\n        var model = this;\n        return _.filter(this.searchAttributes, function (key) {\n            return model.searchAttribute(key, searchFor);\n        });\n    },\n\n    /** alias of search, but returns a boolean; accepts attribute specifiers where\n     *      the attributes searched can be narrowed to a single attribute using\n     *      the form: matches( 'genome_build=hg19' )\n     *      (the attribute keys allowed can also be aliases to the true attribute key;\n     *          see searchAliases above)\n     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n     *  @returns {Boolean} was term found in (any) attribute(s)\n     */\n    matches: function matches(term) {\n        var ATTR_SPECIFIER = \"=\";\n        var split = term.split(ATTR_SPECIFIER);\n        // attribute is specified - search only that\n        if (split.length >= 2) {\n            var attrKey = split[0];\n            attrKey = this.searchAliases[attrKey] || attrKey;\n            return this.searchAttribute(attrKey, split[1]);\n        }\n        // no attribute is specified - search all attributes in searchAttributes\n        return !!this.search(term).length;\n    },\n\n    /** an implicit AND search for all terms; IOW, a model must match all terms given\n     *      where terms is a whitespace separated value string.\n     *      e.g. given terms of: 'blah bler database=hg19'\n     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n     */\n    matchesAll: function matchesAll(terms) {\n        var model = this;\n        // break the terms up by whitespace and filter out the empty strings\n        terms = terms.match(/(\".*\"|\\w*=\".*\"|\\S*)/g).filter(function (s) {\n            return !!s;\n        });\n        return _.all(terms, function (term) {\n            term = term.replace(/\"/g, \"\");\n            return model.matches(term);\n        });\n    }\n};\n\n//==============================================================================\n/** A view that renders hidden and shows when some activator is clicked.\n *      options:\n *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n *          onShowFirstTime: fn called the first time the view is shown\n *          onshow: fn called every time the view is shown\n *          onhide: fn called every time the view is hidden\n *      events:\n *          hiddenUntilActivated:shown (the view is passed as an arg)\n *          hiddenUntilActivated:hidden (the view is passed as an arg)\n *      instance vars:\n *          view.hidden {boolean} is the view in the hidden state\n */\nvar HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */{\n    //TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\n    /** call this in your initialize to set up the mixin\n     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n     *  @param {Object} hash with mixin options\n     */\n    hiddenUntilActivated: function hiddenUntilActivated($activator, options) {\n        // call this in your view's initialize fn\n        options = options || {};\n        //TODO: flesh out options - show them all here\n        this.HUAVOptions = {\n            $elementShown: this.$el,\n            showFn: jQuery.prototype.toggle,\n            showSpeed: \"fast\"\n        };\n        _.extend(this.HUAVOptions, options || {});\n        /** has this been shown already (and onshowFirstTime called)? */\n        this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is(\":visible\");\n        this.hidden = this.isHidden();\n\n        if ($activator) {\n            var mixin = this;\n            $activator.on(\"click\", function (ev) {\n                mixin.toggle(mixin.HUAVOptions.showSpeed);\n            });\n        }\n    },\n\n    //TODO:?? remove? use .hidden?\n    /** returns T/F if the view is hidden */\n    isHidden: function isHidden() {\n        return this.HUAVOptions.$elementShown.is(\":hidden\");\n    },\n\n    /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n    toggle: function toggle() {\n        //TODO: more specific name - toggle is too general\n        // can be called manually as well with normal toggle arguments\n        //TODO: better as a callback (when the show/hide is actually done)\n        // show\n        if (this.hidden) {\n            // fire the optional fns on the first/each showing - good for render()\n            if (!this.HUAVOptions.hasBeenShown) {\n                if (_.isFunction(this.HUAVOptions.onshowFirstTime)) {\n                    this.HUAVOptions.hasBeenShown = true;\n                    this.HUAVOptions.onshowFirstTime.call(this);\n                }\n            }\n            if (_.isFunction(this.HUAVOptions.onshow)) {\n                this.HUAVOptions.onshow.call(this);\n                this.trigger(\"hiddenUntilActivated:shown\", this);\n            }\n            this.hidden = false;\n\n            // hide\n        } else {\n            if (_.isFunction(this.HUAVOptions.onhide)) {\n                this.HUAVOptions.onhide.call(this);\n                this.trigger(\"hiddenUntilActivated:hidden\", this);\n            }\n            this.hidden = true;\n        }\n        return this.HUAVOptions.showFn.apply(this.HUAVOptions.$elementShown, arguments);\n    }\n};\n\n//==============================================================================\n/** Mixin for views that can be dragged and dropped\n *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n *          handlers each time.\n *      dataTransfer data is set to the JSON string of the view's model.toJSON\n *      Override '$dragHandle' to define the draggable DOM sub-element.\n */\nvar DraggableViewMixin = {\n    /** set up instance vars to track whether this view is currently draggable */\n    initialize: function initialize(attributes) {\n        /** is the body of this hda view expanded/not? */\n        this.draggable = attributes.draggable || false;\n    },\n\n    /** what part of the view's DOM triggers the dragging */\n    $dragHandle: function $dragHandle() {\n        //TODO: make abstract/general - move this to listItem\n        // override to the element you want to be your view's handle\n        return this.$(\".title-bar\");\n    },\n\n    /** toggle whether this view is draggable */\n    toggleDraggable: function toggleDraggable() {\n        if (this.draggable) {\n            this.draggableOff();\n        } else {\n            this.draggableOn();\n        }\n    },\n\n    /** allow the view to be dragged, set up event handlers */\n    draggableOn: function draggableOn() {\n        this.draggable = true;\n        this.dragStartHandler = _.bind(this._dragStartHandler, this);\n        this.dragEndHandler = _.bind(this._dragEndHandler, this);\n\n        var handle = this.$dragHandle().attr(\"draggable\", true).get(0);\n        handle.addEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.addEventListener(\"dragend\", this.dragEndHandler, false);\n    },\n\n    /** turn of view dragging and remove event listeners */\n    draggableOff: function draggableOff() {\n        this.draggable = false;\n        var handle = this.$dragHandle().attr(\"draggable\", false).get(0);\n        handle.removeEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.removeEventListener(\"dragend\", this.dragEndHandler, false);\n    },\n\n    /** sets the dataTransfer data to the model's toJSON\n     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n     */\n    _dragStartHandler: function _dragStartHandler(event) {\n        event.dataTransfer.effectAllowed = \"move\";\n        //ASSUMES: this.model\n        //TODO: all except IE: should be 'application/json', IE: must be 'text'\n        event.dataTransfer.setData(\"text\", JSON.stringify(this.model.toJSON()));\n        this.trigger(\"draggable:dragstart\", event, this);\n        return false;\n    },\n\n    /** handle the dragend\n     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n     */\n    _dragEndHandler: function _dragEndHandler(event) {\n        this.trigger(\"draggable:dragend\", event, this);\n        return false;\n    }\n};\n\n//==============================================================================\n/** Mixin that allows a view to be selected (gen. from a list).\n *      Selection controls ($selector) may be hidden/shown/toggled.\n *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n *      Default rendering is a font-awesome checkbox.\n *      Default selector is '.selector' within the view's $el.\n *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n *          Both events are passed the view and the (jQuery) event.\n */\nvar SelectableViewMixin = {\n    /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n    initialize: function initialize(attributes) {\n        /** is the view currently in selection mode? */\n        this.selectable = attributes.selectable || false;\n        /** is the view currently selected? */\n        this.selected = attributes.selected || false;\n    },\n\n    /** $el sub-element where the selector is rendered and what can be clicked to select. */\n    $selector: function $selector() {\n        return this.$(\".selector\");\n    },\n\n    /** How the selector is rendered - defaults to font-awesome checkbox */\n    _renderSelected: function _renderSelected() {\n        // override\n        this.$selector().find(\"span\").toggleClass(\"fa-check-square-o\", this.selected).toggleClass(\"fa-square-o\", !this.selected);\n    },\n\n    /** Toggle whether the selector is shown */\n    toggleSelector: function toggleSelector() {\n        //TODO: use this.selectable\n        if (!this.$selector().is(\":visible\")) {\n            this.showSelector();\n        } else {\n            this.hideSelector();\n        }\n    },\n\n    /** Display the selector control.\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n     */\n    showSelector: function showSelector(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        // make sure selected state is represented properly\n        this.selectable = true;\n        this.trigger(\"selectable\", true, this);\n        this._renderSelected();\n        if (speed) {\n            this.$selector().show(speed);\n        } else {\n            this.$selector().show();\n        }\n    },\n\n    /** remove the selector control\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n     */\n    hideSelector: function hideSelector(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        // reverse the process from showSelect\n        this.selectable = false;\n        this.trigger(\"selectable\", false, this);\n        if (speed) {\n            this.$selector().hide(speed);\n        } else {\n            this.$selector().hide();\n        }\n    },\n\n    /** Toggle whether the view is selected */\n    toggleSelect: function toggleSelect(event) {\n        if (this.selected) {\n            this.deselect(event);\n        } else {\n            this.select(event);\n        }\n    },\n\n    /** Select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    select: function select(event) {\n        // switch icon, set selected, and trigger event\n        if (!this.selected) {\n            this.trigger(\"selected\", this, event);\n            this.selected = true;\n            this._renderSelected();\n        }\n        return false;\n    },\n\n    /** De-select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    deselect: function deselect(event) {\n        // switch icon, set selected, and trigger event\n        if (this.selected) {\n            this.trigger(\"de-selected\", this, event);\n            this.selected = false;\n            this._renderSelected();\n        }\n        return false;\n    }\n};\n\n//==============================================================================\n/** Return an underscore template fn from an array of strings.\n *  @param {String[]} template      the template strings to compile into the underscore template fn\n *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n *  @returns {Function} the (wrapped) underscore template fn\n *      The function accepts:\n *\n *  The template strings can access:\n *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n *      _l: the localizer function\n *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n *      Because they're namespaced, undefined attributes will not throw an error.\n *\n *  @example:\n *      templateBler : BASE_MVC.wrapTemplate([\n *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n *          '</div>'\n *      ], 'mynamespace' )\n *\n *  Meant to be called in a View's definition in order to compile only once.\n *\n */\nfunction wrapTemplate(template, jsonNamespace) {\n    jsonNamespace = jsonNamespace || \"model\";\n    var templateFn = _.template(template.join(\"\"));\n    return function (json, view) {\n        var templateVars = { view: view || {}, _l: _localization2.default };\n        templateVars[jsonNamespace] = json || {};\n        return templateFn(templateVars);\n    };\n}\n\n//==============================================================================\n/** Return a comparator function for sorted Collections */\nfunction buildComparator(attribute_name, options) {\n    options = options || {};\n    var ascending = options.ascending ? 1 : -1;\n    return function __comparator(a, b) {\n        a = a.get(attribute_name);\n        b = b.get(attribute_name);\n        return (a < b ? -1 : a > b ? 1 : 0) * ascending;\n    };\n}\n\n//==============================================================================\nexports.default = {\n    LoggableMixin: LoggableMixin,\n    SessionStorageModel: SessionStorageModel,\n    mixin: mixin,\n    SearchableModelMixin: SearchableModelMixin,\n    HiddenUntilActivatedViewMixin: HiddenUntilActivatedViewMixin,\n    DraggableViewMixin: DraggableViewMixin,\n    SelectableViewMixin: SelectableViewMixin,\n    wrapTemplate: wrapTemplate,\n    buildComparator: buildComparator\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 59:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _backbone = __webpack_require__(2);\n\nvar Backbone = _interopRequireWildcard(_backbone);\n\nvar _baseMvc = __webpack_require__(5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _userModel = __webpack_require__(24);\n\nvar _userModel2 = _interopRequireDefault(_userModel);\n\nvar _metricsLogger = __webpack_require__(60);\n\nvar _metricsLogger2 = _interopRequireDefault(_metricsLogger);\n\nvar _addLogging = __webpack_require__(19);\n\nvar _addLogging2 = _interopRequireDefault(_addLogging);\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp(options, bootstrapped) {\n    var self = this;\n    return self._init(options || {}, bootstrapped || {});\n}\n\n// add logging shortcuts for this object\n(0, _addLogging2.default)(GalaxyApp, \"GalaxyApp\");\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = \"galaxy:debug\";\n\nvar NAMESPACE_KEY = DEBUGGING_KEY + \":namespaces\";\nvar FLATTEN_LOG_MESSAGES_KEY = DEBUGGING_KEY + \":flatten\";\n\nvar localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n} catch (storageErr) {\n    console.log((0, _localization2.default)(\"localStorage not available for debug flag retrieval\"));\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init(options, bootstrapped) {\n    var self = this;\n    _.extend(self, Backbone.Events);\n    if (localDebugging) {\n        self.logger = console;\n        console.debug(\"debugging galaxy:\", \"options:\", options, \"bootstrapped:\", bootstrapped);\n    }\n\n    self._processOptions(options);\n\n    // add root and url parameters\n    self.root = options.root || \"/\";\n    self.params = options.params || {};\n    self.session_csrf_token = options.session_csrf_token || null;\n\n    self._initConfig(options.config || {});\n    self._patchGalaxy(window.Galaxy);\n\n    self._initLogger(self.options.loggerOptions || {});\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug(\"GalaxyApp.options: \", self.options);\n    self.debug(\"GalaxyApp.config: \", self.config);\n    self.debug(\"GalaxyApp.logger: \", self.logger);\n\n    self._initLocale();\n    self.debug(\"GalaxyApp.localize: \", self.localize);\n\n    self.config = options.config || {};\n    self.debug(\"GalaxyApp.config: \", self.config);\n\n    self._initUser(options.user || {});\n    self.debug(\"GalaxyApp.user: \", self.user);\n\n    self._setUpListeners();\n    self.trigger(\"ready\", self);\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting: true,\n    /** root url of this app */\n    root: \"/\",\n    session_csrf_token: null\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions(options) {\n    var self = this;\n    var defaults = self.defaultOptions;\n\n    self.options = {};\n    for (var k in defaults) {\n        if (defaults.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : defaults[k];\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig(config) {\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if (self.options.patchExisting && patchWith) {\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for (var k in patchWith) {\n            if (patchWith.hasOwnProperty(k)) {\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[k] = patchWith[k];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if (self.config.debug) {\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel = loggerOptions.consoleLevel || _metricsLogger2.default.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage.getItem(NAMESPACE_KEY).split(\",\");\n        } catch (storageErr) {}\n        try {\n            loggerOptions.consoleFlattenMessages = localStorage.getItem(FLATTEN_LOG_MESSAGES_KEY) == \"true\";\n        } catch (storageErr) {}\n        console.log(loggerOptions.consoleFlattenMessages);\n    }\n\n    self.logger = new _metricsLogger2.default.MetricsLogger(loggerOptions);\n    self.emit = {};\n    [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(function (i) {\n        self.emit[i] = function (data) {\n            self.logger.emit(i, arguments[0], Array.prototype.slice.call(arguments, 1));\n        };\n    });\n\n    if (self.config.debug) {\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        _baseMvc2.default.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale(options) {\n    var self = this;\n    self.debug(\"_initLocale:\", options);\n    self.localize = _localization2.default;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser(userJSON) {\n    var self = this;\n    self.debug(\"_initUser:\", userJSON);\n    self.user = new _userModel2.default.User(userJSON);\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $(document).bind(\"ajaxSend\", function (ev, xhr, options) {\n        var data = options.data;\n        try {\n            data = JSON.parse(data);\n        } catch (err) {}\n\n        self.lastAjax = {\n            url: location.href.slice(0, -1) + options.url,\n            data: data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging(setting) {\n    var self = this;\n    try {\n        if (setting === undefined) {\n            return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n        }\n        if (setting) {\n            localStorage.setItem(DEBUGGING_KEY, true);\n            return true;\n        }\n\n        localStorage.removeItem(DEBUGGING_KEY);\n        // also remove all namespaces\n        self.debuggingNamespaces(null);\n    } catch (storageErr) {\n        console.log((0, _localization2.default)(\"localStorage not available for debug flag retrieval\"));\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(namespaces) {\n    var self = this;\n    try {\n        if (namespaces === undefined) {\n            var csv = localStorage.getItem(NAMESPACE_KEY);\n            return typeof csv === \"string\" ? csv.split(\",\") : [];\n        } else if (namespaces === null) {\n            localStorage.removeItem(NAMESPACE_KEY);\n        } else {\n            localStorage.setItem(NAMESPACE_KEY, namespaces);\n        }\n        var newSettings = self.debuggingNamespaces();\n        if (self.logger) {\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch (storageErr) {\n        console.log((0, _localization2.default)(\"localStorage not available for debug namespace retrieval\"));\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString() {\n    var userEmail = this.user ? this.user.get(\"email\") || \"(anonymous)\" : \"uninitialized\";\n    return \"GalaxyApp(\" + userEmail + \")\";\n};\n\n// ============================================================================\nexports.default = {\n    GalaxyApp: GalaxyApp\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 60:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global window, jQuery, console */\n/*=============================================================================\nTODO:\n    while anon: logs saved to 'logs-null' - this will never post\n        unless we manually do so at/after login\n        OR prepend when userId and localStorage has 'logs-null'\n    wire up _delayPost and test\n\n=============================================================================*/\n/** @class MetricsLogger\n *\n *  Object to cache, output, and post log/metric messages to the server.\n *  Meant to be attached to the Galaxy object.\n *\n *  Log from objects by either attaching logger directly:\n *      panel.logger.metric( 'user dataset deletion', panel.user.id, hda.toJSON() )\n *  or using the LoggableMixin or addLogging function:\n *      MyBackboneModel.extend( LoggableMixin ).extend({ ... })\n *      addLogging( MyBackboneModel, 'my-backbone-model' )\n *\n *  Log from templates by calling directly from Galaxy object:\n *      Galaxy.logger.metric( 'template loaded', { ownedByUser : true });\n *\n *  If you attempt to log an un-serializable object (circular reference, window, etc.),\n *  that entry will not be cached (or sent). If you set consoleLevel and consoleLogger\n *  appropriately, a warning will be shown when this happens:\n *      > panel.metric( 'something weird with window', { window : window })\n *      !'Metrics logger could not stringify logArguments: ...'\n */\nfunction MetricsLogger(options) {\n    options = options || {};\n    var self = this;\n\n    ///** get the current user's id from bootstrapped data or options */\n    self.userId = window.bootstrapped && window.bootstrapped.user ? window.bootstrapped.user.id : null;\n    self.userId = self.userId || options.userId || null;\n\n    /** the (optional) console to emit logs to */\n    self.consoleLogger = options.consoleLogger || null;\n\n    self._init(options);\n    return self;\n}\n\n//----------------------------------------------------------------------------- defaults and constants\n// see: python std lib, logging\nMetricsLogger.ALL = 0;\nMetricsLogger.LOG = 0;\nMetricsLogger.DEBUG = 10;\nMetricsLogger.INFO = 20;\nMetricsLogger.WARN = 30;\nMetricsLogger.ERROR = 40;\n// metrics levels here?\n//MetricsLogger.MinorEvent  = 45;\n//MetricsLogger.MajorEvent  = 50;\nMetricsLogger.METRIC = 50;\nMetricsLogger.NONE = 100;\n\n/** default options - override these through the constructor */\nMetricsLogger.defaultOptions = {\n    /** if an incoming message has a level >= this, it will be cached - can also be a string (e.g. 'debug') */\n    logLevel: MetricsLogger.NONE,\n    /** if an incoming message has a level >= this, it will be output to the console */\n    consoleLevel: MetricsLogger.NONE,\n    /** the default 'namespace' or label associated with an incoming message (if none is passed) */\n    defaultNamespace: \"Galaxy\",\n    /** the namespaces output to the console (all namespaces will be output if this is falsy)\n     *  note: applies only to the console (not the event/metrics log/cache)\n     */\n    consoleNamespaceWhitelist: null,\n    /** Force all messages into simple strings. */\n    consoleFlattenMessages: false,\n    /** the prefix attached to client-side logs to distinguish them in the metrics db */\n    clientPrefix: \"client.\",\n\n    /** the maximum number of messages the cache should hold; if exceeded older messages are removed first */\n    maxCacheSize: 3000,\n    /** the number of messages accumulate before posting to the server; should be <= maxCacheSize */\n    postSize: 1000,\n    /** T/F whether to add a timestamp to incoming cached messages */\n    addTime: true,\n    /** string to prefix to userid for cache web storage */\n    cacheKeyPrefix: \"logs-\",\n\n    /** the relative url to post messages to */\n    postUrl: \"/api/metrics\",\n    /** delay before trying post again after two failures */\n    delayPostInMs: 1000 * 60 * 10,\n\n    /** an (optional) function that should return an object; used to send additional data with the metrics */\n    getPingData: undefined,\n    /** an (optional) function that will handle the servers response after successfully posting messages */\n    onServerResponse: undefined\n};\n\n//----------------------------------------------------------------------------- set up\n/** initialize the logger with options, set up instance vars and cache, and add onpageunload to window */\nMetricsLogger.prototype._init = function _init(options) {\n    var self = this;\n    self.options = {};\n    for (var k in MetricsLogger.defaultOptions) {\n        if (MetricsLogger.defaultOptions.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : MetricsLogger.defaultOptions[k];\n        }\n    }\n    self.options.logLevel = self._parseLevel(self.options.logLevel);\n    self.options.consoleLevel = self._parseLevel(self.options.consoleLevel);\n    //self._emitToConsole( 'debug', 'MetricsLogger', 'MetricsLogger.options:', self.options );\n\n    /** is the logger currently sending? */\n    self._sending = false;\n    /** the setTimeout id if the logger POST has failed more than once */\n    self._waiting = null;\n    /** the current number of entries to send in a POST */\n    self._postSize = self.options.postSize;\n\n    self._initCache();\n\n    return self;\n};\n\n/** initialize the cache */\nMetricsLogger.prototype._initCache = function _initCache() {\n    try {\n        this.cache = new LoggingCache({\n            maxSize: this.options.maxCacheSize,\n            key: this.options.cacheKeyPrefix + this.userId\n        });\n    } catch (err) {\n        this._emitToConsole(\"warn\", \"MetricsLogger\", [\"Could not intitialize logging cache:\", err]);\n        this.options.logLevel = MetricsLogger.NONE;\n    }\n};\n\n/** return the numeric log level if level in 'none, debug, log, info, warn, error' */\nMetricsLogger.prototype._parseLevel = function _parseLevel(level) {\n    var type = typeof level === \"undefined\" ? \"undefined\" : _typeof(level);\n    if (type === \"number\") {\n        return level;\n    }\n    if (type === \"string\") {\n        var upper = level.toUpperCase();\n        if (MetricsLogger.hasOwnProperty(upper)) {\n            return MetricsLogger[upper];\n        }\n    }\n    throw new Error(\"Unknown log level: \" + level);\n};\n\n//----------------------------------------------------------------------------- main entry point\n/** record a log/message's arguments to the cache and/or the console based on level and namespace */\nMetricsLogger.prototype.emit = function emit(level, namespace, logArguments) {\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ 'emit:', level, namespace, logArguments ]);\n    var self = this;\n    namespace = namespace || self.options.defaultNamespace;\n    if (!level || !logArguments) {\n        return self;\n    }\n    // add to cache if proper level\n    //TODO: respect do not track?\n    //if( !navigator.doNotTrack && level >= self.options.logLevel ){\n    level = self._parseLevel(level);\n    if (level >= self.options.logLevel) {\n        self._addToCache(level, namespace, logArguments);\n    }\n    // also emit to consoleLogger if proper level for that\n    if (self.consoleLogger && level >= self.options.consoleLevel) {\n        self._emitToConsole(level, namespace, logArguments);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- cache\n/** add a message to the cache and if messages.length is high enough post them to the server */\nMetricsLogger.prototype._addToCache = function _addToCache(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\"_addToCache:\", arguments, this.options.addTime, this.cache.length()]);\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ '\\t logArguments:', logArguments ]);\n    var self = this;\n    // try add to the cache and if we've got _postSize number of entries, attempt to post them to the server\n    try {\n        var newLength = self.cache.add(self._buildEntry(level, namespace, logArguments));\n        if (newLength >= self._postSize) {\n            self._postCache();\n        }\n        // discard entry if an error occurs, but warn if level set to do so\n    } catch (err) {\n        self._emitToConsole(\"warn\", \"MetricsLogger\", [\"Metrics logger could not stringify logArguments:\", namespace, logArguments]);\n        self._emitToConsole(\"error\", \"MetricsLogger\", [err]);\n    }\n    return self;\n};\n\n/** build a log cache entry object from the given level, namespace, and arguments (optionally adding timestamp */\nMetricsLogger.prototype._buildEntry = function _buildEntry(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\"_buildEntry:\", arguments]);\n    var entry = {\n        level: level,\n        namespace: this.options.clientPrefix + namespace,\n        args: logArguments\n    };\n    if (this.options.addTime) {\n        entry.time = new Date().toISOString();\n    }\n    return entry;\n};\n\n/** post _postSize messages from the cache to the server, removing them if successful\n *      if the post fails, wait until maxCacheSize is accumulated instead and try again then\n *      in addition to the messages from the cache ('metrics'), any info from getPingData (if set) will be sent\n *      onServerResponse will be called (if set) with any response from the server\n */\nMetricsLogger.prototype._postCache = function _postCache(options) {\n    options = options || {};\n    this._emitToConsole(\"info\", \"MetricsLogger\", [\"_postCache\", options, this._postSize]);\n\n    // short circuit if we're already sending\n    if (!this.options.postUrl || this._sending) {\n        return jQuery.when({});\n    }\n\n    var self = this;\n    var postSize = options.count || self._postSize;\n\n    var // do not splice - remove after *successful* post\n    entries = self.cache.get(postSize);\n\n    var entriesLength = entries.length;\n\n    var // use the optional getPingData to add any extra info we may want to send\n    postData = typeof self.options.getPingData === \"function\" ? self.options.getPingData() : {};\n\n    //console.debug( postSize, entriesLength );\n\n    // add the metrics and send\n    postData.metrics = JSON.stringify(entries);\n    //console.debug( postData.metrics );\n    self._sending = true;\n    return jQuery.post(self.options.postUrl, postData).always(function () {\n        self._sending = false;\n    }).fail(function (xhr, status, message) {\n        // if we failed the previous time, set the next post target to the max num of entries\n        self._postSize = self.options.maxCacheSize;\n        //TODO:??\n        // log this failure to explain any gap in metrics\n        self.emit(\"error\", \"MetricsLogger\", [\"_postCache error:\", xhr.readyState, xhr.status, xhr.responseJSON || xhr.responseText]);\n        //TODO: still doesn't solve the problem that when cache == max, post will be tried on every emit\n        //TODO: see _delayPost\n    }).done(function (response) {\n        if (typeof self.options.onServerResponse === \"function\") {\n            self.options.onServerResponse(response);\n        }\n        // only remove if post successful\n        self.cache.remove(entriesLength);\n        //console.debug( 'removed entries:', entriesLength, 'size now:', self.cache.length() );\n        // if we succeeded, reset the post target to the normal num of entries\n        self._postSize = self.options.postSize;\n    });\n    // return the xhr promise\n};\n\n/** set _waiting to true and, after delayPostInMs, set it back to false */\nMetricsLogger.prototype._delayPost = function _delayPost() {\n    //TODO: this won't work between pages\n    var self = this;\n    self._waiting = setTimeout(function () {\n        self._waiting = null;\n    }, self.options.delayPostInMs);\n};\n\nfunction usefulToString(arg) {\n    var asStr = String(arg);\n    if (asStr == \"[object Object]\") {\n        asStr = JSON.stringify(arg);\n    }\n    return asStr;\n}\n\n//----------------------------------------------------------------------------- console\n/** output message to console based on level and consoleLogger type */\nMetricsLogger.prototype._emitToConsole = function _emitToConsole(level, namespace, logArguments) {\n    //console.debug( '_emitToConsole:', level, namespace, logArguments );\n    var self = this;\n\n    var whitelist = self.options.consoleNamespaceWhitelist;\n    if (!self.consoleLogger) {\n        return self;\n    }\n    // if a whitelist for namespaces is set, bail if this namespace is not in the list\n    if (whitelist && whitelist.indexOf(namespace) === -1) {\n        return self;\n    }\n\n    var args = Array.prototype.slice.call(logArguments, 0);\n    args.unshift(namespace);\n    if (self.options.consoleFlattenMessages) {\n        args = [args.map(usefulToString).join(\" \")];\n    }\n    //TODO: script location and/or source maps?\n    //TODO: branch on navigator.userAgent == AIIEEE - it only has log\n    if (level >= MetricsLogger.METRIC && typeof self.consoleLogger.info === \"function\") {\n        return self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.ERROR && typeof self.consoleLogger.error === \"function\") {\n        return self.consoleLogger.error.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.WARN && typeof self.consoleLogger.warn === \"function\") {\n        self.consoleLogger.warn.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.INFO && typeof self.consoleLogger.info === \"function\") {\n        self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.DEBUG && typeof self.consoleLogger.debug === \"function\") {\n        self.consoleLogger.debug.apply(self.consoleLogger, args);\n    } else if (typeof self.consoleLogger.log === \"function\") {\n        self.consoleLogger.log.apply(self.consoleLogger, args);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- shortcuts\n// generic functions when logging from non-namespaced object (e.g. templates)\n/** log to default namespace */\nMetricsLogger.prototype.log = function log() {\n    this.emit(1, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** debug to default namespace */\nMetricsLogger.prototype.debug = function debug() {\n    this.emit(MetricsLogger.DEBUG, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** info to default namespace */\nMetricsLogger.prototype.info = function info() {\n    this.emit(MetricsLogger.INFO, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** warn to default namespace */\nMetricsLogger.prototype.warn = function warn() {\n    this.emit(MetricsLogger.WARN, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** error to default namespace */\nMetricsLogger.prototype.error = function error() {\n    this.emit(MetricsLogger.ERROR, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** metric to default namespace */\nMetricsLogger.prototype.metric = function metric() {\n    this.emit(MetricsLogger.METRIC, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/* ============================================================================\nTODO:\n    need a performance pass - the JSON un/parsing is a bit much\n\n============================================================================ */\n/** @class LoggingCache\n *  Simple implementation of cache wrapping an array.\n *\n *  Formats an entry before it's cached and only keeps options.maxSize number\n *  of entries. Older entries are deleted first.\n */\nfunction LoggingCache(options) {\n    var self = this;\n    return self._init(options || {});\n}\n\n/** default options */\nLoggingCache.defaultOptions = {\n    /** maximum number of entries to keep before discarding oldest */\n    maxSize: 5000\n};\n\n/** initialize with options */\nLoggingCache.prototype._init = function _init(options) {\n    if (!this._hasStorage()) {\n        //TODO: fall back to jstorage\n        throw new Error(\"LoggingCache needs localStorage\");\n    }\n    if (!options.key) {\n        throw new Error(\"LoggingCache needs key for localStorage\");\n    }\n    this.key = options.key;\n    this._initStorage();\n\n    this.maxSize = options.maxSize || LoggingCache.defaultOptions.maxSize;\n    return this;\n};\n\n/** tests for localStorage fns */\nLoggingCache.prototype._hasStorage = function _hasStorage() {\n    //TODO: modernizr\n    var test = \"test\";\n    try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\n/** if no localStorage set for key, initialize to empty array */\nLoggingCache.prototype._initStorage = function _initStorage() {\n    if (localStorage.getItem(this.key) === null) {\n        return this.empty();\n    }\n    return this;\n};\n\n/** add an entry to the cache, removing the oldest beforehand if size >= maxSize */\nLoggingCache.prototype.add = function add(entry) {\n    var self = this;\n    var _cache = self._fetchAndParse();\n    var overage = _cache.length + 1 - self.maxSize;\n    if (overage > 0) {\n        _cache.splice(0, overage);\n    }\n    _cache.push(entry);\n    self._unparseAndStore(_cache);\n    return _cache.length;\n};\n\n/** get the entries from localStorage and parse them */\nLoggingCache.prototype._fetchAndParse = function _fetchAndParse() {\n    var self = this;\n    return JSON.parse(localStorage.getItem(self.key));\n};\n\n/** stringify the entries and put them in localStorage */\nLoggingCache.prototype._unparseAndStore = function _unparseAndStore(entries) {\n    var self = this;\n    return localStorage.setItem(self.key, JSON.stringify(entries));\n};\n\n///** process the entry before caching */\n//LoggingCache.prototype._preprocessEntry = function _preprocessEntry( entry ){\n//    return JSON.stringify( entry );\n//};\n\n/** return the length --- oh, getters where are you? */\nLoggingCache.prototype.length = function length() {\n    return this._fetchAndParse().length;\n};\n\n/** get count number of entries starting with the oldest */\nLoggingCache.prototype.get = function get(count) {\n    return this._fetchAndParse().slice(0, count);\n};\n\n/** remove count number of entries starting with the oldest */\nLoggingCache.prototype.remove = function remove(count) {\n    var _cache = this._fetchAndParse();\n    var removed = _cache.splice(0, count);\n    this._unparseAndStore(_cache);\n    return removed;\n};\n\n/** empty/clear the entire cache */\nLoggingCache.prototype.empty = function empty() {\n    localStorage.setItem(this.key, \"[]\");\n    return this;\n};\n\n/** stringify count number of entries (but do not remove) */\nLoggingCache.prototype.stringify = function stringify(count) {\n    return JSON.stringify(this.get(count));\n};\n\n/** outputs entire cache to console */\nLoggingCache.prototype.print = function print() {\n    // popup? (really, carl? a popup?) - easier to copy/paste\n    console.log(JSON.stringify(this._fetchAndParse(), null, \"  \"));\n};\n\n//=============================================================================\nexports.default = {\n    MetricsLogger: MetricsLogger,\n    LoggingCache: LoggingCache\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 61:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _masthead = __webpack_require__(27);\n\nvar _masthead2 = _interopRequireDefault(_masthead);\n\nvar _panel = __webpack_require__(58);\n\nvar _panel2 = _interopRequireDefault(_panel);\n\nvar _uiModal = __webpack_require__(7);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    el: \"body\",\n    className: \"full-content\",\n    _panelids: [\"left\", \"right\"],\n\n    initialize: function initialize(options) {\n        var self = this;\n        this.config = _.defaults(options.config || {}, {\n            message_box_visible: false,\n            message_box_content: \"\",\n            message_box_class: \"info\",\n            show_inactivity_warning: false,\n            inactivity_box_content: \"\"\n        });\n\n        // attach global objects, build mastheads\n        Galaxy.modal = this.modal = new _uiModal2.default.View();\n        Galaxy.display = this.display = function (view) {\n            if (view.title) {\n                _utils2.default.setWindowTitle(view.title);\n                view.allow_title_display = false;\n            } else {\n                _utils2.default.setWindowTitle();\n                view.allow_title_display = true;\n            }\n            self.center.display(view);\n        };\n        Galaxy.router = this.router = options.Router && new options.Router(self, options);\n        this.masthead = new _masthead2.default.View(this.config);\n        this.center = new _panel2.default.CenterPanel();\n\n        // build page template\n        this.$el.attr(\"scroll\", \"no\");\n        this.$el.html(this._template());\n        this.$(\"#masthead\").replaceWith(this.masthead.$el);\n        this.$(\"#center\").append(this.center.$el);\n        this.$el.append(this.masthead.frame.$el);\n        this.$el.append(this.modal.$el);\n        this.$messagebox = this.$(\"#messagebox\");\n        this.$inactivebox = this.$(\"#inactivebox\");\n\n        // build panels\n        this.panels = {};\n        _.each(this._panelids, function (panel_id) {\n            var panel_class_name = panel_id.charAt(0).toUpperCase() + panel_id.slice(1);\n            var panel_class = options[panel_class_name];\n            if (panel_class) {\n                var panel_instance = new panel_class(self, options);\n                self[panel_instance.toString()] = panel_instance;\n                self.panels[panel_id] = new _panel2.default.SidePanel({\n                    id: panel_id,\n                    el: self.$(\"#\" + panel_id),\n                    view: panel_instance\n                });\n            }\n        });\n        this.render();\n\n        // start the router\n        this.router && Backbone.history.start({\n            root: Galaxy.root,\n            pushState: true\n        });\n    },\n\n    render: function render() {\n        // TODO: Remove this line after select2 update\n        $(\".select2-hidden-accessible\").remove();\n        this.masthead.render();\n        this.renderMessageBox();\n        this.renderInactivityBox();\n        this.renderPanels();\n        this._checkCommunicationServerOnline();\n        return this;\n    },\n\n    /** Render message box */\n    renderMessageBox: function renderMessageBox() {\n        if (this.config.message_box_visible) {\n            var content = this.config.message_box_content || \"\";\n            var level = this.config.message_box_class || \"info\";\n            this.$el.addClass(\"has-message-box\");\n            this.$messagebox.attr(\"class\", \"panel-\" + level + \"-message\").html(content).toggle(!!content).show();\n        } else {\n            this.$el.removeClass(\"has-message-box\");\n            this.$messagebox.hide();\n        }\n        return this;\n    },\n\n    /** Render inactivity warning */\n    renderInactivityBox: function renderInactivityBox() {\n        if (this.config.show_inactivity_warning) {\n            var content = this.config.inactivity_box_content || \"\";\n            var verificationLink = $(\"<a/>\").attr(\"href\", Galaxy.root + \"user/resend_verification\").text(\"Resend verification\");\n            this.$el.addClass(\"has-inactivity-box\");\n            this.$inactivebox.html(content + \" \").append(verificationLink).toggle(!!content).show();\n        } else {\n            this.$el.removeClass(\"has-inactivity-box\");\n            this.$inactivebox.hide();\n        }\n        return this;\n    },\n\n    /** Render panels */\n    renderPanels: function renderPanels() {\n        var self = this;\n        _.each(this._panelids, function (panel_id) {\n            var panel = self.panels[panel_id];\n            if (panel) {\n                panel.render();\n            } else {\n                self.$(\"#center\").css(panel_id, 0);\n                self.$(\"#\" + panel_id).hide();\n            }\n        });\n        return this;\n    },\n\n    /** body template */\n    _template: function _template() {\n        return ['<div id=\"everything\">', '<div id=\"background\"/>', '<div id=\"masthead\"/>', '<div id=\"messagebox\"/>', '<div id=\"inactivebox\" class=\"panel-warning-message\" />', '<div id=\"left\" />', '<div id=\"center\" />', '<div id=\"right\" />', \"</div>\", '<div id=\"dd-helper\" />'].join(\"\");\n    },\n\n    toString: function toString() {\n        return \"PageLayoutView\";\n    },\n\n    /** Check if the communication server is online and show the icon otherwise hide the icon */\n    _checkCommunicationServerOnline: function _checkCommunicationServerOnline() {\n        var host = window.Galaxy.config.communication_server_host;\n        var port = window.Galaxy.config.communication_server_port;\n        var preferences = window.Galaxy.user.attributes.preferences;\n        var $chat_icon_element = $(\"#show-chat-online\");\n        /** Check if the user has deactivated the communication in it's personal settings */\n        if (preferences && [\"1\", \"true\"].indexOf(preferences.communication_server) != -1) {\n            // See if the configured communication server is available\n            $.ajax({\n                url: host + \":\" + port\n            }).success(function (data) {\n                // enable communication only when a user is logged in\n                if (window.Galaxy.user.id !== null) {\n                    if ($chat_icon_element.css(\"visibility\") === \"hidden\") {\n                        $chat_icon_element.css(\"visibility\", \"visible\");\n                    }\n                }\n            }).error(function (data) {\n                // hide the communication icon if the communication server is not available\n                $chat_icon_element.css(\"visibility\", \"hidden\");\n            });\n        } else {\n            $chat_icon_element.css(\"visibility\", \"hidden\");\n        }\n    }\n});\n\nexports.default = { View: View };\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _uiModal = __webpack_require__(7);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _uiFrames = __webpack_require__(17);\n\nvar _uiFrames2 = _interopRequireDefault(_uiFrames);\n\nvar _iconButton = __webpack_require__(18);\n\nvar _iconButton2 = _interopRequireDefault(_iconButton);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\n// Additional dependencies: jQuery, underscore.\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function initialize() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function _set_metadata() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(_.keys(this.attributes), function (k) {\n            if (k.indexOf(\"metadata_\") === 0) {\n                // Found metadata.\n                var new_key = k.split(\"metadata_\")[1];\n                metadata.set(new_key, this.attributes[k]);\n                delete this.attributes[k];\n            }\n        }, this);\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function get_metadata(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: Galaxy.root + \"api/datasets\"\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function initialize(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = Galaxy.root + \"dataset/display?dataset_id=\" + this.id;\n        this.attributes.url_viz = Galaxy.root + \"visualization\";\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function get_next_chunk() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this;\n\n        var next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(function (chunk) {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function initialize(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function expand_to_container() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function attempt_to_fetch(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(function (result) {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function render() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\");\n        var header_container = $(\"<thead/>\").appendTo(data_table);\n        var header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(\"<th>\" + column_names.join(\"</th><th>\") + \"</th>\");\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(\"<th>\" + j + \"</th>\");\n            }\n        }\n\n        // Render first chunk.\n        var self = this;\n\n        var first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(function (result) {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(function () {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function scrolled_to_bottom() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function _renderCell(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === \"str\" || column_types[index] === \"list\") {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function _renderRow(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\");\n\n        var row = $(\"<tr>\");\n        var num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(cells, function (cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(cells.slice(0, num_columns - 1), function (cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            row.append(this._renderCell(cells.slice(num_columns - 1).join(\"\\t\"), num_columns - 1));\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(cells, function (cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            _.each(_.range(num_columns - cells.length), function () {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function _renderChunk(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(chunk.ck_data.split(\"\\n\"), function (line, index) {\n            if (line !== \"\") {\n                data_table.append(this._renderRow(line));\n            }\n        }, this);\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function initialize(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(this.$el.parents(), function (p) {\n            return $(p).css(\"overflow\") === \"auto\";\n        });\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function scrolled_to_bottom() {\n        return this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0;\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function initialize(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function scrolled_to_bottom() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function initialize(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (metadata.get(\"chromCol\") && metadata.get(\"startCol\") && metadata.get(\"endCol\")) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\"TabularButtonTrackster : Bed-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            var search = function search(str, array) {\n                for (var j = 0; j < array.length; j++) {\n                    if (array[j].match(str)) return j;\n                }return -1;\n            };\n\n            // load\n\n\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\"TabularButtonTrackster : VCF-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\"TabularButtonTrackster : Dataset identification is missing.\");\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\"TabularButtonTrackster : Url for visualization controller is missing.\");\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new _iconButton2.default.IconButtonView({\n            model: new _iconButton2.default.IconButton({\n                title: \"Visualize\",\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function show(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row.children().eq(this.col.chrom).html();\n        var start = row.children().eq(this.col.start).html();\n\n        // end is optional\n        var end = this.col.end ? row.children().eq(this.col.end).html() : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: chrom + \":\" + start + \"-\" + end\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: top + \"px\",\n                left: left + \"px\"\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(function () {\n                self.frame.add({\n                    title: \"Trackster\",\n                    url: self.url_viz + \"/trackster?\" + $.param(btn_viz_pars)\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function hide() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = function createModelAndView(model, view, model_config, parent_elt) {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = function createTabularDatasetChunkedView(options) {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded ? new EmbeddedTabularDatasetChunkedView(options) : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexports.default = {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _data = __webpack_require__(8);\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _util = __webpack_require__(10);\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _config = __webpack_require__(11);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _gridView = __webpack_require__(12);\n\nvar _gridView2 = _interopRequireDefault(_gridView);\n\nvar _uiTabs = __webpack_require__(21);\n\nvar _uiTabs2 = _interopRequireDefault(_uiTabs);\n\nvar _uiMisc = __webpack_require__(6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function toJSON() {\n        var self = this;\n        var json = {};\n        _.each(self.constructor.to_json_keys, function (k) {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = function select_datasets(filters, success_fn) {\n    // history dataset selection tab\n    var history_grid = new _gridView2.default({\n        url_base: Galaxy.root + \"visualization/list_history_datasets\",\n        filters: filters,\n        dict_format: true,\n        embedded: true\n    });\n\n    // library dataset selection tab\n    var library_grid = new _gridView2.default({\n        url_base: Galaxy.root + \"visualization/list_library_datasets\",\n        dict_format: true,\n        embedded: true\n    });\n\n    // build tabs\n    var tabs = new _uiTabs2.default.View();\n    tabs.add({\n        id: \"histories\",\n        title: \"Histories\",\n        $el: $(\"<div/>\").append(history_grid.$el)\n    });\n    tabs.add({\n        id: \"libraries\",\n        title: \"Libraries\",\n        $el: $(\"<div/>\").append(library_grid.$el)\n    });\n\n    // modal\n    Galaxy.modal.show({\n        title: \"Select datasets for new tracks\",\n        body: tabs.$el,\n        closing_events: true,\n        buttons: {\n            Cancel: function Cancel() {\n                Galaxy.modal.hide();\n            },\n            Add: function Add() {\n                var requests = [];\n                tabs.$(\"input.grid-row-select-checkbox[name=id]:checked\").each(function () {\n                    window.console.log($(this).val());\n                    requests[requests.length] = $.ajax({\n                        url: Galaxy.root + \"api/datasets/\" + $(this).val(),\n                        dataType: \"json\",\n                        data: {\n                            data_type: \"track_config\",\n                            hda_ldda: tabs.current() == \"histories\" ? \"hda\" : \"ldda\"\n                        }\n                    });\n                });\n                // To preserve order, wait until there are definitions for all tracks and then add\n                // them sequentially.\n                $.when.apply($, requests).then(function () {\n                    // jQuery always returns an Array for arguments, so need to look at first element\n                    // to determine whether multiple requests were made and consequently how to\n                    // map arguments to track definitions.\n                    var track_defs = arguments[0] instanceof Array ? $.map(arguments, function (arg) {\n                        return arg[0];\n                    }) : [arguments[0]];\n                    success_fn(track_defs);\n                });\n                Galaxy.modal.hide();\n            }\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function CanvasManager(default_font) {\n    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext(\"2d\");\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern(\"right_strand\", \"/visualization/strand_right.png\");\n    this.load_pattern(\"left_strand\", \"/visualization/strand_left.png\");\n    this.load_pattern(\"right_strand_inv\", \"/visualization/strand_right_inv.png\");\n    this.load_pattern(\"left_strand_inv\", \"/visualization/strand_left_inv.png\");\n};\n\n_.extend(CanvasManager.prototype, {\n    load_pattern: function load_pattern(key, path) {\n        var patterns = this.patterns;\n        var dummy_context = this.dummy_context;\n        var image = new Image();\n        image.src = Galaxy.root + \"static/images\" + path;\n        image.onload = function () {\n            patterns[key] = dummy_context.createPattern(image, \"repeat\");\n        };\n    },\n    get_pattern: function get_pattern(key) {\n        return this.patterns[key];\n    },\n    new_canvas: function new_canvas() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function initialize(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function get_elt(key) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n\n        var index = _.indexOf(key_ary, function (k) {\n            return k.toString() === key_str;\n        });\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            } else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function set_elt(key, value) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n        var num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function move_key_to_end(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function clear() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function size() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function most_recently_added() {\n        return this.size() === 0 ? null : // Most recent key is at the end of key array.\n        this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function data_mode_compatible(entry, mode) {\n            return true;\n        },\n        can_subset: function can_subset(entry) {\n            return false;\n        }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function initialize(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get(\"init_data\");\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function add_data(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get(\"num_elements\") < entries.length) {\n            this.set(\"num_elements\", entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, function (entry) {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function data_is_ready() {\n        var dataset = this.get(\"dataset\");\n        var ready_deferred = $.Deferred();\n\n        var // If requesting raw data, query dataset state; if requesting (converted) data,\n        // need to query converted datasets state.\n        query_type = this.get(\"data_type\") === \"raw_data\" ? \"state\" : this.get(\"data_type\") === \"data\" ? \"converted_datasets_state\" : \"error\";\n\n        var ss_deferred = new _util2.default.ServerStateDeferred({\n            ajax_settings: {\n                url: this.get(\"dataset\").url(),\n                data: {\n                    hda_ldda: dataset.get(\"hda_ldda\"),\n                    data_type: query_type\n                },\n                dataType: \"json\"\n            },\n            interval: 5000,\n            success_fn: function success_fn(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        $.when(ss_deferred.go()).then(function (response) {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\");\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function search_features(query) {\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            query: query,\n            hda_ldda: dataset.get(\"hda_ldda\"),\n            data_type: \"features\"\n        };\n\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function load_data(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            data_type: this.get(\"data_type\"),\n            chrom: region.get(\"chrom\"),\n            low: region.get(\"start\"),\n            high: region.get(\"end\"),\n            mode: mode,\n            resolution: resolution,\n            hda_ldda: dataset.get(\"hda_ldda\")\n        };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get(\"filters_manager\");\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this;\n\n        var entry = $.getJSON(dataset.url(), params, function (result) {\n            // Add region to the result.\n            result.region = region;\n            manager.set_data(region, result);\n        });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function get_data(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if (entry && (_util2.default.is_deferred(entry) || this.get(\"data_mode_compatible\")(entry, mode))) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get(\"key_ary\");\n\n        var obj_cache = this.get(\"obj_cache\");\n        var entry_region;\n        var is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if (_util2.default.is_deferred(entry) || this.get(\"data_mode_compatible\")(entry, mode) && this.get(\"can_subset\")(entry)) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if (!_util2.default.is_deferred(entry)) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (!last_request || region.get(\"start\") > last_request.get(\"start\")) {\n                // This request is after the last request, so extend right.\n                region.set(\"end\", region.get(\"start\") + this.attributes.min_region_size);\n            } else {\n                // This request is after the last request, so extend left.\n                region.set(\"start\", region.get(\"end\") - this.attributes.min_region_size);\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set(\"genome\", this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function set_data(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function get_more_data(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get(\"data_mode_compatible\")(cur_data, mode))) {\n            console.log(\"ERROR: problem with getting more data: current data is not compatible\");\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get(\"start\");\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {\n                start_val: cur_data.data.length + 1\n            });\n        } else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set(\"start\", query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this;\n\n        var new_data_request = this.load_data(query_region, mode, resolution, extra_params);\n\n        var new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(function (result) {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function can_get_more_detailed_data(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return cur_data.dataset_type === \"bigwig\" && cur_data.data.length < 8000;\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function get_more_detailed_data(region, mode, resolution, detail_multiplier, extra_params) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) {\n            extra_params = {};\n        }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === \"bigwig\") {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function _mark_stale(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\"ERROR: no data to mark as stale: \", this.get(\"dataset\"), region.toString());\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function get_genome_wide_data(genome) {\n        // -- Get all data. --\n\n        var self = this;\n\n        var all_data_available = true;\n\n        var //  Map chromosome info into genome data.\n        gw_data = _.map(genome.get(\"chroms_info\").chrom_info, function (chrom_info) {\n            var chrom_data = self.get_elt(new GenomeRegion({\n                chrom: chrom_info.chrom,\n                start: 0,\n                end: chrom_info.len\n            }));\n\n            // Set flag if data is not available.\n            if (!chrom_data) {\n                all_data_available = false;\n            }\n\n            return chrom_data;\n        });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(this.get(\"dataset\").url(), { data_type: \"genome_data\" }, function (genome_wide_data) {\n            self.add_data(genome_wide_data.data);\n            deferred.resolve(genome_wide_data.data);\n        });\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function subset_entry(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function bigwig(data, subregion) {\n                return _.filter(data, function (data_point) {\n                    return data_point[0] >= subregion.get(\"start\") && data_point[0] <= subregion.get(\"end\");\n                });\n            },\n            refseq: function refseq(data, subregion) {\n                var seq_start = subregion.get(\"start\") - entry.region.get(\"start\");\n                return entry.data.slice(seq_start, seq_start + subregion.length());\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function initialize(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set(\"dataset\", dataset_placeholder);\n    },\n\n    load_data: function load_data(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return region.length() <= 100000 ? GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params) : { data: null, region: region };\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function initialize(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function get_chroms_info() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function get_chrom_region(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), function (chrom_info) {\n            return chrom_info.chrom === chr_name;\n        });\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function get_chrom_len(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), function (chrom_info) {\n            return chrom_info.chrom === chr_name;\n        }).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend({\n    defaults: {\n        chrom: null,\n        start: 0,\n        end: 0,\n        str_val: null,\n        genome: null\n    },\n\n    /**\n     * Returns true if this region is the same as a given region.\n     * It does not test the genome right now.\n     */\n    same: function same(region) {\n        return this.attributes.chrom === region.get(\"chrom\") && this.attributes.start === region.get(\"start\") && this.attributes.end === region.get(\"end\");\n    },\n\n    /**\n     * If from_str specified, use it to initialize attributes.\n     */\n    initialize: function initialize(options) {\n        if (options.from_str) {\n            var pieces = options.from_str.split(\":\");\n            var chrom = pieces[0];\n            var start_end = pieces[1].split(\"-\");\n            this.set({\n                chrom: chrom,\n                start: parseInt(start_end[0], 10),\n                end: parseInt(start_end[1], 10)\n            });\n        }\n\n        // Keep a copy of region's string value for fast lookup.\n        this.attributes.str_val = this.get(\"chrom\") + \":\" + this.get(\"start\") + \"-\" + this.get(\"end\");\n\n        // Set str_val on attribute change.\n        this.on(\"change\", function () {\n            this.attributes.str_val = this.get(\"chrom\") + \":\" + this.get(\"start\") + \"-\" + this.get(\"end\");\n        }, this);\n    },\n\n    copy: function copy() {\n        return new GenomeRegion({\n            chrom: this.get(\"chrom\"),\n            start: this.get(\"start\"),\n            end: this.get(\"end\")\n        });\n    },\n\n    length: function length() {\n        return this.get(\"end\") - this.get(\"start\");\n    },\n\n    /** Returns region in canonical form chrom:start-end */\n    toString: function toString() {\n        return this.attributes.str_val;\n    },\n\n    toJSON: function toJSON() {\n        return {\n            chrom: this.get(\"chrom\"),\n            start: this.get(\"start\"),\n            end: this.get(\"end\")\n        };\n    },\n\n    /**\n     * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n     * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n     */\n    compute_overlap: function compute_overlap(a_region) {\n        var first_chrom = this.get(\"chrom\");\n        var second_chrom = a_region.get(\"chrom\");\n        var first_start = this.get(\"start\");\n        var second_start = a_region.get(\"start\");\n        var first_end = this.get(\"end\");\n        var second_end = a_region.get(\"end\");\n        var overlap;\n\n        // Compare chroms.\n        if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n            return GenomeRegion.overlap_results.DIF_CHROMS;\n        }\n\n        // Compare regions.\n        if (first_start < second_start) {\n            if (first_end < second_start) {\n                overlap = GenomeRegion.overlap_results.BEFORE;\n            } else if (first_end < second_end) {\n                overlap = GenomeRegion.overlap_results.OVERLAP_START;\n            } else {\n                // first_end >= second_end\n                overlap = GenomeRegion.overlap_results.CONTAINS;\n            }\n        } else if (first_start > second_start) {\n            if (first_start > second_end) {\n                overlap = GenomeRegion.overlap_results.AFTER;\n            } else if (first_end <= second_end) {\n                overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n            } else {\n                overlap = GenomeRegion.overlap_results.OVERLAP_END;\n            }\n        } else {\n            // first_start === second_start\n            overlap = first_end >= second_end ? GenomeRegion.overlap_results.CONTAINS : GenomeRegion.overlap_results.CONTAINED_BY;\n        }\n\n        return overlap;\n    },\n\n    /**\n     * Trim a region to match genome's constraints.\n     */\n    trim: function trim(genome) {\n        // Assume that all chromosome/contigs start at 0.\n        if (this.attributes.start < 0) {\n            this.attributes.start = 0;\n        }\n\n        // Only try to trim the end if genome is set.\n        if (this.attributes.genome) {\n            var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n            if (this.attributes.end > chrom_len) {\n                this.attributes.end = chrom_len - 1;\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Returns true if this region contains a given region.\n     */\n    contains: function contains(a_region) {\n        return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n    },\n\n    /**\n     * Returns true if regions overlap.\n     */\n    overlaps: function overlaps(a_region) {\n        return _.intersection([this.compute_overlap(a_region)], [GenomeRegion.overlap_results.DIF_CHROMS, GenomeRegion.overlap_results.BEFORE, GenomeRegion.overlap_results.AFTER]).length === 0;\n    }\n}, {\n    overlap_results: {\n        DIF_CHROMS: 1000,\n        BEFORE: 1001,\n        CONTAINS: 1002,\n        OVERLAP_START: 1003,\n        OVERLAP_END: 1004,\n        CONTAINED_BY: 1005,\n        AFTER: 1006\n    }\n});\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: \"\"\n    },\n\n    initialize: function initialize(options) {\n        this.set(\"region\", new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend({\n    defaults: {\n        mode: \"Auto\"\n    },\n\n    initialize: function initialize(options) {\n        this.set(\"dataset\", new _data2.default.Dataset(options.dataset));\n\n        // -- Set up config settings. --\n        var models = [{\n            key: \"name\",\n            default_value: this.get(\"dataset\").get(\"name\")\n        }, { key: \"color\" }, {\n            key: \"min_value\",\n            label: \"Min Value\",\n            type: \"float\",\n            default_value: 0\n        }, {\n            key: \"max_value\",\n            label: \"Max Value\",\n            type: \"float\",\n            default_value: 1\n        }];\n\n        this.set(\"config\", _config2.default.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // -- Set up data manager. --\n        var preloaded_data = this.get(\"preloaded_data\");\n        if (preloaded_data) {\n            preloaded_data = preloaded_data.data;\n        } else {\n            preloaded_data = [];\n        }\n        this.set(\"data_manager\", new GenomeDataManager({\n            dataset: this.get(\"dataset\"),\n            init_data: preloaded_data\n        }));\n    }\n}, {\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\"track_type\", \"dataset\", \"prefs\", \"mode\", \"filters\", \"tool_state\"],\n    to_json_mappers: {\n        prefs: function prefs(p, self) {\n            if (_.size(p) === 0) {\n                p = {\n                    name: self.get(\"config\").get(\"name\").get(\"value\"),\n                    color: self.get(\"config\").get(\"color\").get(\"value\")\n                };\n            }\n            return p;\n        },\n        dataset: function dataset(d) {\n            return {\n                id: d.id,\n                hda_ldda: d.get(\"hda_ldda\")\n            };\n        }\n    }\n});\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        type: \"\"\n    },\n\n    urlRoot: Galaxy.root + \"api/visualizations\",\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function save() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend({\n    defaults: _.extend({}, Visualization.prototype.defaults, {\n        dbkey: \"\",\n        drawables: null,\n        bookmarks: null,\n        viewport: null\n    }),\n\n    initialize: function initialize(options) {\n        // Replace drawables with tracks.\n        this.set(\"drawables\", new BackboneTrackCollection(options.tracks));\n\n        var models = [];\n        this.set(\"config\", _config2.default.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // Clear track and data definitions to avoid storing large objects.\n        this.unset(\"tracks\");\n        this.get(\"drawables\").each(function (d) {\n            d.unset(\"preloaded_data\");\n        });\n    },\n\n    /**\n     * Add a track or array of tracks to the visualization.\n     */\n    add_tracks: function add_tracks(tracks) {\n        this.get(\"drawables\").add(tracks);\n    }\n}, {\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\"view\", \"viewport\", \"bookmarks\"],\n\n    to_json_mappers: {\n        view: function view(dummy, self) {\n            return {\n                obj_type: \"View\",\n                prefs: {\n                    name: self.get(\"title\"),\n                    content_visible: true\n                },\n                drawables: self.get(\"drawables\")\n            };\n        }\n    }\n});\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function initialize(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, \"change_location\");\n        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, \"change_location\");\n\n        // Handle navigate events from view.\n        var self = this;\n        self.view.on(\"navigate\", function (new_loc) {\n            self.navigate(new_loc);\n        });\n    },\n\n    change_location: function change_location(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nexports.default = {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ })\n\n},[148]);\n\n\n// WEBPACK FOOTER //\n// login.bundled.js","/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize(number) {\n    number += \"\"; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, \"$1\" + \",\" + \"$2\");\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = d => \"promise\" in d;\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function(result) {\n            return true;\n        }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function() {\n        var deferred = $.Deferred();\n        var self = this;\n        var ajax_settings = self.get(\"ajax_settings\");\n        var success_fn = self.get(\"success_fn\");\n        var interval = self.get(\"interval\");\n\n        var _go = () => {\n            $.ajax(ajax_settings).success(result => {\n                if (success_fn(result)) {\n                    // Result is good, so resolve.\n                    deferred.resolve(result);\n                } else {\n                    // Result not good, try again.\n                    setTimeout(_go, interval);\n                }\n            });\n        };\n\n        _go();\n        return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = colors => {\n    // Default for colors is white.\n    if (!colors) {\n        colors = \"#ffffff\";\n    }\n\n    // If needed, create list of colors.\n    if (typeof colors === \"string\") {\n        colors = [colors];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt(colors[i].slice(1), 16);\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = (r, g, b) => (r * 299 + g * 587 + b * 114) / 1000;\n\n    // Compute color difference:\n    var difference = (r1, g1, b1, r2, g2, b2) =>\n        Math.max(r1, r2) -\n        Math.min(r1, r2) +\n        (Math.max(g1, g2) - Math.min(g1, g2)) +\n        (Math.max(b1, b2) - Math.min(b1, b2));\n\n    // Create new random color.\n    var new_color;\n\n    var nr;\n    var ng;\n    var nb;\n    var other_color;\n    var or;\n    var og;\n    var ob;\n    var n_brightness;\n    var o_brightness;\n    var diff;\n    var ok = false;\n    var num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round(Math.random() * 0xffffff);\n        nr = (new_color & 0xff0000) >> 16;\n        ng = (new_color & 0x00ff00) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = (other_color & 0xff0000) >> 16;\n            og = (other_color & 0x00ff00) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if (Math.abs(n_brightness - o_brightness) < 40 || diff < 200) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++;\n    } while (!ok && num_tries <= 10);\n\n    // Add 0x1000000 to left pad number with 0s.\n    return `#${(0x1000000 + new_color).toString(16).substr(1, 6)}`;\n};\n\nexport default {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred: ServerStateDeferred,\n    get_random_color: get_random_color\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/trackster/util.js","import * as _ from \"libs/underscore\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 32,\n                    hidden: true\n                },\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                }\n            ],\n            s => s.key === key\n        );\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get(\"value\") === undefined && this.get(\"default_value\") !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend(\n    {\n        model: ConfigSetting,\n\n        /**\n         * Save settings as a dictionary of key-value pairs.\n         * This function is needed for backwards compatibility.\n         */\n        to_key_value_dict: function() {\n            var rval = {};\n            this.each(setting => {\n                rval[setting.get(\"key\")] = setting.get(\"value\");\n            });\n\n            return rval;\n        },\n\n        /**\n         * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n         */\n        get_value: function(key) {\n            var s = this.get(key);\n            if (s) {\n                return s.get(\"value\");\n            }\n\n            return undefined;\n        },\n\n        /**\n         * Set value for a setting.\n         */\n        set_value: function(key, value, options) {\n            var s = this.get(key);\n            if (s) {\n                return s.set_value(value, options);\n            }\n\n            return undefined;\n        },\n\n        /**\n         * Set default value for a setting.\n         */\n        set_default_value: function(key, default_value) {\n            var s = this.get(key);\n            if (s) {\n                return s.set(\"default_value\", default_value);\n            }\n\n            return undefined;\n        }\n    },\n    {\n        /**\n         * Utility function that creates a ConfigSettingsCollection from a set of models\n         * and a saved_values dictionary.\n         */\n        from_models_and_saved_values: function(models, saved_values) {\n            // If there are saved values, copy models and update with saved values.\n            if (saved_values) {\n                models = _.map(models, m => _.extend({}, m, { value: saved_values[m.key] }));\n            }\n\n            return new ConfigSettingCollection(models);\n        }\n    }\n);\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each((param, index) => {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = `param_${index}`;\n\n            var type = param.get(\"type\");\n            var value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append(\n                $(\"<label />\")\n                    .attr(\"for\", id)\n                    .text(`${param.get(\"label\")}:`)\n            );\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append(\n                    $('<input type=\"checkbox\" />')\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .attr(\"checked\", value)\n                );\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append(\n                    $('<input type=\"text\"/>')\n                        .attr(\"id\", id)\n                        .val(value)\n                        .click(function() {\n                            $(this).select();\n                        })\n                );\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), option => {\n                    $(\"<option/>\")\n                        .text(option.label)\n                        .attr(\"value\", option.value)\n                        .appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row);\n\n                var input = $(\"<input />\")\n                    .attr(\"id\", id)\n                    .attr(\"name\", id)\n                    .val(value)\n                    .css(\"float\", \"left\")\n                    .appendTo(container_div)\n                    .click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass(\"in\");\n\n                        // Show input's color picker.\n                        var tip = $(this)\n                            .siblings(\".tooltip\")\n                            .addClass(\"in\");\n                        tip\n                            .css({\n                                // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                // top: $(this).position().top + $(this.height)\n                                left: $(this).position().left + $(this).width() + 5,\n                                top: $(this).position().top - $(tip).height() / 2 + $(this).height() / 2\n                            })\n                            .show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(e => {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind(\"click.color-picker\", () => {\n                            tip.hide();\n                            $(document).unbind(\"click.color-picker\");\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    });\n\n                var // Icon for setting a new random color; behavior set below.\n                new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                    .addClass(\"icon-button arrow-circle\")\n                    .appendTo(container_div)\n                    .attr(\"title\", \"Set new random color\")\n                    .tooltip();\n\n                var // Color picker in tool tip style.\n                tip = $(\"<div class='tooltip right' style='position: absolute;' />\")\n                    .appendTo(container_div)\n                    .hide();\n\n                var // Inner div for padding purposes\n                tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip);\n\n                var tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip);\n\n                var farb_obj = $.farbtastic(tip_inner, {\n                    width: 100,\n                    height: 100,\n                    callback: input,\n                    color: value\n                });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (fixed_farb_obj => {\n                    new_color_icon.click(() => {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append(\n                    $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                );\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this;\n\n        var cancel_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n        };\n\n        var ok_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n            self.update_from_form();\n        };\n\n        var check_enter_esc = e => {\n            if ((e.keyCode || e.which) === 27) {\n                // Escape key\n                cancel_fn();\n            } else if ((e.keyCode || e.which) === 13) {\n                // Enter key\n                ok_fn();\n            }\n        };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each((setting, index) => {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = `param_${index}`;\n                var value = self.$el.find(`#${id}`).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(`#${id}`).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexport default {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/utils/config.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\nimport Utils from \"utils/utils\";\nimport GridModel from \"mvc/grid/grid-model\";\nimport Templates from \"mvc/grid/grid-template\";\nimport PopupMenu from \"mvc/ui/popup-menu\";\n// grid view\nexport default Backbone.View.extend({\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.grid = new GridModel();\n        this.dict_format = grid_config.dict_format;\n        this.title = grid_config.title;\n        var self = this;\n        window.add_tag_to_grid_filter = (tag_name, tag_value) => {\n            // Put tag name and value together.\n            var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? `:${tag_value}` : \"\");\n            var advanced_search = $(\"#advanced-search\").is(\":visible\");\n            if (!advanced_search) {\n                $(\"#standard-search\").slideToggle(\"fast\");\n                $(\"#advanced-search\").slideToggle(\"fast\");\n            }\n            self.add_filter_condition(\"tags\", tag);\n        };\n\n        // set element\n        if (this.dict_format) {\n            this.setElement(\"<div/>\");\n            if (grid_config.url_base && !grid_config.items) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, (v, k) => {\n                    url_data[`f-${k}`] = v;\n                });\n                $.ajax({\n                    url: `${grid_config.url_base}?${$.param(url_data)}`,\n                    success: function(response) {\n                        response.embedded = grid_config.embedded;\n                        response.filters = grid_config.filters || {};\n                        self.init_grid(response);\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement(\"#grid-container\");\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $(\"#center\").css({\n                padding: \"10px\",\n                overflow: \"auto\"\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function(refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray(\"history\", refresh_frames) > -1) {\n                if (window.top.Galaxy && window.top.Galaxy.currHistoryPanel) {\n                    window.top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        this.grid.set(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        if (this.allow_title_display && options.title) {\n            Utils.setWindowTitle(options.title);\n        }\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get(\"url_base\");\n        url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n        this.grid.set(\"url_base\", url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n        this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n        this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find(\"#grid-message\").html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout(() => {\n                    self.$el.find(\"#grid-message\").html(\"\");\n                }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find(\".operation-button\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find(\"input[type=text]\").each(function() {\n            $(this).off();\n            $(this)\n                .click(function() {\n                    $(this).select();\n                })\n                .keyup(function() {\n                    $(this).css(\"font-style\", \"normal\");\n                });\n        });\n\n        // Initialize sort links.\n        this.$el.find(\".sort-link\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_sort_condition($(this).attr(\"sort_key\"));\n                return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find(\".text-filter-form\").each(function() {\n            $(this).off();\n            $(this).submit(function() {\n                var column_key = $(this).attr(\"column_key\");\n                var text_input_obj = $(`#input-${column_key}-filter`);\n                var text_input = text_input_obj.val();\n                text_input_obj.val(\"\");\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".text-filter-val > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                // Remove visible element.\n                $(this)\n                    .parent()\n                    .remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".categorical-filter > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_categorical_filter($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find(\".advanced-search-toggle\").each(function() {\n            $(this).off();\n            $(this).click(() => {\n                self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find(\"#check_all\").off();\n        this.$el.find(\"#check_all\").on(\"click\", () => {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements: function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find(\".grid\").each(function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = () => {\n                check_count.text($(checkboxes).filter(\":checked\").length);\n            };\n\n            $(checkboxes).each(function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find(\".community_rating_star\").length !== 0) this.$el.find(\".community_rating_star\").rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find(\".page-link > a\").each(function() {\n            $(this).click(function() {\n                self.set_page($(this).attr(\"page_num\"));\n                return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find(\".use-target\").each(function() {\n            $(this).click(function(e) {\n                self.execute({\n                    href: $(this).attr(\"href\"),\n                    target: $(this).attr(\"target\")\n                });\n                return false;\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each(options.items, (item, index) => {\n            var button = self.$(`#grid-${index}-popup`).off();\n            var popup = new PopupMenu(button);\n            _.each(options[\"operations\"], operation => {\n                self._add_operation(popup, operation, item);\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function(name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find(`#${name}-filtering-criteria`);\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function(name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function(col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get(\"sort_key\");\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== \"-\") {\n                new_sort = `-${col_key}`;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find(\".sort-arrow\").remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n        var t = $(`<span>${sort_arrow}</span>`).addClass(\"sort-arrow\");\n\n        // Add to header\n        this.$el.find(`#${col_key}-header`).append(t);\n\n        // Update grid.\n        this.grid.set(\"sort_key\", new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function(name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get(\"categorical_filters\")[name];\n\n        var cur_value = this.grid.get(\"filters\")[name];\n        var self = this;\n        this.$el.find(`.${name}-filter`).each(function() {\n            var text = $.trim($(this).text());\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass(\"current-filter\");\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $(`<a href=\"#\">${text}</a>`);\n                t.click(() => {\n                    self.set_categorical_filter(name, filter_value);\n                });\n                $(this).removeClass(\"current-filter\");\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function(new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find(\".page-link\").each(function() {\n            var id = $(this).attr(\"id\");\n\n            var // Id has form 'page-link-<page_num>\n            page_num = parseInt(id.split(\"-\")[2], 10);\n\n            var cur_page = self.grid.get(\"cur_page\");\n            var text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this)\n                    .children()\n                    .text();\n                $(this).empty();\n                $(this).addClass(\"inactive-link\");\n                $(this).text(text);\n            } else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass(\"inactive-link\");\n                var t = $(`<a href=\"#\">${text}</a>`);\n                t.click(() => {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === \"all\") {\n            this.grid.set(\"cur_page\", new_page);\n        } else {\n            this.grid.set(\"cur_page\", parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function(operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {\n            label: operation_name\n        });\n        if (operation && !confirmation_text) {\n            confirmation_text = operation.confirm || \"\";\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find(\"input[name=id]:checked\").each(function() {\n            item_ids.push($(this).val());\n        });\n\n        // execute operation\n        var options = {\n            operation: operation_name,\n            id: item_ids,\n            confirmation_text: confirmation_text\n        };\n        if (operation.target == \"top\" || operation.target == \"center\") {\n            options = _.extend(options, {\n                href: operation.href,\n                target: operation.target\n            });\n        }\n        this.execute(options);\n        return true;\n    },\n\n    check_all_items: function() {\n        var check = this.$(\".grid-row-select-checkbox\");\n        var state = this.$(\"#check_all\").prop(\"checked\");\n        _.each(check, c => {\n            $(c).prop(\"checked\", state);\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function() {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get(\"cur_page\");\n        if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n            this.grid.set(\"cur_page\", 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function(options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf(\"operation\") != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split(\"=\")[1];\n                            operation = operation.replace(/\\+/g, \" \");\n                        } else if (href_parms[index].indexOf(\"id\") != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split(\"=\")[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (\n                confirmation_text &&\n                confirmation_text != \"\" &&\n                confirmation_text != \"None\" &&\n                confirmation_text != \"null\"\n            )\n                if (!confirm(confirmation_text)) return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if (target == \"top\") {\n                window.top.location = `${href}?${$.param(this.grid.get_url_data())}`;\n            } else if (target == \"center\") {\n                $(\"#galaxy_main\").attr(\"src\", `${href}?${$.param(this.grid.get_url_data())}`);\n            } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get(\"async\") || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function(target, href) {\n        // get aysnc status\n        var async = this.grid.get(\"async\");\n        this.grid.set(\"async\", false);\n\n        // get slide status\n        var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n        this.grid.set(\"advanced_search\", advanced_search);\n\n        // get default url\n        if (!href) {\n            href = `${this.grid.get(\"url_base\")}?${$.param(this.grid.get_url_data())}`;\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case \"center\":\n                $(\"#galaxy_main\").attr(\"src\", href);\n                break;\n            case \"top\":\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function() {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find(\".loading-elt-overlay\").show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get(\"url_base\"),\n            data: self.grid.get_url_data(),\n            error: function(response) {\n                alert(\"Grid refresh failed\");\n            },\n            success: function(response_text) {\n                // backup\n                var embedded = self.grid.get(\"embedded\");\n                var insert = self.grid.get(\"insert\");\n                var advanced_search = self.$el.find(\"#advanced-search\").is(\":visible\");\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find(\".loading-elt-overlay\").hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","/**\n  Webhooks\n**/\n\nvar WebhookModel = Backbone.Model.extend({\n    defaults: {\n        activate: false\n    }\n});\n\nvar Webhooks = Backbone.Collection.extend({\n    model: WebhookModel\n});\n\nvar WebhookView = Backbone.View.extend({\n    el: \"#webhook-view\",\n\n    initialize: function(options) {\n        var me = this;\n        var toolId = options.toolId || \"\";\n        var toolVersion = options.toolVersion || \"\";\n\n        this.$el.attr(\"tool_id\", toolId);\n        this.$el.attr(\"tool_version\", toolVersion);\n\n        this.model = new WebhookModel();\n        this.model.urlRoot = options.urlRoot;\n        this.model.fetch({\n            success: function() {\n                me.render();\n            }\n        });\n    },\n\n    render: function() {\n        var webhook = this.model.toJSON();\n\n        this.$el.html(`<div id=\"${webhook.name}\"></div>`);\n        if (webhook.styles)\n            $(\"<style/>\", { type: \"text/css\" })\n                .text(webhook.styles)\n                .appendTo(\"head\");\n        if (webhook.script)\n            $(\"<script/>\", { type: \"text/javascript\" })\n                .text(webhook.script)\n                .appendTo(\"head\");\n\n        return this;\n    }\n});\n\nvar add = options => {\n    var webhooks = new Webhooks();\n\n    webhooks.url = Galaxy.root + options.url;\n    webhooks.fetch({\n        async: options.async ? options.async : true,\n        success: options.callback\n    });\n};\n\nexport default {\n    Webhooks: Webhooks,\n    WebhookView: WebhookView,\n    add: add\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/webhooks.js","import jQuery from \"jquery\";\nvar $ = jQuery;\nimport GalaxyApp from \"galaxy\";\nimport _l from \"utils/localization\";\nimport Page from \"layout/page\";\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new GalaxyApp.GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"login app\");\n    var redirect = encodeURI(options.redirect);\n\n    // TODO: remove iframe for user login (at least) and render login page from here\n    // then remove this redirect\n    if (!options.show_welcome_with_login) {\n        var params = jQuery.param({ use_panels: \"True\", redirect: redirect });\n        window.location.href = `${Galaxy.root}user/login?${params}`;\n        return;\n    }\n\n    var LoginPage = Backbone.View.extend({\n        initialize: function(page) {\n            this.page = page;\n            this.model = new Backbone.Model({ title: _l(\"Login required\") });\n            this.setElement(this._template());\n        },\n        render: function() {\n            this.page.$(\"#galaxy_main\").prop(\"src\", options.welcome_url);\n        },\n        _template: function() {\n            var login_url = `${options.root}user/login?${$.param({\n                redirect: redirect\n            })}`;\n            return `<iframe src=\"${login_url}\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>`;\n        }\n    });\n\n    $(() => {\n        Galaxy.page = new Page.View(\n            _.extend(options, {\n                Right: LoginPage\n            })\n        );\n    });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/login.js","/** Frame view */\nvar FrameView = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement($(\"<div/>\").addClass(\"corner frame\"));\n        this.$el\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-header corner\")\n                    .append($(\"<div/>\").addClass(\"f-title\"))\n                    .append(\n                        $(\"<div/>\")\n                            .addClass(\"f-icon f-close fa fa-close\")\n                            .tooltip({\n                                title: \"Close\",\n                                placement: \"bottom\"\n                            })\n                    )\n            )\n            .append($(\"<div/>\").addClass(\"f-content\"))\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-resize f-icon corner fa fa-expand\")\n                    .tooltip({ title: \"Resize\" })\n            )\n            .append($(\"<div/>\").addClass(\"f-cover\"));\n        this.$header = this.$(\".f-header\");\n        this.$title = this.$(\".f-title\");\n        this.$content = this.$(\".f-content\");\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$title.html(options.title || \"\");\n        this.$header.find(\".f-icon-left\").remove();\n        _.each(options.menu, option => {\n            var $option = $(\"<div/>\")\n                .addClass(\"f-icon-left\")\n                .addClass(option.icon);\n            if (_.isFunction(option.disabled) && option.disabled()) {\n                $option.attr(\"disabled\", true);\n            } else {\n                $option\n                    .on(\"click\", () => {\n                        option.onclick(self);\n                    })\n                    .tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    });\n            }\n            self.$header.append($option);\n        });\n        if (options.url) {\n            this.$content.html(\n                $(\"<iframe/>\")\n                    .addClass(\"f-iframe\")\n                    .attr(\"scrolling\", \"auto\")\n                    .attr(\"src\", `${options.url + (options.url.indexOf(\"?\") === -1 ? \"?\" : \"&\")}widget=True`)\n            );\n        } else if (options.content) {\n            _.isFunction(options.content) ? options.content(self.$content) : self.$content.html(options.content);\n        }\n    }\n});\n\n/** Scratchbook viewer */\nvar View = Backbone.View.extend({\n    defaultOptions: {\n        frame: {\n            // default frame size in cells\n            cols: 6,\n            rows: 3\n        },\n        rows: 1000, // maximum number of rows\n        cell: 130, // cell size in px\n        margin: 5, // margin between frames\n        scroll: 5, // scroll speed\n        top_min: 40, // top margin\n        frame_max: 9, // maximum number of frames\n        visible: true // initial visibility\n    },\n\n    cols: 0, // number of columns\n    top: 0, // scroll/element top\n    top_max: 0, // viewport scrolling state\n    frame_z: 0, // frame z-index\n    frame_counter: 0, // frame counter\n    frame_uid: 0, // unique frame id counter\n    frame_list: {}, // list of all frames\n    frame_shadow: null, // frame shown as placeholder when moving active frames\n    visible: false, // flag indicating if scratchbook viewer is visible or not\n    event: {}, // dictionary keeping track of current event\n\n    initialize: function(options) {\n        var self = this;\n        this.options = _.defaults(options || {}, this.defaultOptions);\n        this.visible = this.options.visible;\n        this.top = this.top_max = this.options.top_min;\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"galaxy-frame\")\n                .append($(\"<div/>\").addClass(\"frame-background\"))\n                .append($(\"<div/>\").addClass(\"frame-menu frame-scroll-up fa fa-chevron-up fa-2x\"))\n                .append($(\"<div/>\").addClass(\"frame-menu frame-scroll-down fa fa-chevron-down fa-2x\"))\n        );\n\n        // initialize shadow to guiding drag/resize events\n        this.frame_shadow = new Backbone.View({\n            el: $(\"<div/>\").addClass(\"corner frame-shadow\")\n        });\n        this.$el.append(this.frame_shadow.$el);\n        this._frameInit(this.frame_shadow, \"#frame-shadow\");\n        this._frameResize(this.frame_shadow, { width: 0, height: 0 });\n        this.frame_list[\"#frame-shadow\"] = this.frame_shadow;\n\n        // initialize panel\n        this.visible ? this.show() : this.hide();\n        this._panelRefresh();\n        $(window).resize(() => {\n            self.visible && self._panelRefresh();\n        });\n    },\n\n    /** Render */\n    render: function() {\n        this.$(\".frame-scroll-up\")[(this.top != this.options.top_min && \"show\") || \"hide\"]();\n        this.$(\".frame-scroll-down\")[(this.top != this.top_max && \"show\") || \"hide\"]();\n    },\n\n    /**\n     * Adds and displays a new frame.\n     *\n     * options:\n     *  url     : loaded into an iframe\n     *  content : content is treated as a function or raw HTML, function is passed a single\n     *              argument that is the frame's content DOM element\n     */\n    add: function(options) {\n        if (this.frame_counter >= this.options.frame_max) {\n            Galaxy.modal.show({\n                title: \"Warning\",\n                body: `You have reached the maximum number of allowed frames (${this.options.frame_max}).`,\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        } else {\n            var frame_id = `#frame-${this.frame_uid++}`;\n            if ($(frame_id).length !== 0) {\n                Galaxy.modal.show({\n                    title: \"Error\",\n                    body: \"This frame already exists. This page might contain multiple frame managers.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            } else {\n                // initialize new frame elements\n                this.top = this.options.top_min;\n                var frame = new FrameView(options);\n                this.$el.append(frame.$el);\n\n                // set dimensions\n                options.width = this._toPixelCoord(\"width\", this.options.frame.cols);\n                options.height = this._toPixelCoord(\"height\", this.options.frame.rows);\n\n                // set default z-index and add to ui and frame list\n                this.frame_z = parseInt(frame.$el.css(\"z-index\"));\n                this.frame_list[frame_id] = frame;\n                this.frame_counter++;\n                this._frameInit(frame, frame_id);\n                this._frameResize(frame, {\n                    width: options.width,\n                    height: options.height\n                });\n                this._frameInsert(frame, { top: 0, left: 0 }, true);\n                !this.visible && this.show();\n                this.trigger(\"add\");\n            }\n        }\n    },\n\n    /** Remove a frame */\n    del: function(frame) {\n        var self = this;\n        var $frame = frame.$el;\n        $frame.fadeOut(\"fast\", () => {\n            $frame.remove();\n            delete self.frame_list[frame.id];\n            self.frame_counter--;\n            self._panelRefresh(true);\n            self._panelAnimationComplete();\n            self.trigger(\"remove\");\n        });\n    },\n\n    /** Show panel */\n    show: function() {\n        this.visible = true;\n        this.$el.fadeIn(\"fast\");\n        this.trigger(\"show\");\n    },\n\n    /** Hide panel */\n    hide: function() {\n        if (!this.event.type) {\n            this.visible = false;\n            this.$el.fadeOut(\"fast\", function() {\n                $(this).hide();\n            });\n            this.trigger(\"hide\");\n        }\n    },\n\n    /** Returns the number of frames */\n    length: function() {\n        return this.frame_counter;\n    },\n\n    /*\n        EVENT HANDLING\n    */\n    events: {\n        // global frame events\n        mousemove: \"_eventFrameMouseMove\",\n        mouseup: \"_eventFrameMouseUp\",\n        mouseleave: \"_eventFrameMouseUp\",\n        mousewheel: \"_eventPanelScroll\",\n        DOMMouseScroll: \"_eventPanelScroll\",\n\n        // events fixed to elements\n        \"mousedown .frame\": \"_eventFrameMouseDown\",\n        \"mousedown .frame-background\": \"_eventHide\",\n        \"mousedown .frame-scroll-up\": \"_eventPanelScroll_up\",\n        \"mousedown .frame-scroll-down\": \"_eventPanelScroll_down\",\n        \"mousedown .f-close\": \"_eventFrameClose\"\n    },\n\n    /** Start drag/resize event */\n    _eventFrameMouseDown: function(e) {\n        $(\".tooltip\").hide();\n        if (!this.event.type) {\n            if ($(e.target).hasClass(\"f-header\") || $(e.target).hasClass(\"f-title\")) {\n                this.event.type = \"drag\";\n            }\n            if ($(e.target).hasClass(\"f-resize\")) {\n                this.event.type = \"resize\";\n            }\n            if (this.event.type) {\n                e.preventDefault();\n                this.event.target = this._frameIdentify(e.target);\n                this.event.xy = {\n                    x: e.originalEvent.pageX,\n                    y: e.originalEvent.pageY\n                };\n                this._frameDragStart(this.event.target);\n            }\n        }\n    },\n\n    /** Processes drag/resize events */\n    _eventFrameMouseMove: function(e) {\n        if (this.event.type) {\n            // get mouse motion and delta\n            var event_xy_new = {\n                x: e.originalEvent.pageX,\n                y: e.originalEvent.pageY\n            };\n            var event_xy_delta = {\n                x: event_xy_new.x - this.event.xy.x,\n                y: event_xy_new.y - this.event.xy.y\n            };\n            this.event.xy = event_xy_new;\n\n            // get current screen position and size of frame\n            var p = this._frameScreen(this.event.target);\n\n            // drag/resize event\n            if (this.event.type == \"resize\") {\n                p.width += event_xy_delta.x;\n                p.height += event_xy_delta.y;\n                var min_dim = this.options.cell - this.options.margin - 1;\n                p.width = Math.max(p.width, min_dim);\n                p.height = Math.max(p.height, min_dim);\n                this._frameResize(this.event.target, p);\n                p.width = this._toGridCoord(\"width\", p.width) + 1;\n                p.height = this._toGridCoord(\"height\", p.height) + 1;\n                p.width = this._toPixelCoord(\"width\", p.width);\n                p.height = this._toPixelCoord(\"height\", p.height);\n                this._frameResize(this.frame_shadow, p);\n                this._frameInsert(this.frame_shadow, {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                });\n            } else if (this.event.type == \"drag\") {\n                p.left += event_xy_delta.x;\n                p.top += event_xy_delta.y;\n                this._frameOffset(this.event.target, p);\n                var l = {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                };\n                l.left !== 0 && l.left++;\n                this._frameInsert(this.frame_shadow, l);\n            }\n        }\n    },\n\n    /** Stop drag/resize events */\n    _eventFrameMouseUp: function(e) {\n        if (this.event.type) {\n            this._frameDragStop(this.event.target);\n            this.event.type = null;\n        }\n    },\n\n    /** Destroy a frame */\n    _eventFrameClose: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this.del(this._frameIdentify(e.target));\n        }\n    },\n\n    /** Hide all frames */\n    _eventHide: function(e) {\n        !this.event.type && this.hide();\n    },\n\n    /** Fired when scrolling occurs on panel */\n    _eventPanelScroll: function(e) {\n        if (!this.event.type && this.visible) {\n            // Stop propagation if scrolling is happening inside a frame.\n            // TODO: could propagate scrolling if at top/bottom of frame.\n            var frames = $(e.srcElement).parents(\".frame\");\n            if (frames.length !== 0) {\n                e.stopPropagation();\n            } else {\n                e.preventDefault();\n                this._panelScroll(e.originalEvent.detail ? e.originalEvent.detail : e.originalEvent.wheelDelta / -3);\n            }\n        }\n    },\n\n    /** Handle scroll up event */\n    _eventPanelScroll_up: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(-this.options.scroll);\n        }\n    },\n\n    /** Handle scroll down */\n    _eventPanelScroll_down: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(this.options.scroll);\n        }\n    },\n\n    /*\n        FRAME EVENTS SUPPORT\n    */\n\n    /** Identify the target frame */\n    _frameIdentify: function(target) {\n        return this.frame_list[\n            `#${$(target)\n                .closest(\".frame\")\n                .attr(\"id\")}`\n        ];\n    },\n\n    /** Provides drag support */\n    _frameDragStart: function(frame) {\n        this._frameFocus(frame, true);\n        var p = this._frameScreen(frame);\n        this._frameResize(this.frame_shadow, p);\n        this._frameGrid(this.frame_shadow, frame.grid_location);\n        frame.grid_location = null;\n        this.frame_shadow.$el.show();\n        $(\".f-cover\").show();\n    },\n\n    /** Removes drag support */\n    _frameDragStop: function(frame) {\n        this._frameFocus(frame, false);\n        var p = this._frameScreen(this.frame_shadow);\n        this._frameResize(frame, p);\n        this._frameGrid(frame, this.frame_shadow.grid_location, true);\n        this.frame_shadow.grid_location = null;\n        this.frame_shadow.$el.hide();\n        $(\".f-cover\").hide();\n        this._panelAnimationComplete();\n    },\n\n    /*\n        GRID/PIXEL CONVERTER\n    */\n\n    /** Converts a pixel to a grid dimension */\n    _toGridCoord: function(type, px) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        type == \"top\" && (px -= this.top);\n        return parseInt((px + sign * this.options.margin) / this.options.cell, 10);\n    },\n\n    /** Converts a grid to a pixels dimension */\n    _toPixelCoord: function(type, g) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        var px = g * this.options.cell - sign * this.options.margin;\n        type == \"top\" && (px += this.top);\n        return px;\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toGrid: function(px) {\n        return {\n            top: this._toGridCoord(\"top\", px.top),\n            left: this._toGridCoord(\"left\", px.left),\n            width: this._toGridCoord(\"width\", px.width),\n            height: this._toGridCoord(\"height\", px.height)\n        };\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toPixel: function(g) {\n        return {\n            top: this._toPixelCoord(\"top\", g.top),\n            left: this._toPixelCoord(\"left\", g.left),\n            width: this._toPixelCoord(\"width\", g.width),\n            height: this._toPixelCoord(\"height\", g.height)\n        };\n    },\n\n    /* \n        COLLISION DETECTION\n    */\n\n    /** Check collisions for a grid coordinate set */\n    _isCollision: function(g) {\n        function is_collision_pair(a, b) {\n            return !(\n                a.left > b.left + b.width - 1 ||\n                a.left + a.width - 1 < b.left ||\n                a.top > b.top + b.height - 1 ||\n                a.top + a.height - 1 < b.top\n            );\n        }\n        for (var i in this.frame_list) {\n            var frame = this.frame_list[i];\n            if (frame.grid_location !== null && is_collision_pair(g, frame.grid_location)) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** Return location/grid rank */\n    _locationRank: function(loc) {\n        return loc.top * this.cols + loc.left;\n    },\n\n    /*\n        PANEL/WINDOW FUNCTIONS\n    */\n\n    /** Refresh panel */\n    _panelRefresh: function(animate) {\n        this.cols = parseInt($(window).width() / this.options.cell, 10) + 1;\n        this._frameInsert(null, null, animate);\n    },\n\n    /** Complete panel animation / frames not moving */\n    _panelAnimationComplete: function() {\n        var self = this;\n        $(\".frame\")\n            .promise()\n            .done(() => {\n                self._panelScroll(0, true);\n            });\n    },\n\n    /** Scroll panel */\n    _panelScroll: function(delta, animate) {\n        var top_new = this.top - this.options.scroll * delta;\n        top_new = Math.max(top_new, this.top_max);\n        top_new = Math.min(top_new, this.options.top_min);\n        if (this.top != top_new) {\n            for (var i in this.frame_list) {\n                var frame = this.frame_list[i];\n                if (frame.grid_location !== null) {\n                    var screen_location = {\n                        top: frame.screen_location.top - (this.top - top_new),\n                        left: frame.screen_location.left\n                    };\n                    this._frameOffset(frame, screen_location, animate);\n                }\n            }\n            this.top = top_new;\n        }\n        this.render();\n    },\n\n    /*\n        FRAME FUNCTIONS\n    */\n\n    /** Initialize a new frame */\n    _frameInit: function(frame, id) {\n        frame.id = id;\n        frame.screen_location = {};\n        frame.grid_location = {};\n        frame.grid_rank = null;\n        frame.$el.attr(\"id\", id.substring(1));\n    },\n\n    /** Insert frame at given location */\n    _frameInsert: function(frame, new_loc, animate) {\n        var self = this;\n        var place_list = [];\n        if (frame) {\n            frame.grid_location = null;\n            place_list.push([frame, this._locationRank(new_loc)]);\n        }\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                f.grid_location = null;\n                place_list.push([f, f.grid_rank]);\n            }\n        });\n        place_list.sort((a, b) => (a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0));\n        _.each(place_list, place => {\n            self._framePlace(place[0], animate);\n        });\n        this.top_max = 0;\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                self.top_max = Math.max(self.top_max, f.grid_location.top + f.grid_location.height);\n            }\n        });\n        this.top_max = $(window).height() - this.top_max * this.options.cell - 2 * this.options.margin;\n        this.top_max = Math.min(this.top_max, this.options.top_min);\n        this.render();\n    },\n\n    /** Naive frame placement */\n    _framePlace: function(frame, animate) {\n        frame.grid_location = null;\n        var g = this._toGrid(this._frameScreen(frame));\n        var done = false;\n        for (var i = 0; i < this.options.rows; i++) {\n            for (var j = 0; j < Math.max(1, this.cols - g.width); j++) {\n                g.top = i;\n                g.left = j;\n                if (!this._isCollision(g)) {\n                    done = true;\n                    break;\n                }\n            }\n            if (done) {\n                break;\n            }\n        }\n        if (done) {\n            this._frameGrid(frame, g, animate);\n        } else {\n            console.log(\"Grid dimensions exceeded.\");\n        }\n    },\n\n    /** Handle frame focussing */\n    _frameFocus: function(frame, has_focus) {\n        frame.$el.css(\"z-index\", this.frame_z + (has_focus ? 1 : 0));\n    },\n\n    /** New left/top position frame */\n    _frameOffset: function(frame, p, animate) {\n        frame.screen_location.left = p.left;\n        frame.screen_location.top = p.top;\n        if (animate) {\n            this._frameFocus(frame, true);\n            var self = this;\n            frame.$el.animate({ top: p.top, left: p.left }, \"fast\", () => {\n                self._frameFocus(frame, false);\n            });\n        } else {\n            frame.$el.css({ top: p.top, left: p.left });\n        }\n    },\n\n    /** Resize frame */\n    _frameResize: function(frame, p) {\n        frame.$el.css({ width: p.width, height: p.height });\n        frame.screen_location.width = p.width;\n        frame.screen_location.height = p.height;\n    },\n\n    /** Push frame to new grid location */\n    _frameGrid: function(frame, l, animate) {\n        frame.grid_location = l;\n        this._frameOffset(frame, this._toPixel(l), animate);\n        frame.grid_rank = this._locationRank(l);\n    },\n\n    /** Get frame dimensions */\n    _frameScreen: function(frame) {\n        var p = frame.screen_location;\n        return {\n            top: p.top,\n            left: p.left,\n            width: p.width,\n            height: p.height\n        };\n    }\n});\n\nexport default {\n    View: View\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-frames.js","//=============================================================================\n/**\n * backbone model for icon buttons\n */\nvar IconButton = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        icon_class: \"\",\n        on_click: null,\n        menu_options: null,\n        is_menu_button: true,\n        id: null,\n        href: null,\n        target: null,\n        enabled: true,\n        visible: true,\n        tooltip_config: {}\n    }\n});\n\n/**\n *  backbone view for icon buttons\n */\nvar IconButtonView = Backbone.View.extend({\n    initialize: function() {\n        // better rendering this way\n        this.model.attributes.tooltip_config = { placement: \"bottom\" };\n        this.model.bind(\"change\", this.render, this);\n    },\n\n    render: function() {\n        // hide tooltip\n        this.$el.tooltip(\"hide\");\n\n        var new_elem = this.template(this.model.toJSON());\n        // configure tooltip\n        new_elem.tooltip(this.model.get(\"tooltip_config\"));\n        this.$el.replaceWith(new_elem);\n        this.setElement(new_elem);\n        return this;\n    },\n\n    events: {\n        click: \"click\"\n    },\n\n    click: function(event) {\n        // if on_click pass to that function\n        if (_.isFunction(this.model.get(\"on_click\"))) {\n            this.model.get(\"on_click\")(event);\n            return false;\n        }\n        // otherwise, bubble up ( to href or whatever )\n        return true;\n    },\n\n    // generate html element\n    template: function(options) {\n        var buffer = `title=\"${options.title}\" class=\"icon-button`;\n\n        if (options.is_menu_button) {\n            buffer += \" menu-button\";\n        }\n\n        buffer += ` ${options.icon_class}`;\n\n        if (!options.enabled) {\n            buffer += \"_disabled\";\n        }\n\n        // close class tag\n        buffer += '\"';\n\n        if (options.id) {\n            buffer += ` id=\"${options.id}\"`;\n        }\n\n        buffer += ` href=\"${options.href}\"`;\n        // add target for href\n        if (options.target) {\n            buffer += ` target=\"${options.target}\"`;\n        }\n        // set visibility\n        if (!options.visible) {\n            buffer += ' style=\"display: none;\"';\n        }\n\n        // enabled/disabled\n        if (options.enabled) {\n            buffer = `<a ${buffer}/>`;\n        } else {\n            buffer = `<span ${buffer}/>`;\n        }\n\n        // return element\n        return $(buffer);\n    }\n});\n\n// define collection\nvar IconButtonCollection = Backbone.Collection.extend({\n    model: IconButton\n});\n\n/**\n * menu with multiple icon buttons\n * views are not needed nor used for individual buttons\n */\nvar IconButtonMenuView = Backbone.View.extend({\n    tagName: \"div\",\n\n    initialize: function() {\n        this.render();\n    },\n\n    render: function() {\n        // initialize icon buttons\n        var self = this;\n        this.collection.each(button => {\n            // create and add icon button to menu\n            var elt = $(\"<a/>\")\n                .attr(\"href\", \"javascript:void(0)\")\n                .attr(\"title\", button.attributes.title)\n                .addClass(\"icon-button menu-button\")\n                .addClass(button.attributes.icon_class)\n                .appendTo(self.$el)\n                .click(button.attributes.on_click);\n\n            // configure tooltip\n            if (button.attributes.tooltip_config) {\n                elt.tooltip(button.attributes.tooltip_config);\n            }\n\n            // add popup menu to icon\n            var menu_options = button.get(\"options\");\n            if (menu_options) {\n                make_popupmenu(elt, menu_options);\n            }\n        });\n\n        // return\n        return this;\n    }\n});\n\n/**\n * Returns an IconButtonMenuView for the provided configuration.\n * Configuration is a list of dictionaries where each dictionary\n * defines an icon button. Each dictionary must have the following\n * elements: icon_class, title, and on_click.\n */\nvar create_icon_buttons_menu = (config, global_config) => {\n    // initialize global configuration\n    if (!global_config) global_config = {};\n\n    // create and initialize menu\n    var buttons = new IconButtonCollection(\n        _.map(config, button_config => new IconButton(_.extend(button_config, global_config)))\n    );\n\n    // return menu\n    return new IconButtonMenuView({ collection: buttons });\n};\n\n//=============================================================================\nexport default {\n    IconButton: IconButton,\n    IconButtonView: IconButtonView,\n    IconButtonCollection: IconButtonCollection,\n    IconButtonMenuView: IconButtonMenuView,\n    create_icon_buttons_menu: create_icon_buttons_menu\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/icon-button.js","//==============================================================================\nvar LOGGING_FNS = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"];\n/** adds logging functions to an obj.prototype (or obj directly) adding a namespace for filtering\n *  @param {Object} obj\n *  @param {String} namespace\n */\nfunction addLogging(obj, namespace) {\n    var addTo = obj.prototype !== undefined ? obj.prototype : obj;\n    if (namespace !== undefined) {\n        addTo._logNamespace = namespace;\n    }\n    //yagni?: without this, may not capture Galaxy.config.debug and add Galaxy.logger properly\n    // if( window.Galaxy && window.Galaxy.config && window.Galaxy.config.debug ){\n    //     addTo.logger = window.Galaxy.logger;\n    // }\n\n    // give the object each\n    LOGGING_FNS.forEach(logFn => {\n        addTo[logFn] = function() {\n            if (!this.logger) {\n                return undefined;\n            }\n            if (this.logger.emit) {\n                return this.logger.emit(logFn, this._logNamespace, arguments);\n            }\n            if (this.logger[logFn]) {\n                //TODO:! there has to be a way to get the lineno/file into this\n                // http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n                // http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n                return this.logger[logFn].apply(this.logger, arguments);\n            }\n            return undefined;\n        };\n    });\n    return obj;\n}\n\n//==============================================================================\nexport default addLogging;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/utils/add-logging.js","// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n    //TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function($button, options) {\n        // default settings\n        this.$button = $button;\n        if (!this.$button.length) {\n            this.$button = $(\"<div/>\");\n        }\n        this.options = options || [];\n        this.$button.data(\"popupmenu\", this);\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click(event => {\n            // if there's already a menu open, remove it\n            $(\".popmenu-wrapper\").remove();\n            menu._renderAndShow(event);\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function(clickEvent) {\n        this.render();\n        this.$el\n            .appendTo(\"body\")\n            .css(this._getShownPosition(clickEvent))\n            .show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function() {\n        // render the menu body absolute and hidden, fill with template\n        this.$el\n            .addClass(\"popmenu-wrapper\")\n            .hide()\n            .css({ position: \"absolute\" })\n            .html(this.template(this.$button.attr(\"id\"), this.options));\n\n        // set up behavior on each link/anchor elem\n        if (this.options.length) {\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find(\"li\").each(function(i, li) {\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if (option.func) {\n                    $(this)\n                        .children(\"a.popupmenu-option\")\n                        .click(event => {\n                            option.func.call(menu, event, option);\n                            // We must preventDefault otherwise clicking \"cancel\"\n                            // on a purge or something still navigates and causes\n                            // the action.\n                            event.preventDefault();\n                            // bubble up so that an option click will call the close behavior\n                        });\n                }\n            });\n        }\n        return this;\n    },\n\n    template: function(id, options) {\n        return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), \"</ul>\"].join(\"\");\n    },\n\n    _templateOptions: function(options) {\n        if (!options.length) {\n            return \"<li>(no options)</li>\";\n        }\n        return _.map(options, option => {\n            if (option.divider) {\n                return '<li class=\"divider\"></li>';\n            } else if (option.header) {\n                return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, \"</a></li>\"].join(\"\");\n            }\n            var href = option.href || \"javascript:void(0);\";\n            var target = option.target ? ` target=\"${option.target}\"` : \"\";\n\n            var check = option.checked ? '<span class=\"fa fa-check\"></span>' : \"\";\n\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"',\n                href,\n                '\"',\n                target,\n                \">\",\n                check,\n                option.html,\n                \"</a></li>\"\n            ].join(\"\");\n        }).join(\"\");\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition: function(clickEvent) {\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n        x = Math.max(x, $(document).scrollLeft() + 5);\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function() {\n        var menu = this;\n        //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup(event) {\n            $(document).off(\"click.close_popup\");\n            if (window && window.parent !== window) {\n                try {\n                    $(window.parent.document).off(\"click.close_popup\");\n                } catch (err) {}\n            } else {\n                try {\n                    $(\"iframe#galaxy_main\")\n                        .contents()\n                        .off(\"click.close_popup\");\n                } catch (err) {}\n            }\n            menu.remove();\n        }\n\n        $(\"html\").one(\"click.close_popup\", closePopup);\n        if (window && window.parent !== window) {\n            try {\n                $(window.parent.document)\n                    .find(\"html\")\n                    .one(\"click.close_popup\", closePopup);\n            } catch (err) {}\n        } else {\n            try {\n                $(\"iframe#galaxy_main\")\n                    .contents()\n                    .one(\"click.close_popup\", closePopup);\n            } catch (err) {}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function(item, index) {\n        // append to end if no index\n        index = index >= 0 ? index : this.options.length;\n        this.options.splice(index, 0, item);\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function(index) {\n        if (index >= 0) {\n            this.options.splice(index, 1);\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function(html) {\n        for (var i = 0; i < this.options.length; i++) {\n            if (_.has(this.options[i], \"html\") && this.options[i].html === html) {\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function(html) {\n        return this.options[this.findIndexByHtml(html)];\n    },\n\n    // string representation\n    toString: function() {\n        return \"PopupMenu\";\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create($button, options) {\n    return new PopupMenu($button, options);\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = (button_element, initial_options) => {\n    var convertedOptions = [];\n    _.each(initial_options, (optionVal, optionKey) => {\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if (optionVal === null) {\n            // !optionVal? (null only?)\n            newOption.header = true;\n\n            // keys with function values indicate: a menu option\n        } else if (jQuery.type(optionVal) === \"function\") {\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push(newOption);\n    });\n    return new PopupMenu($(button_element), convertedOptions);\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = ($parent, selector) => {\n    $parent = $($parent);\n    selector = selector || \"a\";\n    var options = [];\n    $parent.find(selector).each((elem, i) => {\n        var option = {};\n        var $link = $(elem);\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if ($link.attr(\"href\")) {\n            var linkHref = $link.attr(\"href\");\n            var linkTarget = $link.attr(\"target\");\n            var confirmText = $link.attr(\"confirm\");\n\n            option.func = () => {\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if (confirmText && !confirm(confirmText)) {\n                    return;\n                }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch (linkTarget) {\n                    // relocate the center panel\n                    case \"_parent\":\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case \"_top\":\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push(option);\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = ($buttonElement, $menuElement, menuElementLinkSelector) => {\n    $buttonElement = $($buttonElement);\n    $menuElement = $($menuElement);\n    var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu($buttonElement, options);\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = (parent, menuSelector, buttonSelectorBuildFn) => {\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || \"div[popupmenu]\";\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || (($menuElement, parent) => `#${$menuElement.attr(\"popupmenu\")}`);\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $(parent)\n        .find(menuSelector)\n        .each(function() {\n            var $menuElement = $(this);\n\n            var $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n\n            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n            $buttonElement.addClass(\"popup\");\n        });\n    return popupMenusCreated;\n};\n\n// =============================================================================\nexport default PopupMenu;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/**\n *  Renders tabs e.g. used in the charts editor, behaves similar to repeat and section rendering\n */\nimport Utils from \"utils/utils\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.collection = new Backbone.Collection();\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                onchange: null,\n                visible: true\n            }).set(options);\n        this.setElement($(this._template()));\n        this.$nav = this.$(\".tab-navigation\");\n        this.$content = this.$(\".tab-content\");\n        this.$el.on(\"click\", () => {\n            $(\".tooltip\").hide();\n        });\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.listenTo(this.collection, \"add\", this._add, this);\n        this.listenTo(this.collection, \"remove\", this._remove, this);\n        this.listenTo(this.collection, \"change\", this._change, this);\n        this.listenTo(this.collection, \"reset\", this._reset, this);\n        this.listenTo(this.collection, \"add remove reset\", this.render, this);\n    },\n\n    render: function() {\n        var id = this.model.get(\"current\");\n        id = this.$(`#${id}`).length > 0 ? id : this.first();\n        if (id) {\n            this.$nav.children().removeClass(\"active\");\n            this.$content.children().removeClass(\"active\");\n            this.$(`#tab-${id}`).addClass(\"active\");\n            this.$(`#${id}`).addClass(\"active\");\n        }\n        this.$el[this.model.get(\"visible\") ? \"fadeIn\" : \"fadeOut\"](\"fast\");\n        this.$nav[this.size() > 1 ? \"show\" : \"hide\"]();\n    },\n\n    /** Returns tab id for currently shown tab */\n    current: function() {\n        return this.model.get(\"current\");\n    },\n\n    /** Show tab view and highlight a tab by id */\n    show: function(id) {\n        if (id) {\n            this.model.set({ current: id, visible: true });\n            this.model.get(\"onchange\") && this.model.get(\"onchange\")(id);\n        }\n    },\n\n    /** Hide tab view */\n    hide: function() {\n        this.model.set(\"visible\", false);\n    },\n\n    /** Returns first tab */\n    first: function() {\n        var model = this.collection.first();\n        return model && model.id;\n    },\n\n    /** Returns current number of tabs */\n    size: function() {\n        return this.collection.length;\n    },\n\n    /** Adds a new tab */\n    add: function(options) {\n        this.collection.add(options);\n    },\n\n    /** Delete tab */\n    del: function(id) {\n        this.collection.remove(id);\n    },\n\n    /** Delete all tabs */\n    delAll: function() {\n        this.collection.reset();\n    },\n\n    /** Show tab */\n    showTab: function(id) {\n        this.collection.get(id).set(\"hidden\", false);\n    },\n\n    /** Hide tab */\n    hideTab: function(id) {\n        this.collection.get(id).set(\"hidden\", true);\n    },\n\n    /** Adds a new tab */\n    _add: function(tab_model) {\n        var self = this;\n        var options = tab_model.attributes;\n        this.$content.append(\n            $(\"<div/>\")\n                .attr(\"id\", options.id)\n                .addClass(\"tab-pane\")\n                .append(options.$el)\n        );\n        this.$nav.append(\n            $(this._template_tab(options))\n                .show()\n                .tooltip({\n                    title: options.tooltip,\n                    placement: \"bottom\",\n                    container: self.$el\n                })\n                .on(\"click\", e => {\n                    e.preventDefault();\n                    self.show(options.id);\n                })\n        );\n        if (this.size() == 1) {\n            this.show(options.id);\n        }\n    },\n\n    /** Delete tab */\n    _remove: function(tab_model) {\n        this.$(`#tab-${tab_model.id}`).remove();\n        this.$(`#${tab_model.id}`).remove();\n    },\n\n    /** Reset collection */\n    _reset: function() {\n        this.$nav.empty();\n        this.$content.empty();\n    },\n\n    /** Change tab */\n    _change: function(tab_model) {\n        this.$(`#tab-${tab_model.id}`)[tab_model.get(\"hidden\") ? \"hide\" : \"show\"]();\n    },\n\n    /** Main template */\n    _template: function() {\n        return $(\"<div/>\")\n            .addClass(\"ui-tabs tabbable tabs-left\")\n            .append($(\"<ul/>\").addClass(\"tab-navigation nav nav-tabs\"))\n            .append($(\"<div/>\").addClass(\"tab-content\"));\n    },\n\n    /** Tab template */\n    _template_tab: function(options) {\n        var $tmpl = $(\"<li/>\")\n            .addClass(\"tab-element\")\n            .attr(\"id\", `tab-${options.id}`)\n            .append($(\"<a/>\").attr(\"id\", `tab-title-link-${options.id}`));\n        var $href = $tmpl.find(\"a\");\n        options.icon &&\n            $href.append(\n                $(\"<i/>\")\n                    .addClass(\"tab-icon fa\")\n                    .addClass(options.icon)\n            );\n        $href.append(\n            $(\"<span/>\")\n                .attr(\"id\", `tab-title-text-${options.id}`)\n                .addClass(\"tab-title-text\")\n                .append(options.title)\n        );\n        return $tmpl;\n    }\n});\n\nexport default { View: View };\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-tabs.js","import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\nvar User = Backbone.Model.extend(baseMVC.LoggableMixin).extend(\n    /** @lends User.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** API location for this resource */\n        urlRoot: function() {\n            return `${Galaxy.root}api/users`;\n        },\n\n        /** Model defaults\n         *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n         *      a safer method is if( !user.get( 'email' ) ) -> anon user\n         */\n        defaults: /** @lends User.prototype */ {\n            id: null,\n            username: `(${_l(\"anonymous user\")})`,\n            email: \"\",\n            total_disk_usage: 0,\n            nice_total_disk_usage: \"\",\n            quota_percent: null,\n            is_admin: false\n        },\n\n        /** Set up and bind events\n         *  @param {Object} data Initial model data.\n         */\n        initialize: function(data) {\n            this.log(\"User.initialize:\", data);\n\n            this.on(\"loaded\", function(model, resp) {\n                this.log(`${this} has loaded:`, model, resp);\n            });\n            this.on(\"change\", function(model, data) {\n                this.log(`${this} has changed:`, model, data.changes);\n            });\n        },\n\n        isAnonymous: function() {\n            return !this.get(\"email\");\n        },\n\n        isAdmin: function() {\n            return this.get(\"is_admin\");\n        },\n\n        /** Load a user with the API using an id.\n         *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n         *      (e.g. 'current') and the API will return the current transaction's user data.\n         *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n         *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n         *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n         */\n        loadFromApi: function(idOrCurrent, options) {\n            idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n            options = options || {};\n            var model = this;\n            var userFn = options.success;\n\n            /** @ignore */\n            options.success = (newModel, response) => {\n                model.trigger(\"loaded\", newModel, response);\n                if (userFn) {\n                    userFn(newModel, response);\n                }\n            };\n\n            // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n            if (idOrCurrent === User.CURRENT_ID_STR) {\n                options.url = `${this.urlRoot}/${User.CURRENT_ID_STR}`;\n            }\n            return Backbone.Model.prototype.fetch.call(this, options);\n        },\n\n        /** Clears all data from the sessionStorage.\n         */\n        clearSessionStorage: function() {\n            for (var key in sessionStorage) {\n                //TODO: store these under the user key so we don't have to do this\n                // currently only history\n                if (key.indexOf(\"history:\") === 0) {\n                    sessionStorage.removeItem(key);\n                } else if (key === \"history-panel\") {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        },\n\n        /** string representation */\n        toString: function() {\n            var userInfo = [this.get(\"username\")];\n            if (this.get(\"id\")) {\n                userInfo.unshift(this.get(\"id\"));\n                userInfo.push(this.get(\"email\"));\n            }\n            return `User(${userInfo.join(\":\")})`;\n        }\n    }\n);\n\n// string to send to tell server to return this transaction's user (see api/users.py)\nUser.CURRENT_ID_STR = \"current\";\n\n// class method to load the current user via the api and return that model\nUser.getCurrentUserFromApi = options => {\n    var currentUser = new User();\n    currentUser.loadFromApi(User.CURRENT_ID_STR, options);\n    return currentUser;\n};\n\n// (stub) collection for users (shouldn't be common unless admin UI)\nvar UserCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n    model: User,\n    urlRoot: function() {\n        return `${Galaxy.root}api/users`;\n    }\n    //logger  : console,\n});\n\n//==============================================================================\nexport default {\n    User: User\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/user/user-model.js","/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\nimport * as _ from \"libs/underscore\";\nimport util from \"viz/trackster/util\";\nimport data from \"mvc/dataset/data\";\nimport ToolForm from \"mvc/tool/tool-form\";\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set(\"value\", value || \"\");\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale\n            .linear()\n            .domain([this.get(\"min\"), this.get(\"max\")])\n            .ticks(this.get(\"num_samples\"));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get(\"options\"), option => option[0]);\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    integer: IntegerToolParameter,\n    float: FloatToolParameter,\n    data: DataToolParameter,\n    select: SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: `${Galaxy.root}api/tools`,\n\n    initialize: function(options) {\n        // Set parameters.\n        this.set(\n            \"inputs\",\n            new ToolParameterCollection(\n                _.map(options.inputs, p => {\n                    var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n                    return new p_class(p);\n                })\n            )\n        );\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get(\"inputs\").map(i => i.toJSON());\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this;\n\n        var incompatible_inputs = tool.get(\"inputs\").filter(input => types.indexOf(input.get(\"type\")) !== -1);\n\n        tool.get(\"inputs\").remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get(\"inputs\").each(input => {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set(\"inputs\", valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide();\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get(\"inputs\")\n            .find(input => input.get(\"name\") === name)\n            .set(\"value\", value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), input_name => {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: \"rerun\",\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get(\"inputs\").each(input => {\n            input_dict[input.get(\"name\")] = input.get(\"value\");\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend(\n            {\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            },\n            additional_params\n        );\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred();\n\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(result => {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, elt => {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true;\n        var cur_label;\n        _.each(this.attributes.elems, elt => {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            } else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        } else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: `${Galaxy.root}api/tools`,\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(() => {\n            // log the search to analytics if present\n            if (typeof ga !== \"undefined\") {\n                ga(\"send\", \"pageview\", `${Galaxy.root}?q=${q}`);\n            }\n            $.get(\n                self.urlRoot,\n                { q: q },\n                data => {\n                    self.set(\"results\", data);\n                    $(\"#search-spinner\").hide();\n                    $(\"#search-clear-btn\").show();\n                },\n                \"json\"\n            );\n        }, 400);\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection(this.parse(options.layout));\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this;\n\n        var // Helper to recursively parse tool panel.\n        parse_elt = elt_dict => {\n            var type = elt_dict.model_class;\n            // There are many types of tools; for now, anything that ends in 'Tool'\n            // is treated as a generic tool.\n            if (type.indexOf(\"Tool\") === type.length - 4) {\n                return self.attributes.tools.get(elt_dict.id);\n            } else if (type === \"ToolSection\") {\n                // Parse elements.\n                var elems = _.map(elt_dict.elems, parse_elt);\n                elt_dict.elems = elems;\n                return new ToolSection(elt_dict);\n            } else if (type === \"ToolSectionLabel\") {\n                return new ToolSectionLabel(elt_dict);\n            }\n        };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            } else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get(\"tool_search\").get(\"results\");\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            } else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            } else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: \"div\",\n\n    render: function() {\n        // create element\n        var $link = $(\"<div/>\");\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get(\"form_style\", null);\n        // open upload dialog for upload tool\n        if (this.model.id === \"upload1\") {\n            $link.find(\"a\").on(\"click\", e => {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        } else if (formStyle === \"regular\") {\n            // regular tools\n            var self = this;\n            $link.find(\"a\").on(\"click\", e => {\n                e.preventDefault();\n                Galaxy.router.push(\"/\", {\n                    tool_id: self.model.id,\n                    version: self.model.get(\"version\")\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolPanelLabel\",\n\n    render: function() {\n        this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolSectionWrapper\",\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append(templates.panel_section(this.model.toJSON()));\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, elt => {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: elt,\n                    className: \"toolTitle\"\n                });\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            } else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: elt\n                });\n                label_view.render();\n                section_body.append(label_view.$el);\n            } else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        \"click .toolSectionTitle > a\": \"toggle\"\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        this.model.attributes.open\n            ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n            : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: \"div\",\n    id: \"tool-search\",\n    className: \"bar\",\n\n    events: {\n        click: \"focus_and_select\",\n        \"keyup :input\": \"query_changed\",\n        \"change :input\": \"query_changed\",\n        \"click #search-clear-btn\": \"clear\"\n    },\n\n    render: function() {\n        this.$el.append(templates.tool_search(this.model.toJSON()));\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\", \"95px\");\n        }\n\n        this.$el.find(\"[title]\").tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el\n            .find(\":input\")\n            .focus()\n            .select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val(\"\");\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function(evData) {\n        // check for the 'clear key' (ESC) first\n        if (this.model.attributes.clear_key && this.model.attributes.clear_key === evData.which) {\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"toolMenu\",\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model.get(\"tool_search\").on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView({\n            model: this.model.get(\"tool_search\")\n        });\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({\n                    model: panel_elt\n                });\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            } else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: panel_elt,\n                    className: \"toolTitleNoSection\"\n                });\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            } else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: panel_elt\n                });\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var tool_id = $(this)\n                .attr(\"class\")\n                .split(/\\s+/)[0];\n\n            var tool = self.model.get(\"tools\").get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get(\"tool_search\").get(\"results\");\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        } else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: \"toolForm\",\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append(templates.tool_form(this.model.toJSON()));\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: \"toolMenuAndView\",\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({\n            collection: this.collection\n        });\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", (e, tool) => {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done(() => {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $(\"#left\").width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search: _.template(\n        [\n            '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n            'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n            '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n            //TODO: replace with icon\n            '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n        ].join(\"\")\n    ),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section: _.template(\n        [\n            '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n            \"</div>\",\n            '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n            \"<div>\"\n        ].join(\"\")\n    ),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link: _.template(\n        [\n            '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<span class=\"labels\">',\n            \"<% _.each( labels, function( label ){ %>\",\n            '<span class=\"label label-default label-<%- label %>\">',\n            \"<%- label %>\",\n            \"</span>\",\n            \"<% }); %>\",\n            \"</span>\",\n            '<span class=\"tool-old-link\">',\n            \"<%- name %>\",\n            \"</span>\",\n            \" <%- description %>\",\n            \"</a>\"\n        ].join(\"\")\n    ),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form: _.template(\n        [\n            '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n            '<div class=\"toolFormBody\">',\n            \"<% _.each( tool.inputs, function( input ){ %>\",\n            '<div class=\"form-row\">',\n            '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n            '<div class=\"form-row-input\">',\n            \"<%= input.html %>\",\n            \"</div>\",\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"<%- input.help %>\",\n            \"</div>\",\n            '<div style=\"clear: both;\"></div>',\n            \"</div>\",\n            \"<% }); %>\",\n            \"</div>\",\n            '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n            \"</div>\",\n            '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n            \"</div>\"\n            // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n            // which implies a leaky variable that I can't find\n        ].join(\"\"),\n        { variable: \"tool\" }\n    )\n};\n\n// Exports\nexport default {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/tool/tools.js","/* This is the regular tool form */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Webhooks from \"mvc/webhooks\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.form = new ToolFormBase(\n            Utils.merge(\n                {\n                    listen_to_history: true,\n                    always_refresh: false,\n                    buildmodel: function(process, form) {\n                        var options = form.model.attributes;\n\n                        // build request url\n                        var build_url = \"\";\n                        var build_data = {};\n                        var job_id = options.job_id;\n                        if (job_id) {\n                            build_url = `${Galaxy.root}api/jobs/${job_id}/build_for_rerun`;\n                        } else {\n                            build_url = `${Galaxy.root}api/tools/${options.id}/build`;\n                            build_data = $.extend({}, Galaxy.params);\n                            build_data[\"tool_id\"] && delete build_data[\"tool_id\"];\n                        }\n                        options.version && (build_data[\"tool_version\"] = options.version);\n\n                        // get initial model\n                        Utils.get({\n                            url: build_url,\n                            data: build_data,\n                            success: function(data) {\n                                if (!data.display) {\n                                    window.location = Galaxy.root;\n                                    return;\n                                }\n                                form.model.set(data);\n                                self._customize(form);\n                                Galaxy.emit.debug(\"tool-form-base::_buildModel()\", \"Initial tool model ready.\", data);\n                                process.resolve();\n                            },\n                            error: function(response, status) {\n                                var error_message = (response && response.err_msg) || \"Uncaught error.\";\n                                if (status == 401) {\n                                    window.location = `${Galaxy.root}user/login?${$.param({\n                                        redirect: `${Galaxy.root}?tool_id=${options.id}`\n                                    })}`;\n                                } else if (form.$el.is(\":empty\")) {\n                                    form.$el.prepend(\n                                        new Ui.Message({\n                                            message: error_message,\n                                            status: \"danger\",\n                                            persistent: true,\n                                            large: true\n                                        }).$el\n                                    );\n                                } else {\n                                    Galaxy.modal &&\n                                        Galaxy.modal.show({\n                                            title: \"Tool request failed\",\n                                            body: error_message,\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                }\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    },\n                    postchange: function(process, form) {\n                        var current_state = {\n                            tool_id: form.model.get(\"id\"),\n                            tool_version: form.model.get(\"version\"),\n                            inputs: $.extend(true, {}, form.data.create())\n                        };\n                        form.wait(true);\n                        Galaxy.emit.debug(\"tool-form::postchange()\", \"Sending current state.\", current_state);\n                        Utils.request({\n                            type: \"POST\",\n                            url: `${Galaxy.root}api/tools/${form.model.get(\"id\")}/build`,\n                            data: current_state,\n                            success: function(data) {\n                                form.update(data);\n                                form.wait(false);\n                                Galaxy.emit.debug(\"tool-form::postchange()\", \"Received new model.\", data);\n                                process.resolve();\n                            },\n                            error: function(response) {\n                                Galaxy.emit.debug(\"tool-form::postchange()\", \"Refresh request failed.\", response);\n                                process.reject();\n                            }\n                        });\n                    }\n                },\n                options\n            )\n        );\n        this.deferred = this.form.deferred;\n        this.setElement(\"<div/>\");\n        this.$el.append(this.form.$el);\n    },\n\n    _customize: function(form) {\n        var self = this;\n        var options = form.model.attributes;\n        // build execute button\n        var execute_button = new Ui.Button({\n            icon: \"fa-check\",\n            tooltip: `Execute: ${options.name} (${options.version})`,\n            title: \"Execute\",\n            cls: \"btn btn-primary ui-clear-float\",\n            wait_cls: \"btn btn-info ui-clear-float\",\n            onclick: function() {\n                execute_button.wait();\n                form.portlet.disable();\n                self.submit(options, () => {\n                    execute_button.unwait();\n                    form.portlet.enable();\n                });\n            }\n        });\n        options.buttons = { execute: execute_button };\n\n        // remap feature\n        if (options.job_id && options.job_remap) {\n            options.inputs.push({\n                label: \"Resume dependencies from this job\",\n                name: \"rerun_remap_job_id\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                help:\n                    \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n            });\n        }\n    },\n\n    /** Submit a regular job.\n     * @param{dict}     options   - Specifies tool id and version\n     * @param{function} callback  - Called when request has completed\n     */\n    submit: function(options, callback) {\n        var self = this;\n        var job_def = {\n            tool_id: options.id,\n            tool_version: options.version,\n            inputs: this.form.data.create()\n        };\n        this.form.trigger(\"reset\");\n        if (!self.validate(job_def)) {\n            Galaxy.emit.debug(\"tool-form::submit()\", \"Submission canceled. Validation failed.\");\n            callback && callback();\n            return;\n        }\n        if (options.action !== `${Galaxy.root}tool_runner/index`) {\n            var $f = $(\"<form/>\").attr({\n                action: options.action,\n                method: options.method,\n                enctype: options.enctype\n            });\n            _.each(job_def.inputs, (value, key) => {\n                $f.append($(\"<input/>\").attr({ name: key, value: value }));\n            });\n            $f\n                .hide()\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            callback && callback();\n            return;\n        }\n        Galaxy.emit.debug(\"tool-form::submit()\", \"Validation complete.\", job_def);\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/tools`,\n            data: job_def,\n            success: function(response) {\n                callback && callback();\n                self.$el.children().hide();\n                self.$el.append(self._templateSuccess(response));\n                // Show Webhook if job is running\n                if (response.jobs && response.jobs.length > 0) {\n                    self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                    var WebhookApp = new Webhooks.WebhookView({\n                        urlRoot: `${Galaxy.root}api/webhooks/tool`,\n                        toolId: job_def.tool_id\n                    });\n                }\n                parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n            },\n            error: function(response) {\n                callback && callback();\n                Galaxy.emit.debug(\"tool-form::submit\", \"Submission failed.\", response);\n                var input_found = false;\n                if (response && response.err_data) {\n                    var error_messages = self.form.data.matchResponse(response.err_data);\n                    for (var input_id in error_messages) {\n                        self.form.highlight(input_id, error_messages[input_id]);\n                        input_found = true;\n                        break;\n                    }\n                }\n                if (!input_found) {\n                    self.modal.show({\n                        title: \"Job submission failed\",\n                        body: self._templateError(job_def, response && response.err_msg),\n                        buttons: {\n                            Close: function() {\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /** Validate job dictionary.\n     * @param{dict}     job_def   - Job execution dictionary\n     */\n    validate: function(job_def) {\n        var job_inputs = job_def.inputs;\n        var batch_n = -1;\n        var batch_src = null;\n        for (var job_input_id in job_inputs) {\n            var input_value = job_inputs[job_input_id];\n            var input_id = this.form.data.match(job_input_id);\n            var input_field = this.form.field_list[input_id];\n            var input_def = this.form.input_list[input_id];\n            if (!input_id || !input_def || !input_field) {\n                Galaxy.emit.debug(\"tool-form::validate()\", \"Retrieving input objects failed.\");\n                continue;\n            }\n            if (!input_def.optional && input_value == null) {\n                this.form.highlight(input_id);\n                return false;\n            }\n            if (input_value && input_value.batch) {\n                var n = input_value.values.length;\n                var src = n > 0 && input_value.values[0] && input_value.values[0].src;\n                if (src) {\n                    if (batch_src === null) {\n                        batch_src = src;\n                    } else if (batch_src !== src) {\n                        this.form.highlight(\n                            input_id,\n                            \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                        );\n                        return false;\n                    }\n                }\n                if (batch_n === -1) {\n                    batch_n = n;\n                } else if (batch_n !== n) {\n                    this.form.highlight(\n                        input_id,\n                        `Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>${\n                            n\n                        }</b> selection(s) while a previous field contains <b>${batch_n}</b>.`\n                    );\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    _templateSuccess: function(response) {\n        if (response.jobs && response.jobs.length > 0) {\n            var njobs = response.jobs.length;\n            var njobs_text = njobs == 1 ? \"1 job has\" : `${njobs} jobs have`;\n            var $message = $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").text(\n                        `${njobs_text} been successfully added to the queue - resulting in the following datasets:`\n                    )\n                );\n            _.each(response.outputs, output => {\n                $message.append(\n                    $(\"<p/>\")\n                        .addClass(\"messagerow\")\n                        .append($(\"<b/>\").text(`${output.hid}: ${output.name}`))\n                );\n            });\n            $message.append(\n                $(\"<p/>\")\n                    .append(\"<b/>\")\n                    .text(\n                        \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                    )\n            );\n            return $message;\n        } else {\n            return this._templateError(response, \"Invalid success response. No jobs found.\");\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    `The server could not complete the request. Please contact the Galaxy Team if this error persists. ${err_msg ||\n                        \"\"}`\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\n\nexport default {\n    View: View\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/tool/tool-form.js","import Utils from \"utils/utils\";\nimport Menu from \"layout/menu\";\nimport Scratchbook from \"layout/scratchbook\";\nimport QuotaMeter from \"mvc/user/user-quotameter\";\n/** Masthead **/\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.options = options;\n        this.setElement(this._template());\n        this.$navbarBrandLink = this.$(\".navbar-brand-link\");\n        this.$navbarBrandImage = this.$(\".navbar-brand-image\");\n        this.$navbarBrandTitle = this.$(\".navbar-brand-title\");\n        this.$navbarTabs = this.$(\".navbar-tabs\");\n        this.$quoteMeter = this.$(\".quota-meter-container\");\n\n        // build tabs\n        this.collection = new Menu.Collection();\n        this.collection\n            .on(\"add\", model => {\n                self.$navbarTabs.append(new Menu.Tab({ model: model }).render().$el);\n            })\n            .on(\"reset\", () => {\n                self.$navbarTabs.empty();\n            })\n            .on(\"dispatch\", callback => {\n                self.collection.each(m => {\n                    callback(m);\n                });\n            })\n            .fetch(this.options);\n\n        // scratchbook\n        Galaxy.frame = this.frame = new Scratchbook({\n            collection: this.collection\n        });\n\n        // set up the quota meter (And fetch the current user data from trans)\n        // add quota meter to masthead\n        Galaxy.quotaMeter = this.quotaMeter = new QuotaMeter.UserQuotaMeter({\n            model: Galaxy.user,\n            el: this.$quoteMeter\n        });\n\n        // loop through beforeunload functions if the user attempts to unload the page\n        $(window)\n            .on(\"click\", e => {\n                var $download_link = $(e.target).closest(\"a[download]\");\n                if ($download_link.length == 1) {\n                    if ($(\"iframe[id=download]\").length === 0) {\n                        $(\"body\").append(\n                            $(\"<iframe/>\")\n                                .attr(\"id\", \"download\")\n                                .hide()\n                        );\n                    }\n                    $(\"iframe[id=download]\").attr(\"src\", $download_link.attr(\"href\"));\n                    e.preventDefault();\n                }\n            })\n            .on(\"beforeunload\", () => {\n                var text = \"\";\n                self.collection.each(model => {\n                    var q = model.get(\"onbeforeunload\") && model.get(\"onbeforeunload\")();\n                    q && (text += `${q} `);\n                });\n                if (text !== \"\") {\n                    return text;\n                }\n            });\n    },\n\n    render: function() {\n        this.$navbarBrandTitle.html(`Galaxy ${(this.options.brand && `/ ${this.options.brand}`) || \"\"}`);\n        this.$navbarBrandLink.attr(\"href\", this.options.logo_url);\n        this.$navbarBrandImage.attr(\"src\", this.options.logo_src);\n        this.quotaMeter.render();\n        return this;\n    },\n\n    /** body template */\n    _template: function() {\n        return (\n            '<div id=\"masthead\" class=\"navbar navbar-fixed-top navbar-inverse\">' +\n            '<div class=\"navbar-header\">' +\n            '<div class=\"navbar-tabs\"/>' +\n            \"</div>\" +\n            '<div class=\"navbar-brand\">' +\n            '<a class=\"navbar-brand-link\">' +\n            '<img class=\"navbar-brand-image\"/>' +\n            '<span class=\"navbar-brand-title\"/>' +\n            \"</a>\" +\n            \"</div>\" +\n            '<div class=\"quota-meter-container\"/>' +\n            '<div class=\"navbar-icons\"/>' +\n            \"</div>\"\n        );\n    }\n});\n\nexport default {\n    View: View\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/masthead.js","/** Masthead Collection **/\nimport GenericNav from \"layout/generic-nav-view\";\nimport Webhooks from \"mvc/webhooks\";\nimport _l from \"utils/localization\";\nimport Utils from \"utils/utils\";\nvar Collection = Backbone.Collection.extend({\n    model: Backbone.Model.extend({\n        defaults: {\n            visible: true,\n            target: \"_parent\"\n        }\n    }),\n    fetch: function(options) {\n        var self = this;\n        options = options || {};\n        this.reset();\n\n        //\n        // Chat server tab\n        //\n        var extendedNavItem = new GenericNav.GenericNavView();\n        this.add(extendedNavItem.render());\n\n        //\n        // Analyze data tab.\n        //\n        this.add({\n            id: \"analysis\",\n            title: _l(\"Analyze Data\"),\n            url: \"\",\n            tooltip: _l(\"Analysis home view\")\n        });\n\n        //\n        // Workflow tab.\n        //\n        this.add({\n            id: \"workflow\",\n            title: _l(\"Workflow\"),\n            tooltip: _l(\"Chain tools into workflows\"),\n            disabled: !Galaxy.user.id,\n            url: \"workflow\"\n        });\n\n        //\n        // 'Shared Items' or Libraries tab.\n        //\n        this.add({\n            id: \"shared\",\n            title: _l(\"Shared Data\"),\n            url: \"library/index\",\n            tooltip: _l(\"Access published resources\"),\n            menu: [\n                {\n                    title: _l(\"Data Libraries\"),\n                    url: \"library/list\"\n                },\n                {\n                    title: _l(\"Histories\"),\n                    url: \"histories/list_published\"\n                },\n                {\n                    title: _l(\"Workflows\"),\n                    url: \"workflows/list_published\"\n                },\n                {\n                    title: _l(\"Visualizations\"),\n                    url: \"visualizations/list_published\"\n                },\n                {\n                    title: _l(\"Pages\"),\n                    url: \"pages/list_published\"\n                }\n            ]\n        });\n\n        //\n        // Visualization tab.\n        //\n        this.add({\n            id: \"visualization\",\n            title: _l(\"Visualization\"),\n            url: \"visualizations/list\",\n            tooltip: _l(\"Visualize datasets\"),\n            disabled: !Galaxy.user.id,\n            menu: [\n                {\n                    title: _l(\"New Track Browser\"),\n                    url: \"visualization/trackster\",\n                    target: \"_frame\"\n                },\n                {\n                    title: _l(\"Saved Visualizations\"),\n                    url: \"visualizations/list\",\n                    target: \"_frame\"\n                },\n                {\n                    title: _l(\"Interactive Environments\"),\n                    url: \"visualization/gie_list\",\n                    target: \"galaxy_main\"\n                }\n            ]\n        });\n\n        //\n        // Webhooks\n        //\n        Webhooks.add({\n            url: \"api/webhooks/masthead/all\",\n            callback: function(webhooks) {\n                $(document).ready(() => {\n                    $.each(webhooks.models, (index, model) => {\n                        var webhook = model.toJSON();\n                        if (webhook.activate) {\n                            var obj = {\n                                id: webhook.name,\n                                icon: webhook.config.icon,\n                                url: webhook.config.url,\n                                tooltip: webhook.config.tooltip,\n                                onclick: webhook.config.function && new Function(webhook.config.function)\n                            };\n\n                            // Galaxy.page is undefined for data libraries, workflows pages\n                            if (Galaxy.page) {\n                                Galaxy.page.masthead.collection.add(obj);\n                            } else if (Galaxy.masthead) {\n                                Galaxy.masthead.collection.add(obj);\n                            }\n\n                            // Append masthead script and styles to Galaxy main\n                            Utils.appendScriptStyle(webhook);\n                        }\n                    });\n                });\n            }\n        });\n\n        //\n        // Admin.\n        //\n        Galaxy.user.get(\"is_admin\") &&\n            this.add({\n                id: \"admin\",\n                title: _l(\"Admin\"),\n                url: \"admin\",\n                tooltip: _l(\"Administer this Galaxy\"),\n                cls: \"admin-only\"\n            });\n\n        //\n        // Help tab.\n        //\n        var helpTab = {\n            id: \"help\",\n            title: _l(\"Help\"),\n            tooltip: _l(\"Support, contact, and community\"),\n            menu: [\n                {\n                    title: _l(\"Support\"),\n                    url: options.support_url,\n                    target: \"_blank\"\n                },\n                {\n                    title: _l(\"Search\"),\n                    url: options.search_url,\n                    target: \"_blank\"\n                },\n                {\n                    title: _l(\"Mailing Lists\"),\n                    url: options.mailing_lists,\n                    target: \"_blank\"\n                },\n                {\n                    title: _l(\"Videos\"),\n                    url: options.screencasts_url,\n                    target: \"_blank\"\n                },\n                {\n                    title: _l(\"Wiki\"),\n                    url: options.wiki_url,\n                    target: \"_blank\"\n                },\n                {\n                    title: _l(\"How to Cite Galaxy\"),\n                    url: options.citation_url,\n                    target: \"_blank\"\n                },\n                {\n                    title: _l(\"Interactive Tours\"),\n                    url: \"tours\"\n                }\n            ]\n        };\n        options.terms_url &&\n            helpTab.menu.push({\n                title: _l(\"Terms and Conditions\"),\n                url: options.terms_url,\n                target: \"_blank\"\n            });\n        options.biostar_url &&\n            helpTab.menu.unshift({\n                title: _l(\"Ask a question\"),\n                url: \"biostar/biostar_question_redirect\",\n                target: \"_blank\"\n            });\n        options.biostar_url &&\n            helpTab.menu.unshift({\n                title: _l(\"Galaxy Biostar\"),\n                url: options.biostar_url_redirect,\n                target: \"_blank\"\n            });\n        this.add(helpTab);\n\n        //\n        // User tab.\n        //\n        var userTab = {};\n        if (!Galaxy.user.id) {\n            if (options.allow_user_creation) {\n                userTab = {\n                    id: \"user\",\n                    title: _l(\"Login or Register\"),\n                    cls: \"loggedout-only\",\n                    tooltip: _l(\"Account registration or login\"),\n                    menu: [\n                        {\n                            title: _l(\"Login\"),\n                            url: \"user/login\",\n                            target: \"galaxy_main\",\n                            noscratchbook: true\n                        },\n                        {\n                            title: _l(\"Register\"),\n                            url: \"user/create\",\n                            target: \"galaxy_main\",\n                            noscratchbook: true\n                        }\n                    ]\n                };\n            } else {\n                userTab = {\n                    id: \"user\",\n                    title: _l(\"Login\"),\n                    cls: \"loggedout-only\",\n                    tooltip: _l(\"Login\"),\n                    url: \"user/login\",\n                    target: \"galaxy_main\",\n                    noscratchbook: true\n                };\n            }\n        } else {\n            userTab = {\n                id: \"user\",\n                title: _l(\"User\"),\n                cls: \"loggedin-only\",\n                tooltip: _l(\"Account and saved data\"),\n                menu: [\n                    {\n                        title: `${_l(\"Logged in as\")} ${Galaxy.user.get(\"email\")}`\n                    },\n                    {\n                        title: _l(\"Preferences\"),\n                        url: \"user\"\n                    },\n                    {\n                        title: _l(\"Custom Builds\"),\n                        url: \"custom_builds\"\n                    },\n                    {\n                        title: _l(\"Logout\"),\n                        url: `user/logout?session_csrf_token=${Galaxy.session_csrf_token}`,\n                        target: \"_top\",\n                        divider: true\n                    },\n                    {\n                        title: _l(\"Saved Histories\"),\n                        url: \"histories/list\",\n                        target: \"_top\"\n                    },\n                    {\n                        title: _l(\"Saved Datasets\"),\n                        url: \"datasets/list\",\n                        target: \"_top\"\n                    },\n                    {\n                        title: _l(\"Saved Pages\"),\n                        url: \"pages/list\",\n                        target: \"_top\"\n                    }\n                ]\n            };\n        }\n        this.add(userTab);\n        var activeView = this.get(options.active_view);\n        activeView && activeView.set(\"active\", true);\n        return new jQuery.Deferred().resolve().promise();\n    }\n});\n\n/** Masthead tab **/\nvar Tab = Backbone.View.extend({\n    initialize: function(options) {\n        this.model = options.model;\n        this.setElement(this._template());\n        this.$dropdown = this.$(\".dropdown\");\n        this.$toggle = this.$(\".dropdown-toggle\");\n        this.$menu = this.$(\".dropdown-menu\");\n        this.$note = this.$(\".dropdown-note\");\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    events: {\n        \"click .dropdown-toggle\": \"_toggleClick\"\n    },\n\n    render: function() {\n        var self = this;\n        $(\".tooltip\").remove();\n        this.$el.attr(\"id\", this.model.id).css({\n            visibility: (this.model.get(\"visible\") && \"visible\") || \"hidden\"\n        });\n        this.model.set(\"url\", this._formatUrl(this.model.get(\"url\")));\n        this.$note\n            .html(this.model.get(\"note\") || \"\")\n            .removeClass()\n            .addClass(\"dropdown-note\")\n            .addClass(this.model.get(\"note_cls\"))\n            .css({\n                display: (this.model.get(\"show_note\") && \"block\") || \"none\"\n            });\n        this.$toggle\n            .html(this.model.get(\"title\") || \"\")\n            .removeClass()\n            .addClass(\"dropdown-toggle\")\n            .addClass(this.model.get(\"cls\"))\n            .addClass(this.model.get(\"icon\") && `dropdown-icon fa ${this.model.get(\"icon\")}`)\n            .addClass(this.model.get(\"toggle\") && \"toggle\")\n            .attr(\"target\", this.model.get(\"target\"))\n            .attr(\"href\", this.model.get(\"url\"))\n            .attr(\"title\", this.model.get(\"tooltip\"))\n            .tooltip(\"destroy\");\n        this.model.get(\"tooltip\") && this.$toggle.tooltip({ placement: \"bottom\" });\n        this.$dropdown\n            .removeClass()\n            .addClass(\"dropdown\")\n            .addClass(this.model.get(\"disabled\") && \"disabled\")\n            .addClass(this.model.get(\"active\") && \"active\");\n        if (this.model.get(\"menu\") && this.model.get(\"show_menu\")) {\n            this.$menu.show();\n            $(\"#dd-helper\")\n                .show()\n                .off()\n                .on(\"click\", () => {\n                    $(\"#dd-helper\").hide();\n                    self.model.set(\"show_menu\", false);\n                });\n        } else {\n            self.$menu.hide();\n            $(\"#dd-helper\").hide();\n        }\n        this.$menu.empty().removeClass(\"dropdown-menu\");\n        if (this.model.get(\"menu\")) {\n            _.each(this.model.get(\"menu\"), menuItem => {\n                self.$menu.append(self._buildMenuItem(menuItem));\n                menuItem.divider && self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n            });\n            self.$menu.addClass(\"dropdown-menu\");\n            self.$toggle.append($(\"<b/>\").addClass(\"caret\"));\n        }\n        return this;\n    },\n\n    /** Add new menu item */\n    _buildMenuItem: function(options) {\n        var self = this;\n        options = _.defaults(options || {}, {\n            title: \"\",\n            url: \"\",\n            target: \"_parent\",\n            noscratchbook: false\n        });\n        options.url = self._formatUrl(options.url);\n        return $(\"<li/>\").append(\n            $(\"<a/>\")\n                .attr(\"href\", options.url)\n                .attr(\"target\", options.target)\n                .html(options.title)\n                .on(\"click\", e => {\n                    e.preventDefault();\n                    self.model.set(\"show_menu\", false);\n                    if (options.onclick) {\n                        options.onclick();\n                    } else {\n                        Galaxy.frame.add(options);\n                    }\n                })\n        );\n    },\n\n    /** Handle click event */\n    _toggleClick: function(e) {\n        var self = this;\n        var model = this.model;\n        e.preventDefault();\n        $(\".tooltip\").hide();\n        model.trigger(\"dispatch\", m => {\n            model.id !== m.id && m.get(\"menu\") && m.set(\"show_menu\", false);\n        });\n        if (!model.get(\"disabled\")) {\n            if (!model.get(\"menu\")) {\n                model.get(\"onclick\") ? model.get(\"onclick\")() : Galaxy.frame.add(model.attributes);\n            } else {\n                model.set(\"show_menu\", true);\n            }\n        } else {\n            function buildLink(label, url) {\n                return $(\"<div/>\")\n                    .append(\n                        $(\"<a/>\")\n                            .attr(\"href\", Galaxy.root + url)\n                            .html(label)\n                    )\n                    .html();\n            }\n            this.$toggle.popover && this.$toggle.popover(\"destroy\");\n            this.$toggle\n                .popover({\n                    html: true,\n                    placement: \"bottom\",\n                    content: `Please ${buildLink(\"login\", \"user/login?use_panels=True\")} or ${buildLink(\n                        \"register\",\n                        \"user/create?use_panels=True\"\n                    )} to use this feature.`\n                })\n                .popover(\"show\");\n            setTimeout(() => {\n                self.$toggle.popover(\"destroy\");\n            }, 5000);\n        }\n    },\n\n    /** Url formatting */\n    _formatUrl: function(url) {\n        return typeof url == \"string\" && url.indexOf(\"//\") === -1 && url.charAt(0) != \"/\" ? Galaxy.root + url : url;\n    },\n\n    /** body tempate */\n    _template: function() {\n        return (\n            '<ul class=\"nav navbar-nav\">' +\n            '<li class=\"dropdown\">' +\n            '<a class=\"dropdown-toggle\"/>' +\n            '<ul class=\"dropdown-menu\"/>' +\n            '<div class=\"dropdown-note\"/>' +\n            \"</li>\" +\n            \"</ul>\"\n        );\n    }\n});\n\nexport default {\n    Collection: Collection,\n    Tab: Tab\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/menu.js","/** Real-time Communication feature **/\nimport Modal from \"mvc/ui/ui-modal\";\nvar GenericNavView = Backbone.View.extend({\n    initialize: function() {\n        this.modal = null;\n    },\n\n    /** makes bootstrap modal and iframe inside it */\n    makeModalIframe: function(e) {\n        // make modal\n        var host = window.Galaxy.config.communication_server_host;\n\n        var port = window.Galaxy.config.communication_server_port;\n        var username = escape(window.Galaxy.user.attributes.username);\n\n        var persistent_communication_rooms = escape(window.Galaxy.config.persistent_communication_rooms);\n\n        var query_string = `?username=${username}&persistent_communication_rooms=${persistent_communication_rooms}`;\n\n        var src = `${host}:${port}${query_string}`;\n        var $el_chat_modal_header = null;\n        var $el_chat_modal_body = null;\n\n        var iframe_template = `<iframe class=\"f-iframe fade in communication-iframe\" src=\"${src}\"> </iframe>`;\n\n        var header_template =\n            '<i class=\"fa fa-comment\" aria-hidden=\"true\" title=\"Communicate with other users\"></i>' +\n            '<i class=\"fa fa-expand expand-compress-modal\" aria-hidden=\"true\" title=\"Maximize\"></i>' +\n            '<i class=\"fa fa-times close-modal\" aria-hidden=\"true\" title=\"Close\"></i>';\n\n        var frame_height = 350;\n        var frame_width = 600;\n        var class_names = \"ui-modal chat-modal\";\n\n        // deletes the chat modal if already present and create one\n        if ($(\".chat-modal\").length > 0) {\n            $(\".chat-modal\").remove();\n        }\n        // creates a modal\n        GenericNavView.modal = new Modal.View({\n            body: iframe_template,\n            height: frame_height,\n            width: frame_width,\n            closing_events: true,\n            title_separator: false,\n            cls: class_names\n        });\n\n        // shows modal\n        GenericNavView.modal.show();\n        $el_chat_modal_header = $(\".chat-modal .modal-header\");\n        $el_chat_modal_body = $(\".chat-modal .modal-body\");\n        // adjusts the css of bootstrap modal for chat\n        $el_chat_modal_header.addClass(\"modal-header-body\");\n        $el_chat_modal_body.addClass(\"modal-header-body\");\n        $el_chat_modal_header.find(\"h4\").remove();\n        $el_chat_modal_header.removeAttr(\"min-height padding border\");\n        $el_chat_modal_header.append(header_template);\n        // click event of the close button for chat\n        $(\".close-modal\").click(e => {\n            $(\".chat-modal\").css(\"display\", \"none\");\n        });\n        // click event of expand and compress icon\n        $(\".expand-compress-modal\").click(e => {\n            if ($(\".expand-compress-modal\").hasClass(\"fa-expand\")) {\n                $(\".chat-modal .modal-dialog\").width(\"1000px\");\n                $(\".chat-modal .modal-body\").height(\"575px\");\n                $(\".expand-compress-modal\")\n                    .removeClass(\"fa-expand\")\n                    .addClass(\"fa-compress\");\n                $(\".expand-compress-modal\").attr(\"title\", \"Minimize\");\n                $(\".expand-compress-modal\").css(\"margin-left\", \"96.2%\");\n            } else {\n                $(\".chat-modal .modal-dialog\").width(`${frame_width}px`);\n                $(\".chat-modal .modal-body\").height(`${frame_height}px`);\n                $(\".expand-compress-modal\")\n                    .removeClass(\"fa-compress\")\n                    .addClass(\"fa-expand\");\n                $(\".expand-compress-modal\").attr(\"title\", \"Maximize\");\n                $(\".expand-compress-modal\").css(\"margin-left\", \"93.2%\");\n            }\n        });\n        return this;\n    },\n\n    /**renders the chat icon as a nav item*/\n    render: function() {\n        var self = this;\n        var navItem = {};\n        navItem = {\n            id: \"show-chat-online\",\n            icon: \"fa-comment-o\",\n            tooltip: \"Chat online\",\n            visible: false,\n            onclick: self.makeModalIframe\n        };\n        return navItem;\n    }\n});\n\nexport default {\n    GenericNavView: GenericNavView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/generic-nav-view.js","/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\nimport Frames from \"mvc/ui/ui-frames\";\nimport DATA from \"mvc/dataset/data\";\nimport visualization from \"viz/visualization\";\nimport trackster from \"viz/trackster\";\nimport _l from \"utils/localization\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        options = options || {};\n        this.frames = new Frames.View({ visible: false });\n        this.setElement(this.frames.$el);\n        this.buttonActive = options.collection.add({\n            id: \"enable-scratchbook\",\n            icon: \"fa-th\",\n            tooltip: _l(\"Enable/Disable Scratchbook\"),\n            onclick: function() {\n                self.active = !self.active;\n                self.buttonActive.set({\n                    toggle: self.active,\n                    show_note: self.active,\n                    note_cls: self.active && \"fa fa-check\"\n                });\n                !self.active && self.frames.hide();\n            },\n            onbeforeunload: function() {\n                if (self.frames.length() > 0) {\n                    return `You opened ${self.frames.length()} frame(s) which will be lost.`;\n                }\n            }\n        });\n        this.buttonLoad = options.collection.add({\n            id: \"show-scratchbook\",\n            icon: \"fa-eye\",\n            tooltip: _l(\"Show/Hide Scratchbook\"),\n            show_note: true,\n            visible: false,\n            onclick: function(e) {\n                self.frames.visible ? self.frames.hide() : self.frames.show();\n            }\n        });\n        this.frames\n            .on(\"add remove\", function() {\n                this.visible && this.length() == 0 && this.hide();\n                self.buttonLoad.set({\n                    note: this.length(),\n                    visible: this.length() > 0\n                });\n            })\n            .on(\"show hide \", function() {\n                self.buttonLoad.set({\n                    toggle: this.visible,\n                    icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                });\n            });\n        this.history_cache = {};\n    },\n\n    /** Add a dataset to the frames */\n    addDataset: function(dataset_id) {\n        var self = this;\n        var current_dataset = null;\n        if (Galaxy && Galaxy.currHistoryPanel) {\n            var history_id = Galaxy.currHistoryPanel.collection.historyId;\n            this.history_cache[history_id] = {\n                name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                dataset_ids: []\n            };\n            Galaxy.currHistoryPanel.collection.each(model => {\n                !model.get(\"deleted\") &&\n                    model.get(\"visible\") &&\n                    self.history_cache[history_id].dataset_ids.push(model.get(\"id\"));\n            });\n        }\n        var _findDataset = (dataset, offset) => {\n            if (dataset) {\n                var history_details = self.history_cache[dataset.get(\"history_id\")];\n                if (history_details && history_details.dataset_ids) {\n                    var dataset_list = history_details.dataset_ids;\n                    var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                    if (pos !== -1 && pos + offset >= 0 && pos + offset < dataset_list.length) {\n                        return dataset_list[pos + offset];\n                    }\n                }\n            }\n        };\n        var _loadDatasetOffset = (dataset, offset, frame) => {\n            var new_dataset_id = _findDataset(dataset, offset);\n            if (new_dataset_id) {\n                self._loadDataset(new_dataset_id, (new_dataset, config) => {\n                    current_dataset = new_dataset;\n                    frame.model.set(config);\n                });\n            } else {\n                frame.model.trigger(\"change\");\n            }\n        };\n        this._loadDataset(dataset_id, (dataset, config) => {\n            current_dataset = dataset;\n            self.add(\n                _.extend(\n                    {\n                        menu: [\n                            {\n                                icon: \"fa fa-chevron-circle-left\",\n                                tooltip: \"Previous in History\",\n                                onclick: function(frame) {\n                                    _loadDatasetOffset(current_dataset, -1, frame);\n                                },\n                                disabled: function() {\n                                    return !_findDataset(current_dataset, -1);\n                                }\n                            },\n                            {\n                                icon: \"fa fa-chevron-circle-right\",\n                                tooltip: \"Next in History\",\n                                onclick: function(frame) {\n                                    _loadDatasetOffset(current_dataset, 1, frame);\n                                },\n                                disabled: function() {\n                                    return !_findDataset(current_dataset, 1);\n                                }\n                            }\n                        ]\n                    },\n                    config\n                )\n            );\n        });\n    },\n\n    _loadDataset: function(dataset_id, callback) {\n        var self = this;\n        var dataset = new DATA.Dataset({ id: dataset_id });\n        $.when(dataset.fetch()).then(() => {\n            var is_tabular = _.find(\n                [\"tabular\", \"interval\"],\n                data_type => dataset.get(\"data_type\").indexOf(data_type) !== -1\n            );\n            var title = dataset.get(\"name\");\n            var history_details = self.history_cache[dataset.get(\"history_id\")];\n            if (history_details) {\n                title = `${history_details.name}: ${title}`;\n            }\n            callback(\n                dataset,\n                is_tabular\n                    ? {\n                          title: title,\n                          url: null,\n                          content: DATA.createTabularDatasetChunkedView({\n                              model: new DATA.TabularDataset(dataset.toJSON()),\n                              embedded: true,\n                              height: \"100%\"\n                          }).$el\n                      }\n                    : {\n                          title: title,\n                          url: `${Galaxy.root}datasets/${dataset_id}/display/?preview=True`,\n                          content: null\n                      }\n            );\n        });\n    },\n\n    /** Add a trackster visualization to the frames. */\n    addTrackster: function(viz_id) {\n        var self = this;\n        var viz = new visualization.Visualization({ id: viz_id });\n        $.when(viz.fetch()).then(() => {\n            var ui = new trackster.TracksterUI(Galaxy.root);\n\n            // Construct frame config based on dataset's type.\n            var frame_config = {\n                title: viz.get(\"name\"),\n                type: \"other\",\n                content: function(parent_elt) {\n                    // Create view config.\n                    var view_config = {\n                        container: parent_elt,\n                        name: viz.get(\"title\"),\n                        id: viz.id,\n                        // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                        dbkey: viz.get(\"dbkey\"),\n                        stand_alone: false\n                    };\n\n                    var latest_revision = viz.get(\"latest_revision\");\n                    var drawables = latest_revision.config.view.drawables;\n\n                    // Set up datasets in drawables.\n                    _.each(drawables, d => {\n                        d.dataset = {\n                            hda_ldda: d.hda_ldda,\n                            id: d.dataset_id\n                        };\n                    });\n                    view = ui.create_visualization(\n                        view_config,\n                        latest_revision.config.viewport,\n                        latest_revision.config.view.drawables,\n                        latest_revision.config.bookmarks,\n                        false\n                    );\n                }\n            };\n            self.add(frame_config);\n        });\n    },\n\n    /** Add and display a new frame/window based on options. */\n    add: function(options) {\n        if (options.target == \"_blank\") {\n            window.open(options.url);\n        } else if (options.target == \"_top\" || options.target == \"_parent\" || options.target == \"_self\") {\n            window.location = options.url;\n        } else if (!this.active || options.noscratchbook) {\n            var $galaxy_main = $(window.parent.document).find(\"#galaxy_main\");\n            if (options.target == \"galaxy_main\" || options.target == \"center\") {\n                if ($galaxy_main.length === 0) {\n                    window.location = `${options.url + (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\")}use_panels=True`;\n                } else {\n                    $galaxy_main.attr(\"src\", options.url);\n                }\n            } else window.location = options.url;\n        } else {\n            this.frames.add(options);\n        }\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/scratchbook.js","// dependencies\n\n// grid model\nexport default Backbone.Model.extend({\n    defaults: {\n        url_base: \"\",\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.\n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key];\n\n            var new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } else if (typeof cur_val == \"string\") {\n                if (cur_val == \"All\" || cur_val == value) {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;\n                }\n            } else {\n                // Current value is an array.\n                new_val = cur_val;\n                if (new_val.indexOf(value) === -1) {\n                    new_val.push(value);\n                }\n            }\n            this.attributes.filters[key] = new_val;\n        } else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;\n        }\n\n        if (typeof cur_val === \"string\") {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = \"\";\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = \"\";\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), k => {\n            url_data[`f-${k[0]}`] = k[1];\n        });\n        return url_data;\n    },\n\n    // Return URL for obtaining a new grid\n    get_url: function(args) {\n        return `${this.get(\"url_base\")}?${$.param(this.get_url_data())}&${$.param(args)}`;\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\nimport Utils from \"utils/utils\";\n// grid view templates\nexport default {\n    // template\n    grid: function(options) {\n        var tmpl = \"\";\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = `<div class=\"loading-elt-overlay\"></div><table><tr><td width=\"75%\">${this.grid_header(\n                options\n            )}</td><td></td><td></td></tr><tr><td width=\"100%\" id=\"grid-message\" valign=\"top\"></td><td></td><td></td></tr></table>${this.grid_table(\n                options\n            )}`;\n        }\n\n        // add info text\n        if (options.info_text) {\n            tmpl += `<br><div class=\"toolParamHelp\" style=\"clear: both;\">${options.info_text}</div>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    grid_table: function(options) {\n        return (\n            '<form method=\"post\" onsubmit=\"return false;\">' +\n            '<table id=\"grid-table\" class=\"grid\">' +\n            '<thead id=\"grid-table-header\"></thead>' +\n            '<tbody id=\"grid-table-body\"></tbody>' +\n            '<tfoot id=\"grid-table-footer\"></tfoot>' +\n            \"</table>\" +\n            \"</form>\"\n        );\n    },\n\n    // template\n    grid_header: function(options) {\n        var tmpl = '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl += `<h2>${options.title}</h2>`;\n        }\n        if (options.global_actions) {\n            tmpl += '<ul class=\"manage-table-actions\">';\n            var show_popup = options.global_actions.length >= 3;\n            if (show_popup) {\n                tmpl +=\n                    '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                    '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (var i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl += `<li><a class=\"action-button use-target\" target=\"${action.target}\" href=\"${\n                    action.url_args\n                }\" onclick=\"return false;\" >${action.label}</a></li>`;\n            }\n            if (show_popup) {\n                tmpl += \"</div>\";\n            }\n            tmpl += \"</ul>\";\n        }\n        if (options.insert) {\n            tmpl += options.insert;\n        }\n\n        // add grid filters\n        tmpl += this.grid_filters(options);\n        tmpl += \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        // start\n        var tmpl = \"<tr>\";\n\n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl += \"<th>\";\n            if (options.items.length > 0) {\n                tmpl +=\n                    '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                    '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl += \"</th>\";\n        }\n\n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl += `<th id=\"${column.key}-header\">`;\n                if (column.href) {\n                    tmpl += `<a href=\"${column.href}\" class=\"sort-link\" sort_key=\"${column.key}\">${column.label}</a>`;\n                } else {\n                    tmpl += column.label;\n                }\n                tmpl += `<span class=\"sort-arrow\">${column.extra}</span></th>`;\n            }\n        }\n\n        // finalize\n        tmpl += \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = \"\";\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n\n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n\n        // create rows\n        for (var i in options.items) {\n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = `grid-${i}-popup`;\n\n            // Tag current\n            tmpl += \"<tr \";\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += \">\";\n\n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += `<td style=\"width: 1.5em;\"><input type=\"checkbox\" name=\"id\" value=\"${encoded_id}\" id=\"${\n                    encoded_id\n                }\" class=\"grid-row-select-checkbox\" /></td>`;\n            }\n\n            // Data columns\n            for (var j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = \"\";\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n\n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n\n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n\n                    // unescape value\n                    if (jQuery.type(value) === \"string\") {\n                        value = value.replace(/\\/\\//g, \"/\");\n                    }\n\n                    // Attach popup menu?\n                    var id = \"\";\n                    var cls = \"\";\n                    if (column.attach_popup) {\n                        id = `grid-${i}-popup`;\n                        cls = \"menubutton\";\n                        if (link != \"\") {\n                            cls += \" split\";\n                        }\n                        cls += \" popup\";\n                    }\n\n                    // Check for row wrapping\n                    tmpl += `<td ${nowrap}>`;\n\n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += `<div id=\"${id}\" class=\"${cls}\" style=\"float: left;\">`;\n                        }\n                        tmpl += `<a class=\"menubutton-label use-target\" target=\"${target}\" href=\"${\n                            link\n                        }\" onclick=\"return false;\">${value}</a>`;\n                        if (options.operations.length != 0) {\n                            tmpl += \"</div>\";\n                        }\n                    } else {\n                        tmpl += `<div id=\"${id}\" class=\"${cls}\"><label id=\"${column.label_id_prefix}${\n                            encoded_id\n                        }\" for=\"${encoded_id}\">${value || \"\"}</label></div>`;\n                    }\n                    tmpl += \"</td>\";\n                }\n            }\n            tmpl += \"</tr>\";\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n        // create template string\n        var tmpl = \"\";\n\n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links = options.num_page_links;\n            var cur_page_num = options.cur_page_num;\n            var num_pages = options.num_pages;\n\n            // First pass on min page.\n            var page_link_range = num_page_links / 2;\n            var min_page = cur_page_num - page_link_range;\n            var min_offset = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - (cur_page_num - min_page);\n            }\n\n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - (max_page + 1 - cur_page_num);\n            }\n\n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset;\n                if (min_page < 1) {\n                    min_page = 1;\n                }\n            }\n\n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += \"<td></td>\";\n            }\n            tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n            if (min_page > 1) {\n                tmpl +=\n                    '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n\n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                if (page_index == options.cur_page_num) {\n                    tmpl += `<span class=\"page-link inactive-link\" id=\"page-link-${page_index}\">${page_index}</span>`;\n                } else {\n                    tmpl += `<span class=\"page-link\" id=\"page-link-${\n                        page_index\n                    }\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${page_index}\">${\n                        page_index\n                    }</a></span>`;\n                }\n            }\n\n            // show last page\n            if (max_page < num_pages) {\n                tmpl += `...<span class=\"page-link\" id=\"page-link-${\n                    num_pages\n                }\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${num_pages}\">${\n                    num_pages\n                }</a></span>`;\n            }\n            tmpl += \"</span>\";\n\n            // Show all link\n            tmpl +=\n                '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                \"</td>\" +\n                \"</tr>\";\n        }\n\n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl +=\n                \"<tr>\" +\n                '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                \"<td></td>\" +\n                '<td colspan=\"100\">' +\n                'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n            // configure buttons for operations\n            for (var i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += `<input type=\"button\" value=\"${\n                        operation.label\n                    }\" class=\"operation-button action-button\">&nbsp;`;\n                }\n            }\n\n            // finalize template\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n\n        // add global operations\n        if (found_global) {\n            tmpl += \"<tr>\" + '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += `<a class=\"action-button\" href=\"${operation.global_operation}\">${operation.label}</a>`;\n                }\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // add legend\n        if (options.legend) {\n            tmpl += `<tr><td colspan=\"100\">${options.legend}</td></tr>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    message: function(options) {\n        var status = options.status;\n        if ([\"success\", \"ok\"].indexOf(status) != -1) {\n            status = \"done\";\n        }\n        return `<p><div class=\"${status}message transient-message\">${_.escape(\n            options.message\n        )}</div><div style=\"clear: both\"></div></p>`;\n    },\n\n    // template\n    grid_filters: function(options) {\n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = \"none\";\n        if (options.advanced_search) {\n            advanced_search_display = \"block\";\n        }\n\n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = \"block\";\n                }\n                show_advanced_search_link = true;\n            }\n        }\n\n        // hide standard search if advanced is shown\n        var standard_search_display = \"block\";\n        if (advanced_search_display == \"block\") {\n            standard_search_display = \"none\";\n        }\n\n        //\n        // standard search\n        //\n        var tmpl = `<div id=\"standard-search\" style=\"display: ${\n            standard_search_display\n        };\"><table><tr><td style=\"padding: 0;\"><table>`;\n\n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"standard\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize standard search\n        tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n\n        // finalize standard search display\n        tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n        //\n        // advanced search\n        //\n        tmpl += `<div id=\"advanced-search\" style=\"display: ${\n            advanced_search_display\n        }; margin-top: 5px; border: 1px solid #ccc;\"><table><tr><td style=\"text-align: left\" colspan=\"100\"><a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a></td></tr>`;\n\n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize advanced search template\n        tmpl += \"</table>\" + \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    grid_column_filter: function(options, column) {\n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == \"advanced\") {\n            column_label = column_label.toLowerCase();\n        }\n\n        // start\n        var tmpl = \"<tr>\";\n\n        if (column.filterable == \"advanced\") {\n            tmpl += `<td align=\"left\" style=\"padding-left: 10px\">${column_label}:</td>`;\n        }\n        tmpl += '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl += `<form class=\"text-filter-form\" column_key=\"${column_key}\" action=\"${options.url}\" method=\"get\" >`;\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != \"All\") {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify(filter_value);\n                        }\n                        tmpl += `<input type=\"hidden\" id=\"${temp_column.key}\" name=\"f-${temp_column.key}\" value=\"${\n                            filter_value\n                        }\"/>`;\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n\n                // single filter value\n                if (type == \"string\") {\n                    if (column_filter != \"All\") {\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter);\n                    }\n                }\n\n                // multiple filter values\n                if (type == \"array\") {\n                    for (var i in column_filter) {\n                        // get filter\n                        var filter = column_filter[i];\n\n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl += this.filter_element(column_key, filter);\n                    }\n                }\n            }\n\n            // close span\n            tmpl += \"</span>\";\n\n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = \"\";\n            if (column.filterable == \"standard\") {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n\n            // print input field for column\n            tmpl += `<span class=\"search-box\"><input class=\"search-box-input\" id=\"input-${column_key}-filter\" name=\"f-${\n                column_key\n            }\" type=\"text\" placeholder=\"${value}\" size=\"${\n                size\n            }\"/><button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\"><i class=\"fa fa-search\"></i></button></span></form>`;\n        } else {\n            // filter criteria\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n\n                // each filter will have only a single argument, so get that single argument\n                var cf_key = \"\";\n                var cf_arg = \"\";\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n\n                // add seperator\n                if (seperator) {\n                    tmpl += \" | \";\n                }\n                seperator = true;\n\n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl += `<span class=\"categorical-filter ${column_key}-filter current-filter\">${cf_label}</span>`;\n                } else {\n                    tmpl += `<span class=\"categorical-filter ${\n                        column_key\n                    }-filter\"><a href=\"javascript:void(0);\" filter_key=\"${cf_key}\" filter_val=\"${cf_arg}\">${\n                        cf_label\n                    }</a></span>`;\n                }\n            }\n            tmpl += \"</span>\";\n        }\n        tmpl += \"</td>\" + \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return `<span class=\"text-filter-val\">${filter_value}<a href=\"javascript:void(0);\" filter_key=\"${\n            filter_key\n        }\" filter_val=\"${\n            filter_value\n        }\"><i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/></a></span>`;\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// trackster viewer\nimport * as _ from \"libs/underscore\";\nimport tracks from \"viz/trackster/tracks\";\nimport visualization from \"viz/visualization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport query_string from \"utils/query-string-parsing\";\nimport GridView from \"mvc/grid/grid-view\";\nimport mod_utils from \"utils/utils\";\nimport \"libs/jquery/jquery.event.drag\";\nimport \"libs/jquery/jquery.event.hover\";\nimport \"libs/jquery/jquery.mousewheel\";\nimport \"libs/jquery/jquery-ui\";\nimport \"libs/jquery/select2\";\nimport \"libs/farbtastic\";\nimport \"libs/jquery/jquery.form\";\nimport \"libs/jquery/jquery.rating\";\nimport \"ui/editable-text\";\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if (this.initialize) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function(baseURL) {\n        mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n        mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n        mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n        mod_utils.cssLoadFile(\"static/style/library.css\");\n        mod_utils.cssLoadFile(\"static/style/trackster.css\");\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this)\n                    .children(\".position\")\n                    .text(),\n                annotation: $(this)\n                    .children(\".annotation\")\n                    .text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = view.overview_drawable ? view.overview_drawable.config.get_value(\"name\") : null;\n\n        var viz_config = {\n            view: view.to_dict(),\n            viewport: {\n                chrom: view.chrom,\n                start: view.low,\n                end: view.high,\n                overview: overview_track_name\n            },\n            bookmarks: bookmarks\n        };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: `${Galaxy.root}visualization/save`,\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: view.vis_id,\n                title: view.config.get_value(\"name\"),\n                dbkey: view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        })\n            .success(vis_info => {\n                Galaxy.modal.hide();\n                view.vis_id = vis_info.vis_id;\n                view.has_changes = false;\n\n                // Needed to set URL when first saving a visualization.\n                window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n            })\n            .error(() => {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Could Not Save\",\n                    body: \"Could not save visualization. Please try again later.\",\n                    buttons: {\n                        Cancel: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: \"Add tracks\",\n                    on_click: function() {\n                        visualization.select_datasets({ dbkey: view.dbkey }, new_tracks => {\n                            _.each(new_tracks, track => {\n                                view.add_drawable(tracks.object_from_template(track, view, view));\n                            });\n                        });\n                    }\n                },\n                {\n                    icon_class: \"block--plus\",\n                    title: \"Add group\",\n                    on_click: function() {\n                        view.add_drawable(\n                            new tracks.DrawableGroup(view, view, {\n                                name: \"New Group\"\n                            })\n                        );\n                    }\n                },\n                {\n                    icon_class: \"bookmarks\",\n                    title: \"Bookmarks\",\n                    on_click: function() {\n                        // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                        force_right_panel($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\");\n                    }\n                },\n                {\n                    icon_class: \"globe\",\n                    title: \"Circster\",\n                    on_click: function() {\n                        window.location = `${self.baseURL}visualization/circster?id=${view.vis_id}`;\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: \"Save\",\n                    on_click: function() {\n                        self.save_viz();\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        self.handle_unsaved_changes(view);\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\");\n\n        var new_bookmark = $(\"<div/>\")\n            .addClass(\"bookmark\")\n            .appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\")\n            .addClass(\"position\")\n            .appendTo(new_bookmark);\n\n        var position_link = $(\"<a href=''/>\")\n            .text(position)\n            .appendTo(position_div)\n            .click(() => {\n                view.go_to(position);\n                return false;\n            });\n\n        var annotation_div = $(\"<div/>\")\n            .text(annotation)\n            .appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\")\n                .addClass(\"delete-icon-container\")\n                .prependTo(new_bookmark)\n                .click(() => {\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                });\n\n            var delete_icon = $(\"<a href=''/>\")\n                .addClass(\"icon-button delete\")\n                .appendTo(delete_icon_container);\n\n            annotation_div\n                .make_text_editable({\n                    num_rows: 3,\n                    use_textarea: true,\n                    help_text: \"Edit bookmark note\"\n                })\n                .addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n        // Create view.\n        var self = this;\n\n        var view = new tracks.TracksterView(_.extend(view_config, { header: false }));\n\n        view.editor = true;\n        $.when(view.load_chroms_deferred).then(chrom_info => {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom;\n                var start = viewport_config.start;\n                var end = viewport_config.end;\n                var overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config;\n\n                var drawable_type;\n                var drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable(tracks.object_from_template(drawables_config[i], view, view));\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (view.drawables[i].config.get_value(\"name\") === overview_drawable_name) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(bookmark[\"position\"], bookmark[\"annotation\"], editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: view });\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router: function(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(e => {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": function() {\n                        $(window).off(\"beforeunload\");\n                        window.location = `${Galaxy.root}visualization`;\n                    },\n                    Save: function() {\n                        $.when(self.save_viz()).then(() => {\n                            window.location = `${Galaxy.root}visualization`;\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = `${Galaxy.root}visualization`;\n        }\n    }\n});\n\nvar TracksterView = Backbone.View.extend({\n    // initalize trackster\n    initialize: function() {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\n            \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n        );\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(() => {\n            view.resize_window();\n        });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id) {\n            this.view_existing();\n        } else if (query_string.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new: function() {\n        var self = this;\n        var dbkey = query_string.get(\"dbkey\");\n        var listTracksParams = {};\n\n        var dataset_params = {\n            dbkey: dbkey,\n            dataset_id: query_string.get(\"dataset_id\"),\n            hda_ldda: query_string.get(\"hda_ldda\"),\n            gene_region: query_string.get(\"gene_region\")\n        };\n\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body: `<p><ul style='list-style: disc inside none'>You can add this dataset as:<li>a new track to one of your existing, saved Trackster sessions if they share the genome build: <b>${dbkey ||\n                \"Not available.\"}</b></li><li>or create a new session with this dataset as the only track</li></ul></p>`,\n            buttons: {\n                Cancel: function() {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"View in saved visualization\": function() {\n                    self.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": function() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved: function(dataset_params) {\n        var tracks_grid = new GridView({\n            url_base: `${Galaxy.root}visualization/list_tracks`,\n            dict_format: true,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: \"Add Data to Saved Visualization\",\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: function() {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"Add to visualization\": function() {\n                    $(parent.document)\n                        .find(\"input[name=id]:checked\")\n                        .each(function() {\n                            dataset_params.id = $(this).val();\n                            window.location = `${Galaxy.root}visualization/trackster?${$.param(dataset_params)}`;\n                        });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing: function() {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: viz_config.title,\n                vis_id: viz_config.vis_id,\n                dbkey: viz_config.dbkey\n            },\n            viz_config.viewport,\n            viz_config.tracks,\n            viz_config.bookmarks,\n            true\n        );\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new: function() {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax({\n            url: `${Galaxy.root}api/genomes?chrom_info=True`,\n            data: {},\n            error: function() {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: function(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"New Visualization\",\n                    body: self.template_view_new(response),\n                    buttons: {\n                        Cancel: function() {\n                            window.location = `${Galaxy.root}visualizations/list`;\n                        },\n                        Create: function() {\n                            self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val());\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(r => r[1]);\n                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes, galaxy_config.app.default_dbkey)) {\n                    $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response) {\n        // start template\n        var html =\n            '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-title\">Browser name:</label>' +\n            '<div class=\"form-row-input\">' +\n            '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n            '<div class=\"form-row-input\">' +\n            '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += `<option value=\"${response[i][1]}\">${response[i][0]}</option>`;\n        }\n\n        // close selection/finalize template\n        html += `</select></div><div style=\"clear: both;\"></div></div><div class=\"form-row\">Is the build not listed here? <a href=\"${\n            Galaxy.root\n        }user/dbkeys?use_panels=True\">Add a Custom Build</a></div></form>`;\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser: function(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: name,\n                dbkey: dbkey\n            },\n            galaxy_config.app.gene_region\n        );\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor: function() {\n        // set title\n        $(\"#center .unified-panel-title\").text(`${view.config.get_value(\"name\")} (${view.dbkey})`);\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url: `${Galaxy.root}api/datasets/${galaxy_config.app.add_dataset}`,\n                data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                dataType: \"json\",\n                success: function(track_data) {\n                    view.add_drawable(tracks.object_from_template(track_data, view, view));\n                }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(() => {\n            // add new bookmark.\n            var position = `${view.chrom}:${view.low}-${view.high}`;\n\n            var annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on(\"beforeunload\", () => {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nexport default {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/trackster.js","import * as _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = (element, obj) => {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = (element, handle_class, container_selector, element_js_obj) => {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: `.${handle_class}`, relative: true }, function(e, d) {\n            var element = $(this);\n            var parent = $(this).parent();\n\n            var // Only sorting amongst tracks and groups.\n            children = parent.children(\".track,.group\");\n\n            var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n            var child;\n            var container;\n            var top;\n            var bottom;\n            var i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(this_obj, cur_container);\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (child.is(container_selector) && this !== child.get(0) && d.offsetY >= top && d.offsetY <= bottom) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\"))\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\nERROR_PADDING = 20;\n\nvar // Maximum number of rows un a slotted track\nMAX_FEATURE_DEPTH = 100;\n\nvar // Minimum width for window for squish to be used.\nMIN_SQUISH_VIEW_WIDTH = 12000;\n\nvar // Number of pixels per tile, not including left offset.\nTILE_SIZE = 400;\n\nvar DEFAULT_DATA_QUERY_WAIT = 5000;\n\nvar // Maximum number of chromosomes that are selectable at any one time.\nMAX_CHROMS_SELECTABLE = 100;\n\nvar DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nvar DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nvar DATA_NONE = \"No data for this chrom/contig.\";\n\nvar DATA_PENDING =\n    \"Preparing data. This can take a while for a large dataset. \" +\n    \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nvar DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\nvar DATA_LOADING = \"Loading data...\";\nvar DATA_OK = \"Ready for display\";\nvar TILE_CACHE_SIZE = 10;\nvar DATA_CACHE_SIZE = 20;\n\nvar // Numerical/continuous data display modes.\nCONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            () => {\n                icons_div.show();\n            },\n            () => {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", `group_${this.id}_content_div`)\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: \"Show composite track\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                } else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\")\n            .addClass(\"group\")\n            .attr(\"id\", `group_${this.id}`);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function() {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        } else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        } else {\n            // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i;\n\n            var j;\n            var drawable;\n            var same_type = true;\n            var a_type = this.drawables[0].get_type();\n            var num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            } else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {};\n\n                var filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var filters;\n                var new_filter;\n                var min;\n                var max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter({\n                            name: filters[0].name,\n                            index: filters[0].index\n                        });\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            } else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                var drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value(\"name\"),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), {\n            filters: this.filters_manager.to_dict()\n        });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, d => {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(this.container.get(0).ownerDocument);\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(() => {\n                visualization.select_datasets({ dbkey: view.dbkey }, tracks => {\n                    _.each(tracks, track => {\n                        view.add_drawable(object_from_template(track, view, view));\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(() => {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(`${view.chrom}:${view.low}-${view.high}`);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), t =>\n                        t.data_manager.search_features(request.term).success(dataset_features => {\n                            all_features = all_features.concat(dataset_features);\n                        })\n                    );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(() => {\n                        response(\n                            $.map(all_features, feature => ({\n                                label: feature[0],\n                                value: feature[1]\n                            }))\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", () => {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low));\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(() => {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", (e, d) => {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", (e, d) => {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1)\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", (e, d) => {\n                $(d.proxy).css({\n                    left: Math.min(e.pageX, d.startX) - view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n\n                var min = Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n                var max = Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", (e, d) => {\n                var min = Math.min(e.pageX, d.startX);\n                var max = Math.max(e.pageX, d.startX);\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                var old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(new LabelTrack(this, { content_div: this.top_labeltrack }));\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(() => {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", () => {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(`${base.toLowerCase()}_color`) || this.config.get_value(\"n_color\");\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(() => {\n                self.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n            }, 500);\n        } else {\n            view.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(`${util.commatize(low)} - ${util.commatize(high)}`);\n        this.nav_input.val(`${this.chrom}:${util.commatize(low)}-${util.commatize(high)}`);\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this;\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: `${Galaxy.root}api/genomes/${this.dbkey}`,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($(`<option value=\"previous\">Previous ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($(`<option value=\"next\">Next ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(`Could not load chroms for this dbkey: ${view.dbkey}`);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(() => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, (v, i) => v.chrom === chrom)[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, () => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(() => {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", () => {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, track => {\n            var track_options = _.find(view.tracks_to_be_redrawn, to => to[0] === track);\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(() => {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = this.low / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var width_px = (this.high - this.low) / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px) / 2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, track_options => {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, label_track => {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() - this.top_container.height() - this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = () => {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() + view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", e => {\n                e.stopPropagation();\n            })\n            .click(e => {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", e => {\n                e.stopPropagation();\n            })\n            .keydown(e => {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(param => {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(() => {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(() => {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            track_data => {\n                Galaxy.modal.show({\n                    title: `${tool.get(\"name\")} is Running`,\n                    body: `${tool.get(\n                        \"name\"\n                    )} is running on the complete dataset. Tool outputs are in dataset's history.`,\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new visualization.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        var current_track = track;\n\n        var // Set name of track to include tool name, parameters, and region used.\n        track_name = tool.get(\"name\") + current_track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track, track_data => {\n            new_track.set_dataset(new data.Dataset(track_data));\n            new_track.tiles_div.text(\"Running job.\");\n            new_track.init();\n        });\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: `${Galaxy.root}api/tools`,\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(response => {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (parseFloat(feature_data[this.filter.index]) - this.filter.low) / (this.filter.high - this.filter.low);\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = () => {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = () => {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = () => {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait = \"data_query_wait\" in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value(\"name\") + track.tool_region_and_parameters_str());\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html = `<strong>Tool</strong>:${track.tool.get(\n                    \"name\"\n                )}<br/><strong>Dataset</strong>:${track.config.get_value(\n                    \"name\"\n                )}<br/><strong>Region(s)</strong>: <select name=\"regions\"><option value=\"cur\">current viewing area</option><option value=\"bookmarks\">bookmarks</option><option value=\"both\">current viewing area and bookmarks</option></select>`;\n\n                var cancel_fn = () => {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                };\n\n                var ok_fn = () => {\n                    var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                        regions,\n                        view_region = new visualization.GenomeRegion({\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high\n                        }),\n                        bookmarked_regions = _.map(\n                            $(\".bookmark\"),\n                            elt =>\n                                new visualization.GenomeRegion({\n                                    from_str: $(elt)\n                                        .children(\".position\")\n                                        .text()\n                                })\n                        );\n\n                    // Get regions for visualization.\n                    if (regions_to_use === \"cur\") {\n                        // Use only current region.\n                        regions = [view_region];\n                    } else if (regions_to_use === \"bookmarks\") {\n                        // Use only bookmarks.\n                        regions = bookmarked_regions;\n                    } else {\n                        // Use both current region and bookmarks.\n                        regions = [view_region].concat(bookmarked_regions);\n                    }\n\n                    Galaxy.modal.hide();\n\n                    // Go to visualization.\n                    window.location.href = `${Galaxy.root}visualization/sweepster?${$.param({\n                        dataset_id: track.dataset.id,\n                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                        regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                    })}`;\n                };\n\n                var check_enter_esc = e => {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", `track_${this.id}`);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            () => {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            () => {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", (e, d) => {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", (e, d) => {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px = track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", (e, d) => {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, result => {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(() => {\n                                Galaxy.modal.show({\n                                    title: \"Trackster Error\",\n                                    body: `<pre>${result.message}</pre>`,\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(() => {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined && (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(() => {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\"height\", `${track.visible_height_px}px`);\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(() => {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, \"filters\" in obj_dict ? obj_dict.filters : null);\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: ${track.mode})`);\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return `${w_scale}_${tile_region}`;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(tile => {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(() => {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, t => t !== null);\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this;\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(`.yaxislabel.${css_class}`);\n        var value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            (() => {\n                track.request_draw({ clear_tile_cache: true });\n            });\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: `Set ${text} value`\n                })\n                .addClass(`yaxislabel ${css_class}`)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, tile => tile instanceof LineTrackTile);\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, tile => {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, tile => tile.has_icons);\n\n            if (icons_present) {\n                _.each(tiles, tile => {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var // Useful vars.\n        track = this;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = o => o && \"track\" in o;\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = () => {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, m => m === mode) ? \"Coverage\" : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, (\n                d // Get the track data/promise.\n            ) => d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params));\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(() => {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, d => util.is_deferred(d))) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(tile => {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n\n            var drawing_heights = [];\n\n            _.each(drawables, (d, i) => {\n                var mode = d.mode;\n                var data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var all_data_index = 0;\n\n            var width = Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset;\n\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, (d, i) => {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ([undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ([undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1) {\n            this.config.set_value(\"max_value\", _.max(_.map(result.data, d => d[1])) || 0);\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new painters.LinePainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this;\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round((tile.low - (this.is_overview ? this.view.max_low : this.view.low)) * w_scale);\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", `${this.max_height_px}px`);\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", `${track_height}px`);\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return ` - region=[${region_str}], parameters=[${param_str}]`;\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (data.dataset_type === \"bigwig\" || data.extra_info === \"no_detail\") {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(Math.pow(10, Math.floor(Math.log(range) / Math.log(10))));\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor((position - view.low) / range * width);\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, d => {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, d => {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(() => {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, d => d.config.get_value(\"min_value\")));\n\n        var max = _.max(_.map(this.drawables, d => d.config.get_value(\"max_value\")));\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this;\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = () => {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = `${Galaxy.root}api/genomes/${this.view.dbkey}`;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(`${Galaxy.root}datasets/${this.dataset.id}/display`)).then(supportsByteRanges => {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"pos_color\",\n                label: \"Positive Color\",\n                type: \"color\",\n                default_value: \"#FF8C00\"\n            },\n            {\n                key: \"neg_color\",\n                label: \"Negative Color\",\n                type: \"color\",\n                default_value: \"#4169E1\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 500,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n            }\n        );\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas;\n\n        var painter = new painters.DiagonalHeatmapPainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help: \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this;\n        var i;\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), inc_features => {\n                _.each(inc_features, feature => {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, tile => {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, f => f[0])\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = self.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(features, tile.mode, tile.w_scale, 100)\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (filter.applies_to(example_feature) && filter.min !== filter.max) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: Auto/${mode})`);\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(level, mode, MAX_FEATURE_DEPTH, x => dummy_context.measureText(x));\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width));\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n            ? new FilterScaler(this.filters_manager.alpha_filter)\n            : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter\n            ? new FilterScaler(this.filters_manager.height_filter)\n            : null;\n\n        var painter = new this.painter(\n            filtered,\n            tile_low,\n            tile_high,\n            this.config.to_key_value_dict(),\n            mode,\n            filter_alpha_scaler,\n            filter_height_scaler,\n            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n            ref_seq,\n            b => track.view.get_base_color(b)\n        );\n\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode,\n                b => view.get_base_color(b)\n            );\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": `${font_size}px`,\n                            top: `${(this.config.get_value(\"summary_height\") - font_size) / 2}px`\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = `${this.mode === \"Squish\" ? 5 : 10}px`;\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"detail_block_color\",\n                label: \"Sense strand block color\",\n                type: \"color\",\n                default_value: \"#AAAAAA\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand block color\",\n                type: \"color\",\n                default_value: \"#DDDDDD\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_insertions\",\n                label: \"Show insertions\",\n                type: \"bool\",\n                default_value: false\n            },\n            {\n                key: \"show_differences\",\n                label: \"Show differences only\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = (template, view, container) => {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/trackster/tracks.js","import * as _ from \"libs/underscore\";\n/**\n * View for track/group header.\n */\nvar TrackHeaderView = Backbone.View.extend({\n    className: \"track-header\",\n\n    initialize: function() {\n        // Watch and update name changes.\n        this.model.config.get(\"name\").on(\"change:value\", this.update_name, this);\n        this.render();\n    },\n\n    render: function() {\n        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n        this.$el.append(\n            $(\"<div/>\")\n                .addClass(\"track-name\")\n                .text(this.model.config.get_value(\"name\"))\n        );\n\n        // Icons container.\n        this.action_icons = {};\n        this.render_action_icons();\n\n        // Suppress double clicks in header so that they do not impact viz under header.\n        this.$el.dblclick(e => {\n            e.stopPropagation();\n        });\n\n        // Needed for floating elts in header.\n        this.$el.append($(\"<div style='clear: both'/>\"));\n    },\n\n    update_name: function() {\n        this.$el.find(\".track-name\").text(this.model.config.get_value(\"name\"));\n    },\n\n    render_action_icons: function() {\n        var self = this;\n        this.icons_div = $(\"<div/>\")\n            .addClass(\"track-icons\")\n            .hide()\n            .appendTo(this.$el);\n        _.each(this.model.action_icons_def, icon_dict => {\n            self.add_action_icon(\n                icon_dict.name,\n                icon_dict.title,\n                icon_dict.css_class,\n                icon_dict.on_click_fn,\n                icon_dict.prepend,\n                icon_dict.hide\n            );\n        });\n\n        // Set up behavior for modes popup.\n        this.set_display_modes(this.model.display_modes);\n    },\n\n    /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n    add_action_icon: function(name, title, css_class, on_click_fn, prepend, hide) {\n        var self = this;\n        this.action_icons[name] = $(\"<a/>\")\n            .attr(\"title\", title)\n            .addClass(\"icon-button\")\n            .addClass(css_class)\n            .tooltip()\n            .click(() => {\n                on_click_fn(self.model);\n            })\n            .appendTo(this.icons_div);\n        if (hide) {\n            this.action_icons[name].hide();\n        }\n    },\n\n    /**\n     * Set track's modes and update mode icon popup.\n     */\n    set_display_modes: function(new_modes, init_mode) {\n        if (!new_modes) {\n            return;\n        }\n\n        // HACK: move this out of view and into track.\n\n        // Set modes, init mode.\n        this.model.display_modes = new_modes;\n        this.model.mode = init_mode || this.model.config.get_value(\"mode\") || this.model.display_modes[0];\n\n        this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: ${this.mode})`);\n\n        // Setup popup menu for changing modes.\n        var self = this;\n\n        var track = this.model;\n        var mode_mapping = {};\n        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n            var mode = track.display_modes[i];\n            mode_mapping[mode] = (mode => () => {\n                track.change_mode(mode);\n                // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                // icons div for now.\n                //self.icons_div.show();\n                //track.container_div.mouseleave(function() { track.icons_div.hide(); } );\n            })(mode);\n        }\n\n        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n    }\n});\n\nexport default {\n    TrackHeaderView: TrackHeaderView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/viz_views.js","import * as _ from \"libs/underscore\";\nvar extend = _.extend;\n\n// HACK: LABEL_SPACING is currently duplicated between here and painters\nvar LABEL_SPACING = 2;\n\nvar PACK_SPACING = 5;\n\n/**\n * Hold slotting information for a feature.\n */\nvar SlottedInfo = function(slot, feature) {\n    this.slot = slot;\n    this.feature = feature;\n};\n\n/**\n * FeatureSlotter determines slots in which to draw features for vertical\n * packing.\n *\n * This implementation is incremental, any feature assigned a slot will be\n * retained for slotting future features.\n */\nvar FeatureSlotter = function(w_scale, mode, max_rows, measureText) {\n    this.slots = {};\n    this.start_end_dct = {};\n    this.w_scale = w_scale;\n    this.mode = mode;\n    this.include_label = mode === \"Pack\";\n    this.max_rows = max_rows;\n    this.measureText = measureText;\n};\n\n/**\n * Slot a set of features, `this.slots` will be updated with slots by id, and\n * the largest slot required for the passed set of features is returned\n */\nextend(FeatureSlotter.prototype, {\n    /**\n     * Get drawing coordinate for a feature.\n     */\n    _get_draw_coords: function(feature) {\n        // Get initial draw coordinates using w_scale.\n        var draw_start = Math.floor(feature[1] * this.w_scale);\n\n        var draw_end = Math.ceil(feature[2] * this.w_scale);\n        var f_name = feature[3];\n        var text_align;\n\n        // Update start, end drawing locations to include feature name.\n        // Try to put the name on the left, if not, put on right.\n        if (f_name !== undefined && this.include_label) {\n            // Add gap for label spacing and extra pack space padding\n            // TODO: Fix constants\n            var text_len = this.measureText(f_name).width + (LABEL_SPACING + PACK_SPACING);\n            if (draw_start - text_len >= 0) {\n                draw_start -= text_len;\n                text_align = \"left\";\n            } else {\n                draw_end += text_len;\n                text_align = \"right\";\n            }\n        }\n\n        /*\n        if (slot_num < 0) {\n            \n            TODO: this is not yet working --\n            console.log(feature_uid, \"looking for slot with text on the right\");\n            // Slot not found. If text was on left, try on right and see\n            // if slot can be found.\n            // TODO: are there any checks we need to do to ensure that text\n            // will fit on tile?\n            if (text_align === \"left\") {\n                draw_start -= text_len;\n                draw_end -= text_len;\n                text_align = \"right\";\n                slot_num = find_slot(draw_start, draw_end);\n            }\n            if (slot_num >= 0) {\n                console.log(feature_uid, \"found slot with text on the right\");\n            }\n\n        }\n        */\n\n        return [draw_start, draw_end];\n    },\n\n    /**\n     * Find the first slot such that current feature doesn't overlap any other features in that slot.\n     * Returns -1 if no slot was found.\n     */\n    _find_slot: function(draw_coords) {\n        // TODO: Use a data structure for faster searching of available slots.\n        var draw_start = draw_coords[0];\n\n        var draw_end = draw_coords[1];\n        for (var slot_num = 0; slot_num <= this.max_rows; slot_num++) {\n            var has_overlap = false;\n            var slot = this.start_end_dct[slot_num];\n            if (slot !== undefined) {\n                // Iterate through features already in slot to see if current feature will fit.\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    var s_e = slot[k];\n                    if (draw_end > s_e[0] && draw_start < s_e[1]) {\n                        // There is overlap\n                        has_overlap = true;\n                        break;\n                    }\n                }\n            }\n            if (!has_overlap) {\n                return slot_num;\n            }\n        }\n        return -1;\n    },\n\n    /**\n     * Slot features.\n     */\n    slot_features: function(features) {\n        var start_end_dct = this.start_end_dct;\n        var undone = [];\n        var highest_slot = 0;\n        var feature;\n        var feature_uid;\n\n        // Loop through features to (a) find those that are not yet slotted and (b) update\n        // those that are slotted if new information is availabe. For (a), features already\n        // slotted (based on slotting from other tiles) will retain their current slot.\n        for (var i = 0, len = features.length; i < len; i++) {\n            feature = features[i];\n            feature_uid = feature[0];\n            var slotted_info = this.slots[feature_uid];\n\n            // Separate and handle slotted vs. unslotted features.\n            if (slotted_info) {\n                // Feature is slotted; if feature now has larger start/end coordinates,\n                // update drawing coordinates.\n                if (feature[1] < slotted_info.feature[1] || slotted_info.feature[2] < feature[2]) {\n                    // Feature has changed (e.g. a single read now has its pair), so recalculate its\n                    // drawing coordinates.\n                    var old_draw_coords = this._get_draw_coords(slotted_info.feature);\n\n                    var new_draw_coords = this._get_draw_coords(feature);\n                    var slotted_coords = this.start_end_dct[slotted_info.slot];\n                    for (var k = 0; k < slotted_coords.length; k++) {\n                        var dc = slotted_coords[k];\n                        if (dc[0] === old_draw_coords[0] && dc[1] === old_draw_coords[1]) {\n                            // Replace old drawing coordinates with new ones.\n                            slotted_coords[k] = new_draw_coords;\n                        }\n                    }\n                }\n                highest_slot = Math.max(highest_slot, this.slots[feature_uid].slot);\n            } else {\n                undone.push(i);\n            }\n        }\n\n        // Slot unslotted features.\n\n        // Do slotting.\n        for (var i = 0, len = undone.length; i < len; i++) {\n            feature = features[undone[i]];\n            feature_uid = feature[0];\n            var draw_coords = this._get_draw_coords(feature);\n\n            // Find slot.\n            var slot_num = this._find_slot(draw_coords);\n\n            // Do slotting.\n            if (slot_num >= 0) {\n                // Add current feature to slot.\n                if (start_end_dct[slot_num] === undefined) {\n                    start_end_dct[slot_num] = [];\n                }\n                start_end_dct[slot_num].push(draw_coords);\n                this.slots[feature_uid] = new SlottedInfo(slot_num, feature);\n                highest_slot = Math.max(highest_slot, slot_num);\n            }\n        }\n\n        // Debugging: view slots data.\n        /*\n        for (var i = 0; i < MAX_FEATURE_DEPTH; i++) {\n            var slot = start_end_dct[i];\n            if (slot !== undefined) {\n                console.log(i, \"*************\");\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    console.log(\"\\t\", slot[k][0], slot[k][1]);\n                }\n            }\n        }\n        */\n        return highest_slot + 1;\n    }\n});\n\nexport default {\n    FeatureSlotter: FeatureSlotter\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/trackster/slotting.js","import * as _ from \"libs/underscore\";\n\n/**\n * Compute the type of overlap between two regions. They are assumed to be on the same chrom/contig.\n * The overlap is computed relative to the second region; hence, OVERLAP_START indicates that the first\n * region overlaps the start (but not the end) of the second region.\n * NOTE: Coordinates are assumed to be in BED format: half open (start is closed, end is open).\n */\nvar BEFORE = 1001;\n\nvar CONTAINS = 1002;\nvar OVERLAP_START = 1003;\nvar OVERLAP_END = 1004;\nvar CONTAINED_BY = 1005;\nvar AFTER = 1006;\nvar compute_overlap = (first_region, second_region) => {\n    var first_start = first_region[0];\n    var first_end = first_region[1];\n    var second_start = second_region[0];\n    var second_end = second_region[1];\n    var overlap;\n    if (first_start < second_start) {\n        if (first_end <= second_start) {\n            overlap = BEFORE;\n        } else if (first_end <= second_end) {\n            overlap = OVERLAP_START;\n        } else {\n            // first_end > second_end\n            overlap = CONTAINS;\n        }\n    } else {\n        // first_start >= second_start\n        if (first_start > second_end) {\n            overlap = AFTER;\n        } else if (first_end <= second_end) {\n            overlap = CONTAINED_BY;\n        } else {\n            overlap = OVERLAP_END;\n        }\n    }\n\n    return overlap;\n};\n\n/**\n * Returns true if regions overlap.\n */\nvar is_overlap = (first_region, second_region) => {\n    var overlap = compute_overlap(first_region, second_region);\n    return overlap !== BEFORE && overlap !== AFTER;\n};\n\n/**\n * Draw a dashed line on a canvas using filled rectangles. This function is based on:\n * http://vetruvet.blogspot.com/2010/10/drawing-dashed-lines-on-html5-canvas.html\n * However, that approach uses lines, which don't seem to render as well, so use\n * rectangles instead.\n */\nvar dashedLine = (ctx, x1, y1, x2, y2, dashLen) => {\n    if (dashLen === undefined) {\n        dashLen = 4;\n    }\n    var dX = x2 - x1;\n    var dY = y2 - y1;\n    var dashes = Math.floor(Math.sqrt(dX * dX + dY * dY) / dashLen);\n    var dashX = dX / dashes;\n    var dashY = dY / dashes;\n    var q;\n\n    for (q = 0; q < dashes; q++, x1 += dashX, y1 += dashY) {\n        if (q % 2 !== 0) {\n            continue;\n        }\n        ctx.fillRect(x1, y1, dashLen, 1);\n    }\n};\n\n/**\n * Draw an isosceles triangle that points down.\n */\nvar drawDownwardEquilateralTriangle = function(ctx, down_vertex_x, down_vertex_y, side_len) {\n    // Compute other two points of triangle.\n    var x1 = down_vertex_x - side_len / 2;\n\n    var x2 = down_vertex_x + side_len / 2;\n    var y = down_vertex_y - Math.sqrt(side_len * 3 / 2);\n\n    // Draw and fill.\n    ctx.beginPath();\n    ctx.moveTo(x1, y);\n    ctx.lineTo(x2, y);\n    ctx.lineTo(down_vertex_x, down_vertex_y);\n    ctx.lineTo(x1, y);\n\n    ctx.strokeStyle = this.fillStyle;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n};\n\n/**\n * Base class for all scalers. Scalers produce values that are used to change (scale) drawing attributes.\n */\nvar Scaler = function(default_val) {\n    this.default_val = default_val ? default_val : 1;\n};\n\n/**\n * Produce a scaling value.\n */\nScaler.prototype.gen_val = function(input) {\n    return this.default_val;\n};\n\n/**\n * Results from painter.draw()\n */\nvar DrawResults = function(options) {\n    this.incomplete_features = options.incomplete_features;\n    this.feature_mapper = options.feature_mapper;\n};\n\n/**\n * Base class for painters\n *\n * -- Mode and prefs are both optional\n */\nvar Painter = function(data, view_start, view_end, prefs, mode) {\n    // Data and data properties\n    this.data = data;\n    // View\n    this.view_start = view_start;\n    this.view_end = view_end;\n    // Drawing prefs\n    this.prefs = _.extend({}, this.default_prefs, prefs);\n    this.mode = mode;\n};\n\nPainter.prototype.default_prefs = {};\n\n/**\n * Draw on the context using a rectangle of width x height using scale w_scale.\n */\nPainter.prototype.draw = (ctx, width, height, w_scale) => {};\n\n/**\n * Get starting drawing position, which is offset a half-base left of coordinate.\n */\nPainter.prototype.get_start_draw_pos = function(chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, -0.5);\n};\n\n/**\n * Get end drawing position, which is offset a half-base right of coordinate.\n */\nPainter.prototype.get_end_draw_pos = function(chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0.5);\n};\n\n/**\n * Get drawing position.\n */\nPainter.prototype.get_draw_pos = function(chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0);\n};\n\n/**\n * Convert chromosome position to drawing position.\n */\nPainter.prototype._chrom_pos_to_draw_pos = function(chrom_pos, w_scale, offset) {\n    return Math.floor(w_scale * (Math.max(0, chrom_pos - this.view_start) + offset));\n};\n\nvar LinePainter = function(data, view_start, view_end, prefs, mode) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n};\n\nLinePainter.prototype.default_prefs = {\n    min_value: undefined,\n    max_value: undefined,\n    mode: \"Histogram\",\n    color: \"#000\",\n    overflow_color: \"#F66\"\n};\n\nLinePainter.prototype.draw = function(ctx, width, height, w_scale) {\n    var in_path = false;\n    var min_value = this.prefs.min_value;\n    var max_value = this.prefs.max_value;\n    var vertical_range = max_value - min_value;\n    var height_px = height;\n    var view_start = this.view_start;\n    var mode = this.mode;\n    var data = this.data;\n\n    ctx.save();\n\n    // Pixel position of 0 on the y axis\n    var y_zero = Math.round(height + min_value / vertical_range * height);\n\n    // Horizontal line to denote x-axis\n    if (mode !== \"Intensity\") {\n        ctx.fillStyle = \"#aaa\";\n        ctx.fillRect(0, y_zero, width, 1);\n    }\n\n    ctx.beginPath();\n    var x_scaled;\n    var y;\n    var delta_x_pxs;\n    if (data.length > 1) {\n        delta_x_pxs = _.map(data.slice(0, -1), (d, i) => Math.ceil((data[i + 1][0] - data[i][0]) * w_scale));\n    } else {\n        delta_x_pxs = [10];\n    }\n\n    // Painter color can be in either block_color (FeatureTrack) or color pref (LineTrack).\n    var painter_color = this.prefs.block_color || this.prefs.color;\n\n    var // Extract RGB from preference color.\n    pref_color = parseInt(painter_color.slice(1), 16);\n\n    var pref_r = (pref_color & 0xff0000) >> 16;\n    var pref_g = (pref_color & 0x00ff00) >> 8;\n    var pref_b = pref_color & 0x0000ff;\n    var top_overflow = false;\n    var bot_overflow = false;\n\n    // Paint track.\n    var delta_x_px;\n    for (var i = 0, len = data.length; i < len; i++) {\n        // Reset attributes for next point.\n        ctx.fillStyle = ctx.strokeStyle = painter_color;\n        top_overflow = bot_overflow = false;\n        delta_x_px = delta_x_pxs[i];\n\n        x_scaled = Math.floor((data[i][0] - view_start - 0.5) * w_scale);\n        y = data[i][1];\n\n        // Process Y (scaler) value.\n        if (y === null) {\n            if (in_path && mode === \"Filled\") {\n                ctx.lineTo(x_scaled, height_px);\n            }\n            in_path = false;\n            continue;\n        }\n\n        // Bound Y value by min, max.\n        if (y < min_value) {\n            bot_overflow = true;\n            y = min_value;\n        } else if (y > max_value) {\n            top_overflow = true;\n            y = max_value;\n        }\n\n        // Draw point.\n        if (mode === \"Histogram\") {\n            // y becomes the bar height in pixels, which is the negated for canvas coords\n            y = Math.round(y / vertical_range * height_px);\n            ctx.fillRect(x_scaled, y_zero, delta_x_px, -y);\n        } else if (mode === \"Intensity\") {\n            var saturation = (y - min_value) / vertical_range;\n\n            var // Range is [pref_color, 255] where saturation = 0 --> 255 and saturation = 1 --> pref color\n            new_r = Math.round(pref_r + (255 - pref_r) * (1 - saturation));\n\n            var new_g = Math.round(pref_g + (255 - pref_g) * (1 - saturation));\n            var new_b = Math.round(pref_b + (255 - pref_b) * (1 - saturation));\n            ctx.fillStyle = `rgb(${new_r},${new_g},${new_b})`;\n            ctx.fillRect(x_scaled, 0, delta_x_px, height_px);\n        } else {\n            // mode is Coverage/Line or Filled.\n\n            // Scale Y value.\n            y = Math.round(height_px - (y - min_value) / vertical_range * height_px);\n            if (in_path) {\n                ctx.lineTo(x_scaled, y);\n            } else {\n                in_path = true;\n                if (mode === \"Filled\") {\n                    ctx.moveTo(x_scaled, height_px);\n                    ctx.lineTo(x_scaled, y);\n                } else {\n                    ctx.moveTo(x_scaled, y);\n                    // Use this approach (note: same as for filled) to draw line from 0 to\n                    // first data point.\n                    //ctx.moveTo(x_scaled, height_px);\n                    //ctx.lineTo(x_scaled, y);\n                }\n            }\n        }\n\n        // Draw lines at boundaries if overflowing min or max\n        ctx.fillStyle = this.prefs.overflow_color;\n        if (top_overflow || bot_overflow) {\n            var overflow_x;\n            if (mode === \"Histogram\" || mode === \"Intensity\") {\n                overflow_x = delta_x_px;\n            } else {\n                // Line and Filled, which are points\n                x_scaled -= 2; // Move it over to the left so it's centered on the point\n                overflow_x = 4;\n            }\n            if (top_overflow) {\n                ctx.fillRect(x_scaled, 0, overflow_x, 3);\n            }\n            if (bot_overflow) {\n                ctx.fillRect(x_scaled, height_px - 3, overflow_x, 3);\n            }\n        }\n        ctx.fillStyle = painter_color;\n    }\n    if (mode === \"Filled\") {\n        if (in_path) {\n            ctx.lineTo(x_scaled, y_zero);\n            ctx.lineTo(0, y_zero);\n        }\n        ctx.fill();\n    } else {\n        ctx.stroke();\n    }\n\n    ctx.restore();\n};\n\n/**\n * Mapper that contains information about feature locations and data.\n */\nvar FeaturePositionMapper = function(slot_height) {\n    this.feature_positions = {};\n    this.slot_height = slot_height;\n    this.translation = 0;\n    this.y_translation = 0;\n};\n\n/**\n * Map feature data to a position defined by <slot, x_start, x_end>.\n */\nFeaturePositionMapper.prototype.map_feature_data = function(feature_data, slot, x_start, x_end) {\n    if (!this.feature_positions[slot]) {\n        this.feature_positions[slot] = [];\n    }\n    this.feature_positions[slot].push({\n        data: feature_data,\n        x_start: x_start,\n        x_end: x_end\n    });\n};\n\n/**\n * Get feature data for position <x, y>\n */\nFeaturePositionMapper.prototype.get_feature_data = function(x, y) {\n    // Find slot using Y.\n    var slot = Math.floor((y - this.y_translation) / this.slot_height);\n\n    var feature_dict;\n\n    // May not be over a slot due to padding, margin, etc.\n    if (!this.feature_positions[slot]) {\n        return null;\n    }\n\n    // Find feature using X.\n    x += this.translation;\n    for (var i = 0; i < this.feature_positions[slot].length; i++) {\n        feature_dict = this.feature_positions[slot][i];\n        if (x >= feature_dict.x_start && x <= feature_dict.x_end) {\n            return feature_dict.data;\n        }\n    }\n};\n\n/**\n * Abstract object for painting feature tracks. Subclasses must implement draw_element() for painting to work.\n * Painter uses a 0-based, half-open coordinate system; start coordinate is closed--included--and the end is open.\n * This coordinate system matches the BED format.\n */\nvar FeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    this.alpha_scaler = alpha_scaler ? alpha_scaler : new Scaler();\n    this.height_scaler = height_scaler ? height_scaler : new Scaler();\n    this.max_label_length = 200;\n};\n\nFeaturePainter.prototype.default_prefs = {\n    block_color: \"#FFF\",\n    connector_color: \"#FFF\"\n};\n\n_.extend(FeaturePainter.prototype, {\n    get_required_height: function(rows_required, width) {\n        // y_scale is the height per row\n        var required_height = this.get_row_height();\n\n        var y_scale = required_height;\n        var mode = this.mode;\n        // If using a packing mode, need to multiply by the number of slots used\n        if (mode === \"no_detail\" || mode === \"Squish\" || mode === \"Pack\") {\n            required_height = rows_required * y_scale;\n        }\n        return required_height + this.get_top_padding(width);\n    },\n\n    /** Extra padding before first row of features */\n    get_top_padding: function(width) {\n        return 0;\n    },\n\n    /**\n     * Draw data on ctx using slots and within the rectangle defined by width and height. Returns\n     * a FeaturePositionMapper object with information about where features were drawn.\n     */\n    draw: function(ctx, width, height, w_scale, slots) {\n        var data = this.data;\n        var view_start = this.view_start;\n        var view_end = this.view_end;\n\n        ctx.save();\n\n        ctx.fillStyle = this.prefs.block_color;\n        ctx.textAlign = \"right\";\n\n        var y_scale = this.get_row_height();\n        var feature_mapper = new FeaturePositionMapper(y_scale);\n        var x_draw_coords;\n        var incomplete_features = [];\n\n        for (var i = 0, len = data.length; i < len; i++) {\n            var feature = data[i];\n            var feature_uid = feature[0];\n            var feature_start = feature[1];\n            var feature_end = feature[2];\n\n            var // Slot valid only if features are slotted and this feature is slotted;\n            // feature may not be due to lack of space.\n            slot = slots && slots[feature_uid] !== undefined ? slots[feature_uid].slot : null;\n\n            // Draw feature if (a) mode is dense or feature is slotted (as it must be for all non-dense modes) and\n            // (b) there's overlap between the feature and drawing region.\n            if ((this.mode === \"Dense\" || slot !== null) && (feature_start < view_end && feature_end > view_start)) {\n                x_draw_coords = this.draw_element(\n                    ctx,\n                    this.mode,\n                    feature,\n                    slot,\n                    view_start,\n                    view_end,\n                    w_scale,\n                    y_scale,\n                    width\n                );\n                feature_mapper.map_feature_data(feature, slot, x_draw_coords[0], x_draw_coords[1]);\n\n                // Add to incomplete features if it's not drawn completely in region.\n                if (feature_start < view_start || feature_end > view_end) {\n                    incomplete_features.push(feature);\n                }\n            }\n        }\n\n        ctx.restore();\n\n        feature_mapper.y_translation = this.get_top_padding(width);\n        return new DrawResults({\n            incomplete_features: incomplete_features,\n            feature_mapper: feature_mapper\n        });\n    },\n\n    /**\n     * Abstract function for drawing an individual feature.\n     */\n    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n        return [0, 0];\n    }\n});\n\n// Constants specific to feature tracks moved here (HACKING, these should\n// basically all be configuration options)\nvar DENSE_TRACK_HEIGHT = 10;\n\nvar NO_DETAIL_TRACK_HEIGHT = 3;\nvar SQUISH_TRACK_HEIGHT = 5;\nvar PACK_TRACK_HEIGHT = 10;\nvar NO_DETAIL_FEATURE_HEIGHT = 1;\nvar DENSE_FEATURE_HEIGHT = 9;\nvar SQUISH_FEATURE_HEIGHT = 3;\nvar PACK_FEATURE_HEIGHT = 9;\nvar LABEL_SPACING = 2;\nvar CONNECTOR_COLOR = \"#ccc\";\n\nvar LinkedFeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    // Whether to draw a single connector in the background that spans the entire feature (the intron fishbone)\n    this.draw_background_connector = true;\n    // Whether to call draw_connector for every pair of blocks\n    this.draw_individual_connectors = false;\n};\n\n_.extend(LinkedFeaturePainter.prototype, FeaturePainter.prototype, {\n    /**\n     * Height of a single row, depends on mode\n     */\n    get_row_height: function() {\n        var mode = this.mode;\n        var height;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        } else if (mode === \"no_detail\") {\n            height = NO_DETAIL_TRACK_HEIGHT;\n        } else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        } else {\n            // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n        }\n        return height;\n    },\n\n    /**\n     * Draw a feature. Returns an array with feature's start and end X coordinates.\n     */\n    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n        var feature_uid = feature[0];\n        var feature_start = feature[1];\n        var feature_end = feature[2];\n        var feature_name = feature[3];\n        var feature_strand = feature[4];\n\n        var // -0.5 to offset region between bases.\n        f_start = Math.floor(Math.max(0, (feature_start - tile_low - 0.5) * w_scale));\n\n        var f_end = Math.ceil(Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)));\n\n        var draw_start = f_start;\n        var draw_end = f_end;\n\n        var y_start = (mode === \"Dense\" ? 0 : 0 + slot) * y_scale + this.get_top_padding(width);\n\n        var thickness;\n        var y_start;\n        var thick_start = null;\n        var thick_end = null;\n\n        var // TODO: is there any reason why block, label color cannot be set at the Painter level?\n        // For now, assume '.' === '+'\n        block_color =\n            !feature_strand || feature_strand === \"+\" || feature_strand === \".\"\n                ? this.prefs.block_color\n                : this.prefs.reverse_strand_color;\n\n        var label_color = this.prefs.label_color;\n\n        // Set global alpha.\n        ctx.globalAlpha = this.alpha_scaler.gen_val(feature);\n\n        // In dense mode, put all data in top slot.\n        if (mode === \"Dense\") {\n            slot = 1;\n        }\n\n        if (mode === \"no_detail\") {\n            // No details for feature, so only one way to display.\n            ctx.fillStyle = block_color;\n            ctx.fillRect(f_start, y_start + 5, f_end - f_start, NO_DETAIL_FEATURE_HEIGHT);\n        } else {\n            // Mode is either Squish or Pack:\n            // Feature details.\n            var feature_ts = feature[5];\n\n            var feature_te = feature[6];\n            var feature_blocks = feature[7];\n\n            var // Whether we are drawing full height or squished features\n            full_height = true;\n\n            if (feature_ts && feature_te) {\n                thick_start = Math.floor(Math.max(0, (feature_ts - tile_low) * w_scale));\n                thick_end = Math.ceil(Math.min(width, Math.max(0, (feature_te - tile_low) * w_scale)));\n            }\n\n            // Set vars that depend on mode.\n            var thin_height;\n\n            var thick_height;\n            if (mode === \"Squish\") {\n                thin_height = 1;\n                thick_height = SQUISH_FEATURE_HEIGHT;\n                full_height = false;\n            } else if (mode === \"Dense\") {\n                thin_height = 5;\n                thick_height = DENSE_FEATURE_HEIGHT;\n            } else {\n                // mode === \"Pack\"\n                thin_height = 5;\n                thick_height = PACK_FEATURE_HEIGHT;\n            }\n\n            // Draw feature/feature blocks + connectors.\n            if (!feature_blocks) {\n                // If there are no blocks, treat the feature as one big exon.\n                ctx.fillStyle = block_color;\n                ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n                // If strand is specified, draw arrows over feature\n                if (feature_strand && full_height) {\n                    if (feature_strand === \"+\") {\n                        ctx.fillStyle = ctx.canvas.manager.get_pattern(\"right_strand_inv\");\n                    } else if (feature_strand === \"-\") {\n                        ctx.fillStyle = ctx.canvas.manager.get_pattern(\"left_strand_inv\");\n                    }\n                    ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n                }\n            } else {\n                //\n                // There are feature blocks and mode is either Squish or Pack.\n                //\n                // Approach: (a) draw whole feature as connector/intron and (b) draw blocks as\n                // needed. This ensures that whole feature, regardless of whether it starts with\n                // a block, is visible.\n                //\n\n                // Compute y axis start position and height\n                var cur_y_start;\n\n                var cur_height;\n                if (mode === \"Squish\" || mode === \"Dense\") {\n                    cur_y_start = y_start + Math.floor(SQUISH_FEATURE_HEIGHT / 2) + 1;\n                    cur_height = 1;\n                } else {\n                    // mode === \"Pack\"\n                    if (feature_strand) {\n                        cur_y_start = y_start;\n                        cur_height = thick_height;\n                    } else {\n                        cur_y_start += SQUISH_FEATURE_HEIGHT / 2 + 1;\n                        cur_height = 1;\n                    }\n                }\n\n                // Draw whole feature as connector/intron.\n                if (this.draw_background_connector) {\n                    if (mode === \"Squish\" || mode === \"Dense\") {\n                        ctx.fillStyle = CONNECTOR_COLOR;\n                    } else {\n                        // mode === \"Pack\"\n                        if (feature_strand) {\n                            if (feature_strand === \"+\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"right_strand\");\n                            } else if (feature_strand === \"-\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"left_strand\");\n                            }\n                        } else {\n                            ctx.fillStyle = CONNECTOR_COLOR;\n                        }\n                    }\n                    ctx.fillRect(f_start, cur_y_start, f_end - f_start, cur_height);\n                }\n\n                // Draw blocks.\n                var start_and_height;\n                for (var k = 0, k_len = feature_blocks.length; k < k_len; k++) {\n                    var block = feature_blocks[k];\n\n                    var // -0.5 to offset block between bases.\n                    block_start = Math.floor(Math.max(0, (block[0] - tile_low - 0.5) * w_scale));\n\n                    var block_end = Math.ceil(Math.min(width, Math.max((block[1] - tile_low - 0.5) * w_scale)));\n\n                    var last_block_start;\n                    var last_block_end;\n\n                    // Skip drawing if block not on tile.\n                    if (block_start > block_end) {\n                        continue;\n                    }\n\n                    // Draw thin block.\n                    ctx.fillStyle = block_color;\n                    ctx.fillRect(\n                        block_start,\n                        y_start + (thick_height - thin_height) / 2 + 1,\n                        block_end - block_start,\n                        thin_height\n                    );\n\n                    // If block intersects with thick region, draw block as thick.\n                    // - No thick is sometimes encoded as thick_start == thick_end, so don't draw in that case\n                    if (\n                        thick_start !== undefined &&\n                        feature_te > feature_ts &&\n                        !(block_start > thick_end || block_end < thick_start)\n                    ) {\n                        var block_thick_start = Math.max(block_start, thick_start);\n\n                        var block_thick_end = Math.min(block_end, thick_end);\n                        ctx.fillRect(block_thick_start, y_start + 1, block_thick_end - block_thick_start, thick_height);\n                        if (feature_blocks.length === 1 && mode === \"Pack\") {\n                            // Exactly one block means we have no introns, but do have a distinct \"thick\" region,\n                            // draw arrows over it if in pack mode.\n                            if (feature_strand === \"+\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"right_strand_inv\");\n                            } else if (feature_strand === \"-\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern(\"left_strand_inv\");\n                            }\n                            // If region is wide enough in pixels, pad a bit\n                            if (block_thick_start + 14 < block_thick_end) {\n                                block_thick_start += 2;\n                                block_thick_end -= 2;\n                            }\n                            ctx.fillRect(\n                                block_thick_start,\n                                y_start + 1,\n                                block_thick_end - block_thick_start,\n                                thick_height\n                            );\n                        }\n                    }\n                    // Draw individual connectors if required\n                    if (this.draw_individual_connectors && last_block_start) {\n                        this.draw_connector(ctx, last_block_start, last_block_end, block_start, block_end, y_start);\n                    }\n                    last_block_start = block_start;\n                    last_block_end = block_end;\n                }\n\n                // FIXME: Height scaling only works in Pack mode right now.\n                if (mode === \"Pack\") {\n                    // Reset alpha so height scaling is not impacted by alpha scaling.\n                    ctx.globalAlpha = 1;\n\n                    // Height scaling: draw white lines to reduce height according to height scale factor.\n                    ctx.fillStyle = \"white\"; // TODO: set this to background color.\n                    var hscale_factor = this.height_scaler.gen_val(feature);\n\n                    var // Ceil ensures that min height is >= 1.\n                    new_height = Math.ceil(thick_height * hscale_factor);\n\n                    var ws_height = Math.round((thick_height - new_height) / 2);\n                    if (hscale_factor !== 1) {\n                        ctx.fillRect(f_start, cur_y_start + 1, f_end - f_start, ws_height);\n                        ctx.fillRect(f_start, cur_y_start + thick_height - ws_height + 1, f_end - f_start, ws_height);\n                    }\n                }\n            }\n\n            // Reset alpha so that label is not transparent.\n            ctx.globalAlpha = 1;\n\n            // Draw label for Pack mode.\n            if (feature_name && mode === \"Pack\" && feature_start > tile_low) {\n                ctx.fillStyle = label_color;\n                // FIXME: assumption here that the entire view starts at 0\n                if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n                    ctx.textAlign = \"left\";\n                    ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 8, this.max_label_length);\n                    draw_end += ctx.measureText(feature_name).width + LABEL_SPACING;\n                } else {\n                    ctx.textAlign = \"right\";\n                    ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 8, this.max_label_length);\n                    draw_start -= ctx.measureText(feature_name).width + LABEL_SPACING;\n                }\n                //ctx.fillStyle = block_color;\n            }\n        }\n\n        // Reset global alpha.\n        ctx.globalAlpha = 1;\n\n        return [draw_start, draw_end];\n    }\n});\n\nvar ReadPainter = function(\n    data,\n    view_start,\n    view_end,\n    prefs,\n    mode,\n    alpha_scaler,\n    height_scaler,\n    ref_seq,\n    base_color_fn\n) {\n    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    this.ref_seq = ref_seq ? ref_seq.data : null;\n    this.base_color_fn = base_color_fn;\n};\n\n_.extend(ReadPainter.prototype, FeaturePainter.prototype, {\n    /**\n     * Returns height based on mode.\n     */\n    get_row_height: function() {\n        var height;\n        var mode = this.mode;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        } else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        } else {\n            // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n            if (this.prefs.show_insertions) {\n                height *= 2;\n            }\n        }\n        return height;\n    },\n\n    /**\n     * Parse CIGAR string to get (a) a list of contiguous drawing blocks (MD=X) and\n     * (b) an array of [ op_index, op_len ] pairs where op_index is an index into the\n     * string 'MIDNSHP=X' Return value is a dictionary with two entries, blocks and cigar\n     */\n    _parse_cigar: function(cigar_str) {\n        var cigar_ops = \"MIDNSHP=X\";\n\n        // Parse cigar.\n        var blocks = [[0, 0]];\n\n        var cur_block = blocks[0];\n        var base_pos = 0;\n\n        var // Parse cigar operations out and update/create blocks as needed.\n        parsed_cigar = _.map(cigar_str.match(/[0-9]+[MIDNSHP=X]/g), op => {\n            // Get operation length, character.\n            var op_len = parseInt(op.slice(0, -1), 10),\n                op_char = op.slice(-1);\n\n            // Update drawing block.\n            if (op_char === \"N\") {\n                // At skip, so need to start new block if current block represents\n                // drawing area.\n                if (cur_block[1] !== 0) {\n                    cur_block = [base_pos + op_len, base_pos + op_len];\n                    blocks.push(cur_block);\n                }\n            } else if (\"ISHP\".indexOf(op_char) === -1) {\n                // Operation is M,D,=,X.\n                cur_block[1] += op_len;\n                base_pos += op_len;\n            }\n\n            // Return parsed cigar.\n            return [cigar_ops.indexOf(op_char), op_len];\n        });\n\n        return {\n            blocks: blocks,\n            cigar: parsed_cigar\n        };\n    },\n\n    /**\n     * Draw a single read from reference-based read sequence and cigar.\n     */\n    draw_read: function(ctx, mode, w_scale, y_start, tile_low, tile_high, feature_start, cigar, strand, read_seq) {\n        // Helper function to update base and sequnence offsets.\n        var update_base_offset = (offset, cig_op, cig_len) => {\n            if (\"M=NXD\".indexOf(cig_op) !== -1) {\n                offset += cig_len;\n            }\n            return offset;\n        };\n\n        var update_seq_offset = (offset, cig_op, cig_len) => {\n            if (\"IX\".indexOf(cig_op) !== -1) {\n                offset += cig_len;\n            }\n            return offset;\n        };\n\n        var // Gets drawing coordinate for a sequence coordinate. Assumes closure variables w_scale and tile_low.\n        get_draw_coord = (\n            sequence_coord // -0.5 to offset sequence between bases.\n        ) => Math.floor(Math.max(0, (sequence_coord - tile_low - 0.5) * w_scale));\n\n        ctx.textAlign = \"center\";\n        var tile_region = [tile_low, tile_high];\n        var base_offset = 0;\n        var seq_offset = 0;\n        var gap = Math.round(w_scale / 2);\n        var char_width_px = ctx.canvas.manager.char_width_px;\n\n        var block_color = strand === \"+\" ? this.prefs.detail_block_color : this.prefs.reverse_strand_color;\n\n        var pack_mode = mode === \"Pack\";\n\n        var draw_height = pack_mode ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT;\n\n        var rect_y = y_start + 1;\n        var paint_utils = new ReadPainterUtils(ctx, draw_height, w_scale, mode);\n        var drawing_blocks = [];\n        var s_start;\n        var s_end;\n\n        // Keep list of items that need to be drawn on top of initial drawing layer.\n        var draw_last = [];\n\n        // Parse cigar and get drawing blocks.\n        var t = this._parse_cigar(cigar);\n        cigar = t.cigar;\n        drawing_blocks = t.blocks;\n\n        // Draw blocks.\n        for (var i = 0; i < drawing_blocks.length; i++) {\n            var block = drawing_blocks[i];\n\n            if (is_overlap([feature_start + block[0], feature_start + block[1]], tile_region)) {\n                s_start = get_draw_coord(feature_start + block[0]);\n                s_end = get_draw_coord(feature_start + block[1]);\n\n                // Make sure that block is drawn even if it too small to be rendered officially; in this case,\n                // read is drawn at 1px.\n                // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n                // and drawing.\n                if (s_start === s_end) {\n                    s_end += 1;\n                }\n\n                // Draw read base as rectangle.\n                ctx.fillStyle = block_color;\n                ctx.fillRect(s_start, rect_y, s_end - s_start, draw_height);\n            }\n        }\n\n        // Draw read features.\n        for (var cig_id = 0, len = cigar.length; cig_id < len; cig_id++) {\n            var cig = cigar[cig_id];\n            var cig_op = \"MIDNSHP=X\"[cig[0]];\n            var cig_len = cig[1];\n\n            var seq_start = feature_start + base_offset;\n            s_start = get_draw_coord(seq_start);\n            s_end = get_draw_coord(seq_start + cig_len);\n\n            // Skip feature if it's not in tile.\n            if (!is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                // Update offsets.\n                base_offset = update_base_offset(base_offset, cig_op, cig_len);\n                seq_offset = update_seq_offset(seq_offset, cig_op, cig_len);\n                continue;\n            }\n\n            // Make sure that read is drawn even if it too small to be rendered officially; in this case,\n            // read is drawn at 1px.\n            // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n            // and drawing.\n            if (s_start === s_end) {\n                s_end += 1;\n            }\n\n            // Draw read feature.\n            switch (cig_op) {\n                case \"H\": // Hard clipping.\n                case \"S\": // Soft clipping.\n                case \"P\": // Padding.\n                    // Sequence not present and not related to alignment; do nothing.\n                    break;\n                case \"M\": // \"Match\".\n                    // Because it's not known whether there is a match, ignore.\n                    base_offset += cig_len;\n                    break;\n                case \"=\": // Match with reference.\n                case \"X\": // Mismatch with reference.\n                    //\n                    // Draw sequence and/or variants.\n                    //\n\n                    // Get sequence to draw.\n                    var cur_seq = \"\";\n                    if (cig_op === \"X\") {\n                        // Get sequence from read_seq.\n                        cur_seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n                    } else if (this.ref_seq) {\n                        // && cig_op === '='\n                        // Use reference sequence.\n                        cur_seq = this.ref_seq.slice(\n                            // If read starts after tile start, slice at read start.\n                            Math.max(0, seq_start - tile_low),\n                            // If read ends before tile end, slice at read end.\n                            Math.min(seq_start - tile_low + cig_len, tile_high - tile_low)\n                        );\n                    }\n\n                    // Draw sequence. Because cur_seq starts and read/tile start, go to there to start writing.\n                    var start_pos = Math.max(seq_start, tile_low);\n                    for (var c = 0; c < cur_seq.length; c++) {\n                        // Draw base if showing all (i.e. not showing differences) or there is a mismatch.\n                        if ((cur_seq && !this.prefs.show_differences) || cig_op === \"X\") {\n                            // Draw base.\n                            var c_start = Math.floor(Math.max(0, (start_pos + c - tile_low) * w_scale));\n                            ctx.fillStyle = this.base_color_fn(cur_seq[c]);\n                            if (pack_mode && w_scale > char_width_px) {\n                                ctx.fillText(cur_seq[c], c_start, y_start + 9);\n                            } else if (w_scale > 0.05) {\n                                // Require a minimum w_scale so that variants are only drawn when somewhat zoomed in.\n                                ctx.fillRect(c_start - gap, rect_y, Math.max(1, Math.round(w_scale)), draw_height);\n                            }\n                        }\n                    }\n\n                    // Move forward in sequence only if sequence used to get mismatches.\n                    if (cig_op === \"X\") {\n                        seq_offset += cig_len;\n                    }\n                    base_offset += cig_len;\n\n                    break;\n                case \"N\": // Skipped bases.\n                    ctx.fillStyle = CONNECTOR_COLOR;\n                    ctx.fillRect(s_start, rect_y + (draw_height - 1) / 2, s_end - s_start, 1);\n                    // No change in seq_offset because sequence not used when skipping.\n                    base_offset += cig_len;\n                    break;\n                case \"D\": // Deletion.\n                    paint_utils.draw_deletion(s_start, rect_y, cig_len);\n                    base_offset += cig_len;\n                    break;\n                case \"I\": // Insertion.\n                    // Check to see if sequence should be drawn at all by looking at the overlap between\n                    // the sequence region and the tile region.\n                    var insert_x_coord = s_start - gap;\n\n                    if (is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                        var seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n                        // Insertion point is between the sequence start and the previous base: (-gap) moves\n                        // back from sequence start to insertion point.\n                        if (this.prefs.show_insertions) {\n                            //\n                            // Show inserted sequence above, centered on insertion point.\n                            //\n\n                            // Draw sequence.\n                            // X center is offset + start - <half_sequence_length>\n                            var x_center = s_start - (s_end - s_start) / 2;\n                            if (\n                                (mode === \"Pack\" || this.mode === \"Auto\") &&\n                                read_seq !== undefined &&\n                                w_scale > char_width_px\n                            ) {\n                                // Draw sequence container.\n                                ctx.fillStyle = \"yellow\";\n                                ctx.fillRect(x_center - gap, y_start - 9, s_end - s_start, 9);\n                                draw_last[draw_last.length] = {\n                                    type: \"triangle\",\n                                    data: [insert_x_coord, y_start + 4, 5]\n                                };\n                                ctx.fillStyle = CONNECTOR_COLOR;\n                                // Based on overlap b/t sequence and tile, get sequence to be drawn.\n                                switch (compute_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                                    case OVERLAP_START:\n                                        seq = seq.slice(tile_low - seq_start);\n                                        break;\n                                    case OVERLAP_END:\n                                        seq = seq.slice(0, seq_start - tile_high);\n                                        break;\n                                    case CONTAINED_BY:\n                                        // All of sequence drawn.\n                                        break;\n                                    case CONTAINS:\n                                        seq = seq.slice(tile_low - seq_start, seq_start - tile_high);\n                                        break;\n                                }\n                                // Draw sequence.\n                                for (var c = 0, str_len = seq.length; c < str_len; c++) {\n                                    var c_start = Math.floor(Math.max(0, (seq_start + c - tile_low) * w_scale));\n                                    ctx.fillText(seq[c], c_start - (s_end - s_start) / 2, y_start);\n                                }\n                            } else {\n                                // Draw block.\n                                ctx.fillStyle = \"yellow\";\n                                // TODO: This is a pretty hack-ish way to fill rectangle based on mode.\n                                ctx.fillRect(\n                                    x_center,\n                                    y_start + (this.mode !== \"Dense\" ? 2 : 5),\n                                    s_end - s_start,\n                                    mode !== \"Dense\" ? SQUISH_FEATURE_HEIGHT : DENSE_FEATURE_HEIGHT\n                                );\n                            }\n                        } else {\n                            if (\n                                (mode === \"Pack\" || this.mode === \"Auto\") &&\n                                read_seq !== undefined &&\n                                w_scale > char_width_px\n                            ) {\n                                // Show insertions with a single number at the insertion point.\n                                draw_last.push({\n                                    type: \"text\",\n                                    data: [seq.length, insert_x_coord, y_start + 9]\n                                });\n                            } else {\n                                // TODO: probably can merge this case with code above.\n                            }\n                        }\n                    }\n                    seq_offset += cig_len;\n                    // No change to base offset because insertions are drawn above sequence/read.\n                    break;\n            }\n        }\n\n        //\n        // Draw last items.\n        //\n        ctx.fillStyle = \"yellow\";\n        var item;\n        var type;\n        var data;\n        for (var i = 0; i < draw_last.length; i++) {\n            item = draw_last[i];\n            type = item.type;\n            data = item.data;\n            if (type === \"text\") {\n                ctx.save();\n                ctx.font = `bold ${ctx.font}`;\n                ctx.fillText(data[0], data[1], data[2]);\n                ctx.restore();\n            } else if (type === \"triangle\") {\n                drawDownwardEquilateralTriangle(ctx, data[0], data[1], data[2]);\n            }\n        }\n    },\n\n    /**\n     * Draw a complete read pair\n     */\n    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n        // All features need a start, end, and vertical center.\n        var feature_uid = feature[0];\n\n        var feature_start = feature[1];\n        var feature_end = feature[2];\n        var feature_name = feature[3];\n\n        var // -0.5 to put element between bases.\n        f_start = Math.floor(Math.max(-0.5 * w_scale, (feature_start - tile_low - 0.5) * w_scale));\n\n        var f_end = Math.ceil(Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)));\n\n        var y_start = (mode === \"Dense\" ? 0 : 0 + slot) * y_scale;\n\n        var draw_height = mode === \"Pack\" ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT;\n\n        var label_color = this.prefs.label_color;\n\n        // Draw read.\n        if (feature[5] instanceof Array) {\n            // Read is paired.\n            var connector = true;\n\n            // Draw left/forward read.\n            if (feature[4][1] >= tile_low && feature[4][0] <= tile_high && feature[4][2]) {\n                this.draw_read(\n                    ctx,\n                    mode,\n                    w_scale,\n                    y_start,\n                    tile_low,\n                    tile_high,\n                    feature[4][0],\n                    feature[4][2],\n                    feature[4][3],\n                    feature[4][4]\n                );\n            } else {\n                connector = false;\n            }\n\n            // Draw right/reverse read.\n            if (feature[5][1] >= tile_low && feature[5][0] <= tile_high && feature[5][2]) {\n                this.draw_read(\n                    ctx,\n                    mode,\n                    w_scale,\n                    y_start,\n                    tile_low,\n                    tile_high,\n                    feature[5][0],\n                    feature[5][2],\n                    feature[5][3],\n                    feature[5][4]\n                );\n            } else {\n                connector = false;\n            }\n\n            // Draw connector if both reads were drawn.\n            // TODO: currently, there is no way to connect reads drawn on different tiles; to connect reads on different tiles, data manager\n            // code is needed to join mate pairs from different regions. Alternatively, requesting multiple regions of data at once would\n            // make it possible to put together more easily.\n            // -0.5 to position connector correctly between reads.\n            var b1_end = Math.ceil(\n                Math.min(width, Math.max(-0.5 * w_scale, (feature[4][1] - tile_low - 0.5) * w_scale))\n            );\n\n            var b2_start = Math.floor(Math.max(-0.5 * w_scale, (feature[5][0] - tile_low - 0.5) * w_scale));\n\n            if (connector && b2_start > b1_end) {\n                ctx.fillStyle = CONNECTOR_COLOR;\n                var line_height = y_start + 1 + (draw_height - 1) / 2;\n                dashedLine(ctx, b1_end, line_height, b2_start, line_height);\n            }\n        } else {\n            // Read is single.\n            this.draw_read(\n                ctx,\n                mode,\n                w_scale,\n                y_start,\n                tile_low,\n                tile_high,\n                feature_start,\n                feature[4],\n                feature[5],\n                feature[6]\n            );\n        }\n        if (mode === \"Pack\" && feature_start >= tile_low && feature_name !== \".\") {\n            // Draw label.\n            ctx.fillStyle = this.prefs.label_color;\n            if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n                ctx.textAlign = \"left\";\n                ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 9, this.max_label_length);\n            } else {\n                ctx.textAlign = \"right\";\n                ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 9, this.max_label_length);\n            }\n        }\n\n        // FIXME: provide actual coordinates for drawn read.\n        return [0, 0];\n    }\n});\n\nvar ArcLinkedFeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    LinkedFeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    // Need to know the longest feature length for adding spacing\n    this.longest_feature_length = this.calculate_longest_feature_length();\n    this.draw_background_connector = false;\n    this.draw_individual_connectors = true;\n};\n\n_.extend(ArcLinkedFeaturePainter.prototype, FeaturePainter.prototype, LinkedFeaturePainter.prototype, {\n    calculate_longest_feature_length: function() {\n        var longest_feature_length = 0;\n        for (var i = 0, len = this.data.length; i < len; i++) {\n            var feature = this.data[i];\n            var feature_start = feature[1];\n            var feature_end = feature[2];\n            longest_feature_length = Math.max(longest_feature_length, feature_end - feature_start);\n        }\n        return longest_feature_length;\n    },\n\n    get_top_padding: function(width) {\n        var view_range = this.view_end - this.view_start;\n        var w_scale = width / view_range;\n        return Math.min(128, Math.ceil(this.longest_feature_length / 2 * w_scale));\n    },\n\n    draw_connector: function(ctx, block1_start, block1_end, block2_start, block2_end, y_start) {\n        // Arc drawing -- from closest endpoints\n        var x_center = (block1_end + block2_start) / 2;\n\n        var radius = block2_start - x_center;\n\n        // For full half circles\n        var angle1 = Math.PI;\n\n        var angle2 = 0;\n        if (radius > 0) {\n            ctx.beginPath();\n            ctx.arc(x_center, y_start, block2_start - x_center, Math.PI, 0);\n            ctx.stroke();\n        }\n    }\n});\n\n// Color stuff from less.js\n\nvar Color = function(rgb, a) {\n    /**\n     * The end goal here, is to parse the arguments\n     * into an integer triplet, such as `128, 255, 0`\n     *\n     * This facilitates operations and conversions.\n     */\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb;\n    } else if (rgb.length == 6) {\n        this.rgb = rgb.match(/.{2}/g).map(c => parseInt(c, 16));\n    } else if (rgb.length == 7) {\n        this.rgb = rgb\n            .substring(1, 7)\n            .match(/.{2}/g)\n            .map(c => parseInt(c, 16));\n    } else {\n        this.rgb = rgb.split(\"\").map(c => parseInt(c + c, 16));\n    }\n    this.alpha = typeof a === \"number\" ? a : 1;\n};\nColor.prototype = {\n    eval: function() {\n        return this;\n    },\n\n    //\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    //\n    toCSS: function() {\n        if (this.alpha < 1.0) {\n            return `rgba(${this.rgb\n                .map(c => Math.round(c))\n                .concat(this.alpha)\n                .join(\", \")})`;\n        } else {\n            return `#${this.rgb\n                .map(i => {\n                    i = Math.round(i);\n                    i = (i > 255 ? 255 : i < 0 ? 0 : i).toString(16);\n                    return i.length === 1 ? `0${i}` : i;\n                })\n                .join(\"\")}`;\n        }\n    },\n\n    toHSL: function() {\n        var r = this.rgb[0] / 255;\n        var g = this.rgb[1] / 255;\n        var b = this.rgb[2] / 255;\n        var a = this.alpha;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h;\n        var s;\n        var l = (max + min) / 2;\n        var d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s: s, l: l, a: a };\n    },\n\n    toARGB: function() {\n        var argb = [Math.round(this.alpha * 255)].concat(this.rgb);\n        return `#${argb\n            .map(i => {\n                i = Math.round(i);\n                i = (i > 255 ? 255 : i < 0 ? 0 : i).toString(16);\n                return i.length === 1 ? `0${i}` : i;\n            })\n            .join(\"\")}`;\n    },\n\n    mix: function(color2, weight) {\n        var color1 = this;\n\n        var p = weight; // .value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [\n            color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2\n        ];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    }\n};\n\n// End colors from less.js\n\nvar LinearRamp = function(start_color, end_color, start_value, end_value) {\n    /**\n     * Simple linear gradient\n     */\n    this.start_color = new Color(start_color);\n    this.end_color = new Color(end_color);\n    this.start_value = start_value;\n    this.end_value = end_value;\n    this.value_range = end_value - start_value;\n};\n\nLinearRamp.prototype.map_value = function(value) {\n    value = Math.max(value, this.start_value);\n    value = Math.min(value, this.end_value);\n    value = (value - this.start_value) / this.value_range;\n    // HACK: just red for now\n    // return \"hsl(0,100%,\" + (value * 100) + \"%)\"\n    return this.start_color.mix(this.end_color, 1 - value).toCSS();\n};\n\nvar SplitRamp = function(start_color, middle_color, end_color, start_value, end_value) {\n    /**\n     * Two gradients split away from 0\n     */\n    this.positive_ramp = new LinearRamp(middle_color, end_color, 0, end_value);\n    this.negative_ramp = new LinearRamp(middle_color, start_color, 0, -start_value);\n    this.start_value = start_value;\n    this.end_value = end_value;\n};\n\nSplitRamp.prototype.map_value = function(value) {\n    value = Math.max(value, this.start_value);\n    value = Math.min(value, this.end_value);\n    if (value >= 0) {\n        return this.positive_ramp.map_value(value);\n    } else {\n        return this.negative_ramp.map_value(-value);\n    }\n};\n\nvar DiagonalHeatmapPainter = function(data, view_start, view_end, prefs, mode) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    var i;\n    var len;\n\n    if (this.prefs.min_value === undefined) {\n        var min_value = Infinity;\n        for (i = 0, len = this.data.length; i < len; i++) {\n            min_value = Math.min(min_value, this.data[i][6]);\n        }\n        this.prefs.min_value = min_value;\n    }\n    if (this.prefs.max_value === undefined) {\n        var max_value = -Infinity;\n        for (i = 0, len = this.data.length; i < len; i++) {\n            max_value = Math.max(max_value, this.data[i][6]);\n        }\n        this.prefs.max_value = max_value;\n    }\n};\n\nDiagonalHeatmapPainter.prototype.default_prefs = {\n    min_value: undefined,\n    max_value: undefined,\n    mode: \"Heatmap\",\n    pos_color: \"#FF8C00\",\n    neg_color: \"#4169E1\"\n};\n\nDiagonalHeatmapPainter.prototype.draw = function(ctx, width, height, w_scale) {\n    var min_value = this.prefs.min_value;\n    var max_value = this.prefs.max_value;\n    var value_range = max_value - min_value;\n    var height_px = height;\n    var view_start = this.view_start;\n    var mode = this.mode;\n    var data = this.data;\n    var invsqrt2 = 1 / Math.sqrt(2);\n\n    var ramp = new SplitRamp(this.prefs.neg_color, \"#FFFFFF\", this.prefs.pos_color, min_value, max_value);\n\n    var d;\n    var s1;\n    var e1;\n    var s2;\n    var e2;\n    var value;\n\n    var scale = p => (p - view_start) * w_scale;\n\n    ctx.save();\n\n    // Draw into triangle, then rotate and scale\n    ctx.rotate(-45 * Math.PI / 180);\n    ctx.scale(invsqrt2, invsqrt2);\n\n    // Paint track.\n    for (var i = 0, len = data.length; i < len; i++) {\n        d = data[i];\n\n        s1 = scale(d[1]);\n        e1 = scale(d[2]);\n        s2 = scale(d[4]);\n        e2 = scale(d[5]);\n        value = d[6];\n\n        ctx.fillStyle = ramp.map_value(value);\n        ctx.fillRect(s1, s2, e1 - s1, e2 - s2);\n    }\n\n    ctx.restore();\n};\n\n/**\n * Utilities for painting reads.\n */\nvar ReadPainterUtils = function(ctx, row_height, px_per_base, mode) {\n    this.ctx = ctx;\n    this.row_height = row_height;\n    this.px_per_base = px_per_base;\n    this.draw_details = (mode === \"Pack\" || mode === \"Auto\") && px_per_base >= ctx.canvas.manager.char_width_px;\n    this.delete_details_thickness = 0.2;\n};\n\n_.extend(ReadPainterUtils.prototype, {\n    /**\n     * Draw deletion of base(s).\n     * @param draw_detail if true, drawing in detail and deletion is drawn more subtly\n     */\n    draw_deletion: function(x, y, len) {\n        this.ctx.fillStyle = \"black\";\n        var thickness = (this.draw_details ? this.delete_details_thickness : 1) * this.row_height;\n        y += 0.5 * (this.row_height - thickness);\n        this.ctx.fillRect(x, y, len * this.px_per_base, thickness);\n    }\n});\n\n/**\n * Paints variant data onto canvas.\n */\nvar VariantPainter = function(data, view_start, view_end, prefs, mode, base_color_fn) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    this.base_color_fn = base_color_fn;\n    this.divider_height = 1;\n};\n\n_.extend(VariantPainter.prototype, Painter.prototype, {\n    /**\n     * Height of a single row, depends on mode\n     */\n    get_row_height: function() {\n        var mode = this.mode;\n        var height;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        } else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        } else {\n            // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n        }\n        return height;\n    },\n\n    /**\n     * Returns required height to draw a particular number of samples in a given mode.\n     */\n    get_required_height: function(num_samples) {\n        // FIXME: for single-sample data, height should be summary_height when zoomed out and\n        // row_height when zoomed in.\n        var height = this.prefs.summary_height;\n\n        // If showing sample data, height is summary + divider + samples.\n        if (num_samples > 1 && this.prefs.show_sample_data) {\n            height += this.divider_height + num_samples * this.get_row_height();\n        }\n        return height;\n    },\n\n    /**\n     * Draw on the context using a rectangle of width x height with scale w_scale.\n     */\n    draw: function(ctx, width, height, w_scale) {\n        ctx.save();\n\n        var /**\n         * Returns dictionary of information about an indel; returns empty if there no indel. Assumes indel is left-aligned.\n         * Dict attributes:\n         *    -type: 'insertion' or 'deletion'\n         *    -start: where the deletion starts relative to reference start\n         *    -len: how long the deletion is\n         */\n        get_indel_info = (ref, alt) => {\n            var ref_len = ref.length;\n            var alt_len = alt.length;\n            var start = 0;\n            var len = 1;\n            var type = null;\n            if (alt === \"-\") {\n                type = \"deletion\";\n                len = ref.length;\n            } else if (ref.indexOf(alt) === 0 && ref_len > alt_len) {\n                type = \"deletion\";\n                len = ref_len - alt_len;\n                start = alt_len;\n            } else if (alt.indexOf(ref) === 0 && ref_len < alt_len) {\n                // Insertion.\n                type = \"insertion\";\n                len = alt_len - ref_len;\n                start = alt_len;\n            }\n\n            return type !== null ? { type: type, start: start, len: len } : {};\n        };\n\n        // Draw.\n        var locus_data;\n\n        var pos;\n        var id;\n        var ref;\n        var alt;\n        var qual;\n        var filter;\n        var sample_gts;\n        var allele_counts;\n        var variant;\n        var draw_x_start;\n        var draw_y_start;\n        var genotype;\n\n        var // Always draw variants at least 1 pixel wide.\n        base_px = Math.max(1, Math.floor(w_scale));\n\n        var // Determine number of samples.\n        num_samples = this.data.length ? this.data[0][7].split(\",\").length : 0;\n\n        var row_height = this.mode === \"Squish\" ? SQUISH_TRACK_HEIGHT : PACK_TRACK_HEIGHT;\n\n        var // If zoomed out, fill the whole row with feature to make it easier to read;\n        // when zoomed in, use feature height so that there are gaps in sample rows.\n        feature_height =\n            w_scale < 0.1 ? row_height : this.mode === \"Squish\" ? SQUISH_FEATURE_HEIGHT : PACK_FEATURE_HEIGHT;\n\n        var draw_summary = true;\n\n        var paint_utils = new ReadPainterUtils(ctx, row_height, w_scale, this.mode);\n\n        var j;\n\n        // If there's a single sample, update drawing variables.\n        if (num_samples === 1) {\n            row_height = feature_height =\n                w_scale < ctx.canvas.manager.char_width_px ? this.prefs.summary_height : row_height;\n            paint_utils.row_height = row_height;\n            // No summary when there's a single sample.\n            draw_summary = false;\n        }\n\n        // Draw divider between summary and samples.\n        if (this.prefs.show_sample_data && draw_summary) {\n            ctx.fillStyle = \"#F3F3F3\";\n            ctx.globalAlpha = 1;\n            ctx.fillRect(0, this.prefs.summary_height - this.divider_height, width, this.divider_height);\n        }\n\n        // Draw variants.\n        ctx.textAlign = \"center\";\n        for (var i = 0; i < this.data.length; i++) {\n            // Get locus data.\n            locus_data = this.data[i];\n            pos = locus_data[1];\n            ref = locus_data[3];\n            alt = [locus_data[4].split(\",\")];\n            sample_gts = locus_data[7].split(\",\");\n            allele_counts = locus_data.slice(8);\n\n            // Process alterate values to derive information about each alt.\n            alt = _.map(_.flatten(alt), a => {\n                var alt_info = {\n                    type: \"snp\",\n                    value: a,\n                    start: 0\n                };\n\n                var indel_info = get_indel_info(ref, a);\n\n                return _.extend(alt_info, indel_info);\n            });\n\n            // Only draw locus data if it's in viewing region.\n            if (pos < this.view_start || pos > this.view_end) {\n                continue;\n            }\n\n            // Draw summary for alleles.\n            if (draw_summary) {\n                ctx.fillStyle = \"#999999\";\n                ctx.globalAlpha = 1;\n                for (j = 0; j < alt.length; j++) {\n                    // Draw background for summary.\n                    draw_x_start = this.get_start_draw_pos(pos + alt[j].start, w_scale);\n                    ctx.fillRect(draw_x_start, 0, base_px, this.prefs.summary_height);\n                    draw_y_start = this.prefs.summary_height;\n                    // Draw allele fractions onto summary.\n                    for (j = 0; j < alt.length; j++) {\n                        ctx.fillStyle = alt[j].type === \"deletion\" ? \"black\" : this.base_color_fn(alt[j].value);\n                        var allele_frac = allele_counts / sample_gts.length;\n                        var draw_height = Math.ceil(this.prefs.summary_height * allele_frac);\n                        ctx.fillRect(draw_x_start, draw_y_start - draw_height, base_px, draw_height);\n                        draw_y_start -= draw_height;\n                    }\n                }\n            }\n\n            // Done drawing if not showing samples data.\n            if (!this.prefs.show_sample_data) {\n                continue;\n            }\n\n            // Draw sample genotype(s).\n            draw_y_start = draw_summary ? this.prefs.summary_height + this.divider_height : 0;\n            for (j = 0; j < sample_gts.length; j++, draw_y_start += row_height) {\n                genotype = sample_gts[j] ? sample_gts[j].split(/\\/|\\|/) : [\"0\", \"0\"];\n\n                // Get variant to draw and set drawing properties.\n                variant = null;\n                if (genotype[0] === genotype[1]) {\n                    if (genotype[0] === \".\") {\n                        // TODO: draw uncalled variant.\n                    } else if (genotype[0] !== \"0\") {\n                        // Homozygous for variant.\n                        variant = alt[parseInt(genotype[0], 10) - 1];\n                        ctx.globalAlpha = 1;\n                    }\n                    // else reference\n                } else {\n                    // Heterozygous for variant.\n                    variant = genotype[0] !== \"0\" ? genotype[0] : genotype[1];\n                    variant = alt[parseInt(variant, 10) - 1];\n                    ctx.globalAlpha = 0.5;\n                }\n\n                // If there's a variant, draw it.\n                if (variant) {\n                    draw_x_start = this.get_start_draw_pos(pos + variant.start, w_scale);\n                    if (variant.type === \"snp\") {\n                        var snp = variant.value;\n                        ctx.fillStyle = this.base_color_fn(snp);\n                        if (paint_utils.draw_details) {\n                            ctx.fillText(snp, this.get_draw_pos(pos, w_scale), draw_y_start + row_height);\n                        } else {\n                            ctx.fillRect(draw_x_start, draw_y_start + 1, base_px, feature_height);\n                        }\n                    } else if (variant.type === \"deletion\") {\n                        paint_utils.draw_deletion(draw_x_start, draw_y_start + 1, variant.len);\n                    } else {\n                        // TODO: handle insertions.\n                    }\n                }\n            }\n        }\n\n        ctx.restore();\n    }\n});\n\nexport default {\n    Scaler: Scaler,\n    LinePainter: LinePainter,\n    LinkedFeaturePainter: LinkedFeaturePainter,\n    ReadPainter: ReadPainter,\n    ArcLinkedFeaturePainter: ArcLinkedFeaturePainter,\n    DiagonalHeatmapPainter: DiagonalHeatmapPainter,\n    VariantPainter: VariantPainter\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/trackster/painters.js","import * as _ from \"libs/underscore\";\nvar extend = _.extend;\n\n/**\n * Filters that enable users to show/hide data points dynamically.\n */\nvar Filter = function(obj_dict) {\n    this.manager = null;\n    this.name = obj_dict.name;\n    // Index into payload to filter.\n    this.index = obj_dict.index;\n    this.tool_id = obj_dict.tool_id;\n    // Name to use for filter when building expression for tool.\n    this.tool_exp_name = obj_dict.tool_exp_name;\n};\n\nextend(Filter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        return {\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        };\n    }\n});\n\n/**\n * Creates an action icon.\n */\nvar create_action_icon = (title, css_class, on_click_fn) =>\n    $(\"<a/>\")\n        .attr(\"href\", \"javascript:void(0);\")\n        .attr(\"title\", title)\n        .addClass(\"icon-button\")\n        .addClass(css_class)\n        .tooltip()\n        .click(on_click_fn);\n\n/**\n * Number filters have a min, max as well as a low, high; low and high are used\n */\nvar NumberFilter = function(obj_dict) {\n    //\n    // Attribute init.\n    //\n    Filter.call(this, obj_dict);\n    // Filter low/high. These values are used to filter elements.\n    this.low = \"low\" in obj_dict ? obj_dict.low : -Number.MAX_VALUE;\n    this.high = \"high\" in obj_dict ? obj_dict.high : Number.MAX_VALUE;\n    // Slide min/max. These values are used to set/update slider.\n    this.min = \"min\" in obj_dict ? obj_dict.min : Number.MAX_VALUE;\n    this.max = \"max\" in obj_dict ? obj_dict.max : -Number.MAX_VALUE;\n    // UI elements associated with filter.\n    this.container = null;\n    this.slider = null;\n    this.slider_label = null;\n\n    //\n    // Create HTML.\n    //\n\n    // Function that supports inline text editing of slider values.\n    // Enable users to edit parameter's value via a text box.\n    var edit_slider_values = (container, span, slider) => {\n        container.click(function() {\n            var cur_value = span.text();\n            var max = parseFloat(slider.slider(\"option\", \"max\"));\n\n            var input_size = max <= 1 ? 4 : max <= 1000000 ? max.toString().length : 6;\n\n            var multi_value = false;\n            var slider_row = $(this).parents(\".slider-row\");\n\n            // Row now has input.\n            slider_row.addClass(\"input\");\n\n            // Increase input size if there are two values.\n            if (slider.slider(\"option\", \"values\")) {\n                input_size = 2 * input_size + 1;\n                multi_value = true;\n            }\n            span.text(\"\");\n            // Temporary input for changing value.\n            $(\"<input type='text'/>\")\n                .attr(\"size\", input_size)\n                .attr(\"maxlength\", input_size)\n                .attr(\"value\", cur_value)\n                .appendTo(span)\n                .focus()\n                .select()\n                .click(e => {\n                    // Don't want click to propogate up to values_span and restart everything.\n                    e.stopPropagation();\n                })\n                .blur(function() {\n                    $(this).remove();\n                    span.text(cur_value);\n                    slider_row.removeClass(\"input\");\n                })\n                .keyup(function(e) {\n                    if (e.keyCode === 27) {\n                        // Escape key.\n                        $(this).trigger(\"blur\");\n                    } else if (e.keyCode === 13) {\n                        //\n                        // Enter/return key initiates callback. If new value(s) are in slider range,\n                        // change value (which calls slider's change() function).\n                        //\n                        var slider_min = slider.slider(\"option\", \"min\");\n\n                        var slider_max = slider.slider(\"option\", \"max\");\n\n                        var invalid = a_val => isNaN(a_val) || a_val > slider_max || a_val < slider_min;\n\n                        var new_value = $(this).val();\n                        if (!multi_value) {\n                            new_value = parseFloat(new_value);\n                            if (invalid(new_value)) {\n                                alert(`Parameter value must be in the range [${slider_min}-${slider_max}]`);\n                                return $(this);\n                            }\n                        } else {\n                            // Multi value.\n                            new_value = new_value.split(\"-\");\n                            new_value = [parseFloat(new_value[0]), parseFloat(new_value[1])];\n                            if (invalid(new_value[0]) || invalid(new_value[1])) {\n                                alert(`Parameter value must be in the range [${slider_min}-${slider_max}]`);\n                                return $(this);\n                            }\n                        }\n\n                        // Updating the slider also updates slider values and removes input.\n                        slider.slider(multi_value ? \"values\" : \"value\", new_value);\n                        slider_row.removeClass(\"input\");\n                    }\n                });\n        });\n    };\n\n    var filter = this;\n\n    filter.parent_div = $(\"<div/>\").addClass(\"filter-row slider-row\");\n\n    // Set up filter label (name, values).\n    var filter_label = $(\"<div/>\")\n        .addClass(\"elt-label\")\n        .appendTo(filter.parent_div);\n\n    var name_span = $(\"<span/>\")\n        .addClass(\"slider-name\")\n        .text(`${filter.name}  `)\n        .appendTo(filter_label);\n\n    var values_span = $(\"<span/>\").text(`${this.low}-${this.high}`);\n\n    var values_span_container = $(\"<span/>\")\n        .addClass(\"slider-value\")\n        .appendTo(filter_label)\n        .append(\"[\")\n        .append(values_span)\n        .append(\"]\");\n\n    filter.values_span = values_span;\n\n    // Set up slider for filter.\n    var slider_div = $(\"<div/>\")\n        .addClass(\"slider\")\n        .appendTo(filter.parent_div);\n    filter.control_element = $(\"<div/>\")\n        .attr(\"id\", `${filter.name}-filter-control`)\n        .appendTo(slider_div);\n    filter.control_element.slider({\n        range: true,\n        min: this.min,\n        max: this.max,\n        step: this.get_slider_step(this.min, this.max),\n        values: [this.low, this.high],\n        slide: function(event, ui) {\n            filter.slide(event, ui);\n        },\n        change: function(event, ui) {\n            filter.control_element.slider(\"option\", \"slide\").call(filter.control_element, event, ui);\n        }\n    });\n    filter.slider = filter.control_element;\n    filter.slider_label = values_span;\n\n    // Enable users to edit slider values via text box.\n    edit_slider_values(values_span_container, values_span, filter.control_element);\n\n    // Set up filter display controls.\n    var display_controls_div = $(\"<div/>\")\n        .addClass(\"display-controls\")\n        .appendTo(filter.parent_div);\n    this.transparency_icon = create_action_icon(\"Use filter for data transparency\", \"layer-transparent\", () => {\n        if (filter.manager.alpha_filter !== filter) {\n            // Setting this filter as the alpha filter.\n            filter.manager.alpha_filter = filter;\n            // Update UI for new filter.\n            filter.manager.parent_div\n                .find(\".layer-transparent\")\n                .removeClass(\"active\")\n                .hide();\n            filter.transparency_icon.addClass(\"active\").show();\n        } else {\n            // Clearing filter as alpha filter.\n            filter.manager.alpha_filter = null;\n            filter.transparency_icon.removeClass(\"active\");\n        }\n        filter.manager.track.request_draw({\n            force: true,\n            clear_after: true\n        });\n    })\n        .appendTo(display_controls_div)\n        .hide();\n    this.height_icon = create_action_icon(\"Use filter for data height\", \"arrow-resize-090\", () => {\n        if (filter.manager.height_filter !== filter) {\n            // Setting this filter as the height filter.\n            filter.manager.height_filter = filter;\n            // Update UI for new filter.\n            filter.manager.parent_div\n                .find(\".arrow-resize-090\")\n                .removeClass(\"active\")\n                .hide();\n            filter.height_icon.addClass(\"active\").show();\n        } else {\n            // Clearing filter as alpha filter.\n            filter.manager.height_filter = null;\n            filter.height_icon.removeClass(\"active\");\n        }\n        filter.manager.track.request_draw({\n            force: true,\n            clear_after: true\n        });\n    })\n        .appendTo(display_controls_div)\n        .hide();\n    filter.parent_div.hover(\n        () => {\n            filter.transparency_icon.show();\n            filter.height_icon.show();\n        },\n        () => {\n            if (filter.manager.alpha_filter !== filter) {\n                filter.transparency_icon.hide();\n            }\n            if (filter.manager.height_filter !== filter) {\n                filter.height_icon.hide();\n            }\n        }\n    );\n\n    // Add to clear floating layout.\n    $(\"<div style='clear: both;'/>\").appendTo(filter.parent_div);\n};\nextend(NumberFilter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        var obj_dict = Filter.prototype.to_dict.call(this);\n        return extend(obj_dict, {\n            type: \"number\",\n            min: this.min,\n            max: this.max,\n            low: this.low,\n            high: this.high\n        });\n    },\n    /**\n     * Return a copy of filter.\n     */\n    copy: function() {\n        return new NumberFilter({\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        });\n    },\n    /**\n     * Get step for slider.\n     */\n    // FIXME: make this a \"static\" function.\n    get_slider_step: function(min, max) {\n        var range = max - min;\n        return range <= 2 ? 0.01 : 1;\n    },\n    /**\n     * Handle slide events.\n     */\n    slide: function(event, ui) {\n        var values = ui.values;\n\n        // Set new values in UI.\n        this.values_span.text(`${values[0]}-${values[1]}`);\n\n        // Set new values in filter.\n        this.low = values[0];\n        this.high = values[1];\n\n        // Set timeout to update if filter low, high are stable.\n        var self = this;\n        setTimeout(() => {\n            if (values[0] === self.low && values[1] === self.high) {\n                self.manager.track.request_draw({\n                    force: true,\n                    clear_after: true\n                });\n            }\n        }, 25);\n    },\n    /**\n     * Returns true if filter can be applied to element.\n     */\n    applies_to: function(element) {\n        if (element.length > this.index) {\n            return true;\n        }\n        return false;\n    },\n    /**\n     * Helper function: returns true if value in in filter's [low, high] range.\n     */\n    _keep_val: function(val) {\n        return isNaN(val) || (val >= this.low && val <= this.high);\n    },\n    /**\n     * Returns true if (a) element's value(s) is in [low, high] (range is inclusive)\n     * or (b) if value is non-numeric and hence unfilterable.\n     */\n    keep: function(element) {\n        if (!this.applies_to(element)) {\n            // No element to filter on.\n            return true;\n        }\n\n        // Keep value function.\n        var filter = this;\n\n        // Do filtering.\n        var to_filter = element[this.index];\n        if (to_filter instanceof Array) {\n            var returnVal = true;\n            for (var i = 0; i < to_filter.length; i++) {\n                if (!this._keep_val(to_filter[i])) {\n                    // Exclude element.\n                    returnVal = false;\n                    break;\n                }\n            }\n            return returnVal;\n        } else {\n            return this._keep_val(element[this.index]);\n        }\n    },\n    /**\n     * Update filter's min and max values based on element's values.\n     */\n    update_attrs: function(element) {\n        var updated = false;\n        if (!this.applies_to(element)) {\n            return updated;\n        }\n\n        //\n        // Update filter's min, max based on element values.\n        //\n\n        // Make value(s) into an Array.\n        var values = element[this.index];\n        if (!(values instanceof Array)) {\n            values = [values];\n        }\n\n        // Loop through values and update min, max.\n        for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            if (value < this.min) {\n                this.min = Math.floor(value);\n                updated = true;\n            }\n            if (value > this.max) {\n                this.max = Math.ceil(value);\n                updated = true;\n            }\n        }\n        return updated;\n    },\n    /**\n     * Update filter's slider.\n     */\n    update_ui_elt: function() {\n        // Only show filter if min < max because filter is not useful otherwise. This\n        // covers all corner cases, such as when min, max have not been defined and\n        // when min == max.\n        if (this.min < this.max) {\n            this.parent_div.show();\n        } else {\n            this.parent_div.hide();\n        }\n\n        var slider_min = this.slider.slider(\"option\", \"min\");\n        var slider_max = this.slider.slider(\"option\", \"max\");\n        if (this.min < slider_min || this.max > slider_max) {\n            // Update slider min, max, step.\n            this.slider.slider(\"option\", \"min\", this.min);\n            this.slider.slider(\"option\", \"max\", this.max);\n            this.slider.slider(\"option\", \"step\", this.get_slider_step(this.min, this.max));\n            // Refresh slider:\n            // TODO: do we want to keep current values or reset to min/max?\n            // Currently we reset values:\n            this.slider.slider(\"option\", \"values\", [this.min, this.max]);\n            // To use the current values.\n            //var values = this.slider.slider( \"option\", \"values\" );\n            //this.slider.slider( \"option\", \"values\", values );\n        }\n    }\n});\n\n/**\n * Manages a set of filters.\n */\nvar FiltersManager = function(track, obj_dict) {\n    this.track = track;\n    this.alpha_filter = null;\n    this.height_filter = null;\n    this.filters = [];\n\n    //\n    // Create HTML.\n    //\n\n    //\n    // Create parent div.\n    //\n    this.parent_div = $(\"<div/>\")\n        .addClass(\"filters\")\n        .hide();\n    // Disable dragging, double clicking, keys on div so that actions on slider do not impact viz.\n    this.parent_div\n        .bind(\"drag\", e => {\n            e.stopPropagation();\n        })\n        .click(e => {\n            e.stopPropagation();\n        })\n        .bind(\"dblclick\", e => {\n            e.stopPropagation();\n        })\n        .bind(\"keydown\", e => {\n            e.stopPropagation();\n        });\n\n    //\n    // Restore state from dict.\n    //\n    if (obj_dict && \"filters\" in obj_dict) {\n        // Second condition needed for backward compatibility.\n        var alpha_filter_name = \"alpha_filter\" in obj_dict ? obj_dict.alpha_filter : null;\n\n        var height_filter_name = \"height_filter\" in obj_dict ? obj_dict.height_filter : null;\n\n        var filters_dict = obj_dict.filters;\n        var filter;\n        for (var i = 0; i < filters_dict.length; i++) {\n            if (filters_dict[i].type === \"number\") {\n                filter = new NumberFilter(filters_dict[i]);\n                this.add_filter(filter);\n                if (filter.name === alpha_filter_name) {\n                    this.alpha_filter = filter;\n                    filter.transparency_icon.addClass(\"active\").show();\n                }\n                if (filter.name === height_filter_name) {\n                    this.height_filter = filter;\n                    filter.height_icon.addClass(\"active\").show();\n                }\n            } else {\n                console.log(\"ERROR: unsupported filter: \", name, type);\n            }\n        }\n\n        if (\"visible\" in obj_dict && obj_dict.visible) {\n            this.parent_div.show();\n        }\n    }\n\n    // Add button to filter complete dataset.\n    if (this.filters.length !== 0) {\n        var run_buttons_row = $(\"<div/>\")\n            .addClass(\"param-row\")\n            .appendTo(this.parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'/>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_buttons_row);\n        var filter_manager = this;\n        run_on_dataset_button.click(() => {\n            filter_manager.run_on_dataset();\n        });\n    }\n};\n\nextend(FiltersManager.prototype, {\n    // HTML manipulation and inspection.\n    show: function() {\n        this.parent_div.show();\n    },\n    hide: function() {\n        this.parent_div.hide();\n    },\n    toggle: function() {\n        this.parent_div.toggle();\n    },\n    visible: function() {\n        return this.parent_div.is(\":visible\");\n    },\n    /**\n     * Returns dictionary for manager.\n     */\n    to_dict: function() {\n        var obj_dict = {};\n        var filter_dicts = [];\n        var filter;\n\n        // Include individual filter states.\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            filter_dicts.push(filter.to_dict());\n        }\n        obj_dict.filters = filter_dicts;\n\n        // Include transparency, height filters.\n        obj_dict.alpha_filter = this.alpha_filter ? this.alpha_filter.name : null;\n        obj_dict.height_filter = this.height_filter ? this.height_filter.name : null;\n\n        // Include visibility.\n        obj_dict.visible = this.parent_div.is(\":visible\");\n\n        return obj_dict;\n    },\n    /**\n     * Return a copy of the manager.\n     */\n    copy: function(new_track) {\n        var copy = new FiltersManager(new_track);\n        for (var i = 0; i < this.filters.length; i++) {\n            copy.add_filter(this.filters[i].copy());\n        }\n        return copy;\n    },\n    /**\n     * Add a filter to the manager.\n     */\n    add_filter: function(filter) {\n        filter.manager = this;\n        this.parent_div.append(filter.parent_div);\n        this.filters.push(filter);\n    },\n    /**\n     * Remove all filters from manager.\n     */\n    remove_all: function() {\n        this.filters = [];\n        this.parent_div.children().remove();\n    },\n    /**\n     * Initialize filters.\n     */\n\n    init_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.update_ui_elt();\n        }\n    },\n    /**\n     * Clear filters so that they do not impact track display.\n     */\n    clear_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.slider.slider(\"option\", \"values\", [filter.min, filter.max]);\n        }\n        this.alpha_filter = null;\n        this.height_filter = null;\n\n        // Hide icons for setting filters.\n        this.parent_div.find(\".icon-button\").hide();\n    },\n    run_on_dataset: function() {\n        // Get or create dictionary item.\n        var get_or_create_dict_item = (dict, key, new_item) => {\n            // Add new item to dict if\n            if (!(key in dict)) {\n                dict[key] = new_item;\n            }\n            return dict[key];\n        };\n\n        //\n        // Find and group active filters. Active filters are those being used to hide data.\n        // Filters with the same tool id are grouped.\n        //\n        var active_filters = {};\n\n        var filter;\n        var tool_filter_conditions;\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            if (filter.tool_id) {\n                // Add filtering conditions if filter low/high are set.\n                if (filter.min !== filter.low) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = `${filter.tool_exp_name} >= ${filter.low}`;\n                }\n                if (filter.max !== filter.high) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = `${filter.tool_exp_name} <= ${filter.high}`;\n                }\n            }\n        }\n\n        //\n        // Use tools to run filters.\n        //\n\n        // Create list of (tool_id, tool_filters) tuples.\n        var active_filters_list = [];\n        for (var tool_id in active_filters) {\n            active_filters_list[active_filters_list.length] = [tool_id, active_filters[tool_id]];\n        }\n\n        // Invoke recursive function to run filters; this enables chaining of filters via\n        // iteratively application.\n        (function run_filter(input_dataset_id, filters) {\n            var // Set up filtering info and params.\n            filter_tuple = filters[0];\n\n            var tool_id = filter_tuple[0];\n            var tool_filters = filter_tuple[1];\n            var tool_filter_str = `(${tool_filters.join(\") and (\")})`;\n\n            var url_params = {\n                cond: tool_filter_str,\n                input: input_dataset_id,\n                target_dataset_id: input_dataset_id,\n                tool_id: tool_id\n            };\n\n            // Remove current filter.\n            filters = filters.slice(1);\n\n            $.getJSON(run_tool_url, url_params, response => {\n                if (response.error) {\n                    // General error.\n                    Galaxy.modal.show({\n                        title: \"Filter Dataset\",\n                        body: `Error running tool ${tool_id}`,\n                        buttons: { Close: Galaxy.modal.hide() }\n                    });\n                } else if (filters.length === 0) {\n                    // No more filters to run.\n                    Galaxy.modal.show({\n                        title: \"Filtering Dataset\",\n                        body: \"Filter(s) are running on the complete dataset. Outputs are in dataset's history.\",\n                        buttons: { Close: Galaxy.modal.hide() }\n                    });\n                } else {\n                    // More filters to run.\n                    run_filter(response.dataset_id, filters);\n                }\n            });\n        })(this.track.dataset_id, active_filters_list);\n    }\n});\n\nexport default {\n    FiltersManager: FiltersManager,\n    NumberFilter: NumberFilter\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/trackster/filters.js","import visualization from \"viz/visualization\";\nimport * as bigwig from \"libs/bbi/bigwig\";\n/**\n * Data manager for BBI datasets/files, including BigWig and BigBed.\n */\nvar BBIDataManager = visualization.GenomeDataManager.extend({\n    /**\n     * Load data from server and manage data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        var deferred = $.Deferred();\n        this.set_data(region, deferred);\n\n        var url = `${Galaxy.root}datasets/${this.get(\"dataset\").id}/display`;\n\n        var self = this;\n        var promise = new $.Deferred();\n        $.when(bigwig.makeBwg(url)).then((bb, err) => {\n            $.when(bb.readWigData(region.get(\"chrom\"), region.get(\"start\"), region.get(\"end\"))).then(data => {\n                // Transform data into \"bigwig\" format for LinePainter. \"bigwig\" format is an array of 2-element arrays\n                // where each element is [position, score]; unlike real bigwig format, no gaps are allowed.\n                var result = [];\n\n                var prev = { max: Number.MIN_VALUE };\n                data.forEach(d => {\n                    // If there is a gap between prev and d, fill it with an interval with score 0.\n                    // This is necessary for LinePainter to draw correctly.\n                    if (prev.max !== d.min - 1) {\n                        // +1 to start after previous region.\n                        result.push([prev.max + 1, 0]);\n                        // -2 = -1 for converting from 1-based to 0-based coordinates,\n                        //      -1 for ending before current region.\n                        result.push([d.min - 2, 0]);\n                    }\n\n                    // Add data point for entry start. -1 to convert from wiggle\n                    // 1-based coordinates to 0-based browser coordinates.\n                    result.push([d.min - 1, d.score]);\n\n                    // Add data point for entry end:\n                    result.push([d.max, d.score]);\n\n                    prev = d;\n                });\n\n                var entry = {\n                    data: result,\n                    region: region,\n                    dataset_type: \"bigwig\"\n                };\n\n                self.set_data(region, entry);\n                deferred.resolve(entry);\n            });\n        });\n\n        return deferred;\n    }\n});\n\nexport default {\n    BBIDataManager: BBIDataManager\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/bbi-data-manager.js","//\n// Author: Jeremy Goecks\n//\n// Modified from:\n//\n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// bigwig.js: indexed binary WIG (and BED) files\n//\n\n// Requirements:\n//  * jquery and ajax-native plugin for reading binary data, jquery for promises\n//  * spans for working working with genomic intervals\n//  * jszlib for decompression.\ndefine([\"libs/bbi/spans\", \"libs/bbi/jszlib\", \"libs/bbi/jquery-ajax-native\"], function(spans, jszlib) {\n    \"use strict\";\n\n    // -- Copied from das.js --\n\n    function DASFeature() {\n    }\n\n    function DASGroup(id) {\n        if (id)\n        this.id = id;\n    }\n\n    // -- End copy --\n\n    // -- Copied from bin.js --\n\n    function readInt(ba, offset) {\n        return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);\n    }\n\n    // -- End copy --\n\n    // Some globals.\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n\n    var BIG_WIG_MAGIC = 0x888FFC26;\n    var BIG_WIG_MAGIC_BE = 0x26FC8F88;\n    var BIG_BED_MAGIC = 0x8789F2EB;\n    var BIG_BED_MAGIC_BE = 0xEBF28987;\n\n\n    var BIG_WIG_TYPE_GRAPH = 1;\n    var BIG_WIG_TYPE_VSTEP = 2;\n    var BIG_WIG_TYPE_FSTEP = 3;\n\n    var M1 = 256;\n    var M2 = 256*256;\n    var M3 = 256*256*256;\n    var M4 = 256*256*256*256;\n\n    var BED_COLOR_REGEXP = new RegExp(\"^[0-9]+,[0-9]+,[0-9]+\");\n\n    /**\n     * Read binary data from a URL using HTTP Range header. Requires jQuery and ajax-native plugin.\n     */\n    function read(url, start, size) {\n        // Taken from bin.js:\n        // This may be necessary for Safari:\n        //   if ((isSafari || this.opts.salt) && url.indexOf('?') < 0) {\n        //       url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n        //   }\n\n        var chunkSizeLimit = Math.pow(10, 6); // 1 MB\n        if(size > chunkSizeLimit) {\n            // TODO: raise error.\n        }\n\n        // Read data from remote file.\n        return $.ajax({\n            type: 'GET',\n            dataType: 'native',\n            url: url,\n            // Potential timeout on first request to catch mixed-content errors on Chromium.\n            timeout: 5000,\n            beforeSend: function(xhrObj) {\n                // (size - 1) because range is inclusive.\n                xhrObj.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + (start + (size - 1)));\n            },\n            xhrFields: {\n                responseType: 'arraybuffer'\n            }\n        });\n    }\n\n    function bwg_readOffset(ba, o) {\n        var offset = ba[o] + ba[o+1]*M1 + ba[o+2]*M2 + ba[o+3]*M3 + ba[o+4]*M4;\n        return offset;\n    }\n\n    function BigWig() {\n    }\n\n    /**\n     * Read the chromosome B+ tree header.\n     */\n    BigWig.prototype.readChromTree = function() {\n        var thisB = this;\n        this.chromsToIDs = {};\n        this.idsToChroms = {};\n        this.maxID = 0;\n\n        var udo = this.unzoomedDataOffset;\n        var eb = (udo - this.chromTreeOffset) & 3;\n        udo = udo + 4 - eb;\n\n        // Read and parse the chrom tree, return the promise so that subsequent actions can be taken.\n        return $.when(read(this.url, this.chromTreeOffset, udo - this.chromTreeOffset)).then(function(bpt) {\n            var ba = new Uint8Array(bpt);\n            var sa = new Int16Array(bpt);\n            var la = new Int32Array(bpt);\n            var bptMagic = la[0];\n            var blockSize = la[1];\n            var keySize = la[2];\n            var valSize = la[3];\n            var itemCount = bwg_readOffset(ba, 16);\n            var rootNodeOffset = 32;\n\n            var bptReadNode = function(offset) {\n                var nodeType = ba[offset];\n                var cnt = sa[(offset/2) + 1];\n                offset += 4;\n                for (var n = 0; n < cnt; ++n) {\n                    if (nodeType === 0) {\n                        offset += keySize;\n                        var childOffset = bwg_readOffset(ba, offset);\n                        offset += 8;\n                        childOffset -= thisB.chromTreeOffset;\n                        bptReadNode(childOffset);\n                    } else {\n                        var key = '';\n                        for (var ki = 0; ki < keySize; ++ki) {\n                            var charCode = ba[offset++];\n                            if (charCode !== 0) {\n                                key += String.fromCharCode(charCode);\n                            }\n                        }\n                        var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n                        var chromSize = (ba[offset + 7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n                        offset += 8;\n\n                        thisB.chromsToIDs[key] = chromId;\n                        if (key.indexOf('chr') === 0) {\n                            thisB.chromsToIDs[key.substr(3)] = chromId;\n                        }\n                        thisB.idsToChroms[chromId] = key;\n                        thisB.maxID = Math.max(thisB.maxID, chromId);\n                    }\n                }\n            };\n            bptReadNode(rootNodeOffset);\n        });\n    }\n\n    function BigWigView(bwg, cirTreeOffset, cirTreeLength, isSummary) {\n        this.bwg = bwg;\n        this.cirTreeOffset = cirTreeOffset;\n        this.cirTreeLength = cirTreeLength;\n        this.isSummary = isSummary;\n    }\n\n\n\n    BigWigView.prototype.readWigData = function(chrName, min, max) {\n        var chr = this.bwg.chromsToIDs[chrName],\n            rval;\n        if (chr === undefined) {\n            // Not an error because some .bwgs won't have data for all chromosomes.\n            rval = [];\n        } else {\n            rval = this.readWigDataById(chr, min, max);\n        }\n\n        return rval;\n    };\n\n    BigWigView.prototype.readWigDataById = function(chr, min, max) {\n        var thisB = this,\n            promise = $.Deferred();\n\n        // Read the R-tree index header and then read data again.\n        if (!this.cirHeader) {\n            $.when(read(thisB.bwg.url, this.cirTreeOffset, 48)).then(function(result) {\n                thisB.cirHeader = result;\n                var la = new Int32Array(thisB.cirHeader);\n                thisB.cirBlockSize = la[1];\n                $.when(thisB.readWigDataById(chr, min, max)).then(function(result) {\n                    promise.resolve(result);\n                });\n            });\n            return promise;\n        }\n\n        var blocksToFetch = [];\n        var outstanding = 0;\n\n        var beforeBWG = Date.now();\n\n        var filter = function(chromId, fmin, fmax, toks) {\n            return ((chr < 0 || chromId == chr) && fmin <= max && fmax >= min);\n        };\n\n        var cirFobRecur = function(offset, level) {\n            if (thisB.bwg.instrument)\n            console.log('level=' + level + '; offset=' + offset + '; time=' + (Date.now()|0));\n\n            outstanding += offset.length;\n\n            if (offset.length == 1 && offset[0] - thisB.cirTreeOffset == 48 && thisB.cachedCirRoot) {\n                cirFobRecur2(thisB.cachedCirRoot, 0, level);\n                --outstanding;\n                if (outstanding === 0) {\n                    $.when(thisB.fetchFeatures(filter, blocksToFetch)).then(function(result) {\n                        promise.resolve(result);\n                    });\n                }\n                return;\n            }\n\n            var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n            var spans;\n            for (var i = 0; i < offset.length; ++i) {\n                var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n                spans = spans ? union(spans, blockSpan) : blockSpan;\n            }\n\n            var fetchRanges = spans.ranges();\n            for (var r = 0; r < fetchRanges.length; ++r) {\n                var fr = fetchRanges[r];\n                cirFobStartFetch(offset, fr, level);\n            }\n        };\n\n        var cirFobStartFetch = function(offset, fr, level, attempts) {\n            var length = fr.max() - fr.min();\n            $.when(read(thisB.bwg.url, fr.min(), fr.max() - fr.min())).then(function(resultBuffer) {\n                for (var i = 0; i < offset.length; ++i) {\n                    if (fr.contains(offset[i])) {\n                        cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n\n                        if (offset[i] - thisB.cirTreeOffset == 48 && offset[i] - fr.min() === 0)\n                            thisB.cachedCirRoot = resultBuffer;\n\n                        --outstanding;\n                        if (outstanding === 0) {\n                            $.when(thisB.fetchFeatures(filter, blocksToFetch)).then(function(result) {\n                                promise.resolve(result);\n                            });\n                        }\n                    }\n                }\n            });\n        };\n\n        var cirFobRecur2 = function(cirBlockData, offset, level) {\n            var ba = new Uint8Array(cirBlockData);\n            var sa = new Int16Array(cirBlockData);\n            var la = new Int32Array(cirBlockData);\n\n            var isLeaf = ba[offset];\n            var cnt = sa[offset/2 + 1];\n            offset += 4;\n\n            if (isLeaf !== 0) {\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = bwg_readOffset(ba, offset+16);\n                    var blockSize = bwg_readOffset(ba, offset+24);\n                    if (((chr < 0 || startChrom < chr) || (startChrom == chr && startBase <= max)) &&\n                    ((chr < 0 || endChrom   > chr) || (endChrom == chr && endBase >= min)))\n                    {\n                        blocksToFetch.push({offset: blockOffset, size: blockSize});\n                    }\n                    offset += 32;\n                }\n            } else {\n                var recurOffsets = [];\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = bwg_readOffset(ba, offset+16);\n                    if ((chr < 0 || startChrom < chr || (startChrom == chr && startBase <= max)) &&\n                    (chr < 0 || endChrom   > chr || (endChrom == chr && endBase >= min)))\n                    {\n                        recurOffsets.push(blockOffset);\n                    }\n                    offset += 24;\n                }\n                if (recurOffsets.length > 0) {\n                    cirFobRecur(recurOffsets, level + 1);\n                }\n            }\n        };\n\n        cirFobRecur([thisB.cirTreeOffset + 48], 1);\n        return promise;\n    };\n\n    /**\n     * Fetch data for a set of blocks. Returns a promise that resolves to fetched data.\n     */\n    BigWigView.prototype.fetchFeatures = function(filter, blocksToFetch) {\n        var thisB = this,\n            promise = $.Deferred();\n\n        blocksToFetch.sort(function(b0, b1) {\n            return (b0.offset|0) - (b1.offset|0);\n        });\n\n        if (blocksToFetch.length === 0) {\n            return [];\n        } else {\n            var features = [];\n            var createFeature = function(chr, fmin, fmax, opts) {\n                if (!opts) {\n                    opts = {};\n                }\n\n                var f = new DASFeature();\n                f._chromId = chr;\n                f.segment = thisB.bwg.idsToChroms[chr];\n                f.min = fmin;\n                f.max = fmax;\n                f.type = thisB.bwg.type;\n\n                for (var k in opts) {\n                    f[k] = opts[k];\n                }\n\n                features.push(f);\n            };\n\n            // Recursive function to read blocks of data.\n            var tramp = function() {\n                if (blocksToFetch.length === 0) {\n                    var afterBWG = Date.now();\n                    // dlog('BWG fetch took ' + (afterBWG - beforeBWG) + 'ms');\n                    return promise.resolve(features);\n                }\n                else {\n                    var block = blocksToFetch[0];\n                    if (block.data) {\n                        thisB.parseFeatures(block.data, createFeature, filter);\n                        blocksToFetch.splice(0, 1);\n                        tramp();\n                    }\n                    else {\n                        var fetchStart = block.offset;\n                        var fetchSize = block.size;\n                        var bi = 1;\n                        while (bi < blocksToFetch.length && blocksToFetch[bi].offset == (fetchStart + fetchSize)) {\n                            fetchSize += blocksToFetch[bi].size;\n                            ++bi;\n                        }\n\n                        $.when(read(thisB.bwg.url, fetchStart, fetchSize)).then(function(result) {\n                            var offset = 0;\n                            var bi = 0;\n                            while (offset < fetchSize) {\n                                var fb = blocksToFetch[bi];\n\n                                var data;\n                                if (thisB.bwg.uncompressBufSize > 0) {\n                                    data = jszlib_inflate_buffer(result, offset + 2, fb.size - 2);\n                                } else {\n                                    var tmp = new Uint8Array(fb.size);    // FIXME is this really the best we can do?\n                                    arrayCopy(new Uint8Array(result, offset, fb.size), 0, tmp, 0, fb.size);\n                                    data = tmp.buffer;\n                                }\n                                fb.data = data;\n\n                                offset += fb.size;\n                                ++bi;\n                            }\n                            tramp();\n                        });\n                    }\n                }\n            };\n            tramp();\n        }\n\n        return promise;\n    };\n\n    BigWigView.prototype.parseFeatures = function(data, createFeature, filter) {\n        var ba = new Uint8Array(data);\n\n        if (this.isSummary) {\n            var sa = new Int16Array(data);\n            var la = new Int32Array(data);\n            var fa = new Float32Array(data);\n\n            var itemCount = data.byteLength/32;\n            for (var i = 0; i < itemCount; ++i) {\n                var chromId =   la[(i*8)];\n                var start =     la[(i*8)+1];\n                var end =       la[(i*8)+2];\n                var validCnt =  la[(i*8)+3];\n                var minVal    = fa[(i*8)+4];\n                var maxVal    = fa[(i*8)+5];\n                var sumData   = fa[(i*8)+6];\n                var sumSqData = fa[(i*8)+7];\n\n                if (filter(chromId, start + 1, end)) {\n                    var summaryOpts = {type: 'bigwig', score: sumData/validCnt, maxScore: maxVal};\n                    if (this.bwg.type == 'bigbed') {\n                        summaryOpts.type = 'density';\n                    }\n                    createFeature(chromId, start + 1, end, summaryOpts);\n                }\n            }\n        }\n        else if (this.bwg.type == 'bigwig') {\n            var sa = new Int16Array(data);\n            var la = new Int32Array(data);\n            var fa = new Float32Array(data);\n\n            var chromId = la[0];\n            var blockStart = la[1];\n            var blockEnd = la[2];\n            var itemStep = la[3];\n            var itemSpan = la[4];\n            var blockType = ba[20];\n            var itemCount = sa[11];\n\n            if (blockType == BIG_WIG_TYPE_FSTEP) {\n                for (var i = 0; i < itemCount; ++i) {\n                    var score = fa[i + 6];\n                    var fmin = blockStart + (i*itemStep) + 1, fmax = blockStart + (i*itemStep) + itemSpan;\n                    if (filter(chromId, fmin, fmax))\n                    createFeature(chromId, fmin, fmax, {score: score});\n                }\n            } else if (blockType == BIG_WIG_TYPE_VSTEP) {\n                for (var i = 0; i < itemCount; ++i) {\n                    var start = la[(i*2) + 6] + 1;\n                    var end = start + itemSpan - 1;\n                    var score = fa[(i*2) + 7];\n                    if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n                }\n            } else if (blockType == BIG_WIG_TYPE_GRAPH) {\n                for (var i = 0; i < itemCount; ++i) {\n                    var start = la[(i*3) + 6] + 1;\n                    var end   = la[(i*3) + 7];\n                    var score = fa[(i*3) + 8];\n                    if (start > end) {\n                        start = end;\n                    }\n                    if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n                }\n            } else {\n                console.log('Currently not handling bwgType=' + blockType);\n            }\n        } else if (this.bwg.type == 'bigbed') {\n            var offset = 0;\n            var dfc = this.bwg.definedFieldCount;\n            var schema = this.bwg.schema;\n\n            while (offset < ba.length) {\n                var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n                var start = (ba[offset+7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n                var end = (ba[offset+11]<<24) | (ba[offset+10]<<16) | (ba[offset+9]<<8) | (ba[offset+8]);\n                offset += 12;\n                var rest = '';\n                while (true) {\n                    var ch = ba[offset++];\n                    if (ch != 0) {\n                        rest += String.fromCharCode(ch);\n                    } else {\n                        break;\n                    }\n                }\n\n                var featureOpts = {};\n\n                var bedColumns;\n                if (rest.length > 0) {\n                    bedColumns = rest.split('\\t');\n                } else {\n                    bedColumns = [];\n                }\n                if (bedColumns.length > 0 && dfc > 3) {\n                    featureOpts.label = bedColumns[0];\n                }\n                if (bedColumns.length > 1 && dfc > 4) {\n                    var score = parseInt(bedColumns[1]);\n                    if (!isNaN(score))\n                    featureOpts.score = score;\n                }\n                if (bedColumns.length > 2 && dfc > 5) {\n                    featureOpts.orientation = bedColumns[2];\n                }\n                if (bedColumns.length > 5 && dfc > 8) {\n                    var color = bedColumns[5];\n                    if (BED_COLOR_REGEXP.test(color)) {\n                        featureOpts.itemRgb = 'rgb(' + color + ')';\n                    }\n                }\n\n                if (bedColumns.length > dfc-3 && schema) {\n                    for (var col = dfc - 3; col < bedColumns.length; ++col) {\n                        featureOpts[schema.fields[col+3].name] = bedColumns[col];\n                    }\n                }\n\n                if (filter(chromId, start + 1, end, bedColumns)) {\n                    if (dfc < 12) {\n                        createFeature(chromId, start + 1, end, featureOpts);\n                    } else {\n                        // TODO: add block starts, sizes, thick start, thick end to feature.\n                        var thickStart = bedColumns[3]|0;\n                        var thickEnd   = bedColumns[4]|0;\n                        var blockCount = bedColumns[6]|0;\n                        var blockSizes = bedColumns[7].split(',');\n                        var blockStarts = bedColumns[8].split(',');\n\n                        if (featureOpts.exonFrames) {\n                            var exonFrames = featureOpts.exonFrames.split(',');\n                            featureOpts.exonFrames = undefined;\n                        }\n\n                        featureOpts.type = 'transcript'\n                        var grp = new DASGroup();\n                        for (var k in featureOpts) {\n                            grp[k] = featureOpts[k];\n                        }\n                        grp.id = bedColumns[0];\n                        grp.segment = this.bwg.idsToChroms[chromId];\n                        grp.min = start + 1;\n                        grp.max = end;\n                        grp.notes = [];\n                        featureOpts.groups = [grp];\n\n                        // Moving towards using bigGenePred model, but will\n                        // still support old Dalliance-style BED12+gene-name for the\n                        // foreseeable future.\n                        if (bedColumns.length > 9) {\n                            var geneId = featureOpts.geneName || bedColumns[9];\n                            var geneName = geneId;\n                            if (bedColumns.length > 10) {\n                                geneName = bedColumns[10];\n                            }\n                            if (featureOpts.geneName2)\n                            geneName = featureOpts.geneName2;\n\n                            var gg = $.extend({}, grp);\n                            gg.id = geneId;\n                            gg.label = geneName;\n                            gg.type = 'gene';\n                            featureOpts.groups.push(gg);\n                        }\n\n                        var spanList = [];\n                        for (var b = 0; b < blockCount; ++b) {\n                            var bmin = (blockStarts[b]|0) + start;\n                            var bmax = bmin + (blockSizes[b]|0);\n                            var span = new Range(bmin, bmax);\n                            spanList.push(span);\n                        }\n                        var spans = union(spanList);\n\n                        var tsList = spans.ranges();\n                        for (var s = 0; s < tsList.length; ++s) {\n                            var ts = tsList[s];\n                            createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                        }\n\n                        if (thickEnd > thickStart) {\n                            var codingRegion = (featureOpts.orientation == '+') ?\n                            new Range(thickStart, thickEnd + 3) :\n                            new Range(thickStart - 3, thickEnd);\n                            // +/- 3 to account for stop codon\n\n                            var tl = intersection(spans, codingRegion);\n                            if (tl) {\n                                featureOpts.type = 'translation';\n                                var tlList = tl.ranges();\n                                var readingFrame = 0;\n\n                                var tlOffset = 0;\n                                while (tlList[0].min() > tsList[tlOffset].max())\n                                tlOffset++;\n\n                                for (var s = 0; s < tlList.length; ++s) {\n                                    // Record reading frame for every exon\n                                    var index = s;\n                                    if (featureOpts.orientation == '-')\n                                    index = tlList.length - s - 1;\n                                    var ts = tlList[index];\n                                    featureOpts.readframe = readingFrame;\n                                    if (exonFrames) {\n                                        var brf = parseInt(exonFrames[index + tlOffset]);\n                                        if (typeof(brf) === 'number' && brf >= 0 && brf <= 2) {\n                                            featureOpts.readframe = brf;\n                                            featureOpts.readframeExplicit = true;\n                                        }\n                                    }\n                                    var length = ts.max() - ts.min();\n                                    readingFrame = (readingFrame + length) % 3;\n                                    createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            throw Error(\"Don't know what to do with \" + this.bwg.type);\n        }\n    }\n\n    //\n    // nasty cut/paste, should roll back in!\n    //\n\n    BigWigView.prototype.getFirstAdjacent = function(chrName, pos, dir, callback) {\n        var chr = this.bwg.chromsToIDs[chrName];\n        if (chr === undefined) {\n            // Not an error because some .bwgs won't have data for all chromosomes.\n            return callback([]);\n        } else {\n            this.getFirstAdjacentById(chr, pos, dir, callback);\n        }\n    }\n\n    BigWigView.prototype.getFirstAdjacentById = function(chr, pos, dir, callback) {\n        var thisB = this;\n        if (!this.cirHeader) {\n            this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {\n                thisB.cirHeader = result;\n                var la = new Int32Array(thisB.cirHeader);\n                thisB.cirBlockSize = la[1];\n                thisB.getFirstAdjacentById(chr, pos, dir, callback);\n            });\n            return;\n        }\n\n        var blockToFetch = null;\n        var bestBlockChr = -1;\n        var bestBlockOffset = -1;\n\n        var outstanding = 0;\n\n        var beforeBWG = Date.now();\n\n        var cirFobRecur = function(offset, level) {\n            outstanding += offset.length;\n\n            var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n            var spans;\n            for (var i = 0; i < offset.length; ++i) {\n                var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n                spans = spans ? union(spans, blockSpan) : blockSpan;\n            }\n\n            var fetchRanges = spans.ranges();\n            for (var r = 0; r < fetchRanges.length; ++r) {\n                var fr = fetchRanges[r];\n                cirFobStartFetch(offset, fr, level);\n            }\n        }\n\n        var cirFobStartFetch = function(offset, fr, level, attempts) {\n            var length = fr.max() - fr.min();\n            thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {\n                for (var i = 0; i < offset.length; ++i) {\n                    if (fr.contains(offset[i])) {\n                        cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n                        --outstanding;\n                        if (outstanding == 0) {\n                            if (!blockToFetch) {\n                                if (dir > 0 && (chr != 0 || pos > 0)) {\n                                    return thisB.getFirstAdjacentById(0, 0, dir, callback);\n                                } else if (dir < 0 && (chr != thisB.bwg.maxID || pos < 1000000000)) {\n                                    return thisB.getFirstAdjacentById(thisB.bwg.maxID, 1000000000, dir, callback);\n                                }\n                                return callback([]);\n                            }\n\n                            thisB.fetchFeatures(function(chrx, fmin, fmax, toks) {\n                                return (dir < 0 && (chrx < chr || fmax < pos)) || (dir > 0 && (chrx > chr || fmin > pos));\n                            }, [blockToFetch], function(features) {\n                                var bestFeature = null;\n                                var bestChr = -1;\n                                var bestPos = -1;\n                                for (var fi = 0; fi < features.length; ++fi) {\n                                    var f = features[fi];\n                                    var chrx = f._chromId, fmin = f.min, fmax = f.max;\n                                    if (bestFeature == null || ((dir < 0) && (chrx > bestChr || fmax > bestPos)) || ((dir > 0) && (chrx < bestChr || fmin < bestPos))) {\n                                        bestFeature = f;\n                                        bestPos = (dir < 0) ? fmax : fmin;\n                                        bestChr = chrx;\n                                    }\n                                }\n\n                                if (bestFeature != null)\n                                return callback([bestFeature]);\n                                else\n                                return callback([]);\n                            });\n                        }\n                    }\n                }\n            });\n        }\n\n        var cirFobRecur2 = function(cirBlockData, offset, level) {\n            var ba = new Uint8Array(cirBlockData);\n            var sa = new Int16Array(cirBlockData);\n            var la = new Int32Array(cirBlockData);\n\n            var isLeaf = ba[offset];\n            var cnt = sa[offset/2 + 1];\n            offset += 4;\n\n            if (isLeaf != 0) {\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = bwg_readOffset(ba, offset+16);\n                    var blockSize = bwg_readOffset(ba, offset+24);\n                    if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)))) ||\n                    (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)))))\n                    {\n                        // console.log('Got an interesting block: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                        if (/_random/.exec(thisB.bwg.idsToChroms[startChrom])) {\n                            // dlog('skipping random: ' + thisB.bwg.idsToChroms[startChrom]);\n                        } else if (blockToFetch == null || ((dir < 0) && (endChrom > bestBlockChr || (endChrom == bestBlockChr && endBase > bestBlockOffset)) ||\n                        (dir > 0) && (startChrom < bestBlockChr || (startChrom == bestBlockChr && startBase < bestBlockOffset))))\n                        {\n                            //                        dlog('best is: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                            blockToFetch = {offset: blockOffset, size: blockSize};\n                            bestBlockOffset = (dir < 0) ? endBase : startBase;\n                            bestBlockChr = (dir < 0) ? endChrom : startChrom;\n                        }\n                    }\n                    offset += 32;\n                }\n            } else {\n                var bestRecur = -1;\n                var bestPos = -1;\n                var bestChr = -1;\n                for (var i = 0; i < cnt; ++i) {\n                    var lo = offset/4;\n                    var startChrom = la[lo];\n                    var startBase = la[lo + 1];\n                    var endChrom = la[lo + 2];\n                    var endBase = la[lo + 3];\n                    var blockOffset = (la[lo + 4]<<32) | (la[lo + 5]);\n                    if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)) &&\n                    (endChrom   >= chr))) ||\n                    (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)) &&\n                    (startChrom <= chr))))\n                    {\n                        if (bestRecur < 0 || endBase > bestPos) {\n                            bestRecur = blockOffset;\n                            bestPos = (dir < 0) ? endBase : startBase;\n                            bestChr = (dir < 0) ? endChrom : startChrom;\n                        }\n                    }\n                    offset += 24;\n                }\n                if (bestRecur >= 0) {\n                    cirFobRecur([bestRecur], level + 1);\n                }\n            }\n        };\n\n\n        cirFobRecur([thisB.cirTreeOffset + 48], 1);\n    }\n\n    /**\n    * Automatically choose a zoom level and return data from that level.\n    */\n    BigWig.prototype.readWigData = function(chrName, min, max) {\n        // Maximum number of data points to return when reading a bigwig. This is used\n        // to choose the appropriate level. One data point ~= 25-65 bytes.\n        // FIXME: For targeted sequencing, data points returned is going to be much lower,\n        // so this will need to be tuned appropriately.\n        var MAX_DATA_POINTS = 25000;\n\n        var range = max - min,\n        view;\n        // If no zooming needed or available (common in bigbed), use unzoomed view.\n        if (range <= MAX_DATA_POINTS || this.zoomLevels.length === 0) {\n            view = this.getUnzoomedView();\n        }\n        else {\n            // Find reasonable zoom level. Reduction is the # of bases represented\n            // by each data point at that level.\n            for (var i = 0; i < this.zoomLevels.length; i++) {\n                if (range/this.zoomLevels[i].reduction < MAX_DATA_POINTS) {\n                    view = this.getZoomedView(i);\n                    break;\n                }\n            }\n        }\n\n        return view.readWigData(chrName, min, max);\n    }\n\n    BigWig.prototype.getUnzoomedView = function() {\n        if (!this.unzoomedView) {\n            var cirLen = 4000;\n            var nzl = this.zoomLevels[0];\n            if (nzl) {\n                cirLen = this.zoomLevels[0].dataOffset - this.unzoomedIndexOffset;\n            }\n            this.unzoomedView = new BigWigView(this, this.unzoomedIndexOffset, cirLen, false);\n        }\n        return this.unzoomedView;\n    }\n\n    BigWig.prototype.getZoomedView = function(z) {\n        var zh = this.zoomLevels[z];\n        if (!zh.view) {\n            zh.view = new BigWigView(this, zh.indexOffset, /* this.zoomLevels[z + 1].dataOffset - zh.indexOffset */ 4000, true);\n        }\n        return zh.view;\n    }\n\n    /**\n     * Create a BigWig object using a URL to a bigwig/bigbed file. Returns a promise\n     * that resolves to the object when it's available.\n     */\n    function makeBwg(url) {\n        var promise = $.Deferred(),\n        bwg = new BigWig();\n        bwg.url = url;\n\n        // Read and parse bigwig header, including chrom tree.\n        $.when(read(bwg.url, 0, 512)).then(function(result) {\n            if (!result) {\n                return promise.resolve(null, \"Couldn't fetch file\");\n            }\n\n            var header = result;\n            var ba = new Uint8Array(header);\n            var sa = new Int16Array(header);\n            var la = new Int32Array(header);\n            var magic = ba[0] + (M1 * ba[1]) + (M2 * ba[2]) + (M3 * ba[3]);\n            if (magic == BIG_WIG_MAGIC) {\n                bwg.type = 'bigwig';\n            } else if (magic == BIG_BED_MAGIC) {\n                bwg.type = 'bigbed';\n            } else if (magic == BIG_WIG_MAGIC_BE || magic == BIG_BED_MAGIC_BE) {\n                return promise.resolve(null, \"Currently don't support big-endian BBI files\");\n\n            } else {\n                return promise.resolve(null, \"Not a supported format, magic=0x\" + magic.toString(16));\n\n            }\n\n            bwg.version = sa[2];             // 4\n            bwg.numZoomLevels = sa[3];       // 6\n            bwg.chromTreeOffset = bwg_readOffset(ba, 8);\n            bwg.unzoomedDataOffset = bwg_readOffset(ba, 16);\n            bwg.unzoomedIndexOffset = bwg_readOffset(ba, 24);\n            bwg.fieldCount = sa[16];         // 32\n            bwg.definedFieldCount = sa[17];  // 34\n            bwg.asOffset = bwg_readOffset(ba, 36);\n            bwg.totalSummaryOffset = bwg_readOffset(ba, 44);\n            bwg.uncompressBufSize = la[13];  // 52\n            bwg.extHeaderOffset = bwg_readOffset(ba, 56);\n\n            bwg.zoomLevels = [];\n            for (var zl = 0; zl < bwg.numZoomLevels; ++zl) {\n                var zlReduction = la[zl*6 + 16]\n                var zlData = bwg_readOffset(ba, zl*24 + 72);\n                var zlIndex = bwg_readOffset(ba, zl*24 + 80);\n                bwg.zoomLevels.push({reduction: zlReduction, dataOffset: zlData, indexOffset: zlIndex});\n            }\n\n            $.when(bwg.readChromTree()).then(function() {\n                bwg.getAutoSQL(function(as) {\n                    bwg.schema = as;\n                    return promise.resolve(bwg);\n                });\n            });\n        });\n\n        return promise;\n    }\n\n\n    BigWig.prototype._tsFetch = function(zoom, chr, min, max, callback) {\n        var bwg = this;\n        if (zoom >= this.zoomLevels.length - 1) {\n            if (!this.topLevelReductionCache) {\n                this.getZoomedView(this.zoomLevels.length - 1).readWigDataById(-1, 0, 300000000, function(feats) {\n                    bwg.topLevelReductionCache = feats;\n                    return bwg._tsFetch(zoom, chr, min, max, callback);\n                });\n            } else {\n                var f = [];\n                var c = this.topLevelReductionCache;\n                for (var fi = 0; fi < c.length; ++fi) {\n                    if (c[fi]._chromId == chr) {\n                        f.push(c[fi]);\n                    }\n                }\n                return callback(f);\n            }\n        } else {\n            var view;\n            if (zoom < 0) {\n                view = this.getUnzoomedView();\n            } else {\n                view = this.getZoomedView(zoom);\n            }\n            return view.readWigDataById(chr, min, max, callback);\n        }\n    }\n\n    BigWig.prototype.thresholdSearch = function(chrName, referencePoint, dir, threshold, callback) {\n        dir = (dir<0) ? -1 : 1;\n        var bwg = this;\n        var initialChr = this.chromsToIDs[chrName];\n        var candidates = [{chrOrd: 0, chr: initialChr, zoom: bwg.zoomLevels.length - 4, min: 0, max: 300000000, fromRef: true}]\n        for (var i = 1; i <= this.maxID + 1; ++i) {\n            var chrId = (initialChr + (dir*i)) % (this.maxID + 1);\n            if (chrId < 0)\n            chrId += (this.maxID + 1);\n            candidates.push({chrOrd: i, chr: chrId, zoom: bwg.zoomLevels.length - 1, min: 0, max: 300000000})\n        }\n\n        function fbThresholdSearchRecur() {\n            if (candidates.length == 0) {\n                return callback(null);\n            }\n            candidates.sort(function(c1, c2) {\n                var d = c1.zoom - c2.zoom;\n                if (d != 0)\n                return d;\n\n                d = c1.chrOrd - c2.chrOrd;\n                if (d != 0)\n                return d;\n                else\n                return c1.min - c2.min * dir;\n            });\n\n            var candidate = candidates.splice(0, 1)[0];\n            bwg._tsFetch(candidate.zoom, candidate.chr, candidate.min, candidate.max, function(feats) {\n                var rp = dir > 0 ? 0 : 300000000;\n                if (candidate.fromRef)\n                rp = referencePoint;\n\n                for (var fi = 0; fi < feats.length; ++fi) {\n                    var f = feats[fi];\n                    var score;\n                    if (f.maxScore != undefined)\n                    score = f.maxScore;\n                    else\n                    score = f.score;\n\n                    if (dir > 0) {\n                        if (score > threshold) {\n                            if (candidate.zoom < 0) {\n                                if (f.min > rp)\n                                return callback(f);\n                            } else if (f.max > rp) {\n                                candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n                            }\n                        }\n                    } else {\n                        if (score > threshold) {\n                            if (candidate.zoom < 0) {\n                                if (f.max < rp)\n                                return callback(f);\n                            } else if (f.min < rp) {\n                                candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n                            }\n                        }\n                    }\n                }\n                fbThresholdSearchRecur();\n            });\n        }\n\n        fbThresholdSearchRecur();\n    }\n\n    BigWig.prototype.getAutoSQL = function(callback) {\n        var thisB = this;\n        if (!this.asOffset)\n        return callback(null);\n\n        $.when(read(this.url, this.asOffset, 2048)).then(function(result) {\n            var ba = new Uint8Array(result);\n            var s = '';\n            for (var i = 0; i < ba.length; ++i) {\n                if (ba[i] == 0)\n                break;\n                s += String.fromCharCode(ba[i]);\n            }\n\n            /*\n            * Quick'n'dirty attempt to parse autoSql format.\n            * See: http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/059/5949/5949l2.html\n            */\n\n            var header_re = /(\\w+)\\s+(\\w+)\\s+(\"([^\"]+)\")?\\s+\\(\\s*/;\n                var field_re = /([\\w\\[\\]]+)\\s+(\\w+)\\s*;\\s*(\"([^\"]+)\")?\\s*/g;\n\n            var headerMatch = header_re.exec(s);\n            if (headerMatch) {\n                var as = {\n                    declType: headerMatch[1],\n                    name: headerMatch[2],\n                    comment: headerMatch[4],\n\n                    fields: []\n                };\n\n                s = s.substring(headerMatch[0]);\n                for (var m = field_re.exec(s); m != null; m = field_re.exec(s)) {\n                    as.fields.push({type: m[1],\n                        name: m[2],\n                        comment: m[4]});\n                    }\n\n                    return callback(as);\n                }\n        });\n    };\n\n    BigWig.prototype.getExtraIndices = function(callback) {\n        var thisB = this;\n        if (this.version < 4 || this.extHeaderOffset == 0 || this.type != 'bigbed') {\n            return callback(null);\n        } else {\n            this.data.slice(this.extHeaderOffset, 64).fetch(function(result) {\n                if (!result) {\n                    return callback(null, \"Couldn't fetch extension header\");\n                }\n\n                var ba = new Uint8Array(result);\n                var sa = new Int16Array(result);\n                var la = new Int32Array(result);\n\n                var extHeaderSize = sa[0];\n                var extraIndexCount = sa[1];\n                var extraIndexListOffset = bwg_readOffset(ba, 4);\n\n                if (extraIndexCount == 0) {\n                    return callback(null);\n                }\n\n                // FIXME 20byte records only make sense for single-field indices.\n                // Right now, these seem to be the only things around, but the format\n                // is actually more general.\n                thisB.data.slice(extraIndexListOffset, extraIndexCount * 20).fetch(function(eil) {\n                    if (!eil) {\n                        return callback(null, \"Couldn't fetch index info\");\n                    }\n\n                    var ba = new Uint8Array(eil);\n                    var sa = new Int16Array(eil);\n                    var la = new Int32Array(eil);\n\n                    var indices = [];\n                    for (var ii = 0; ii < extraIndexCount; ++ii) {\n                        var eiType = sa[ii*10];\n                        var eiFieldCount = sa[ii*10 + 1];\n                        var eiOffset = bwg_readOffset(ba, ii*20 + 4);\n                        var eiField = sa[ii*10 + 8]\n                        var index = new BBIExtraIndex(thisB, eiType, eiFieldCount, eiOffset, eiField);\n                        indices.push(index);\n                    }\n                    callback(indices);\n                });\n            });\n        }\n    }\n\n    function BBIExtraIndex(bbi, type, fieldCount, offset, field) {\n        this.bbi = bbi;\n        this.type = type;\n        this.fieldCount = fieldCount;\n        this.offset = offset;\n        this.field = field;\n    }\n\n    BBIExtraIndex.prototype.lookup = function(name, callback) {\n        var thisB = this;\n\n        this.bbi.data.slice(this.offset, 32).fetch(function(bpt) {\n            var ba = new Uint8Array(bpt);\n            var sa = new Int16Array(bpt);\n            var la = new Int32Array(bpt);\n            var bptMagic = la[0];\n            var blockSize = la[1];\n            var keySize = la[2];\n            var valSize = la[3];\n            var itemCount = bwg_readOffset(ba, 16);\n            var rootNodeOffset = 32;\n\n            function bptReadNode(nodeOffset) {\n                thisB.bbi.data.slice(nodeOffset, 4 + (blockSize * (keySize + valSize))).fetch(function(node) {\n                    var ba = new Uint8Array(node);\n                    var sa = new Uint16Array(node);\n                    var la = new Uint32Array(node);\n\n                    var nodeType = ba[0];\n                    var cnt = sa[1];\n\n                    var offset = 4;\n                    if (nodeType == 0) {\n                        var lastChildOffset = null;\n                        for (var n = 0; n < cnt; ++n) {\n                            var key = '';\n                            for (var ki = 0; ki < keySize; ++ki) {\n                                var charCode = ba[offset++];\n                                if (charCode != 0) {\n                                    key += String.fromCharCode(charCode);\n                                }\n                            }\n\n                            var childOffset = bwg_readOffset(ba, offset);\n                            offset += 8;\n\n                            if (name.localeCompare(key) < 0 && lastChildOffset) {\n                                bptReadNode(lastChildOffset);\n                                return;\n                            }\n                            lastChildOffset = childOffset;\n                        }\n                        bptReadNode(lastChildOffset);\n                    } else {\n                        for (var n = 0; n < cnt; ++n) {\n                            var key = '';\n                            for (var ki = 0; ki < keySize; ++ki) {\n                                var charCode = ba[offset++];\n                                if (charCode != 0) {\n                                    key += String.fromCharCode(charCode);\n                                }\n                            }\n\n                            // Specific for EI case.\n                            if (key == name) {\n                                var start = bwg_readOffset(ba, offset);\n                                var length = readInt(ba, offset + 8);\n\n                                return thisB.bbi.getUnzoomedView().fetchFeatures(\n                                    function(chr, min, max, toks) {\n                                        if (toks && toks.length > thisB.field - 3)\n                                        return toks[thisB.field - 3] == name;\n                                    },\n                                    [{offset: start, size: length}],\n                                    callback);\n                                }\n                                offset += valSize;\n                            }\n                            return callback([]);\n                        }\n                    });\n                }\n\n                bptReadNode(thisB.offset + rootNodeOffset);\n        });\n    }\n\n    return {\n        makeBwg: makeBwg\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./galaxy/scripts/libs/bbi/bigwig.js\n// module id = 40\n// module chunks = 0 1 2 3","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n//\n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// spans.js: JavaScript Intset/Location port.\n//\n\ndefine([], function() {\n\n\"use strict\";\n\n\nfunction Range(min, max)\n{\n    if (typeof(min) != 'number' || typeof(max) != 'number')\n        throw 'Bad range ' + min + ',' + max;\n    this._min = min;\n    this._max = max;\n}\n\nRange.prototype.min = function() {\n    return this._min;\n}\n\nRange.prototype.max = function() {\n    return this._max;\n}\n\nRange.prototype.contains = function(pos) {\n    return pos >= this._min && pos <= this._max;\n}\n\nRange.prototype.isContiguous = function() {\n    return true;\n}\n\nRange.prototype.ranges = function() {\n    return [this];\n}\n\nRange.prototype._pushRanges = function(ranges) {\n    ranges.push(this);\n}\n\nRange.prototype.toString = function() {\n    return '[' + this._min + '-' + this._max + ']';\n}\n\nfunction _Compound(ranges) {\n    // given: a set of unsorted possibly overlapping ranges\n    // sort the input ranges\n    var sorted = ranges.sort(_rangeOrder);\n    // merge overlaps between adjacent ranges\n    var merged = [];\n    var current = sorted.shift();\n    sorted.forEach(function(range) {\n        if (range._min <= current._max) {\n            if (range._max > current._max) {\n                current._max = range._max;\n            }\n        }\n        else {\n            merged.push(current);\n            current = range;\n        }\n    });\n    merged.push(current);\n    this._ranges = merged;\n}\n\n_Compound.prototype.min = function() {\n    return this._ranges[0].min();\n}\n\n_Compound.prototype.max = function() {\n    return this._ranges[this._ranges.length - 1].max();\n}\n\n// returns the index of the first range that is not less than pos\n_Compound.prototype.lower_bound = function(pos) {\n    // first check if pos is out of range\n    var r = this.ranges();\n    if (pos > this.max()) return r.length;\n    if (pos < this.min()) return 0;\n    // do a binary search\n    var a=0, b=r.length - 1;\n    while (a <= b) {\n        var m = Math.floor((a+b)/2);\n        if (pos > r[m]._max) {\n            a = m+1;\n        }\n        else if (pos < r[m]._min) {\n            b = m-1;\n        }\n        else {\n            return m;\n        }\n    }\n    return a;\n}\n\n_Compound.prototype.contains = function(pos) {\n    var lb = this.lower_bound(pos);\n    if (lb < this._ranges.length && this._ranges[lb].contains(pos)) {\n        return true;\n    }\n    return false;\n}\n\n_Compound.prototype.insertRange = function(range) {\n    var lb = this.lower_bound(range._min);\n    if (lb === this._ranges.length) { // range follows this\n        this._ranges.push(range);\n        return;\n    }\n\n    var r = this.ranges();\n    if (range._max < r[lb]._min) { // range preceeds lb\n        this._ranges.splice(lb,0,range);\n        return;\n    }\n\n    // range overlaps lb (at least)\n    if (r[lb]._min < range._min) range._min = r[lb]._min;\n    var ub = lb+1;\n    while (ub < r.length && r[ub]._min <= range._max) {\n        ub++;\n    }\n    ub--;\n    // ub is the upper bound of the new range\n    if (r[ub]._max > range._max) range._max = r[ub]._max;\n\n    // splice range into this._ranges\n    this._ranges.splice(lb,ub-lb+1,range);\n    return;\n}\n\n_Compound.prototype.isContiguous = function() {\n    return this._ranges.length > 1;\n}\n\n_Compound.prototype.ranges = function() {\n    return this._ranges;\n}\n\n_Compound.prototype._pushRanges = function(ranges) {\n    for (var ri = 0; ri < this._ranges.length; ++ri)\n        ranges.push(this._ranges[ri]);\n}\n\n_Compound.prototype.toString = function() {\n    var s = '';\n    for (var r = 0; r < this._ranges.length; ++r) {\n        if (r>0) {\n            s = s + ',';\n        }\n        s = s + this._ranges[r].toString();\n    }\n    return s;\n}\n\nfunction union(s0, s1) {\n    if (! (s0 instanceof _Compound)) {\n        if (! (s0 instanceof Array))\n            s0 = [s0];\n        s0 = new _Compound(s0);\n    }\n\n    if (s1)\n        s0.insertRange(s1);\n\n    return s0;\n}\n\nfunction intersection(s0, s1) {\n    var r0 = s0.ranges();\n    var r1 = s1.ranges();\n    var l0 = r0.length, l1 = r1.length;\n    var i0 = 0, i1 = 0;\n    var or = [];\n\n    while (i0 < l0 && i1 < l1) {\n        var s0 = r0[i0], s1 = r1[i1];\n        var lapMin = Math.max(s0.min(), s1.min());\n        var lapMax = Math.min(s0.max(), s1.max());\n        if (lapMax >= lapMin) {\n            or.push(new Range(lapMin, lapMax));\n        }\n        if (s0.max() > s1.max()) {\n            ++i1;\n        } else {\n            ++i0;\n        }\n    }\n\n    if (or.length == 0) {\n        return null; // FIXME\n    } else if (or.length == 1) {\n        return or[0];\n    } else {\n        return new _Compound(or);\n    }\n}\n\nfunction coverage(s) {\n    var tot = 0;\n    var rl = s.ranges();\n    for (var ri = 0; ri < rl.length; ++ri) {\n        var r = rl[ri];\n        tot += (r.max() - r.min() + 1);\n    }\n    return tot;\n}\n\n\n\nfunction rangeOrder(a, b)\n{\n    if (a.min() < b.min()) {\n        return -1;\n    } else if (a.min() > b.min()) {\n        return 1;\n    } else if (a.max() < b.max()) {\n        return -1;\n    } else if (b.max() > a.max()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nfunction _rangeOrder(a, b)\n{\n    if (a._min < b._min) {\n        return -1;\n    } else if (a._min > b._min) {\n        return 1;\n    } else if (a._max < b._max) {\n        return -1;\n    } else if (b._max > a._max) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nreturn {\n        Range: Range,\n        union: union,\n        intersection: intersection,\n        coverage: coverage,\n        rangeOver: rangeOrder,\n        _rangeOrder: _rangeOrder\n};\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./galaxy/scripts/libs/bbi/spans.js\n// module id = 41\n// module chunks = 0 1 2 3","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n//\n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\ndefine([],function() {\n\nvar MAX_WBITS=15; // 32K LZ77 window\nvar DEF_WBITS=MAX_WBITS;\nvar MAX_MEM_LEVEL=9;\nvar MANY=1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT=0x20;\n\nvar Z_NO_FLUSH=0;\nvar Z_PARTIAL_FLUSH=1;\nvar Z_SYNC_FLUSH=2;\nvar Z_FULL_FLUSH=3;\nvar Z_FINISH=4;\n\nvar Z_DEFLATED=8;\n\nvar Z_OK=0;\nvar Z_STREAM_END=1;\nvar Z_NEED_DICT=2;\nvar Z_ERRNO=-1;\nvar Z_STREAM_ERROR=-2;\nvar Z_DATA_ERROR=-3;\nvar Z_MEM_ERROR=-4;\nvar Z_BUF_ERROR=-5;\nvar Z_VERSION_ERROR=-6;\n\nvar METHOD=0;   // waiting for method byte\nvar FLAG=1;     // waiting for flag byte\nvar DICT4=2;    // four dictionary check bytes to go\nvar DICT3=3;    // three dictionary check bytes to go\nvar DICT2=4;    // two dictionary check bytes to go\nvar DICT1=5;    // one dictionary check byte to go\nvar DICT0=6;    // waiting for inflateSetDictionary\nvar BLOCKS=7;   // decompressing blocks\nvar CHECK4=8;   // four check bytes to go\nvar CHECK3=9;   // three check bytes to go\nvar CHECK2=10;  // two check bytes to go\nvar CHECK1=11;  // one check byte to go\nvar DONE=12;    // finished check, done\nvar BAD=13;     // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE=0;  // get type bits (3, including end bit)\nvar IB_LENS=1;  // get lengths for stored\nvar IB_STORED=2;// processing stored block\nvar IB_TABLE=3; // get table lengths\nvar IB_BTREE=4; // get bit lengths tree for a dynamic block\nvar IB_DTREE=5; // get length, distance trees for a dynamic block\nvar IB_CODES=6; // processing fixed or dynamic block\nvar IB_DRY=7;   // output remaining window bytes\nvar IB_DONE=8;  // finished last block, done\nvar IB_BAD=9;   // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,192,\n    80,7,10, 0,8,96, 0,8,32, 0,9,160,\n    0,8,0, 0,8,128, 0,8,64, 0,9,224,\n    80,7,6, 0,8,88, 0,8,24, 0,9,144,\n    83,7,59, 0,8,120, 0,8,56, 0,9,208,\n    81,7,17, 0,8,104, 0,8,40, 0,9,176,\n    0,8,8, 0,8,136, 0,8,72, 0,9,240,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,200,\n    81,7,13, 0,8,100, 0,8,36, 0,9,168,\n    0,8,4, 0,8,132, 0,8,68, 0,9,232,\n    80,7,8, 0,8,92, 0,8,28, 0,9,152,\n    84,7,83, 0,8,124, 0,8,60, 0,9,216,\n    82,7,23, 0,8,108, 0,8,44, 0,9,184,\n    0,8,12, 0,8,140, 0,8,76, 0,9,248,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,196,\n    81,7,11, 0,8,98, 0,8,34, 0,9,164,\n    0,8,2, 0,8,130, 0,8,66, 0,9,228,\n    80,7,7, 0,8,90, 0,8,26, 0,9,148,\n    84,7,67, 0,8,122, 0,8,58, 0,9,212,\n    82,7,19, 0,8,106, 0,8,42, 0,9,180,\n    0,8,10, 0,8,138, 0,8,74, 0,9,244,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,204,\n    81,7,15, 0,8,102, 0,8,38, 0,9,172,\n    0,8,6, 0,8,134, 0,8,70, 0,9,236,\n    80,7,9, 0,8,94, 0,8,30, 0,9,156,\n    84,7,99, 0,8,126, 0,8,62, 0,9,220,\n    82,7,27, 0,8,110, 0,8,46, 0,9,188,\n    0,8,14, 0,8,142, 0,8,78, 0,9,252,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,194,\n    80,7,10, 0,8,97, 0,8,33, 0,9,162,\n    0,8,1, 0,8,129, 0,8,65, 0,9,226,\n    80,7,6, 0,8,89, 0,8,25, 0,9,146,\n    83,7,59, 0,8,121, 0,8,57, 0,9,210,\n    81,7,17, 0,8,105, 0,8,41, 0,9,178,\n    0,8,9, 0,8,137, 0,8,73, 0,9,242,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,202,\n    81,7,13, 0,8,101, 0,8,37, 0,9,170,\n    0,8,5, 0,8,133, 0,8,69, 0,9,234,\n    80,7,8, 0,8,93, 0,8,29, 0,9,154,\n    84,7,83, 0,8,125, 0,8,61, 0,9,218,\n    82,7,23, 0,8,109, 0,8,45, 0,9,186,\n    0,8,13, 0,8,141, 0,8,77, 0,9,250,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,198,\n    81,7,11, 0,8,99, 0,8,35, 0,9,166,\n    0,8,3, 0,8,131, 0,8,67, 0,9,230,\n    80,7,7, 0,8,91, 0,8,27, 0,9,150,\n    84,7,67, 0,8,123, 0,8,59, 0,9,214,\n    82,7,19, 0,8,107, 0,8,43, 0,9,182,\n    0,8,11, 0,8,139, 0,8,75, 0,9,246,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,206,\n    81,7,15, 0,8,103, 0,8,39, 0,9,174,\n    0,8,7, 0,8,135, 0,8,71, 0,9,238,\n    80,7,9, 0,8,95, 0,8,31, 0,9,158,\n    84,7,99, 0,8,127, 0,8,63, 0,9,222,\n    82,7,27, 0,8,111, 0,8,47, 0,9,190,\n    0,8,15, 0,8,143, 0,8,79, 0,9,254,\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,193,\n\n    80,7,10, 0,8,96, 0,8,32, 0,9,161,\n    0,8,0, 0,8,128, 0,8,64, 0,9,225,\n    80,7,6, 0,8,88, 0,8,24, 0,9,145,\n    83,7,59, 0,8,120, 0,8,56, 0,9,209,\n    81,7,17, 0,8,104, 0,8,40, 0,9,177,\n    0,8,8, 0,8,136, 0,8,72, 0,9,241,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,201,\n    81,7,13, 0,8,100, 0,8,36, 0,9,169,\n    0,8,4, 0,8,132, 0,8,68, 0,9,233,\n    80,7,8, 0,8,92, 0,8,28, 0,9,153,\n    84,7,83, 0,8,124, 0,8,60, 0,9,217,\n    82,7,23, 0,8,108, 0,8,44, 0,9,185,\n    0,8,12, 0,8,140, 0,8,76, 0,9,249,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,197,\n    81,7,11, 0,8,98, 0,8,34, 0,9,165,\n    0,8,2, 0,8,130, 0,8,66, 0,9,229,\n    80,7,7, 0,8,90, 0,8,26, 0,9,149,\n    84,7,67, 0,8,122, 0,8,58, 0,9,213,\n    82,7,19, 0,8,106, 0,8,42, 0,9,181,\n    0,8,10, 0,8,138, 0,8,74, 0,9,245,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,205,\n    81,7,15, 0,8,102, 0,8,38, 0,9,173,\n    0,8,6, 0,8,134, 0,8,70, 0,9,237,\n    80,7,9, 0,8,94, 0,8,30, 0,9,157,\n    84,7,99, 0,8,126, 0,8,62, 0,9,221,\n    82,7,27, 0,8,110, 0,8,46, 0,9,189,\n    0,8,14, 0,8,142, 0,8,78, 0,9,253,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,195,\n    80,7,10, 0,8,97, 0,8,33, 0,9,163,\n    0,8,1, 0,8,129, 0,8,65, 0,9,227,\n    80,7,6, 0,8,89, 0,8,25, 0,9,147,\n    83,7,59, 0,8,121, 0,8,57, 0,9,211,\n    81,7,17, 0,8,105, 0,8,41, 0,9,179,\n    0,8,9, 0,8,137, 0,8,73, 0,9,243,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,203,\n    81,7,13, 0,8,101, 0,8,37, 0,9,171,\n    0,8,5, 0,8,133, 0,8,69, 0,9,235,\n    80,7,8, 0,8,93, 0,8,29, 0,9,155,\n    84,7,83, 0,8,125, 0,8,61, 0,9,219,\n    82,7,23, 0,8,109, 0,8,45, 0,9,187,\n    0,8,13, 0,8,141, 0,8,77, 0,9,251,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,199,\n    81,7,11, 0,8,99, 0,8,35, 0,9,167,\n    0,8,3, 0,8,131, 0,8,67, 0,9,231,\n    80,7,7, 0,8,91, 0,8,27, 0,9,151,\n    84,7,67, 0,8,123, 0,8,59, 0,9,215,\n    82,7,19, 0,8,107, 0,8,43, 0,9,183,\n    0,8,11, 0,8,139, 0,8,75, 0,9,247,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,207,\n    81,7,15, 0,8,103, 0,8,39, 0,9,175,\n    0,8,7, 0,8,135, 0,8,71, 0,9,239,\n    80,7,9, 0,8,95, 0,8,31, 0,9,159,\n    84,7,99, 0,8,127, 0,8,63, 0,9,223,\n    82,7,27, 0,8,111, 0,8,47, 0,9,191,\n    0,8,15, 0,8,143, 0,8,79, 0,9,255\n];\nvar fixed_td = [\n    80,5,1, 87,5,257, 83,5,17, 91,5,4097,\n    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,\n    80,5,3, 88,5,513, 84,5,33, 92,5,8193,\n    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,\n    80,5,2, 87,5,385, 83,5,25, 91,5,6145,\n    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,\n    80,5,4, 88,5,769, 84,5,49, 92,5,12289,\n    82,5,13, 90,5,3073, 86,5,193, 192,5,24577\n];\n\n  // Tables for deflate from PKZIP's appnote.txt.\n  var cplens = [ // Copy lengths for literal codes 257..285\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n  ];\n\n  // see note #13 above about 258\n  var cplext = [ // Extra bits for literal codes 257..285\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid\n  ];\n\n var cpdist = [ // Copy offsets for distance codes 0..29\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n        8193, 12289, 16385, 24577\n  ];\n\n  var cpdext = [ // Extra bits for distance codes\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n        12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {\n}\n\n\nZStream.prototype.inflateInit = function(w, nowrap) {\n    if (!w) {\n\tw = DEF_WBITS;\n    }\n    if (nowrap) {\n\tnowrap = false;\n    }\n    this.istate = new Inflate();\n    return this.istate.inflateInit(this, nowrap?-w:w);\n}\n\nZStream.prototype.inflate = function(f) {\n    if(this.istate==null) return Z_STREAM_ERROR;\n    return this.istate.inflate(this, f);\n}\n\nZStream.prototype.inflateEnd = function(){\n    if(this.istate==null) return Z_STREAM_ERROR;\n    var ret=istate.inflateEnd(this);\n    this.istate = null;\n    return ret;\n}\nZStream.prototype.inflateSync = function(){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n}\nZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n}\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n    this.was = [0];\n}\n\nInflate.prototype.inflateReset = function(z) {\n    if(z == null || z.istate == null) return Z_STREAM_ERROR;\n\n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n}\n\nInflate.prototype.inflateEnd = function(z){\n    if(this.blocks != null)\n      this.blocks.free(z);\n    this.blocks=null;\n    return Z_OK;\n}\n\nInflate.prototype.inflateInit = function(z, w){\n    z.msg = null;\n    this.blocks = null;\n\n    // handle undocumented nowrap option (no zlib header or check)\n    nowrap = 0;\n    if(w < 0){\n      w = - w;\n      nowrap = 1;\n    }\n\n    // set window size\n    if(w<8 ||w>15){\n      this.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    this.wbits=w;\n\n    z.istate.blocks=new InfBlocks(z,\n\t\t\t\t  z.istate.nowrap!=0 ? null : this,\n\t\t\t\t  1<<w);\n\n    // reset state\n    this.inflateReset(z);\n    return Z_OK;\n  }\n\nInflate.prototype.inflate = function(z, f){\n    var r, b;\n\n    if(z == null || z.istate == null || z.next_in == null)\n      return Z_STREAM_ERROR;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    while (true){\n      switch (z.istate.mode){\n      case METHOD:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){\n          z.istate.mode = BAD;\n          z.msg=\"unknown compression method\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        if((z.istate.method>>4)+8>z.istate.wbits){\n          z.istate.mode = BAD;\n          z.msg=\"invalid window size\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        z.istate.mode=FLAG;\n      case FLAG:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        b = (z.next_in[z.next_in_index++])&0xff;\n\n        if((((z.istate.method << 8)+b) % 31)!=0){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        if((b&PRESET_DICT)==0){\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=DICT3;\n      case DICT3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode=DICT2;\n      case DICT2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode=DICT1;\n      case DICT1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++]&0xff);\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0;       // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if(r == Z_DATA_ERROR){\n          z.istate.mode = BAD;\n          z.istate.marker = 0;     // can try inflateSync\n          break;\n        }\n        if(r == Z_OK){\n          r = f;\n        }\n        if(r != Z_STREAM_END){\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if(z.istate.nowrap!=0){\n          z.istate.mode=DONE;\n          break;\n        }\n        z.istate.mode=CHECK4;\n      case CHECK4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=CHECK3;\n      case CHECK3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);\n\n        if(((z.istate.was[0])) != ((z.istate.need))){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n      }\n    }\n  }\n\n\nInflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {\n    var index=0;\n    var length = dictLength;\n    if(z==null || z.istate == null|| z.istate.mode != DICT0)\n      return Z_STREAM_ERROR;\n\n    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){\n      return Z_DATA_ERROR;\n    }\n\n    z.adler = z._adler.adler32(0, null, 0, 0);\n\n    if(length >= (1<<z.istate.wbits)){\n      length = (1<<z.istate.wbits)-1;\n      index=dictLength - length;\n    }\n    z.istate.blocks.set_dictionary(dictionary, index, length);\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n  }\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255]\n\nInflate.prototype.inflateSync = function(z){\n    var n;       // number of bytes to look at\n    var p;       // pointer to bytes\n    var m;       // number of marker bytes found in a row\n    var r, w;   // temporaries to save total_in and total_out\n\n    // set up\n    if(z == null || z.istate == null)\n      return Z_STREAM_ERROR;\n    if(z.istate.mode != BAD){\n      z.istate.mode = BAD;\n      z.istate.marker = 0;\n    }\n    if((n=z.avail_in)==0)\n      return Z_BUF_ERROR;\n    p=z.next_in_index;\n    m=z.istate.marker;\n\n    // search\n    while (n!=0 && m < 4){\n      if(z.next_in[p] == mark[m]){\n        m++;\n      }\n      else if(z.next_in[p]!=0){\n        m = 0;\n      }\n      else{\n        m = 4 - m;\n      }\n      p++; n--;\n    }\n\n    // restore\n    z.total_in += p-z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    z.istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if(m != 4){\n      return Z_DATA_ERROR;\n    }\n    r=z.total_in;  w=z.total_out;\n    this.inflateReset(z);\n    z.total_in=r;  z.total_out = w;\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function(z){\n    if(z == null || z.istate == null || z.istate.blocks == null)\n      return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n}\n\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n    this.hufts=new Int32Array(MANY*3);\n    this.window=new Uint8Array(w);\n    this.end=w;\n    this.checkfn = checkfn;\n    this.mode = IB_TYPE;\n    this.reset(z, null);\n\n    this.left = 0;            // if STORED, bytes left to copy\n\n    this.table = 0;           // table lengths (14 bits)\n    this.index = 0;           // index into blens (or border)\n    this.blens = null;         // bit lengths of codes\n    this.bb=new Int32Array(1); // bit length tree depth\n    this.tb=new Int32Array(1); // bit length decoding tree\n\n    this.codes = new InfCodes();\n\n    this.last = 0;            // true if this block is the last block\n\n  // mode independent information\n    this.bitk = 0;            // bits in bit buffer\n    this.bitb = 0;            // bit buffer\n    this.read = 0;            // window read pointer\n    this.write = 0;           // window write pointer\n    this.check = 0;          // check on output\n\n    this.inftree=new InfTree();\n}\n\n\n\n\nInfBlocks.prototype.reset = function(z, c){\n    if(c) c[0]=this.check;\n    if(this.mode==IB_CODES){\n      this.codes.free(z);\n    }\n    this.mode=IB_TYPE;\n    this.bitk=0;\n    this.bitb=0;\n    this.read=this.write=0;\n\n    if(this.checkfn)\n      z.adler=this.check=z._adler.adler32(0, null, 0, 0);\n  }\n\n InfBlocks.prototype.proc = function(z, r){\n    var t;              // temporary storage\n    var b;              // bit buffer\n    var k;              // bits in bit buffer\n    var p;              // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n\n    // copy input/output information to locals (UPDATE macro restores)\n    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}\n    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}\n\n    // process input based on current state\n    while(true){\n      switch (this.mode){\n      case IB_TYPE:\n\n\twhile(k<(3)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\tt = (b & 7);\n\tthis.last = t & 1;\n\n\tswitch (t >>> 1){\n        case 0:                         // stored\n          {b>>>=(3);k-=(3);}\n          t = k & 7;                    // go to byte boundary\n\n          {b>>>=(t);k-=(t);}\n          this.mode = IB_LENS;                  // get length of stored block\n          break;\n        case 1:                         // fixed\n          {\n              var bl=new Int32Array(1);\n\t      var bd=new Int32Array(1);\n              var tl=[];\n\t      var td=[];\n\n\t      inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n          }\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_CODES;\n          break;\n        case 2:                         // dynamic\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_TABLE;\n          break;\n        case 3:                         // illegal\n\n          {b>>>=(3);k-=(3);}\n          this.mode = BAD;\n          z.msg = \"invalid block type\";\n          r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tbreak;\n      case IB_LENS:\n\twhile(k<(32)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){\n\t  this.mode = BAD;\n\t  z.msg = \"invalid stored block lengths\";\n\t  r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tthis.left = (b & 0xffff);\n\tb = k = 0;                       // dump bits\n\tthis.mode = this.left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_STORED:\n\tif (n == 0){\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tif(m==0){\n\t  if(q==end&&read!=0){\n\t    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);\n\t  }\n\t  if(m==0){\n\t    this.write=q;\n\t    r=this.inflate_flush(z,r);\n\t    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    if(q==this.end && this.read != 0){\n\t      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    }\n\t    if(m==0){\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\tt = this.left;\n\tif(t>n) t = n;\n\tif(t>m) t = m;\n\tarrayCopy(z.next_in, p, this.window, q, t);\n\tp += t;  n -= t;\n\tq += t;  m -= t;\n\tif ((this.left -= t) != 0)\n\t  break;\n\tthis.mode = (this.last != 0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_TABLE:\n\n\twhile(k<(14)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.table = t = (b & 0x3fff);\n\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)\n\t  {\n\t    this.mode = IB_BAD;\n\t    z.msg = \"too many length or distance symbols\";\n\t    r = Z_DATA_ERROR;\n\n\t    this.bitb=b; this.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  }\n\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\tif(this.blens==null || this.blens.length<t){\n\t    this.blens=new Int32Array(t);\n\t}\n\telse{\n\t  for(var i=0; i<t; i++){\n              this.blens[i]=0;\n          }\n\t}\n\n\t{b>>>=(14);k-=(14);}\n\n\tthis.index = 0;\n\tmode = IB_BTREE;\n      case IB_BTREE:\n\twhile (this.index < 4 + (this.table >>> 10)){\n\t  while(k<(3)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;\n\n\t  {b>>>=(3);k-=(3);}\n\t}\n\n\twhile(this.index < 19){\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n\t}\n\n\tthis.bb[0] = 7;\n\tt = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n\tif (t != Z_OK){\n\t  r = t;\n\t  if (r == Z_DATA_ERROR){\n\t    this.blens=null;\n\t    this.mode = IB_BAD;\n\t  }\n\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tthis.index = 0;\n\tthis.mode = IB_DTREE;\n      case IB_DTREE:\n\twhile (true){\n\t  t = this.table;\n\t  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){\n\t    break;\n\t  }\n\n\t  var h; //int[]\n\t  var i, j, c;\n\n\t  t = this.bb[0];\n\n\t  while(k<(t)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n//\t  if (this.tb[0]==-1){\n//            dlog(\"null...\");\n//\t  }\n\n\t  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];\n\t  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];\n\n\t  if (c < 16){\n\t    b>>>=(t);k-=(t);\n\t    this.blens[this.index++] = c;\n\t  }\n\t  else { // c == 16..18\n\t    i = c == 18 ? 7 : c - 14;\n\t    j = c == 18 ? 11 : 3;\n\n\t    while(k<(t+i)){\n\t      if(n!=0){\n\t\tr=Z_OK;\n\t      }\n\t      else{\n\t\tthis.bitb=b; this.bitk=k;\n\t\tz.avail_in=n;\n\t\tz.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\tthis.write=q;\n\t\treturn this.inflate_flush(z,r);\n\t      };\n\t      n--;\n\t      b|=(z.next_in[p++]&0xff)<<k;\n\t      k+=8;\n\t    }\n\n\t    b>>>=(t);k-=(t);\n\n\t    j += (b & inflate_mask[i]);\n\n\t    b>>>=(i);k-=(i);\n\n\t    i = this.index;\n\t    t = this.table;\n\t    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||\n\t\t(c == 16 && i < 1)){\n\t      this.blens=null;\n\t      this.mode = IB_BAD;\n\t      z.msg = \"invalid bit length repeat\";\n\t      r = Z_DATA_ERROR;\n\n\t      this.bitb=b; this.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\n\t    c = c == 16 ? this.blens[i-1] : 0;\n\t    do{\n\t      this.blens[i++] = c;\n\t    }\n\t    while (--j!=0);\n\t    this.index = i;\n\t  }\n\t}\n\n\tthis.tb[0]=-1;\n\t{\n\t    var bl=new Int32Array(1);\n\t    var bd=new Int32Array(1);\n\t    var tl=new Int32Array(1);\n\t    var td=new Int32Array(1);\n\t    bl[0] = 9;         // must be <= 9 for lookahead assumptions\n\t    bd[0] = 6;         // must be <= 9 for lookahead assumptions\n\n\t    t = this.table;\n\t    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f),\n\t\t\t\t\t      1 + ((t >> 5) & 0x1f),\n\t\t\t\t\t      this.blens, bl, bd, tl, td, this.hufts, z);\n\n\t    if (t != Z_OK){\n\t        if (t == Z_DATA_ERROR){\n\t            this.blens=null;\n\t            this.mode = BAD;\n\t        }\n\t        r = t;\n\n\t        this.bitb=b; this.bitk=k;\n\t        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t        this.write=q;\n\t        return this.inflate_flush(z,r);\n\t    }\n\t    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n\t}\n\tthis.mode = IB_CODES;\n      case IB_CODES:\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\n\tif ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){\n\t  return this.inflate_flush(z, r);\n\t}\n\tr = Z_OK;\n\tthis.codes.free(z);\n\n\tp=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;\n\tq=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);\n\n\tif (this.last==0){\n\t  this.mode = IB_TYPE;\n\t  break;\n\t}\n\tthis.mode = IB_DRY;\n      case IB_DRY:\n\tthis.write=q;\n\tr = this.inflate_flush(z, r);\n\tq=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\tif (this.read != this.write){\n\t  this.bitb=b; this.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z, r);\n\t}\n\tmode = DONE;\n      case IB_DONE:\n\tr = Z_STREAM_END;\n\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      case IB_BAD:\n\tr = Z_DATA_ERROR;\n\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      }\n    }\n  }\n\nInfBlocks.prototype.free = function(z){\n    this.reset(z, null);\n    this.window=null;\n    this.hufts=null;\n}\n\nInfBlocks.prototype.set_dictionary = function(d, start, n){\n    arrayCopy(d, start, window, 0, n);\n    this.read = this.write = n;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH.\nInfBlocks.prototype.sync_point = function(){\n    return this.mode == IB_LENS;\n}\n\n  // copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function(z, r){\n    var n;\n    var p;\n    var q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = this.read;\n\n    // compute number of bytes to copy as far as end of window\n    n = ((q <= this.write ? this.write : this.end) - q);\n    if (n > z.avail_out) n = z.avail_out;\n    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if(this.checkfn != null)\n      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n    // copy as far as end of window\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of window\n    if (q == this.end){\n      // wrap pointers\n      q = 0;\n      if (this.write == this.end)\n        this.write = 0;\n\n      // compute bytes to copy\n      n = this.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // update check information\n      if(this.checkfn != null)\n\tz.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n      // copy\n      arrayCopy(this.window, q, z.next_out, p, n);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    this.read = q;\n\n    // done\n    return r;\n  }\n\n//\n// InfCodes.java\n//\n\nvar IC_START=0;  // x: set up for LEN\nvar IC_LEN=1;    // i: get length/literal/eob next\nvar IC_LENEXT=2; // i: getting length extra (have base)\nvar IC_DIST=3;   // i: get distance next\nvar IC_DISTEXT=4;// i: getting distance extra\nvar IC_COPY=5;   // o: copying bytes in window, waiting for space\nvar IC_LIT=6;    // o: got literal, waiting for output space\nvar IC_WASH=7;   // o: got eob, possibly still output waiting\nvar IC_END=8;    // x: got eob and all data flushed\nvar IC_BADCODE=9;// x: got error\n\nfunction InfCodes() {\n}\n\nInfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {\n    this.mode=IC_START;\n    this.lbits=bl;\n    this.dbits=bd;\n    this.ltree=tl;\n    this.ltree_index=tl_index;\n    this.dtree = td;\n    this.dtree_index=td_index;\n    this.tree=null;\n}\n\nInfCodes.prototype.proc = function(s, z, r){\n    var j;              // temporary storage\n    var t;              // temporary pointer (int[])\n    var tindex;         // temporary pointer\n    var e;              // extra bits or operation\n    var b=0;            // bit buffer\n    var k=0;            // bits in bit buffer\n    var p=0;            // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n    var f;              // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // process input and output based on current state\n    while (true){\n      switch (this.mode){\n\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:         // x: set up for LEN\n\tif (m >= 258 && n >= 10){\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  r = this.inflate_fast(this.lbits, this.dbits,\n\t\t\t   this.ltree, this.ltree_index,\n\t\t\t   this.dtree, this.dtree_index,\n\t\t\t   s, z);\n\n\t  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n\t  q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t  if (r != Z_OK){\n\t    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n\t    break;\n\t  }\n\t}\n\tthis.need = this.lbits;\n\tthis.tree = this.ltree;\n\tthis.tree_index=this.ltree_index;\n\n\tthis.mode = IC_LEN;\n      case IC_LEN:           // i: get length/literal/eob next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b&inflate_mask[j]))*3;\n\n\tb>>>=(this.tree[tindex+1]);\n\tk-=(this.tree[tindex+1]);\n\n\te=this.tree[tindex];\n\n\tif(e == 0){               // literal\n\t  this.lit = this.tree[tindex+2];\n\t  this.mode = IC_LIT;\n\t  break;\n\t}\n\tif((e & 16)!=0 ){          // length\n\t  this.get = e & 15;\n\t  this.len = this.tree[tindex+2];\n\t  this.mode = IC_LENEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tif ((e & 32)!=0){               // end of block\n\t  this.mode = IC_WASH;\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid literal/length code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_LENEXT:        // i: getting length extra (have base)\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.len += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.need = this.dbits;\n\tthis.tree = this.dtree;\n\tthis.tree_index = this.dtree_index;\n\tthis.mode = IC_DIST;\n      case IC_DIST:          // i: get distance next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b & inflate_mask[j]))*3;\n\n\tb>>=this.tree[tindex+1];\n\tk-=this.tree[tindex+1];\n\n\te = (this.tree[tindex]);\n\tif((e & 16)!=0){               // distance\n\t  this.get = e & 15;\n\t  this.dist = this.tree[tindex+2];\n\t  this.mode = IC_DISTEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid distance code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_DISTEXT:       // i: getting distance extra\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.dist += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.mode = IC_COPY;\n      case IC_COPY:          // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while(f < 0){     // modulo window size-\"while\" instead\n          f += s.end;     // of \"if\" handles invalid distances\n\t}\n\twhile (this.len!=0){\n\n\t  if(m==0){\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.write=q; r=s.inflate_flush(z,r);\n\t      q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\n\t      if(m==0){\n\t\ts.bitb=b;s.bitk=k;\n\t\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\ts.write=q;\n\t\treturn s.inflate_flush(z,r);\n\t      }\n\t    }\n\t  }\n\n\t  s.window[q++]=s.window[f++]; m--;\n\n\t  if (f == s.end)\n            f = 0;\n\t  this.len--;\n\t}\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_LIT:           // o: got literal, waiting for output space\n\tif(m==0){\n\t  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t  if(m==0){\n\t    s.write=q; r=s.inflate_flush(z,r);\n\t    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\t      return s.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\ts.window[q++]=this.lit; m--;\n\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_WASH:           // o: got eob, possibly more output\n\tif (k > 7){        // return unused byte, if any\n\t  k -= 8;\n\t  n++;\n\t  p--;             // can always return one\n\t}\n\n\ts.write=q; r=s.inflate_flush(z,r);\n\tq=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\tif (s.read != s.write){\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  return s.inflate_flush(z,r);\n\t}\n\tthis.mode = IC_END;\n      case IC_END:\n\tr = Z_STREAM_END;\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_BADCODE:       // x: got error\n\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n      }\n    }\n  }\n\nInfCodes.prototype.free = function(z){\n    //  ZFREE(z, c);\n}\n\n  // Called with number of bytes left to write in window at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten.  The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\nInfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {\n    var t;                // temporary pointer\n    var   tp;             // temporary pointer (int[])\n    var tp_index;         // temporary pointer\n    var e;                // extra bits or operation\n    var b;                // bit buffer\n    var k;                // bits in bit buffer\n    var p;                // input data pointer\n    var n;                // bytes available there\n    var q;                // output window write pointer\n    var m;                // bytes to end of window or read pointer\n    var ml;               // mask for literal/length tree\n    var md;               // mask for distance tree\n    var c;                // bytes to copy\n    var d;                // distance back to copy from\n    var r;                // copy source pointer\n\n    var tp_index_t_3;     // (tp_index+t)*3\n\n    // load input, output, bit values\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {                          // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while(k<(20)){              // max bits for literal/length code\n\tn--;\n\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n      }\n\n      t= b&ml;\n      tp=tl;\n      tp_index=tl_index;\n      tp_index_t_3=(tp_index+t)*3;\n      if ((e = tp[tp_index_t_3]) == 0){\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\ts.window[q++] = tp[tp_index_t_3+2];\n\tm--;\n\tcontinue;\n      }\n      do {\n\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\tif((e&16)!=0){\n\t  e &= 15;\n\t  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);\n\n\t  b>>=e; k-=e;\n\n\t  // decode distance base of block to copy\n\t  while(k<(15)){           // max bits for distance code\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t  }\n\n\t  t= b&md;\n\t  tp=td;\n\t  tp_index=td_index;\n          tp_index_t_3=(tp_index+t)*3;\n\t  e = tp[tp_index_t_3];\n\n\t  do {\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    if((e&16)!=0){\n\t      // get extra bits to add to distance base\n\t      e &= 15;\n\t      while(k<(e)){         // get extra bits (up to 13)\n\t\tn--;\n\t\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t      }\n\n\t      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);\n\n\t      b>>=(e); k-=(e);\n\n\t      // do the copy\n\t      m -= c;\n\t      if (q >= d){                // offset before dest\n\t\t//  just copy\n\t\tr=q-d;\n\t\tif(q-r>0 && 2>(q-r)){\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t\telse{\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t      }\n\t      else{                  // else offset after destination\n                r=q-d;\n                do{\n                  r+=s.end;          // force pointer in window\n                }while(r<0);         // covers invalid distances\n\t\te=s.end-r;\n\t\tif(c>e){             // if source crosses,\n\t\t  c-=e;              // wrapped copy\n\t\t  if(q-r>0 && e>(q-r)){\n\t\t    do{s.window[q++] = s.window[r++];}\n\t\t    while(--e!=0);\n\t\t  }\n\t\t  else{\n\t\t    arrayCopy(s.window, r, s.window, q, e);\n\t\t    q+=e; r+=e; e=0;\n\t\t  }\n\t\t  r = 0;                  // copy rest from start of window\n\t\t}\n\n\t      }\n\n\t      // copy all or what's left\n              do{s.window[q++] = s.window[r++];}\n\t\twhile(--c!=0);\n\t      break;\n\t    }\n\t    else if((e&64)==0){\n\t      t+=tp[tp_index_t_3+2];\n\t      t+=(b&inflate_mask[e]);\n\t      tp_index_t_3=(tp_index+t)*3;\n\t      e=tp[tp_index_t_3];\n\t    }\n\t    else{\n\t      z.msg = \"invalid distance code\";\n\n\t      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  while(true);\n\t  break;\n\t}\n\n\tif((e&64)==0){\n\t  t+=tp[tp_index_t_3+2];\n\t  t+=(b&inflate_mask[e]);\n\t  tp_index_t_3=(tp_index+t)*3;\n\t  if((e=tp[tp_index_t_3])==0){\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    s.window[q++]=tp[tp_index_t_3+2];\n\t    m--;\n\t    break;\n\t  }\n\t}\n\telse if((e&32)!=0){\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_STREAM_END;\n\t}\n\telse{\n\t  z.msg=\"invalid literal/length code\";\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_DATA_ERROR;\n\t}\n      }\n      while(true);\n    }\n    while(m>=258 && n>= 10);\n\n    // not enough input or output--restore pointers and return\n    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n    s.bitb=b;s.bitk=k;\n    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n    s.write=q;\n\n    return Z_OK;\n}\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {\n}\n\nInfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    var a;                       // counter for codes of length k\n    var f;                       // i repeats in table every f entries\n    var g;                       // maximum code length\n    var h;                       // table level\n    var i;                       // counter, current code\n    var j;                       // counter\n    var k;                       // number of bits in current code\n    var l;                       // bits per table (returned in m)\n    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP\n    var p;                       // pointer into c[], b[], or v[]\n    var q;                       // points to current table\n    var w;                       // bits before this table == (l * h)\n    var xp;                      // pointer into x\n    var y;                       // number of dummy codes added\n    var z;                       // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0; i = n;\n    do {\n      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX\n    }while(i!=0);\n\n    if(this.c[0] == n){                // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++)\n      if(this.c[j]!=0) break;\n    k = j;                        // minimum code length\n    if(l < j){\n      l = j;\n    }\n    for (i = BMAX; i!=0; i--){\n      if(this.c[i]!=0) break;\n    }\n    g = i;                        // maximum code length\n    if(l > i){\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1){\n      if ((y -= this.c[j]) < 0){\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= this.c[i]) < 0){\n      return Z_DATA_ERROR;\n    }\n    this.c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    this.x[1] = j = 0;\n    p = 1;  xp = 2;\n    while (--i!=0) {                 // note that i == g from above\n      this.x[xp] = (j += this.c[p]);\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0; p = 0;\n    do {\n      if ((j = b[bindex+p]) != 0){\n        this.v[this.x[j]++] = i;\n      }\n      p++;\n    }\n    while (++i < n);\n    n = this.x[g];                     // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    this.x[0] = i = 0;                 // first Huffman code is zero\n    p = 0;                        // grab values in bit order\n    h = -1;                       // no tables yet--level -1\n    w = -l;                       // bits decoded == (l * h)\n    this.u[0] = 0;                     // just to keep compilers happy\n    q = 0;                        // ditto\n    z = 0;                        // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++){\n      a = this.c[k];\n      while (a--!=0){\n\t// here i is the Huffman code of length k bits for value *p\n\t// make tables up to required level\n        while (k > w + l){\n          h++;\n          w += l;                 // previous table always l bits\n\t  // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = (z > l) ? l : z;        // table size upper limit\n          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table\n                                      // too few codes for k-w bit table\n            f -= a + 1;               // deduct codes from patterns left\n            xp = k;\n            if(j < z){\n              while (++j < z){        // try smaller tables up to z bits\n                if((f <<= 1) <= this.c[++xp])\n                  break;              // enough codes to use up j bits\n                f -= this.c[xp];           // else deduct codes from patterns\n              }\n\t    }\n          }\n          z = 1 << j;                 // table entries for j-bit table\n\n\t  // allocate new table\n          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR;       // overflow of MANY\n          }\n          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG\n          this.hn[0] += z;\n\n\t  // connect to last table, if there is one\n\t  if(h!=0){\n            this.x[h]=i;           // save pattern for backing up\n            this.r[0]=j;     // bits in this table\n            this.r[1]=l;     // bits to dump before this table\n            j=i>>>(w - l);\n            this.r[2] = (q - this.u[h-1] - j);               // offset to this table\n            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table\n          }\n          else{\n            t[0] = q;               // first table is returned result\n\t  }\n        }\n\n\t// set up table entry in r\n        this.r[1] = (k - w);\n        if (p >= n){\n          this.r[0] = 128 + 64;      // out of values--invalid code\n\t}\n        else if (v[p] < s){\n          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block\n          this.r[2] = this.v[p++];          // simple code is just the value\n        }\n        else{\n          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists\n          this.r[2]=d[this.v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f=1<<(k-w);\n        for (j=i>>>w;j<z;j+=f){\n          arrayCopy(this.r, 0, hp, (q+j)*3, 3);\n\t}\n\n\t// backwards increment the k-bit code i\n        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){\n          i ^= j;\n\t}\n        i ^= j;\n\n\t// backup over finished tables\n        mask = (1 << w) - 1;      // needed on HP, cc -O bug\n        while ((i & mask) != this.x[h]){\n          h--;                    // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n}\n\nInfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {\n    var result;\n    this.initWorkArea(19);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n    if(result == Z_DATA_ERROR){\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    }\n    else if(result == Z_BUF_ERROR || bb[0] == 0){\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n}\n\nInfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {\n    var result;\n\n    // build literal/length tree\n    this.initWorkArea(288);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n    if (result != Z_OK || bl[0] == 0){\n      if(result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed literal/length tree\";\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    this.initWorkArea(288);\n    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n    if (result != Z_OK || (bd[0] == 0 && nl > 257)){\n      if (result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed distance tree\";\n      }\n      else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    return Z_OK;\n}\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result\n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n    bl[0]=fixed_bl;\n    bd[0]=fixed_bd;\n    tl[0]=fixed_tl;\n    td[0]=fixed_td;\n    return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function(vsize){\n    if(this.hn==null){\n        this.hn=new Int32Array(1);\n        this.v=new Int32Array(vsize);\n        this.c=new Int32Array(BMAX+1);\n        this.r=new Int32Array(3);\n        this.u=new Int32Array(BMAX);\n        this.x=new Int32Array(BMAX+1);\n    }\n    if(this.v.length<vsize){\n        this.v=new Int32Array(vsize);\n    }\n    for(var i=0; i<vsize; i++){this.v[i]=0;}\n    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}\n    for(var i=0; i<3; i++){this.r[i]=0;}\n//  for(int i=0; i<BMAX; i++){u[i]=0;}\n    arrayCopy(this.c, 0, this.u, 0, BMAX);\n//  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    arrayCopy(this.c, 0, this.x, 0, BMAX+1);\n}\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = (typeof testArray.subarray === 'function');\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n    if (count == 0) {\n        return;\n    }\n    if (!src) {\n        throw \"Undef src\";\n    } else if (!dest) {\n        throw \"Undef dest\";\n    }\n\n    if (srcOffset == 0 && count == src.length) {\n        arrayCopy_fast(src, dest, destOffset);\n    } else if (hasSubarray) {\n        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset);\n    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n    } else {\n        arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n    }\n\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n     for (var i = 0; i < count; ++i) {\n        dest[destOffset + i] = src[srcOffset + i];\n    }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n    dest.set(src, destOffset);\n}\n\n\n  // largest prime smaller than 65536\nvar ADLER_BASE=65521;\n  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX=5552;\n\nfunction adler32(adler, /* byte[] */ buf,  index, len){\n    if(buf == null){ return 1; }\n\n    var s1=adler&0xffff;\n    var s2=(adler>>16)&0xffff;\n    var k;\n\n    while(len > 0) {\n      k=len<ADLER_NMAX?len:ADLER_NMAX;\n      len-=k;\n      while(k>=16){\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        k-=16;\n      }\n      if(k!=0){\n        do{\n          s1+=buf[index++]&0xff; s2+=s1;\n        }\n        while(--k!=0);\n      }\n      s1%=ADLER_BASE;\n      s2%=ADLER_BASE;\n    }\n    return (s2<<16)|s1;\n}\n\n\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n    if (!start) {\n        buffer = new Uint8Array(buffer);\n    } else if (!length) {\n        buffer = new Uint8Array(buffer, start, buffer.byteLength - start);\n    } else {\n        buffer = new Uint8Array(buffer, start, length);\n    }\n\n    var z = new ZStream();\n    z.inflateInit(DEF_WBITS, true);\n    z.next_in = buffer;\n    z.next_in_index = 0;\n    z.avail_in = buffer.length;\n\n    var oBlockList = [];\n    var totalSize = 0;\n    while (true) {\n        var obuf = new Uint8Array(32000);\n        z.next_out = obuf;\n        z.next_out_index = 0;\n        z.avail_out = obuf.length;\n        var status = z.inflate(Z_NO_FLUSH);\n        if (status != Z_OK && status != Z_STREAM_END && status != Z_BUF_ERROR) {\n            throw z.msg;\n        }\n        if (z.avail_out != 0) {\n            var newob = new Uint8Array(obuf.length - z.avail_out);\n            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));\n            obuf = newob;\n        }\n        oBlockList.push(obuf);\n        totalSize += obuf.length;\n        if (status == Z_STREAM_END || status == Z_BUF_ERROR) {\n            break;\n        }\n    }\n\n    if (afterUncOffset) {\n        afterUncOffset[0] = (start || 0) + z.next_in_index;\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0].buffer;\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = oBlockList[i];\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nreturn {\n    inflateBuffer: jszlib_inflate_buffer,\n    arrayCopy: arrayCopy\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./galaxy/scripts/libs/bbi/jszlib.js\n// module id = 42\n// module chunks = 0 1 2 3","//     jQuery Ajax Native Plugin\n\n//     (c) 2015 Tarik Zakaria Benmerar, Acigna Inc.\n//      jQuery Ajax Native Plugin may be freely distributed under the MIT license.\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals (root is window)\n        factory(root.jQuery);\n    }\n}(this, function ( $ ) {\n    var ajaxSettings = $.ajaxSettings;\n    ajaxSettings.responseFields.native = 'responseNative';\n    ajaxSettings.converters[ '* native' ] = true;\n    var support = {},\n        xhrId = 0,\n        xhrSuccessStatus = {\n            // file protocol always yields status code 0, assume 200\n            0: 200,\n            // Support: IE9\n            // #1450: sometimes IE returns 1223 when it should be 204\n            1223: 204\n        },\n        xhrCallbacks = {},\n        xhrSupported = jQuery.ajaxSettings.xhr();\n    // Support: IE9\n    // Open requests must be manually aborted on unload (#5280)\n    if ( window.ActiveXObject ) {\n        $( window ).on( \"unload\", function() {\n            for ( var key in xhrCallbacks ) {\n                xhrCallbacks[ key ]();\n            }\n        });\n    }\n    support.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\n    support.ajax = xhrSupported = !!xhrSupported;\n\n    //Native Data Type Ajax Transport\n    $.ajaxTransport('native', function ( options ) {\n        var callback;\n        // Cross domain only allowed if supported through XMLHttpRequest\n        if ( support.cors || xhrSupported && !options.crossDomain ) {\n            return {\n                send: function( headers, complete ) {\n                    var i,\n                        xhr = options.xhr(),\n                        id = ++xhrId,\n                        responses = {};\n\n                    xhr.open( options.type, options.url, options.async, options.username, options.password );\n\n                    // Apply custom fields if provided\n                    if ( options.xhrFields ) {\n                        for ( i in options.xhrFields ) {\n                            xhr[ i ] = options.xhrFields[ i ];\n                        }\n                    }\n\n                    // Override mime type if needed\n                    if ( options.mimeType && xhr.overrideMimeType ) {\n                        xhr.overrideMimeType( options.mimeType );\n                    }\n\n                    // X-Requested-With header\n                    // For cross-domain requests, seeing as conditions for a preflight are\n                    // akin to a jigsaw puzzle, we simply never set it to be sure.\n                    // (it can always be set on a per-request basis or even using ajaxSetup)\n                    // For same-domain requests, won't change header if already provided.\n                    if ( !options.crossDomain && !headers[\"X-Requested-With\"] ) {\n                        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    }\n\n                    // Set headers\n                    for ( i in headers ) {\n                        xhr.setRequestHeader( i, headers[ i ] );\n                    }\n\n                    // Callback\n                    callback = function( type ) {\n                        return function() {\n                            if ( callback ) {\n                                delete xhrCallbacks[ id ];\n                                callback = xhr.onload = xhr.onerror = null;\n\n                                if ( type === \"abort\" ) {\n                                    xhr.abort();\n                                } else if ( type === \"error\" ) {\n                                    complete(\n                                        // file: protocol always yields status 0; see #8605, #14207\n                                        xhr.status,\n                                        xhr.statusText\n                                    );\n                                } else {\n                                    // The native response associated with the responseType\n                                    // Stored in the xhr.response attribute (XHR2 Spec)\n                                    if ( xhr.response ) {\n                                        responses.native = xhr.response;\n                                    }\n\n                                    complete(\n                                        xhrSuccessStatus[ xhr.status ] || xhr.status,\n                                        xhr.statusText,\n                                        responses,\n                                        xhr.getAllResponseHeaders()\n                                    );\n                                }\n                            }\n                        };\n                    };\n\n                    // Listen to events\n                    xhr.onload = callback();\n                    xhr.onerror = callback(\"error\");\n\n                    // Create the abort callback\n                    callback = xhrCallbacks[ id ] = callback(\"abort\");\n\n                    try {\n                        // Do send the request (this may raise an exception)\n                        xhr.send( options.hasContent && options.data || null );\n                    } catch ( e ) {\n                        // #14683: Only rethrow if this hasn't been notified as an error yet\n                        if ( callback ) {\n                            throw e;\n                        }\n                    }\n                },\n\n                abort: function() {\n                    if ( callback ) {\n                        callback();\n                    }\n                }\n            };\n        }\n    });\n\n\n    //$.getNative wrapper\n    $.getNative = function ( url, callback ) {\n        return $.ajax({\n            dataType: 'native',\n            url: url,\n            xhrFields: {\n                responseType: 'arraybuffer'\n            },\n            success: callback\n        });\n    }\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./galaxy/scripts/libs/bbi/jquery-ajax-native.js\n// module id = 43\n// module chunks = 0 1 2 3","import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class View to display a user's disk/storage usage\n *      either as a progress bar representing the percentage of a quota used\n *      or a simple text element displaying the human readable size used.\n *  @name UserQuotaMeter\n *  @augments Backbone.View\n */\nvar UserQuotaMeter = Backbone.View.extend(baseMVC.LoggableMixin).extend(\n    /** @lends UserQuotaMeter.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** Defaults for optional settings passed to initialize */\n        options: {\n            warnAtPercent: 85,\n            errorAtPercent: 100\n        },\n\n        /** Set up, accept options, and bind events */\n        initialize: function(options) {\n            this.log(`${this}.initialize:`, options);\n            _.extend(this.options, options);\n\n            //this.bind( 'all', function( event, data ){ this.log( this + ' event:', event, data ); }, this );\n            this.listenTo(this.model, \"change:quota_percent change:total_disk_usage\", this.render);\n        },\n\n        /** Re-load user model data from the api */\n        update: function(options) {\n            this.log(`${this} updating user data...`, options);\n            this.model.loadFromApi(this.model.get(\"id\"), options);\n            return this;\n        },\n\n        /** Is the user over their quota (if there is one)?\n         * @returns {Boolean} true if over quota, false if no quota or under quota\n         */\n        isOverQuota: function() {\n            return (\n                this.model.get(\"quota_percent\") !== null &&\n                this.model.get(\"quota_percent\") >= this.options.errorAtPercent\n            );\n        },\n\n        /** Render the meter when they have an applicable quota. Will render as a progress bar\n         *      with their percentage of that quota in text over the bar.\n         *  @fires quota:over when user is over quota (>= this.errorAtPercent)\n         *  @fires quota:under when user is under quota\n         *  @fires quota:under:approaching when user is >= this.warnAtPercent of their quota\n         *  @fires quota:under:ok when user is below this.warnAtPercent\n         *  @returns {jQuery} the rendered meter\n         */\n        _render_quota: function() {\n            var modelJson = this.model.toJSON();\n\n            var //prevPercent = this.model.previous( 'quota_percent' ),\n            percent = modelJson.quota_percent;\n\n            var //meter = $( UserQuotaMeter.templates.quota( modelJson ) );\n            $meter = $(this._templateQuotaMeter(modelJson));\n\n            var $bar = $meter.find(\".progress-bar\");\n            //this.log( this + '.rendering quota, percent:', percent, 'meter:', meter );\n\n            // OVER QUOTA: color the quota bar and show the quota error message\n            if (this.isOverQuota()) {\n                //this.log( '\\t over quota' );\n                $bar.attr(\"class\", \"progress-bar progress-bar-danger\");\n                $meter.find(\".quota-meter-text\").css(\"color\", \"white\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:over\", modelJson);\n\n                // APPROACHING QUOTA: color the quota bar\n            } else if (percent >= this.options.warnAtPercent) {\n                //this.log( '\\t approaching quota' );\n                $bar.attr(\"class\", \"progress-bar progress-bar-warning\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:under quota:under:approaching\", modelJson);\n\n                // otherwise, hide/don't use the msg box\n            } else {\n                $bar.attr(\"class\", \"progress-bar progress-bar-success\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:under quota:under:ok\", modelJson);\n            }\n            return $meter;\n        },\n\n        /** Render the meter when the user has NO applicable quota. Will render as text\n         *      showing the human readable sum storage their data is using.\n         *  @returns {jQuery} the rendered text\n         */\n        _render_usage: function() {\n            //var usage = $( UserQuotaMeter.templates.usage( this.model.toJSON() ) );\n            var usage = $(this._templateUsage(this.model.toJSON()));\n            this.log(`${this}.rendering usage:`, usage);\n            return usage;\n        },\n\n        /** Render either the quota percentage meter or the human readable disk usage\n         *      depending on whether the user model has quota info (quota_percent === null -> no quota)\n         *  @returns {Object} this UserQuotaMeter\n         */\n        render: function() {\n            //this.log( this + '.rendering' );\n            var meterHtml = null;\n\n            // no quota on server ('quota_percent' === null (can be valid at 0)), show usage instead\n            this.log(`${this}.model.quota_percent:`, this.model.get(\"quota_percent\"));\n            if (this.model.get(\"quota_percent\") === null || this.model.get(\"quota_percent\") === undefined) {\n                meterHtml = this._render_usage();\n\n                // otherwise, render percent of quota (and warning, error)\n            } else {\n                meterHtml = this._render_quota();\n                //TODO: add the original text for unregistered quotas\n                //tooltip = \"Your disk quota is %s.  You can increase your quota by registering a Galaxy account.\"\n            }\n\n            this.$el.html(meterHtml);\n            this.$el.find(\".quota-meter-text\").tooltip();\n            return this;\n        },\n\n        _templateQuotaMeter: function(data) {\n            return [\n                '<div id=\"quota-meter\" class=\"quota-meter progress\">',\n                '<div class=\"progress-bar\" style=\"width: ',\n                data.quota_percent,\n                '%\"></div>',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" style=\"top: 6px\"',\n                data.nice_total_disk_usage\n                    ? ` title=\"Using ${data.nice_total_disk_usage}.  This value is recalculated when you log out.\">`\n                    : \">\",\n                _l(\"Using\"),\n                \" \",\n                data.quota_percent,\n                \"%\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        _templateUsage: function(data) {\n            return [\n                '<div id=\"quota-meter\" class=\"quota-meter\" style=\"background-color: transparent\">',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" data-original-title=\"This value is recalculated when you log out.\" style=\"top: 6px; color: white\">',\n                data.nice_total_disk_usage ? _l(\"Using \") + data.nice_total_disk_usage : \"\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        toString: function() {\n            return `UserQuotaMeter(${this.model})`;\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    UserQuotaMeter: UserQuotaMeter\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/user/user-quotameter.js","import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport addLogging from \"utils/add-logging\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\n/** @class Mixin to add logging capabilities to an object.\n *      Designed to allow switching an objects log output off/on at one central\n *      statement. Can be used with plain browser console (or something more\n *      complex like an AJAX logger).\n *  <br />NOTE: currently only uses the console.debug log function\n *  (as opposed to debug, error, warn, etc.)\n *  @name LoggableMixin\n *\n *  @example\n *  // Add to your models/views at the definition using chaining:\n *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n *\n *  // or - more explicitly AFTER the definition:\n *      var MyModel = Backbone.Model.extend({\n *          logger  : console\n *          // ...\n *          this.log( '$#%& it! - broken already...' );\n *      })\n *      _.extend( MyModel.prototype, LoggableMixin )\n *\n */\nvar LoggableMixin = /** @lends LoggableMixin# */ {\n    // replace null with console (if available) to see all logs for a particular view/model\n    /** The logging object whose log function will be used to output\n     *      messages. Null will supress all logging. Commonly set to console.\n     */\n    logger: null,\n    /** @type {String} a namespace for filtering/focusing log output */\n    _logNamespace: \".\"\n};\naddLogging(LoggableMixin);\n\n//==============================================================================\n/** Backbone model that syncs to the browser's sessionStorage API.\n *      This all largely happens behind the scenes and no special calls are required.\n */\nvar SessionStorageModel = Backbone.Model.extend({\n    initialize: function(initialAttrs) {\n        // check for sessionStorage and error if no id is provided\n        this._checkEnabledSessionStorage();\n        if (!initialAttrs.id) {\n            throw new Error(\"SessionStorageModel requires an id in the initial attributes\");\n        }\n        this.id = initialAttrs.id;\n\n        // load existing from storage (if any), clear any attrs set by bbone before init is called,\n        //  layer initial over existing and defaults, and save\n        var existing = !this.isNew() ? this._read(this) : {};\n        this.clear({ silent: true });\n        this.save(_.extend({}, this.defaults, existing, initialAttrs), {\n            silent: true\n        });\n\n        // save on any change to it immediately\n        this.on(\"change\", function() {\n            this.save();\n        });\n    },\n\n    _checkEnabledSessionStorage: function() {\n        try {\n            return window.sessionStorage.length >= 0;\n        } catch (err) {\n            alert(\"Please enable cookies in your browser for this Galaxy site\");\n            return false;\n        }\n    },\n\n    /** override of bbone sync to save to sessionStorage rather than REST\n     *      bbone options (success, errror, etc.) should still apply\n     */\n    sync: function(method, model, options) {\n        if (!options.silent) {\n            model.trigger(\"request\", model, {}, options);\n        }\n        var returned = {};\n        switch (method) {\n            case \"create\":\n                returned = this._create(model);\n                break;\n            case \"read\":\n                returned = this._read(model);\n                break;\n            case \"update\":\n                returned = this._update(model);\n                break;\n            case \"delete\":\n                returned = this._delete(model);\n                break;\n        }\n        if (returned !== undefined || returned !== null) {\n            if (options.success) {\n                options.success();\n            }\n        } else {\n            if (options.error) {\n                options.error();\n            }\n        }\n        return returned;\n    },\n\n    /** set storage to the stringified item */\n    _create: function(model) {\n        try {\n            var json = model.toJSON();\n            var set = sessionStorage.setItem(model.id, JSON.stringify(json));\n            return set === null ? set : json;\n            // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n            // http://stackoverflow.com/questions/14555347\n            // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n        } catch (err) {\n            if (!(err instanceof DOMException && navigator.userAgent.indexOf(\"Safari\") > -1)) {\n                throw err;\n            }\n        }\n        return null;\n    },\n\n    /** read and parse json from storage */\n    _read: function(model) {\n        return JSON.parse(sessionStorage.getItem(model.id));\n    },\n\n    /** set storage to the item (alias to create) */\n    _update: function(model) {\n        return model._create(model);\n    },\n\n    /** remove the item from storage */\n    _delete: function(model) {\n        return sessionStorage.removeItem(model.id);\n    },\n\n    /** T/F whether sessionStorage contains the model's id (data is present) */\n    isNew: function() {\n        return !sessionStorage.hasOwnProperty(this.id);\n    },\n\n    _log: function() {\n        return JSON.stringify(this.toJSON(), null, \"  \");\n    },\n    toString: function() {\n        return `SessionStorageModel(${this.id})`;\n    }\n});\n(() => {\n    SessionStorageModel.prototype = _.omit(SessionStorageModel.prototype, \"url\", \"urlRoot\");\n})();\n\n//==============================================================================\n/** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n *      (before the more local class overrides/hash).\n *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n *  @example:\n *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n *\n *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n */\nfunction mixin(mixinHash1, /* mixinHash2, etc: ... variadic */ propsHash) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var lastArg = args.pop();\n    args.unshift(lastArg);\n    return _.defaults.apply(_, args);\n}\n\n//==============================================================================\n/** A mixin for models that allow T/F/Matching to their attributes - useful when\n *      searching or filtering collections of models.\n * @example:\n *      see hda-model for searchAttribute and searchAliases definition examples.\n *      see history-contents.matches for how collections are filtered\n *      and see readonly-history-view.searchHdas for how user input is connected to the filtering\n */\nvar SearchableModelMixin = {\n    /** what attributes of an HDA will be used in a text search */\n    searchAttributes: [\n        // override\n    ],\n\n    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n    searchAliases: {\n        // override\n    },\n\n    /** search the attribute with key attrKey for the string searchFor; T/F if found */\n    searchAttribute: function(attrKey, searchFor) {\n        var attrVal = this.get(attrKey);\n        //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n        // bail if empty searchFor or unsearchable values\n        if (!searchFor || (attrVal === undefined || attrVal === null)) {\n            return false;\n        }\n        // pass to sep. fn for deep search of array attributes\n        if (_.isArray(attrVal)) {\n            return this._searchArrayAttribute(attrVal, searchFor);\n        }\n        return (\n            attrVal\n                .toString()\n                .toLowerCase()\n                .indexOf(searchFor.toLowerCase()) !== -1\n        );\n    },\n\n    /** deep(er) search for array attributes; T/F if found */\n    _searchArrayAttribute: function(array, searchFor) {\n        //this.debug( '_searchArrayAttribute', array, searchFor );\n        searchFor = searchFor.toLowerCase();\n        //precondition: searchFor has already been validated as non-empty string\n        //precondition: assumes only 1 level array\n        //TODO: could possibly break up searchFor more (CSV...)\n        return _.any(\n            array,\n            elem =>\n                elem\n                    .toString()\n                    .toLowerCase()\n                    .indexOf(searchFor.toLowerCase()) !== -1\n        );\n    },\n\n    /** search all searchAttributes for the string searchFor,\n     *      returning a list of keys of attributes that contain searchFor\n     */\n    search: function(searchFor) {\n        var model = this;\n        return _.filter(this.searchAttributes, key => model.searchAttribute(key, searchFor));\n    },\n\n    /** alias of search, but returns a boolean; accepts attribute specifiers where\n     *      the attributes searched can be narrowed to a single attribute using\n     *      the form: matches( 'genome_build=hg19' )\n     *      (the attribute keys allowed can also be aliases to the true attribute key;\n     *          see searchAliases above)\n     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n     *  @returns {Boolean} was term found in (any) attribute(s)\n     */\n    matches: function(term) {\n        var ATTR_SPECIFIER = \"=\";\n        var split = term.split(ATTR_SPECIFIER);\n        // attribute is specified - search only that\n        if (split.length >= 2) {\n            var attrKey = split[0];\n            attrKey = this.searchAliases[attrKey] || attrKey;\n            return this.searchAttribute(attrKey, split[1]);\n        }\n        // no attribute is specified - search all attributes in searchAttributes\n        return !!this.search(term).length;\n    },\n\n    /** an implicit AND search for all terms; IOW, a model must match all terms given\n     *      where terms is a whitespace separated value string.\n     *      e.g. given terms of: 'blah bler database=hg19'\n     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n     */\n    matchesAll: function(terms) {\n        var model = this;\n        // break the terms up by whitespace and filter out the empty strings\n        terms = terms.match(/(\".*\"|\\w*=\".*\"|\\S*)/g).filter(s => !!s);\n        return _.all(terms, term => {\n            term = term.replace(/\"/g, \"\");\n            return model.matches(term);\n        });\n    }\n};\n\n//==============================================================================\n/** A view that renders hidden and shows when some activator is clicked.\n *      options:\n *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n *          onShowFirstTime: fn called the first time the view is shown\n *          onshow: fn called every time the view is shown\n *          onhide: fn called every time the view is hidden\n *      events:\n *          hiddenUntilActivated:shown (the view is passed as an arg)\n *          hiddenUntilActivated:hidden (the view is passed as an arg)\n *      instance vars:\n *          view.hidden {boolean} is the view in the hidden state\n */\nvar HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */ {\n    //TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\n    /** call this in your initialize to set up the mixin\n     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n     *  @param {Object} hash with mixin options\n     */\n    hiddenUntilActivated: function($activator, options) {\n        // call this in your view's initialize fn\n        options = options || {};\n        //TODO: flesh out options - show them all here\n        this.HUAVOptions = {\n            $elementShown: this.$el,\n            showFn: jQuery.prototype.toggle,\n            showSpeed: \"fast\"\n        };\n        _.extend(this.HUAVOptions, options || {});\n        /** has this been shown already (and onshowFirstTime called)? */\n        this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is(\":visible\");\n        this.hidden = this.isHidden();\n\n        if ($activator) {\n            var mixin = this;\n            $activator.on(\"click\", ev => {\n                mixin.toggle(mixin.HUAVOptions.showSpeed);\n            });\n        }\n    },\n\n    //TODO:?? remove? use .hidden?\n    /** returns T/F if the view is hidden */\n    isHidden: function() {\n        return this.HUAVOptions.$elementShown.is(\":hidden\");\n    },\n\n    /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n    toggle: function() {\n        //TODO: more specific name - toggle is too general\n        // can be called manually as well with normal toggle arguments\n        //TODO: better as a callback (when the show/hide is actually done)\n        // show\n        if (this.hidden) {\n            // fire the optional fns on the first/each showing - good for render()\n            if (!this.HUAVOptions.hasBeenShown) {\n                if (_.isFunction(this.HUAVOptions.onshowFirstTime)) {\n                    this.HUAVOptions.hasBeenShown = true;\n                    this.HUAVOptions.onshowFirstTime.call(this);\n                }\n            }\n            if (_.isFunction(this.HUAVOptions.onshow)) {\n                this.HUAVOptions.onshow.call(this);\n                this.trigger(\"hiddenUntilActivated:shown\", this);\n            }\n            this.hidden = false;\n\n            // hide\n        } else {\n            if (_.isFunction(this.HUAVOptions.onhide)) {\n                this.HUAVOptions.onhide.call(this);\n                this.trigger(\"hiddenUntilActivated:hidden\", this);\n            }\n            this.hidden = true;\n        }\n        return this.HUAVOptions.showFn.apply(this.HUAVOptions.$elementShown, arguments);\n    }\n};\n\n//==============================================================================\n/** Mixin for views that can be dragged and dropped\n *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n *          handlers each time.\n *      dataTransfer data is set to the JSON string of the view's model.toJSON\n *      Override '$dragHandle' to define the draggable DOM sub-element.\n */\nvar DraggableViewMixin = {\n    /** set up instance vars to track whether this view is currently draggable */\n    initialize: function(attributes) {\n        /** is the body of this hda view expanded/not? */\n        this.draggable = attributes.draggable || false;\n    },\n\n    /** what part of the view's DOM triggers the dragging */\n    $dragHandle: function() {\n        //TODO: make abstract/general - move this to listItem\n        // override to the element you want to be your view's handle\n        return this.$(\".title-bar\");\n    },\n\n    /** toggle whether this view is draggable */\n    toggleDraggable: function() {\n        if (this.draggable) {\n            this.draggableOff();\n        } else {\n            this.draggableOn();\n        }\n    },\n\n    /** allow the view to be dragged, set up event handlers */\n    draggableOn: function() {\n        this.draggable = true;\n        this.dragStartHandler = _.bind(this._dragStartHandler, this);\n        this.dragEndHandler = _.bind(this._dragEndHandler, this);\n\n        var handle = this.$dragHandle()\n            .attr(\"draggable\", true)\n            .get(0);\n        handle.addEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.addEventListener(\"dragend\", this.dragEndHandler, false);\n    },\n\n    /** turn of view dragging and remove event listeners */\n    draggableOff: function() {\n        this.draggable = false;\n        var handle = this.$dragHandle()\n            .attr(\"draggable\", false)\n            .get(0);\n        handle.removeEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.removeEventListener(\"dragend\", this.dragEndHandler, false);\n    },\n\n    /** sets the dataTransfer data to the model's toJSON\n     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n     */\n    _dragStartHandler: function(event) {\n        event.dataTransfer.effectAllowed = \"move\";\n        //ASSUMES: this.model\n        //TODO: all except IE: should be 'application/json', IE: must be 'text'\n        event.dataTransfer.setData(\"text\", JSON.stringify(this.model.toJSON()));\n        this.trigger(\"draggable:dragstart\", event, this);\n        return false;\n    },\n\n    /** handle the dragend\n     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n     */\n    _dragEndHandler: function(event) {\n        this.trigger(\"draggable:dragend\", event, this);\n        return false;\n    }\n};\n\n//==============================================================================\n/** Mixin that allows a view to be selected (gen. from a list).\n *      Selection controls ($selector) may be hidden/shown/toggled.\n *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n *      Default rendering is a font-awesome checkbox.\n *      Default selector is '.selector' within the view's $el.\n *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n *          Both events are passed the view and the (jQuery) event.\n */\nvar SelectableViewMixin = {\n    /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n    initialize: function(attributes) {\n        /** is the view currently in selection mode? */\n        this.selectable = attributes.selectable || false;\n        /** is the view currently selected? */\n        this.selected = attributes.selected || false;\n    },\n\n    /** $el sub-element where the selector is rendered and what can be clicked to select. */\n    $selector: function() {\n        return this.$(\".selector\");\n    },\n\n    /** How the selector is rendered - defaults to font-awesome checkbox */\n    _renderSelected: function() {\n        // override\n        this.$selector()\n            .find(\"span\")\n            .toggleClass(\"fa-check-square-o\", this.selected)\n            .toggleClass(\"fa-square-o\", !this.selected);\n    },\n\n    /** Toggle whether the selector is shown */\n    toggleSelector: function() {\n        //TODO: use this.selectable\n        if (!this.$selector().is(\":visible\")) {\n            this.showSelector();\n        } else {\n            this.hideSelector();\n        }\n    },\n\n    /** Display the selector control.\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n     */\n    showSelector: function(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        // make sure selected state is represented properly\n        this.selectable = true;\n        this.trigger(\"selectable\", true, this);\n        this._renderSelected();\n        if (speed) {\n            this.$selector().show(speed);\n        } else {\n            this.$selector().show();\n        }\n    },\n\n    /** remove the selector control\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n     */\n    hideSelector: function(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        // reverse the process from showSelect\n        this.selectable = false;\n        this.trigger(\"selectable\", false, this);\n        if (speed) {\n            this.$selector().hide(speed);\n        } else {\n            this.$selector().hide();\n        }\n    },\n\n    /** Toggle whether the view is selected */\n    toggleSelect: function(event) {\n        if (this.selected) {\n            this.deselect(event);\n        } else {\n            this.select(event);\n        }\n    },\n\n    /** Select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    select: function(event) {\n        // switch icon, set selected, and trigger event\n        if (!this.selected) {\n            this.trigger(\"selected\", this, event);\n            this.selected = true;\n            this._renderSelected();\n        }\n        return false;\n    },\n\n    /** De-select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    deselect: function(event) {\n        // switch icon, set selected, and trigger event\n        if (this.selected) {\n            this.trigger(\"de-selected\", this, event);\n            this.selected = false;\n            this._renderSelected();\n        }\n        return false;\n    }\n};\n\n//==============================================================================\n/** Return an underscore template fn from an array of strings.\n *  @param {String[]} template      the template strings to compile into the underscore template fn\n *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n *  @returns {Function} the (wrapped) underscore template fn\n *      The function accepts:\n *\n *  The template strings can access:\n *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n *      _l: the localizer function\n *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n *      Because they're namespaced, undefined attributes will not throw an error.\n *\n *  @example:\n *      templateBler : BASE_MVC.wrapTemplate([\n *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n *          '</div>'\n *      ], 'mynamespace' )\n *\n *  Meant to be called in a View's definition in order to compile only once.\n *\n */\nfunction wrapTemplate(template, jsonNamespace) {\n    jsonNamespace = jsonNamespace || \"model\";\n    var templateFn = _.template(template.join(\"\"));\n    return (json, view) => {\n        var templateVars = { view: view || {}, _l: _l };\n        templateVars[jsonNamespace] = json || {};\n        return templateFn(templateVars);\n    };\n}\n\n//==============================================================================\n/** Return a comparator function for sorted Collections */\nfunction buildComparator(attribute_name, options) {\n    options = options || {};\n    var ascending = options.ascending ? 1 : -1;\n    return function __comparator(a, b) {\n        a = a.get(attribute_name);\n        b = b.get(attribute_name);\n        return (a < b ? -1 : a > b ? 1 : 0) * ascending;\n    };\n}\n\n//==============================================================================\nexport default {\n    LoggableMixin: LoggableMixin,\n    SessionStorageModel: SessionStorageModel,\n    mixin: mixin,\n    SearchableModelMixin: SearchableModelMixin,\n    HiddenUntilActivatedViewMixin: HiddenUntilActivatedViewMixin,\n    DraggableViewMixin: DraggableViewMixin,\n    SelectableViewMixin: SelectableViewMixin,\n    wrapTemplate: wrapTemplate,\n    buildComparator: buildComparator\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/base-mvc.js","import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport userModel from \"mvc/user/user-model\";\nimport metricsLogger from \"utils/metrics-logger\";\nimport addLogging from \"utils/add-logging\";\nimport localize from \"utils/localization\";\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp(options, bootstrapped) {\n    var self = this;\n    return self._init(options || {}, bootstrapped || {});\n}\n\n// add logging shortcuts for this object\naddLogging(GalaxyApp, \"GalaxyApp\");\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = \"galaxy:debug\";\n\nvar NAMESPACE_KEY = `${DEBUGGING_KEY}:namespaces`;\nvar FLATTEN_LOG_MESSAGES_KEY = `${DEBUGGING_KEY}:flatten`;\n\nvar localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n} catch (storageErr) {\n    console.log(localize(\"localStorage not available for debug flag retrieval\"));\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init(options, bootstrapped) {\n    var self = this;\n    _.extend(self, Backbone.Events);\n    if (localDebugging) {\n        self.logger = console;\n        console.debug(\"debugging galaxy:\", \"options:\", options, \"bootstrapped:\", bootstrapped);\n    }\n\n    self._processOptions(options);\n\n    // add root and url parameters\n    self.root = options.root || \"/\";\n    self.params = options.params || {};\n    self.session_csrf_token = options.session_csrf_token || null;\n\n    self._initConfig(options.config || {});\n    self._patchGalaxy(window.Galaxy);\n\n    self._initLogger(self.options.loggerOptions || {});\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug(\"GalaxyApp.options: \", self.options);\n    self.debug(\"GalaxyApp.config: \", self.config);\n    self.debug(\"GalaxyApp.logger: \", self.logger);\n\n    self._initLocale();\n    self.debug(\"GalaxyApp.localize: \", self.localize);\n\n    self.config = options.config || {};\n    self.debug(\"GalaxyApp.config: \", self.config);\n\n    self._initUser(options.user || {});\n    self.debug(\"GalaxyApp.user: \", self.user);\n\n    self._setUpListeners();\n    self.trigger(\"ready\", self);\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting: true,\n    /** root url of this app */\n    root: \"/\",\n    session_csrf_token: null\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions(options) {\n    var self = this;\n    var defaults = self.defaultOptions;\n\n    self.options = {};\n    for (var k in defaults) {\n        if (defaults.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : defaults[k];\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig(config) {\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if (self.options.patchExisting && patchWith) {\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for (var k in patchWith) {\n            if (patchWith.hasOwnProperty(k)) {\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[k] = patchWith[k];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if (self.config.debug) {\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel = loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage.getItem(NAMESPACE_KEY).split(\",\");\n        } catch (storageErr) {}\n        try {\n            loggerOptions.consoleFlattenMessages = localStorage.getItem(FLATTEN_LOG_MESSAGES_KEY) == \"true\";\n        } catch (storageErr) {}\n        console.log(loggerOptions.consoleFlattenMessages);\n    }\n\n    self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n    self.emit = {};\n    [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(i => {\n        self.emit[i] = function(data) {\n            self.logger.emit(i, arguments[0], Array.prototype.slice.call(arguments, 1));\n        };\n    });\n\n    if (self.config.debug) {\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        BASE_MVC.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale(options) {\n    var self = this;\n    self.debug(\"_initLocale:\", options);\n    self.localize = localize;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser(userJSON) {\n    var self = this;\n    self.debug(\"_initUser:\", userJSON);\n    self.user = new userModel.User(userJSON);\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $(document).bind(\"ajaxSend\", (ev, xhr, options) => {\n        var data = options.data;\n        try {\n            data = JSON.parse(data);\n        } catch (err) {}\n\n        self.lastAjax = {\n            url: location.href.slice(0, -1) + options.url,\n            data: data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging(setting) {\n    var self = this;\n    try {\n        if (setting === undefined) {\n            return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n        }\n        if (setting) {\n            localStorage.setItem(DEBUGGING_KEY, true);\n            return true;\n        }\n\n        localStorage.removeItem(DEBUGGING_KEY);\n        // also remove all namespaces\n        self.debuggingNamespaces(null);\n    } catch (storageErr) {\n        console.log(localize(\"localStorage not available for debug flag retrieval\"));\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(namespaces) {\n    var self = this;\n    try {\n        if (namespaces === undefined) {\n            var csv = localStorage.getItem(NAMESPACE_KEY);\n            return typeof csv === \"string\" ? csv.split(\",\") : [];\n        } else if (namespaces === null) {\n            localStorage.removeItem(NAMESPACE_KEY);\n        } else {\n            localStorage.setItem(NAMESPACE_KEY, namespaces);\n        }\n        var newSettings = self.debuggingNamespaces();\n        if (self.logger) {\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch (storageErr) {\n        console.log(localize(\"localStorage not available for debug namespace retrieval\"));\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString() {\n    var userEmail = this.user ? this.user.get(\"email\") || \"(anonymous)\" : \"uninitialized\";\n    return `GalaxyApp(${userEmail})`;\n};\n\n// ============================================================================\nexport default {\n    GalaxyApp: GalaxyApp\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/galaxy.js","/*global window, jQuery, console */\n/*=============================================================================\nTODO:\n    while anon: logs saved to 'logs-null' - this will never post\n        unless we manually do so at/after login\n        OR prepend when userId and localStorage has 'logs-null'\n    wire up _delayPost and test\n\n=============================================================================*/\n/** @class MetricsLogger\n *\n *  Object to cache, output, and post log/metric messages to the server.\n *  Meant to be attached to the Galaxy object.\n *\n *  Log from objects by either attaching logger directly:\n *      panel.logger.metric( 'user dataset deletion', panel.user.id, hda.toJSON() )\n *  or using the LoggableMixin or addLogging function:\n *      MyBackboneModel.extend( LoggableMixin ).extend({ ... })\n *      addLogging( MyBackboneModel, 'my-backbone-model' )\n *\n *  Log from templates by calling directly from Galaxy object:\n *      Galaxy.logger.metric( 'template loaded', { ownedByUser : true });\n *\n *  If you attempt to log an un-serializable object (circular reference, window, etc.),\n *  that entry will not be cached (or sent). If you set consoleLevel and consoleLogger\n *  appropriately, a warning will be shown when this happens:\n *      > panel.metric( 'something weird with window', { window : window })\n *      !'Metrics logger could not stringify logArguments: ...'\n */\nfunction MetricsLogger(options) {\n    options = options || {};\n    var self = this;\n\n    ///** get the current user's id from bootstrapped data or options */\n    self.userId = window.bootstrapped && window.bootstrapped.user ? window.bootstrapped.user.id : null;\n    self.userId = self.userId || options.userId || null;\n\n    /** the (optional) console to emit logs to */\n    self.consoleLogger = options.consoleLogger || null;\n\n    self._init(options);\n    return self;\n}\n\n//----------------------------------------------------------------------------- defaults and constants\n// see: python std lib, logging\nMetricsLogger.ALL = 0;\nMetricsLogger.LOG = 0;\nMetricsLogger.DEBUG = 10;\nMetricsLogger.INFO = 20;\nMetricsLogger.WARN = 30;\nMetricsLogger.ERROR = 40;\n// metrics levels here?\n//MetricsLogger.MinorEvent  = 45;\n//MetricsLogger.MajorEvent  = 50;\nMetricsLogger.METRIC = 50;\nMetricsLogger.NONE = 100;\n\n/** default options - override these through the constructor */\nMetricsLogger.defaultOptions = {\n    /** if an incoming message has a level >= this, it will be cached - can also be a string (e.g. 'debug') */\n    logLevel: MetricsLogger.NONE,\n    /** if an incoming message has a level >= this, it will be output to the console */\n    consoleLevel: MetricsLogger.NONE,\n    /** the default 'namespace' or label associated with an incoming message (if none is passed) */\n    defaultNamespace: \"Galaxy\",\n    /** the namespaces output to the console (all namespaces will be output if this is falsy)\n     *  note: applies only to the console (not the event/metrics log/cache)\n     */\n    consoleNamespaceWhitelist: null,\n    /** Force all messages into simple strings. */\n    consoleFlattenMessages: false,\n    /** the prefix attached to client-side logs to distinguish them in the metrics db */\n    clientPrefix: \"client.\",\n\n    /** the maximum number of messages the cache should hold; if exceeded older messages are removed first */\n    maxCacheSize: 3000,\n    /** the number of messages accumulate before posting to the server; should be <= maxCacheSize */\n    postSize: 1000,\n    /** T/F whether to add a timestamp to incoming cached messages */\n    addTime: true,\n    /** string to prefix to userid for cache web storage */\n    cacheKeyPrefix: \"logs-\",\n\n    /** the relative url to post messages to */\n    postUrl: \"/api/metrics\",\n    /** delay before trying post again after two failures */\n    delayPostInMs: 1000 * 60 * 10,\n\n    /** an (optional) function that should return an object; used to send additional data with the metrics */\n    getPingData: undefined,\n    /** an (optional) function that will handle the servers response after successfully posting messages */\n    onServerResponse: undefined\n};\n\n//----------------------------------------------------------------------------- set up\n/** initialize the logger with options, set up instance vars and cache, and add onpageunload to window */\nMetricsLogger.prototype._init = function _init(options) {\n    var self = this;\n    self.options = {};\n    for (var k in MetricsLogger.defaultOptions) {\n        if (MetricsLogger.defaultOptions.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : MetricsLogger.defaultOptions[k];\n        }\n    }\n    self.options.logLevel = self._parseLevel(self.options.logLevel);\n    self.options.consoleLevel = self._parseLevel(self.options.consoleLevel);\n    //self._emitToConsole( 'debug', 'MetricsLogger', 'MetricsLogger.options:', self.options );\n\n    /** is the logger currently sending? */\n    self._sending = false;\n    /** the setTimeout id if the logger POST has failed more than once */\n    self._waiting = null;\n    /** the current number of entries to send in a POST */\n    self._postSize = self.options.postSize;\n\n    self._initCache();\n\n    return self;\n};\n\n/** initialize the cache */\nMetricsLogger.prototype._initCache = function _initCache() {\n    try {\n        this.cache = new LoggingCache({\n            maxSize: this.options.maxCacheSize,\n            key: this.options.cacheKeyPrefix + this.userId\n        });\n    } catch (err) {\n        this._emitToConsole(\"warn\", \"MetricsLogger\", [\"Could not intitialize logging cache:\", err]);\n        this.options.logLevel = MetricsLogger.NONE;\n    }\n};\n\n/** return the numeric log level if level in 'none, debug, log, info, warn, error' */\nMetricsLogger.prototype._parseLevel = function _parseLevel(level) {\n    var type = typeof level;\n    if (type === \"number\") {\n        return level;\n    }\n    if (type === \"string\") {\n        var upper = level.toUpperCase();\n        if (MetricsLogger.hasOwnProperty(upper)) {\n            return MetricsLogger[upper];\n        }\n    }\n    throw new Error(`Unknown log level: ${level}`);\n};\n\n//----------------------------------------------------------------------------- main entry point\n/** record a log/message's arguments to the cache and/or the console based on level and namespace */\nMetricsLogger.prototype.emit = function emit(level, namespace, logArguments) {\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ 'emit:', level, namespace, logArguments ]);\n    var self = this;\n    namespace = namespace || self.options.defaultNamespace;\n    if (!level || !logArguments) {\n        return self;\n    }\n    // add to cache if proper level\n    //TODO: respect do not track?\n    //if( !navigator.doNotTrack && level >= self.options.logLevel ){\n    level = self._parseLevel(level);\n    if (level >= self.options.logLevel) {\n        self._addToCache(level, namespace, logArguments);\n    }\n    // also emit to consoleLogger if proper level for that\n    if (self.consoleLogger && level >= self.options.consoleLevel) {\n        self._emitToConsole(level, namespace, logArguments);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- cache\n/** add a message to the cache and if messages.length is high enough post them to the server */\nMetricsLogger.prototype._addToCache = function _addToCache(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\n        \"_addToCache:\",\n        arguments,\n        this.options.addTime,\n        this.cache.length()\n    ]);\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ '\\t logArguments:', logArguments ]);\n    var self = this;\n    // try add to the cache and if we've got _postSize number of entries, attempt to post them to the server\n    try {\n        var newLength = self.cache.add(self._buildEntry(level, namespace, logArguments));\n        if (newLength >= self._postSize) {\n            self._postCache();\n        }\n        // discard entry if an error occurs, but warn if level set to do so\n    } catch (err) {\n        self._emitToConsole(\"warn\", \"MetricsLogger\", [\n            \"Metrics logger could not stringify logArguments:\",\n            namespace,\n            logArguments\n        ]);\n        self._emitToConsole(\"error\", \"MetricsLogger\", [err]);\n    }\n    return self;\n};\n\n/** build a log cache entry object from the given level, namespace, and arguments (optionally adding timestamp */\nMetricsLogger.prototype._buildEntry = function _buildEntry(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\"_buildEntry:\", arguments]);\n    var entry = {\n        level: level,\n        namespace: this.options.clientPrefix + namespace,\n        args: logArguments\n    };\n    if (this.options.addTime) {\n        entry.time = new Date().toISOString();\n    }\n    return entry;\n};\n\n/** post _postSize messages from the cache to the server, removing them if successful\n *      if the post fails, wait until maxCacheSize is accumulated instead and try again then\n *      in addition to the messages from the cache ('metrics'), any info from getPingData (if set) will be sent\n *      onServerResponse will be called (if set) with any response from the server\n */\nMetricsLogger.prototype._postCache = function _postCache(options) {\n    options = options || {};\n    this._emitToConsole(\"info\", \"MetricsLogger\", [\"_postCache\", options, this._postSize]);\n\n    // short circuit if we're already sending\n    if (!this.options.postUrl || this._sending) {\n        return jQuery.when({});\n    }\n\n    var self = this;\n    var postSize = options.count || self._postSize;\n\n    var // do not splice - remove after *successful* post\n    entries = self.cache.get(postSize);\n\n    var entriesLength = entries.length;\n\n    var // use the optional getPingData to add any extra info we may want to send\n    postData = typeof self.options.getPingData === \"function\" ? self.options.getPingData() : {};\n\n    //console.debug( postSize, entriesLength );\n\n    // add the metrics and send\n    postData.metrics = JSON.stringify(entries);\n    //console.debug( postData.metrics );\n    self._sending = true;\n    return jQuery\n        .post(self.options.postUrl, postData)\n        .always(() => {\n            self._sending = false;\n        })\n        .fail((xhr, status, message) => {\n            // if we failed the previous time, set the next post target to the max num of entries\n            self._postSize = self.options.maxCacheSize;\n            //TODO:??\n            // log this failure to explain any gap in metrics\n            self.emit(\"error\", \"MetricsLogger\", [\n                \"_postCache error:\",\n                xhr.readyState,\n                xhr.status,\n                xhr.responseJSON || xhr.responseText\n            ]);\n            //TODO: still doesn't solve the problem that when cache == max, post will be tried on every emit\n            //TODO: see _delayPost\n        })\n        .done(response => {\n            if (typeof self.options.onServerResponse === \"function\") {\n                self.options.onServerResponse(response);\n            }\n            // only remove if post successful\n            self.cache.remove(entriesLength);\n            //console.debug( 'removed entries:', entriesLength, 'size now:', self.cache.length() );\n            // if we succeeded, reset the post target to the normal num of entries\n            self._postSize = self.options.postSize;\n        });\n    // return the xhr promise\n};\n\n/** set _waiting to true and, after delayPostInMs, set it back to false */\nMetricsLogger.prototype._delayPost = function _delayPost() {\n    //TODO: this won't work between pages\n    var self = this;\n    self._waiting = setTimeout(() => {\n        self._waiting = null;\n    }, self.options.delayPostInMs);\n};\n\nfunction usefulToString(arg) {\n    var asStr = String(arg);\n    if (asStr == \"[object Object]\") {\n        asStr = JSON.stringify(arg);\n    }\n    return asStr;\n}\n\n//----------------------------------------------------------------------------- console\n/** output message to console based on level and consoleLogger type */\nMetricsLogger.prototype._emitToConsole = function _emitToConsole(level, namespace, logArguments) {\n    //console.debug( '_emitToConsole:', level, namespace, logArguments );\n    var self = this;\n\n    var whitelist = self.options.consoleNamespaceWhitelist;\n    if (!self.consoleLogger) {\n        return self;\n    }\n    // if a whitelist for namespaces is set, bail if this namespace is not in the list\n    if (whitelist && whitelist.indexOf(namespace) === -1) {\n        return self;\n    }\n\n    var args = Array.prototype.slice.call(logArguments, 0);\n    args.unshift(namespace);\n    if (self.options.consoleFlattenMessages) {\n        args = [args.map(usefulToString).join(\" \")];\n    }\n    //TODO: script location and/or source maps?\n    //TODO: branch on navigator.userAgent == AIIEEE - it only has log\n    if (level >= MetricsLogger.METRIC && typeof self.consoleLogger.info === \"function\") {\n        return self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.ERROR && typeof self.consoleLogger.error === \"function\") {\n        return self.consoleLogger.error.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.WARN && typeof self.consoleLogger.warn === \"function\") {\n        self.consoleLogger.warn.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.INFO && typeof self.consoleLogger.info === \"function\") {\n        self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.DEBUG && typeof self.consoleLogger.debug === \"function\") {\n        self.consoleLogger.debug.apply(self.consoleLogger, args);\n    } else if (typeof self.consoleLogger.log === \"function\") {\n        self.consoleLogger.log.apply(self.consoleLogger, args);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- shortcuts\n// generic functions when logging from non-namespaced object (e.g. templates)\n/** log to default namespace */\nMetricsLogger.prototype.log = function log() {\n    this.emit(1, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** debug to default namespace */\nMetricsLogger.prototype.debug = function debug() {\n    this.emit(MetricsLogger.DEBUG, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** info to default namespace */\nMetricsLogger.prototype.info = function info() {\n    this.emit(MetricsLogger.INFO, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** warn to default namespace */\nMetricsLogger.prototype.warn = function warn() {\n    this.emit(MetricsLogger.WARN, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** error to default namespace */\nMetricsLogger.prototype.error = function error() {\n    this.emit(MetricsLogger.ERROR, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** metric to default namespace */\nMetricsLogger.prototype.metric = function metric() {\n    this.emit(MetricsLogger.METRIC, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/* ============================================================================\nTODO:\n    need a performance pass - the JSON un/parsing is a bit much\n\n============================================================================ */\n/** @class LoggingCache\n *  Simple implementation of cache wrapping an array.\n *\n *  Formats an entry before it's cached and only keeps options.maxSize number\n *  of entries. Older entries are deleted first.\n */\nfunction LoggingCache(options) {\n    var self = this;\n    return self._init(options || {});\n}\n\n/** default options */\nLoggingCache.defaultOptions = {\n    /** maximum number of entries to keep before discarding oldest */\n    maxSize: 5000\n};\n\n/** initialize with options */\nLoggingCache.prototype._init = function _init(options) {\n    if (!this._hasStorage()) {\n        //TODO: fall back to jstorage\n        throw new Error(\"LoggingCache needs localStorage\");\n    }\n    if (!options.key) {\n        throw new Error(\"LoggingCache needs key for localStorage\");\n    }\n    this.key = options.key;\n    this._initStorage();\n\n    this.maxSize = options.maxSize || LoggingCache.defaultOptions.maxSize;\n    return this;\n};\n\n/** tests for localStorage fns */\nLoggingCache.prototype._hasStorage = function _hasStorage() {\n    //TODO: modernizr\n    var test = \"test\";\n    try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\n/** if no localStorage set for key, initialize to empty array */\nLoggingCache.prototype._initStorage = function _initStorage() {\n    if (localStorage.getItem(this.key) === null) {\n        return this.empty();\n    }\n    return this;\n};\n\n/** add an entry to the cache, removing the oldest beforehand if size >= maxSize */\nLoggingCache.prototype.add = function add(entry) {\n    var self = this;\n    var _cache = self._fetchAndParse();\n    var overage = _cache.length + 1 - self.maxSize;\n    if (overage > 0) {\n        _cache.splice(0, overage);\n    }\n    _cache.push(entry);\n    self._unparseAndStore(_cache);\n    return _cache.length;\n};\n\n/** get the entries from localStorage and parse them */\nLoggingCache.prototype._fetchAndParse = function _fetchAndParse() {\n    var self = this;\n    return JSON.parse(localStorage.getItem(self.key));\n};\n\n/** stringify the entries and put them in localStorage */\nLoggingCache.prototype._unparseAndStore = function _unparseAndStore(entries) {\n    var self = this;\n    return localStorage.setItem(self.key, JSON.stringify(entries));\n};\n\n///** process the entry before caching */\n//LoggingCache.prototype._preprocessEntry = function _preprocessEntry( entry ){\n//    return JSON.stringify( entry );\n//};\n\n/** return the length --- oh, getters where are you? */\nLoggingCache.prototype.length = function length() {\n    return this._fetchAndParse().length;\n};\n\n/** get count number of entries starting with the oldest */\nLoggingCache.prototype.get = function get(count) {\n    return this._fetchAndParse().slice(0, count);\n};\n\n/** remove count number of entries starting with the oldest */\nLoggingCache.prototype.remove = function remove(count) {\n    var _cache = this._fetchAndParse();\n    var removed = _cache.splice(0, count);\n    this._unparseAndStore(_cache);\n    return removed;\n};\n\n/** empty/clear the entire cache */\nLoggingCache.prototype.empty = function empty() {\n    localStorage.setItem(this.key, \"[]\");\n    return this;\n};\n\n/** stringify count number of entries (but do not remove) */\nLoggingCache.prototype.stringify = function stringify(count) {\n    return JSON.stringify(this.get(count));\n};\n\n/** outputs entire cache to console */\nLoggingCache.prototype.print = function print() {\n    // popup? (really, carl? a popup?) - easier to copy/paste\n    console.log(JSON.stringify(this._fetchAndParse(), null, \"  \"));\n};\n\n//=============================================================================\nexport default {\n    MetricsLogger: MetricsLogger,\n    LoggingCache: LoggingCache\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/utils/metrics-logger.js","import Masthead from \"layout/masthead\";\nimport Panel from \"layout/panel\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Utils from \"utils/utils\";\nvar View = Backbone.View.extend({\n    el: \"body\",\n    className: \"full-content\",\n    _panelids: [\"left\", \"right\"],\n\n    initialize: function(options) {\n        var self = this;\n        this.config = _.defaults(options.config || {}, {\n            message_box_visible: false,\n            message_box_content: \"\",\n            message_box_class: \"info\",\n            show_inactivity_warning: false,\n            inactivity_box_content: \"\"\n        });\n\n        // attach global objects, build mastheads\n        Galaxy.modal = this.modal = new Modal.View();\n        Galaxy.display = this.display = view => {\n            if (view.title) {\n                Utils.setWindowTitle(view.title);\n                view.allow_title_display = false;\n            } else {\n                Utils.setWindowTitle();\n                view.allow_title_display = true;\n            }\n            self.center.display(view);\n        };\n        Galaxy.router = this.router = options.Router && new options.Router(self, options);\n        this.masthead = new Masthead.View(this.config);\n        this.center = new Panel.CenterPanel();\n\n        // build page template\n        this.$el.attr(\"scroll\", \"no\");\n        this.$el.html(this._template());\n        this.$(\"#masthead\").replaceWith(this.masthead.$el);\n        this.$(\"#center\").append(this.center.$el);\n        this.$el.append(this.masthead.frame.$el);\n        this.$el.append(this.modal.$el);\n        this.$messagebox = this.$(\"#messagebox\");\n        this.$inactivebox = this.$(\"#inactivebox\");\n\n        // build panels\n        this.panels = {};\n        _.each(this._panelids, panel_id => {\n            var panel_class_name = panel_id.charAt(0).toUpperCase() + panel_id.slice(1);\n            var panel_class = options[panel_class_name];\n            if (panel_class) {\n                var panel_instance = new panel_class(self, options);\n                self[panel_instance.toString()] = panel_instance;\n                self.panels[panel_id] = new Panel.SidePanel({\n                    id: panel_id,\n                    el: self.$(`#${panel_id}`),\n                    view: panel_instance\n                });\n            }\n        });\n        this.render();\n\n        // start the router\n        this.router &&\n            Backbone.history.start({\n                root: Galaxy.root,\n                pushState: true\n            });\n    },\n\n    render: function() {\n        // TODO: Remove this line after select2 update\n        $(\".select2-hidden-accessible\").remove();\n        this.masthead.render();\n        this.renderMessageBox();\n        this.renderInactivityBox();\n        this.renderPanels();\n        this._checkCommunicationServerOnline();\n        return this;\n    },\n\n    /** Render message box */\n    renderMessageBox: function() {\n        if (this.config.message_box_visible) {\n            var content = this.config.message_box_content || \"\";\n            var level = this.config.message_box_class || \"info\";\n            this.$el.addClass(\"has-message-box\");\n            this.$messagebox\n                .attr(\"class\", `panel-${level}-message`)\n                .html(content)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-message-box\");\n            this.$messagebox.hide();\n        }\n        return this;\n    },\n\n    /** Render inactivity warning */\n    renderInactivityBox: function() {\n        if (this.config.show_inactivity_warning) {\n            var content = this.config.inactivity_box_content || \"\";\n            var verificationLink = $(\"<a/>\")\n                .attr(\"href\", `${Galaxy.root}user/resend_verification`)\n                .text(\"Resend verification\");\n            this.$el.addClass(\"has-inactivity-box\");\n            this.$inactivebox\n                .html(`${content} `)\n                .append(verificationLink)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-inactivity-box\");\n            this.$inactivebox.hide();\n        }\n        return this;\n    },\n\n    /** Render panels */\n    renderPanels: function() {\n        var self = this;\n        _.each(this._panelids, panel_id => {\n            var panel = self.panels[panel_id];\n            if (panel) {\n                panel.render();\n            } else {\n                self.$(\"#center\").css(panel_id, 0);\n                self.$(`#${panel_id}`).hide();\n            }\n        });\n        return this;\n    },\n\n    /** body template */\n    _template: function() {\n        return [\n            '<div id=\"everything\">',\n            '<div id=\"background\"/>',\n            '<div id=\"masthead\"/>',\n            '<div id=\"messagebox\"/>',\n            '<div id=\"inactivebox\" class=\"panel-warning-message\" />',\n            '<div id=\"left\" />',\n            '<div id=\"center\" />',\n            '<div id=\"right\" />',\n            \"</div>\",\n            '<div id=\"dd-helper\" />'\n        ].join(\"\");\n    },\n\n    toString: function() {\n        return \"PageLayoutView\";\n    },\n\n    /** Check if the communication server is online and show the icon otherwise hide the icon */\n    _checkCommunicationServerOnline: function() {\n        var host = window.Galaxy.config.communication_server_host;\n        var port = window.Galaxy.config.communication_server_port;\n        var preferences = window.Galaxy.user.attributes.preferences;\n        var $chat_icon_element = $(\"#show-chat-online\");\n        /** Check if the user has deactivated the communication in it's personal settings */\n        if (preferences && [\"1\", \"true\"].indexOf(preferences.communication_server) != -1) {\n            // See if the configured communication server is available\n            $.ajax({\n                url: `${host}:${port}`\n            })\n                .success(data => {\n                    // enable communication only when a user is logged in\n                    if (window.Galaxy.user.id !== null) {\n                        if ($chat_icon_element.css(\"visibility\") === \"hidden\") {\n                            $chat_icon_element.css(\"visibility\", \"visible\");\n                        }\n                    }\n                })\n                .error(data => {\n                    // hide the communication icon if the communication server is not available\n                    $chat_icon_element.css(\"visibility\", \"hidden\");\n                });\n        } else {\n            $chat_icon_element.css(\"visibility\", \"hidden\");\n        }\n    }\n});\n\nexport default { View: View };\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/page.js","// Additional dependencies: jQuery, underscore.\nimport Modal from \"mvc/ui/ui-modal\";\nimport Frames from \"mvc/ui/ui-frames\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(\n            _.keys(this.attributes),\n            function(k) {\n                if (k.indexOf(\"metadata_\") === 0) {\n                    // Found metadata.\n                    var new_key = k.split(\"metadata_\")[1];\n                    metadata.set(new_key, this.attributes[k]);\n                    delete this.attributes[k];\n                }\n            },\n            this\n        );\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: `${Galaxy.root}api/datasets`\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = `${Galaxy.root}dataset/display?dataset_id=${this.id}`;\n        this.attributes.url_viz = `${Galaxy.root}visualization`;\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this;\n\n        var next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(chunk => {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(result => {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\");\n        var header_container = $(\"<thead/>\").appendTo(data_table);\n        var header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(`<th>${column_names.join(\"</th><th>\")}</th>`);\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(`<th>${j}</th>`);\n            }\n        }\n\n        // Render first chunk.\n        var self = this;\n\n        var first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(result => {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(() => {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === \"str\" || column_types[index] === \"list\") {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\");\n\n        var row = $(\"<tr>\");\n        var num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(\n                cells.slice(0, num_columns - 1),\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            row.append(this._renderCell(cells.slice(num_columns - 1).join(\"\\t\"), num_columns - 1));\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            _.each(_.range(num_columns - cells.length), () => {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(\n            chunk.ck_data.split(\"\\n\"),\n            function(line, index) {\n                if (line !== \"\") {\n                    data_table.append(this._renderRow(line));\n                }\n            },\n            this\n        );\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(this.$el.parents(), p => $(p).css(\"overflow\") === \"auto\");\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0;\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (metadata.get(\"chromCol\") && metadata.get(\"startCol\") && metadata.get(\"endCol\")) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\"TabularButtonTrackster : Bed-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            function search(str, array) {\n                for (var j = 0; j < array.length; j++) if (array[j].match(str)) return j;\n                return -1;\n            }\n\n            // load\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\"TabularButtonTrackster : VCF-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\"TabularButtonTrackster : Dataset identification is missing.\");\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\"TabularButtonTrackster : Url for visualization controller is missing.\");\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model: new mod_icon_btn.IconButton({\n                title: \"Visualize\",\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row\n            .children()\n            .eq(this.col.chrom)\n            .html();\n        var start = row\n            .children()\n            .eq(this.col.start)\n            .html();\n\n        // end is optional\n        var end = this.col.end\n            ? row\n                  .children()\n                  .eq(this.col.end)\n                  .html()\n            : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: `${chrom}:${start}-${end}`\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: `${top}px`,\n                left: `${left}px`\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(() => {\n                self.frame.add({\n                    title: \"Trackster\",\n                    url: `${self.url_viz}/trackster?${$.param(btn_viz_pars)}`\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = (model, view, model_config, parent_elt) => {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = options => {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded\n        ? new EmbeddedTabularDatasetChunkedView(options)\n        : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexport default {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/dataset/data.js","import * as _ from \"libs/underscore\";\nimport data_mod from \"mvc/dataset/data\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\nimport GridView from \"mvc/grid/grid-view\";\nimport Tabs from \"mvc/ui/ui-tabs\";\nimport Ui from \"mvc/ui/ui-misc\";\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function() {\n        var self = this;\n        var json = {};\n        _.each(self.constructor.to_json_keys, k => {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = (filters, success_fn) => {\n    // history dataset selection tab\n    var history_grid = new GridView({\n        url_base: `${Galaxy.root}visualization/list_history_datasets`,\n        filters: filters,\n        dict_format: true,\n        embedded: true\n    });\n\n    // library dataset selection tab\n    var library_grid = new GridView({\n        url_base: `${Galaxy.root}visualization/list_library_datasets`,\n        dict_format: true,\n        embedded: true\n    });\n\n    // build tabs\n    var tabs = new Tabs.View();\n    tabs.add({\n        id: \"histories\",\n        title: \"Histories\",\n        $el: $(\"<div/>\").append(history_grid.$el)\n    });\n    tabs.add({\n        id: \"libraries\",\n        title: \"Libraries\",\n        $el: $(\"<div/>\").append(library_grid.$el)\n    });\n\n    // modal\n    Galaxy.modal.show({\n        title: \"Select datasets for new tracks\",\n        body: tabs.$el,\n        closing_events: true,\n        buttons: {\n            Cancel: function() {\n                Galaxy.modal.hide();\n            },\n            Add: function() {\n                var requests = [];\n                tabs.$(\"input.grid-row-select-checkbox[name=id]:checked\").each(function() {\n                    window.console.log($(this).val());\n                    requests[requests.length] = $.ajax({\n                        url: `${Galaxy.root}api/datasets/${$(this).val()}`,\n                        dataType: \"json\",\n                        data: {\n                            data_type: \"track_config\",\n                            hda_ldda: tabs.current() == \"histories\" ? \"hda\" : \"ldda\"\n                        }\n                    });\n                });\n                // To preserve order, wait until there are definitions for all tracks and then add\n                // them sequentially.\n                $.when.apply($, requests).then(function() {\n                    // jQuery always returns an Array for arguments, so need to look at first element\n                    // to determine whether multiple requests were made and consequently how to\n                    // map arguments to track definitions.\n                    var track_defs = arguments[0] instanceof Array ? $.map(arguments, arg => arg[0]) : [arguments[0]];\n                    success_fn(track_defs);\n                });\n                Galaxy.modal.hide();\n            }\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function(default_font) {\n    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext(\"2d\");\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern(\"right_strand\", \"/visualization/strand_right.png\");\n    this.load_pattern(\"left_strand\", \"/visualization/strand_left.png\");\n    this.load_pattern(\"right_strand_inv\", \"/visualization/strand_right_inv.png\");\n    this.load_pattern(\"left_strand_inv\", \"/visualization/strand_left_inv.png\");\n};\n\n_.extend(CanvasManager.prototype, {\n    load_pattern: function(key, path) {\n        var patterns = this.patterns;\n        var dummy_context = this.dummy_context;\n        var image = new Image();\n        image.src = `${Galaxy.root}static/images${path}`;\n        image.onload = () => {\n            patterns[key] = dummy_context.createPattern(image, \"repeat\");\n        };\n    },\n    get_pattern: function(key) {\n        return this.patterns[key];\n    },\n    new_canvas: function() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function(key) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n\n        var index = _.indexOf(key_ary, k => k.toString() === key_str);\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            } else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function(key, value) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n        var num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function() {\n        return this.size() === 0\n            ? null\n            : // Most recent key is at the end of key array.\n              this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function(entry, mode) {\n            return true;\n        },\n        can_subset: function(entry) {\n            return false;\n        }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get(\"init_data\");\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get(\"num_elements\") < entries.length) {\n            this.set(\"num_elements\", entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, entry => {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function() {\n        var dataset = this.get(\"dataset\");\n        var ready_deferred = $.Deferred();\n\n        var // If requesting raw data, query dataset state; if requesting (converted) data,\n        // need to query converted datasets state.\n        query_type =\n            this.get(\"data_type\") === \"raw_data\"\n                ? \"state\"\n                : this.get(\"data_type\") === \"data\" ? \"converted_datasets_state\" : \"error\";\n\n        var ss_deferred = new util_mod.ServerStateDeferred({\n            ajax_settings: {\n                url: this.get(\"dataset\").url(),\n                data: {\n                    hda_ldda: dataset.get(\"hda_ldda\"),\n                    data_type: query_type\n                },\n                dataType: \"json\"\n            },\n            interval: 5000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        $.when(ss_deferred.go()).then(response => {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\");\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function(query) {\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            query: query,\n            hda_ldda: dataset.get(\"hda_ldda\"),\n            data_type: \"features\"\n        };\n\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            data_type: this.get(\"data_type\"),\n            chrom: region.get(\"chrom\"),\n            low: region.get(\"start\"),\n            high: region.get(\"end\"),\n            mode: mode,\n            resolution: resolution,\n            hda_ldda: dataset.get(\"hda_ldda\")\n        };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get(\"filters_manager\");\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this;\n\n        var entry = $.getJSON(dataset.url(), params, result => {\n            // Add region to the result.\n            result.region = region;\n            manager.set_data(region, result);\n        });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if (entry && (util_mod.is_deferred(entry) || this.get(\"data_mode_compatible\")(entry, mode))) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get(\"key_ary\");\n\n        var obj_cache = this.get(\"obj_cache\");\n        var entry_region;\n        var is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if (\n                    util_mod.is_deferred(entry) ||\n                    (this.get(\"data_mode_compatible\")(entry, mode) && this.get(\"can_subset\")(entry))\n                ) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if (!util_mod.is_deferred(entry)) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (!last_request || region.get(\"start\") > last_request.get(\"start\")) {\n                // This request is after the last request, so extend right.\n                region.set(\"end\", region.get(\"start\") + this.attributes.min_region_size);\n            } else {\n                // This request is after the last request, so extend left.\n                region.set(\"start\", region.get(\"end\") - this.attributes.min_region_size);\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set(\"genome\", this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get(\"data_mode_compatible\")(cur_data, mode))) {\n            console.log(\"ERROR: problem with getting more data: current data is not compatible\");\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get(\"start\");\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {\n                start_val: cur_data.data.length + 1\n            });\n        } else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set(\"start\", query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this;\n\n        var new_data_request = this.load_data(query_region, mode, resolution, extra_params);\n\n        var new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(result => {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return cur_data.dataset_type === \"bigwig\" && cur_data.data.length < 8000;\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function(region, mode, resolution, detail_multiplier, extra_params) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) {\n            extra_params = {};\n        }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === \"bigwig\") {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\"ERROR: no data to mark as stale: \", this.get(\"dataset\"), region.toString());\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function(genome) {\n        // -- Get all data. --\n\n        var self = this;\n\n        var all_data_available = true;\n\n        var //  Map chromosome info into genome data.\n        gw_data = _.map(genome.get(\"chroms_info\").chrom_info, chrom_info => {\n            var chrom_data = self.get_elt(\n                new GenomeRegion({\n                    chrom: chrom_info.chrom,\n                    start: 0,\n                    end: chrom_info.len\n                })\n            );\n\n            // Set flag if data is not available.\n            if (!chrom_data) {\n                all_data_available = false;\n            }\n\n            return chrom_data;\n        });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(this.get(\"dataset\").url(), { data_type: \"genome_data\" }, genome_wide_data => {\n            self.add_data(genome_wide_data.data);\n            deferred.resolve(genome_wide_data.data);\n        });\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function(data, subregion) {\n                return _.filter(\n                    data,\n                    data_point => data_point[0] >= subregion.get(\"start\") && data_point[0] <= subregion.get(\"end\")\n                );\n            },\n            refseq: function(data, subregion) {\n                var seq_start = subregion.get(\"start\") - entry.region.get(\"start\");\n                return entry.data.slice(seq_start, seq_start + subregion.length());\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set(\"dataset\", dataset_placeholder);\n    },\n\n    load_data: function(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return region.length() <= 100000\n            ? GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params)\n            : { data: null, region: region };\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), chrom_info => chrom_info.chrom === chr_name);\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), chrom_info => chrom_info.chrom === chr_name).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend(\n    {\n        defaults: {\n            chrom: null,\n            start: 0,\n            end: 0,\n            str_val: null,\n            genome: null\n        },\n\n        /**\n         * Returns true if this region is the same as a given region.\n         * It does not test the genome right now.\n         */\n        same: function(region) {\n            return (\n                this.attributes.chrom === region.get(\"chrom\") &&\n                this.attributes.start === region.get(\"start\") &&\n                this.attributes.end === region.get(\"end\")\n            );\n        },\n\n        /**\n         * If from_str specified, use it to initialize attributes.\n         */\n        initialize: function(options) {\n            if (options.from_str) {\n                var pieces = options.from_str.split(\":\");\n                var chrom = pieces[0];\n                var start_end = pieces[1].split(\"-\");\n                this.set({\n                    chrom: chrom,\n                    start: parseInt(start_end[0], 10),\n                    end: parseInt(start_end[1], 10)\n                });\n            }\n\n            // Keep a copy of region's string value for fast lookup.\n            this.attributes.str_val = `${this.get(\"chrom\")}:${this.get(\"start\")}-${this.get(\"end\")}`;\n\n            // Set str_val on attribute change.\n            this.on(\n                \"change\",\n                function() {\n                    this.attributes.str_val = `${this.get(\"chrom\")}:${this.get(\"start\")}-${this.get(\"end\")}`;\n                },\n                this\n            );\n        },\n\n        copy: function() {\n            return new GenomeRegion({\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            });\n        },\n\n        length: function() {\n            return this.get(\"end\") - this.get(\"start\");\n        },\n\n        /** Returns region in canonical form chrom:start-end */\n        toString: function() {\n            return this.attributes.str_val;\n        },\n\n        toJSON: function() {\n            return {\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            };\n        },\n\n        /**\n         * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n         * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n         */\n        compute_overlap: function(a_region) {\n            var first_chrom = this.get(\"chrom\");\n            var second_chrom = a_region.get(\"chrom\");\n            var first_start = this.get(\"start\");\n            var second_start = a_region.get(\"start\");\n            var first_end = this.get(\"end\");\n            var second_end = a_region.get(\"end\");\n            var overlap;\n\n            // Compare chroms.\n            if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n                return GenomeRegion.overlap_results.DIF_CHROMS;\n            }\n\n            // Compare regions.\n            if (first_start < second_start) {\n                if (first_end < second_start) {\n                    overlap = GenomeRegion.overlap_results.BEFORE;\n                } else if (first_end < second_end) {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_START;\n                } else {\n                    // first_end >= second_end\n                    overlap = GenomeRegion.overlap_results.CONTAINS;\n                }\n            } else if (first_start > second_start) {\n                if (first_start > second_end) {\n                    overlap = GenomeRegion.overlap_results.AFTER;\n                } else if (first_end <= second_end) {\n                    overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n                } else {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_END;\n                }\n            } else {\n                // first_start === second_start\n                overlap =\n                    first_end >= second_end\n                        ? GenomeRegion.overlap_results.CONTAINS\n                        : GenomeRegion.overlap_results.CONTAINED_BY;\n            }\n\n            return overlap;\n        },\n\n        /**\n         * Trim a region to match genome's constraints.\n         */\n        trim: function(genome) {\n            // Assume that all chromosome/contigs start at 0.\n            if (this.attributes.start < 0) {\n                this.attributes.start = 0;\n            }\n\n            // Only try to trim the end if genome is set.\n            if (this.attributes.genome) {\n                var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n                if (this.attributes.end > chrom_len) {\n                    this.attributes.end = chrom_len - 1;\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Returns true if this region contains a given region.\n         */\n        contains: function(a_region) {\n            return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n        },\n\n        /**\n         * Returns true if regions overlap.\n         */\n        overlaps: function(a_region) {\n            return (\n                _.intersection(\n                    [this.compute_overlap(a_region)],\n                    [\n                        GenomeRegion.overlap_results.DIF_CHROMS,\n                        GenomeRegion.overlap_results.BEFORE,\n                        GenomeRegion.overlap_results.AFTER\n                    ]\n                ).length === 0\n            );\n        }\n    },\n    {\n        overlap_results: {\n            DIF_CHROMS: 1000,\n            BEFORE: 1001,\n            CONTAINS: 1002,\n            OVERLAP_START: 1003,\n            OVERLAP_END: 1004,\n            CONTAINED_BY: 1005,\n            AFTER: 1006\n        }\n    }\n);\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: \"\"\n    },\n\n    initialize: function(options) {\n        this.set(\"region\", new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend(\n    {\n        defaults: {\n            mode: \"Auto\"\n        },\n\n        initialize: function(options) {\n            this.set(\"dataset\", new data_mod.Dataset(options.dataset));\n\n            // -- Set up config settings. --\n            var models = [\n                {\n                    key: \"name\",\n                    default_value: this.get(\"dataset\").get(\"name\")\n                },\n                { key: \"color\" },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: 0\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: 1\n                }\n            ];\n\n            this.set(\"config\", config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n            // -- Set up data manager. --\n            var preloaded_data = this.get(\"preloaded_data\");\n            if (preloaded_data) {\n                preloaded_data = preloaded_data.data;\n            } else {\n                preloaded_data = [];\n            }\n            this.set(\n                \"data_manager\",\n                new GenomeDataManager({\n                    dataset: this.get(\"dataset\"),\n                    init_data: preloaded_data\n                })\n            );\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\"track_type\", \"dataset\", \"prefs\", \"mode\", \"filters\", \"tool_state\"],\n        to_json_mappers: {\n            prefs: function(p, self) {\n                if (_.size(p) === 0) {\n                    p = {\n                        name: self\n                            .get(\"config\")\n                            .get(\"name\")\n                            .get(\"value\"),\n                        color: self\n                            .get(\"config\")\n                            .get(\"color\")\n                            .get(\"value\")\n                    };\n                }\n                return p;\n            },\n            dataset: function(d) {\n                return {\n                    id: d.id,\n                    hda_ldda: d.get(\"hda_ldda\")\n                };\n            }\n        }\n    }\n);\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        type: \"\"\n    },\n\n    urlRoot: `${Galaxy.root}api/visualizations`,\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend(\n    {\n        defaults: _.extend({}, Visualization.prototype.defaults, {\n            dbkey: \"\",\n            drawables: null,\n            bookmarks: null,\n            viewport: null\n        }),\n\n        initialize: function(options) {\n            // Replace drawables with tracks.\n            this.set(\"drawables\", new BackboneTrackCollection(options.tracks));\n\n            var models = [];\n            this.set(\"config\", config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n            // Clear track and data definitions to avoid storing large objects.\n            this.unset(\"tracks\");\n            this.get(\"drawables\").each(d => {\n                d.unset(\"preloaded_data\");\n            });\n        },\n\n        /**\n         * Add a track or array of tracks to the visualization.\n         */\n        add_tracks: function(tracks) {\n            this.get(\"drawables\").add(tracks);\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\"view\", \"viewport\", \"bookmarks\"],\n\n        to_json_mappers: {\n            view: function(dummy, self) {\n                return {\n                    obj_type: \"View\",\n                    prefs: {\n                        name: self.get(\"title\"),\n                        content_visible: true\n                    },\n                    drawables: self.get(\"drawables\")\n                };\n            }\n        }\n    }\n);\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, \"change_location\");\n        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, \"change_location\");\n\n        // Handle navigate events from view.\n        var self = this;\n        self.view.on(\"navigate\", new_loc => {\n            self.navigate(new_loc);\n        });\n    },\n\n    change_location: function(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nexport default {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/viz/visualization.js"],"sourceRoot":""}