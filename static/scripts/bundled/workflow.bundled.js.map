{"version":3,"sources":["webpack:///workflow.bundled.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-connector.js","webpack:///./galaxy/scripts/apps/workflow.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-view.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-manager.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-canvas.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-node.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-view-node.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-view-terminals.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-terminals.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-view-data.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-forms.js","webpack:///./galaxy/scripts/mvc/workflow/workflow-icons.js"],"names":["webpackJsonp","136","module","exports","__webpack_require__","$","Connector","handle1","handle2","this","canvas","dragging","inner_color","outer_color","connect","Object","defineProperty","value","extend","prototype","t1","t2","destroy","disconnect","remove","destroyIfInvalid","attachable","redraw","canvas_container","document","createElement","append","style","zIndex","relativeLeft","e","offset","left","relativeTop","top","start_x","element","start_y","end_x","end_y","canvas_min_x","Math","min","canvas_max_x","max","canvas_min_y","canvas_max_y","cp_shift","abs","canvas_left","canvas_top","canvas_width","canvas_height","setAttribute","start_offsets","getContext","end_offsets","num_offsets","isMappedOver","connector","i","inner_width","outer_width","length","draw_outlined_curve","offset_start","offset_end","c","lineCap","strokeStyle","lineWidth","beginPath","moveTo","bezierCurveTo","stroke","default","call","272","workflowApp","options","_workflowView2","_workflowView","obj","__esModule","window","273","Backbone","_","_interopRequireDefault","reset_tool_search","initValue","tool_menu_frame","contents","removeClass","find","hide","show","each","attr","hasClass","val","add_node_icon","$to_el","nodeType","iconStyle","_workflowIcons2","$icon","addClass","before","_utils","_utils2","_workflowManager","_workflowManager2","_workflowCanvas","_workflowCanvas2","_workflowNode","_workflowNode2","_workflowIcons","_workflowForms","_workflowForms2","_uiMisc","_uiMisc2","_asyncSaveText","_asyncSaveText2","_toastr","newObj","key","hasOwnProperty","workflow_globals","View","initialize","workflow_save_as","body","show_modal","OK","rename_name","self","workflow","name","rename_annotation","ajax","url","urls","type","data","workflow_name","workflow_annotation","workflow_data","JSON","stringify","to_simple","done","id","onbeforeunload","undefined","location","Galaxy","root","hide_modal","fail","alert","Cancel","layout_editor","layout","fit_canvas_to_nodes","scroll_to_nodes","canvas_manager","draw_overview","show_overview","jStorage","set","css","hide_overview","app","close_editor","check_changes_in_active_form","has_changes","do_close","workflow_index","Save Changes","save_current_workflow","Don't Save","eventObj","success_callback","show_message","rectify_workflow_outputs","request","success","text","message","errors","errlist","v","appendTo","stored","showWorkflowParameters","Ok","error","response","err_msg","click","focus","select","keyup","lastValue","q","timer","clearTimeout","setTimeout","get","tool_search","s","map","n","index","parent","this_label","next","no_visible_tools","is","reset","datatypes","parse","async","responseText","datatypes_mapping","ext_to_type","ext_to_class_name","type_to_type","class_to_classes","_workflowLoadAjax","from_simple","upgrade_message","steps","step","step_id","details","upgrade_messages","m","parseInt","nodes","Continue","beforeSubmit","make_popupmenu","Save","Save As","Run","Edit Attributes","clear_active_node","Auto Re-layout","Close","overview_size","width","height","bind","d","op","offsetParent","opo","new_size","offsetX","offsetY","workflows","_buildToolPanelWorkflows","wrap","last_expanded","slideUp","slideDown","rename_async","annotate_async","$section","copy","ButtonIcon","icon","cls","tooltip","onclick","step_count","copy_into_workflow","modal","title","buttons","Copy","$add","html","on","add_node_for_subworkflow","latest_id","$el","workflowId","k","vv","remove_all","cv","cc","merge","load_workflow","dataType","cache","_moduleInitAjax","node","request_data","init_field_data","update_field_data","activate_node","add_node_for_tool","create_node","tool_id","content_id","add_node_for_module","display_file_list","addlist","out_terminal","output_terminals","parameter_re","workflow_parameters","wf_parm_container","wf_parm_box","new_parameter_content","matches","config_form","inputs","deepeach","form_matches","match","concat","post_job_actions","pja","action_arguments","action_argument","arg_matches","inArray","push","substring","showAttributes","showForm","content","$container","form_type","form","emit","debug","scrollTop","isSubType","child","prebuildNode","title_text","$f","$title","scrollLeft","tmp","o","position","p","prependTo","node_changed","po","x","y","terminal","274","Workflow","id_counter","active_form_has_changes","workflowOutputLabels","_workflowConnector","_workflowConnector2","Toastr","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","warning","attemptUpdateOutputLabel","outputName","labelWorkflowOutput","nodeView","redrawWorkflowOutputs","add_node","remove_node","active_node","wf","using_workflow_outputs","has_existing_pjas","workflow_outputs","pja_id","action_type","pjas_to_rem","pja_name","ot_id","ot","isWorkflowOutput","output_name","reload_active_node","input_connections","input_terminals","t","cons","connectors","con_dict","input_subworkflow_step_id","attributes","input","act","node_data","tool_version","version","tool_state","annotation","uuid","initialImport_","initialImport","keys","max_id","workflow_output","isArray","l","other_node","addWorkflowOutput","submit","make_inactive","make_active","force","n_pred","successors","j","other","node_ids_by_level","level_parents","pred_k","sk","all_nodes","ids","sort","a","b","max_width","bounds_for_all_nodes","xmin","Infinity","xmax","ymin","ymax","round_up","ceil","fix_delta","bounds","xmin_delta","ymin_delta","children","275","CanvasManager","canvas_viewport","overview","oc","ov","init_drag","ScrollPanel","panel","move","background-position-x","background-position-y","update_viewport_overlay","scroll_panel","x_adjust","y_adjust","in_w","in_h","o_w","o_h","new_x_offset","pageX","new_y_offset","pageY","cc_pos","shift_h","shift_w","canvas_el","size","cv_w","cv_h","fillStyle","node_element","w","h","fillRect","strokeRect","test","onmove","timeout","panel_pos","panel_w","panel_h","viewport","viewport_w","viewport_h","viewport_offset","min_x","min_y","max_x","max_y","p_min_x","p_min_y","p_max_x","p_max_y","moved","stop","ui","276","_workflowViewNode","_workflowViewNode2","Node","Model","getWorkflowOutput","findWhere","removeWorkflowOutput","splice","output","changed","oldLabel","workflowOutput","markChanged","connectedOutputTerminals","_connectedTerminals","terminals","connectedTerminals","hasConnectedOutputTerminals","outputTerminals","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputTerminals","inputName","inputTerminal","mapped_outputs","mapOver","isCollection","mappedInputTerminals","_mappedTerminals","mappedTerminals","hasMappedOverInputTerminals","found","removeChild","appendChild","parentNode","el","data_inputs","addDataInput","data_outputs","addRule","addDataOutput","render","unused_outputs","outputViews","output_view","cur_name","data_names","cur_name_in_data_outputs","data_name","unused_output","terminalElement","wf_output","extensions","destroyInvalidConnections","pja_in","renderToolErrors","old_body","new_body","newInputsDiv","newTerminalViews","terminalView","difference","values","terminalViews","unusedView","updateDataOutput","replaceWith","277","_underscore","_workflowViewTerminals","_workflowViewTerminals2","_workflowViewData","_workflowViewData2","output_width","tool_body","renderToolLabel","updateMaxWidth","newWidth","skipResize","terminalViewClass","input_type","InputCollectionTerminalView","InputTerminalView","update","inputView","DataInputView","ib","prepend","terminalElements","collection","OutputCollectionTerminalView","OutputTerminalView","outputView","DataOutputView","redrawWorkflowOutput","278","_workflowTerminals","_workflowTerminals2","TerminalMappingView","tagName","className","delay","model","InputTerminalMappingView","events","mouseenter","mouseleave","onMouseEnter","connected","onMouseLeave","onClick","resetMapping","TerminalView","setupMappingView","terminalMapping","terminalMappingClass","terminalMappingView","terminalMappingViewClass","BaseInputTerminalView","terminalForInput","multiple","dropinit","dropstart","dropend","drop","hover","onDropInit","drag","canAccept","onDropStart","proxy","onDropEnd","onDrop","onHover","display","padding-right","TerminalMapping","InputTerminal","InputCollectionTerminal","BaseOutputTerminalView","terminalForOutput","dragstart","dragend","onDrag","onDragStart","available","OutputTerminal","onDragEnd","collection_type","collection_type_source","OutputCollectionTerminal","279","CollectionTypeDescription","collectionType","rank","split","NULL_COLLECTION_TYPE_DESCRIPTION","canMatch","canMapOver","toString","otherCollectionType","equal","ANY_COLLECTION_TYPE_DESCRIPTION","otherCollectionTypeDescription","requiredSuffix","_endsWith","effectiveMapOver","str","suffix","indexOf","disableMapOver","setMapOver","collectionTypeDescription","trigger","Terminal","resetMappingIfNeeded","slice","outputTerminal","mappedInput","connectedInput","BaseInputTerminal","_inputFilled","inputFilled","_collectionAttached","inputsFilled","firstOutput","_mappingConstraints","constraints","first","_producesAcceptableDatatype","thisDatatype","cat_outputs","Array","pja_i","other_datatype_i","other_datatype","_otherCollectionType","otherMapOver","other_output","thisMapOver","every","collectionTypes","collection_types","_effectiveMapOver","some","collectionTypeIndex","_effectiveCollectionTypes","effectiveCollectionTypes","effectiveCollectionType","console","log","newCollectionType","280","outerWidth","join","calloutView","OutputCalloutView","hoverImage","resetImage","detach","view","margin","right","281","_addLabelAnnotation","unshift","fixed","area","help","onchange","new_label","duplicate","input_id","element_list","_addSections","visit","head","head_list","action","output_id","pja_arg","payload","p_id","expanded","String","Boolean","ignore","host","input_terminal_names","0","1","input_config","flat","new_value","_formView","_formView2","_toolFormBase","_toolFormBase2","Default","create","Tool","text_enable","text_disable","narrow","initial_errors","initialmodel","process","_customize","resolve","buildmodel","postchange","current_state","reject","info","textify","__class__","collapsible_value","is_workflow","test_param","81","tool","data_input","data_collection_input","subworkflow","pause"],"mappings":"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","file":"workflow.bundled.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 136:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction Connector(handle1, handle2) {\n    this.canvas = null;\n    this.dragging = false;\n    this.inner_color = \"#FFFFFF\";\n    this.outer_color = \"#D8B365\";\n    if (handle1 && handle2) {\n        this.connect(handle1, handle2);\n    }\n}\n$.extend(Connector.prototype, {\n    connect: function connect(t1, t2) {\n        this.handle1 = t1;\n        if (this.handle1) {\n            this.handle1.connect(this);\n        }\n        this.handle2 = t2;\n        if (this.handle2) {\n            this.handle2.connect(this);\n        }\n    },\n    destroy: function destroy() {\n        if (this.handle1) {\n            this.handle1.disconnect(this);\n        }\n        if (this.handle2) {\n            this.handle2.disconnect(this);\n        }\n        $(this.canvas).remove();\n    },\n    destroyIfInvalid: function destroyIfInvalid() {\n        if (this.handle1 && this.handle2 && !this.handle2.attachable(this.handle1)) {\n            this.destroy();\n        }\n    },\n    redraw: function redraw() {\n        var canvas_container = $(\"#canvas-container\");\n        if (!this.canvas) {\n            this.canvas = document.createElement(\"canvas\");\n            canvas_container.append($(this.canvas));\n            if (this.dragging) {\n                this.canvas.style.zIndex = \"300\";\n            }\n        }\n        var relativeLeft = function relativeLeft(e) {\n            return $(e).offset().left - canvas_container.offset().left;\n        };\n        var relativeTop = function relativeTop(e) {\n            return $(e).offset().top - canvas_container.offset().top;\n        };\n        if (!this.handle1 || !this.handle2) {\n            return;\n        }\n        // Find the position of each handle\n        var start_x = relativeLeft(this.handle1.element) + 5;\n        var start_y = relativeTop(this.handle1.element) + 5;\n        var end_x = relativeLeft(this.handle2.element) + 5;\n        var end_y = relativeTop(this.handle2.element) + 5;\n        // Calculate canvas area\n        var canvas_extra = 100;\n        var canvas_min_x = Math.min(start_x, end_x);\n        var canvas_max_x = Math.max(start_x, end_x);\n        var canvas_min_y = Math.min(start_y, end_y);\n        var canvas_max_y = Math.max(start_y, end_y);\n        var cp_shift = Math.min(Math.max(Math.abs(canvas_max_y - canvas_min_y) / 2, 100), 300);\n        var canvas_left = canvas_min_x - canvas_extra;\n        var canvas_top = canvas_min_y - canvas_extra;\n        var canvas_width = canvas_max_x - canvas_min_x + 2 * canvas_extra;\n        var canvas_height = canvas_max_y - canvas_min_y + 2 * canvas_extra;\n        // Place the canvas\n        this.canvas.style.left = canvas_left + \"px\";\n        this.canvas.style.top = canvas_top + \"px\";\n        this.canvas.setAttribute(\"width\", canvas_width);\n        this.canvas.setAttribute(\"height\", canvas_height);\n        // Adjust points to be relative to the canvas\n        start_x -= canvas_left;\n        start_y -= canvas_top;\n        end_x -= canvas_left;\n        end_y -= canvas_top;\n\n        // Draw the line\n\n        var c = this.canvas.getContext(\"2d\");\n\n        var start_offsets = null;\n        var end_offsets = null;\n        var num_offsets = 1;\n        if (this.handle1 && this.handle1.isMappedOver()) {\n            var start_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var start_offsets = [0];\n        }\n        if (this.handle2 && this.handle2.isMappedOver()) {\n            var end_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var end_offsets = [0];\n        }\n        var connector = this;\n        for (var i = 0; i < num_offsets; i++) {\n            var inner_width = 5;\n            var outer_width = 7;\n            if (start_offsets.length > 1 || end_offsets.length > 1) {\n                // We have a multi-run, using many lines, make them small.\n                inner_width = 1;\n                outer_width = 3;\n            }\n            connector.draw_outlined_curve(start_x, start_y, end_x, end_y, cp_shift, inner_width, outer_width, start_offsets[i % start_offsets.length], end_offsets[i % end_offsets.length]);\n        }\n    },\n    draw_outlined_curve: function draw_outlined_curve(start_x, start_y, end_x, end_y, cp_shift, inner_width, outer_width, offset_start, offset_end) {\n        var offset_start = offset_start || 0;\n        var offset_end = offset_end || 0;\n        var c = this.canvas.getContext(\"2d\");\n        c.lineCap = \"round\";\n        c.strokeStyle = this.outer_color;\n        c.lineWidth = outer_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(start_x + cp_shift, start_y + offset_start, end_x - cp_shift, end_y + offset_end, end_x, end_y + offset_end);\n        c.stroke();\n        // Inner line\n        c.strokeStyle = this.inner_color;\n        c.lineWidth = inner_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(start_x + cp_shift, start_y + offset_start, end_x - cp_shift, end_y + offset_end, end_x, end_y + offset_end);\n        c.stroke();\n    }\n});\nexports.default = Connector;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 272:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = workflowApp;\n\nvar _workflowView = __webpack_require__(273);\n\nvar _workflowView2 = _interopRequireDefault(_workflowView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction workflowApp(options) {\n    new _workflowView2.default(options);\n}\n\nwindow.workflowApp = workflowApp;\n\n/***/ }),\n\n/***/ 273:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _workflowManager = __webpack_require__(274);\n\nvar _workflowManager2 = _interopRequireDefault(_workflowManager);\n\nvar _workflowCanvas = __webpack_require__(275);\n\nvar _workflowCanvas2 = _interopRequireDefault(_workflowCanvas);\n\nvar _workflowNode = __webpack_require__(276);\n\nvar _workflowNode2 = _interopRequireDefault(_workflowNode);\n\nvar _workflowIcons = __webpack_require__(81);\n\nvar _workflowIcons2 = _interopRequireDefault(_workflowIcons);\n\nvar _workflowForms = __webpack_require__(281);\n\nvar _workflowForms2 = _interopRequireDefault(_workflowForms);\n\nvar _uiMisc = __webpack_require__(6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _asyncSaveText = __webpack_require__(93);\n\nvar _asyncSaveText2 = _interopRequireDefault(_asyncSaveText);\n\nvar _toastr = __webpack_require__(65);\n\nvar Toastr = _interopRequireWildcard(_toastr);\n\n__webpack_require__(15);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function () {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = _workflowIcons2.default[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = window.workflow_globals.app = this;\n        this.options = options;\n        this.urls = options && options.urls || {};\n        var close_editor = function close_editor() {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = function do_close() {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\"Close workflow editor\", \"There are unsaved changes to your workflow which will be lost.\", {\n                    Cancel: hide_modal,\n                    \"Save Changes\": function SaveChanges() {\n                        save_current_workflow(null, do_close);\n                    }\n                }, {\n                    \"Don't Save\": do_close\n                });\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = function save_current_workflow(eventObj, success_callback) {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            _utils2.default.request({\n                url: Galaxy.root + \"api/workflows/\" + self.options.id,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function success(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, function (i, v) {\n                            $(\"<li/>\").text(v).appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function error(response) {\n                    window.show_modal(\"Saving workflow failed.\", response.err_msg, { Ok: hide_modal });\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\").click(function () {\n            $(this).focus();\n            $(this).select();\n        }).keyup(function () {\n            // Remove italics.\n            $(this).css(\"font-style\", \"normal\");\n            // Don't update if same value as last time\n            if (this.value.length < 3) {\n                reset_tool_search(false);\n            } else if (this.value != this.lastValue) {\n                // Add class to denote that searching is active.\n                $(this).addClass(\"search_active\");\n                // input.addClass(config.loadingClass);\n                // Add '*' to facilitate partial matching.\n                var q = this.value;\n                // Stop previous ajax-request\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n                // Start a new ajax-request in X ms\n                $(\"#search-spinner\").show();\n                this.timer = setTimeout(function () {\n                    $.get(self.urls.tool_search, { q: q }, function (data) {\n                        // input.removeClass(config.loadingClass);\n                        // Show live-search if results and search-term aren't empty\n                        $(\"#search-no-results\").hide();\n                        // Hide all tool sections.\n                        $(\".toolSectionWrapper\").hide();\n                        // This hides all tools but not workflows link (which is in a .toolTitle div).\n                        $(\".toolSectionWrapper\").find(\".toolTitle\").hide();\n                        if (data.length != 0) {\n                            // Map tool ids to element ids and join them.\n                            var s = $.map(data, function (n, i) {\n                                return \"link-\" + n;\n                            });\n                            // First pass to show matching tools and their parents.\n                            $(s).each(function (index, id) {\n                                // Add class to denote match.\n                                $(\"[id='\" + id + \"']\").parent().addClass(\"search_match\");\n                                $(\"[id='\" + id + \"']\").parent().show().parent().parent().show().parent().show();\n                            });\n                            // Hide labels that have no visible children.\n                            $(\".toolPanelLabel\").each(function () {\n                                var this_label = $(this);\n                                var next = this_label.next();\n                                var no_visible_tools = true;\n                                // Look through tools following label and, if none are visible, hide label.\n                                while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                    if (next.is(\":visible\")) {\n                                        no_visible_tools = false;\n                                        break;\n                                    } else {\n                                        next = next.next();\n                                    }\n                                }\n                                if (no_visible_tools) {\n                                    this_label.hide();\n                                }\n                            });\n                        } else {\n                            $(\"#search-no-results\").show();\n                        }\n                        $(\"#search-spinner\").hide();\n                    }, \"json\");\n                }, 400);\n            }\n            this.lastValue = this.value;\n        });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new _workflowCanvas2.default(this, $(\"#canvas-viewport\"), $(\"#overview\"));\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse($.ajax({\n            url: Galaxy.root + \"api/datatypes\",\n            async: false\n        }).responseText);\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse($.ajax({\n            url: Galaxy.root + \"api/datatypes/mapping\",\n            async: false\n        }).responseText);\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function success(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, function (step, step_id) {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += \"<li>\" + step.errors + \"</li>\";\n                    }\n                    _.each(data.upgrade_messages[step_id], function (m) {\n                        details += \"<li>\" + m + \"</li>\";\n                    });\n                    if (details) {\n                        upgrade_message += \"<li>Step \" + (parseInt(step_id, 10) + 1) + \": \" + self.workflow.nodes[step_id].name + \"<ul>\" + details + \"</ul></li>\";\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\"Issues loading this workflow\", \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" + upgrade_message + \"</ul></p>\", { Continue: hide_modal });\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function beforeSubmit(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu && make_popupmenu($(\"#workflow-options-button\"), {\n            Save: save_current_workflow,\n            \"Save As\": workflow_save_as,\n            Run: function Run() {\n                window.location = Galaxy.root + \"workflow/run?id=\" + self.options.id;\n            },\n            \"Edit Attributes\": function EditAttributes() {\n                self.workflow.clear_active_node();\n            },\n            \"Auto Re-layout\": layout_editor,\n            Close: close_editor\n        });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $('<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' + '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>');\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function OK() {\n                    var rename_name = $(\"#workflow_rename\").val().length > 0 ? $(\"#workflow_rename\").val() : \"SavedAs_\" + self.workflow.name;\n                    var rename_annotation = $(\"#wf_annotation\").val().length > 0 ? $(\"#wf_annotation\").val() : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function workflow_data() {\n                                return JSON.stringify(self.workflow.to_simple());\n                            }\n                        }\n                    }).done(function (id) {\n                        window.onbeforeunload = undefined;\n                        window.location = Galaxy.root + \"workflow/editor?id=\" + id;\n                        hide_modal();\n                    }).fail(function () {\n                        hide_modal();\n                        alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                    });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content += \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" + node.id + \" - \" + node.name + \"</div>\";\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content += \"<p>\" + output.name + \"<input type='checkbox' name='\" + node.id + \"|\" + output.name + \"' checked /></p>\";\n                        } else {\n                            new_content += \"<p>\" + output.name + \"<input type='checkbox' name='\" + node.id + \"|\" + output.name + \"' /></p>\";\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function () {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function (e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $.jStorage.set(\"overview-size\", new_size + \"px\");\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(function () {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = function () {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 && $(\"#left\").find(\".toolMenu\").append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function () {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(function () {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        (0, _asyncSaveText2.default)(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(function () {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        (0, _asyncSaveText2.default)(\"workflow-annotation\", \"workflow-annotation\", self.urls.annotate_async, \"new_annotation\", 25, true, 4);\n    },\n\n    _buildToolPanelWorkflows: function _buildToolPanelWorkflows() {\n        var self = this;\n        var $section = $('<div class=\"toolSectionWrapper\">' + '<div class=\"toolSectionTitle\">' + '<a href=\"#\"><span>Workflows</span></a>' + \"</div>\" + '<div class=\"toolSectionBody\">' + '<div class=\"toolSectionBg\"/>' + \"</div>\" + \"</div>\");\n        _.each(this.options.workflows, function (workflow) {\n            if (workflow.id !== self.options.id) {\n                var copy = new _uiMisc2.default.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function onclick() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body: \"This will copy \" + workflow.step_count + \" new steps into your workflow.\",\n                                buttons: {\n                                    Cancel: function Cancel() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function Copy() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(workflow.id, workflow.name);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\").attr(\"href\", \"#\").html(workflow.name).on(\"click\", function () {\n                    self.add_node_for_subworkflow(workflow.latest_id, workflow.name);\n                });\n                $section.find(\".toolSectionBg\").append($(\"<div/>\").addClass(\"toolTitle\").append($add).append(copy.$el));\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function copy_into_workflow(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function success(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, function (k, v) {\n                    upgrade_message += \"<li>Step \" + (parseInt(k, 10) + 1) + \": \" + self.workflow.nodes[k].name + \"<ul>\";\n                    $.each(v, function (i, vv) {\n                        upgrade_message += \"<li>\" + vv + \"</li>\";\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\"Subworkflow embedded with changes\", \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" + upgrade_message + \"</ul>\", { Continue: hide_modal });\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function beforeSubmit(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function reset() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new _workflowManager2.default(this, $(\"#canvas-container\"));\n    },\n\n    scroll_to_nodes: function scroll_to_nodes() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function _workflowLoadAjax(workflowId, options) {\n        $.ajax(_utils2.default.merge(options, {\n            url: this.urls.load_workflow,\n            data: { id: workflowId, _: \"true\" },\n            dataType: \"json\",\n            cache: false\n        }));\n    },\n\n    _moduleInitAjax: function _moduleInitAjax(node, request_data) {\n        var self = this;\n        _utils2.default.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/workflows/build_module\",\n            data: request_data,\n            success: function success(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function add_node_for_tool(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function add_node_for_subworkflow(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function add_node_for_module(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    display_file_list: function display_file_list(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist += \"<option value='\" + out_terminal + \"'>\" + out_terminal + \"</option>\";\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    showWorkflowParameters: function showWorkflowParameters() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, function (k, node) {\n            if (node.config_form && node.config_form.inputs) {\n                _utils2.default.deepeach(node.config_form.inputs, function (d) {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function (k, pja) {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, function (k, action_argument) {\n                            var arg_matches = action_argument.match(parameter_re);\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, function (k, element) {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, function (k, element) {\n                new_parameter_content += \"<div>\" + element.substring(2, element.length - 1) + \"</div>\";\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function showAttributes() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function showForm(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = cls + \"-\" + node.id;\n        var $container = $(\"#\" + cls);\n        if (content && $container.find(\"#\" + id).length == 0) {\n            var $el = $(\"<div id=\\\"\" + id + \"\\\" class=\\\"\" + cls + \"\\\"/>\");\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = _workflowIcons2.default[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new _workflowForms2.default[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\"workflow-view::initialize()\", \"Node not found in workflow.\");\n            }\n        }\n        $(\".\" + cls).hide();\n        $container.find(\"#\" + id).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function isSubType(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function prebuildNode(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(\"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" + title_text + \"</div></div>\");\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new _workflowNode2.default(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp = \"<div><img height='16' align='middle' src='\" + Galaxy.root + \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append($(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click(function (e) {\n            node.destroy();\n        }));\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f.bind(\"dragstart\", function () {\n            self.workflow.activate_node(node);\n        }).bind(\"dragend\", function () {\n            self.workflow.node_changed(this);\n            self.workflow.fit_canvas_to_nodes();\n            self.canvas_manager.draw_overview();\n        }).bind(\"dragclickonly\", function () {\n            self.workflow.activate_node(node);\n        }).bind(\"drag\", function (e, d) {\n            // Move\n            var po = $(this).offsetParent().offset();\n\n            var x = d.offsetX - po.left;\n            var y = d.offsetY - po.top;\n            $(this).css({ left: x, top: y });\n            // Redraw\n            $(this).find(\".terminal\").each(function () {\n                this.terminal.redraw();\n            });\n        });\n        return node;\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 274:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _workflowConnector = __webpack_require__(136);\n\nvar _workflowConnector2 = _interopRequireDefault(_workflowConnector);\n\nvar _toastr = __webpack_require__(65);\n\nvar Toastr = _interopRequireWildcard(_toastr);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function canLabelOutputWith(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function registerOutputLabel(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function unregisterOutputLabel(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function updateOutputLabel(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\"Workflow contains duplicate workflow output labels \" + toLabel + \". This must be fixed before it can be saved.\");\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function attemptUpdateOutputLabel(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function create_node(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function add_node(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", \"wf-node-step-\" + node.id);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function remove_node(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function remove_all() {\n        var wf = this;\n        $.each(this.nodes, function (k, v) {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function rectify_workflow_outputs() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, function (k, node) {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, function (pja_id, pja) {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, function (k, node) {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, function (pja_id, pja) {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, function (i, pja_name) {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, function (ot_id, ot) {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[\"HideDatasetAction\" + ot.name] = null;\n                                node.post_job_actions[\"HideDatasetAction\" + ot.name] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function to_simple() {\n        var nodes = {};\n        $.each(this.nodes, function (i, node) {\n            var input_connections = {};\n            $.each(node.input_terminals, function (k, t) {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, function (i, c) {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function (i, act) {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function from_simple(data, initialImport_) {\n        var initialImport = initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, function (id, step) {\n            var node = wf.app.prebuildNode(step.type, step.name, step.content_id);\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, function (name, workflow_output) {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], function (pja_id, pja) {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, function (id, step) {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, function (k, v) {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, function (l, x) {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new _workflowConnector2.default();\n                        c.connect(other_node.output_terminals[x.output_name], node.input_terminals[k]);\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, function (ot_id, ot) {\n                    if (node.post_job_actions[\"HideDatasetAction\" + ot.name] === undefined) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(\".callout.\" + ot.name);\n                        callout.find(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small.png\");\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function check_changes_in_active_form() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\").find(\"form\").submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function reload_active_node() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function clear_active_node() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        this.app.showAttributes();\n    },\n    activate_node: function activate_node(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function node_changed(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function layout() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, function (id, node) {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, function (id, node) {\n            $.each(node.input_terminals, function (j, t) {\n                $.each(t.connectors, function (k, c) {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, function (i, ids) {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort(function (a, b) {\n                return $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top;\n            });\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, function (j, id) {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, function (_, node) {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function bounds_for_all_nodes() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, function (id, node) {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function fit_canvas_to_nodes() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil(x % n / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function () {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexports.default = Workflow;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 275:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction CanvasManager(app, canvas_viewport, overview) {\n    this.app = app;\n    this.cv = canvas_viewport;\n    this.cc = this.cv.find(\"#canvas-container\");\n    this.overview = overview;\n    this.oc = overview.find(\"#overview-canvas\");\n    this.ov = overview.find(\"#overview-viewport\");\n    // Make overview box draggable\n    this.init_drag();\n}\n$.extend(CanvasManager.prototype, {\n    init_drag: function init_drag() {\n        var self = this;\n        var move = function move(x, y) {\n            x = Math.min(x, self.cv.width() / 2);\n            x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n            y = Math.min(y, self.cv.height() / 2);\n            y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n            self.cc.css({\n                left: x,\n                top: y\n            });\n            self.cv.css({\n                \"background-position-x\": x,\n                \"background-position-y\": y\n            });\n            self.update_viewport_overlay();\n        };\n        // Dragging within canvas background\n        this.cc.each(function () {\n            this.scroll_panel = new ScrollPanel(this);\n        });\n        var x_adjust;\n        var y_adjust;\n        this.cv.bind(\"dragstart\", function () {\n            var o = $(this).offset();\n            var p = self.cc.position();\n            y_adjust = p.top - o.top;\n            x_adjust = p.left - o.left;\n        }).bind(\"drag\", function (e, d) {\n            move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n        }).bind(\"dragend\", function () {\n            self.app.workflow.fit_canvas_to_nodes();\n            self.draw_overview();\n        });\n        this.overview.click(function (e) {\n            if (self.overview.hasClass(\"blockaclick\")) {\n                self.overview.removeClass(\"blockaclick\");\n            } else {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n\n                var new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2;\n\n                var new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            }\n        });\n        // Dragging for overview pane\n        this.ov.bind(\"drag\", function (e, d) {\n            var in_w = self.cc.width();\n            var in_h = self.cc.height();\n            var o_w = self.oc.width();\n            var o_h = self.oc.height();\n            var new_x_offset = d.offsetX - self.overview.offset().left;\n            var new_y_offset = d.offsetY - self.overview.offset().top;\n            move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n        }).bind(\"dragend\", function () {\n            self.overview.addClass(\"blockaclick\");\n            self.app.workflow.fit_canvas_to_nodes();\n            self.draw_overview();\n        });\n        // Dragging for overview border (resize)\n        $(\"#overview-border\").bind(\"drag\", function (e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $(this).css({\n                width: new_size,\n                height: new_size\n            });\n            self.draw_overview();\n        });\n\n        /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n        $(\"#overview-border div\").bind(\"drag\", function () {});\n    },\n    update_viewport_overlay: function update_viewport_overlay() {\n        var cc = this.cc;\n        var cv = this.cv;\n        var oc = this.oc;\n        var ov = this.ov;\n        var in_w = cc.width();\n        var in_h = cc.height();\n        var o_w = oc.width();\n        var o_h = oc.height();\n        var cc_pos = cc.position();\n        ov.css({\n            left: -(cc_pos.left / in_w * o_w),\n            top: -(cc_pos.top / in_h * o_h),\n            // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n            width: cv.width() / in_w * o_w - 2,\n            height: cv.height() / in_h * o_h - 2\n        });\n    },\n    draw_overview: function draw_overview() {\n        var canvas_el = $(\"#overview-canvas\");\n\n        var size = canvas_el.parent().parent().width();\n\n        var c = canvas_el.get(0).getContext(\"2d\");\n        var in_w = $(\"#canvas-container\").width();\n        var in_h = $(\"#canvas-container\").height();\n        var o_h;\n        var shift_h;\n        var o_w;\n        var shift_w;\n        // Fit canvas into overview area\n        var cv_w = this.cv.width();\n        var cv_h = this.cv.height();\n        if (in_w < cv_w && in_h < cv_h) {\n            // Canvas is smaller than viewport\n            o_w = in_w / cv_w * size;\n            shift_w = (size - o_w) / 2;\n            o_h = in_h / cv_h * size;\n            shift_h = (size - o_h) / 2;\n        } else if (in_w < in_h) {\n            // Taller than wide\n            shift_h = 0;\n            o_h = size;\n            o_w = Math.ceil(o_h * in_w / in_h);\n            shift_w = (size - o_w) / 2;\n        } else {\n            // Wider than tall\n            o_w = size;\n            shift_w = 0;\n            o_h = Math.ceil(o_w * in_h / in_w);\n            shift_h = (size - o_h) / 2;\n        }\n        canvas_el.parent().css({\n            left: shift_w,\n            top: shift_h,\n            width: o_w,\n            height: o_h\n        });\n        canvas_el.attr(\"width\", o_w);\n        canvas_el.attr(\"height\", o_h);\n        // Draw overview\n        $.each(this.app.workflow.nodes, function (id, node) {\n            c.fillStyle = \"#D2C099\";\n            c.strokeStyle = \"#D8B365\";\n            c.lineWidth = 1;\n            var node_element = $(node.element);\n            var position = node_element.position();\n            var x = position.left / in_w * o_w;\n            var y = position.top / in_h * o_h;\n            var w = node_element.width() / in_w * o_w;\n            var h = node_element.height() / in_h * o_h;\n            if (node.errors) {\n                c.fillStyle = \"#FFCCCC\";\n                c.strokeStyle = \"#AA6666\";\n            } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0) {\n                c.fillStyle = \"#E8A92D\";\n                c.strokeStyle = \"#E8A92D\";\n            }\n            c.fillRect(x, y, w, h);\n            c.strokeRect(x, y, w, h);\n        });\n        this.update_viewport_overlay();\n    }\n});\n\n// FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\nfunction ScrollPanel(panel) {\n    this.panel = panel;\n}\n$.extend(ScrollPanel.prototype, {\n    test: function test(e, onmove) {\n        clearTimeout(this.timeout);\n        var x = e.pageX;\n        var y = e.pageY;\n\n        var // Panel size and position\n        panel = $(this.panel);\n\n        var panel_pos = panel.position();\n        var panel_w = panel.width();\n        var panel_h = panel.height();\n\n        var // Viewport size and offset\n        viewport = panel.parent();\n\n        var viewport_w = viewport.width();\n        var viewport_h = viewport.height();\n        var viewport_offset = viewport.offset();\n\n        var // Edges of viewport (in page coordinates)\n        min_x = viewport_offset.left;\n\n        var min_y = viewport_offset.top;\n        var max_x = min_x + viewport.width();\n        var max_y = min_y + viewport.height();\n\n        var // Legal panel range\n        p_min_x = -(panel_w - viewport_w / 2);\n\n        var p_min_y = -(panel_h - viewport_h / 2);\n        var p_max_x = viewport_w / 2;\n        var p_max_y = viewport_h / 2;\n\n        var // Did the panel move?\n        moved = false;\n\n        var // Constants\n        close_dist = 5;\n\n        var nudge = 23;\n        if (x - close_dist < min_x) {\n            if (panel_pos.left < p_max_x) {\n                var t = Math.min(nudge, p_max_x - panel_pos.left);\n                panel.css(\"left\", panel_pos.left + t);\n                moved = true;\n            }\n        } else if (x + close_dist > max_x) {\n            if (panel_pos.left > p_min_x) {\n                var t = Math.min(nudge, panel_pos.left - p_min_x);\n                panel.css(\"left\", panel_pos.left - t);\n                moved = true;\n            }\n        } else if (y - close_dist < min_y) {\n            if (panel_pos.top < p_max_y) {\n                var t = Math.min(nudge, p_max_y - panel_pos.top);\n                panel.css(\"top\", panel_pos.top + t);\n                moved = true;\n            }\n        } else if (y + close_dist > max_y) {\n            if (panel_pos.top > p_min_y) {\n                var t = Math.min(nudge, panel_pos.top - p_min_x);\n                panel.css(\"top\", panel_pos.top - t + \"px\");\n                moved = true;\n            }\n        }\n        if (moved) {\n            // Keep moving even if mouse doesn't move\n            onmove();\n            var panel = this;\n            this.timeout = setTimeout(function () {\n                panel.test(e, onmove);\n            }, 50);\n        }\n    },\n    stop: function stop(e, ui) {\n        clearTimeout(this.timeout);\n    }\n});\nexports.default = CanvasManager;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 276:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _workflowViewNode = __webpack_require__(277);\n\nvar _workflowViewNode2 = _interopRequireDefault(_workflowViewNode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Node = Backbone.Model.extend({\n    initialize: function initialize(app, attr) {\n        this.app = app;\n        this.element = attr.element;\n        this.input_terminals = {};\n        this.output_terminals = {};\n        this.errors = {};\n        this.workflow_outputs = [];\n    },\n    getWorkflowOutput: function getWorkflowOutput(outputName) {\n        return _.findWhere(this.workflow_outputs, {\n            output_name: outputName\n        });\n    },\n    isWorkflowOutput: function isWorkflowOutput(outputName) {\n        return this.getWorkflowOutput(outputName) != undefined;\n    },\n    removeWorkflowOutput: function removeWorkflowOutput(outputName) {\n        while (this.isWorkflowOutput(outputName)) {\n            this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n        }\n    },\n    addWorkflowOutput: function addWorkflowOutput(outputName, label) {\n        if (!this.isWorkflowOutput(outputName)) {\n            var output = { output_name: outputName };\n            if (label) {\n                output[\"label\"] = label;\n            }\n            this.workflow_outputs.push(output);\n            return true;\n        }\n        return false;\n    },\n    labelWorkflowOutput: function labelWorkflowOutput(outputName, label) {\n        var changed = false;\n        var oldLabel = null;\n        if (this.isWorkflowOutput(outputName)) {\n            var workflowOutput = this.getWorkflowOutput(outputName);\n            oldLabel = workflowOutput[\"label\"];\n            workflowOutput[\"label\"] = label;\n            changed = oldLabel != label;\n        } else {\n            changed = this.addWorkflowOutput(outputName, label);\n        }\n        if (changed) {\n            this.app.workflow.updateOutputLabel(oldLabel, label);\n            this.markChanged();\n            this.nodeView.redrawWorkflowOutputs();\n        }\n        return changed;\n    },\n    connectedOutputTerminals: function connectedOutputTerminals() {\n        return this._connectedTerminals(this.output_terminals);\n    },\n    _connectedTerminals: function _connectedTerminals(terminals) {\n        var connectedTerminals = [];\n        $.each(terminals, function (_, t) {\n            if (t.connectors.length > 0) {\n                connectedTerminals.push(t);\n            }\n        });\n        return connectedTerminals;\n    },\n    hasConnectedOutputTerminals: function hasConnectedOutputTerminals() {\n        // return this.connectedOutputTerminals().length > 0; <- optimized this\n        var outputTerminals = this.output_terminals;\n        for (var outputName in outputTerminals) {\n            if (outputTerminals[outputName].connectors.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    connectedMappedInputTerminals: function connectedMappedInputTerminals() {\n        return this._connectedMappedTerminals(this.input_terminals);\n    },\n    hasConnectedMappedInputTerminals: function hasConnectedMappedInputTerminals() {\n        // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n        var inputTerminals = this.input_terminals;\n        for (var inputName in inputTerminals) {\n            var inputTerminal = inputTerminals[inputName];\n            if (inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver()) {\n                return true;\n            }\n        }\n        return false;\n    },\n    _connectedMappedTerminals: function _connectedMappedTerminals(terminals) {\n        var mapped_outputs = [];\n        $.each(terminals, function (_, t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                if (t.connectors.length > 0) {\n                    mapped_outputs.push(t);\n                }\n            }\n        });\n        return mapped_outputs;\n    },\n    mappedInputTerminals: function mappedInputTerminals() {\n        return this._mappedTerminals(this.input_terminals);\n    },\n    _mappedTerminals: function _mappedTerminals(terminals) {\n        var mappedTerminals = [];\n        $.each(terminals, function (_, t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                mappedTerminals.push(t);\n            }\n        });\n        return mappedTerminals;\n    },\n    hasMappedOverInputTerminals: function hasMappedOverInputTerminals() {\n        var found = false;\n        _.each(this.input_terminals, function (t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                found = true;\n            }\n        });\n        return found;\n    },\n    redraw: function redraw() {\n        $.each(this.input_terminals, function (_, t) {\n            t.redraw();\n        });\n        $.each(this.output_terminals, function (_, t) {\n            t.redraw();\n        });\n    },\n    destroy: function destroy() {\n        $.each(this.input_terminals, function (k, t) {\n            t.destroy();\n        });\n        $.each(this.output_terminals, function (k, t) {\n            t.destroy();\n        });\n        this.app.workflow.remove_node(this);\n        $(this.element).remove();\n    },\n    make_active: function make_active() {\n        $(this.element).addClass(\"toolForm-active\");\n    },\n    make_inactive: function make_inactive() {\n        // Keep inactive nodes stacked from most to least recently active\n        // by moving element to the end of parent's node list\n        var element = this.element.get(0);\n        (function (p) {\n            p.removeChild(element);\n            p.appendChild(element);\n        })(element.parentNode);\n        // Remove active class\n        $(element).removeClass(\"toolForm-active\");\n    },\n    init_field_data: function init_field_data(data) {\n        if (data.type) {\n            this.type = data.type;\n        }\n        this.name = data.name;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.tool_state = data.tool_state;\n        this.errors = data.errors;\n        this.tooltip = data.tooltip ? data.tooltip : \"\";\n        this.annotation = data.annotation;\n        this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n        this.label = data.label;\n        this.uuid = data.uuid;\n        this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n        var node = this;\n        var nodeView = new _workflowViewNode2.default({\n            el: this.element[0],\n            node: node\n        });\n        node.nodeView = nodeView;\n        $.each(data.data_inputs, function (i, input) {\n            nodeView.addDataInput(input);\n        });\n        if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n            nodeView.addRule();\n        }\n        $.each(data.data_outputs, function (i, output) {\n            nodeView.addDataOutput(output);\n        });\n        nodeView.render();\n        this.app.workflow.node_changed(this, true);\n    },\n    update_field_data: function update_field_data(data) {\n        var node = this;\n        var nodeView = node.nodeView;\n        // remove unused output views and remove pre-existing output views from data.data_outputs,\n        // so that these are not added twice.\n        var unused_outputs = [];\n        // nodeView.outputViews contains pre-existing outputs,\n        // while data.data_output contains what should be displayed.\n        // Now we gather the unused outputs\n        $.each(nodeView.outputViews, function (i, output_view) {\n            var cur_name = output_view.output.name;\n            var data_names = data.data_outputs;\n            var cur_name_in_data_outputs = false;\n            _.each(data_names, function (data_name) {\n                if (data_name.name == cur_name) {\n                    cur_name_in_data_outputs = true;\n                }\n            });\n            if (cur_name_in_data_outputs === false) {\n                unused_outputs.push(cur_name);\n            }\n        });\n\n        // Remove the unused outputs\n        _.each(unused_outputs, function (unused_output) {\n            _.each(nodeView.outputViews[unused_output].terminalElement.terminal.connectors, function (x) {\n                if (x) {\n                    x.destroy(); // Removes the noodle connectors\n                }\n            });\n            nodeView.outputViews[unused_output].remove(); // removes the rendered output\n            delete nodeView.outputViews[unused_output]; // removes the reference to the output\n            delete node.output_terminals[unused_output]; // removes the output terminal\n        });\n        $.each(node.workflow_outputs, function (i, wf_output) {\n            if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n            }\n        });\n        $.each(data.data_outputs, function (i, output) {\n            if (!nodeView.outputViews[output.name]) {\n                nodeView.addDataOutput(output); // add data output if it does not yet exist\n            } else {\n                // the output already exists, but the output formats may have changed.\n                // Therefore we update the datatypes and destroy invalid connections.\n                node.output_terminals[output.name].datatypes = output.extensions;\n                node.output_terminals[output.name].destroyInvalidConnections();\n            }\n        });\n        this.tool_state = data.tool_state;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.errors = data.errors;\n        this.annotation = data[\"annotation\"];\n        this.label = data.label;\n        if (\"post_job_actions\" in data) {\n            // Won't be present in response for data inputs\n            var pja_in = data.post_job_actions;\n            this.post_job_actions = pja_in ? pja_in : {};\n        }\n        node.nodeView.renderToolErrors();\n        // Update input rows\n        var old_body = nodeView.$(\"div.inputs\");\n        var new_body = nodeView.newInputsDiv();\n        var newTerminalViews = {};\n        _.each(data.data_inputs, function (input) {\n            var terminalView = node.nodeView.addDataInput(input, new_body);\n            newTerminalViews[input.name] = terminalView;\n        });\n        // Cleanup any leftover terminals\n        _.each(_.difference(_.values(nodeView.terminalViews), _.values(newTerminalViews)), function (unusedView) {\n            unusedView.el.terminal.destroy();\n        });\n        nodeView.terminalViews = newTerminalViews;\n        node.nodeView.render();\n        // In general workflow editor assumes tool outputs don't change in # or\n        // type (not really valid right?) but adding special logic here for\n        // data collection input parameters that can have their collection\n        // change.\n        if (data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[0]) {\n            nodeView.updateDataOutput(data.data_outputs[0]);\n        }\n        old_body.replaceWith(new_body);\n        if (\"workflow_outputs\" in data) {\n            // Won't be present in response for data inputs\n            this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n        }\n        // If active, reactivate with new config_form\n        this.markChanged();\n        this.redraw();\n    },\n    error: function error(text) {\n        var b = $(this.element).find(\".toolFormBody\");\n        b.find(\"div\").remove();\n        var tmp = \"<div style='color: red; text-style: italic;'>\" + text + \"</div>\";\n        this.config_form = tmp;\n        b.html(tmp);\n        this.app.workflow.node_changed(this);\n    },\n    markChanged: function markChanged() {\n        this.app.workflow.node_changed(this);\n    }\n});\nexports.default = Node;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 277:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _workflowViewTerminals = __webpack_require__(278);\n\nvar _workflowViewTerminals2 = _interopRequireDefault(_workflowViewTerminals);\n\nvar _workflowViewData = __webpack_require__(280);\n\nvar _workflowViewData2 = _interopRequireDefault(_workflowViewData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        this.node = options.node;\n        this.output_width = Math.max(150, this.$el.width());\n        this.tool_body = this.$el.find(\".toolFormBody\");\n        this.tool_body.find(\"div\").remove();\n        this.newInputsDiv().appendTo(this.tool_body);\n        this.terminalViews = {};\n        this.outputViews = {};\n    },\n\n    render: function render() {\n        this.renderToolLabel();\n        this.renderToolErrors();\n        this.$el.css(\"width\", Math.min(250, Math.max(this.$el.width(), this.output_width)));\n    },\n\n    renderToolLabel: function renderToolLabel() {\n        this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n    },\n\n    renderToolErrors: function renderToolErrors() {\n        this.node.errors ? this.$el.addClass(\"tool-node-error\") : this.$el.removeClass(\"tool-node-error\");\n    },\n\n    newInputsDiv: function newInputsDiv() {\n        return $(\"<div/>\").addClass(\"inputs\");\n    },\n\n    updateMaxWidth: function updateMaxWidth(newWidth) {\n        this.output_width = Math.max(this.output_width, newWidth);\n    },\n\n    addRule: function addRule() {\n        this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n    },\n\n    addDataInput: function addDataInput(input, body) {\n        var skipResize = true;\n        if (!body) {\n            body = this.$(\".inputs\");\n            // initial addition to node - resize input to help calculate node\n            // width.\n            skipResize = false;\n        }\n        var terminalView = this.terminalViews[input.name];\n        var terminalViewClass = input.input_type == \"dataset_collection\" ? _workflowViewTerminals2.default.InputCollectionTerminalView : _workflowViewTerminals2.default.InputTerminalView;\n        if (terminalView && !(terminalView instanceof terminalViewClass)) {\n            terminalView.el.terminal.destroy();\n            terminalView = null;\n        }\n        if (!terminalView) {\n            terminalView = new terminalViewClass({\n                node: this.node,\n                input: input\n            });\n        } else {\n            var terminal = terminalView.el.terminal;\n            terminal.update(input);\n            terminal.destroyInvalidConnections();\n        }\n        this.terminalViews[input.name] = terminalView;\n        var terminalElement = terminalView.el;\n        var inputView = new _workflowViewData2.default.DataInputView({\n            terminalElement: terminalElement,\n            input: input,\n            nodeView: this,\n            skipResize: skipResize\n        });\n        var ib = inputView.$el;\n        body.append(ib.prepend(terminalView.terminalElements()));\n        return terminalView;\n    },\n\n    addDataOutput: function addDataOutput(output) {\n        var terminalViewClass = output.collection ? _workflowViewTerminals2.default.OutputCollectionTerminalView : _workflowViewTerminals2.default.OutputTerminalView;\n        var terminalView = new terminalViewClass({\n            node: this.node,\n            output: output\n        });\n        var outputView = new _workflowViewData2.default.DataOutputView({\n            output: output,\n            terminalElement: terminalView.el,\n            nodeView: this\n        });\n        this.outputViews[output.name] = outputView;\n        this.tool_body.append(outputView.$el.append(terminalView.terminalElements()));\n    },\n\n    redrawWorkflowOutputs: function redrawWorkflowOutputs() {\n        _.each(this.outputViews, function (outputView) {\n            outputView.redrawWorkflowOutput();\n        });\n    },\n\n    updateDataOutput: function updateDataOutput(output) {\n        var outputTerminal = this.node.output_terminals[output.name];\n        outputTerminal.update(output);\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _workflowTerminals = __webpack_require__(279);\n\nvar _workflowTerminals2 = _interopRequireDefault(_workflowTerminals);\n\nvar _workflowConnector = __webpack_require__(136);\n\nvar _workflowConnector2 = _interopRequireDefault(_workflowConnector);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar TerminalMappingView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"fa-icon-button fa fa-folder-o\",\n    initialize: function initialize(options) {\n        var mapText = \"Run tool in parallel over collection\";\n        this.$el.tooltip({ delay: 500, title: mapText });\n        this.model.bind(\"change\", _.bind(this.render, this));\n    },\n    render: function render() {\n        if (this.model.mapOver.isCollection) {\n            this.$el.show();\n        } else {\n            this.$el.hide();\n        }\n    }\n});\n\nvar InputTerminalMappingView = TerminalMappingView.extend({\n    events: {\n        click: \"onClick\",\n        mouseenter: \"onMouseEnter\",\n        mouseleave: \"onMouseLeave\"\n    },\n    onMouseEnter: function onMouseEnter(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            this.$el.css(\"color\", \"red\");\n        }\n    },\n    onMouseLeave: function onMouseLeave(e) {\n        this.$el.css(\"color\", \"black\");\n    },\n    onClick: function onClick(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            // TODO: Consider prompting...\n            model.terminal.resetMapping();\n        }\n    }\n});\n\nvar TerminalView = Backbone.View.extend({\n    setupMappingView: function setupMappingView(terminal) {\n        var terminalMapping = new this.terminalMappingClass({\n            terminal: terminal\n        });\n        var terminalMappingView = new this.terminalMappingViewClass({\n            model: terminalMapping\n        });\n        terminalMappingView.render();\n        terminal.terminalMappingView = terminalMappingView;\n        this.terminalMappingView = terminalMappingView;\n    },\n    terminalElements: function terminalElements() {\n        if (this.terminalMappingView) {\n            return [this.terminalMappingView.el, this.el];\n        } else {\n            return [this.el];\n        }\n    }\n});\n\nvar BaseInputTerminalView = TerminalView.extend({\n    className: \"terminal input-terminal\",\n    initialize: function initialize(options) {\n        var node = options.node;\n        var input = options.input;\n        var name = input.name;\n        var terminal = this.terminalForInput(input);\n        if (!terminal.multiple) {\n            this.setupMappingView(terminal);\n        }\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.input_terminals[name] = terminal;\n    },\n    events: {\n        dropinit: \"onDropInit\",\n        dropstart: \"onDropStart\",\n        dropend: \"onDropEnd\",\n        drop: \"onDrop\",\n        hover: \"onHover\"\n    },\n    onDropInit: function onDropInit(e, d) {\n        var terminal = this.el.terminal;\n        // Accept a dragable if it is an output terminal and has a\n        // compatible type\n        return $(d.drag).hasClass(\"output-terminal\") && terminal.canAccept(d.drag.terminal);\n    },\n    onDropStart: function onDropStart(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n        }\n    },\n    onDropEnd: function onDropEnd(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n        }\n    },\n    onDrop: function onDrop(e, d) {\n        var terminal = this.el.terminal;\n        new _workflowConnector2.default(d.drag.terminal, terminal).redraw();\n    },\n    onHover: function onHover() {\n        var element = this.el;\n        var terminal = element.terminal;\n        // If connected, create a popup to allow disconnection\n        if (terminal.connectors.length > 0) {\n            // Create callout\n            var t = $(\"<div class='callout'></div>\").css({ display: \"none\" }).appendTo(\"body\").append($(\"<div class='button'></div>\").append($(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click(function () {\n                $.each(terminal.connectors, function (_, x) {\n                    if (x) {\n                        x.destroy();\n                    }\n                });\n                t.remove();\n            }))).bind(\"mouseleave\", function () {\n                $(this).remove();\n            });\n            // Position it and show\n            t.css({\n                top: $(element).offset().top - 2,\n                left: $(element).offset().left - t.width(),\n                \"padding-right\": $(element).width()\n            }).show();\n        }\n    }\n});\n\nvar InputTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function terminalForInput(input) {\n        return new _workflowTerminals2.default.InputTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar InputCollectionTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function terminalForInput(input) {\n        return new _workflowTerminals2.default.InputCollectionTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar BaseOutputTerminalView = TerminalView.extend({\n    className: \"terminal output-terminal\",\n    initialize: function initialize(options) {\n        var node = options.node;\n        var output = options.output;\n        var name = output.name;\n        var terminal = this.terminalForOutput(output);\n        this.setupMappingView(terminal);\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.output_terminals[name] = terminal;\n    },\n    events: {\n        drag: \"onDrag\",\n        dragstart: \"onDragStart\",\n        dragend: \"onDragEnd\"\n    },\n    onDrag: function onDrag(e, d) {\n        var onmove = function onmove() {\n            var po = $(d.proxy).offsetParent().offset();\n\n            var x = d.offsetX - po.left;\n            var y = d.offsetY - po.top;\n            $(d.proxy).css({ left: x, top: y });\n            d.proxy.terminal.redraw();\n            // FIXME: global\n            window.workflow_globals.canvas_manager.update_viewport_overlay();\n        };\n        onmove();\n        $(\"#canvas-container\").get(0).scroll_panel.test(e, onmove);\n    },\n    onDragStart: function onDragStart(e, d) {\n        $(d.available).addClass(\"input-terminal-active\");\n        // Save PJAs in the case of change datatype actions.\n        window.workflow_globals.workflow.check_changes_in_active_form();\n        // Drag proxy div\n        var h = $('<div class=\"drag-terminal\" style=\"position: absolute;\"></div>').appendTo(\"#canvas-container\").get(0);\n        // Terminal and connection to display noodle while dragging\n        h.terminal = new _workflowTerminals2.default.OutputTerminal({ element: h });\n        var c = new _workflowConnector2.default();\n        c.dragging = true;\n        c.connect(this.el.terminal, h.terminal);\n        return h;\n    },\n    onDragEnd: function onDragEnd(e, d) {\n        var connector = d.proxy.terminal.connectors[0];\n        // check_changes_in_active_form may change the state and cause a\n        // the connection to have already been destroyed. There must be better\n        // ways to handle this but the following check fixes some serious GUI\n        // bugs for now.\n        if (connector) {\n            connector.destroy();\n        }\n        $(d.proxy).remove();\n        $(d.available).removeClass(\"input-terminal-active\");\n        $(\"#canvas-container\").get(0).scroll_panel.stop();\n    }\n});\n\nvar OutputTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function terminalForOutput(output) {\n        var type = output.extensions;\n        var terminal = new _workflowTerminals2.default.OutputTerminal({\n            element: this.el,\n            datatypes: type\n        });\n        return terminal;\n    }\n});\n\nvar OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: _workflowTerminals2.default.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function terminalForOutput(output) {\n        var collection_type = output.collection_type;\n        var collection_type_source = output.collection_type_source;\n        var terminal = new _workflowTerminals2.default.OutputCollectionTerminal({\n            element: this.el,\n            collection_type: collection_type,\n            collection_type_source: collection_type_source,\n            datatypes: output.extensions\n        });\n        return terminal;\n    }\n});\n\nexports.default = {\n    InputTerminalView: InputTerminalView,\n    OutputTerminalView: OutputTerminalView,\n    InputCollectionTerminalView: InputCollectionTerminalView,\n    OutputCollectionTerminalView: OutputCollectionTerminalView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\nfunction CollectionTypeDescription(collectionType) {\n    this.collectionType = collectionType;\n    this.isCollection = true;\n    this.rank = collectionType.split(\":\").length;\n}\n\nvar NULL_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: false,\n    canMatch: function canMatch(other) {\n        return false;\n    },\n    canMapOver: function canMapOver(other) {\n        return false;\n    },\n    toString: function toString() {\n        return \"NullCollectionType[]\";\n    },\n    append: function append(otherCollectionType) {\n        return otherCollectionType;\n    },\n    equal: function equal(other) {\n        return other === this;\n    }\n};\n\nvar ANY_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: true,\n    canMatch: function canMatch(other) {\n        return NULL_COLLECTION_TYPE_DESCRIPTION !== other;\n    },\n    canMapOver: function canMapOver(other) {\n        return false;\n    },\n    toString: function toString() {\n        return \"AnyCollectionType[]\";\n    },\n    append: function append(otherCollectionType) {\n        throw \"Cannot append to ANY_COLLECTION_TYPE_DESCRIPTION\";\n    },\n    equal: function equal(other) {\n        return other === this;\n    }\n};\n\n$.extend(CollectionTypeDescription.prototype, {\n    append: function append(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return this;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return otherCollectionType;\n        }\n        return new CollectionTypeDescription(this.collectionType + \":\" + otherCollectionTypeDescription.collectionType);\n    },\n    canMatch: function canMatch(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return true;\n        }\n        return otherCollectionTypeDescription.collectionType == this.collectionType;\n    },\n    canMapOver: function canMapOver(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (this.rank <= otherCollectionTypeDescription.rank) {\n            // Cannot map over self...\n            return false;\n        }\n        var requiredSuffix = otherCollectionTypeDescription.collectionType;\n        return this._endsWith(this.collectionType, requiredSuffix);\n    },\n    effectiveMapOver: function effectiveMapOver(otherCollectionTypeDescription) {\n        var otherCollectionType = otherCollectionTypeDescription.collectionType;\n        var effectiveCollectionType = this.collectionType.substring(0, this.collectionType.length - otherCollectionType.length - 1);\n        return new CollectionTypeDescription(effectiveCollectionType);\n    },\n    equal: function equal(otherCollectionTypeDescription) {\n        return otherCollectionTypeDescription.collectionType == this.collectionType;\n    },\n    toString: function toString() {\n        return \"CollectionType[\" + this.collectionType + \"]\";\n    },\n    _endsWith: function _endsWith(str, suffix) {\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    }\n});\n\nvar TerminalMapping = Backbone.Model.extend({\n    initialize: function initialize(attr) {\n        this.mapOver = attr.mapOver || NULL_COLLECTION_TYPE_DESCRIPTION;\n        this.terminal = attr.terminal;\n        this.terminal.terminalMapping = this;\n    },\n    disableMapOver: function disableMapOver() {\n        this.setMapOver(NULL_COLLECTION_TYPE_DESCRIPTION);\n    },\n    setMapOver: function setMapOver(collectionTypeDescription) {\n        // TODO: Can I use \"attributes\" or something to auto trigger \"change\"\n        // event?\n        this.mapOver = collectionTypeDescription;\n        this.trigger(\"change\");\n    }\n});\n\nvar Terminal = Backbone.Model.extend({\n    initialize: function initialize(attr) {\n        this.element = attr.element;\n        this.connectors = [];\n    },\n    connect: function connect(connector) {\n        this.connectors.push(connector);\n        if (this.node) {\n            this.node.markChanged();\n        }\n    },\n    disconnect: function disconnect(connector) {\n        this.connectors.splice($.inArray(connector, this.connectors), 1);\n        if (this.node) {\n            this.node.markChanged();\n            this.resetMappingIfNeeded();\n        }\n    },\n    redraw: function redraw() {\n        $.each(this.connectors, function (_, c) {\n            c.redraw();\n        });\n    },\n    destroy: function destroy() {\n        $.each(this.connectors.slice(), function (_, c) {\n            c.destroy();\n        });\n    },\n    destroyInvalidConnections: function destroyInvalidConnections() {\n        _.each(this.connectors, function (connector) {\n            connector && connector.destroyIfInvalid();\n        });\n    },\n    setMapOver: function setMapOver(val) {\n        if (this.multiple) {\n            return; // Cannot set this to be multirun...\n        }\n\n        if (!this.mapOver().equal(val)) {\n            this.terminalMapping.setMapOver(val);\n            _.each(this.node.output_terminals, function (outputTerminal) {\n                outputTerminal.setMapOver(val);\n            });\n        }\n    },\n    mapOver: function mapOver() {\n        if (!this.terminalMapping) {\n            return NULL_COLLECTION_TYPE_DESCRIPTION;\n        } else {\n            return this.terminalMapping.mapOver;\n        }\n    },\n    isMappedOver: function isMappedOver() {\n        return this.terminalMapping && this.terminalMapping.mapOver.isCollection;\n    },\n    resetMapping: function resetMapping() {\n        this.terminalMapping.disableMapOver();\n    },\n\n    resetMappingIfNeeded: function resetMappingIfNeeded() {} // Subclasses should override this...\n});\n\nvar OutputTerminal = Terminal.extend({\n    initialize: function initialize(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n    },\n\n    resetMappingIfNeeded: function resetMappingIfNeeded() {\n        // If inputs were only mapped over to preserve\n        // an output just disconnected reset these...\n        if (!this.node.hasConnectedOutputTerminals() && !this.node.hasConnectedMappedInputTerminals()) {\n            _.each(this.node.mappedInputTerminals(), function (mappedInput) {\n                mappedInput.resetMappingIfNeeded();\n            });\n        }\n\n        var noMappedInputs = !this.node.hasMappedOverInputTerminals();\n        if (noMappedInputs) {\n            this.resetMapping();\n        }\n    },\n\n    resetMapping: function resetMapping() {\n        this.terminalMapping.disableMapOver();\n        _.each(this.connectors, function (connector) {\n            var connectedInput = connector.handle2;\n            if (connectedInput) {\n                // Not exactly right because this is still connected.\n                // Either rewrite resetMappingIfNeeded or disconnect\n                // and reconnect if valid.\n                connectedInput.resetMappingIfNeeded();\n                connector.destroyIfInvalid();\n            }\n        });\n    }\n});\n\nvar BaseInputTerminal = Terminal.extend({\n    initialize: function initialize(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.update(attr.input); // subclasses should implement this...\n    },\n    canAccept: function canAccept(other) {\n        if (this._inputFilled()) {\n            return false;\n        } else {\n            return this.attachable(other);\n        }\n    },\n    resetMappingIfNeeded: function resetMappingIfNeeded() {\n        var mapOver = this.mapOver();\n        if (!mapOver.isCollection) {\n            return;\n        }\n        // No output terminals are counting on this being mapped\n        // over if connected inputs are still mapped over or if none\n        // of the outputs are connected...\n        var reset = this.node.hasConnectedMappedInputTerminals() || !this.node.hasConnectedOutputTerminals();\n        if (reset) {\n            this.resetMapping();\n        }\n    },\n    resetMapping: function resetMapping() {\n        this.terminalMapping.disableMapOver();\n        if (!this.node.hasMappedOverInputTerminals()) {\n            _.each(this.node.output_terminals, function (terminal) {\n                // This shouldn't be called if there are mapped over\n                // outputs.\n                terminal.resetMapping();\n            });\n        }\n    },\n    connected: function connected() {\n        return this.connectors.length !== 0;\n    },\n    _inputFilled: function _inputFilled() {\n        var inputFilled;\n        if (!this.connected()) {\n            inputFilled = false;\n        } else {\n            if (this.multiple) {\n                if (this._collectionAttached()) {\n                    // Can only attach one collection to multiple input\n                    // data parameter.\n                    inputsFilled = true;\n                } else {\n                    inputFilled = false;\n                }\n            } else {\n                inputFilled = true;\n            }\n        }\n        return inputFilled;\n    },\n    _collectionAttached: function _collectionAttached() {\n        if (!this.connected()) {\n            return false;\n        } else {\n            var firstOutput = this.connectors[0].handle1;\n            if (!firstOutput) {\n                return false;\n            } else {\n                if (firstOutput.isCollection || firstOutput.isMappedOver() || firstOutput.datatypes.indexOf(\"input_collection\") > 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }\n    },\n    _mappingConstraints: function _mappingConstraints() {\n        // If this is a connected terminal, return list of collection types\n        // other terminals connected to node are constraining mapping to.\n        if (!this.node) {\n            return []; // No node - completely unconstrained\n        }\n        var mapOver = this.mapOver();\n        if (mapOver.isCollection) {\n            return [mapOver];\n        }\n\n        var constraints = [];\n        if (!this.node.hasConnectedOutputTerminals()) {\n            _.each(this.node.connectedMappedInputTerminals(), function (inputTerminal) {\n                constraints.push(inputTerminal.mapOver());\n            });\n        } else {\n            // All outputs should have same mapOver status - least specific.\n            constraints.push(_.first(_.values(this.node.output_terminals)).mapOver());\n        }\n        return constraints;\n    },\n    _producesAcceptableDatatype: function _producesAcceptableDatatype(other) {\n        // other is a non-collection output...\n        for (var t in this.datatypes) {\n            var thisDatatype = this.datatypes[t];\n            if (thisDatatype == \"input\") {\n                return true;\n            }\n            var cat_outputs = new Array();\n            cat_outputs = cat_outputs.concat(other.datatypes);\n            if (other.node.post_job_actions) {\n                for (var pja_i in other.node.post_job_actions) {\n                    var pja = other.node.post_job_actions[pja_i];\n                    if (pja.action_type == \"ChangeDatatypeAction\" && (pja.output_name == \"\" || pja.output_name == other.name) && pja.action_arguments) {\n                        cat_outputs.push(pja.action_arguments[\"newtype\"]);\n                    }\n                }\n            }\n            // FIXME: No idea what to do about case when datatype is 'input'\n            for (var other_datatype_i in cat_outputs) {\n                var other_datatype = cat_outputs[other_datatype_i];\n                if (other_datatype == \"input\" || other_datatype == \"_sniff_\" || other_datatype == \"input_collection\" || window.workflow_globals.app.isSubType(cat_outputs[other_datatype_i], thisDatatype)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    _otherCollectionType: function _otherCollectionType(other) {\n        var otherCollectionType = NULL_COLLECTION_TYPE_DESCRIPTION;\n        if (other.isCollection) {\n            otherCollectionType = other.collectionType;\n        }\n        var otherMapOver = other.mapOver();\n        if (otherMapOver.isCollection) {\n            otherCollectionType = otherMapOver.append(otherCollectionType);\n        }\n        return otherCollectionType;\n    }\n});\n\nvar InputTerminal = BaseInputTerminal.extend({\n    update: function update(input) {\n        this.datatypes = input.extensions;\n        this.multiple = input.multiple;\n        this.collection = false;\n    },\n    connect: function connect(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other_output = connector.handle1;\n        if (!other_output) {\n            return;\n        }\n        var otherCollectionType = this._otherCollectionType(other_output);\n        if (otherCollectionType.isCollection) {\n            this.setMapOver(otherCollectionType);\n        }\n    },\n    attachable: function attachable(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        var thisMapOver = this.mapOver();\n        if (otherCollectionType.isCollection) {\n            if (this.multiple) {\n                if (this.connected() && !this._collectionAttached()) {\n                    // if single inputs attached, cannot also attach a\n                    // collection (yet...)\n                    return false;\n                }\n                if (otherCollectionType.rank == 1) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    // TODO: Allow subcollection mapping over this as if it were\n                    // a list collection input.\n                    return false;\n                }\n            }\n            if (thisMapOver.isCollection && thisMapOver.canMatch(otherCollectionType)) {\n                return this._producesAcceptableDatatype(other);\n            } else {\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (mappingConstraints.every(_.bind(otherCollectionType.canMatch, otherCollectionType))) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    return false;\n                }\n            }\n        } else if (thisMapOver.isCollection) {\n            // Attempting to match a non-collection output to an\n            // explicitly collection input.\n            return false;\n        }\n        return this._producesAcceptableDatatype(other);\n    }\n});\n\nvar InputCollectionTerminal = BaseInputTerminal.extend({\n    update: function update(input) {\n        this.multiple = false;\n        this.collection = true;\n        this.datatypes = input.extensions;\n        var collectionTypes = [];\n        if (input.collection_types) {\n            _.each(input.collection_types, function (collectionType) {\n                collectionTypes.push(new CollectionTypeDescription(collectionType));\n            });\n        } else {\n            collectionTypes.push(ANY_COLLECTION_TYPE_DESCRIPTION);\n        }\n        this.collectionTypes = collectionTypes;\n    },\n    connect: function connect(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other = connector.handle1;\n        if (!other) {\n            return;\n        }\n\n        var effectiveMapOver = this._effectiveMapOver(other);\n        this.setMapOver(effectiveMapOver);\n    },\n    _effectiveMapOver: function _effectiveMapOver(other) {\n        var collectionTypes = this.collectionTypes;\n        var otherCollectionType = this._otherCollectionType(other);\n        var canMatch = _.some(collectionTypes, function (collectionType) {\n            return collectionType.canMatch(otherCollectionType);\n        });\n\n        if (!canMatch) {\n            for (var collectionTypeIndex in collectionTypes) {\n                var collectionType = collectionTypes[collectionTypeIndex];\n                if (otherCollectionType.canMapOver(collectionType)) {\n                    var effectiveMapOver = otherCollectionType.effectiveMapOver(collectionType);\n                    if (effectiveMapOver != NULL_COLLECTION_TYPE_DESCRIPTION) {\n                        return effectiveMapOver;\n                    }\n                }\n            }\n        }\n        return NULL_COLLECTION_TYPE_DESCRIPTION;\n    },\n    _effectiveCollectionTypes: function _effectiveCollectionTypes() {\n        var thisMapOver = this.mapOver();\n        return _.map(this.collectionTypes, function (t) {\n            return thisMapOver.append(t);\n        });\n    },\n    attachable: function attachable(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        if (otherCollectionType.isCollection) {\n            var effectiveCollectionTypes = this._effectiveCollectionTypes();\n            var thisMapOver = this.mapOver();\n            var canMatch = _.some(effectiveCollectionTypes, function (effectiveCollectionType) {\n                return effectiveCollectionType.canMatch(otherCollectionType);\n            });\n            if (canMatch) {\n                // Only way a direct match...\n                return this._producesAcceptableDatatype(other);\n                // Otherwise we need to mapOver\n            } else if (thisMapOver.isCollection) {\n                // In this case, mapOver already set and we didn't match skipping...\n                return false;\n            } else if (_.some(this.collectionTypes, function (collectionType) {\n                return otherCollectionType.canMapOver(collectionType);\n            })) {\n                var effectiveMapOver = this._effectiveMapOver(other);\n                if (!effectiveMapOver.isCollection) {\n                    return false;\n                }\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (mappingConstraints.every(effectiveMapOver.canMatch)) {\n                    return this._producesAcceptableDatatype(other);\n                }\n            }\n        }\n        return false;\n    }\n});\n\nvar OutputCollectionTerminal = Terminal.extend({\n    initialize: function initialize(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n        if (attr.collection_type) {\n            this.collectionType = new CollectionTypeDescription(attr.collection_type);\n        } else {\n            var collectionTypeSource = attr.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\"Warning: No collection type or collection type source defined.\");\n            }\n            this.collectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n        this.isCollection = true;\n    },\n    update: function update(output) {\n        var newCollectionType;\n        if (output.collection_type) {\n            newCollectionType = new CollectionTypeDescription(output.collection_type);\n        } else {\n            var collectionTypeSource = output.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\"Warning: No collection type or collection type source defined.\");\n            }\n            newCollectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n\n        if (newCollectionType.collectionType != this.collectionType.collectionType) {\n            _.each(this.connectors, function (connector) {\n                // TODO: consider checking if connection valid before removing...\n                connector.destroy();\n            });\n        }\n        this.collectionType = newCollectionType;\n    }\n});\n\nexports.default = {\n    InputTerminal: InputTerminal,\n    OutputTerminal: OutputTerminal,\n    InputCollectionTerminal: InputCollectionTerminal,\n    OutputCollectionTerminal: OutputCollectionTerminal,\n    TerminalMapping: TerminalMapping,\n\n    // test export\n    CollectionTypeDescription: CollectionTypeDescription,\n    NULL_COLLECTION_TYPE_DESCRIPTION: NULL_COLLECTION_TYPE_DESCRIPTION,\n    ANY_COLLECTION_TYPE_DESCRIPTION: ANY_COLLECTION_TYPE_DESCRIPTION\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 280:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar DataInputView = Backbone.View.extend({\n    className: \"form-row dataRow input-data-row\",\n\n    initialize: function initialize(options) {\n        this.input = options.input;\n        this.nodeView = options.nodeView;\n        this.terminalElement = options.terminalElement;\n\n        this.$el.attr(\"name\", this.input.name).html(this.input.label);\n\n        if (!options.skipResize) {\n            this.$el.css({\n                position: \"absolute\",\n                left: -1000,\n                top: -1000,\n                display: \"none\"\n            });\n            $(\"body\").append(this.el);\n            this.nodeView.updateMaxWidth(this.$el.outerWidth());\n            this.$el.css({\n                position: \"\",\n                left: \"\",\n                top: \"\",\n                display: \"\"\n            });\n            this.$el.remove();\n        }\n    }\n});\n\nvar DataOutputView = Backbone.View.extend({\n    className: \"form-row dataRow\",\n\n    initialize: function initialize(options) {\n        this.output = options.output;\n        this.terminalElement = options.terminalElement;\n        this.nodeView = options.nodeView;\n\n        var output = this.output;\n        var label = output.name;\n        var node = this.nodeView.node;\n\n        var isInput = output.extensions.indexOf(\"input\") >= 0 || output.extensions.indexOf(\"input_collection\") >= 0;\n        if (!isInput) {\n            label = label + \" (\" + output.extensions.join(\", \") + \")\";\n        }\n        this.$el.html(label);\n        this.calloutView = null;\n        if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n            var calloutView = new OutputCalloutView({\n                label: label,\n                output: output,\n                node: node\n            });\n            this.calloutView = calloutView;\n            this.$el.append(calloutView.el);\n            this.$el.hover(function () {\n                calloutView.hoverImage();\n            }, function () {\n                calloutView.resetImage();\n            });\n        }\n        this.$el.css({\n            position: \"absolute\",\n            left: -1000,\n            top: -1000,\n            display: \"none\"\n        });\n        $(\"body\").append(this.el);\n        this.nodeView.updateMaxWidth(this.$el.outerWidth() + 17);\n        this.$el.css({\n            position: \"\",\n            left: \"\",\n            top: \"\",\n            display: \"\"\n        }).detach();\n    },\n    redrawWorkflowOutput: function redrawWorkflowOutput() {\n        if (this.calloutView) {\n            this.calloutView.resetImage();\n        }\n    }\n});\n\nvar OutputCalloutView = Backbone.View.extend({\n    tagName: \"div\",\n\n    initialize: function initialize(options) {\n        this.label = options.label;\n        this.node = options.node;\n        this.output = options.output;\n\n        var view = this;\n        var node = this.node;\n        this.$el.attr(\"class\", \"callout \" + this.label).css({ display: \"none\" }).append($(\"<div class='buttons'></div>\").append($(\"<img/>\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-outline.png\").click(function () {\n            var outputName = view.output.name;\n            if (node.isWorkflowOutput(outputName)) {\n                node.removeWorkflowOutput(outputName);\n                view.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-outline.png\");\n            } else {\n                node.addWorkflowOutput(outputName);\n                view.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small.png\");\n            }\n            window.workflow_globals.workflow.has_changes = true;\n            window.workflow_globals.canvas_manager.draw_overview();\n        }))).tooltip({\n            delay: 500,\n            title: \"Mark dataset as a workflow output. All unmarked datasets will be hidden.\"\n        });\n\n        this.$el.css({\n            top: \"50%\",\n            margin: \"-8px 0px 0px 0px\",\n            right: 8\n        });\n        this.$el.show();\n        this.resetImage();\n    },\n\n    resetImage: function resetImage() {\n        if (!this.node.isWorkflowOutput(this.output.name)) {\n            this.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-outline.png\");\n        } else {\n            this.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small.png\");\n        }\n    },\n\n    hoverImage: function hoverImage() {\n        this.$(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small-yellow.png\");\n    }\n});\n\nexports.default = {\n    DataInputView: DataInputView,\n    DataOutputView: DataOutputView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 281:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _formView = __webpack_require__(22);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nvar _toolFormBase = __webpack_require__(47);\n\nvar _toolFormBase2 = _interopRequireDefault(_toolFormBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Default form wrapper for non-tool modules in the workflow editor. */\nvar Default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new _formView2.default(_utils2.default.merge(options, {\n            onchange: function onchange() {\n                _utils2.default.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/workflows/build_module\",\n                    data: {\n                        id: node.id,\n                        type: node.type,\n                        content_id: node.content_id,\n                        inputs: self.form.data.create()\n                    },\n                    success: function success(data) {\n                        node.update_field_data(data);\n                    }\n                });\n            }\n        }));\n        _addLabelAnnotation(this.form);\n        this.form.render();\n    }\n});\n\n/** Tool form wrapper for the workflow editor. */\nvar Tool = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new _toolFormBase2.default(_utils2.default.merge(options, {\n            text_enable: \"Set in Advance\",\n            text_disable: \"Set at Runtime\",\n            narrow: true,\n            initial_errors: true,\n            cls: \"ui-portlet-narrow\",\n            initialmodel: function initialmodel(process, form) {\n                self._customize(form);\n                process.resolve();\n            },\n            buildmodel: function buildmodel(process, form) {\n                form.model.get(\"postchange\")(process, form);\n            },\n            postchange: function postchange(process, form) {\n                var options = form.model.attributes;\n                var current_state = {\n                    tool_id: options.id,\n                    tool_version: options.version,\n                    type: \"tool\",\n                    inputs: $.extend(true, {}, form.data.create())\n                };\n                Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Sending current state.\", current_state);\n                _utils2.default.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/workflows/build_module\",\n                    data: current_state,\n                    success: function success(data) {\n                        form.model.set(data.config_form);\n                        self._customize(form);\n                        form.update(data.config_form);\n                        form.errors(data.config_form);\n                        // This hasn't modified the workflow, just returned\n                        // module information for the tool to update the workflow\n                        // state stored on the client with. User needs to save\n                        // for this to take effect.\n                        node.update_field_data(data);\n                        Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Received new model.\", data);\n                        process.resolve();\n                    },\n                    error: function error(response) {\n                        Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Refresh request failed.\", response);\n                        process.reject();\n                    }\n                });\n            }\n        }));\n    },\n\n    _customize: function _customize(form) {\n        var options = form.model.attributes;\n        _utils2.default.deepeach(options.inputs, function (input) {\n            if (input.type) {\n                if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                    input.type = \"hidden\";\n                    input.info = \"Data input '\" + input.name + \"' (\" + _utils2.default.textify(input.extensions) + \")\";\n                    input.value = { __class__: \"RuntimeValue\" };\n                } else if (!input.fixed) {\n                    input.collapsible_value = {\n                        __class__: \"RuntimeValue\"\n                    };\n                    input.is_workflow = input.options && input.options.length == 0 || [\"integer\", \"float\"].indexOf(input.type) != -1;\n                }\n            }\n        });\n        _utils2.default.deepeach(options.inputs, function (input) {\n            input.type == \"conditional\" && (input.test_param.collapsible_value = undefined);\n        });\n        _addSections(form);\n        _addLabelAnnotation(form);\n    }\n});\n\n/** Augments the module form definition by adding label and annotation fields */\nfunction _addLabelAnnotation(form) {\n    var options = form.model.attributes;\n    var workflow = options.workflow;\n    var node = options.node;\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__annotation\",\n        label: \"Annotation\",\n        fixed: true,\n        value: node.annotation,\n        area: true,\n        help: \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n    });\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__label\",\n        label: \"Label\",\n        value: node.label,\n        help: \"Add a step label.\",\n        fixed: true,\n        onchange: function onchange(new_label) {\n            var duplicate = false;\n            for (var i in workflow.nodes) {\n                var n = workflow.nodes[i];\n                if (n.label && n.label == new_label && n.id != node.id) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            var input_id = form.data.match(\"__label\");\n            var input_element = form.element_list[input_id];\n            input_element.model.set(\"error_text\", duplicate && \"Duplicate label. Please fix this before saving the workflow.\");\n            form.trigger(\"change\");\n        }\n    });\n}\n\n/** Builds all sub sections */\nfunction _addSections(form) {\n    var options = form.model.attributes;\n    var inputs = options.inputs;\n    var datatypes = options.datatypes;\n    var node = options.node;\n    var workflow = options.workflow;\n    var post_job_actions = node.post_job_actions;\n    var output_id = node.output_terminals && Object.keys(node.output_terminals)[0];\n\n    /** Visit input nodes and enrich by name/value pairs from server data */\n    function visit(head, head_list) {\n        head_list = head_list || [];\n        head_list.push(head);\n        for (var i in head.inputs) {\n            var input = head.inputs[i];\n            var action = input.action;\n            if (action) {\n                input.name = \"pja__\" + output_id + \"__\" + input.action;\n                if (input.pja_arg) {\n                    input.name += \"__\" + input.pja_arg;\n                }\n                if (input.payload) {\n                    for (var p_id in input.payload) {\n                        input.payload[input.name + \"__\" + p_id] = input.payload[p_id];\n                        delete input.payload[p_id];\n                    }\n                }\n                var d = post_job_actions[input.action + output_id];\n                if (d) {\n                    for (var j in head_list) {\n                        head_list[j].expanded = true;\n                    }\n                    if (input.pja_arg) {\n                        input.value = d.action_arguments && d.action_arguments[input.pja_arg] || input.value;\n                    } else {\n                        input.value = \"true\";\n                    }\n                }\n            }\n            input.inputs && visit(input, head_list.slice(0));\n        }\n    }\n\n    /** Builds sub section with step actions/annotation */\n    function _makeSection(output_id, datatypes) {\n        var extensions = [];\n        var input_terminal_names = [];\n        for (var key in datatypes) {\n            extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n        }\n        for (key in node.input_terminals) {\n            input_terminal_names.push(node.input_terminals[key].name);\n        }\n        extensions.sort(function (a, b) {\n            return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n        });\n        extensions.unshift({\n            0: \"Sequences\",\n            1: \"Sequences\"\n        });\n        extensions.unshift({\n            0: \"Roadmaps\",\n            1: \"Roadmaps\"\n        });\n        extensions.unshift({\n            0: \"Leave unchanged\",\n            1: \"__empty__\"\n        });\n        var output;\n        var input_config = {\n            title: \"Configure Output: '\" + output_id + \"'\",\n            type: \"section\",\n            flat: true,\n            inputs: [{\n                label: \"Label\",\n                type: \"text\",\n                value: (output = node.getWorkflowOutput(output_id)) && output.label || \"\",\n                help: \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                onchange: function onchange(new_value) {\n                    workflow.attemptUpdateOutputLabel(node, output_id, new_value);\n                }\n            }, {\n                action: \"RenameDatasetAction\",\n                pja_arg: \"newname\",\n                label: \"Rename dataset\",\n                type: \"text\",\n                value: \"\",\n                ignore: \"\",\n                help: \"This action will rename the output dataset. Click <a href=\\\"https://galaxyproject.org/learn/advanced-workflow/variables/\\\">here</a> for more information. Valid inputs are: <strong>\" + input_terminal_names.join(\", \") + \"</strong>.\"\n            }, {\n                action: \"ChangeDatatypeAction\",\n                pja_arg: \"newtype\",\n                label: \"Change datatype\",\n                type: \"select\",\n                ignore: \"__empty__\",\n                value: \"__empty__\",\n                options: extensions,\n                help: \"This action will change the datatype of the output to the indicated value.\"\n            }, {\n                action: \"TagDatasetAction\",\n                pja_arg: \"tags\",\n                label: \"Add Tags\",\n                type: \"text\",\n                value: \"\",\n                ignore: \"\",\n                help: \"This action will set tags for the dataset.\"\n            }, {\n                action: \"RemoveTagDatasetAction\",\n                pja_arg: \"tags\",\n                label: \"Remove Tags\",\n                type: \"text\",\n                value: \"\",\n                ignore: \"\",\n                help: \"This action will remove tags for the dataset.\"\n            }, {\n                title: \"Assign columns\",\n                type: \"section\",\n                flat: true,\n                inputs: [{\n                    action: \"ColumnSetAction\",\n                    pja_arg: \"chromCol\",\n                    label: \"Chrom column\",\n                    type: \"integer\",\n                    value: \"\",\n                    ignore: \"\"\n                }, {\n                    action: \"ColumnSetAction\",\n                    pja_arg: \"startCol\",\n                    label: \"Start column\",\n                    type: \"integer\",\n                    value: \"\",\n                    ignore: \"\"\n                }, {\n                    action: \"ColumnSetAction\",\n                    pja_arg: \"endCol\",\n                    label: \"End column\",\n                    type: \"integer\",\n                    value: \"\",\n                    ignore: \"\"\n                }, {\n                    action: \"ColumnSetAction\",\n                    pja_arg: \"strandCol\",\n                    label: \"Strand column\",\n                    type: \"integer\",\n                    value: \"\",\n                    ignore: \"\"\n                }, {\n                    action: \"ColumnSetAction\",\n                    pja_arg: \"nameCol\",\n                    label: \"Name column\",\n                    type: \"integer\",\n                    value: \"\",\n                    ignore: \"\"\n                }],\n                help: \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n            }]\n        };\n        visit(input_config);\n        return input_config;\n    }\n\n    if (output_id) {\n        inputs.push({\n            name: \"pja__\" + output_id + \"__EmailAction\",\n            label: \"Email notification\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[\"EmailAction\" + output_id])),\n            ignore: \"false\",\n            help: \"An email notification will be sent when the job has completed.\",\n            payload: {\n                host: window.location.host\n            }\n        });\n        inputs.push({\n            name: \"pja__\" + output_id + \"__DeleteIntermediatesAction\",\n            label: \"Output cleanup\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[\"DeleteIntermediatesAction\" + output_id])),\n            ignore: \"false\",\n            help: \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n        });\n        for (var i in node.output_terminals) {\n            inputs.push(_makeSection(i, datatypes));\n        }\n    }\n}\n\nexports.default = {\n    Default: Default,\n    Tool: Tool\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 81:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    tool: \"fa-wrench\",\n    data_input: \"fa-file-o\",\n    data_collection_input: \"fa-folder-o\",\n    subworkflow: \"fa-sitemap fa-rotate-270\",\n    pause: \"fa-pause\"\n};\n\n/***/ })\n\n},[272]);\n\n\n// WEBPACK FOOTER //\n// workflow.bundled.js","function Connector(handle1, handle2) {\n    this.canvas = null;\n    this.dragging = false;\n    this.inner_color = \"#FFFFFF\";\n    this.outer_color = \"#D8B365\";\n    if (handle1 && handle2) {\n        this.connect(handle1, handle2);\n    }\n}\n$.extend(Connector.prototype, {\n    connect: function(t1, t2) {\n        this.handle1 = t1;\n        if (this.handle1) {\n            this.handle1.connect(this);\n        }\n        this.handle2 = t2;\n        if (this.handle2) {\n            this.handle2.connect(this);\n        }\n    },\n    destroy: function() {\n        if (this.handle1) {\n            this.handle1.disconnect(this);\n        }\n        if (this.handle2) {\n            this.handle2.disconnect(this);\n        }\n        $(this.canvas).remove();\n    },\n    destroyIfInvalid: function() {\n        if (this.handle1 && this.handle2 && !this.handle2.attachable(this.handle1)) {\n            this.destroy();\n        }\n    },\n    redraw: function() {\n        var canvas_container = $(\"#canvas-container\");\n        if (!this.canvas) {\n            this.canvas = document.createElement(\"canvas\");\n            canvas_container.append($(this.canvas));\n            if (this.dragging) {\n                this.canvas.style.zIndex = \"300\";\n            }\n        }\n        var relativeLeft = e => $(e).offset().left - canvas_container.offset().left;\n        var relativeTop = e => $(e).offset().top - canvas_container.offset().top;\n        if (!this.handle1 || !this.handle2) {\n            return;\n        }\n        // Find the position of each handle\n        var start_x = relativeLeft(this.handle1.element) + 5;\n        var start_y = relativeTop(this.handle1.element) + 5;\n        var end_x = relativeLeft(this.handle2.element) + 5;\n        var end_y = relativeTop(this.handle2.element) + 5;\n        // Calculate canvas area\n        var canvas_extra = 100;\n        var canvas_min_x = Math.min(start_x, end_x);\n        var canvas_max_x = Math.max(start_x, end_x);\n        var canvas_min_y = Math.min(start_y, end_y);\n        var canvas_max_y = Math.max(start_y, end_y);\n        var cp_shift = Math.min(Math.max(Math.abs(canvas_max_y - canvas_min_y) / 2, 100), 300);\n        var canvas_left = canvas_min_x - canvas_extra;\n        var canvas_top = canvas_min_y - canvas_extra;\n        var canvas_width = canvas_max_x - canvas_min_x + 2 * canvas_extra;\n        var canvas_height = canvas_max_y - canvas_min_y + 2 * canvas_extra;\n        // Place the canvas\n        this.canvas.style.left = `${canvas_left}px`;\n        this.canvas.style.top = `${canvas_top}px`;\n        this.canvas.setAttribute(\"width\", canvas_width);\n        this.canvas.setAttribute(\"height\", canvas_height);\n        // Adjust points to be relative to the canvas\n        start_x -= canvas_left;\n        start_y -= canvas_top;\n        end_x -= canvas_left;\n        end_y -= canvas_top;\n\n        // Draw the line\n\n        var c = this.canvas.getContext(\"2d\");\n\n        var start_offsets = null;\n        var end_offsets = null;\n        var num_offsets = 1;\n        if (this.handle1 && this.handle1.isMappedOver()) {\n            var start_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var start_offsets = [0];\n        }\n        if (this.handle2 && this.handle2.isMappedOver()) {\n            var end_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var end_offsets = [0];\n        }\n        var connector = this;\n        for (var i = 0; i < num_offsets; i++) {\n            var inner_width = 5;\n            var outer_width = 7;\n            if (start_offsets.length > 1 || end_offsets.length > 1) {\n                // We have a multi-run, using many lines, make them small.\n                inner_width = 1;\n                outer_width = 3;\n            }\n            connector.draw_outlined_curve(\n                start_x,\n                start_y,\n                end_x,\n                end_y,\n                cp_shift,\n                inner_width,\n                outer_width,\n                start_offsets[i % start_offsets.length],\n                end_offsets[i % end_offsets.length]\n            );\n        }\n    },\n    draw_outlined_curve: function(\n        start_x,\n        start_y,\n        end_x,\n        end_y,\n        cp_shift,\n        inner_width,\n        outer_width,\n        offset_start,\n        offset_end\n    ) {\n        var offset_start = offset_start || 0;\n        var offset_end = offset_end || 0;\n        var c = this.canvas.getContext(\"2d\");\n        c.lineCap = \"round\";\n        c.strokeStyle = this.outer_color;\n        c.lineWidth = outer_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(\n            start_x + cp_shift,\n            start_y + offset_start,\n            end_x - cp_shift,\n            end_y + offset_end,\n            end_x,\n            end_y + offset_end\n        );\n        c.stroke();\n        // Inner line\n        c.strokeStyle = this.inner_color;\n        c.lineWidth = inner_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(\n            start_x + cp_shift,\n            start_y + offset_start,\n            end_x - cp_shift,\n            end_y + offset_end,\n            end_x,\n            end_y + offset_end\n        );\n        c.stroke();\n    }\n});\nexport default Connector;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-connector.js","import WorkflowView from \"mvc/workflow/workflow-view\";\n\nexport default function workflowApp(options) {\n    new WorkflowView(options);\n}\n\nwindow.workflowApp = workflowApp;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/workflow.js","import Utils from \"utils/utils\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport * as Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (window.workflow_globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = () => {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = () => {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = (eventObj, success_callback) => {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: `${Galaxy.root}api/workflows/${self.options.id}`,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, (i, v) => {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\"Saving workflow failed.\", response.err_msg, { Ok: hide_modal });\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(() => {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            data => {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, (n, i) => `link-${n}`);\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each((index, id) => {\n                                        // Add class to denote match.\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes`,\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes/mapping`,\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, (step, step_id) => {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += `<li>${step.errors}</li>`;\n                    }\n                    _.each(data.upgrade_messages[step_id], m => {\n                        details += `<li>${m}</li>`;\n                    });\n                    if (details) {\n                        upgrade_message += `<li>Step ${parseInt(step_id, 10) + 1}: ${\n                            self.workflow.nodes[step_id].name\n                        }<ul>${details}</ul></li>`;\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        `Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>${\n                            upgrade_message\n                        }</ul></p>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location = `${Galaxy.root}workflow/run?id=${self.options.id}`;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : `SavedAs_${self.workflow.name}`;\n                    var rename_annotation = $(\"#wf_annotation\").val().length > 0 ? $(\"#wf_annotation\").val() : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(self.workflow.to_simple());\n                            }\n                        }\n                    })\n                        .done(id => {\n                            window.onbeforeunload = undefined;\n                            window.location = `${Galaxy.root}workflow/editor?id=${id}`;\n                            hide_modal();\n                        })\n                        .fail(() => {\n                            hide_modal();\n                            alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content += `<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step ${\n                        node.id\n                    } - ${node.name}</div>`;\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${\n                                output.name\n                            }' checked /></p>`;\n                        } else {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${\n                                output.name\n                            }' /></p>`;\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $.jStorage.set(\"overview-size\", `${new_size}px`);\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(() => {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = () => {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(() => {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(() => {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, workflow => {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body: `This will copy ${workflow.step_count} new steps into your workflow.`,\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(workflow.id, workflow.name);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", () => {\n                        self.add_node_for_subworkflow(workflow.latest_id, workflow.name);\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, (k, v) => {\n                    upgrade_message += `<li>Step ${parseInt(k, 10) + 1}: ${self.workflow.nodes[k].name}<ul>`;\n                    $.each(v, (i, vv) => {\n                        upgrade_message += `<li>${vv}</li>`;\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        `Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>${\n                            upgrade_message\n                        }</ul>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new Workflow(this, $(\"#canvas-container\"));\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/workflows/build_module`,\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist += `<option value='${out_terminal}'>${out_terminal}</option>`;\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, (k, node) => {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, d => {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (k, pja) => {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, (k, action_argument) => {\n                            var arg_matches = action_argument.match(parameter_re);\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, (k, element) => {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, (k, element) => {\n                new_parameter_content += `<div>${element.substring(2, element.length - 1)}</div>`;\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = `${cls}-${node.id}`;\n        var $container = $(`#${cls}`);\n        if (content && $container.find(`#${id}`).length == 0) {\n            var $el = $(`<div id=\"${id}\" class=\"${cls}\"/>`);\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\"workflow-view::initialize()\", \"Node not found in workflow.\");\n            }\n        }\n        $(`.${cls}`).hide();\n        $container.find(`#${id}`).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(`<div class='toolFormTitle unselectable'><span class='nodeTitle'>${title_text}</div></div>`);\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp = `<div><img height='16' align='middle' src='${\n            Galaxy.root\n        }static/images/loading_small_white_bg.gif'/> loading tool info...</div>`;\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(e => {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                    .offsetParent()\n                    .offset();\n\n                var x = d.offsetX - po.left;\n                var y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-view.js","import Connector from \"mvc/workflow/workflow-connector\";\nimport * as Toastr from \"libs/toastr\";\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\n                `Workflow contains duplicate workflow output labels ${\n                    toLabel\n                }. This must be fixed before it can be saved.`\n            );\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", `wf-node-step-${node.id}`);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function() {\n        var wf = this;\n        $.each(this.nodes, (k, v) => {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, (k, node) => {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, (pja_id, pja) => {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, (k, node) => {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, (pja_id, pja) => {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, (i, pja_name) => {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, (ot_id, ot) => {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = null;\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function() {\n        var nodes = {};\n        $.each(this.nodes, (i, node) => {\n            var input_connections = {};\n            $.each(node.input_terminals, (k, t) => {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, (i, c) => {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (i, act) => {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function(data, initialImport_) {\n        var initialImport = initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, (id, step) => {\n            var node = wf.app.prebuildNode(step.type, step.name, step.content_id);\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, (name, workflow_output) => {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], (pja_id, pja) => {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, (id, step) => {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, (k, v) => {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, (l, x) => {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new Connector();\n                        c.connect(other_node.output_terminals[x.output_name], node.input_terminals[k]);\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, (ot_id, ot) => {\n                    if (node.post_job_actions[`HideDatasetAction${ot.name}`] === undefined) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(`.callout.${ot.name}`);\n                        callout.find(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small.png`);\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\")\n                .find(\"form\")\n                .submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        this.app.showAttributes();\n    },\n    activate_node: function(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, (id, node) => {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, (id, node) => {\n            $.each(node.input_terminals, (j, t) => {\n                $.each(t.connectors, (k, c) => {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, (i, ids) => {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort((a, b) => $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top);\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, (j, id) => {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, (_, node) => {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, (id, node) => {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function() {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexport default Workflow;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-manager.js","function CanvasManager(app, canvas_viewport, overview) {\n    this.app = app;\n    this.cv = canvas_viewport;\n    this.cc = this.cv.find(\"#canvas-container\");\n    this.overview = overview;\n    this.oc = overview.find(\"#overview-canvas\");\n    this.ov = overview.find(\"#overview-viewport\");\n    // Make overview box draggable\n    this.init_drag();\n}\n$.extend(CanvasManager.prototype, {\n    init_drag: function() {\n        var self = this;\n        var move = (x, y) => {\n            x = Math.min(x, self.cv.width() / 2);\n            x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n            y = Math.min(y, self.cv.height() / 2);\n            y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n            self.cc.css({\n                left: x,\n                top: y\n            });\n            self.cv.css({\n                \"background-position-x\": x,\n                \"background-position-y\": y\n            });\n            self.update_viewport_overlay();\n        };\n        // Dragging within canvas background\n        this.cc.each(function() {\n            this.scroll_panel = new ScrollPanel(this);\n        });\n        var x_adjust;\n        var y_adjust;\n        this.cv\n            .bind(\"dragstart\", function() {\n                var o = $(this).offset();\n                var p = self.cc.position();\n                y_adjust = p.top - o.top;\n                x_adjust = p.left - o.left;\n            })\n            .bind(\"drag\", (e, d) => {\n                move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n            })\n            .bind(\"dragend\", () => {\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        this.overview.click(e => {\n            if (self.overview.hasClass(\"blockaclick\")) {\n                self.overview.removeClass(\"blockaclick\");\n            } else {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n\n                var new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2;\n\n                var new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            }\n        });\n        // Dragging for overview pane\n        this.ov\n            .bind(\"drag\", (e, d) => {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n                var new_x_offset = d.offsetX - self.overview.offset().left;\n                var new_y_offset = d.offsetY - self.overview.offset().top;\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n            })\n            .bind(\"dragend\", () => {\n                self.overview.addClass(\"blockaclick\");\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        // Dragging for overview border (resize)\n        $(\"#overview-border\").bind(\"drag\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $(this).css({\n                width: new_size,\n                height: new_size\n            });\n            self.draw_overview();\n        });\n\n        /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n        $(\"#overview-border div\").bind(\"drag\", () => {});\n    },\n    update_viewport_overlay: function() {\n        var cc = this.cc;\n        var cv = this.cv;\n        var oc = this.oc;\n        var ov = this.ov;\n        var in_w = cc.width();\n        var in_h = cc.height();\n        var o_w = oc.width();\n        var o_h = oc.height();\n        var cc_pos = cc.position();\n        ov.css({\n            left: -(cc_pos.left / in_w * o_w),\n            top: -(cc_pos.top / in_h * o_h),\n            // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n            width: cv.width() / in_w * o_w - 2,\n            height: cv.height() / in_h * o_h - 2\n        });\n    },\n    draw_overview: function() {\n        var canvas_el = $(\"#overview-canvas\");\n\n        var size = canvas_el\n            .parent()\n            .parent()\n            .width();\n\n        var c = canvas_el.get(0).getContext(\"2d\");\n        var in_w = $(\"#canvas-container\").width();\n        var in_h = $(\"#canvas-container\").height();\n        var o_h;\n        var shift_h;\n        var o_w;\n        var shift_w;\n        // Fit canvas into overview area\n        var cv_w = this.cv.width();\n        var cv_h = this.cv.height();\n        if (in_w < cv_w && in_h < cv_h) {\n            // Canvas is smaller than viewport\n            o_w = in_w / cv_w * size;\n            shift_w = (size - o_w) / 2;\n            o_h = in_h / cv_h * size;\n            shift_h = (size - o_h) / 2;\n        } else if (in_w < in_h) {\n            // Taller than wide\n            shift_h = 0;\n            o_h = size;\n            o_w = Math.ceil(o_h * in_w / in_h);\n            shift_w = (size - o_w) / 2;\n        } else {\n            // Wider than tall\n            o_w = size;\n            shift_w = 0;\n            o_h = Math.ceil(o_w * in_h / in_w);\n            shift_h = (size - o_h) / 2;\n        }\n        canvas_el.parent().css({\n            left: shift_w,\n            top: shift_h,\n            width: o_w,\n            height: o_h\n        });\n        canvas_el.attr(\"width\", o_w);\n        canvas_el.attr(\"height\", o_h);\n        // Draw overview\n        $.each(this.app.workflow.nodes, (id, node) => {\n            c.fillStyle = \"#D2C099\";\n            c.strokeStyle = \"#D8B365\";\n            c.lineWidth = 1;\n            var node_element = $(node.element);\n            var position = node_element.position();\n            var x = position.left / in_w * o_w;\n            var y = position.top / in_h * o_h;\n            var w = node_element.width() / in_w * o_w;\n            var h = node_element.height() / in_h * o_h;\n            if (node.errors) {\n                c.fillStyle = \"#FFCCCC\";\n                c.strokeStyle = \"#AA6666\";\n            } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0) {\n                c.fillStyle = \"#E8A92D\";\n                c.strokeStyle = \"#E8A92D\";\n            }\n            c.fillRect(x, y, w, h);\n            c.strokeRect(x, y, w, h);\n        });\n        this.update_viewport_overlay();\n    }\n});\n\n// FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\nfunction ScrollPanel(panel) {\n    this.panel = panel;\n}\n$.extend(ScrollPanel.prototype, {\n    test: function(e, onmove) {\n        clearTimeout(this.timeout);\n        var x = e.pageX;\n        var y = e.pageY;\n\n        var // Panel size and position\n        panel = $(this.panel);\n\n        var panel_pos = panel.position();\n        var panel_w = panel.width();\n        var panel_h = panel.height();\n\n        var // Viewport size and offset\n        viewport = panel.parent();\n\n        var viewport_w = viewport.width();\n        var viewport_h = viewport.height();\n        var viewport_offset = viewport.offset();\n\n        var // Edges of viewport (in page coordinates)\n        min_x = viewport_offset.left;\n\n        var min_y = viewport_offset.top;\n        var max_x = min_x + viewport.width();\n        var max_y = min_y + viewport.height();\n\n        var // Legal panel range\n        p_min_x = -(panel_w - viewport_w / 2);\n\n        var p_min_y = -(panel_h - viewport_h / 2);\n        var p_max_x = viewport_w / 2;\n        var p_max_y = viewport_h / 2;\n\n        var // Did the panel move?\n        moved = false;\n\n        var // Constants\n        close_dist = 5;\n\n        var nudge = 23;\n        if (x - close_dist < min_x) {\n            if (panel_pos.left < p_max_x) {\n                var t = Math.min(nudge, p_max_x - panel_pos.left);\n                panel.css(\"left\", panel_pos.left + t);\n                moved = true;\n            }\n        } else if (x + close_dist > max_x) {\n            if (panel_pos.left > p_min_x) {\n                var t = Math.min(nudge, panel_pos.left - p_min_x);\n                panel.css(\"left\", panel_pos.left - t);\n                moved = true;\n            }\n        } else if (y - close_dist < min_y) {\n            if (panel_pos.top < p_max_y) {\n                var t = Math.min(nudge, p_max_y - panel_pos.top);\n                panel.css(\"top\", panel_pos.top + t);\n                moved = true;\n            }\n        } else if (y + close_dist > max_y) {\n            if (panel_pos.top > p_min_y) {\n                var t = Math.min(nudge, panel_pos.top - p_min_x);\n                panel.css(\"top\", `${panel_pos.top - t}px`);\n                moved = true;\n            }\n        }\n        if (moved) {\n            // Keep moving even if mouse doesn't move\n            onmove();\n            var panel = this;\n            this.timeout = setTimeout(() => {\n                panel.test(e, onmove);\n            }, 50);\n        }\n    },\n    stop: function(e, ui) {\n        clearTimeout(this.timeout);\n    }\n});\nexport default CanvasManager;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-canvas.js","import NodeView from \"mvc/workflow/workflow-view-node\";\nvar Node = Backbone.Model.extend({\n    initialize: function(app, attr) {\n        this.app = app;\n        this.element = attr.element;\n        this.input_terminals = {};\n        this.output_terminals = {};\n        this.errors = {};\n        this.workflow_outputs = [];\n    },\n    getWorkflowOutput: function(outputName) {\n        return _.findWhere(this.workflow_outputs, {\n            output_name: outputName\n        });\n    },\n    isWorkflowOutput: function(outputName) {\n        return this.getWorkflowOutput(outputName) != undefined;\n    },\n    removeWorkflowOutput: function(outputName) {\n        while (this.isWorkflowOutput(outputName)) {\n            this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n        }\n    },\n    addWorkflowOutput: function(outputName, label) {\n        if (!this.isWorkflowOutput(outputName)) {\n            var output = { output_name: outputName };\n            if (label) {\n                output[\"label\"] = label;\n            }\n            this.workflow_outputs.push(output);\n            return true;\n        }\n        return false;\n    },\n    labelWorkflowOutput: function(outputName, label) {\n        var changed = false;\n        var oldLabel = null;\n        if (this.isWorkflowOutput(outputName)) {\n            var workflowOutput = this.getWorkflowOutput(outputName);\n            oldLabel = workflowOutput[\"label\"];\n            workflowOutput[\"label\"] = label;\n            changed = oldLabel != label;\n        } else {\n            changed = this.addWorkflowOutput(outputName, label);\n        }\n        if (changed) {\n            this.app.workflow.updateOutputLabel(oldLabel, label);\n            this.markChanged();\n            this.nodeView.redrawWorkflowOutputs();\n        }\n        return changed;\n    },\n    connectedOutputTerminals: function() {\n        return this._connectedTerminals(this.output_terminals);\n    },\n    _connectedTerminals: function(terminals) {\n        var connectedTerminals = [];\n        $.each(terminals, (_, t) => {\n            if (t.connectors.length > 0) {\n                connectedTerminals.push(t);\n            }\n        });\n        return connectedTerminals;\n    },\n    hasConnectedOutputTerminals: function() {\n        // return this.connectedOutputTerminals().length > 0; <- optimized this\n        var outputTerminals = this.output_terminals;\n        for (var outputName in outputTerminals) {\n            if (outputTerminals[outputName].connectors.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    connectedMappedInputTerminals: function() {\n        return this._connectedMappedTerminals(this.input_terminals);\n    },\n    hasConnectedMappedInputTerminals: function() {\n        // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n        var inputTerminals = this.input_terminals;\n        for (var inputName in inputTerminals) {\n            var inputTerminal = inputTerminals[inputName];\n            if (inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver()) {\n                return true;\n            }\n        }\n        return false;\n    },\n    _connectedMappedTerminals: function(terminals) {\n        var mapped_outputs = [];\n        $.each(terminals, (_, t) => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                if (t.connectors.length > 0) {\n                    mapped_outputs.push(t);\n                }\n            }\n        });\n        return mapped_outputs;\n    },\n    mappedInputTerminals: function() {\n        return this._mappedTerminals(this.input_terminals);\n    },\n    _mappedTerminals: function(terminals) {\n        var mappedTerminals = [];\n        $.each(terminals, (_, t) => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                mappedTerminals.push(t);\n            }\n        });\n        return mappedTerminals;\n    },\n    hasMappedOverInputTerminals: function() {\n        var found = false;\n        _.each(this.input_terminals, t => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                found = true;\n            }\n        });\n        return found;\n    },\n    redraw: function() {\n        $.each(this.input_terminals, (_, t) => {\n            t.redraw();\n        });\n        $.each(this.output_terminals, (_, t) => {\n            t.redraw();\n        });\n    },\n    destroy: function() {\n        $.each(this.input_terminals, (k, t) => {\n            t.destroy();\n        });\n        $.each(this.output_terminals, (k, t) => {\n            t.destroy();\n        });\n        this.app.workflow.remove_node(this);\n        $(this.element).remove();\n    },\n    make_active: function() {\n        $(this.element).addClass(\"toolForm-active\");\n    },\n    make_inactive: function() {\n        // Keep inactive nodes stacked from most to least recently active\n        // by moving element to the end of parent's node list\n        var element = this.element.get(0);\n        (p => {\n            p.removeChild(element);\n            p.appendChild(element);\n        })(element.parentNode);\n        // Remove active class\n        $(element).removeClass(\"toolForm-active\");\n    },\n    init_field_data: function(data) {\n        if (data.type) {\n            this.type = data.type;\n        }\n        this.name = data.name;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.tool_state = data.tool_state;\n        this.errors = data.errors;\n        this.tooltip = data.tooltip ? data.tooltip : \"\";\n        this.annotation = data.annotation;\n        this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n        this.label = data.label;\n        this.uuid = data.uuid;\n        this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n        var node = this;\n        var nodeView = new NodeView({\n            el: this.element[0],\n            node: node\n        });\n        node.nodeView = nodeView;\n        $.each(data.data_inputs, (i, input) => {\n            nodeView.addDataInput(input);\n        });\n        if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n            nodeView.addRule();\n        }\n        $.each(data.data_outputs, (i, output) => {\n            nodeView.addDataOutput(output);\n        });\n        nodeView.render();\n        this.app.workflow.node_changed(this, true);\n    },\n    update_field_data: function(data) {\n        var node = this;\n        var nodeView = node.nodeView;\n        // remove unused output views and remove pre-existing output views from data.data_outputs,\n        // so that these are not added twice.\n        var unused_outputs = [];\n        // nodeView.outputViews contains pre-existing outputs,\n        // while data.data_output contains what should be displayed.\n        // Now we gather the unused outputs\n        $.each(nodeView.outputViews, (i, output_view) => {\n            var cur_name = output_view.output.name;\n            var data_names = data.data_outputs;\n            var cur_name_in_data_outputs = false;\n            _.each(data_names, data_name => {\n                if (data_name.name == cur_name) {\n                    cur_name_in_data_outputs = true;\n                }\n            });\n            if (cur_name_in_data_outputs === false) {\n                unused_outputs.push(cur_name);\n            }\n        });\n\n        // Remove the unused outputs\n        _.each(unused_outputs, unused_output => {\n            _.each(nodeView.outputViews[unused_output].terminalElement.terminal.connectors, x => {\n                if (x) {\n                    x.destroy(); // Removes the noodle connectors\n                }\n            });\n            nodeView.outputViews[unused_output].remove(); // removes the rendered output\n            delete nodeView.outputViews[unused_output]; // removes the reference to the output\n            delete node.output_terminals[unused_output]; // removes the output terminal\n        });\n        $.each(node.workflow_outputs, (i, wf_output) => {\n            if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n            }\n        });\n        $.each(data.data_outputs, (i, output) => {\n            if (!nodeView.outputViews[output.name]) {\n                nodeView.addDataOutput(output); // add data output if it does not yet exist\n            } else {\n                // the output already exists, but the output formats may have changed.\n                // Therefore we update the datatypes and destroy invalid connections.\n                node.output_terminals[output.name].datatypes = output.extensions;\n                node.output_terminals[output.name].destroyInvalidConnections();\n            }\n        });\n        this.tool_state = data.tool_state;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.errors = data.errors;\n        this.annotation = data[\"annotation\"];\n        this.label = data.label;\n        if (\"post_job_actions\" in data) {\n            // Won't be present in response for data inputs\n            var pja_in = data.post_job_actions;\n            this.post_job_actions = pja_in ? pja_in : {};\n        }\n        node.nodeView.renderToolErrors();\n        // Update input rows\n        var old_body = nodeView.$(\"div.inputs\");\n        var new_body = nodeView.newInputsDiv();\n        var newTerminalViews = {};\n        _.each(data.data_inputs, input => {\n            var terminalView = node.nodeView.addDataInput(input, new_body);\n            newTerminalViews[input.name] = terminalView;\n        });\n        // Cleanup any leftover terminals\n        _.each(_.difference(_.values(nodeView.terminalViews), _.values(newTerminalViews)), unusedView => {\n            unusedView.el.terminal.destroy();\n        });\n        nodeView.terminalViews = newTerminalViews;\n        node.nodeView.render();\n        // In general workflow editor assumes tool outputs don't change in # or\n        // type (not really valid right?) but adding special logic here for\n        // data collection input parameters that can have their collection\n        // change.\n        if (data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[0]) {\n            nodeView.updateDataOutput(data.data_outputs[0]);\n        }\n        old_body.replaceWith(new_body);\n        if (\"workflow_outputs\" in data) {\n            // Won't be present in response for data inputs\n            this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n        }\n        // If active, reactivate with new config_form\n        this.markChanged();\n        this.redraw();\n    },\n    error: function(text) {\n        var b = $(this.element).find(\".toolFormBody\");\n        b.find(\"div\").remove();\n        var tmp = `<div style='color: red; text-style: italic;'>${text}</div>`;\n        this.config_form = tmp;\n        b.html(tmp);\n        this.app.workflow.node_changed(this);\n    },\n    markChanged: function() {\n        this.app.workflow.node_changed(this);\n    }\n});\nexport default Node;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-node.js","import * as _ from \"libs/underscore\";\nimport TerminalViews from \"mvc/workflow/workflow-view-terminals\";\nimport DataViews from \"mvc/workflow/workflow-view-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.node = options.node;\n        this.output_width = Math.max(150, this.$el.width());\n        this.tool_body = this.$el.find(\".toolFormBody\");\n        this.tool_body.find(\"div\").remove();\n        this.newInputsDiv().appendTo(this.tool_body);\n        this.terminalViews = {};\n        this.outputViews = {};\n    },\n\n    render: function() {\n        this.renderToolLabel();\n        this.renderToolErrors();\n        this.$el.css(\"width\", Math.min(250, Math.max(this.$el.width(), this.output_width)));\n    },\n\n    renderToolLabel: function() {\n        this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n    },\n\n    renderToolErrors: function() {\n        this.node.errors ? this.$el.addClass(\"tool-node-error\") : this.$el.removeClass(\"tool-node-error\");\n    },\n\n    newInputsDiv: function() {\n        return $(\"<div/>\").addClass(\"inputs\");\n    },\n\n    updateMaxWidth: function(newWidth) {\n        this.output_width = Math.max(this.output_width, newWidth);\n    },\n\n    addRule: function() {\n        this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n    },\n\n    addDataInput: function(input, body) {\n        var skipResize = true;\n        if (!body) {\n            body = this.$(\".inputs\");\n            // initial addition to node - resize input to help calculate node\n            // width.\n            skipResize = false;\n        }\n        var terminalView = this.terminalViews[input.name];\n        var terminalViewClass =\n            input.input_type == \"dataset_collection\"\n                ? TerminalViews.InputCollectionTerminalView\n                : TerminalViews.InputTerminalView;\n        if (terminalView && !(terminalView instanceof terminalViewClass)) {\n            terminalView.el.terminal.destroy();\n            terminalView = null;\n        }\n        if (!terminalView) {\n            terminalView = new terminalViewClass({\n                node: this.node,\n                input: input\n            });\n        } else {\n            var terminal = terminalView.el.terminal;\n            terminal.update(input);\n            terminal.destroyInvalidConnections();\n        }\n        this.terminalViews[input.name] = terminalView;\n        var terminalElement = terminalView.el;\n        var inputView = new DataViews.DataInputView({\n            terminalElement: terminalElement,\n            input: input,\n            nodeView: this,\n            skipResize: skipResize\n        });\n        var ib = inputView.$el;\n        body.append(ib.prepend(terminalView.terminalElements()));\n        return terminalView;\n    },\n\n    addDataOutput: function(output) {\n        var terminalViewClass = output.collection\n            ? TerminalViews.OutputCollectionTerminalView\n            : TerminalViews.OutputTerminalView;\n        var terminalView = new terminalViewClass({\n            node: this.node,\n            output: output\n        });\n        var outputView = new DataViews.DataOutputView({\n            output: output,\n            terminalElement: terminalView.el,\n            nodeView: this\n        });\n        this.outputViews[output.name] = outputView;\n        this.tool_body.append(outputView.$el.append(terminalView.terminalElements()));\n    },\n\n    redrawWorkflowOutputs: function() {\n        _.each(this.outputViews, outputView => {\n            outputView.redrawWorkflowOutput();\n        });\n    },\n\n    updateDataOutput: function(output) {\n        var outputTerminal = this.node.output_terminals[output.name];\n        outputTerminal.update(output);\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-view-node.js","import Terminals from \"mvc/workflow/workflow-terminals\";\nimport Connector from \"mvc/workflow/workflow-connector\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar TerminalMappingView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"fa-icon-button fa fa-folder-o\",\n    initialize: function(options) {\n        var mapText = \"Run tool in parallel over collection\";\n        this.$el.tooltip({ delay: 500, title: mapText });\n        this.model.bind(\"change\", _.bind(this.render, this));\n    },\n    render: function() {\n        if (this.model.mapOver.isCollection) {\n            this.$el.show();\n        } else {\n            this.$el.hide();\n        }\n    }\n});\n\nvar InputTerminalMappingView = TerminalMappingView.extend({\n    events: {\n        click: \"onClick\",\n        mouseenter: \"onMouseEnter\",\n        mouseleave: \"onMouseLeave\"\n    },\n    onMouseEnter: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            this.$el.css(\"color\", \"red\");\n        }\n    },\n    onMouseLeave: function(e) {\n        this.$el.css(\"color\", \"black\");\n    },\n    onClick: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            // TODO: Consider prompting...\n            model.terminal.resetMapping();\n        }\n    }\n});\n\nvar TerminalView = Backbone.View.extend({\n    setupMappingView: function(terminal) {\n        var terminalMapping = new this.terminalMappingClass({\n            terminal: terminal\n        });\n        var terminalMappingView = new this.terminalMappingViewClass({\n            model: terminalMapping\n        });\n        terminalMappingView.render();\n        terminal.terminalMappingView = terminalMappingView;\n        this.terminalMappingView = terminalMappingView;\n    },\n    terminalElements: function() {\n        if (this.terminalMappingView) {\n            return [this.terminalMappingView.el, this.el];\n        } else {\n            return [this.el];\n        }\n    }\n});\n\nvar BaseInputTerminalView = TerminalView.extend({\n    className: \"terminal input-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var input = options.input;\n        var name = input.name;\n        var terminal = this.terminalForInput(input);\n        if (!terminal.multiple) {\n            this.setupMappingView(terminal);\n        }\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.input_terminals[name] = terminal;\n    },\n    events: {\n        dropinit: \"onDropInit\",\n        dropstart: \"onDropStart\",\n        dropend: \"onDropEnd\",\n        drop: \"onDrop\",\n        hover: \"onHover\"\n    },\n    onDropInit: function(e, d) {\n        var terminal = this.el.terminal;\n        // Accept a dragable if it is an output terminal and has a\n        // compatible type\n        return $(d.drag).hasClass(\"output-terminal\") && terminal.canAccept(d.drag.terminal);\n    },\n    onDropStart: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n        }\n    },\n    onDropEnd: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n        }\n    },\n    onDrop: function(e, d) {\n        var terminal = this.el.terminal;\n        new Connector(d.drag.terminal, terminal).redraw();\n    },\n    onHover: function() {\n        var element = this.el;\n        var terminal = element.terminal;\n        // If connected, create a popup to allow disconnection\n        if (terminal.connectors.length > 0) {\n            // Create callout\n            var t = $(\"<div class='callout'></div>\")\n                .css({ display: \"none\" })\n                .appendTo(\"body\")\n                .append(\n                    $(\"<div class='button'></div>\").append(\n                        $(\"<div/>\")\n                            .addClass(\"fa-icon-button fa fa-times\")\n                            .click(() => {\n                                $.each(terminal.connectors, (_, x) => {\n                                    if (x) {\n                                        x.destroy();\n                                    }\n                                });\n                                t.remove();\n                            })\n                    )\n                )\n                .bind(\"mouseleave\", function() {\n                    $(this).remove();\n                });\n            // Position it and show\n            t\n                .css({\n                    top: $(element).offset().top - 2,\n                    left: $(element).offset().left - t.width(),\n                    \"padding-right\": $(element).width()\n                })\n                .show();\n        }\n    }\n});\n\nvar InputTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar InputCollectionTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputCollectionTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar BaseOutputTerminalView = TerminalView.extend({\n    className: \"terminal output-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var output = options.output;\n        var name = output.name;\n        var terminal = this.terminalForOutput(output);\n        this.setupMappingView(terminal);\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.output_terminals[name] = terminal;\n    },\n    events: {\n        drag: \"onDrag\",\n        dragstart: \"onDragStart\",\n        dragend: \"onDragEnd\"\n    },\n    onDrag: function(e, d) {\n        var onmove = () => {\n            var po = $(d.proxy)\n                .offsetParent()\n                .offset();\n\n            var x = d.offsetX - po.left;\n            var y = d.offsetY - po.top;\n            $(d.proxy).css({ left: x, top: y });\n            d.proxy.terminal.redraw();\n            // FIXME: global\n            window.workflow_globals.canvas_manager.update_viewport_overlay();\n        };\n        onmove();\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.test(e, onmove);\n    },\n    onDragStart: function(e, d) {\n        $(d.available).addClass(\"input-terminal-active\");\n        // Save PJAs in the case of change datatype actions.\n        window.workflow_globals.workflow.check_changes_in_active_form();\n        // Drag proxy div\n        var h = $('<div class=\"drag-terminal\" style=\"position: absolute;\"></div>')\n            .appendTo(\"#canvas-container\")\n            .get(0);\n        // Terminal and connection to display noodle while dragging\n        h.terminal = new Terminals.OutputTerminal({ element: h });\n        var c = new Connector();\n        c.dragging = true;\n        c.connect(this.el.terminal, h.terminal);\n        return h;\n    },\n    onDragEnd: function(e, d) {\n        var connector = d.proxy.terminal.connectors[0];\n        // check_changes_in_active_form may change the state and cause a\n        // the connection to have already been destroyed. There must be better\n        // ways to handle this but the following check fixes some serious GUI\n        // bugs for now.\n        if (connector) {\n            connector.destroy();\n        }\n        $(d.proxy).remove();\n        $(d.available).removeClass(\"input-terminal-active\");\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.stop();\n    }\n});\n\nvar OutputTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var type = output.extensions;\n        var terminal = new Terminals.OutputTerminal({\n            element: this.el,\n            datatypes: type\n        });\n        return terminal;\n    }\n});\n\nvar OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var collection_type = output.collection_type;\n        var collection_type_source = output.collection_type_source;\n        var terminal = new Terminals.OutputCollectionTerminal({\n            element: this.el,\n            collection_type: collection_type,\n            collection_type_source: collection_type_source,\n            datatypes: output.extensions\n        });\n        return terminal;\n    }\n});\n\nexport default {\n    InputTerminalView: InputTerminalView,\n    OutputTerminalView: OutputTerminalView,\n    InputCollectionTerminalView: InputCollectionTerminalView,\n    OutputCollectionTerminalView: OutputCollectionTerminalView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-view-terminals.js","// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\nfunction CollectionTypeDescription(collectionType) {\n    this.collectionType = collectionType;\n    this.isCollection = true;\n    this.rank = collectionType.split(\":\").length;\n}\n\nvar NULL_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: false,\n    canMatch: function(other) {\n        return false;\n    },\n    canMapOver: function(other) {\n        return false;\n    },\n    toString: function() {\n        return \"NullCollectionType[]\";\n    },\n    append: function(otherCollectionType) {\n        return otherCollectionType;\n    },\n    equal: function(other) {\n        return other === this;\n    }\n};\n\nvar ANY_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: true,\n    canMatch: function(other) {\n        return NULL_COLLECTION_TYPE_DESCRIPTION !== other;\n    },\n    canMapOver: function(other) {\n        return false;\n    },\n    toString: function() {\n        return \"AnyCollectionType[]\";\n    },\n    append: function(otherCollectionType) {\n        throw \"Cannot append to ANY_COLLECTION_TYPE_DESCRIPTION\";\n    },\n    equal: function(other) {\n        return other === this;\n    }\n};\n\n$.extend(CollectionTypeDescription.prototype, {\n    append: function(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return this;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return otherCollectionType;\n        }\n        return new CollectionTypeDescription(`${this.collectionType}:${otherCollectionTypeDescription.collectionType}`);\n    },\n    canMatch: function(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return true;\n        }\n        return otherCollectionTypeDescription.collectionType == this.collectionType;\n    },\n    canMapOver: function(otherCollectionTypeDescription) {\n        if (otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION) {\n            return false;\n        }\n        if (this.rank <= otherCollectionTypeDescription.rank) {\n            // Cannot map over self...\n            return false;\n        }\n        var requiredSuffix = otherCollectionTypeDescription.collectionType;\n        return this._endsWith(this.collectionType, requiredSuffix);\n    },\n    effectiveMapOver: function(otherCollectionTypeDescription) {\n        var otherCollectionType = otherCollectionTypeDescription.collectionType;\n        var effectiveCollectionType = this.collectionType.substring(\n            0,\n            this.collectionType.length - otherCollectionType.length - 1\n        );\n        return new CollectionTypeDescription(effectiveCollectionType);\n    },\n    equal: function(otherCollectionTypeDescription) {\n        return otherCollectionTypeDescription.collectionType == this.collectionType;\n    },\n    toString: function() {\n        return `CollectionType[${this.collectionType}]`;\n    },\n    _endsWith: function(str, suffix) {\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    }\n});\n\nvar TerminalMapping = Backbone.Model.extend({\n    initialize: function(attr) {\n        this.mapOver = attr.mapOver || NULL_COLLECTION_TYPE_DESCRIPTION;\n        this.terminal = attr.terminal;\n        this.terminal.terminalMapping = this;\n    },\n    disableMapOver: function() {\n        this.setMapOver(NULL_COLLECTION_TYPE_DESCRIPTION);\n    },\n    setMapOver: function(collectionTypeDescription) {\n        // TODO: Can I use \"attributes\" or something to auto trigger \"change\"\n        // event?\n        this.mapOver = collectionTypeDescription;\n        this.trigger(\"change\");\n    }\n});\n\nvar Terminal = Backbone.Model.extend({\n    initialize: function(attr) {\n        this.element = attr.element;\n        this.connectors = [];\n    },\n    connect: function(connector) {\n        this.connectors.push(connector);\n        if (this.node) {\n            this.node.markChanged();\n        }\n    },\n    disconnect: function(connector) {\n        this.connectors.splice($.inArray(connector, this.connectors), 1);\n        if (this.node) {\n            this.node.markChanged();\n            this.resetMappingIfNeeded();\n        }\n    },\n    redraw: function() {\n        $.each(this.connectors, (_, c) => {\n            c.redraw();\n        });\n    },\n    destroy: function() {\n        $.each(this.connectors.slice(), (_, c) => {\n            c.destroy();\n        });\n    },\n    destroyInvalidConnections: function() {\n        _.each(this.connectors, connector => {\n            connector && connector.destroyIfInvalid();\n        });\n    },\n    setMapOver: function(val) {\n        if (this.multiple) {\n            return; // Cannot set this to be multirun...\n        }\n\n        if (!this.mapOver().equal(val)) {\n            this.terminalMapping.setMapOver(val);\n            _.each(this.node.output_terminals, outputTerminal => {\n                outputTerminal.setMapOver(val);\n            });\n        }\n    },\n    mapOver: function() {\n        if (!this.terminalMapping) {\n            return NULL_COLLECTION_TYPE_DESCRIPTION;\n        } else {\n            return this.terminalMapping.mapOver;\n        }\n    },\n    isMappedOver: function() {\n        return this.terminalMapping && this.terminalMapping.mapOver.isCollection;\n    },\n    resetMapping: function() {\n        this.terminalMapping.disableMapOver();\n    },\n\n    resetMappingIfNeeded: function() {} // Subclasses should override this...\n});\n\nvar OutputTerminal = Terminal.extend({\n    initialize: function(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n    },\n\n    resetMappingIfNeeded: function() {\n        // If inputs were only mapped over to preserve\n        // an output just disconnected reset these...\n        if (!this.node.hasConnectedOutputTerminals() && !this.node.hasConnectedMappedInputTerminals()) {\n            _.each(this.node.mappedInputTerminals(), mappedInput => {\n                mappedInput.resetMappingIfNeeded();\n            });\n        }\n\n        var noMappedInputs = !this.node.hasMappedOverInputTerminals();\n        if (noMappedInputs) {\n            this.resetMapping();\n        }\n    },\n\n    resetMapping: function() {\n        this.terminalMapping.disableMapOver();\n        _.each(this.connectors, connector => {\n            var connectedInput = connector.handle2;\n            if (connectedInput) {\n                // Not exactly right because this is still connected.\n                // Either rewrite resetMappingIfNeeded or disconnect\n                // and reconnect if valid.\n                connectedInput.resetMappingIfNeeded();\n                connector.destroyIfInvalid();\n            }\n        });\n    }\n});\n\nvar BaseInputTerminal = Terminal.extend({\n    initialize: function(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.update(attr.input); // subclasses should implement this...\n    },\n    canAccept: function(other) {\n        if (this._inputFilled()) {\n            return false;\n        } else {\n            return this.attachable(other);\n        }\n    },\n    resetMappingIfNeeded: function() {\n        var mapOver = this.mapOver();\n        if (!mapOver.isCollection) {\n            return;\n        }\n        // No output terminals are counting on this being mapped\n        // over if connected inputs are still mapped over or if none\n        // of the outputs are connected...\n        var reset = this.node.hasConnectedMappedInputTerminals() || !this.node.hasConnectedOutputTerminals();\n        if (reset) {\n            this.resetMapping();\n        }\n    },\n    resetMapping: function() {\n        this.terminalMapping.disableMapOver();\n        if (!this.node.hasMappedOverInputTerminals()) {\n            _.each(this.node.output_terminals, terminal => {\n                // This shouldn't be called if there are mapped over\n                // outputs.\n                terminal.resetMapping();\n            });\n        }\n    },\n    connected: function() {\n        return this.connectors.length !== 0;\n    },\n    _inputFilled: function() {\n        var inputFilled;\n        if (!this.connected()) {\n            inputFilled = false;\n        } else {\n            if (this.multiple) {\n                if (this._collectionAttached()) {\n                    // Can only attach one collection to multiple input\n                    // data parameter.\n                    inputsFilled = true;\n                } else {\n                    inputFilled = false;\n                }\n            } else {\n                inputFilled = true;\n            }\n        }\n        return inputFilled;\n    },\n    _collectionAttached: function() {\n        if (!this.connected()) {\n            return false;\n        } else {\n            var firstOutput = this.connectors[0].handle1;\n            if (!firstOutput) {\n                return false;\n            } else {\n                if (\n                    firstOutput.isCollection ||\n                    firstOutput.isMappedOver() ||\n                    firstOutput.datatypes.indexOf(\"input_collection\") > 0\n                ) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }\n    },\n    _mappingConstraints: function() {\n        // If this is a connected terminal, return list of collection types\n        // other terminals connected to node are constraining mapping to.\n        if (!this.node) {\n            return []; // No node - completely unconstrained\n        }\n        var mapOver = this.mapOver();\n        if (mapOver.isCollection) {\n            return [mapOver];\n        }\n\n        var constraints = [];\n        if (!this.node.hasConnectedOutputTerminals()) {\n            _.each(this.node.connectedMappedInputTerminals(), inputTerminal => {\n                constraints.push(inputTerminal.mapOver());\n            });\n        } else {\n            // All outputs should have same mapOver status - least specific.\n            constraints.push(_.first(_.values(this.node.output_terminals)).mapOver());\n        }\n        return constraints;\n    },\n    _producesAcceptableDatatype: function(other) {\n        // other is a non-collection output...\n        for (var t in this.datatypes) {\n            var thisDatatype = this.datatypes[t];\n            if (thisDatatype == \"input\") {\n                return true;\n            }\n            var cat_outputs = new Array();\n            cat_outputs = cat_outputs.concat(other.datatypes);\n            if (other.node.post_job_actions) {\n                for (var pja_i in other.node.post_job_actions) {\n                    var pja = other.node.post_job_actions[pja_i];\n                    if (\n                        pja.action_type == \"ChangeDatatypeAction\" &&\n                        (pja.output_name == \"\" || pja.output_name == other.name) &&\n                        pja.action_arguments\n                    ) {\n                        cat_outputs.push(pja.action_arguments[\"newtype\"]);\n                    }\n                }\n            }\n            // FIXME: No idea what to do about case when datatype is 'input'\n            for (var other_datatype_i in cat_outputs) {\n                var other_datatype = cat_outputs[other_datatype_i];\n                if (\n                    other_datatype == \"input\" ||\n                    other_datatype == \"_sniff_\" ||\n                    other_datatype == \"input_collection\" ||\n                    window.workflow_globals.app.isSubType(cat_outputs[other_datatype_i], thisDatatype)\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    _otherCollectionType: function(other) {\n        var otherCollectionType = NULL_COLLECTION_TYPE_DESCRIPTION;\n        if (other.isCollection) {\n            otherCollectionType = other.collectionType;\n        }\n        var otherMapOver = other.mapOver();\n        if (otherMapOver.isCollection) {\n            otherCollectionType = otherMapOver.append(otherCollectionType);\n        }\n        return otherCollectionType;\n    }\n});\n\nvar InputTerminal = BaseInputTerminal.extend({\n    update: function(input) {\n        this.datatypes = input.extensions;\n        this.multiple = input.multiple;\n        this.collection = false;\n    },\n    connect: function(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other_output = connector.handle1;\n        if (!other_output) {\n            return;\n        }\n        var otherCollectionType = this._otherCollectionType(other_output);\n        if (otherCollectionType.isCollection) {\n            this.setMapOver(otherCollectionType);\n        }\n    },\n    attachable: function(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        var thisMapOver = this.mapOver();\n        if (otherCollectionType.isCollection) {\n            if (this.multiple) {\n                if (this.connected() && !this._collectionAttached()) {\n                    // if single inputs attached, cannot also attach a\n                    // collection (yet...)\n                    return false;\n                }\n                if (otherCollectionType.rank == 1) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    // TODO: Allow subcollection mapping over this as if it were\n                    // a list collection input.\n                    return false;\n                }\n            }\n            if (thisMapOver.isCollection && thisMapOver.canMatch(otherCollectionType)) {\n                return this._producesAcceptableDatatype(other);\n            } else {\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (mappingConstraints.every(_.bind(otherCollectionType.canMatch, otherCollectionType))) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    return false;\n                }\n            }\n        } else if (thisMapOver.isCollection) {\n            // Attempting to match a non-collection output to an\n            // explicitly collection input.\n            return false;\n        }\n        return this._producesAcceptableDatatype(other);\n    }\n});\n\nvar InputCollectionTerminal = BaseInputTerminal.extend({\n    update: function(input) {\n        this.multiple = false;\n        this.collection = true;\n        this.datatypes = input.extensions;\n        var collectionTypes = [];\n        if (input.collection_types) {\n            _.each(input.collection_types, collectionType => {\n                collectionTypes.push(new CollectionTypeDescription(collectionType));\n            });\n        } else {\n            collectionTypes.push(ANY_COLLECTION_TYPE_DESCRIPTION);\n        }\n        this.collectionTypes = collectionTypes;\n    },\n    connect: function(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other = connector.handle1;\n        if (!other) {\n            return;\n        }\n\n        var effectiveMapOver = this._effectiveMapOver(other);\n        this.setMapOver(effectiveMapOver);\n    },\n    _effectiveMapOver: function(other) {\n        var collectionTypes = this.collectionTypes;\n        var otherCollectionType = this._otherCollectionType(other);\n        var canMatch = _.some(collectionTypes, collectionType => collectionType.canMatch(otherCollectionType));\n\n        if (!canMatch) {\n            for (var collectionTypeIndex in collectionTypes) {\n                var collectionType = collectionTypes[collectionTypeIndex];\n                if (otherCollectionType.canMapOver(collectionType)) {\n                    var effectiveMapOver = otherCollectionType.effectiveMapOver(collectionType);\n                    if (effectiveMapOver != NULL_COLLECTION_TYPE_DESCRIPTION) {\n                        return effectiveMapOver;\n                    }\n                }\n            }\n        }\n        return NULL_COLLECTION_TYPE_DESCRIPTION;\n    },\n    _effectiveCollectionTypes: function() {\n        var thisMapOver = this.mapOver();\n        return _.map(this.collectionTypes, t => thisMapOver.append(t));\n    },\n    attachable: function(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        if (otherCollectionType.isCollection) {\n            var effectiveCollectionTypes = this._effectiveCollectionTypes();\n            var thisMapOver = this.mapOver();\n            var canMatch = _.some(effectiveCollectionTypes, effectiveCollectionType =>\n                effectiveCollectionType.canMatch(otherCollectionType)\n            );\n            if (canMatch) {\n                // Only way a direct match...\n                return this._producesAcceptableDatatype(other);\n                // Otherwise we need to mapOver\n            } else if (thisMapOver.isCollection) {\n                // In this case, mapOver already set and we didn't match skipping...\n                return false;\n            } else if (_.some(this.collectionTypes, collectionType => otherCollectionType.canMapOver(collectionType))) {\n                var effectiveMapOver = this._effectiveMapOver(other);\n                if (!effectiveMapOver.isCollection) {\n                    return false;\n                }\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (mappingConstraints.every(effectiveMapOver.canMatch)) {\n                    return this._producesAcceptableDatatype(other);\n                }\n            }\n        }\n        return false;\n    }\n});\n\nvar OutputCollectionTerminal = Terminal.extend({\n    initialize: function(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n        if (attr.collection_type) {\n            this.collectionType = new CollectionTypeDescription(attr.collection_type);\n        } else {\n            var collectionTypeSource = attr.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\"Warning: No collection type or collection type source defined.\");\n            }\n            this.collectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n        this.isCollection = true;\n    },\n    update: function(output) {\n        var newCollectionType;\n        if (output.collection_type) {\n            newCollectionType = new CollectionTypeDescription(output.collection_type);\n        } else {\n            var collectionTypeSource = output.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\"Warning: No collection type or collection type source defined.\");\n            }\n            newCollectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n\n        if (newCollectionType.collectionType != this.collectionType.collectionType) {\n            _.each(this.connectors, connector => {\n                // TODO: consider checking if connection valid before removing...\n                connector.destroy();\n            });\n        }\n        this.collectionType = newCollectionType;\n    }\n});\n\nexport default {\n    InputTerminal: InputTerminal,\n    OutputTerminal: OutputTerminal,\n    InputCollectionTerminal: InputCollectionTerminal,\n    OutputCollectionTerminal: OutputCollectionTerminal,\n    TerminalMapping: TerminalMapping,\n\n    // test export\n    CollectionTypeDescription: CollectionTypeDescription,\n    NULL_COLLECTION_TYPE_DESCRIPTION: NULL_COLLECTION_TYPE_DESCRIPTION,\n    ANY_COLLECTION_TYPE_DESCRIPTION: ANY_COLLECTION_TYPE_DESCRIPTION\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-terminals.js","// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar DataInputView = Backbone.View.extend({\n    className: \"form-row dataRow input-data-row\",\n\n    initialize: function(options) {\n        this.input = options.input;\n        this.nodeView = options.nodeView;\n        this.terminalElement = options.terminalElement;\n\n        this.$el.attr(\"name\", this.input.name).html(this.input.label);\n\n        if (!options.skipResize) {\n            this.$el.css({\n                position: \"absolute\",\n                left: -1000,\n                top: -1000,\n                display: \"none\"\n            });\n            $(\"body\").append(this.el);\n            this.nodeView.updateMaxWidth(this.$el.outerWidth());\n            this.$el.css({\n                position: \"\",\n                left: \"\",\n                top: \"\",\n                display: \"\"\n            });\n            this.$el.remove();\n        }\n    }\n});\n\nvar DataOutputView = Backbone.View.extend({\n    className: \"form-row dataRow\",\n\n    initialize: function(options) {\n        this.output = options.output;\n        this.terminalElement = options.terminalElement;\n        this.nodeView = options.nodeView;\n\n        var output = this.output;\n        var label = output.name;\n        var node = this.nodeView.node;\n\n        var isInput = output.extensions.indexOf(\"input\") >= 0 || output.extensions.indexOf(\"input_collection\") >= 0;\n        if (!isInput) {\n            label = `${label} (${output.extensions.join(\", \")})`;\n        }\n        this.$el.html(label);\n        this.calloutView = null;\n        if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n            var calloutView = new OutputCalloutView({\n                label: label,\n                output: output,\n                node: node\n            });\n            this.calloutView = calloutView;\n            this.$el.append(calloutView.el);\n            this.$el.hover(\n                () => {\n                    calloutView.hoverImage();\n                },\n                () => {\n                    calloutView.resetImage();\n                }\n            );\n        }\n        this.$el.css({\n            position: \"absolute\",\n            left: -1000,\n            top: -1000,\n            display: \"none\"\n        });\n        $(\"body\").append(this.el);\n        this.nodeView.updateMaxWidth(this.$el.outerWidth() + 17);\n        this.$el\n            .css({\n                position: \"\",\n                left: \"\",\n                top: \"\",\n                display: \"\"\n            })\n            .detach();\n    },\n    redrawWorkflowOutput: function() {\n        if (this.calloutView) {\n            this.calloutView.resetImage();\n        }\n    }\n});\n\nvar OutputCalloutView = Backbone.View.extend({\n    tagName: \"div\",\n\n    initialize: function(options) {\n        this.label = options.label;\n        this.node = options.node;\n        this.output = options.output;\n\n        var view = this;\n        var node = this.node;\n        this.$el\n            .attr(\"class\", `callout ${this.label}`)\n            .css({ display: \"none\" })\n            .append(\n                $(\"<div class='buttons'></div>\").append(\n                    $(\"<img/>\")\n                        .attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small-outline.png`)\n                        .click(() => {\n                            var outputName = view.output.name;\n                            if (node.isWorkflowOutput(outputName)) {\n                                node.removeWorkflowOutput(outputName);\n                                view\n                                    .$(\"img\")\n                                    .attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small-outline.png`);\n                            } else {\n                                node.addWorkflowOutput(outputName);\n                                view.$(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small.png`);\n                            }\n                            window.workflow_globals.workflow.has_changes = true;\n                            window.workflow_globals.canvas_manager.draw_overview();\n                        })\n                )\n            )\n            .tooltip({\n                delay: 500,\n                title: \"Mark dataset as a workflow output. All unmarked datasets will be hidden.\"\n            });\n\n        this.$el.css({\n            top: \"50%\",\n            margin: \"-8px 0px 0px 0px\",\n            right: 8\n        });\n        this.$el.show();\n        this.resetImage();\n    },\n\n    resetImage: function() {\n        if (!this.node.isWorkflowOutput(this.output.name)) {\n            this.$(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small-outline.png`);\n        } else {\n            this.$(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small.png`);\n        }\n    },\n\n    hoverImage: function() {\n        this.$(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small-yellow.png`);\n    }\n});\n\nexport default {\n    DataInputView: DataInputView,\n    DataOutputView: DataOutputView\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-view-data.js","import Utils from \"utils/utils\";\nimport Form from \"mvc/form/form-view\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\n/** Default form wrapper for non-tool modules in the workflow editor. */\nvar Default = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new Form(\n            Utils.merge(options, {\n                onchange: function() {\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: {\n                            id: node.id,\n                            type: node.type,\n                            content_id: node.content_id,\n                            inputs: self.form.data.create()\n                        },\n                        success: function(data) {\n                            node.update_field_data(data);\n                        }\n                    });\n                }\n            })\n        );\n        _addLabelAnnotation(this.form);\n        this.form.render();\n    }\n});\n\n/** Tool form wrapper for the workflow editor. */\nvar Tool = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new ToolFormBase(\n            Utils.merge(options, {\n                text_enable: \"Set in Advance\",\n                text_disable: \"Set at Runtime\",\n                narrow: true,\n                initial_errors: true,\n                cls: \"ui-portlet-narrow\",\n                initialmodel: function(process, form) {\n                    self._customize(form);\n                    process.resolve();\n                },\n                buildmodel: function(process, form) {\n                    form.model.get(\"postchange\")(process, form);\n                },\n                postchange: function(process, form) {\n                    var options = form.model.attributes;\n                    var current_state = {\n                        tool_id: options.id,\n                        tool_version: options.version,\n                        type: \"tool\",\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Sending current state.\", current_state);\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: current_state,\n                        success: function(data) {\n                            form.model.set(data.config_form);\n                            self._customize(form);\n                            form.update(data.config_form);\n                            form.errors(data.config_form);\n                            // This hasn't modified the workflow, just returned\n                            // module information for the tool to update the workflow\n                            // state stored on the client with. User needs to save\n                            // for this to take effect.\n                            node.update_field_data(data);\n                            Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Received new model.\", data);\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Refresh request failed.\", response);\n                            process.reject();\n                        }\n                    });\n                }\n            })\n        );\n    },\n\n    _customize: function(form) {\n        var options = form.model.attributes;\n        Utils.deepeach(options.inputs, input => {\n            if (input.type) {\n                if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                    input.type = \"hidden\";\n                    input.info = `Data input '${input.name}' (${Utils.textify(input.extensions)})`;\n                    input.value = { __class__: \"RuntimeValue\" };\n                } else if (!input.fixed) {\n                    input.collapsible_value = {\n                        __class__: \"RuntimeValue\"\n                    };\n                    input.is_workflow =\n                        (input.options && input.options.length == 0) || [\"integer\", \"float\"].indexOf(input.type) != -1;\n                }\n            }\n        });\n        Utils.deepeach(options.inputs, input => {\n            input.type == \"conditional\" && (input.test_param.collapsible_value = undefined);\n        });\n        _addSections(form);\n        _addLabelAnnotation(form);\n    }\n});\n\n/** Augments the module form definition by adding label and annotation fields */\nfunction _addLabelAnnotation(form) {\n    var options = form.model.attributes;\n    var workflow = options.workflow;\n    var node = options.node;\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__annotation\",\n        label: \"Annotation\",\n        fixed: true,\n        value: node.annotation,\n        area: true,\n        help: \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n    });\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__label\",\n        label: \"Label\",\n        value: node.label,\n        help: \"Add a step label.\",\n        fixed: true,\n        onchange: function(new_label) {\n            var duplicate = false;\n            for (var i in workflow.nodes) {\n                var n = workflow.nodes[i];\n                if (n.label && n.label == new_label && n.id != node.id) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            var input_id = form.data.match(\"__label\");\n            var input_element = form.element_list[input_id];\n            input_element.model.set(\n                \"error_text\",\n                duplicate && \"Duplicate label. Please fix this before saving the workflow.\"\n            );\n            form.trigger(\"change\");\n        }\n    });\n}\n\n/** Builds all sub sections */\nfunction _addSections(form) {\n    var options = form.model.attributes;\n    var inputs = options.inputs;\n    var datatypes = options.datatypes;\n    var node = options.node;\n    var workflow = options.workflow;\n    var post_job_actions = node.post_job_actions;\n    var output_id = node.output_terminals && Object.keys(node.output_terminals)[0];\n\n    /** Visit input nodes and enrich by name/value pairs from server data */\n    function visit(head, head_list) {\n        head_list = head_list || [];\n        head_list.push(head);\n        for (var i in head.inputs) {\n            var input = head.inputs[i];\n            var action = input.action;\n            if (action) {\n                input.name = `pja__${output_id}__${input.action}`;\n                if (input.pja_arg) {\n                    input.name += `__${input.pja_arg}`;\n                }\n                if (input.payload) {\n                    for (var p_id in input.payload) {\n                        input.payload[`${input.name}__${p_id}`] = input.payload[p_id];\n                        delete input.payload[p_id];\n                    }\n                }\n                var d = post_job_actions[input.action + output_id];\n                if (d) {\n                    for (var j in head_list) {\n                        head_list[j].expanded = true;\n                    }\n                    if (input.pja_arg) {\n                        input.value = (d.action_arguments && d.action_arguments[input.pja_arg]) || input.value;\n                    } else {\n                        input.value = \"true\";\n                    }\n                }\n            }\n            input.inputs && visit(input, head_list.slice(0));\n        }\n    }\n\n    /** Builds sub section with step actions/annotation */\n    function _makeSection(output_id, datatypes) {\n        var extensions = [];\n        var input_terminal_names = [];\n        for (var key in datatypes) {\n            extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n        }\n        for (key in node.input_terminals) {\n            input_terminal_names.push(node.input_terminals[key].name);\n        }\n        extensions.sort((a, b) => (a.label > b.label ? 1 : a.label < b.label ? -1 : 0));\n        extensions.unshift({\n            0: \"Sequences\",\n            1: \"Sequences\"\n        });\n        extensions.unshift({\n            0: \"Roadmaps\",\n            1: \"Roadmaps\"\n        });\n        extensions.unshift({\n            0: \"Leave unchanged\",\n            1: \"__empty__\"\n        });\n        var output;\n        var input_config = {\n            title: `Configure Output: '${output_id}'`,\n            type: \"section\",\n            flat: true,\n            inputs: [\n                {\n                    label: \"Label\",\n                    type: \"text\",\n                    value: ((output = node.getWorkflowOutput(output_id)) && output.label) || \"\",\n                    help:\n                        \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                    onchange: function(new_value) {\n                        workflow.attemptUpdateOutputLabel(node, output_id, new_value);\n                    }\n                },\n                {\n                    action: \"RenameDatasetAction\",\n                    pja_arg: \"newname\",\n                    label: \"Rename dataset\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: `This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>${input_terminal_names.join(\n                        \", \"\n                    )}</strong>.`\n                },\n                {\n                    action: \"ChangeDatatypeAction\",\n                    pja_arg: \"newtype\",\n                    label: \"Change datatype\",\n                    type: \"select\",\n                    ignore: \"__empty__\",\n                    value: \"__empty__\",\n                    options: extensions,\n                    help: \"This action will change the datatype of the output to the indicated value.\"\n                },\n                {\n                    action: \"TagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Add Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will set tags for the dataset.\"\n                },\n                {\n                    action: \"RemoveTagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Remove Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will remove tags for the dataset.\"\n                },\n                {\n                    title: \"Assign columns\",\n                    type: \"section\",\n                    flat: true,\n                    inputs: [\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"chromCol\",\n                            label: \"Chrom column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"startCol\",\n                            label: \"Start column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"endCol\",\n                            label: \"End column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"strandCol\",\n                            label: \"Strand column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"nameCol\",\n                            label: \"Name column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        }\n                    ],\n                    help: \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n                }\n            ]\n        };\n        visit(input_config);\n        return input_config;\n    }\n\n    if (output_id) {\n        inputs.push({\n            name: `pja__${output_id}__EmailAction`,\n            label: \"Email notification\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[`EmailAction${output_id}`])),\n            ignore: \"false\",\n            help: \"An email notification will be sent when the job has completed.\",\n            payload: {\n                host: window.location.host\n            }\n        });\n        inputs.push({\n            name: `pja__${output_id}__DeleteIntermediatesAction`,\n            label: \"Output cleanup\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[`DeleteIntermediatesAction${output_id}`])),\n            ignore: \"false\",\n            help:\n                \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n        });\n        for (var i in node.output_terminals) {\n            inputs.push(_makeSection(i, datatypes));\n        }\n    }\n}\n\nexport default {\n    Default: Default,\n    Tool: Tool\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-forms.js","export default {\n    tool: \"fa-wrench\",\n    data_input: \"fa-file-o\",\n    data_collection_input: \"fa-folder-o\",\n    subworkflow: \"fa-sitemap fa-rotate-270\",\n    pause: \"fa-pause\"\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/workflow/workflow-icons.js"],"sourceRoot":""}