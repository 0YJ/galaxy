{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/apps/panels/admin-panel.js","webpack:///./galaxy/scripts/mvc/grid/grid-view.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js","webpack:///./galaxy/scripts/mvc/ui/ui-options.js","webpack:///./galaxy/scripts/mvc/ui/ui-list.js","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js","webpack:///./galaxy/scripts/mvc/ui/ui-table.js","webpack:///./galaxy/scripts/mvc/form/form-data.js","webpack:///./galaxy/scripts/mvc/grid/grid-model.js","webpack:///./galaxy/scripts/mvc/grid/grid-template.js","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js","webpack:///./galaxy/scripts/mvc/form/form-section.js","webpack:///./galaxy/scripts/mvc/form/form-repeat.js","webpack:///./galaxy/scripts/mvc/form/form-input.js","webpack:///./galaxy/scripts/mvc/form/form-parameters.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-content.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-genomespace.js","webpack:///./galaxy/scripts/mvc/tool/tool-genomespace.js","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js","webpack:///./galaxy/scripts/layout/router.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js","webpack:///./galaxy/scripts/mvc/form/form-wrapper.js","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js","webpack:///./galaxy/scripts/mvc/form/form-view.js"],"names":["webpackJsonp","10","module","exports","__webpack_require__","Backbone","$","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","Utils","ButtonDefault","View","extend","initialize","options","this","model","Model","id","uid","title","icon","cls","wait","wait_text","wait_cls","disabled","percentage","set","setElement","attr","append","$icon","$title","$progress","$progress_bar","listenTo","render","self","attributes","$el","removeClass","addClass","off","on","hide","onclick","tooltip","placement","css","width","prop","html","show","disable","enable","unwait","setIcon","ButtonLink","href","target","ButtonCheck","icons","value","onchange","get","new_val","total","ButtonIcon","$button","ButtonMenu","$menu","pull","onunload","visible","tag","collection","Collection","$root","display","where","length","e","preventDefault","remove","each","submodel","suboptions","$link","divider","addMenu","add","merge","apply","call","158","_","_interopRequireDefault","obj","__esModule","default","_jquery","_jquery2","_galaxy","_adminPanel","_adminPanel2","_formWrapper","_formWrapper2","_gridView","_gridView2","_uiMisc","_queryStringParsing","_queryStringParsing2","_router","_router2","_utils","_utils2","_page","_page2","window","app","bootstrapped","Galaxy","GalaxyApp","debug","AdminRouter","routes","(/)admin(/)users","(/)admin(/)roles","(/)admin(/)groups","(/)admin(/)tool_versions","(/)admin(/)quotas","(/)admin(/)forms","(/)admin(/)form(/)(:form_id)","authenticate","args","name","user","show_users","page","url_base","root","url_data","params","dict_format","show_roles","show_groups","show_tool_versions","show_quotas","show_forms","show_form","form_id","form_defs","reset_user_password","url","submit_title","redirect","manage_roles_and_groups_for_user","manage_users_and_groups_for_role","manage_users_and_roles_for_group","manage_users_and_groups_for_quota","create_role","create_group","create_quota","rename_role","rename_group","rename_quota","edit_quota","set_quota_default","create_form","edit_form","config","active_view","setWindowTitle","Left","Router","159","Object","defineProperty","_localization","_localization2","AdminPanel","settings","message","status","categories","items","enabled","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","allow_user_impersonation","enable_quotas","_template","empty","category","$section","_templateSection","$entries","find","item","text","router","push","join","toString","16","jQuery","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","add_tag_to_grid_filter","tag_name","tag_value","is","slideToggle","add_filter_condition","filters","v","k","ajax","param","success","response","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","top","currHistoryPanel","loadCurrentHistory","allow_title_display","replace","header","body","footer","use_hide_message","setTimeout","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","val","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","filter","change","rating","set_page","execute","index","button","popup","operation","_add_operation","operation_config","label","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","add_filter","t","filter_element","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","findWhere","operations","item_ids","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","advanced_search","$div","closest","load","method","type","data","error","alert","response_text","insert","json","parseJSON","complete","17","Buttons","data2","error_text","empty_text","multiple","searchable","optional","readonly","individual","pagesize","_changeData","_changeDisabled","_changeWait","_changeVisible","_changeValue","_renderSearchable","_renderClassic","$select","_getValue","trigger","$dropdown","$resize","$resize_icon","event","currentY","pageY","currentHeight","height","minHeight","Math","max","select2","all_button","option","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","callback","slice","more","formatResult","result","escape","reduce","memo","_setValue","isArray","first","exists","d","sorter","keep","sort","update","setOnChange","selected","a","b","isEmpty","18","Base","$message","$options","_templateOptions","_templateOption","_messageShow","values","BaseIcons","pair","Radio","prototype","Checkbox","RadioButton","19","Portlet","Ui","Message","portlet","Select","i","v_id","v_name","_refresh","lst","_templateRow","20","menu","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","li","map","checked","menuWidth","x","pageX","min","document","scrollLeft","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","create","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","22","content","ondblclick","onconfirm","selectable","cls_tr","$thead","$tbody","$tmessage","row","_row","row_count","events","dblclick","addHeader","appendHeader","align","wrapper","fade","_commit","del","delAll","before","after","size","fadeIn","_onclick","old_value","_ondblclick","23","Manager","checksum","sum","section","field","field_list","JSON","stringify","collapsed","flat_id","input_id","input_value","flat_dict","result_dict","element_list","convert","identifier","head","node","input","block_indices","block_prefix","block_label","pos","substr","test_param","selectedCase","matchCase","flat","ignore","collapsible_value","payload","p_id","dict","_iterate","match","matchModel","visitInputs","inputs","matchResponse","search","new_id","separator","Array","child","hasClass","input_list","truevalue","falsevalue","cases","prefix","context","key","cache","j","emit","27","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","cur_val","condition","condition_index","pairs","get_url","28","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_offset","max_range","max_page","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","29","step","precise","$text","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","30","Options","header_index","list","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","31","Repeat","InputElement","Parameters","parameters","input_def","_addConditional","_addRepeat","_addSection","_addRow","case_def","section_row","nonhidden","hidden","sub_section","_append","sub_section_id","block_index","repeat","ondel","onnew","n_cache","hideOptions","input_element","help","collapsible","collapsible_button","expanded","expand","hide_label","text_value","collapsible_preview","argument","color","style","backdrop","fixed","32","button_new","$list","button_delete","hideOperation","33","app_options","text_enable","text_disable","cls_enable","cls_disable","always_refresh","$field","$info","$preview","$collapsible","$collapsible_text","$collapsible_icon","$title_text","$error_text","$error","$backdrop","reset","help_text","help_argument","collapsible_state","34","SelectContent","SelectLibrary","SelectFtp","SelectGenomeSpace","ColorPicker","types","password","data_column","genomebuild","data_collection","integer","float","boolean","drill_down","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","fieldClass","_fieldSelect","_fieldText","_fieldData","extensions","flavor","is_workflow","SelectClass","_fieldDrilldown","Drilldown","area","str_value","Input","placeholder","datalist","_fieldSlider","Slider","_fieldHidden","Hidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","_fieldUpload","Upload","35","Batch","DISABLED","ENABLED","LINKED","Configurations","src","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","src_labels","hda","hdca","pagelimit","statustimer","button_product","$batch_div","$batch","linked","clone","lastenter","_handleDrop","history","_changeCurrent","_changeType","current","id_list","fields","_batch","details","hid","$batchfield","batchmode","button_type","config_id","textify","button_data","button_width","margin-left","select_options","ev","drop_data","parse","originalEvent","dataTransfer","getData","new_src","history_content_type","current_value","_handleDropStatus","map_over_type","36","Table","List","Libraries","LibraryDatasets","library_id","fetch","libraries","datasets","library_select","dataset_list","37","ftpfile_list","38","GenomespaceBrowser","browse_button","browseGenomeSpace","filename_textbox","token_textbox","openFileBrowser","successCallback","destination","token","39","GS_UI_URL","genomespace_ui_url","GS_UPLOAD_URL","newWin","open","successCalBack","addEventListener","focus","setCallbackOnGSUploadError","40","colors","standard","base","theme","$panel","$view","$value","$header","_build","$boxes","fadeOut","_templateCheck","rgb","hex","_content","line_def","$content","_templateContent","$line","$box","_templateBox","bottom","44","_uiMisc2","__identifer","random","isEmptyObject","navigate","queryObj","pop","access_denied","persistent","5","Modal","Label","tagName","new_title","messageForDisplay","timeout","clearTimeout","UnescapedMessage","autocomplete","source","request","_onchange","attr_name","removeAttr","$hidden","$file","$wait","_readFile","file","files","reader","FileReader","onload","readAsText","Button","58","Form","done","form","buttons","submit_tooltip","submit_icon","_submit","fail","contentType","success_message","_showMessage","responseJSON","err_msg","parents","animate","scrollTop","8","scrollable","nopadding","onchange_title","$body","$title_icon","$buttons","$operations","collapse","make_text_editable","on_finish","enableButton","disableButton","showOperation","setOperation","9","FormSection","FormData","initial_errors","hide_operations","new_model","isEqual","new_options","opt","active","is_dynamic","highlight","silent","offset","errors","error_messages","_renderForm","current_check","refresh_on_change","new_check"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This module contains all button views. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"btn btn-default\",\n                wait: false,\n                wait_text: \"Sending...\",\n                wait_cls: \"btn btn-info\",\n                disabled: false,\n                percentage: -1\n            }).set(options);\n            this.setElement($(\"<button/>\").attr(\"type\", \"button\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\")).append(this.$progress = $(\"<div/>\").append(this.$progress_bar = $(\"<div/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(\"ui-button-default\").addClass(options.disabled && \"disabled\").attr(\"id\", options.id).attr(\"disabled\", options.disabled).off(\"click\").on(\"click\", function () {\n                $(\".tooltip\").hide();\n                options.onclick && !self.disabled && options.onclick();\n            }).tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress.addClass(\"progress\").css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar.addClass(\"progress-bar\").css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function show() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function hide() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function disable() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function enable() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function setIcon(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"\"\n            }).set(options);\n            this.setElement($(\"<a/>\").append(this.$icon = $(\"<span/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr({\n                id: options.id,\n                href: options.href || \"javascript:void(0)\",\n                title: options.title,\n                target: options.target || \"_top\",\n                disabled: options.disabled\n            }).tooltip({ placement: \"bottom\" }).off(\"click\").on(\"click\", function () {\n                options.onclick && !options.disabled && options.onclick();\n            });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"Select/Unselect all\",\n                icons: [\"fa-square-o\", \"fa-minus-square-o\", \"fa-check-square-o\"],\n                value: 0,\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement($(\"<div/>\").append(this.$icon = $(\"<span/>\")).append(this.$title = $(\"<span/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass(\"ui-button-check\").off(\"click\").on(\"click\", function () {\n                self.model.set(\"value\", self.model.get(\"value\") === 0 && 2 || 0);\n                options.onclick && options.onclick();\n            });\n            this.$title.html(options.title);\n            this.$icon.removeClass().addClass(\"icon fa ui-margin-right\").addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function value(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = new_val !== total && 1 || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"ui-button-icon\",\n                disabled: false\n            }).set(options);\n            this.setElement($(\"<div/>\").append(this.$button = $(\"<div/>\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && \"disabled\").attr(\"disabled\", options.disabled).attr(\"id\", options.id).off(\"click\").on(\"click\", function () {\n                $(\".tooltip\").hide();\n                !options.disabled && options.onclick && options.onclick();\n            });\n            this.$button.addClass(\"button\").tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon.removeClass().addClass(\"icon fa\").addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: \"\",\n                title: \"\",\n                pull: \"right\",\n                icon: null,\n                onclick: null,\n                cls: \"ui-button-icon ui-button-menu\",\n                tooltip: \"\",\n                target: \"\",\n                href: \"\",\n                onunload: null,\n                visible: true,\n                tag: \"\"\n            }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement($(\"<div/>\").append(this.$root = $(\"<div/>\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(this.collection, \"change add remove reset\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(\"dropdown\").addClass(options.cls).attr(\"id\", options.id).css({\n                display: options.visible && this.collection.where({ visible: true }).length > 0 ? \"block\" : \"none\"\n            });\n            this.$root.addClass(\"root button dropdown-toggle\").attr(\"data-toggle\", \"dropdown\").tooltip({ title: options.tooltip, placement: \"bottom\" }).off(\"click\").on(\"click\", function (e) {\n                $(\".tooltip\").hide();\n                e.preventDefault();\n                options.onclick && options.onclick();\n            });\n            this.$icon.removeClass().addClass(\"icon fa\").addClass(options.icon);\n            this.$title.removeClass().addClass(\"title\").html(options.title);\n            options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\").addClass(\"menu dropdown-menu\").addClass(\"pull-\" + self.model.get(\"pull\")).attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function (submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\").addClass(\"dropdown-item\").attr({\n                        href: suboptions.href,\n                        target: suboptions.target\n                    }).append($(\"<i/>\").addClass(\"fa\").addClass(suboptions.icon).css(\"display\", suboptions.icon ? \"inline-block\" : \"none\")).append(suboptions.title).on(\"click\", function (e) {\n                        if (suboptions.onclick) {\n                            e.preventDefault();\n                            suboptions.onclick();\n                        }\n                    });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider && self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function addMenu(options) {\n            this.collection.add(Utils.merge(options, {\n                title: \"\",\n                target: \"\",\n                href: \"\",\n                onclick: null,\n                divider: false,\n                visible: true,\n                icon: null,\n                cls: \"button-menu btn-group\"\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 158:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(_) {\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _galaxy = __webpack_require__(42);\n\nvar _adminPanel = __webpack_require__(159);\n\nvar _adminPanel2 = _interopRequireDefault(_adminPanel);\n\nvar _formWrapper = __webpack_require__(58);\n\nvar _formWrapper2 = _interopRequireDefault(_formWrapper);\n\nvar _gridView = __webpack_require__(16);\n\nvar _gridView2 = _interopRequireDefault(_gridView);\n\nvar _uiMisc = __webpack_require__(5);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _queryStringParsing = __webpack_require__(11);\n\nvar _queryStringParsing2 = _interopRequireDefault(_queryStringParsing);\n\nvar _router = __webpack_require__(44);\n\nvar _router2 = _interopRequireDefault(_router);\n\nvar _utils = __webpack_require__(3);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _page = __webpack_require__(43);\n\nvar _page2 = _interopRequireDefault(_page);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar $ = _jquery2.default;\n\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new _galaxy.GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"admin app\");\n\n    /** Routes */\n    var AdminRouter = _router2.default.extend({\n        routes: {\n            \"(/)admin(/)users\": \"show_users\",\n            \"(/)admin(/)roles\": \"show_roles\",\n            \"(/)admin(/)groups\": \"show_groups\",\n            \"(/)admin(/)tool_versions\": \"show_tool_versions\",\n            \"(/)admin(/)quotas\": \"show_quotas\",\n            \"(/)admin(/)forms\": \"show_forms\",\n            \"(/)admin(/)form(/)(:form_id)\": \"show_form\"\n        },\n\n        authenticate: function authenticate(args, name) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get(\"is_admin\");\n        },\n\n        show_users: function show_users() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"admin/users_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_roles: function show_roles() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"admin/roles_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_groups: function show_groups() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"admin/groups_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_tool_versions: function show_tool_versions() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"admin/tool_versions_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_quotas: function show_quotas() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"admin/quotas_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_forms: function show_forms() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"forms/forms_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_form: function show_form(form_id) {\n            var id = \"?id=\" + _queryStringParsing2.default.get(\"id\");\n            var form_defs = {\n                reset_user_password: {\n                    title: \"Reset passwords\",\n                    url: \"admin/reset_user_password\" + id,\n                    icon: \"fa-user\",\n                    submit_title: \"Save new password\",\n                    redirect: \"admin/users\"\n                },\n                manage_roles_and_groups_for_user: {\n                    url: \"admin/manage_roles_and_groups_for_user\" + id,\n                    icon: \"fa-users\",\n                    redirect: \"admin/users\"\n                },\n                manage_users_and_groups_for_role: {\n                    url: \"admin/manage_users_and_groups_for_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                manage_users_and_roles_for_group: {\n                    url: \"admin/manage_users_and_roles_for_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                manage_users_and_groups_for_quota: {\n                    url: \"admin/manage_users_and_groups_for_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_role: {\n                    url: \"admin/create_role\",\n                    redirect: \"admin/roles\"\n                },\n                create_group: {\n                    url: \"admin/create_group\",\n                    redirect: \"admin/groups\"\n                },\n                create_quota: {\n                    url: \"admin/create_quota\",\n                    redirect: \"admin/quotas\"\n                },\n                rename_role: {\n                    url: \"admin/rename_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                rename_group: {\n                    url: \"admin/rename_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                rename_quota: {\n                    url: \"admin/rename_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                edit_quota: {\n                    url: \"admin/edit_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                set_quota_default: {\n                    url: \"admin/set_quota_default\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_form: {\n                    url: \"forms/create_form\",\n                    redirect: \"admin/forms\"\n                },\n                edit_form: {\n                    url: \"forms/edit_form\" + id,\n                    redirect: \"admin/forms\"\n                }\n            };\n            this.page.display(new _formWrapper2.default.View(form_defs[form_id]));\n        }\n    });\n\n    $(function () {\n        _.extend(options.config, { active_view: \"admin\" });\n        _utils2.default.setWindowTitle(\"Administration\");\n        Galaxy.page = new _page2.default.View(_.extend(options, {\n            Left: _adminPanel2.default,\n            Router: AdminRouter\n        }));\n    });\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 159:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(4);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function initialize(page, options) {\n        var self = this;\n        this.page = page;\n        this.root = options.root;\n        this.config = options.config;\n        this.settings = options.settings;\n        this.message = options.message;\n        this.status = options.status;\n        this.model = new Backbone.Model({\n            title: (0, _localization2.default)(\"Administration\")\n        });\n        this.categories = new Backbone.Collection([{\n            title: \"Server\",\n            items: [{\n                title: \"Data types registry\",\n                url: \"admin/view_datatypes_registry\"\n            }, {\n                title: \"Data tables registry\",\n                url: \"admin/view_tool_data_tables\"\n            }, {\n                title: \"Display applications\",\n                url: \"admin/display_applications\"\n            }, {\n                title: \"Manage jobs\",\n                url: \"admin/jobs\"\n            }]\n        }, {\n            title: \"Tools and Tool Shed\",\n            items: [{\n                title: \"Search Tool Shed\",\n                url: \"admin_toolshed/browse_tool_sheds\",\n                enabled: self.settings.is_tool_shed_installed\n            }, {\n                title: \"Search Tool Shed (Beta)\",\n                url: \"admin_toolshed/browse_toolsheds\",\n                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            }, {\n                title: \"Monitor installing repositories\",\n                url: \"admin_toolshed/monitor_repository_installation?installing_repository_ids=\" + self.settings.installing_repository_ids,\n                enabled: self.settings.installing_repository_ids\n            }, {\n                title: \"Manage installed tools\",\n                url: \"admin_toolshed/browse_repositories\",\n                enabled: self.settings.is_repo_installed\n            }, {\n                title: \"Reset metadata\",\n                url: \"admin_toolshed/reset_metadata_on_selected_installed_repositories\",\n                enabled: self.settings.is_repo_installed\n            }, {\n                title: \"Download local tool\",\n                url: \"admin/package_tool\"\n            }, {\n                title: \"Tool lineage\",\n                url: \"admin/tool_versions\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Reload a tool's configuration\",\n                url: \"admin/reload_tool\"\n            }, {\n                title: \"Review tool migration stages\",\n                url: \"admin/review_tool_migration_stages\"\n            }, {\n                title: \"View Tool Error Logs\",\n                url: \"admin/tool_errors\"\n            }, {\n                title: \"Manage Display Whitelist\",\n                url: \"admin/sanitize_whitelist\"\n            }, {\n                title: \"Manage Tool Dependencies\",\n                url: \"admin/manage_tool_dependencies\"\n            }]\n        }, {\n            title: \"User Management\",\n            items: [{\n                title: \"Users\",\n                url: \"admin/users\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Groups\",\n                url: \"admin/groups\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Roles\",\n                url: \"admin/roles\",\n                target: \"__use_router__\"\n            }, {\n                title: \"API keys\",\n                url: \"userskeys/all_users\"\n            }, {\n                title: \"Impersonate a user\",\n                url: \"admin/impersonate\",\n                enabled: self.config.allow_user_impersonation\n            }]\n        }, {\n            title: \"Data\",\n            items: [{\n                title: \"Quotas\",\n                url: \"admin/quotas\",\n                target: \"__use_router__\",\n                enabled: self.config.enable_quotas\n            }, {\n                title: \"Data libraries\",\n                url: \"library_admin/browse_libraries\"\n            }, {\n                title: \"Roles\",\n                url: \"admin/roles\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Local data\",\n                url: \"data_manager\"\n            }]\n        }, {\n            title: \"Form Definitions\",\n            items: [{\n                title: \"Form definitions\",\n                url: \"admin/forms\",\n                target: \"__use_router__\"\n            }]\n        }, {\n            title: \"Sample Tracking\",\n            items: [{\n                title: \"Sequencers and external services\",\n                url: \"external_service/browse_external_services\"\n            }, {\n                title: \"Request types\",\n                url: \"request_type/browse_request_types\"\n            }, {\n                title: \"Sequencing requests\",\n                url: \"requests_admin/browse_requests\"\n            }, {\n                title: \"Find samples\",\n                url: \"requests_common/find_samples?cntrller=requests_admin\"\n            }]\n        }]);\n        this.setElement(this._template());\n    },\n\n    render: function render() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each(function (category) {\n            var $section = $(self._templateSection(category.attributes));\n            var $entries = $section.find(\".ui-side-section-body\");\n            _.each(category.get(\"items\"), function (item) {\n                if (item.enabled === undefined || item.enabled) {\n                    var $link = $(\"<a/>\").attr({ href: self.root + item.url }).text((0, _localization2.default)(item.title));\n                    if (item.target == \"__use_router__\") {\n                        $link.on(\"click\", function (e) {\n                            e.preventDefault();\n                            self.page.router.push(item.url);\n                        });\n                    } else {\n                        $link.attr(\"target\", \"galaxy_main\");\n                    }\n                    $entries.append($(\"<div/>\").addClass(\"ui-side-section-body-title\").append($link));\n                }\n            });\n            self.$el.append($section);\n        });\n        this.page.$(\"#galaxy_main\").prop(\"src\", this.root + \"admin/center?message=\" + this.message + \"&status=\" + this.status);\n    },\n\n    _templateSection: function _templateSection(options) {\n        return [\"<div>\", '<div class=\"ui-side-section-title\">' + (0, _localization2.default)(options.title) + \"</div>\", '<div class=\"ui-side-section-body\"/>', \"</div>\"].join(\"\");\n    },\n\n    _template: function _template() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString: function toString() {\n        return \"adminPanel\";\n    }\n});\n\nexports.default = AdminPanel;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 16:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(27), __webpack_require__(28), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n    // grid view\n    return Backbone.View.extend({\n        // model\n        grid: null,\n\n        // Initialize\n        initialize: function initialize(grid_config) {\n            this.grid = new GridModel();\n            this.dict_format = grid_config.dict_format;\n            this.title = grid_config.title;\n            var self = this;\n            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n                // Put tag name and value together.\n                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n                var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                if (!advanced_search) {\n                    $(\"#standard-search\").slideToggle(\"fast\");\n                    $(\"#advanced-search\").slideToggle(\"fast\");\n                }\n                self.add_filter_condition(\"tags\", tag);\n            };\n\n            // set element\n            if (this.dict_format) {\n                this.setElement(\"<div/>\");\n                if (grid_config.url_base && !grid_config.items) {\n                    var url_data = grid_config.url_data || {};\n                    _.each(grid_config.filters, function (v, k) {\n                        url_data[\"f-\" + k] = v;\n                    });\n                    $.ajax({\n                        url: grid_config.url_base + \"?\" + $.param(url_data),\n                        success: function success(response) {\n                            response.embedded = grid_config.embedded;\n                            response.filters = grid_config.filters || {};\n                            self.init_grid(response);\n                        }\n                    });\n                } else {\n                    this.init_grid(grid_config);\n                }\n            } else {\n                this.setElement(\"#grid-container\");\n                this.init_grid(grid_config);\n            }\n\n            // fix padding\n            if (grid_config.use_panels) {\n                $(\"#center\").css({\n                    padding: \"10px\",\n                    overflow: \"auto\"\n                });\n            }\n        },\n\n        // refresh frames\n        handle_refresh: function handle_refresh(refresh_frames) {\n            if (refresh_frames) {\n                if ($.inArray(\"history\", refresh_frames) > -1) {\n                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                }\n            }\n        },\n\n        // Initialize\n        init_grid: function init_grid(grid_config) {\n            this.grid.set(grid_config);\n\n            // get options\n            var options = this.grid.attributes;\n\n            if (this.allow_title_display && options.title) {\n                Utils.setWindowTitle(options.title);\n            }\n            // handle refresh requests\n            this.handle_refresh(options.refresh_frames);\n\n            // strip protocol and domain\n            var url = this.grid.get(\"url_base\");\n            url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n            this.grid.set(\"url_base\", url);\n\n            // append main template\n            this.$el.html(Templates.grid(options));\n\n            // update div contents\n            this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n            this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n            this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n            // update message\n            if (options.message) {\n                this.$el.find(\"#grid-message\").html(Templates.message(options));\n                var self = this;\n                if (options.use_hide_message) {\n                    setTimeout(function () {\n                        self.$el.find(\"#grid-message\").html(\"\");\n                    }, 5000);\n                }\n            }\n\n            // configure elements\n            this.init_grid_elements();\n            this.init_grid_controls();\n\n            // attach global event handler\n            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n            init_refresh_on_change();\n        },\n\n        // Initialize grid controls\n        init_grid_controls: function init_grid_controls() {\n            // link\n            var self = this;\n\n            // Initialize grid operation button.\n            this.$el.find(\".operation-button\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.submit_operation(this);\n                    return false;\n                });\n            });\n\n            // Initialize text filters to select text on click and use normal font when user is typing.\n            this.$el.find(\"input[type=text]\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    $(this).select();\n                }).keyup(function () {\n                    $(this).css(\"font-style\", \"normal\");\n                });\n            });\n\n            // Initialize sort links.\n            this.$el.find(\".sort-link\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_sort_condition($(this).attr(\"sort_key\"));\n                    return false;\n                });\n            });\n\n            // Initialize text filters.\n            this.$el.find(\".text-filter-form\").each(function () {\n                $(this).off();\n                $(this).submit(function () {\n                    var column_key = $(this).attr(\"column_key\");\n                    var text_input_obj = $(\"#input-\" + column_key + \"-filter\");\n                    var text_input = text_input_obj.val();\n                    text_input_obj.val(\"\");\n                    self.add_filter_condition(column_key, text_input);\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".text-filter-val > a\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    // Remove visible element.\n                    $(this).parent().remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n\n                    // Return\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".categorical-filter > a\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_categorical_filter($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n                    return false;\n                });\n            });\n\n            // Initialize standard, advanced search toggles.\n            this.$el.find(\".advanced-search-toggle\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                    self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                    return false;\n                });\n            });\n\n            // Add event to check all box\n            this.$el.find(\"#check_all\").off();\n            this.$el.find(\"#check_all\").on(\"click\", function () {\n                self.check_all_items();\n            });\n        },\n\n        // Initialize grid elements.\n        init_grid_elements: function init_grid_elements() {\n            // Initialize grid selection checkboxes.\n            this.$el.find(\".grid\").each(function () {\n                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n                var check_count = $(this).find(\"span.grid-selected-count\");\n                var update_checked = function update_checked() {\n                    check_count.text($(checkboxes).filter(\":checked\").length);\n                };\n\n                $(checkboxes).each(function () {\n                    $(this).change(update_checked);\n                });\n                update_checked();\n            });\n\n            // Initialize ratings.\n            if (this.$el.find(\".community_rating_star\").length !== 0) this.$el.find(\".community_rating_star\").rating({});\n\n            // get options\n            var options = this.grid.attributes;\n            var self = this;\n\n            //\n            // add page click events\n            //\n            this.$el.find(\".page-link > a\").each(function () {\n                $(this).click(function () {\n                    self.set_page($(this).attr(\"page_num\"));\n                    return false;\n                });\n            });\n\n            //\n            // add inbound/outbound events\n            //\n            this.$el.find(\".use-target\").each(function () {\n                $(this).click(function (e) {\n                    self.execute({\n                        href: $(this).attr(\"href\"),\n                        target: $(this).attr(\"target\")\n                    });\n                    return false;\n                });\n            });\n\n            // empty grid?\n            var items_length = options.items.length;\n            if (items_length == 0) {\n                return;\n            }\n\n            // add operation popup menus\n            _.each(options.items, function (item, index) {\n                var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                var popup = new PopupMenu(button);\n                _.each(options[\"operations\"], function (operation) {\n                    self._add_operation(popup, operation, item);\n                });\n            });\n        },\n\n        /** Add an operation to the items menu */\n        _add_operation: function _add_operation(popup, operation, item) {\n            var self = this;\n            var settings = item.operation_config[operation.label];\n            if (settings.allowed && operation.allow_popup) {\n                popup.addItem({\n                    html: operation.label,\n                    href: settings.url_args,\n                    target: settings.target,\n                    confirmation_text: operation.confirm,\n                    func: function func(e) {\n                        e.preventDefault();\n                        var label = $(e.target).html();\n                        if (operation.onclick) {\n                            operation.onclick(item.encode_id);\n                        } else {\n                            self.execute(this.findItemByHtml(label));\n                        }\n                    }\n                });\n            }\n        },\n\n        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n        add_filter_condition: function add_filter_condition(name, value) {\n            // Do nothing is value is empty.\n            if (value === \"\") {\n                return false;\n            }\n\n            // Add condition to grid.\n            this.grid.add_filter(name, value, true);\n\n            // Add button that displays filter and provides a button to delete it.\n            var t = $(Templates.filter_element(name, value));\n            var self = this;\n            t.click(function () {\n                // Remove visible element.\n                $(this).remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition(name, value);\n            });\n\n            // append to container\n            var container = this.$el.find(\"#\" + name + \"-filtering-criteria\");\n            container.append(t);\n\n            // execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n        remove_filter_condition: function remove_filter_condition(name, value) {\n            // Remove filter condition.\n            this.grid.remove_filter(name, value);\n\n            // Execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set sort condition for grid.\n        set_sort_condition: function set_sort_condition(col_key) {\n            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n            // currently sorted column, sort is reversed.\n            var cur_sort = this.grid.get(\"sort_key\");\n            var new_sort = col_key;\n            if (cur_sort.indexOf(col_key) !== -1) {\n                // Reverse sort.\n                if (cur_sort.substring(0, 1) !== \"-\") {\n                    new_sort = \"-\" + col_key;\n                }\n            }\n\n            // Remove sort arrows elements.\n            this.$el.find(\".sort-arrow\").remove();\n\n            // Add sort arrow element to new sort column.\n            var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n            var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\"sort-arrow\");\n\n            // Add to header\n            this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n            // Update grid.\n            this.grid.set(\"sort_key\", new_sort);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set new value for categorical filter.\n        set_categorical_filter: function set_categorical_filter(name, new_value) {\n            // Update filter hyperlinks to reflect new filter value.\n            var category_filter = this.grid.get(\"categorical_filters\")[name],\n                cur_value = this.grid.get(\"filters\")[name];\n            var self = this;\n            this.$el.find(\".\" + name + \"-filter\").each(function () {\n                var text = $.trim($(this).text());\n                var filter = category_filter[text];\n                var filter_value = filter[name];\n                if (filter_value == new_value) {\n                    // Remove filter link since grid will be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    $(this).empty();\n                    $(this).addClass(\"current-filter\");\n                    $(this).append(text);\n                } else if (filter_value == cur_value) {\n                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    $(this).empty();\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function () {\n                        self.set_categorical_filter(name, filter_value);\n                    });\n                    $(this).removeClass(\"current-filter\");\n                    $(this).append(t);\n                }\n            });\n\n            // Update grid.\n            this.grid.add_filter(name, new_value);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set page to view.\n        set_page: function set_page(new_page) {\n            // Update page hyperlink to reflect new page.\n            var self = this;\n            this.$el.find(\".page-link\").each(function () {\n                var id = $(this).attr(\"id\"),\n                    page_num = parseInt(id.split(\"-\")[2], 10),\n                    // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get(\"cur_page\"),\n                    text;\n                if (page_num === new_page) {\n                    // Remove link to page since grid will be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    text = $(this).children().text();\n                    $(this).empty();\n                    $(this).addClass(\"inactive-link\");\n                    $(this).text(text);\n                } else if (page_num === cur_page) {\n                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    text = $(this).text();\n                    $(this).empty();\n                    $(this).removeClass(\"inactive-link\");\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function () {\n                        self.set_page(page_num);\n                    });\n                    $(this).append(t);\n                }\n            });\n\n            if (new_page === \"all\") {\n                this.grid.set(\"cur_page\", new_page);\n            } else {\n                this.grid.set(\"cur_page\", parseInt(new_page, 10));\n            }\n            this.execute();\n        },\n\n        // confirmation/submission of operation request\n        submit_operation: function submit_operation(operation_button, confirmation_text) {\n            // identify operation\n            var operation_name = $(operation_button).val();\n\n            // verify in any item is selected\n            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n            if (!number_of_checked_ids > 0) {\n                return false;\n            }\n\n            // Check to see if there's grid confirmation text for this operation\n            var operation = _.findWhere(this.grid.attributes.operations, {\n                label: operation_name\n            });\n            if (operation && !confirmation_text) {\n                confirmation_text = operation.confirm || \"\";\n            }\n\n            // collect ids\n            var item_ids = [];\n            this.$el.find(\"input[name=id]:checked\").each(function () {\n                item_ids.push($(this).val());\n            });\n\n            // execute operation\n            var options = {\n                operation: operation_name,\n                id: item_ids,\n                confirmation_text: confirmation_text\n            };\n            if (operation.target == \"top\") {\n                options = _.extend(options, {\n                    href: operation.href,\n                    target: operation.target\n                });\n            }\n            this.execute(options);\n            return true;\n        },\n\n        check_all_items: function check_all_items() {\n            var check = this.$(\".grid-row-select-checkbox\");\n            var state = this.$(\"#check_all\").prop(\"checked\");\n            _.each(check, function (c) {\n                $(c).prop(\"checked\", state);\n            });\n            this.init_grid_elements();\n        },\n\n        // Go back to page one; this is useful when a filter is applied.\n        go_page_one: function go_page_one() {\n            // Need to go back to page 1 if not showing all.\n            var cur_page = this.grid.get(\"cur_page\");\n            if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n                this.grid.set(\"cur_page\", 1);\n            }\n        },\n\n        //\n        // execute operations and hyperlink requests\n        //\n        execute: function execute(options) {\n            // get url\n            var id = null;\n            var href = null;\n            var operation = null;\n            var confirmation_text = null;\n            var target = null;\n\n            // check for options\n            if (options) {\n                // get options\n                href = options.href;\n                operation = options.operation;\n                id = options.id;\n                confirmation_text = options.confirmation_text;\n                target = options.target;\n\n                // check if input contains the operation tag\n                if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                    // Get operation, id in hyperlink's href.\n                    var href_parts = href.split(\"?\");\n                    if (href_parts.length > 1) {\n                        var href_parms_str = href_parts[1];\n                        var href_parms = href_parms_str.split(\"&\");\n                        for (var index = 0; index < href_parms.length; index++) {\n                            if (href_parms[index].indexOf(\"operation\") != -1) {\n                                // Found operation parm; get operation value.\n                                operation = href_parms[index].split(\"=\")[1];\n                                operation = operation.replace(/\\+/g, \" \");\n                            } else if (href_parms[index].indexOf(\"id\") != -1) {\n                                // Found id parm; get id value.\n                                id = href_parms[index].split(\"=\")[1];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // check for operation details\n            if (operation && id) {\n                // show confirmation box\n                if (confirmation_text && confirmation_text != \"\" && confirmation_text != \"None\" && confirmation_text != \"null\") if (!confirm(confirmation_text)) return false;\n\n                // use small characters for operation?!\n                operation = operation.toLowerCase();\n\n                // Update grid.\n                this.grid.set({\n                    operation: operation,\n                    item_ids: id\n                });\n\n                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                if (target == \"top\") {\n                    window.top.location = href + \"?\" + $.param(this.grid.get_url_data());\n                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            }\n\n            // refresh grid\n            if (href) {\n                this.go_to(target, href);\n                return false;\n            }\n\n            // refresh grid\n            if (this.grid.get(\"async\") || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        },\n\n        // go to url\n        go_to: function go_to(target, href) {\n            // get aysnc status\n            var async = this.grid.get(\"async\");\n            this.grid.set(\"async\", false);\n\n            // get slide status\n            var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n            this.grid.set(\"advanced_search\", advanced_search);\n\n            // get default url\n            if (!href) {\n                href = this.grid.get(\"url_base\") + \"?\" + $.param(this.grid.get_url_data());\n            }\n\n            // clear grid of transient request attributes.\n            this.grid.set({\n                operation: undefined,\n                item_ids: undefined,\n                async: async\n            });\n            switch (target) {\n                case \"inbound\":\n                    // this currently assumes that there is only a single grid shown at a time\n                    var $div = $(\".grid-header\").closest(\".inbound\");\n                    if ($div.length !== 0) {\n                        $div.load(href);\n                        return;\n                    }\n                    break;\n                case \"top\":\n                    window.top.location = href;\n                    break;\n                default:\n                    window.location = href;\n            }\n        },\n\n        // Update grid.\n        update_grid: function update_grid() {\n            // If there's an operation, do POST; otherwise, do GET.\n            var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n            // Show overlay to indicate loading and prevent user actions.\n            this.$el.find(\".loading-elt-overlay\").show();\n            var self = this;\n            $.ajax({\n                type: method,\n                url: self.grid.get(\"url_base\"),\n                data: self.grid.get_url_data(),\n                error: function error(response) {\n                    alert(\"Grid refresh failed\");\n                },\n                success: function success(response_text) {\n                    // backup\n                    var embedded = self.grid.get(\"embedded\");\n                    var insert = self.grid.get(\"insert\");\n                    var advanced_search = self.$el.find(\"#advanced-search\").is(\":visible\");\n\n                    // request new configuration\n                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                    // update\n                    json.embedded = embedded;\n                    json.insert = insert;\n                    json.advanced_search = advanced_search;\n\n                    // Initialize new grid config\n                    self.init_grid(json);\n\n                    // Hide loading overlay.\n                    self.$el.find(\".loading-elt-overlay\").hide();\n                },\n                complete: function complete() {\n                    // Clear grid of transient request attributes.\n                    self.grid.set({\n                        operation: undefined,\n                        item_ids: undefined\n                    });\n                }\n            });\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class creates/wraps a default html select field as backbone class.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-select\",\n                error_text: \"No options available\",\n                empty_text: \"Nothing selected\",\n                visible: true,\n                wait: false,\n                multiple: false,\n                searchable: true,\n                optional: false,\n                disabled: false,\n                readonly: false,\n                onchange: function onchange() {},\n                value: null,\n                individual: false,\n                pagesize: 20\n            }).set(options);\n            this.on(\"change\", function () {\n                self.model.get(\"onchange\") && self.model.get(\"onchange\")(self.value());\n            });\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:disabled\", this._changeDisabled, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:multiple change:searchable change:cls change:id\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.model.get(\"searchable\") ? this._renderSearchable() : this._renderClassic();\n            this.$el.addClass(this.model.get(\"cls\")).attr(\"id\", this.model.get(\"id\"));\n            this.$select.empty().addClass(\"select\").attr(\"id\", this.model.get(\"id\") + \"_select\").prop(\"multiple\", this.model.get(\"multiple\")).on(\"change\", function () {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function _renderClassic() {\n            var self = this;\n            this.$el.addClass(this.model.get(\"multiple\") ? \"ui-select-multiple\" : \"ui-select\").append(this.$select = $(\"<select/>\")).append(this.$dropdown = $(\"<div/>\")).append(this.$resize = $(\"<div/>\").append(this.$resize_icon = $(\"<i/>\")));\n            if (this.model.get(\"multiple\")) {\n                this.$dropdown.hide();\n                this.$resize_icon.addClass(\"fa fa-angle-double-right fa-rotate-45\").show();\n                this.$resize.removeClass().addClass(\"icon-resize\").show().off(\"mousedown\").on(\"mousedown\", function (event) {\n                    var currentY = event.pageY;\n                    var currentHeight = self.$select.height();\n                    self.minHeight = self.minHeight || currentHeight;\n                    $(\"#dd-helper\").show().on(\"mousemove\", function (event) {\n                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n                    }).on(\"mouseup mouseleave\", function () {\n                        $(\"#dd-helper\").hide().off();\n                    });\n                });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function _renderSearchable() {\n            var self = this;\n            this.$el.append(this.$select = $(\"<div/>\")).append(this.$dropdown = $(\"<div/>\"));\n            this.$dropdown.hide();\n            if (!this.model.get(\"multiple\")) {\n                this.$dropdown.show().on(\"click\", function () {\n                    self.$select.select2 && self.$select.select2(\"open\");\n                });\n            }\n            this.all_button = null;\n            if (this.model.get(\"multiple\") && !this.model.get(\"individual\") && !this.model.get(\"readonly\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 && _.each(self.model.get(\"data\"), function (option) {\n                            new_value.push(option.value);\n                        });\n                        self.value(new_value);\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function _match(term, text) {\n            return !term || term == \"\" || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n        },\n\n        /** Updates the selection options */\n        _changeData: function _changeData() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: self.model.get(\"empty_text\")\n                });\n            }\n            _.each(this.model.get(\"data\"), function (option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: this.model.get(\"error_text\")\n                });\n            }\n            if (this.model.get(\"searchable\")) {\n                this.data2 = [];\n                _.each(this.data, function (option, index) {\n                    self.data2.push({\n                        order: index,\n                        id: option.value,\n                        text: option.label,\n                        tags: option.tags\n                    });\n                });\n                this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get(\"multiple\"),\n                    multiple: this.model.get(\"multiple\"),\n                    query: function query(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get(\"pagesize\");\n                        var results = _.filter(self.data2, function (e) {\n                            var found = false;\n                            _.each(e.tags, function (tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function formatResult(result) {\n                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n                            if (self.matched_tags[tag]) {\n                                return memo + \"&nbsp;\" + '<div class=\"label label-info\">' + _.escape(tag) + \"</div>\";\n                            }\n                            return memo;\n                        }, \"\") + \"</div>\";\n                    }\n                });\n                this.$(\".select2-container .select2-search input\").off(\"blur\");\n            } else {\n                this.$select.find(\"option\").remove();\n                _.each(this.data, function (option) {\n                    self.$select.append($(\"<option/>\").attr(\"value\", option.value).html(_.escape(option.label)));\n                });\n            }\n            this.model.set(\"disabled\", this.model.get(\"readonly\") || this.length() == 0);\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function _changeDisabled() {\n            if (this.model.get(\"searchable\")) {\n                this.$select.select2(this.model.get(\"disabled\") ? \"disable\" : \"enable\");\n            } else {\n                this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function _changeWait() {\n            this.$dropdown.removeClass().addClass(\"icon-dropdown fa\").addClass(this.model.get(\"wait\") ? \"fa-spinner fa-spin\" : \"fa-caret-down\");\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get(\"value\"));\n            if (this.model.get(\"multiple\")) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n                }\n            } else if (this._getValue() === null && !this.model.get(\"optional\")) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function first() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function exists(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function text() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : \"\";\n        },\n\n        /** Show the select field */\n        show: function show() {\n            this.model.set(\"visible\", true);\n        },\n\n        /** Hide the select field */\n        hide: function hide() {\n            this.model.set(\"visible\", false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function disabled() {\n            return this.model.get(\"disabled\");\n        },\n\n        /** Enable the select field */\n        enable: function enable() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Disable the select field */\n        disable: function disable() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Update all available options at once */\n        add: function add(options, sorter) {\n            _.each(this.model.get(\"data\"), function (v) {\n                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set(\"data\", options);\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function setOnChange(callback) {\n            this.model.set(\"onchange\", callback);\n        },\n\n        /** Number of available options */\n        length: function length() {\n            return $.isArray(this.model.get(\"data\")) ? this.model.get(\"data\").length : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = \"__null__\";\n            }\n            if (this.model.get(\"multiple\")) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = \"__null__\";\n                }\n            }\n            if (this.model.get(\"searchable\")) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function (v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2(\"data\", new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var val = null;\n            if (this.model.get(\"searchable\")) {\n                var selected = this.$select.select2(\"data\");\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function (a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function (v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 18:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Base class for options based ui elements **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                visible: true,\n                data: [],\n                id: Utils.uid(),\n                error_text: \"No options available.\",\n                wait_text: \"Please wait...\",\n                multiple: false,\n                optional: false,\n                onchange: function onchange() {}\n            }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n            this.on(\"change\", function () {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.$el.empty().removeClass().addClass(\"ui-options\").append(this.$message = $(\"<div/>\")).append(this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")).append(this.$options = $(this._template()));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        self.$(\"input\").prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function _changeData() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(this._templateOptions(this.model.get(\"data\")));\n            } else {\n                _.each(this.model.get(\"data\"), function (option) {\n                    self.$options.append($(self._templateOption(option)).addClass(\"ui-option\").tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    }));\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function () {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function _changeWait() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get(\"value\"));\n            if (this._getValue() === null && !this.model.get(\"multiple\") && !this.model.get(\"optional\")) {\n                this._setValue(this.first());\n            }\n            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function first() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function length() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function (v) {\n                        self.$('input[value=\"' + v + '\"]').first().prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function _getValue() {\n            var selected = [];\n            this.$(\":checked\").each(function () {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function _messageShow(text, status) {\n            this.$message.show().removeClass().addClass(\"ui-message alert alert-\" + status).html(text);\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function _templateOption(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\").addClass(\"ui-option\").append($(\"<input/>\").attr({\n                id: id,\n                type: this.model.get(\"type\"),\n                name: this.model.id,\n                value: pair.value\n            })).append($(\"<label/>\").addClass(\"ui-options-label\").attr(\"for\", id).html(pair.label));\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function initialize(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function _setValue(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]').prop(\"checked\", true).closest(\"label\").addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function _templateOption(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon && $el.append($(\"<i/>\").addClass(\"fa\").addClass(pair.icon).addClass(!pair.label && \"no-padding\"));\n            $el.append($(\"<input/>\").attr({\n                type: \"radio\",\n                name: this.model.id,\n                value: pair.value\n            }));\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"btn-group ui-radiobutton\").attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n    // ui list element\n    var View = Backbone.View.extend({\n        // create portlet to keep track of selected list elements\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // initialize options\n            this.options = options;\n            this.name = options.name || \"element\";\n            this.multiple = options.multiple || false;\n\n            // create message handler\n            this.message = new Ui.Message();\n\n            // create portlet\n            this.portlet = new Portlet.View({ cls: \"ui-portlet-section\" });\n\n            // create select field containing the options which can be inserted into the list\n            this.select = new Ui.Select.View({ optional: options.optional });\n\n            // create insert new list element button\n            this.button = new Ui.ButtonIcon({\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Insert new \" + this.name,\n                onclick: function onclick() {\n                    self.add({\n                        id: self.select.value(),\n                        name: self.select.text()\n                    });\n                }\n            });\n\n            // build main element\n            this.setElement(this._template(options));\n            this.$(\".ui-list-message\").append(this.message.$el);\n            this.$(\".ui-list-portlet\").append(this.portlet.$el);\n            this.$(\".ui-list-button\").append(this.button.$el);\n            this.$(\".ui-list-select\").append(this.select.$el);\n        },\n\n        /** Return/Set currently selected list elements */\n        value: function value(val) {\n            // set new value\n            if (val !== undefined) {\n                this.portlet.empty();\n                if ($.isArray(val)) {\n                    for (var i in val) {\n                        var v = val[i];\n                        var v_id = null;\n                        var v_name = null;\n                        if ($.type(v) != \"string\") {\n                            v_id = v.id;\n                            v_name = v.name;\n                        } else {\n                            v_id = v_name = v;\n                        }\n                        if (v_id != null) {\n                            this.add({\n                                id: v_id,\n                                name: v_name\n                            });\n                        }\n                    }\n                }\n                this._refresh();\n            }\n            // get current value\n            var lst = [];\n            this.$(\".ui-list-id\").each(function () {\n                lst.push({\n                    id: $(this).prop(\"id\"),\n                    name: $(this).find(\".ui-list-name\").html()\n                });\n            });\n            if (lst.length == 0) {\n                return null;\n            }\n            return lst;\n        },\n\n        /** Add row */\n        add: function add(options) {\n            var self = this;\n            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n                if (!Utils.isEmpty(options.id)) {\n                    var $el = $(this._templateRow({\n                        id: options.id,\n                        name: options.name\n                    }));\n                    $el.on(\"click\", function () {\n                        $el.remove();\n                        self._refresh();\n                    });\n                    $el.on(\"mouseover\", function () {\n                        $el.addClass(\"portlet-highlight\");\n                    });\n                    $el.on(\"mouseout\", function () {\n                        $el.removeClass(\"portlet-highlight\");\n                    });\n                    this.portlet.append($el);\n                    this._refresh();\n                } else {\n                    this.message.update({\n                        message: \"Please select a valid \" + this.name + \".\",\n                        status: \"danger\"\n                    });\n                }\n            } else {\n                this.message.update({\n                    message: \"This \" + this.name + \" is already in the list.\"\n                });\n            }\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.select.update(options);\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            if (this.$(\".ui-list-id\").length > 0) {\n                !this.multiple && this.button.disable();\n                this.$(\".ui-list-portlet\").show();\n            } else {\n                this.button.enable();\n                this.$(\".ui-list-portlet\").hide();\n            }\n            this.options.onchange && this.options.onchange();\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-list\">' + '<div class=\"ui-margin-top\">' + '<span class=\"ui-list-button\"/>' + '<span class=\"ui-list-select\"/>' + \"</div>\" + '<div class=\"ui-list-message\"/>' + '<div class=\"ui-list-portlet\"/>' + \"</div>\";\n        },\n\n        /** Row Template */\n        _templateRow: function _templateRow(options) {\n            return '<div id=\"' + options.id + '\" class=\"ui-list-id\">' + '<span class=\"ui-list-delete fa fa-trash\"/>' + '<span class=\"ui-list-name\">' + options.name + \"</span>\" + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    //jquery\n    //backbone\n], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // =============================================================================\n    /**\n    * view for a popup menu\n    */\n    var PopupMenu = Backbone.View.extend({\n        //TODO: maybe better as singleton off the Galaxy obj\n        /** Cache the desired button element and options, set up the button click handler\n        *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n        */\n        initialize: function initialize($button, options) {\n            // default settings\n            this.$button = $button;\n            if (!this.$button.length) {\n                this.$button = $(\"<div/>\");\n            }\n            this.options = options || [];\n            this.$button.data(\"popupmenu\", this);\n\n            // set up button click -> open menu behavior\n            var menu = this;\n            this.$button.click(function (event) {\n                // if there's already a menu open, remove it\n                $(\".popmenu-wrapper\").remove();\n                menu._renderAndShow(event);\n                return false;\n            });\n        },\n\n        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n        _renderAndShow: function _renderAndShow(clickEvent) {\n            this.render();\n            this.$el.appendTo(\"body\").css(this._getShownPosition(clickEvent)).show();\n            this._setUpCloseBehavior();\n        },\n\n        // render the menu\n        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n        render: function render() {\n            // render the menu body absolute and hidden, fill with template\n            this.$el.addClass(\"popmenu-wrapper\").hide().css({ position: \"absolute\" }).html(this.template(this.$button.attr(\"id\"), this.options));\n\n            // set up behavior on each link/anchor elem\n            if (this.options.length) {\n                var menu = this;\n                //precondition: there should be one option per li\n                this.$el.find(\"li\").each(function (i, li) {\n                    var option = menu.options[i];\n\n                    // if the option has 'func', call that function when the anchor is clicked\n                    if (option.func) {\n                        $(this).children(\"a.popupmenu-option\").click(function (event) {\n                            option.func.call(menu, event, option);\n                            // We must preventDefault otherwise clicking \"cancel\"\n                            // on a purge or something still navigates and causes\n                            // the action.\n                            event.preventDefault();\n                            // bubble up so that an option click will call the close behavior\n                        });\n                    }\n                });\n            }\n            return this;\n        },\n\n        template: function template(id, options) {\n            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), \"</ul>\"].join(\"\");\n        },\n\n        _templateOptions: function _templateOptions(options) {\n            if (!options.length) {\n                return \"<li>(no options)</li>\";\n            }\n            return _.map(options, function (option) {\n                if (option.divider) {\n                    return '<li class=\"divider\"></li>';\n                } else if (option.header) {\n                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, \"</a></li>\"].join(\"\");\n                }\n                var href = option.href || \"javascript:void(0);\",\n                    target = option.target ? ' target=\"' + option.target + '\"' : \"\",\n                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : \"\";\n                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, \">\", check, option.html, \"</a></li>\"].join(\"\");\n            }).join(\"\");\n        },\n\n        // get the absolute position/offset for the menu\n        _getShownPosition: function _getShownPosition(clickEvent) {\n            // display menu horiz. centered on click...\n            var menuWidth = this.$el.width();\n            var x = clickEvent.pageX - menuWidth / 2;\n\n            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n            x = Math.max(x, $(document).scrollLeft() + 5);\n            return {\n                top: clickEvent.pageY,\n                left: x\n            };\n        },\n\n        // bind an event handler to all available frames so that when anything is clicked\n        // the menu is removed from the DOM and the event handler unbinds itself\n        _setUpCloseBehavior: function _setUpCloseBehavior() {\n            var menu = this;\n            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n            // function to close popup and unbind itself\n            function closePopup(event) {\n                $(document).off(\"click.close_popup\");\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document).off(\"click.close_popup\");\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\").contents().off(\"click.close_popup\");\n                    } catch (err) {}\n                }\n                menu.remove();\n            }\n\n            $(\"html\").one(\"click.close_popup\", closePopup);\n            if (window && window.parent !== window) {\n                try {\n                    $(window.parent.document).find(\"html\").one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            } else {\n                try {\n                    $(\"iframe#galaxy_main\").contents().one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            }\n        },\n\n        // add a menu option/item at the given index\n        addItem: function addItem(item, index) {\n            // append to end if no index\n            index = index >= 0 ? index : this.options.length;\n            this.options.splice(index, 0, item);\n            return this;\n        },\n\n        // remove a menu option/item at the given index\n        removeItem: function removeItem(index) {\n            if (index >= 0) {\n                this.options.splice(index, 1);\n            }\n            return this;\n        },\n\n        // search for a menu option by its html\n        findIndexByHtml: function findIndexByHtml(html) {\n            for (var i = 0; i < this.options.length; i++) {\n                if (_.has(this.options[i], \"html\") && this.options[i].html === html) {\n                    return i;\n                }\n            }\n            return null;\n        },\n\n        // search for a menu option by its html\n        findItemByHtml: function findItemByHtml(html) {\n            return this.options[this.findIndexByHtml(html)];\n        },\n\n        // string representation\n        toString: function toString() {\n            return \"PopupMenu\";\n        }\n    });\n    /** shortcut to new for when you don't need to preserve the ref */\n    PopupMenu.create = function _create($button, options) {\n        return new PopupMenu($button, options);\n    };\n\n    // -----------------------------------------------------------------------------\n    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n    // to the newer backbone.js PopupMenu\n\n    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n    *      Converts initial_options to object array used by PopupMenu.\n    *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n    *  @param {Object} initial_options map of key -> values, where\n    *      key is option text, value is fn to call when option is clicked\n    *  @returns {PopupMenu} the PopupMenu created\n    */\n    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n        var convertedOptions = [];\n        _.each(initial_options, function (optionVal, optionKey) {\n            var newOption = { html: optionKey };\n\n            // keys with null values indicate: header\n            if (optionVal === null) {\n                // !optionVal? (null only?)\n                newOption.header = true;\n\n                // keys with function values indicate: a menu option\n            } else if (jQuery.type(optionVal) === \"function\") {\n                newOption.func = optionVal;\n            }\n            //TODO:?? any other special optionVals?\n            // there was no divider option originally\n            convertedOptions.push(newOption);\n        });\n        return new PopupMenu($(button_element), convertedOptions);\n    };\n\n    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n    *  @param {jQuery} $parent the element that contains the links to convert to options\n    *  @param {String} selector jq selector string to find links\n    *  @returns {Object[]} the options array to initialize a PopupMenu\n    */\n    //TODO: lose parent and selector, pass in array of links, use map to return options\n    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n        $parent = $($parent);\n        selector = selector || \"a\";\n        var options = [];\n        $parent.find(selector).each(function (elem, i) {\n            var option = {},\n                $link = $(elem);\n\n            // convert link text to the option text (html) and the href into the option func\n            option.html = $link.text();\n            if ($link.attr(\"href\")) {\n                var linkHref = $link.attr(\"href\"),\n                    linkTarget = $link.attr(\"target\"),\n                    confirmText = $link.attr(\"confirm\");\n\n                option.func = function () {\n                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                    //  if the user cancels - do nothing\n                    if (confirmText && !confirm(confirmText)) {\n                        return;\n                    }\n\n                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n                    switch (linkTarget) {\n                        // relocate the center panel\n                        case \"_parent\":\n                            window.parent.location = linkHref;\n                            break;\n\n                        // relocate the entire window\n                        case \"_top\":\n                            window.top.location = linkHref;\n                            break;\n\n                        // relocate this panel\n                        default:\n                            window.location = linkHref;\n                    }\n                };\n            }\n            options.push(option);\n        });\n        return options;\n    };\n\n    /** Create a single popupmenu from existing DOM button and anchor elements\n    *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n    *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n    *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n    *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n    */\n    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n        $buttonElement = $($buttonElement);\n        $menuElement = $($menuElement);\n        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n        // we're done with the menu (having converted it to an options map)\n        $menuElement.remove();\n        return new PopupMenu($buttonElement, options);\n    };\n\n    /** Create all popupmenus within a document or a more specific element\n    *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n    *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n    *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n    *      Will be passed $menuElement, parent.\n    *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n    *  @returns {PopupMenu[]} array of popupmenus created\n    */\n    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n        parent = parent || document;\n        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n        //  which contains the id of the button that activates the menu\n        menuSelector = menuSelector || \"div[popupmenu]\";\n        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n            return \"#\" + $menuElement.attr(\"popupmenu\");\n        };\n\n        // aggregate and return all PopupMenus\n        var popupMenusCreated = [];\n        $(parent).find(menuSelector).each(function () {\n            var $menuElement = $(this),\n                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n            $buttonElement.addClass(\"popup\");\n        });\n        return popupMenusCreated;\n    };\n\n    // =============================================================================\n    return PopupMenu;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui table element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {\n                content: \"No content available.\",\n                onchange: null,\n                ondblclick: null,\n                onconfirm: null,\n                cls: \"ui-table\",\n                selectable: true,\n                cls_tr: \"\"\n            });\n            this.setElement(this._template());\n            this.$thead = this.$(\"thead\");\n            this.$tbody = this.$(\"tbody\");\n            this.$tmessage = this.$(\"tmessage\");\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events: {\n            click: \"_onclick\",\n            dblclick: \"_ondblclick\"\n        },\n\n        /** Add cell to header row */\n        addHeader: function addHeader($el) {\n            this.row.append($(\"<th/>\").append($el));\n        },\n\n        /** Append header row to table */\n        appendHeader: function appendHeader() {\n            this.$thead.append(this.row);\n            this.row = $(\"<tr/>\");\n        },\n\n        /** Add cell to row */\n        add: function add($el, width, align) {\n            var wrapper = $(\"<td/>\");\n            if (width) {\n                wrapper.css(\"width\", width);\n            }\n            if (align) {\n                wrapper.css(\"text-align\", align);\n            }\n            this.row.append(wrapper.append($el));\n        },\n\n        /** Append row to table */\n        append: function append(id, fade) {\n            this._commit(id, fade, false);\n        },\n\n        /** Prepend row to table */\n        prepend: function prepend(id, fade) {\n            this._commit(id, fade, true);\n        },\n\n        /** Helper to get row element */\n        get: function get(id) {\n            return this.$(\"#\" + id);\n        },\n\n        /** Delete row by id */\n        del: function del(id) {\n            var item = this.$tbody.find(\"#\" + id);\n            if (item.length > 0) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function delAll() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function value(new_value) {\n            if (this.options.selectable) {\n                this.before = this.$tbody.find(\".current\").attr(\"id\");\n                if (new_value !== undefined) {\n                    this.$tbody.find(\"tr\").removeClass(\"current\");\n                    if (new_value) {\n                        this.$tbody.find(\"#\" + new_value).addClass(\"current\");\n                    }\n                }\n                var after = this.$tbody.find(\".current\").attr(\"id\");\n                if (after === undefined) {\n                    return null;\n                } else {\n                    if (after != this.before && this.options.onchange) {\n                        this.options.onchange(new_value);\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function size() {\n            return this.$tbody.find(\"tr\").length;\n        },\n\n        /** Helper to append rows */\n        _commit: function _commit(id, fade, prepend) {\n            this.del(id);\n            this.row.attr(\"id\", id);\n            if (prepend) {\n                this.$tbody.prepend(this.row);\n            } else {\n                this.$tbody.append(this.row);\n            }\n            if (fade) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function _row() {\n            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n        },\n\n        /** Handles onclick events */\n        _onclick: function _onclick(e) {\n            var old_value = this.value();\n            var new_value = $(e.target).closest(\"tr\").attr(\"id\");\n            if (new_value != \"\") {\n                if (new_value && old_value != new_value) {\n                    if (this.options.onconfirm) {\n                        this.options.onconfirm(new_value);\n                    } else {\n                        this.value(new_value);\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function _ondblclick(e) {\n            var value = this.value();\n            if (value && this.options.ondblclick) {\n                this.options.ondblclick(value);\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function _refresh() {\n            if (this.row_count == 0) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function _template() {\n            return \"<div>\" + '<table class=\"' + this.options.cls + '\">' + \"<thead/>\" + \"<tbody/>\" + \"</table>\" + \"<tmessage>\" + this.options.content + \"</tmessage>\" + \"<div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/* This class maps the form dom to an api compatible javascript dictionary. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function initialize(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function checksum() {\n            var sum = \"\";\n            var self = this;\n            this.app.section.$el.find(\".section-row\").each(function () {\n                var id = $(this).attr(\"id\");\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum += id + \":\" + JSON.stringify(field.value && field.value()) + \":\" + field.collapsed + \";\";\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function create() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != \"\") {\n                            flat_id += \"|\";\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case \"repeat\":\n                                var section_label = \"section-\";\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(section_label);\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(parseInt(block_label.substr(pos)));\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(0, pos);\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function (a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(flat_id + \"_\" + index++, node[block_prefix + block_indices[i]]);\n                                }\n                                break;\n                            case \"conditional\":\n                                var value = self.app.field_list[input.id].value();\n                                add(flat_id + \"|\" + input.test_param.name, input.id, value);\n                                var selectedCase = _matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(flat_id, head[input.id + \"-section-\" + selectedCase]);\n                                }\n                                break;\n                            case \"section\":\n                                convert(!input.flat && flat_id || \"\", node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (input.ignore === undefined || input.ignore != value) {\n                                        if (field.collapsed && input.collapsible_value) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(p_id, input.id, input.payload[p_id]);\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert(\"\", dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function match(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function matchCase(input, value) {\n            return _matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function matchModel(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function (input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function matchResponse(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === \"string\") {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== \"\") {\n                            var separator = \"|\";\n                            if (head instanceof Array) {\n                                separator = \"_\";\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search(\"\", response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function _iterate(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function () {\n                var child = this;\n                var id = $(child).attr(\"id\");\n                if ($(child).hasClass(\"section-row\")) {\n                    var input = self.app.input_list[id];\n                    dict[id] = input && { input: input } || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var _matchCase = function _matchCase(input, value) {\n        if (input.test_param.type == \"boolean\") {\n            if (value == \"true\") {\n                value = input.test_param.truevalue || \"true\";\n            } else {\n                value = input.test_param.falsevalue || \"false\";\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function visitInputs(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function (input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + \"|\" + node.name : node.name;\n            switch (node.type) {\n                case \"repeat\":\n                    _.each(node.cache, function (cache, j) {\n                        visitInputs(cache, callback, name + \"_\" + j, context);\n                    });\n                    break;\n                case \"conditional\":\n                    if (node.test_param) {\n                        callback(node.test_param, name + \"|\" + node.test_param.name, context);\n                        var selectedCase = _matchCase(node, node.test_param.value);\n                        if (selectedCase != -1) {\n                            visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n                        } else {\n                            Galaxy.emit.debug(\"form-data::visitInputs() - Invalid case for \" + name + \".\");\n                        }\n                    } else {\n                        Galaxy.emit.debug(\"form-data::visitInputs() - Conditional test parameter missing for \" + name + \".\");\n                    }\n                    break;\n                case \"section\":\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 27:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: \"\",\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n        * Return true if operation can be done asynchronously.\n        */\n        can_async_op: function can_async_op(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n        * Add filtering criterion.\n        */\n        add_filter: function add_filter(key, value, append) {\n            // Update URL arg with new condition.\n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == \"string\") {\n                    if (cur_val == \"All\" || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n        * Remove filtering criterion.\n        */\n        remove_filter: function remove_filter(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === \"string\") {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = \"\";\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = \"\";\n                }\n            }\n        },\n\n        /**\n        * Returns URL data for obtaining a new grid.\n        */\n        get_url_data: function get_url_data() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function (k) {\n                url_data[\"f-\" + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function get_url(args) {\n            return this.get(\"url_base\") + \"?\" + $.param(this.get_url_data()) + \"&\" + $.param(args);\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 28:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    // grid view templates\n    return {\n        // template\n        grid: function grid(options) {\n            var tmpl = \"\";\n            if (options.embedded) {\n                tmpl = this.grid_header(options) + this.grid_table(options);\n            } else {\n                tmpl = '<div class=\"loading-elt-overlay\"></div>' + \"<table>\" + \"<tr>\" + '<td width=\"75%\">' + this.grid_header(options) + \"</td>\" + \"<td></td>\" + \"<td></td>\" + \"</tr>\" + \"<tr>\" + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + \"<td></td>\" + \"<td></td>\" + \"</tr>\" + \"</table>\" + this.grid_table(options);\n            }\n\n            // add info text\n            if (options.info_text) {\n                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + \"</div>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        grid_table: function grid_table(options) {\n            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + \"</table>\" + \"</form>\";\n        },\n\n        // template\n        grid_header: function grid_header(options) {\n            var tmpl = '<div class=\"grid-header\">';\n            if (!options.embedded) {\n                tmpl += \"<h2>\" + options.title + \"</h2>\";\n            }\n            if (options.global_actions) {\n                tmpl += '<ul class=\"manage-table-actions\">';\n                var show_popup = options.global_actions.length >= 3;\n                if (show_popup) {\n                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n                }\n                for (var i in options.global_actions) {\n                    var action = options.global_actions[i];\n                    tmpl += \"<li>\" + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + \"</a>\" + \"</li>\";\n                }\n                if (show_popup) {\n                    tmpl += \"</div>\";\n                }\n                tmpl += \"</ul>\";\n            }\n            if (options.insert) {\n                tmpl += options.insert;\n            }\n\n            // add grid filters\n            tmpl += this.grid_filters(options);\n            tmpl += \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        header: function header(options) {\n            // start\n            var tmpl = \"<tr>\";\n\n            // add checkbox\n            if (options.show_item_checkboxes) {\n                tmpl += \"<th>\";\n                if (options.items.length > 0) {\n                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n                }\n                tmpl += \"</th>\";\n            }\n\n            // create header elements\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.visible) {\n                    tmpl += '<th id=\"' + column.key + '-header\">';\n                    if (column.href) {\n                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + \"</a>\";\n                    } else {\n                        tmpl += column.label;\n                    }\n                    tmpl += '<span class=\"sort-arrow\">' + column.extra + \"</span>\" + \"</th>\";\n                }\n            }\n\n            // finalize\n            tmpl += \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        body: function body(options) {\n            // initialize\n            var tmpl = \"\";\n            var num_rows_rendered = 0;\n            var items_length = options.items.length;\n\n            // empty grid?\n            if (items_length == 0) {\n                // No results.\n                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n                num_rows_rendered = 1;\n            }\n\n            // create rows\n            for (var i in options.items) {\n                // encode ids\n                var item = options.items[i];\n                var encoded_id = item.encode_id;\n                var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n                // Tag current\n                tmpl += \"<tr \";\n                if (options.current_item_id == item.id) {\n                    tmpl += 'class=\"current\"';\n                }\n                tmpl += \">\";\n\n                // Item selection column\n                if (options.show_item_checkboxes) {\n                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + \"</td>\";\n                }\n\n                // Data columns\n                for (var j in options.columns) {\n                    var column = options.columns[j];\n                    if (column.visible) {\n                        // Nowrap\n                        var nowrap = \"\";\n                        if (column.nowrap) {\n                            nowrap = 'style=\"white-space:nowrap;\"';\n                        }\n\n                        // get column settings\n                        var column_settings = item.column_config[column.label];\n\n                        // load attributes\n                        var link = column_settings.link;\n                        var value = column_settings.value;\n                        var target = column_settings.target;\n\n                        // unescape value\n                        if (jQuery.type(value) === \"string\") {\n                            value = value.replace(/\\/\\//g, \"/\");\n                        }\n\n                        // Attach popup menu?\n                        var id = \"\";\n                        var cls = \"\";\n                        if (column.attach_popup) {\n                            id = \"grid-\" + i + \"-popup\";\n                            cls = \"menubutton\";\n                            if (link != \"\") {\n                                cls += \" split\";\n                            }\n                            cls += \" popup\";\n                        }\n\n                        // Check for row wrapping\n                        tmpl += \"<td \" + nowrap + \">\";\n\n                        // Link\n                        if (link) {\n                            if (options.operations.length != 0) {\n                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                            }\n                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + \"</a>\";\n                            if (options.operations.length != 0) {\n                                tmpl += \"</div>\";\n                            }\n                        } else {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || \"\") + \"</label></div>\";\n                        }\n                        tmpl += \"</td>\";\n                    }\n                }\n                tmpl += \"</tr>\";\n                num_rows_rendered++;\n            }\n            return tmpl;\n        },\n\n        // template\n        footer: function footer(options) {\n            // create template string\n            var tmpl = \"\";\n\n            // paging\n            if (options.use_paging && options.num_pages > 1) {\n                // get configuration\n                var num_page_links = options.num_page_links;\n                var cur_page_num = options.cur_page_num;\n                var num_pages = options.num_pages;\n\n                // First pass on min page.\n                var page_link_range = num_page_links / 2;\n                var min_page = cur_page_num - page_link_range;\n                var min_offset = 0;\n                if (min_page <= 0) {\n                    // Min page is too low.\n                    min_page = 1;\n                    min_offset = page_link_range - (cur_page_num - min_page);\n                }\n\n                // Set max page.\n                var max_range = page_link_range + min_offset;\n                var max_page = cur_page_num + max_range;\n                var max_offset;\n                if (max_page <= num_pages) {\n                    // Max page is fine.\n                    max_offset = 0;\n                } else {\n                    // Max page is too high.\n                    max_page = num_pages;\n                    // +1 to account for the +1 in the loop below.\n                    max_offset = max_range - (max_page + 1 - cur_page_num);\n                }\n\n                // Second and final pass on min page to add any unused\n                // offset from max to min.\n                if (max_offset != 0) {\n                    min_page -= max_offset;\n                    if (min_page < 1) {\n                        min_page = 1;\n                    }\n                }\n\n                // template header\n                tmpl += '<tr id=\"page-links-row\">';\n                if (options.show_item_checkboxes) {\n                    tmpl += \"<td></td>\";\n                }\n                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n                if (min_page > 1) {\n                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n                }\n\n                // create page urls\n                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                    if (page_index == options.cur_page_num) {\n                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + \"</span>\";\n                    } else {\n                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + \"</a></span>\";\n                    }\n                }\n\n                // show last page\n                if (max_page < num_pages) {\n                    tmpl += \"...\" + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + \"</a></span>\";\n                }\n                tmpl += \"</span>\";\n\n                // Show all link\n                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + \"</td>\" + \"</tr>\";\n            }\n\n            // Grid operations for multiple items.\n            if (options.show_item_checkboxes) {\n                // start template\n                tmpl += \"<tr>\" + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + \"<td></td>\" + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n                // configure buttons for operations\n                for (var i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.allow_multiple) {\n                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                    }\n                }\n\n                // finalize template\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // count global operations\n            var found_global = false;\n            for (i in options.operations) {\n                if (options.operations[i].global_operation) {\n                    found_global = true;\n                    break;\n                }\n            }\n\n            // add global operations\n            if (found_global) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">';\n                for (i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.global_operation) {\n                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + \"</a>\";\n                    }\n                }\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // add legend\n            if (options.legend) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">' + options.legend + \"</td>\" + \"</tr>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        message: function message(options) {\n            var status = options.status == \"success\" ? \"done\" : options.status;\n            return \"<p>\" + '<div class=\"' + status + 'message transient-message\">' + _.escape(options.message) + \"</div>\" + '<div style=\"clear: both\"></div>' + \"</p>\";\n        },\n\n        // template\n        grid_filters: function grid_filters(options) {\n            // get filters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n\n            // show advanced search if flag set or if there are filters for advanced search fields\n            var advanced_search_display = \"none\";\n            if (options.advanced_search) {\n                advanced_search_display = \"block\";\n            }\n\n            // identify columns with advanced filtering\n            var show_advanced_search_link = false;\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    var column_key = column.key;\n                    var f_key = filters[column_key];\n                    var d_key = default_filter_dict[column_key];\n                    if (f_key && d_key && f_key != d_key) {\n                        advanced_search_display = \"block\";\n                    }\n                    show_advanced_search_link = true;\n                }\n            }\n\n            // hide standard search if advanced is shown\n            var standard_search_display = \"block\";\n            if (advanced_search_display == \"block\") {\n                standard_search_display = \"none\";\n            }\n\n            //\n            // standard search\n            //\n            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + \"<table>\" + \"<tr>\" + '<td style=\"padding: 0;\">' + \"<table>\";\n\n            // add standard filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"standard\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize standard search\n            tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n            // show advanced search link in standard display\n            if (show_advanced_search_link) {\n                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n            }\n\n            // finalize standard search display\n            tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n            //\n            // advanced search\n            //\n            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + \"<table>\" + \"<tr>\" + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + \"</td>\" + \"</tr>\";\n\n            // add advanced filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize advanced search template\n            tmpl += \"</table>\" + \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        grid_column_filter: function grid_column_filter(options, column) {\n            // collect parameters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n            var column_label = column.label;\n            var column_key = column.key;\n            if (column.filterable == \"advanced\") {\n                column_label = column_label.toLowerCase();\n            }\n\n            // start\n            var tmpl = \"<tr>\";\n\n            if (column.filterable == \"advanced\") {\n                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + \":</td>\";\n            }\n            tmpl += '<td style=\"padding-bottom: 1px;\">';\n            if (column.is_text) {\n                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n                // Carry forward filtering criteria with hidden inputs.\n                for (i in options.columns) {\n                    var temp_column = options.columns[i];\n                    var filter_value = filters[temp_column.key];\n                    if (filter_value) {\n                        if (filter_value != \"All\") {\n                            if (temp_column.is_text) {\n                                filter_value = JSON.stringify(filter_value);\n                            }\n                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                        }\n                    }\n                }\n                // Print current filtering criteria and links to delete.\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add filters\n                var column_filter = filters[column_key];\n                if (column_filter) {\n                    // identify type\n                    var type = jQuery.type(column_filter);\n\n                    // single filter value\n                    if (type == \"string\") {\n                        if (column_filter != \"All\") {\n                            // append template\n                            tmpl += this.filter_element(column_key, column_filter);\n                        }\n                    }\n\n                    // multiple filter values\n                    if (type == \"array\") {\n                        for (var i in column_filter) {\n                            // get filter\n                            var filter = column_filter[i];\n\n                            // copy filters and remove entry\n                            var params = column_filter;\n                            params = params.slice(i);\n\n                            // append template\n                            tmpl += this.filter_element(column_key, filter);\n                        }\n                    }\n                }\n\n                // close span\n                tmpl += \"</span>\";\n\n                // Set value, size of search input field. Minimum size is 20 characters.\n                var value = \"\";\n                if (column.filterable == \"standard\") {\n                    value = column.label.toLowerCase();\n                    var size = value.length;\n                    if (size < 20) {\n                        size = 20;\n                    }\n                    // +4 to account for space after placeholder\n                    size = size + 4;\n                }\n\n                // print input field for column\n                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + \"</button>\" + \"</span>\" + \"</form>\";\n            } else {\n                // filter criteria\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add category filters\n                var seperator = false;\n                for (var cf_label in options.categorical_filters[column_key]) {\n                    // get category filter\n                    var cf = options.categorical_filters[column_key][cf_label];\n\n                    // each filter will have only a single argument, so get that single argument\n                    var cf_key = \"\";\n                    var cf_arg = \"\";\n                    for (var key in cf) {\n                        cf_key = key;\n                        cf_arg = cf[key];\n                    }\n\n                    // add seperator\n                    if (seperator) {\n                        tmpl += \" | \";\n                    }\n                    seperator = true;\n\n                    // add category\n                    var filter = filters[column_key];\n                    if (filter && cf[column_key] && filter == cf_arg) {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + \"</span>\";\n                    } else {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + \"</a>\" + \"</span>\";\n                    }\n                }\n                tmpl += \"</span>\";\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template for filter items\n        filter_element: function filter_element(filter_key, filter_value) {\n            filter_value = Utils.sanitize(filter_value);\n            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + \"</a>\" + \"</span>\";\n        }\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                min: null,\n                max: null,\n                step: null,\n                precise: false,\n                split: 10000,\n                value: null,\n                onchange: function onchange() {}\n            }).set(options);\n\n            // create new element\n            this.setElement(this._template());\n            this.$el.attr(\"id\", this.model.id);\n            this.$text = this.$(\".ui-form-slider-text\");\n            this.$slider = this.$(\".ui-form-slider-element\");\n\n            // add text field event\n            var pressed = [];\n            this.$text.on(\"change\", function () {\n                self.value($(this).val());\n            }).on(\"keyup\", function (e) {\n                pressed[e.which] = false;\n            }).on(\"keydown\", function (e) {\n                var v = e.which;\n                pressed[v] = true;\n                if (self.model.get(\"is_workflow\") && pressed[16] && v == 52) {\n                    self.value(\"$\");\n                    event.preventDefault();\n                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf(\".\") == -1 && self.model.get(\"precise\") || (v == 189 || v == 109) && $(this).val().indexOf(\"-\") == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if (!step) {\n                if (opts.precise && this.has_slider) {\n                    step = (opts.max - opts.min) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if (this.has_slider) {\n                this.$text.addClass(\"ui-form-slider-left\");\n                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on(\"slide\", function (event, ui) {\n                    self.value(ui.value);\n                });\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var value = this.model.get(\"value\");\n            this.has_slider && this.$slider.slider(\"value\", value);\n            value !== this.$text.val() && this.$text.val(value);\n        },\n\n        /** Set and return the current value */\n        value: function value(new_val) {\n            var options = this.model.attributes;\n            if (new_val !== undefined) {\n                if (new_val !== null && new_val !== \"\" && !this._isParameter(new_val)) {\n                    isNaN(new_val) && (new_val = 0);\n                    !options.precise && (new_val = Math.round(new_val));\n                    options.max !== null && (new_val = Math.min(new_val, options.max));\n                    options.min !== null && (new_val = Math.max(new_val, options.min));\n                }\n                this.model.set(\"value\", new_val);\n                this.model.trigger(\"change\");\n                options.onchange(new_val);\n            }\n            return this.model.get(\"value\");\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function _isParameter(value) {\n            return this.model.get(\"is_workflow\") && String(value).substring(0, 1) === \"$\";\n        },\n\n        /** Slider template */\n        _template: function _template() {\n            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 30:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates/wraps a drill down element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n    var View = Options.BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = options.display || \"checkbox\";\n            options.multiple = options.type == \"checkbox\";\n            Options.BaseIcons.prototype.initialize.call(this, options);\n        },\n\n        /** Set states for selected values */\n        _setValue: function _setValue(new_value) {\n            Options.BaseIcons.prototype._setValue.call(this, new_value);\n            if (new_value !== undefined && new_value !== null && this.header_index) {\n                var self = this;\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function (v) {\n                    var list = self.header_index[v];\n                    _.each(list, function (element) {\n                        self._setState(element, true);\n                    });\n                });\n            }\n        },\n\n        /** Expand/collapse a sub group */\n        _setState: function _setState(header_id, is_expanded) {\n            var $button = this.$(\".button-\" + header_id);\n            var $subgroup = this.$(\".subgroup-\" + header_id);\n            $button.data(\"is_expanded\", is_expanded);\n            if (is_expanded) {\n                $subgroup.show();\n                $button.removeClass(\"fa-plus-square\").addClass(\"fa-minus-square\");\n            } else {\n                $subgroup.hide();\n                $button.removeClass(\"fa-minus-square\").addClass(\"fa-plus-square\");\n            }\n        },\n\n        /** Template to create options tree */\n        _templateOptions: function _templateOptions() {\n            var self = this;\n            this.header_index = {};\n\n            // attach event handler\n            function attach($el, header_id) {\n                var $button = $el.find(\".button-\" + header_id);\n                $button.on(\"click\", function () {\n                    self._setState(header_id, !$button.data(\"is_expanded\"));\n                });\n            }\n\n            // recursive function which iterates through options\n            function iterate($tmpl, options, header) {\n                header = header || [];\n                for (var i in options) {\n                    var level = options[i];\n                    var has_options = level.options && level.options.length > 0;\n                    var new_header = header.slice(0);\n                    self.header_index[level.value] = new_header.slice(0);\n                    var $group = $(\"<div/>\");\n                    if (has_options) {\n                        var header_id = Utils.uid();\n                        var $button = $(\"<span/>\").addClass(\"button-\" + header_id).addClass(\"ui-drilldown-button fa fa-plus-square\");\n                        var $subgroup = $(\"<div/>\").addClass(\"subgroup-\" + header_id).addClass(\"ui-drilldown-subgroup\");\n                        $group.append($(\"<div/>\").append($button).append(self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        })));\n                        new_header.push(header_id);\n                        iterate($subgroup, level.options, new_header);\n                        $group.append($subgroup);\n                        attach($group, header_id);\n                    } else {\n                        $group.append(self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        }));\n                    }\n                    $tmpl.append($group);\n                }\n            }\n\n            // iterate through options and create dom\n            var $tmpl = $(\"<div/>\");\n            iterate($tmpl, this.model.get(\"data\"));\n            return $tmpl;\n        },\n\n        /** Template for drill down view */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-options-list drilldown-container\").attr(\"id\", this.model.id);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(8), __webpack_require__(32), __webpack_require__(33), __webpack_require__(34)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement($(\"<div/>\"));\n            this.render();\n        },\n\n        /** Render section view */\n        render: function render() {\n            var self = this;\n            this.$el.empty();\n            _.each(this.inputs, function (input) {\n                self.add(input);\n            });\n        },\n\n        /** Add a new input element */\n        add: function add(input) {\n            var input_def = jQuery.extend(true, {}, input);\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[input_def.id] = input_def;\n            switch (input_def.type) {\n                case \"conditional\":\n                    this._addConditional(input_def);\n                    break;\n                case \"repeat\":\n                    this._addRepeat(input_def);\n                    break;\n                case \"section\":\n                    this._addSection(input_def);\n                    break;\n                default:\n                    this._addRow(input_def);\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function _addConditional(input_def) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n            var field = this._addRow(input_def.test_param);\n\n            // set onchange event for test parameter\n            field.model && field.model.set(\"onchange\", function (value) {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(\"#\" + input_def.id + \"-section-\" + i);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n            // add conditional sub sections\n            for (var i in input_def.cases) {\n                var sub_section = new View(this.app, {\n                    inputs: input_def.cases[i].inputs\n                });\n                this._append(sub_section.$el.addClass(\"ui-form-section\"), input_def.id + \"-section-\" + i);\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger(\"change\");\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function _addRepeat(input_def) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title: input_def.title || \"Repeat\",\n                min: input_def.min,\n                max: input_def.max,\n                onnew: function onnew() {\n                    create(input_def.inputs);\n                    self.app.trigger(\"change\");\n                }\n            });\n\n            // helper function to create new repeat blocks\n            function create(inputs) {\n                var sub_section_id = input_def.id + \"-section-\" + block_index++;\n                var sub_section = new View(self.app, { inputs: inputs });\n                repeat.add({\n                    id: sub_section_id,\n                    $el: sub_section.$el,\n                    ondel: function ondel() {\n                        repeat.del(sub_section_id);\n                        self.app.trigger(\"change\");\n                    }\n                });\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size(input_def.cache);\n            for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n                create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n            }\n\n            // hide options\n            this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement(this.app, {\n                label: input_def.title || input_def.name,\n                help: input_def.help,\n                field: repeat\n            });\n            this._append(input_element.$el, input_def.id);\n        },\n\n        /** Add a customized section */\n        _addSection: function _addSection(input_def) {\n            var portlet = new Portlet.View({\n                title: input_def.title || input_def.name,\n                cls: \"ui-portlet-section\",\n                collapsible: true,\n                collapsible_button: true,\n                collapsed: !input_def.expanded\n            });\n            portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n            portlet.append($(\"<div/>\").addClass(\"ui-form-info\").html(input_def.help));\n            this.app.on(\"expand\", function (input_id) {\n                portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n            });\n            this._append(portlet.$el, input_def.id);\n        },\n\n        /** Add a single input field element */\n        _addRow: function _addRow(input_def) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function () {\n                self.app.trigger(\"change\", id);\n            };\n            var field = this.parameters.create(input_def);\n            this.app.field_list[id] = field;\n            var input_element = new InputElement(this.app, {\n                name: input_def.name,\n                label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n                value: input_def.value,\n                text_value: input_def.text_value,\n                collapsible_value: input_def.collapsible_value,\n                collapsible_preview: input_def.collapsible_preview,\n                help: input_def.help,\n                argument: input_def.argument,\n                disabled: input_def.disabled,\n                color: input_def.color,\n                style: input_def.style,\n                backdrop: input_def.backdrop,\n                hidden: input_def.hidden,\n                fixed: input_def.fixed,\n                field: field\n            });\n            this.app.element_list[id] = input_element;\n            this._append(input_element.$el, input_def.id);\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function _append($el, id) {\n            this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 32:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui component which enables the dynamic creation of portlets */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.list = {};\n            this.options = Utils.merge(options, {\n                title: \"Repeat\",\n                empty_text: \"Not available.\",\n                max: null,\n                min: null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon: \"fa-plus\",\n                title: \"Insert \" + this.options.title,\n                tooltip: \"Add new \" + this.options.title + \" block\",\n                cls: \"ui-button-icon ui-clear-float form-repeat-add\",\n                onclick: function onclick() {\n                    options.onnew && options.onnew();\n                }\n            });\n            this.setElement($(\"<div/>\").append(this.$list = $(\"<div/>\")).append($(\"<div/>\").append(this.button_new.$el)));\n        },\n\n        /** Number of repeat blocks */\n        size: function size() {\n            return _.size(this.list);\n        },\n\n        /** Add new repeat block */\n        add: function add(options) {\n            if (!options.id || this.list[options.id]) {\n                Galaxy.emit.debug(\"form-repeat::add()\", \"Duplicate or invalid repeat block id.\");\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon: \"fa-trash-o\",\n                tooltip: \"Delete this repeat block\",\n                cls: \"ui-button-icon-plain form-repeat-delete\",\n                onclick: function onclick() {\n                    options.ondel && options.ondel();\n                }\n            });\n            var portlet = new Portlet.View({\n                id: options.id,\n                title: \"placeholder\",\n                cls: options.cls || \"ui-portlet-repeat\",\n                operations: { button_delete: button_delete }\n            });\n            portlet.append(options.$el);\n            portlet.$el.addClass(\"section-row\").hide();\n            this.list[options.id] = portlet;\n            this.$list.append(portlet.$el.fadeIn(\"fast\"));\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function del(id) {\n            if (!this.list[id]) {\n                Galaxy.emit.debug(\"form-repeat::del()\", \"Invalid repeat block id.\");\n                return;\n            }\n            this.$list.find(\"#\" + id).remove();\n            delete this.list[id];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function delAll() {\n            for (var id in this.list) {\n                this.del(id);\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function hideOptions() {\n            this.button_new.$el.hide();\n            _.each(this.list, function (portlet) {\n                portlet.hideOperation(\"button_delete\");\n            });\n            _.isEmpty(this.list) && this.$el.append($(\"<div/>\").addClass(\"ui-form-info\").html(this.options.empty_text));\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            var index = 0;\n            for (var id in this.list) {\n                var portlet = this.list[id];\n                portlet.title(++index + \": \" + this.options.title);\n                portlet[this.size() > this.options.min ? \"showOperation\" : \"hideOperation\"](\"button_delete\");\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 33:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form input element wrapper\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    return Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable: this.app_options.text_enable || \"Enable\",\n                text_disable: this.app_options.text_disable || \"Disable\",\n                cls_enable: this.app_options.cls_enable || \"fa fa-caret-square-o-down\",\n                cls_disable: this.app_options.cls_disable || \"fa fa-caret-square-o-up\",\n                always_refresh: this.app_options.always_refresh\n            }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$(\".ui-form-field\");\n            this.$info = this.$(\".ui-form-info\");\n            this.$preview = this.$(\".ui-form-preview\");\n            this.$collapsible = this.$(\".ui-form-collapsible\");\n            this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n            this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n            this.$title = this.$(\".ui-form-title\");\n            this.$title_text = this.$(\".ui-form-title-text\");\n            this.$error_text = this.$(\".ui-form-error-text\");\n            this.$error = this.$(\".ui-form-error\");\n            this.$backdrop = this.$(\".ui-form-backdrop\");\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get(\"collapsible_value\");\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify(this.model.get(\"value\")) == JSON.stringify(collapsible_value);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on(\"click\", function () {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger(\"change\");\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get(\"always_refresh\")) {\n                this.listenTo(this.field.model, \"change:value\", function () {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function backdrop() {\n            this.model.set(\"backdrop\", true);\n        },\n\n        /** Set error text */\n        error: function error(text) {\n            this.model.set(\"error_text\", text);\n        },\n\n        /** Reset this view */\n        reset: function reset() {\n            !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n        },\n\n        render: function render() {\n            // render help\n            $(\".tooltip\").hide();\n            var help_text = this.model.get(\"help\", \"\");\n            var help_argument = this.model.get(\"argument\");\n            if (help_argument && help_text.indexOf(\"(\" + help_argument + \")\") == -1) {\n                help_text += \" (\" + help_argument + \")\";\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n            // render preview view for collapsed fields\n            this.$preview[this.field.collapsed && this.model.get(\"collapsible_preview\") || this.model.get(\"disabled\") ? \"show\" : \"hide\"]().html(_.escape(this.model.get(\"text_value\")));\n            // render error messages\n            var error_text = this.model.get(\"error_text\");\n            this.$error[error_text ? \"show\" : \"hide\"]();\n            this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n            // render input field\n            this.field.collapsed || this.model.get(\"disabled\") ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set({\n                color: this.model.get(\"color\"),\n                style: this.model.get(\"style\")\n            });\n            // render collapsible options\n            if (!this.model.get(\"disabled\") && this.model.get(\"collapsible_value\") !== undefined) {\n                var collapsible_state = this.field.collapsed ? \"enable\" : \"disable\";\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get(\"label\"));\n                this.$collapsible_icon.removeClass().addClass(\"icon\").addClass(this.model.get(\"cls_\" + collapsible_state)).attr(\"data-original-title\", this.model.get(\"text_\" + collapsible_state)).tooltip({ placement: \"bottom\" });\n            } else {\n                this.$title_text.show().text(this.model.get(\"label\"));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-form-element\").append($(\"<div/>\").addClass(\"ui-form-error ui-error\").append($(\"<span/>\").addClass(\"fa fa-arrow-down\")).append($(\"<span/>\").addClass(\"ui-form-error-text\"))).append($(\"<div/>\").addClass(\"ui-form-title\").append($(\"<div/>\").addClass(\"ui-form-collapsible\").append($(\"<i/>\").addClass(\"ui-form-collapsible-icon\")).append($(\"<span/>\").addClass(\"ui-form-collapsible-text\"))).append($(\"<span/>\").addClass(\"ui-form-title-text\"))).append($(\"<div/>\").addClass(\"ui-form-field\").append($(\"<span/>\").addClass(\"ui-form-info\")).append($(\"<div/>\").addClass(\"ui-form-backdrop\"))).append($(\"<div/>\").addClass(\"ui-form-preview\"));\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 34:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker) {\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            text: \"_fieldText\",\n            password: \"_fieldText\",\n            select: \"_fieldSelect\",\n            data_column: \"_fieldSelect\",\n            genomebuild: \"_fieldSelect\",\n            data: \"_fieldData\",\n            data_collection: \"_fieldData\",\n            integer: \"_fieldSlider\",\n            float: \"_fieldSlider\",\n            boolean: \"_fieldBoolean\",\n            drill_down: \"_fieldDrilldown\",\n            color: \"_fieldColor\",\n            hidden: \"_fieldHidden\",\n            hidden_data: \"_fieldHidden\",\n            baseurl: \"_fieldHidden\",\n            library_data: \"_fieldLibrary\",\n            ftpfile: \"_fieldFtp\",\n            upload: \"_fieldUpload\",\n            genomespacefile: \"_fieldGenomeSpace\"\n        },\n\n        /** Returns an input field for a given field type */\n        create: function create(input_def) {\n            var fieldClass = this.types[input_def.type];\n            var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n            if (!field) {\n                field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n                Galaxy.emit.debug(\"form-parameters::_addRow()\", \"Auto matched field type (\" + input_def.type + \").\");\n            }\n            input_def.value === undefined && (input_def.value = null);\n            field.value(input_def.value);\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function _fieldData(input_def) {\n            return new SelectContent.View({\n                id: \"field-\" + input_def.id,\n                extensions: input_def.extensions,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                type: input_def.type,\n                flavor: input_def.flavor,\n                data: input_def.options,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function _fieldSelect(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // customize properties\n            if (input_def.type == \"data_column\") {\n                input_def.error_text = \"Missing columns in referenced dataset.\";\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if (!data) {\n                data = [];\n                _.each(input_def.options, function (option) {\n                    data.push({ label: option[0], value: option[1] });\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch (input_def.display) {\n                case \"checkboxes\":\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case \"radio\":\n                    SelectClass = Ui.Radio;\n                    break;\n                case \"radiobutton\":\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id: \"field-\" + input_def.id,\n                data: data,\n                error_text: input_def.error_text || \"No options available\",\n                readonly: input_def.readonly,\n                multiple: input_def.multiple,\n                optional: input_def.optional,\n                onchange: input_def.onchange,\n                individual: input_def.individual,\n                searchable: input_def.flavor !== \"workflow\"\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function _fieldDrilldown(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id: \"field-\" + input_def.id,\n                data: input_def.options,\n                display: input_def.display,\n                optional: input_def.optional,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function _fieldText(input_def) {\n            // field replaces e.g. a select field\n            if (input_def.options && input_def.data) {\n                input_def.area = input_def.multiple;\n                if (Utils.isEmpty(input_def.value)) {\n                    input_def.value = null;\n                } else {\n                    if ($.isArray(input_def.value)) {\n                        var str_value = \"\";\n                        for (var i in input_def.value) {\n                            str_value += String(input_def.value[i]);\n                            if (!input_def.multiple) {\n                                break;\n                            }\n                            str_value += \"\\n\";\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id: \"field-\" + input_def.id,\n                type: input_def.type,\n                area: input_def.area,\n                readonly: input_def.readonly,\n                placeholder: input_def.placeholder,\n                datalist: input_def.datalist,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function _fieldSlider(input_def) {\n            return new Ui.Slider.View({\n                id: \"field-\" + input_def.id,\n                precise: input_def.type == \"float\",\n                is_workflow: input_def.is_workflow,\n                min: input_def.min,\n                max: input_def.max,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function _fieldHidden(input_def) {\n            return new Ui.Hidden({\n                id: \"field-\" + input_def.id,\n                info: input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function _fieldBoolean(input_def) {\n            return new Ui.RadioButton.View({\n                id: \"field-\" + input_def.id,\n                data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function _fieldColor(input_def) {\n            return new ColorPicker({\n                id: \"field-\" + input_def.id,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function _fieldLibrary(input_def) {\n            return new SelectLibrary.View({\n                id: \"field-\" + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function _fieldFtp(input_def) {\n            return new SelectFtp.View({\n                id: \"field-\" + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** GenomeSpace file select field\n        */\n        _fieldGenomeSpace: function _fieldGenomeSpace(input_def) {\n            var self = this;\n            return new SelectGenomeSpace.View({\n                id: \"field-\" + input_def.id,\n                onchange: function onchange() {\n                    self.app.trigger(\"change\");\n                }\n            });\n        },\n\n        /** Upload file field */\n        _fieldUpload: function _fieldUpload(input_def) {\n            return new Ui.Upload({\n                id: \"field-\" + input_def.id,\n                onchange: input_def.onchange\n            });\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 35:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Select) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.LINKED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.LINKED\n        }],\n        data_multiple: [{\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collections\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }],\n        data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        workflow_data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        workflow_data_multiple: [{\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }],\n        workflow_data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        module_data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }],\n        module_data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder\",\n            tooltip: \"Multiple collections\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [{\n                    icon: \"fa fa-chain\",\n                    value: \"false\",\n                    tooltip: \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                }, {\n                    icon: \"fa fa-chain-broken\",\n                    value: \"true\",\n                    tooltip: \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                }]\n            });\n            var $batch_div = $(\"<div/>\").addClass(\"ui-form-info\").append($(\"<i/>\").addClass(\"fa fa-sitemap\")).append($(\"<span/>\").html(\"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"));\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div.clone().append($(\"<div/>\").append($(\"<div/>\").addClass(\"ui-form-title\").html(\"Batch options:\")).append(this.button_product.$el)).append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el.on(\"dragenter\", function (e) {\n                this.lastenter = e.target;\n                self.$el.addClass(\"ui-dragover\");\n            }).on(\"dragover\", function (e) {\n                e.preventDefault();\n            }).on(\"dragleave\", function (e) {\n                this.lastenter === e.target && self.$el.removeClass(\"ui-dragover\");\n            }).on(\"drop\", function (e) {\n                self._handleDrop(e);\n            });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:type change:optional change:multiple change:extensions\", this._changeType, this);\n            this.render();\n\n            // add change event\n            this.on(\"change\", function () {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function render() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[id_list[i] + \"_\" + this.config[current].src];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\"ui-select-content::value()\", \"Requested details not found for '\" + id_list[i] + \"'.\");\n                                return null;\n                            }\n                        }\n                        result.values.sort(function (a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\"ui-select-content::value()\", \"Invalid value/source '\" + new_value + \"'.\");\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function _changeCurrent() {\n            var self = this;\n            _.each(this.fields, function (field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function ($batchfield, batchmode) {\n                        $batchfield[self.config[i].batch == batchmode ? \"show\" : \"hide\"]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function _changeType() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id = (this.model.get(\"flavor\") ? this.model.get(\"flavor\") + \"_\" : \"\") + String(this.model.get(\"type\")) + (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\"ui-select-content::_changeType()\", \"Invalid configuration/type id '\" + config_id + \"'.\");\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function (c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(new Select.View({\n                    optional: self.model.get(\"optional\"),\n                    multiple: c.multiple,\n                    searchable: !c.multiple || data && data[c.src] && data[c.src].length > self.model.get(\"pagelimit\"),\n                    individual: true,\n                    error_text: \"No \" + (extensions ? extensions + \" \" : \"\") + (src_labels[c.src] || \"content\") + \" available.\",\n                    onchange: function onchange() {\n                        self.trigger(\"change\");\n                    }\n                }));\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function onchange(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function (field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function ($batchfield, batchmode) {\n                self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function _changeWait() {\n            var self = this;\n            _.each(this.fields, function (field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function _changeData() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function (items, src) {\n                select_options[src] = [];\n                _.each(items, function (item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function (c, i) {\n                select_options[c.src] && self.fields[i].add(select_options[c.src], function (a, b) {\n                    return b.hid - a.hid;\n                });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function _changeValue() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function (value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function (field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function _handleDrop(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData(\"text\"))[0];\n                var new_id = drop_data.id;\n                var new_src = drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function _handleDropStatus(status) {\n            var self = this;\n            this.$el.removeClass(\"ui-dragover\").addClass(\"ui-dragover-\" + status);\n            setTimeout(function () {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function _batch(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (config.batch == Batch.ENABLED && this.button_product.value() === \"true\") {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(22), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Table, List) {\n    // collection of libraries\n    var Libraries = Backbone.Collection.extend({\n        url: Galaxy.root + \"api/libraries?deleted=false\"\n    });\n\n    // collection of dataset\n    var LibraryDatasets = Backbone.Collection.extend({\n        initialize: function initialize() {\n            var self = this;\n            this.config = new Backbone.Model({ library_id: null });\n            this.config.on(\"change\", function () {\n                self.fetch({ reset: true });\n            });\n        },\n        url: function url() {\n            return Galaxy.root + \"api/libraries/\" + this.config.get(\"library_id\") + \"/contents\";\n        }\n    });\n\n    // hda/hdca content selector ui element\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // collections\n            this.libraries = new Libraries();\n            this.datasets = new LibraryDatasets();\n\n            // link app and options\n            this.options = options;\n\n            // select field for the library\n            // TODO: Remove this once the library API supports searching for library datasets\n            this.library_select = new Ui.Select.View({\n                onchange: function onchange(value) {\n                    self.datasets.config.set(\"library_id\", value);\n                }\n            });\n\n            // create ui-list view to keep track of selected data libraries\n            this.dataset_list = new List.View({\n                name: \"dataset\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    self.trigger(\"change\");\n                }\n            });\n\n            // add reset handler for fetched libraries\n            this.libraries.on(\"reset\", function () {\n                var data = [];\n                self.libraries.each(function (model) {\n                    data.push({\n                        value: model.id,\n                        label: model.get(\"name\")\n                    });\n                });\n                self.library_select.update(data);\n            });\n\n            // add reset handler for fetched library datasets\n            this.datasets.on(\"reset\", function () {\n                var data = [];\n                var library_current = self.library_select.text();\n                if (library_current !== null) {\n                    self.datasets.each(function (model) {\n                        if (model.get(\"type\") === \"file\") {\n                            data.push({\n                                value: model.id,\n                                label: model.get(\"name\")\n                            });\n                        }\n                    });\n                }\n                self.dataset_list.update(data);\n            });\n\n            // add change event. fires on trigger\n            this.on(\"change\", function () {\n                options.onchange && options.onchange(self.value());\n            });\n\n            // create elements\n            this.setElement(this._template());\n            this.$(\".library-select\").append(this.library_select.$el);\n            this.$el.append(this.dataset_list.$el);\n\n            // initial fetch of libraries\n            this.libraries.fetch({\n                reset: true,\n                success: function success() {\n                    self.library_select.trigger(\"change\");\n                    if (self.options.value !== undefined) {\n                        self.value(self.options.value);\n                    }\n                }\n            });\n        },\n\n        /** Return/Set currently selected library datasets */\n        value: function value(val) {\n            return this.dataset_list.value(val);\n        },\n\n        /** Template */\n        _template: function _template() {\n            return '<div class=\"ui-select-library\">' + '<div class=\"library ui-margin-bottom\">' + '<span class=\"library-title\">Select Library</span>' + '<span class=\"library-select\"/>' + \"</div>\" + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 37:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, List) {\n    /**\n    * FTP file selector\n    */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // create ui-list view to keep track of selected ftp files\n            this.ftpfile_list = new List.View({\n                name: \"file\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    options.onchange && options.onchange(self.value());\n                }\n            });\n\n            // create elements\n            this.setElement(this.ftpfile_list.$el);\n\n            // initial fetch of ftps\n            Utils.get({\n                url: Galaxy.root + \"api/remote_files\",\n                success: function success(response) {\n                    var data = [];\n                    for (var i in response) {\n                        data.push({\n                            value: response[i][\"path\"],\n                            label: response[i][\"path\"]\n                        });\n                    }\n                    self.ftpfile_list.update(data);\n                }\n            });\n        },\n\n        /** Return/Set currently selected ftp datasets */\n        value: function value(val) {\n            return this.ftpfile_list.value(val);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(39)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, GenomespaceBrowser) {\n    /**\n    * GenomeSpace file selector\n    */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // create insert new list element button\n            this.browse_button = new Ui.ButtonIcon({\n                title: \"Browse\",\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Browse GenomeSpace\",\n                onclick: function onclick() {\n                    self.browseGenomeSpace();\n                }\n            });\n\n            // create genomespace filepath textbox\n            this.filename_textbox = new Ui.Input();\n\n            // create genomespace token textbox\n            this.token_textbox = new Ui.Input({\n                type: \"password\"\n            });\n\n            // create elements\n            this.setElement(this._template(options));\n            this.$(\".ui-gs-browse-button\").append(this.browse_button.$el);\n            this.$(\".ui-gs-filename-textbox\").append(this.filename_textbox.$el);\n            this.$(\".ui-gs-token-textbox\").append(this.token_textbox.$el);\n        },\n\n        /** Browse GenomeSpace */\n        browseGenomeSpace: function browseGenomeSpace(options) {\n            var self = this;\n            GenomespaceBrowser.openFileBrowser({\n                successCallback: function successCallback(data) {\n                    self.value(data.destination + \"^\" + data.token);\n                }\n            });\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-gs-select-file\">' + '<div class=\"ui-gs-browse-field\">' + '<span class=\"ui-gs-browse-button\" />' + '<span class=\"ui-gs-filename-textbox\" />' + \"</div>\" + '<div class=\"ui-gs-token-field\">' + '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' + '<span class=\"ui-gs-token-textbox\" />' + \"</div>\" + \"</div>\";\n        },\n\n        /** Return/Set currently selected genomespace filename/token */\n        value: function value(new_value) {\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            } else {\n                return this._getValue();\n            }\n        },\n\n        // get value\n        _getValue: function _getValue() {\n            return this.filename_textbox.value() + \"^\" + this.token_textbox.value();\n        },\n\n        // set value\n        _setValue: function _setValue(new_value) {\n            if (new_value) {\n                values = new_value.split(\"^\");\n                this.filename_textbox.value(values[0]);\n                this.token_textbox.value(values[1]);\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// Provides support for interacting with the GenomeSpace File Browser popup dialogue\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // tool form templates\n    return {\n        openFileBrowser: function openFileBrowser(options) {\n            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n            var GS_UPLOAD_URL = GS_UI_URL + \"upload/loadUrlToGenomespace.html?getLocation=true\";\n\n            var newWin = window.open(GS_UPLOAD_URL, \"GenomeSpace File Browser\", \"height=360px,width=600px\");\n\n            successCalBack = options[\"successCallback\"];\n            window.addEventListener(\"message\", function (e) {\n                successCalBack(e.data);\n            }, false);\n\n            newWin.focus();\n\n            if (options[\"errorCallback\"] != null) newWin.setCallbackOnGSUploadError = config[\"errorCallback\"];\n        }\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Renders the color picker used e.g. in the tool form **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    return Backbone.View.extend({\n        colors: {\n            standard: [\"c00000\", \"ff0000\", \"ffc000\", \"ffff00\", \"92d050\", \"00b050\", \"00b0f0\", \"0070c0\", \"002060\", \"7030a0\"],\n            base: [\"ffffff\", \"000000\", \"eeece1\", \"1f497d\", \"4f81bd\", \"c0504d\", \"9bbb59\", \"8064a2\", \"4bacc6\", \"f79646\"],\n            theme: [[\"f2f2f2\", \"7f7f7f\", \"ddd9c3\", \"c6d9f0\", \"dbe5f1\", \"f2dcdb\", \"ebf1dd\", \"e5e0ec\", \"dbeef3\", \"fdeada\"], [\"d8d8d8\", \"595959\", \"c4bd97\", \"8db3e2\", \"b8cce4\", \"e5b9b7\", \"d7e3bc\", \"ccc1d9\", \"b7dde8\", \"fbd5b5\"], [\"bfbfbf\", \"3f3f3f\", \"938953\", \"548dd4\", \"95b3d7\", \"d99694\", \"c3d69b\", \"b2a2c7\", \"92cddc\", \"fac08f\"], [\"a5a5a5\", \"262626\", \"494429\", \"17365d\", \"366092\", \"953734\", \"76923c\", \"5f497a\", \"31859b\", \"e36c09\"], [\"7f7f7e\", \"0c0c0c\", \"1d1b10\", \"0f243e\", \"244061\", \"632423\", \"4f6128\", \"3f3151\", \"205867\", \"974806\"]]\n        },\n\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {});\n            this.setElement(this._template());\n            this.$panel = this.$(\".ui-color-picker-panel\");\n            this.$view = this.$(\".ui-color-picker-view\");\n            this.$value = this.$(\".ui-color-picker-value\");\n            this.$header = this.$(\".ui-color-picker-header\");\n            this._build();\n            this.visible = false;\n            this.value(this.options.value);\n            this.$boxes = this.$(\".ui-color-picker-box\");\n            var self = this;\n            this.$boxes.on(\"click\", function () {\n                self.value($(this).css(\"background-color\"));\n                self.$header.trigger(\"click\");\n            });\n            this.$header.on(\"click\", function () {\n                self.visible = !self.visible;\n                if (self.visible) {\n                    self.$view.fadeIn(\"fast\");\n                } else {\n                    self.$view.fadeOut(\"fast\");\n                }\n            });\n        },\n\n        /** Get/set value */\n        value: function value(new_val) {\n            if (new_val !== undefined && new_val !== null) {\n                this.$value.css(\"background-color\", new_val);\n                this.$(\".ui-color-picker-box\").empty();\n                this.$(this._getValue()).html(this._templateCheck());\n                this.options.onchange && this.options.onchange(new_val);\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var rgb = this.$value.css(\"background-color\");\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if (rgb) {\n                var hex = function hex(x) {\n                    return (\"0\" + parseInt(x).toString(16)).slice(-2);\n                };\n\n                return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function _build() {\n            this._content({ colors: this.colors.base });\n            for (var i in this.colors.theme) {\n                var line_def = {};\n                if (i == 0) {\n                    line_def[\"bottom\"] = true;\n                } else if (i != this.colors.theme.length - 1) {\n                    line_def[\"top\"] = true;\n                    line_def[\"bottom\"] = true;\n                } else {\n                    line_def[\"top\"] = true;\n                }\n                line_def[\"colors\"] = this.colors.theme[i];\n                this._content(line_def);\n            }\n            this._content({ colors: this.colors.standard });\n        },\n\n        /** Create content */\n        _content: function _content(options) {\n            var colors = options.colors;\n            var $content = $(this._templateContent());\n            var $line = $content.find(\".line\");\n            this.$panel.append($content);\n            for (var i in colors) {\n                var $box = $(this._templateBox(colors[i]));\n                if (options.top) {\n                    $box.css(\"border-top\", \"none\");\n                    $box.css(\"border-top-left-radius\", \"0px\");\n                    $box.css(\"border-top-right-radius\", \"0px\");\n                }\n                if (options.bottom) {\n                    $box.css(\"border-bottom\", \"none\");\n                    $box.css(\"border-bottom-left-radius\", \"0px\");\n                    $box.css(\"border-bottom-right-radius\", \"0px\");\n                }\n                $line.append($box);\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function _templateCheck() {\n            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function _templateContent() {\n            return '<div class=\"ui-color-picker-content\">' + '<div class=\"line\"/>' + \"</div>\";\n        },\n\n        /** Box template */\n        _templateBox: function _templateBox(color) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function _template() {\n            return '<div class=\"ui-color-picker\">' + '<div class=\"ui-color-picker-header\">' + '<div class=\"ui-color-picker-value\"/>' + '<div class=\"ui-color-picker-label\">Select a color</div>' + \"</div>\" + '<div class=\"ui-color-picker-view ui-input\">' + '<div class=\"ui-color-picker-panel\"/>' + \"</div>\";\n            \"</div>\";\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 44:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _jquery = __webpack_require__(0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _queryStringParsing = __webpack_require__(11);\n\nvar _queryStringParsing2 = _interopRequireDefault(_queryStringParsing);\n\nvar _uiMisc = __webpack_require__(5);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar $ = _jquery2.default;\n\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function initialize(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function push(url, data) {\n        data = data || {};\n        data.__identifer = Math.random().toString(36).substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            url += $.param(data, true);\n        }\n        Galaxy.params = data;\n        this.navigate(url, { trigger: true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function execute(callback, args, name) {\n        Galaxy.debug(\"router execute:\", callback, args, name);\n        var queryObj = _queryStringParsing2.default.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function authenticate(args, name) {\n        return true;\n    },\n\n    access_denied: function access_denied() {\n        this.page.display(new _uiMisc2.default.Message({\n            status: \"danger\",\n            message: \"You must be logged in with proper credentials to make this request.\",\n            persistent: true\n        }));\n    }\n});\n\nexports.default = Router;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 5:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(17), __webpack_require__(29), __webpack_require__(18), __webpack_require__(30), __webpack_require__(10), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: \"label\",\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.tagName = options.tagName || this.tagName;\n            this.setElement($(\"<\" + this.tagName + \"/>\"));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        title: function title(new_title) {\n            this.model.set(\"title\", new_title);\n        },\n        value: function value() {\n            return this.model.get(\"title\");\n        },\n        render: function render() {\n            this.$el.removeClass().addClass(\"ui-label\").addClass(this.model.get(\"cls\")).html(this.model.get(\"title\"));\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                message: null,\n                status: \"info\",\n                cls: \"\",\n                persistent: false,\n                fade: true\n            }).set(options);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        update: function update(options) {\n            this.model.set(options);\n        },\n        render: function render() {\n            this.$el.removeClass().addClass(\"ui-message\").addClass(this.model.get(\"cls\"));\n            var status = this.model.get(\"status\");\n            if (this.model.get(\"large\")) {\n                this.$el.addClass((status == \"success\" && \"done\" || status == \"danger\" && \"error\" || status) + \"messagelarge\");\n            } else {\n                this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n            }\n            if (this.model.get(\"message\")) {\n                this.$el.html(this.messageForDisplay());\n                this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                this.timeout && window.clearTimeout(this.timeout);\n                if (!this.model.get(\"persistent\")) {\n                    var self = this;\n                    this.timeout = window.setTimeout(function () {\n                        self.model.set(\"message\", \"\");\n                    }, 3000);\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function messageForDisplay() {\n            return _.escape(this.model.get(\"message\"));\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function messageForDisplay() {\n            return this.model.get(\"message\");\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                type: \"text\",\n                placeholder: \"\",\n                disabled: false,\n                readonly: false,\n                visible: true,\n                cls: \"\",\n                area: false,\n                color: null,\n                style: null\n            }).set(options);\n            this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n            this.setElement($(\"<\" + this.tagName + \"/>\"));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        events: {\n            input: \"_onchange\"\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", typeof new_val === \"string\" ? new_val : \"\");\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            var self = this;\n            this.$el.removeClass().addClass(\"ui-\" + this.tagName).addClass(this.model.get(\"cls\")).addClass(this.model.get(\"style\")).attr(\"id\", this.model.id).attr(\"type\", this.model.get(\"type\")).attr(\"placeholder\", this.model.get(\"placeholder\")).css(\"color\", this.model.get(\"color\") || \"\").css(\"border-color\", this.model.get(\"color\") || \"\");\n            var datalist = this.model.get(\"datalist\");\n            if ($.isArray(datalist) && datalist.length > 0) {\n                this.$el.autocomplete({\n                    source: function source(request, response) {\n                        response(self.model.get(\"datalist\"));\n                    },\n                    change: function change() {\n                        self._onchange();\n                    }\n                });\n            }\n            if (this.model.get(\"value\") !== this.$el.val()) {\n                this.$el.val(this.model.get(\"value\"));\n            }\n            _.each([\"readonly\", \"disabled\"], function (attr_name) {\n                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n            });\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            return this;\n        },\n        _onchange: function _onchange() {\n            this.value(this.$el.val());\n            this.model.get(\"onchange\") && this.model.get(\"onchange\")(this.model.get(\"value\"));\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($(\"<div/>\").append(this.$info = $(\"<div/>\")).append(this.$hidden = $(\"<div/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", new_val);\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            this.$el.attr(\"id\", this.model.id);\n            this.$hidden.val(this.model.get(\"value\"));\n            this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($(\"<div/>\").append(this.$info = $(\"<div/>\")).append(this.$file = $(\"<input/>\").attr(\"type\", \"file\").addClass(\"ui-margin-bottom\")).append(this.$text = $(\"<textarea/>\").addClass(\"ui-textarea\").attr(\"disabled\", true)).append(this.$wait = $(\"<i/>\").addClass(\"fa fa-spinner fa-spin\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.$file.on(\"change\", function (e) {\n                self._readFile(e);\n            });\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", new_val);\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            this.$el.attr(\"id\", this.model.id);\n            this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n            this.model.get(\"value\") ? this.$text.text(this.model.get(\"value\")).show() : this.$text.hide();\n            this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function _readFile(e) {\n            var self = this;\n            var file = e.target.files && e.target.files[0];\n            if (file) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    self.model.set({ wait: false, value: this.result });\n                };\n                this.model.set({ wait: true, value: null });\n                reader.readAsText(file);\n            }\n        }\n    });\n\n    return {\n        Button: Buttons.ButtonDefault,\n        ButtonIcon: Buttons.ButtonIcon,\n        ButtonCheck: Buttons.ButtonCheck,\n        ButtonMenu: Buttons.ButtonMenu,\n        ButtonLink: Buttons.ButtonLink,\n        Input: Input,\n        Label: Label,\n        Message: Message,\n        UnescapedMessage: UnescapedMessage,\n        Upload: Upload,\n        Modal: Modal,\n        RadioButton: Options.RadioButton,\n        Checkbox: Options.Checkbox,\n        Radio: Options.Radio,\n        Select: Select,\n        Hidden: Hidden,\n        Slider: Slider,\n        Drilldown: Drilldown\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 58:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Generic form view */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Form, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model(options);\n            this.url = this.model.get(\"url\");\n            this.redirect = this.model.get(\"redirect\");\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + this.url,\n                type: \"GET\"\n            }).done(function (response) {\n                var options = $.extend({}, self.model.attributes, response);\n                var form = new Form({\n                    title: options.title,\n                    message: options.message,\n                    status: options.status || \"warning\",\n                    icon: options.icon,\n                    inputs: options.inputs,\n                    buttons: {\n                        submit: new Ui.Button({\n                            tooltip: options.submit_tooltip,\n                            title: options.submit_title || \"Save\",\n                            icon: options.submit_icon || \"fa-save\",\n                            cls: \"btn btn-primary ui-clear-float\",\n                            onclick: function onclick() {\n                                self._submit(form);\n                            }\n                        })\n                    }\n                });\n                self.$el.empty().append(form.$el);\n            }).fail(function (response) {\n                self.$el.empty().append(new Ui.Message({\n                    message: \"Failed to load resource \" + self.url + \".\",\n                    status: \"danger\",\n                    persistent: true\n                }).$el);\n            });\n        },\n\n        _submit: function _submit(form) {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + self.url,\n                data: JSON.stringify(form.data.create()),\n                type: \"PUT\",\n                contentType: \"application/json\"\n            }).done(function (response) {\n                var success_message = {\n                    message: response.message,\n                    status: \"success\",\n                    persistent: false\n                };\n                if (self.redirect) {\n                    window.location = Galaxy.root + self.redirect + \"?\" + $.param(success_message);\n                } else {\n                    form.data.matchModel(response, function (input, input_id) {\n                        form.field_list[input_id].value(input.value);\n                    });\n                    self._showMessage(form, success_message);\n                }\n            }).fail(function (response) {\n                self._showMessage(form, {\n                    message: response.responseJSON.err_msg,\n                    status: \"danger\",\n                    persistent: false\n                });\n            });\n        },\n\n        _showMessage: function _showMessage(form, options) {\n            var $panel = form.$el.parents().filter(function () {\n                return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n            }).first();\n            $panel.animate({ scrollTop: 0 }, 500);\n            form.message.update(options);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui) {\n    var View = Backbone.View.extend({\n        visible: false,\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-portlet\",\n                title: \"\",\n                icon: \"\",\n                buttons: null,\n                body: null,\n                scrollable: true,\n                nopadding: false,\n                operations: null,\n                collapsible: false,\n                collapsible_button: false,\n                collapsed: false,\n                onchange_title: null\n            }).set(options);\n            this.setElement(this._template());\n\n            // link all dom elements\n            this.$body = this.$(\".portlet-body\");\n            this.$title_text = this.$(\".portlet-title-text\");\n            this.$title_icon = this.$(\".portlet-title-icon\");\n            this.$header = this.$(\".portlet-header\");\n            this.$content = this.$(\".portlet-content\");\n            this.$backdrop = this.$(\".portlet-backdrop\");\n            this.$buttons = this.$(\".portlet-buttons\");\n            this.$operations = this.$(\".portlet-operations\");\n\n            // add body to component list\n            this.model.get(\"body\") && this.append(this.model.get(\"body\"));\n\n            // add icon for collapsible option\n            this.collapsible_button = new Ui.ButtonIcon({\n                icon: \"fa-eye\",\n                tooltip: \"Collapse/Expand\",\n                cls: \"ui-button-icon-plain\",\n                onclick: function onclick() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                }\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr(\"id\", options.id);\n            this.$header[options.title ? \"show\" : \"hide\"]();\n            this.$title_text.html(options.title);\n            _.each([this.$content, this.$body], function ($el) {\n                $el[options.nopadding ? \"addClass\" : \"removeClass\"](\"no-padding\");\n            });\n\n            // render title icon\n            if (options.icon) {\n                this.$title_icon.removeClass().addClass(\"portlet-title-icon fa\").addClass(options.icon).show();\n            } else {\n                this.$title_icon.hide();\n            }\n\n            // make portlet collapsible\n            this.$title_text[options.collapsible ? \"addClass\" : \"removeClass\"](\"no-highlight collapsible\").off();\n            if (options.collapsible) {\n                this.$title_text.on(\"click\", function () {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                });\n                options.collapsed ? this.collapse() : this.expand();\n            }\n\n            // allow title editing\n            this.$title_text.prop(\"disabled\", !options.onchange_title);\n            options.onchange_title && this.$title_text.make_text_editable({\n                on_finish: function on_finish(new_title) {\n                    options.onchange_title(new_title);\n                }\n            });\n\n            // render buttons\n            if (options.buttons) {\n                this.$buttons.empty().show();\n                $.each(this.model.get(\"buttons\"), function (name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$buttons.append(item.$el);\n                });\n            } else {\n                this.$buttons.hide();\n            }\n\n            // render operations\n            this.$operations.empty;\n            if (options.collapsible_button) {\n                this.$operations.append(this.collapsible_button.$el);\n            }\n            if (options.operations) {\n                $.each(options.operations, function (name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$operations.append(item.$el);\n                });\n            }\n            return this;\n        },\n\n        /** Append new doms to body */\n        append: function append($el) {\n            this.$body.append($el);\n        },\n\n        /** Remove all content */\n        empty: function empty() {\n            this.$body.empty();\n        },\n\n        /** Return header element */\n        header: function header() {\n            return this.$header;\n        },\n\n        /** Return body element */\n        body: function body() {\n            return this.$body;\n        },\n\n        /** Show portlet */\n        show: function show() {\n            this.visible = true;\n            this.$el.fadeIn(\"fast\");\n        },\n\n        /** Hide portlet */\n        hide: function hide() {\n            this.visible = false;\n            this.$el.hide();\n        },\n\n        /** Enable a particular button */\n        enableButton: function enableButton(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", false);\n        },\n\n        /** Disable a particular button */\n        disableButton: function disableButton(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", true);\n        },\n\n        /** Hide a particular operation */\n        hideOperation: function hideOperation(id) {\n            this.$operations.find(\"#\" + id).hide();\n        },\n\n        /** Show a particular operation */\n        showOperation: function showOperation(id) {\n            this.$operations.find(\"#\" + id).show();\n        },\n\n        /** Replaces the event callback of an existing operation */\n        setOperation: function setOperation(id, callback) {\n            this.$operations.find(\"#\" + id).off(\"click\").on(\"click\", callback);\n        },\n\n        /** Change title */\n        title: function title(new_title) {\n            new_title && this.$title_text.html(new_title);\n            return this.$title_text.html();\n        },\n\n        /** Collapse portlet */\n        collapse: function collapse() {\n            this.collapsed = true;\n            this.$content.height(\"0%\");\n            this.$body.hide();\n            this.collapsible_button.setIcon(\"fa-eye-slash\");\n        },\n\n        /** Expand portlet */\n        expand: function expand() {\n            this.collapsed = false;\n            this.$content.height(\"100%\");\n            this.$body.fadeIn(\"fast\");\n            this.collapsible_button.setIcon(\"fa-eye\");\n        },\n\n        /** Disable content access */\n        disable: function disable() {\n            this.$backdrop.show();\n        },\n\n        /** Enable content access */\n        enable: function enable() {\n            this.$backdrop.hide();\n        },\n\n        _template: function _template() {\n            return $(\"<div/>\").append($(\"<div/>\").addClass(\"portlet-header\").append($(\"<div/>\").addClass(\"portlet-operations\")).append($(\"<div/>\").addClass(\"portlet-title\").append($(\"<i/>\").addClass(\"portlet-title-icon\")).append($(\"<span/>\").addClass(\"portlet-title-text\")))).append($(\"<div/>\").addClass(\"portlet-content\").append($(\"<div/>\").addClass(\"portlet-body\")).append($(\"<div/>\").addClass(\"portlet-buttons\"))).append($(\"<div/>\").addClass(\"portlet-backdrop\"));\n        }\n    });\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5), __webpack_require__(31), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui, FormSection, FormData) {\n    return Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model({\n                initial_errors: false,\n                cls: \"ui-portlet-limited\",\n                icon: null,\n                always_refresh: true,\n                status: \"warning\",\n                hide_operations: false,\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        /** Update available options */\n        update: function update(new_model) {\n            var self = this;\n            this.data.matchModel(new_model, function (node, input_id) {\n                var input = self.input_list[input_id];\n                if (input && input.options) {\n                    if (!_.isEqual(input.options, node.options)) {\n                        input.options = node.options;\n                        var field = self.field_list[input_id];\n                        if (field.update) {\n                            var new_options = [];\n                            if ([\"data\", \"data_collection\", \"drill_down\"].indexOf(input.type) != -1) {\n                                new_options = input.options;\n                            } else {\n                                for (var i in node.options) {\n                                    var opt = node.options[i];\n                                    if (opt.length > 2) {\n                                        new_options.push({\n                                            label: opt[0],\n                                            value: opt[1]\n                                        });\n                                    }\n                                }\n                            }\n                            field.update(new_options);\n                            field.trigger(\"change\");\n                            Galaxy.emit.debug(\"form-view::update()\", \"Updating options for \" + input_id);\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function wait(active) {\n            for (var i in this.input_list) {\n                var field = this.field_list[i];\n                var input = this.input_list[i];\n                if (input.is_dynamic && field.wait && field.unwait) {\n                    field[active ? \"wait\" : \"unwait\"]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function highlight(input_id, message, silent) {\n            var input_element = this.element_list[input_id];\n            if (input_element) {\n                input_element.error(message || \"Please verify this parameter.\");\n                this.portlet.expand();\n                this.trigger(\"expand\", input_id);\n                if (!silent) {\n                    var $panel = this.$el.parents().filter(function () {\n                        return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                    }).first();\n                    $panel.animate({\n                        scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120\n                    }, 500);\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function errors(options) {\n            this.trigger(\"reset\");\n            if (options && options.errors) {\n                var error_messages = this.data.matchResponse(options.errors);\n                for (var input_id in this.element_list) {\n                    var input = this.element_list[input_id];\n                    if (error_messages[input_id]) {\n                        this.highlight(input_id, error_messages[input_id], true);\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function render() {\n            var self = this;\n            this.off(\"change\");\n            this.off(\"reset\");\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager(this);\n            this._renderForm();\n            this.data.create();\n            this.model.get(\"initial_errors\") && this.errors(this.model.attributes);\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on(\"change\", function (input_id) {\n                var input = self.input_list[input_id];\n                if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                    var new_check = self.data.checksum();\n                    if (new_check != current_check) {\n                        current_check = new_check;\n                        self.model.get(\"onchange\")();\n                    }\n                }\n            });\n            this.on(\"reset\", function () {\n                _.each(self.element_list, function (input_element) {\n                    input_element.reset();\n                });\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function _renderForm() {\n            $(\".tooltip\").remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View(this, {\n                inputs: options.inputs\n            });\n            this.portlet = new Portlet.View({\n                icon: options.icon,\n                title: options.title,\n                cls: options.cls,\n                operations: !options.hide_operations && options.operations,\n                buttons: options.buttons,\n                collapsible: options.collapsible,\n                collapsed: options.collapsed,\n                onchange_title: options.onchange_title\n            });\n            this.portlet.append(this.message.$el);\n            this.portlet.append(this.section.$el);\n            this.$el.empty();\n            options.inputs && this.$el.append(this.portlet.$el);\n            options.message && this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n            Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ })\n\n},[158]);\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","/** This module contains all button views. */\ndefine([\"utils/utils\"], function(Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"btn btn-default\",\n                    wait: false,\n                    wait_text: \"Sending...\",\n                    wait_cls: \"btn btn-info\",\n                    disabled: false,\n                    percentage: -1\n                }).set(options);\n            this.setElement(\n                $(\"<button/>\")\n                    .attr(\"type\", \"button\")\n                    .append((this.$icon = $(\"<i/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n                    .append(\n                        (this.$progress = $(\"<div/>\").append(\n                            (this.$progress_bar = $(\"<div/>\"))\n                        ))\n                    )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"ui-button-default\")\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"id\", options.id)\n                .attr(\"disabled\", options.disabled)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    options.onclick && !self.disabled && options.onclick();\n                })\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress\n                .addClass(\"progress\")\n                .css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar\n                .addClass(\"progress-bar\")\n                .css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon &&\n                    options.title &&\n                    this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"\"\n                }).set(options);\n            this.setElement($(\"<a/>\").append((this.$icon = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr({\n                    id: options.id,\n                    href: options.href || \"javascript:void(0)\",\n                    title: options.title,\n                    target: options.target || \"_top\",\n                    disabled: options.disabled\n                })\n                .tooltip({ placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function() {\n                    options.onclick && !options.disabled && options.onclick();\n                });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"Select/Unselect all\",\n                    icons: [\n                        \"fa-square-o\",\n                        \"fa-minus-square-o\",\n                        \"fa-check-square-o\"\n                    ],\n                    value: 0,\n                    onchange: function() {}\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$icon = $(\"<span/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .addClass(\"ui-button-check\")\n                .off(\"click\")\n                .on(\"click\", function() {\n                    self.model.set(\n                        \"value\",\n                        (self.model.get(\"value\") === 0 && 2) || 0\n                    );\n                    options.onclick && options.onclick();\n                });\n            this.$title.html(options.title);\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa ui-margin-right\")\n                .addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = (new_val !== total && 1) || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"ui-button-icon\",\n                    disabled: false\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$button = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"disabled\", options.disabled)\n                .attr(\"id\", options.id)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    !options.disabled && options.onclick && options.onclick();\n                });\n            this.$button\n                .addClass(\"button\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: \"\",\n                    title: \"\",\n                    pull: \"right\",\n                    icon: null,\n                    onclick: null,\n                    cls: \"ui-button-icon ui-button-menu\",\n                    tooltip: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onunload: null,\n                    visible: true,\n                    tag: \"\"\n                }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$root = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(\n                this.collection,\n                \"change add remove reset\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"dropdown\")\n                .addClass(options.cls)\n                .attr(\"id\", options.id)\n                .css({\n                    display:\n                        options.visible &&\n                        this.collection.where({ visible: true }).length > 0\n                            ? \"block\"\n                            : \"none\"\n                });\n            this.$root\n                .addClass(\"root button dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function(e) {\n                    $(\".tooltip\").hide();\n                    e.preventDefault();\n                    options.onclick && options.onclick();\n                });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title\n                .removeClass()\n                .addClass(\"title\")\n                .html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\")\n                    .addClass(\"menu dropdown-menu\")\n                    .addClass(\"pull-\" + self.model.get(\"pull\"))\n                    .attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function(submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\")\n                        .addClass(\"dropdown-item\")\n                        .attr({\n                            href: suboptions.href,\n                            target: suboptions.target\n                        })\n                        .append(\n                            $(\"<i/>\")\n                                .addClass(\"fa\")\n                                .addClass(suboptions.icon)\n                                .css(\n                                    \"display\",\n                                    suboptions.icon ? \"inline-block\" : \"none\"\n                                )\n                        )\n                        .append(suboptions.title)\n                        .on(\"click\", function(e) {\n                            if (suboptions.onclick) {\n                                e.preventDefault();\n                                suboptions.onclick();\n                            }\n                        });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider &&\n                        self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function(options) {\n            this.collection.add(\n                Utils.merge(options, {\n                    title: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onclick: null,\n                    divider: false,\n                    visible: true,\n                    icon: null,\n                    cls: \"button-menu btn-group\"\n                })\n            );\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","import jQuery from \"jquery\";\nvar $ = jQuery;\nimport { GalaxyApp } from \"galaxy\";\nimport AdminPanel from \"./panels/admin-panel\";\nimport FormWrapper from \"mvc/form/form-wrapper\";\nimport GridView from \"mvc/grid/grid-view\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport QueryStringParsing from \"utils/query-string-parsing\";\nimport Router from \"layout/router\";\nimport Utils from \"utils/utils\";\nimport Page from \"layout/page\";\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"admin app\");\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            \"(/)admin(/)users\": \"show_users\",\n            \"(/)admin(/)roles\": \"show_roles\",\n            \"(/)admin(/)groups\": \"show_groups\",\n            \"(/)admin(/)tool_versions\": \"show_tool_versions\",\n            \"(/)admin(/)quotas\": \"show_quotas\",\n            \"(/)admin(/)forms\": \"show_forms\",\n            \"(/)admin(/)form(/)(:form_id)\": \"show_form\"\n        },\n\n        authenticate: function(args, name) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get(\"is_admin\");\n        },\n\n        show_users: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/users_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_roles: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/roles_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_groups: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/groups_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_tool_versions: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/tool_versions_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_quotas: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/quotas_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_forms: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"forms/forms_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_form: function(form_id) {\n            var id = \"?id=\" + QueryStringParsing.get(\"id\");\n            var form_defs = {\n                reset_user_password: {\n                    title: \"Reset passwords\",\n                    url: \"admin/reset_user_password\" + id,\n                    icon: \"fa-user\",\n                    submit_title: \"Save new password\",\n                    redirect: \"admin/users\"\n                },\n                manage_roles_and_groups_for_user: {\n                    url: \"admin/manage_roles_and_groups_for_user\" + id,\n                    icon: \"fa-users\",\n                    redirect: \"admin/users\"\n                },\n                manage_users_and_groups_for_role: {\n                    url: \"admin/manage_users_and_groups_for_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                manage_users_and_roles_for_group: {\n                    url: \"admin/manage_users_and_roles_for_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                manage_users_and_groups_for_quota: {\n                    url: \"admin/manage_users_and_groups_for_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_role: {\n                    url: \"admin/create_role\",\n                    redirect: \"admin/roles\"\n                },\n                create_group: {\n                    url: \"admin/create_group\",\n                    redirect: \"admin/groups\"\n                },\n                create_quota: {\n                    url: \"admin/create_quota\",\n                    redirect: \"admin/quotas\"\n                },\n                rename_role: {\n                    url: \"admin/rename_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                rename_group: {\n                    url: \"admin/rename_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                rename_quota: {\n                    url: \"admin/rename_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                edit_quota: {\n                    url: \"admin/edit_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                set_quota_default: {\n                    url: \"admin/set_quota_default\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_form: {\n                    url: \"forms/create_form\",\n                    redirect: \"admin/forms\"\n                },\n                edit_form: {\n                    url: \"forms/edit_form\" + id,\n                    redirect: \"admin/forms\"\n                }\n            };\n            this.page.display(new FormWrapper.View(form_defs[form_id]));\n        }\n    });\n\n    $(function() {\n        _.extend(options.config, { active_view: \"admin\" });\n        Utils.setWindowTitle(\"Administration\");\n        Galaxy.page = new Page.View(\n            _.extend(options, {\n                Left: AdminPanel,\n                Router: AdminRouter\n            })\n        );\n    });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","import _l from \"utils/localization\";\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function(page, options) {\n        var self = this;\n        this.page = page;\n        this.root = options.root;\n        this.config = options.config;\n        this.settings = options.settings;\n        this.message = options.message;\n        this.status = options.status;\n        this.model = new Backbone.Model({\n            title: _l(\"Administration\")\n        });\n        this.categories = new Backbone.Collection([\n            {\n                title: \"Server\",\n                items: [\n                    {\n                        title: \"Data types registry\",\n                        url: \"admin/view_datatypes_registry\"\n                    },\n                    {\n                        title: \"Data tables registry\",\n                        url: \"admin/view_tool_data_tables\"\n                    },\n                    {\n                        title: \"Display applications\",\n                        url: \"admin/display_applications\"\n                    },\n                    {\n                        title: \"Manage jobs\",\n                        url: \"admin/jobs\"\n                    }\n                ]\n            },\n            {\n                title: \"Tools and Tool Shed\",\n                items: [\n                    {\n                        title: \"Search Tool Shed\",\n                        url: \"admin_toolshed/browse_tool_sheds\",\n                        enabled: self.settings.is_tool_shed_installed\n                    },\n                    {\n                        title: \"Search Tool Shed (Beta)\",\n                        url: \"admin_toolshed/browse_toolsheds\",\n                        enabled:\n                            self.settings.is_tool_shed_installed &&\n                            self.config.enable_beta_ts_api_install\n                    },\n                    {\n                        title: \"Monitor installing repositories\",\n                        url:\n                            \"admin_toolshed/monitor_repository_installation?installing_repository_ids=\" +\n                            self.settings.installing_repository_ids,\n                        enabled: self.settings.installing_repository_ids\n                    },\n                    {\n                        title: \"Manage installed tools\",\n                        url: \"admin_toolshed/browse_repositories\",\n                        enabled: self.settings.is_repo_installed\n                    },\n                    {\n                        title: \"Reset metadata\",\n                        url:\n                            \"admin_toolshed/reset_metadata_on_selected_installed_repositories\",\n                        enabled: self.settings.is_repo_installed\n                    },\n                    {\n                        title: \"Download local tool\",\n                        url: \"admin/package_tool\"\n                    },\n                    {\n                        title: \"Tool lineage\",\n                        url: \"admin/tool_versions\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Reload a tool's configuration\",\n                        url: \"admin/reload_tool\"\n                    },\n                    {\n                        title: \"Review tool migration stages\",\n                        url: \"admin/review_tool_migration_stages\"\n                    },\n                    {\n                        title: \"View Tool Error Logs\",\n                        url: \"admin/tool_errors\"\n                    },\n                    {\n                        title: \"Manage Display Whitelist\",\n                        url: \"admin/sanitize_whitelist\"\n                    },\n                    {\n                        title: \"Manage Tool Dependencies\",\n                        url: \"admin/manage_tool_dependencies\"\n                    }\n                ]\n            },\n            {\n                title: \"User Management\",\n                items: [\n                    {\n                        title: \"Users\",\n                        url: \"admin/users\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Groups\",\n                        url: \"admin/groups\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Roles\",\n                        url: \"admin/roles\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"API keys\",\n                        url: \"userskeys/all_users\"\n                    },\n                    {\n                        title: \"Impersonate a user\",\n                        url: \"admin/impersonate\",\n                        enabled: self.config.allow_user_impersonation\n                    }\n                ]\n            },\n            {\n                title: \"Data\",\n                items: [\n                    {\n                        title: \"Quotas\",\n                        url: \"admin/quotas\",\n                        target: \"__use_router__\",\n                        enabled: self.config.enable_quotas\n                    },\n                    {\n                        title: \"Data libraries\",\n                        url: \"library_admin/browse_libraries\"\n                    },\n                    {\n                        title: \"Roles\",\n                        url: \"admin/roles\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Local data\",\n                        url: \"data_manager\"\n                    }\n                ]\n            },\n            {\n                title: \"Form Definitions\",\n                items: [\n                    {\n                        title: \"Form definitions\",\n                        url: \"admin/forms\",\n                        target: \"__use_router__\"\n                    }\n                ]\n            },\n            {\n                title: \"Sample Tracking\",\n                items: [\n                    {\n                        title: \"Sequencers and external services\",\n                        url: \"external_service/browse_external_services\"\n                    },\n                    {\n                        title: \"Request types\",\n                        url: \"request_type/browse_request_types\"\n                    },\n                    {\n                        title: \"Sequencing requests\",\n                        url: \"requests_admin/browse_requests\"\n                    },\n                    {\n                        title: \"Find samples\",\n                        url:\n                            \"requests_common/find_samples?cntrller=requests_admin\"\n                    }\n                ]\n            }\n        ]);\n        this.setElement(this._template());\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each(function(category) {\n            var $section = $(self._templateSection(category.attributes));\n            var $entries = $section.find(\".ui-side-section-body\");\n            _.each(category.get(\"items\"), function(item) {\n                if (item.enabled === undefined || item.enabled) {\n                    var $link = $(\"<a/>\")\n                        .attr({ href: self.root + item.url })\n                        .text(_l(item.title));\n                    if (item.target == \"__use_router__\") {\n                        $link.on(\"click\", function(e) {\n                            e.preventDefault();\n                            self.page.router.push(item.url);\n                        });\n                    } else {\n                        $link.attr(\"target\", \"galaxy_main\");\n                    }\n                    $entries.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-side-section-body-title\")\n                            .append($link)\n                    );\n                }\n            });\n            self.$el.append($section);\n        });\n        this.page\n            .$(\"#galaxy_main\")\n            .prop(\n                \"src\",\n                this.root +\n                    \"admin/center?message=\" +\n                    this.message +\n                    \"&status=\" +\n                    this.status\n            );\n    },\n\n    _templateSection: function(options) {\n        return [\n            \"<div>\",\n            '<div class=\"ui-side-section-title\">' +\n                _l(options.title) +\n                \"</div>\",\n            '<div class=\"ui-side-section-body\"/>',\n            \"</div>\"\n        ].join(\"\");\n    },\n\n    _template: function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString: function() {\n        return \"adminPanel\";\n    }\n});\n\nexport default AdminPanel;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/grid/grid-model\",\n        \"mvc/grid/grid-template\",\n        \"mvc/ui/popup-menu\"\n    ],\n    function(Utils, GridModel, Templates, PopupMenu) {\n        // grid view\n        return Backbone.View.extend({\n            // model\n            grid: null,\n\n            // Initialize\n            initialize: function(grid_config) {\n                this.grid = new GridModel();\n                this.dict_format = grid_config.dict_format;\n                this.title = grid_config.title;\n                var self = this;\n                window.add_tag_to_grid_filter = function(tag_name, tag_value) {\n                    // Put tag name and value together.\n                    var tag =\n                        tag_name +\n                        (tag_value !== undefined && tag_value !== \"\"\n                            ? \":\" + tag_value\n                            : \"\");\n                    var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                    if (!advanced_search) {\n                        $(\"#standard-search\").slideToggle(\"fast\");\n                        $(\"#advanced-search\").slideToggle(\"fast\");\n                    }\n                    self.add_filter_condition(\"tags\", tag);\n                };\n\n                // set element\n                if (this.dict_format) {\n                    this.setElement(\"<div/>\");\n                    if (grid_config.url_base && !grid_config.items) {\n                        var url_data = grid_config.url_data || {};\n                        _.each(grid_config.filters, function(v, k) {\n                            url_data[\"f-\" + k] = v;\n                        });\n                        $.ajax({\n                            url: grid_config.url_base + \"?\" + $.param(url_data),\n                            success: function(response) {\n                                response.embedded = grid_config.embedded;\n                                response.filters = grid_config.filters || {};\n                                self.init_grid(response);\n                            }\n                        });\n                    } else {\n                        this.init_grid(grid_config);\n                    }\n                } else {\n                    this.setElement(\"#grid-container\");\n                    this.init_grid(grid_config);\n                }\n\n                // fix padding\n                if (grid_config.use_panels) {\n                    $(\"#center\").css({\n                        padding: \"10px\",\n                        overflow: \"auto\"\n                    });\n                }\n            },\n\n            // refresh frames\n            handle_refresh: function(refresh_frames) {\n                if (refresh_frames) {\n                    if ($.inArray(\"history\", refresh_frames) > -1) {\n                        if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                            top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                        }\n                    }\n                }\n            },\n\n            // Initialize\n            init_grid: function(grid_config) {\n                this.grid.set(grid_config);\n\n                // get options\n                var options = this.grid.attributes;\n\n                if (this.allow_title_display && options.title) {\n                    Utils.setWindowTitle(options.title);\n                }\n                // handle refresh requests\n                this.handle_refresh(options.refresh_frames);\n\n                // strip protocol and domain\n                var url = this.grid.get(\"url_base\");\n                url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n                this.grid.set(\"url_base\", url);\n\n                // append main template\n                this.$el.html(Templates.grid(options));\n\n                // update div contents\n                this.$el\n                    .find(\"#grid-table-header\")\n                    .html(Templates.header(options));\n                this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n                this.$el\n                    .find(\"#grid-table-footer\")\n                    .html(Templates.footer(options));\n\n                // update message\n                if (options.message) {\n                    this.$el\n                        .find(\"#grid-message\")\n                        .html(Templates.message(options));\n                    var self = this;\n                    if (options.use_hide_message) {\n                        setTimeout(function() {\n                            self.$el.find(\"#grid-message\").html(\"\");\n                        }, 5000);\n                    }\n                }\n\n                // configure elements\n                this.init_grid_elements();\n                this.init_grid_controls();\n\n                // attach global event handler\n                // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n                init_refresh_on_change();\n            },\n\n            // Initialize grid controls\n            init_grid_controls: function() {\n                // link\n                var self = this;\n\n                // Initialize grid operation button.\n                this.$el.find(\".operation-button\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.submit_operation(this);\n                        return false;\n                    });\n                });\n\n                // Initialize text filters to select text on click and use normal font when user is typing.\n                this.$el.find(\"input[type=text]\").each(function() {\n                    $(this).off();\n                    $(this)\n                        .click(function() {\n                            $(this).select();\n                        })\n                        .keyup(function() {\n                            $(this).css(\"font-style\", \"normal\");\n                        });\n                });\n\n                // Initialize sort links.\n                this.$el.find(\".sort-link\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_sort_condition($(this).attr(\"sort_key\"));\n                        return false;\n                    });\n                });\n\n                // Initialize text filters.\n                this.$el.find(\".text-filter-form\").each(function() {\n                    $(this).off();\n                    $(this).submit(function() {\n                        var column_key = $(this).attr(\"column_key\");\n                        var text_input_obj = $(\n                            \"#input-\" + column_key + \"-filter\"\n                        );\n                        var text_input = text_input_obj.val();\n                        text_input_obj.val(\"\");\n                        self.add_filter_condition(column_key, text_input);\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".text-filter-val > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        // Remove visible element.\n                        $(this)\n                            .parent()\n                            .remove();\n\n                        // Remove filter condition.\n                        self.remove_filter_condition(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n\n                        // Return\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".categorical-filter > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_categorical_filter(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n                        return false;\n                    });\n                });\n\n                // Initialize standard, advanced search toggles.\n                this.$el.find(\".advanced-search-toggle\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                        self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                        return false;\n                    });\n                });\n\n                // Add event to check all box\n                this.$el.find(\"#check_all\").off();\n                this.$el.find(\"#check_all\").on(\"click\", function() {\n                    self.check_all_items();\n                });\n            },\n\n            // Initialize grid elements.\n            init_grid_elements: function() {\n                // Initialize grid selection checkboxes.\n                this.$el.find(\".grid\").each(function() {\n                    var checkboxes = $(this).find(\n                        \"input.grid-row-select-checkbox\"\n                    );\n                    var check_count = $(this).find(\"span.grid-selected-count\");\n                    var update_checked = function() {\n                        check_count.text(\n                            $(checkboxes).filter(\":checked\").length\n                        );\n                    };\n\n                    $(checkboxes).each(function() {\n                        $(this).change(update_checked);\n                    });\n                    update_checked();\n                });\n\n                // Initialize ratings.\n                if (this.$el.find(\".community_rating_star\").length !== 0)\n                    this.$el.find(\".community_rating_star\").rating({});\n\n                // get options\n                var options = this.grid.attributes;\n                var self = this;\n\n                //\n                // add page click events\n                //\n                this.$el.find(\".page-link > a\").each(function() {\n                    $(this).click(function() {\n                        self.set_page($(this).attr(\"page_num\"));\n                        return false;\n                    });\n                });\n\n                //\n                // add inbound/outbound events\n                //\n                this.$el.find(\".use-target\").each(function() {\n                    $(this).click(function(e) {\n                        self.execute({\n                            href: $(this).attr(\"href\"),\n                            target: $(this).attr(\"target\")\n                        });\n                        return false;\n                    });\n                });\n\n                // empty grid?\n                var items_length = options.items.length;\n                if (items_length == 0) {\n                    return;\n                }\n\n                // add operation popup menus\n                _.each(options.items, function(item, index) {\n                    var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                    var popup = new PopupMenu(button);\n                    _.each(options[\"operations\"], function(operation) {\n                        self._add_operation(popup, operation, item);\n                    });\n                });\n            },\n\n            /** Add an operation to the items menu */\n            _add_operation: function(popup, operation, item) {\n                var self = this;\n                var settings = item.operation_config[operation.label];\n                if (settings.allowed && operation.allow_popup) {\n                    popup.addItem({\n                        html: operation.label,\n                        href: settings.url_args,\n                        target: settings.target,\n                        confirmation_text: operation.confirm,\n                        func: function(e) {\n                            e.preventDefault();\n                            var label = $(e.target).html();\n                            if (operation.onclick) {\n                                operation.onclick(item.encode_id);\n                            } else {\n                                self.execute(this.findItemByHtml(label));\n                            }\n                        }\n                    });\n                }\n            },\n\n            // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n            add_filter_condition: function(name, value) {\n                // Do nothing is value is empty.\n                if (value === \"\") {\n                    return false;\n                }\n\n                // Add condition to grid.\n                this.grid.add_filter(name, value, true);\n\n                // Add button that displays filter and provides a button to delete it.\n                var t = $(Templates.filter_element(name, value));\n                var self = this;\n                t.click(function() {\n                    // Remove visible element.\n                    $(this).remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition(name, value);\n                });\n\n                // append to container\n                var container = this.$el.find(\n                    \"#\" + name + \"-filtering-criteria\"\n                );\n                container.append(t);\n\n                // execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n            remove_filter_condition: function(name, value) {\n                // Remove filter condition.\n                this.grid.remove_filter(name, value);\n\n                // Execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set sort condition for grid.\n            set_sort_condition: function(col_key) {\n                // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n                // currently sorted column, sort is reversed.\n                var cur_sort = this.grid.get(\"sort_key\");\n                var new_sort = col_key;\n                if (cur_sort.indexOf(col_key) !== -1) {\n                    // Reverse sort.\n                    if (cur_sort.substring(0, 1) !== \"-\") {\n                        new_sort = \"-\" + col_key;\n                    }\n                }\n\n                // Remove sort arrows elements.\n                this.$el.find(\".sort-arrow\").remove();\n\n                // Add sort arrow element to new sort column.\n                var sort_arrow =\n                    new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n                var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\n                    \"sort-arrow\"\n                );\n\n                // Add to header\n                this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n                // Update grid.\n                this.grid.set(\"sort_key\", new_sort);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set new value for categorical filter.\n            set_categorical_filter: function(name, new_value) {\n                // Update filter hyperlinks to reflect new filter value.\n                var category_filter = this.grid.get(\"categorical_filters\")[\n                        name\n                    ],\n                    cur_value = this.grid.get(\"filters\")[name];\n                var self = this;\n                this.$el.find(\".\" + name + \"-filter\").each(function() {\n                    var text = $.trim($(this).text());\n                    var filter = category_filter[text];\n                    var filter_value = filter[name];\n                    if (filter_value == new_value) {\n                        // Remove filter link since grid will be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        $(this).empty();\n                        $(this).addClass(\"current-filter\");\n                        $(this).append(text);\n                    } else if (filter_value == cur_value) {\n                        // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        $(this).empty();\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_categorical_filter(name, filter_value);\n                        });\n                        $(this).removeClass(\"current-filter\");\n                        $(this).append(t);\n                    }\n                });\n\n                // Update grid.\n                this.grid.add_filter(name, new_value);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set page to view.\n            set_page: function(new_page) {\n                // Update page hyperlink to reflect new page.\n                var self = this;\n                this.$el.find(\".page-link\").each(function() {\n                    var id = $(this).attr(\"id\"),\n                        page_num = parseInt(id.split(\"-\")[2], 10), // Id has form 'page-link-<page_num>\n                        cur_page = self.grid.get(\"cur_page\"),\n                        text;\n                    if (page_num === new_page) {\n                        // Remove link to page since grid will be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        text = $(this)\n                            .children()\n                            .text();\n                        $(this).empty();\n                        $(this).addClass(\"inactive-link\");\n                        $(this).text(text);\n                    } else if (page_num === cur_page) {\n                        // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        text = $(this).text();\n                        $(this).empty();\n                        $(this).removeClass(\"inactive-link\");\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_page(page_num);\n                        });\n                        $(this).append(t);\n                    }\n                });\n\n                if (new_page === \"all\") {\n                    this.grid.set(\"cur_page\", new_page);\n                } else {\n                    this.grid.set(\"cur_page\", parseInt(new_page, 10));\n                }\n                this.execute();\n            },\n\n            // confirmation/submission of operation request\n            submit_operation: function(operation_button, confirmation_text) {\n                // identify operation\n                var operation_name = $(operation_button).val();\n\n                // verify in any item is selected\n                var number_of_checked_ids = this.$el.find(\n                    'input[name=\"id\"]:checked'\n                ).length;\n                if (!number_of_checked_ids > 0) {\n                    return false;\n                }\n\n                // Check to see if there's grid confirmation text for this operation\n                var operation = _.findWhere(this.grid.attributes.operations, {\n                    label: operation_name\n                });\n                if (operation && !confirmation_text) {\n                    confirmation_text = operation.confirm || \"\";\n                }\n\n                // collect ids\n                var item_ids = [];\n                this.$el.find(\"input[name=id]:checked\").each(function() {\n                    item_ids.push($(this).val());\n                });\n\n                // execute operation\n                var options = {\n                    operation: operation_name,\n                    id: item_ids,\n                    confirmation_text: confirmation_text\n                };\n                if (operation.target == \"top\") {\n                    options = _.extend(options, {\n                        href: operation.href,\n                        target: operation.target\n                    });\n                }\n                this.execute(options);\n                return true;\n            },\n\n            check_all_items: function() {\n                var check = this.$(\".grid-row-select-checkbox\");\n                var state = this.$(\"#check_all\").prop(\"checked\");\n                _.each(check, function(c) {\n                    $(c).prop(\"checked\", state);\n                });\n                this.init_grid_elements();\n            },\n\n            // Go back to page one; this is useful when a filter is applied.\n            go_page_one: function() {\n                // Need to go back to page 1 if not showing all.\n                var cur_page = this.grid.get(\"cur_page\");\n                if (\n                    cur_page !== null &&\n                    cur_page !== undefined &&\n                    cur_page !== \"all\"\n                ) {\n                    this.grid.set(\"cur_page\", 1);\n                }\n            },\n\n            //\n            // execute operations and hyperlink requests\n            //\n            execute: function(options) {\n                // get url\n                var id = null;\n                var href = null;\n                var operation = null;\n                var confirmation_text = null;\n                var target = null;\n\n                // check for options\n                if (options) {\n                    // get options\n                    href = options.href;\n                    operation = options.operation;\n                    id = options.id;\n                    confirmation_text = options.confirmation_text;\n                    target = options.target;\n\n                    // check if input contains the operation tag\n                    if (\n                        href !== undefined &&\n                        href.indexOf(\"operation=\") != -1\n                    ) {\n                        // Get operation, id in hyperlink's href.\n                        var href_parts = href.split(\"?\");\n                        if (href_parts.length > 1) {\n                            var href_parms_str = href_parts[1];\n                            var href_parms = href_parms_str.split(\"&\");\n                            for (\n                                var index = 0;\n                                index < href_parms.length;\n                                index++\n                            ) {\n                                if (\n                                    href_parms[index].indexOf(\"operation\") != -1\n                                ) {\n                                    // Found operation parm; get operation value.\n                                    operation = href_parms[index].split(\"=\")[1];\n                                    operation = operation.replace(/\\+/g, \" \");\n                                } else if (\n                                    href_parms[index].indexOf(\"id\") != -1\n                                ) {\n                                    // Found id parm; get id value.\n                                    id = href_parms[index].split(\"=\")[1];\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // check for operation details\n                if (operation && id) {\n                    // show confirmation box\n                    if (\n                        confirmation_text &&\n                        confirmation_text != \"\" &&\n                        confirmation_text != \"None\" &&\n                        confirmation_text != \"null\"\n                    )\n                        if (!confirm(confirmation_text)) return false;\n\n                    // use small characters for operation?!\n                    operation = operation.toLowerCase();\n\n                    // Update grid.\n                    this.grid.set({\n                        operation: operation,\n                        item_ids: id\n                    });\n\n                    // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                    if (target == \"top\") {\n                        window.top.location =\n                            href + \"?\" + $.param(this.grid.get_url_data());\n                    } else if (\n                        this.grid.can_async_op(operation) ||\n                        this.dict_format\n                    ) {\n                        this.update_grid();\n                    } else {\n                        this.go_to(target, href);\n                    }\n\n                    // done\n                    return false;\n                }\n\n                // refresh grid\n                if (href) {\n                    this.go_to(target, href);\n                    return false;\n                }\n\n                // refresh grid\n                if (this.grid.get(\"async\") || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            },\n\n            // go to url\n            go_to: function(target, href) {\n                // get aysnc status\n                var async = this.grid.get(\"async\");\n                this.grid.set(\"async\", false);\n\n                // get slide status\n                var advanced_search = this.$el\n                    .find(\"#advanced-search\")\n                    .is(\":visible\");\n                this.grid.set(\"advanced_search\", advanced_search);\n\n                // get default url\n                if (!href) {\n                    href =\n                        this.grid.get(\"url_base\") +\n                        \"?\" +\n                        $.param(this.grid.get_url_data());\n                }\n\n                // clear grid of transient request attributes.\n                this.grid.set({\n                    operation: undefined,\n                    item_ids: undefined,\n                    async: async\n                });\n                switch (target) {\n                    case \"inbound\":\n                        // this currently assumes that there is only a single grid shown at a time\n                        var $div = $(\".grid-header\").closest(\".inbound\");\n                        if ($div.length !== 0) {\n                            $div.load(href);\n                            return;\n                        }\n                        break;\n                    case \"top\":\n                        window.top.location = href;\n                        break;\n                    default:\n                        window.location = href;\n                }\n            },\n\n            // Update grid.\n            update_grid: function() {\n                // If there's an operation, do POST; otherwise, do GET.\n                var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n                // Show overlay to indicate loading and prevent user actions.\n                this.$el.find(\".loading-elt-overlay\").show();\n                var self = this;\n                $.ajax({\n                    type: method,\n                    url: self.grid.get(\"url_base\"),\n                    data: self.grid.get_url_data(),\n                    error: function(response) {\n                        alert(\"Grid refresh failed\");\n                    },\n                    success: function(response_text) {\n                        // backup\n                        var embedded = self.grid.get(\"embedded\");\n                        var insert = self.grid.get(\"insert\");\n                        var advanced_search = self.$el\n                            .find(\"#advanced-search\")\n                            .is(\":visible\");\n\n                        // request new configuration\n                        var json = self.dict_format\n                            ? response_text\n                            : $.parseJSON(response_text);\n\n                        // update\n                        json.embedded = embedded;\n                        json.insert = insert;\n                        json.advanced_search = advanced_search;\n\n                        // Initialize new grid config\n                        self.init_grid(json);\n\n                        // Hide loading overlay.\n                        self.$el.find(\".loading-elt-overlay\").hide();\n                    },\n                    complete: function() {\n                        // Clear grid of transient request attributes.\n                        self.grid.set({\n                            operation: undefined,\n                            item_ids: undefined\n                        });\n                    }\n                });\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    cls: \"ui-select\",\n                    error_text: \"No options available\",\n                    empty_text: \"Nothing selected\",\n                    visible: true,\n                    wait: false,\n                    multiple: false,\n                    searchable: true,\n                    optional: false,\n                    disabled: false,\n                    readonly: false,\n                    onchange: function() {},\n                    value: null,\n                    individual: false,\n                    pagesize: 20\n                }).set(options);\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\") &&\n                    self.model.get(\"onchange\")(self.value());\n            });\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:disabled\",\n                this._changeDisabled,\n                this\n            );\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:multiple change:searchable change:cls change:id\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.model.get(\"searchable\")\n                ? this._renderSearchable()\n                : this._renderClassic();\n            this.$el\n                .addClass(this.model.get(\"cls\"))\n                .attr(\"id\", this.model.get(\"id\"));\n            this.$select\n                .empty()\n                .addClass(\"select\")\n                .attr(\"id\", this.model.get(\"id\") + \"_select\")\n                .prop(\"multiple\", this.model.get(\"multiple\"))\n                .on(\"change\", function() {\n                    self.value(self._getValue());\n                    self.trigger(\"change\");\n                });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function() {\n            var self = this;\n            this.$el\n                .addClass(\n                    this.model.get(\"multiple\")\n                        ? \"ui-select-multiple\"\n                        : \"ui-select\"\n                )\n                .append((this.$select = $(\"<select/>\")))\n                .append((this.$dropdown = $(\"<div/>\")))\n                .append(\n                    (this.$resize = $(\"<div/>\").append(\n                        (this.$resize_icon = $(\"<i/>\"))\n                    ))\n                );\n            if (this.model.get(\"multiple\")) {\n                this.$dropdown.hide();\n                this.$resize_icon\n                    .addClass(\"fa fa-angle-double-right fa-rotate-45\")\n                    .show();\n                this.$resize\n                    .removeClass()\n                    .addClass(\"icon-resize\")\n                    .show()\n                    .off(\"mousedown\")\n                    .on(\"mousedown\", function(event) {\n                        var currentY = event.pageY;\n                        var currentHeight = self.$select.height();\n                        self.minHeight = self.minHeight || currentHeight;\n                        $(\"#dd-helper\")\n                            .show()\n                            .on(\"mousemove\", function(event) {\n                                self.$select.height(\n                                    Math.max(\n                                        currentHeight +\n                                            (event.pageY - currentY),\n                                        self.minHeight\n                                    )\n                                );\n                            })\n                            .on(\"mouseup mouseleave\", function() {\n                                $(\"#dd-helper\")\n                                    .hide()\n                                    .off();\n                            });\n                    });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function() {\n            var self = this;\n            this.$el\n                .append((this.$select = $(\"<div/>\")))\n                .append((this.$dropdown = $(\"<div/>\")));\n            this.$dropdown.hide();\n            if (!this.model.get(\"multiple\")) {\n                this.$dropdown.show().on(\"click\", function() {\n                    self.$select.select2 && self.$select.select2(\"open\");\n                });\n            }\n            this.all_button = null;\n            if (\n                this.model.get(\"multiple\") &&\n                !this.model.get(\"individual\") &&\n                !this.model.get(\"readonly\")\n            ) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 &&\n                            _.each(self.model.get(\"data\"), function(option) {\n                                new_value.push(option.value);\n                            });\n                        self.value(new_value);\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function(term, text) {\n            return (\n                !term ||\n                term == \"\" ||\n                String(text)\n                    .toUpperCase()\n                    .indexOf(term.toUpperCase()) >= 0\n            );\n        },\n\n        /** Updates the selection options */\n        _changeData: function() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: self.model.get(\"empty_text\")\n                });\n            }\n            _.each(this.model.get(\"data\"), function(option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: this.model.get(\"error_text\")\n                });\n            }\n            if (this.model.get(\"searchable\")) {\n                this.data2 = [];\n                _.each(this.data, function(option, index) {\n                    self.data2.push({\n                        order: index,\n                        id: option.value,\n                        text: option.label,\n                        tags: option.tags\n                    });\n                });\n                this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get(\"multiple\"),\n                    multiple: this.model.get(\"multiple\"),\n                    query: function(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get(\"pagesize\");\n                        var results = _.filter(self.data2, function(e) {\n                            var found = false;\n                            _.each(e.tags, function(tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice(\n                                (q.page - 1) * pagesize,\n                                q.page * pagesize\n                            ),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function(result) {\n                        return (\n                            _.escape(result.text) +\n                            '<div class=\"ui-tags\">' +\n                            _.reduce(\n                                result.tags,\n                                function(memo, tag) {\n                                    if (self.matched_tags[tag]) {\n                                        return (\n                                            memo +\n                                            \"&nbsp;\" +\n                                            '<div class=\"label label-info\">' +\n                                            _.escape(tag) +\n                                            \"</div>\"\n                                        );\n                                    }\n                                    return memo;\n                                },\n                                \"\"\n                            ) +\n                            \"</div>\"\n                        );\n                    }\n                });\n                this.$(\".select2-container .select2-search input\").off(\"blur\");\n            } else {\n                this.$select.find(\"option\").remove();\n                _.each(this.data, function(option) {\n                    self.$select.append(\n                        $(\"<option/>\")\n                            .attr(\"value\", option.value)\n                            .html(_.escape(option.label))\n                    );\n                });\n            }\n            this.model.set(\n                \"disabled\",\n                this.model.get(\"readonly\") || this.length() == 0\n            );\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function() {\n            if (this.model.get(\"searchable\")) {\n                this.$select.select2(\n                    this.model.get(\"disabled\") ? \"disable\" : \"enable\"\n                );\n            } else {\n                this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function() {\n            this.$dropdown\n                .removeClass()\n                .addClass(\"icon-dropdown fa\")\n                .addClass(\n                    this.model.get(\"wait\")\n                        ? \"fa-spinner fa-spin\"\n                        : \"fa-caret-down\"\n                );\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (this.model.get(\"multiple\")) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value(\n                        $.isArray(value) ? value.length : 0,\n                        this.length()\n                    );\n                }\n            } else if (\n                this._getValue() === null &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : \"\";\n        },\n\n        /** Show the select field */\n        show: function() {\n            this.model.set(\"visible\", true);\n        },\n\n        /** Hide the select field */\n        hide: function() {\n            this.model.set(\"visible\", false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function() {\n            return this.model.get(\"disabled\");\n        },\n\n        /** Enable the select field */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Disable the select field */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Update all available options at once */\n        add: function(options, sorter) {\n            _.each(this.model.get(\"data\"), function(v) {\n                v.keep &&\n                    !_.findWhere(options, { value: v.value }) &&\n                    options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set(\"data\", options);\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function(callback) {\n            this.model.set(\"onchange\", callback);\n        },\n\n        /** Number of available options */\n        length: function() {\n            return $.isArray(this.model.get(\"data\"))\n                ? this.model.get(\"data\").length\n                : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = \"__null__\";\n            }\n            if (this.model.get(\"multiple\")) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = \"__null__\";\n                }\n            }\n            if (this.model.get(\"searchable\")) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function(v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2(\"data\", new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var val = null;\n            if (this.model.get(\"searchable\")) {\n                var selected = this.$select.select2(\"data\");\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function(a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function(v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","/** Base class for options based ui elements **/\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    visible: true,\n                    data: [],\n                    id: Utils.uid(),\n                    error_text: \"No options available.\",\n                    wait_text: \"Please wait...\",\n                    multiple: false,\n                    optional: false,\n                    onchange: function() {}\n                }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.$el\n                .empty()\n                .removeClass()\n                .addClass(\"ui-options\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n                .append((this.$options = $(this._template())));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        self\n                            .$(\"input\")\n                            .prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(\n                    this._templateOptions(this.model.get(\"data\"))\n                );\n            } else {\n                _.each(this.model.get(\"data\"), function(option) {\n                    self.$options.append(\n                        $(self._templateOption(option))\n                            .addClass(\"ui-option\")\n                            .tooltip({\n                                title: option.tooltip,\n                                placement: \"bottom\"\n                            })\n                    );\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function() {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (\n                this._getValue() === null &&\n                !this.model.get(\"multiple\") &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n            this.all_button &&\n                this.all_button.value(\n                    $.isArray(this._getValue()) ? this._getValue().length : 0,\n                    this.length()\n                );\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function(v) {\n                        self\n                            .$('input[value=\"' + v + '\"]')\n                            .first()\n                            .prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function() {\n            var selected = [];\n            this.$(\":checked\").each(function() {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function(text, status) {\n            this.$message\n                .show()\n                .removeClass()\n                .addClass(\"ui-message alert alert-\" + status)\n                .html(text);\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\")\n                .addClass(\"ui-option\")\n                .append(\n                    $(\"<input/>\").attr({\n                        id: id,\n                        type: this.model.get(\"type\"),\n                        name: this.model.id,\n                        value: pair.value\n                    })\n                )\n                .append(\n                    $(\"<label/>\")\n                        .addClass(\"ui-options-label\")\n                        .attr(\"for\", id)\n                        .html(pair.label)\n                );\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]')\n                    .prop(\"checked\", true)\n                    .closest(\"label\")\n                    .addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon &&\n                $el.append(\n                    $(\"<i/>\")\n                        .addClass(\"fa\")\n                        .addClass(pair.icon)\n                        .addClass(!pair.label && \"no-padding\")\n                );\n            $el.append(\n                $(\"<input/>\").attr({\n                    type: \"radio\",\n                    name: this.model.id,\n                    value: pair.value\n                })\n            );\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"btn-group ui-radiobutton\")\n                .attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-portlet\", \"mvc/ui/ui-misc\"], function(\n    Utils,\n    Portlet,\n    Ui\n) {\n    // ui list element\n    var View = Backbone.View.extend({\n        // create portlet to keep track of selected list elements\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // initialize options\n            this.options = options;\n            this.name = options.name || \"element\";\n            this.multiple = options.multiple || false;\n\n            // create message handler\n            this.message = new Ui.Message();\n\n            // create portlet\n            this.portlet = new Portlet.View({ cls: \"ui-portlet-section\" });\n\n            // create select field containing the options which can be inserted into the list\n            this.select = new Ui.Select.View({ optional: options.optional });\n\n            // create insert new list element button\n            this.button = new Ui.ButtonIcon({\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Insert new \" + this.name,\n                onclick: function() {\n                    self.add({\n                        id: self.select.value(),\n                        name: self.select.text()\n                    });\n                }\n            });\n\n            // build main element\n            this.setElement(this._template(options));\n            this.$(\".ui-list-message\").append(this.message.$el);\n            this.$(\".ui-list-portlet\").append(this.portlet.$el);\n            this.$(\".ui-list-button\").append(this.button.$el);\n            this.$(\".ui-list-select\").append(this.select.$el);\n        },\n\n        /** Return/Set currently selected list elements */\n        value: function(val) {\n            // set new value\n            if (val !== undefined) {\n                this.portlet.empty();\n                if ($.isArray(val)) {\n                    for (var i in val) {\n                        var v = val[i];\n                        var v_id = null;\n                        var v_name = null;\n                        if ($.type(v) != \"string\") {\n                            v_id = v.id;\n                            v_name = v.name;\n                        } else {\n                            v_id = v_name = v;\n                        }\n                        if (v_id != null) {\n                            this.add({\n                                id: v_id,\n                                name: v_name\n                            });\n                        }\n                    }\n                }\n                this._refresh();\n            }\n            // get current value\n            var lst = [];\n            this.$(\".ui-list-id\").each(function() {\n                lst.push({\n                    id: $(this).prop(\"id\"),\n                    name: $(this)\n                        .find(\".ui-list-name\")\n                        .html()\n                });\n            });\n            if (lst.length == 0) {\n                return null;\n            }\n            return lst;\n        },\n\n        /** Add row */\n        add: function(options) {\n            var self = this;\n            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n                if (!Utils.isEmpty(options.id)) {\n                    var $el = $(\n                        this._templateRow({\n                            id: options.id,\n                            name: options.name\n                        })\n                    );\n                    $el.on(\"click\", function() {\n                        $el.remove();\n                        self._refresh();\n                    });\n                    $el.on(\"mouseover\", function() {\n                        $el.addClass(\"portlet-highlight\");\n                    });\n                    $el.on(\"mouseout\", function() {\n                        $el.removeClass(\"portlet-highlight\");\n                    });\n                    this.portlet.append($el);\n                    this._refresh();\n                } else {\n                    this.message.update({\n                        message: \"Please select a valid \" + this.name + \".\",\n                        status: \"danger\"\n                    });\n                }\n            } else {\n                this.message.update({\n                    message: \"This \" + this.name + \" is already in the list.\"\n                });\n            }\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.select.update(options);\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            if (this.$(\".ui-list-id\").length > 0) {\n                !this.multiple && this.button.disable();\n                this.$(\".ui-list-portlet\").show();\n            } else {\n                this.button.enable();\n                this.$(\".ui-list-portlet\").hide();\n            }\n            this.options.onchange && this.options.onchange();\n        },\n\n        /** Main Template */\n        _template: function(options) {\n            return (\n                '<div class=\"ui-list\">' +\n                '<div class=\"ui-margin-top\">' +\n                '<span class=\"ui-list-button\"/>' +\n                '<span class=\"ui-list-select\"/>' +\n                \"</div>\" +\n                '<div class=\"ui-list-message\"/>' +\n                '<div class=\"ui-list-portlet\"/>' +\n                \"</div>\"\n            );\n        },\n\n        /** Row Template */\n        _templateRow: function(options) {\n            return (\n                '<div id=\"' +\n                options.id +\n                '\" class=\"ui-list-id\">' +\n                '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                '<span class=\"ui-list-name\">' +\n                options.name +\n                \"</span>\" +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-list.js","define(\n    [\n        //jquery\n        //backbone\n    ],\n    function() {\n        // =============================================================================\n        /**\n * view for a popup menu\n */\n        var PopupMenu = Backbone.View.extend({\n            //TODO: maybe better as singleton off the Galaxy obj\n            /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n            initialize: function($button, options) {\n                // default settings\n                this.$button = $button;\n                if (!this.$button.length) {\n                    this.$button = $(\"<div/>\");\n                }\n                this.options = options || [];\n                this.$button.data(\"popupmenu\", this);\n\n                // set up button click -> open menu behavior\n                var menu = this;\n                this.$button.click(function(event) {\n                    // if there's already a menu open, remove it\n                    $(\".popmenu-wrapper\").remove();\n                    menu._renderAndShow(event);\n                    return false;\n                });\n            },\n\n            // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n            _renderAndShow: function(clickEvent) {\n                this.render();\n                this.$el\n                    .appendTo(\"body\")\n                    .css(this._getShownPosition(clickEvent))\n                    .show();\n                this._setUpCloseBehavior();\n            },\n\n            // render the menu\n            // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n            render: function() {\n                // render the menu body absolute and hidden, fill with template\n                this.$el\n                    .addClass(\"popmenu-wrapper\")\n                    .hide()\n                    .css({ position: \"absolute\" })\n                    .html(this.template(this.$button.attr(\"id\"), this.options));\n\n                // set up behavior on each link/anchor elem\n                if (this.options.length) {\n                    var menu = this;\n                    //precondition: there should be one option per li\n                    this.$el.find(\"li\").each(function(i, li) {\n                        var option = menu.options[i];\n\n                        // if the option has 'func', call that function when the anchor is clicked\n                        if (option.func) {\n                            $(this)\n                                .children(\"a.popupmenu-option\")\n                                .click(function(event) {\n                                    option.func.call(menu, event, option);\n                                    // We must preventDefault otherwise clicking \"cancel\"\n                                    // on a purge or something still navigates and causes\n                                    // the action.\n                                    event.preventDefault();\n                                    // bubble up so that an option click will call the close behavior\n                                });\n                        }\n                    });\n                }\n                return this;\n            },\n\n            template: function(id, options) {\n                return [\n                    '<ul id=\"',\n                    id,\n                    '-menu\" class=\"dropdown-menu\">',\n                    this._templateOptions(options),\n                    \"</ul>\"\n                ].join(\"\");\n            },\n\n            _templateOptions: function(options) {\n                if (!options.length) {\n                    return \"<li>(no options)</li>\";\n                }\n                return _.map(options, function(option) {\n                    if (option.divider) {\n                        return '<li class=\"divider\"></li>';\n                    } else if (option.header) {\n                        return [\n                            '<li class=\"head\"><a href=\"javascript:void(0);\">',\n                            option.html,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }\n                    var href = option.href || \"javascript:void(0);\",\n                        target = option.target\n                            ? ' target=\"' + option.target + '\"'\n                            : \"\",\n                        check = option.checked\n                            ? '<span class=\"fa fa-check\"></span>'\n                            : \"\";\n                    return [\n                        '<li><a class=\"popupmenu-option\" href=\"',\n                        href,\n                        '\"',\n                        target,\n                        \">\",\n                        check,\n                        option.html,\n                        \"</a></li>\"\n                    ].join(\"\");\n                }).join(\"\");\n            },\n\n            // get the absolute position/offset for the menu\n            _getShownPosition: function(clickEvent) {\n                // display menu horiz. centered on click...\n                var menuWidth = this.$el.width();\n                var x = clickEvent.pageX - menuWidth / 2;\n\n                // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n                x = Math.min(\n                    x,\n                    $(document).scrollLeft() + $(window).width() - menuWidth - 5\n                );\n                x = Math.max(x, $(document).scrollLeft() + 5);\n                return {\n                    top: clickEvent.pageY,\n                    left: x\n                };\n            },\n\n            // bind an event handler to all available frames so that when anything is clicked\n            // the menu is removed from the DOM and the event handler unbinds itself\n            _setUpCloseBehavior: function() {\n                var menu = this;\n                //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n                // function to close popup and unbind itself\n                function closePopup(event) {\n                    $(document).off(\"click.close_popup\");\n                    if (window && window.parent !== window) {\n                        try {\n                            $(window.parent.document).off(\"click.close_popup\");\n                        } catch (err) {}\n                    } else {\n                        try {\n                            $(\"iframe#galaxy_main\")\n                                .contents()\n                                .off(\"click.close_popup\");\n                        } catch (err) {}\n                    }\n                    menu.remove();\n                }\n\n                $(\"html\").one(\"click.close_popup\", closePopup);\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document)\n                            .find(\"html\")\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\")\n                            .contents()\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                }\n            },\n\n            // add a menu option/item at the given index\n            addItem: function(item, index) {\n                // append to end if no index\n                index = index >= 0 ? index : this.options.length;\n                this.options.splice(index, 0, item);\n                return this;\n            },\n\n            // remove a menu option/item at the given index\n            removeItem: function(index) {\n                if (index >= 0) {\n                    this.options.splice(index, 1);\n                }\n                return this;\n            },\n\n            // search for a menu option by its html\n            findIndexByHtml: function(html) {\n                for (var i = 0; i < this.options.length; i++) {\n                    if (\n                        _.has(this.options[i], \"html\") &&\n                        this.options[i].html === html\n                    ) {\n                        return i;\n                    }\n                }\n                return null;\n            },\n\n            // search for a menu option by its html\n            findItemByHtml: function(html) {\n                return this.options[this.findIndexByHtml(html)];\n            },\n\n            // string representation\n            toString: function() {\n                return \"PopupMenu\";\n            }\n        });\n        /** shortcut to new for when you don't need to preserve the ref */\n        PopupMenu.create = function _create($button, options) {\n            return new PopupMenu($button, options);\n        };\n\n        // -----------------------------------------------------------------------------\n        // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n        // to the newer backbone.js PopupMenu\n\n        /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\n        PopupMenu.make_popupmenu = function(button_element, initial_options) {\n            var convertedOptions = [];\n            _.each(initial_options, function(optionVal, optionKey) {\n                var newOption = { html: optionKey };\n\n                // keys with null values indicate: header\n                if (optionVal === null) {\n                    // !optionVal? (null only?)\n                    newOption.header = true;\n\n                    // keys with function values indicate: a menu option\n                } else if (jQuery.type(optionVal) === \"function\") {\n                    newOption.func = optionVal;\n                }\n                //TODO:?? any other special optionVals?\n                // there was no divider option originally\n                convertedOptions.push(newOption);\n            });\n            return new PopupMenu($(button_element), convertedOptions);\n        };\n\n        /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n        //TODO: lose parent and selector, pass in array of links, use map to return options\n        PopupMenu.convertLinksToOptions = function($parent, selector) {\n            $parent = $($parent);\n            selector = selector || \"a\";\n            var options = [];\n            $parent.find(selector).each(function(elem, i) {\n                var option = {},\n                    $link = $(elem);\n\n                // convert link text to the option text (html) and the href into the option func\n                option.html = $link.text();\n                if ($link.attr(\"href\")) {\n                    var linkHref = $link.attr(\"href\"),\n                        linkTarget = $link.attr(\"target\"),\n                        confirmText = $link.attr(\"confirm\");\n\n                    option.func = function() {\n                        // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                        //  if the user cancels - do nothing\n                        if (confirmText && !confirm(confirmText)) {\n                            return;\n                        }\n\n                        // if there's no confirm attribute, or the user accepted the confirm dialog:\n                        switch (linkTarget) {\n                            // relocate the center panel\n                            case \"_parent\":\n                                window.parent.location = linkHref;\n                                break;\n\n                            // relocate the entire window\n                            case \"_top\":\n                                window.top.location = linkHref;\n                                break;\n\n                            // relocate this panel\n                            default:\n                                window.location = linkHref;\n                        }\n                    };\n                }\n                options.push(option);\n            });\n            return options;\n        };\n\n        /** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\n        PopupMenu.fromExistingDom = function(\n            $buttonElement,\n            $menuElement,\n            menuElementLinkSelector\n        ) {\n            $buttonElement = $($buttonElement);\n            $menuElement = $($menuElement);\n            var options = PopupMenu.convertLinksToOptions(\n                $menuElement,\n                menuElementLinkSelector\n            );\n            // we're done with the menu (having converted it to an options map)\n            $menuElement.remove();\n            return new PopupMenu($buttonElement, options);\n        };\n\n        /** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\n        PopupMenu.make_popup_menus = function(\n            parent,\n            menuSelector,\n            buttonSelectorBuildFn\n        ) {\n            parent = parent || document;\n            // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n            //  which contains the id of the button that activates the menu\n            menuSelector = menuSelector || \"div[popupmenu]\";\n            // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n            buttonSelectorBuildFn =\n                buttonSelectorBuildFn ||\n                function($menuElement, parent) {\n                    return \"#\" + $menuElement.attr(\"popupmenu\");\n                };\n\n            // aggregate and return all PopupMenus\n            var popupMenusCreated = [];\n            $(parent)\n                .find(menuSelector)\n                .each(function() {\n                    var $menuElement = $(this),\n                        $buttonElement = $(parent).find(\n                            buttonSelectorBuildFn($menuElement, parent)\n                        );\n                    popupMenusCreated.push(\n                        PopupMenu.fromDom($buttonElement, $menuElement)\n                    );\n                    $buttonElement.addClass(\"popup\");\n                });\n            return popupMenusCreated;\n        };\n\n        // =============================================================================\n        return PopupMenu;\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/** This class creates a ui table element. */\ndefine([\"utils/utils\"], function(Utils) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.options = Utils.merge(options, {\n                content: \"No content available.\",\n                onchange: null,\n                ondblclick: null,\n                onconfirm: null,\n                cls: \"ui-table\",\n                selectable: true,\n                cls_tr: \"\"\n            });\n            this.setElement(this._template());\n            this.$thead = this.$(\"thead\");\n            this.$tbody = this.$(\"tbody\");\n            this.$tmessage = this.$(\"tmessage\");\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events: {\n            click: \"_onclick\",\n            dblclick: \"_ondblclick\"\n        },\n\n        /** Add cell to header row */\n        addHeader: function($el) {\n            this.row.append($(\"<th/>\").append($el));\n        },\n\n        /** Append header row to table */\n        appendHeader: function() {\n            this.$thead.append(this.row);\n            this.row = $(\"<tr/>\");\n        },\n\n        /** Add cell to row */\n        add: function($el, width, align) {\n            var wrapper = $(\"<td/>\");\n            if (width) {\n                wrapper.css(\"width\", width);\n            }\n            if (align) {\n                wrapper.css(\"text-align\", align);\n            }\n            this.row.append(wrapper.append($el));\n        },\n\n        /** Append row to table */\n        append: function(id, fade) {\n            this._commit(id, fade, false);\n        },\n\n        /** Prepend row to table */\n        prepend: function(id, fade) {\n            this._commit(id, fade, true);\n        },\n\n        /** Helper to get row element */\n        get: function(id) {\n            return this.$(\"#\" + id);\n        },\n\n        /** Delete row by id */\n        del: function(id) {\n            var item = this.$tbody.find(\"#\" + id);\n            if (item.length > 0) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function(new_value) {\n            if (this.options.selectable) {\n                this.before = this.$tbody.find(\".current\").attr(\"id\");\n                if (new_value !== undefined) {\n                    this.$tbody.find(\"tr\").removeClass(\"current\");\n                    if (new_value) {\n                        this.$tbody.find(\"#\" + new_value).addClass(\"current\");\n                    }\n                }\n                var after = this.$tbody.find(\".current\").attr(\"id\");\n                if (after === undefined) {\n                    return null;\n                } else {\n                    if (after != this.before && this.options.onchange) {\n                        this.options.onchange(new_value);\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function() {\n            return this.$tbody.find(\"tr\").length;\n        },\n\n        /** Helper to append rows */\n        _commit: function(id, fade, prepend) {\n            this.del(id);\n            this.row.attr(\"id\", id);\n            if (prepend) {\n                this.$tbody.prepend(this.row);\n            } else {\n                this.$tbody.append(this.row);\n            }\n            if (fade) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function() {\n            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n        },\n\n        /** Handles onclick events */\n        _onclick: function(e) {\n            var old_value = this.value();\n            var new_value = $(e.target)\n                .closest(\"tr\")\n                .attr(\"id\");\n            if (new_value != \"\") {\n                if (new_value && old_value != new_value) {\n                    if (this.options.onconfirm) {\n                        this.options.onconfirm(new_value);\n                    } else {\n                        this.value(new_value);\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function(e) {\n            var value = this.value();\n            if (value && this.options.ondblclick) {\n                this.options.ondblclick(value);\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function() {\n            if (this.row_count == 0) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function() {\n            return (\n                \"<div>\" +\n                '<table class=\"' +\n                this.options.cls +\n                '\">' +\n                \"<thead/>\" +\n                \"<tbody/>\" +\n                \"</table>\" +\n                \"<tmessage>\" +\n                this.options.content +\n                \"</tmessage>\" +\n                \"<div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-table.js","/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([\"utils/utils\"], function(Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = \"\";\n            var self = this;\n            this.app.section.$el.find(\".section-row\").each(function() {\n                var id = $(this).attr(\"id\");\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum +=\n                        id +\n                        \":\" +\n                        JSON.stringify(field.value && field.value()) +\n                        \":\" +\n                        field.collapsed +\n                        \";\";\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] &&\n                    self.app.element_list[input_id].$el.attr(\n                        \"tour_id\",\n                        flat_id\n                    );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != \"\") {\n                            flat_id += \"|\";\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case \"repeat\":\n                                var section_label = \"section-\";\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(\n                                        section_label\n                                    );\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(\n                                            parseInt(block_label.substr(pos))\n                                        );\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(\n                                                0,\n                                                pos\n                                            );\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function(a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(\n                                        flat_id + \"_\" + index++,\n                                        node[block_prefix + block_indices[i]]\n                                    );\n                                }\n                                break;\n                            case \"conditional\":\n                                var value = self.app.field_list[\n                                    input.id\n                                ].value();\n                                add(\n                                    flat_id + \"|\" + input.test_param.name,\n                                    input.id,\n                                    value\n                                );\n                                var selectedCase = matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(\n                                        flat_id,\n                                        head[\n                                            input.id +\n                                                \"-section-\" +\n                                                selectedCase\n                                        ]\n                                    );\n                                }\n                                break;\n                            case \"section\":\n                                convert((!input.flat && flat_id) || \"\", node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (\n                                        input.ignore === undefined ||\n                                        input.ignore != value\n                                    ) {\n                                        if (\n                                            field.collapsed &&\n                                            input.collapsible_value\n                                        ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(\n                                                    p_id,\n                                                    input.id,\n                                                    input.payload[p_id]\n                                                );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert(\"\", dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function(input, value) {\n            return matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function(input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === \"string\") {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== \"\") {\n                            var separator = \"|\";\n                            if (head instanceof Array) {\n                                separator = \"_\";\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search(\"\", response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function() {\n                var child = this;\n                var id = $(child).attr(\"id\");\n                if ($(child).hasClass(\"section-row\")) {\n                    var input = self.app.input_list[id];\n                    dict[id] = (input && { input: input }) || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function(input, value) {\n        if (input.test_param.type == \"boolean\") {\n            if (value == \"true\") {\n                value = input.test_param.truevalue || \"true\";\n            } else {\n                value = input.test_param.falsevalue || \"false\";\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function(input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + \"|\" + node.name : node.name;\n            switch (node.type) {\n                case \"repeat\":\n                    _.each(node.cache, function(cache, j) {\n                        visitInputs(cache, callback, name + \"_\" + j, context);\n                    });\n                    break;\n                case \"conditional\":\n                    if (node.test_param) {\n                        callback(\n                            node.test_param,\n                            name + \"|\" + node.test_param.name,\n                            context\n                        );\n                        var selectedCase = matchCase(\n                            node,\n                            node.test_param.value\n                        );\n                        if (selectedCase != -1) {\n                            visitInputs(\n                                node.cases[selectedCase].inputs,\n                                callback,\n                                name,\n                                context\n                            );\n                        } else {\n                            Galaxy.emit.debug(\n                                \"form-data::visitInputs() - Invalid case for \" +\n                                    name +\n                                    \".\"\n                            );\n                        }\n                    } else {\n                        Galaxy.emit.debug(\n                            \"form-data::visitInputs() - Conditional test parameter missing for \" +\n                                name +\n                                \".\"\n                        );\n                    }\n                    break;\n                case \"section\":\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-data.js","// dependencies\ndefine([], function() {\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: \"\",\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n     * Return true if operation can be done asynchronously.\n     */\n        can_async_op: function(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n     * Add filtering criterion.\n     */\n        add_filter: function(key, value, append) {\n            // Update URL arg with new condition.\n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == \"string\") {\n                    if (cur_val == \"All\" || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n     * Remove filtering criterion.\n     */\n        remove_filter: function(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === \"string\") {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = \"\";\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = \"\";\n                }\n            }\n        },\n\n        /**\n     * Returns URL data for obtaining a new grid.\n     */\n        get_url_data: function() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function(k) {\n                url_data[\"f-\" + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function(args) {\n            return (\n                this.get(\"url_base\") +\n                \"?\" +\n                $.param(this.get_url_data()) +\n                \"&\" +\n                $.param(args)\n            );\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine([\"utils/utils\"], function(Utils) {\n    // grid view templates\n    return {\n        // template\n        grid: function(options) {\n            var tmpl = \"\";\n            if (options.embedded) {\n                tmpl = this.grid_header(options) + this.grid_table(options);\n            } else {\n                tmpl =\n                    '<div class=\"loading-elt-overlay\"></div>' +\n                    \"<table>\" +\n                    \"<tr>\" +\n                    '<td width=\"75%\">' +\n                    this.grid_header(options) +\n                    \"</td>\" +\n                    \"<td></td>\" +\n                    \"<td></td>\" +\n                    \"</tr>\" +\n                    \"<tr>\" +\n                    '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                    \"<td></td>\" +\n                    \"<td></td>\" +\n                    \"</tr>\" +\n                    \"</table>\" +\n                    this.grid_table(options);\n            }\n\n            // add info text\n            if (options.info_text) {\n                tmpl +=\n                    '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' +\n                    options.info_text +\n                    \"</div>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        grid_table: function(options) {\n            return (\n                '<form method=\"post\" onsubmit=\"return false;\">' +\n                '<table id=\"grid-table\" class=\"grid\">' +\n                '<thead id=\"grid-table-header\"></thead>' +\n                '<tbody id=\"grid-table-body\"></tbody>' +\n                '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                \"</table>\" +\n                \"</form>\"\n            );\n        },\n\n        // template\n        grid_header: function(options) {\n            var tmpl = '<div class=\"grid-header\">';\n            if (!options.embedded) {\n                tmpl += \"<h2>\" + options.title + \"</h2>\";\n            }\n            if (options.global_actions) {\n                tmpl += '<ul class=\"manage-table-actions\">';\n                var show_popup = options.global_actions.length >= 3;\n                if (show_popup) {\n                    tmpl +=\n                        '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                        '<div popupmenu=\"popup-global-actions\">';\n                }\n                for (var i in options.global_actions) {\n                    var action = options.global_actions[i];\n                    tmpl +=\n                        \"<li>\" +\n                        '<a class=\"action-button use-target\" target=\"' +\n                        action.target +\n                        '\" href=\"' +\n                        action.url_args +\n                        '\" onclick=\"return false;\" >' +\n                        action.label +\n                        \"</a>\" +\n                        \"</li>\";\n                }\n                if (show_popup) {\n                    tmpl += \"</div>\";\n                }\n                tmpl += \"</ul>\";\n            }\n            if (options.insert) {\n                tmpl += options.insert;\n            }\n\n            // add grid filters\n            tmpl += this.grid_filters(options);\n            tmpl += \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        header: function(options) {\n            // start\n            var tmpl = \"<tr>\";\n\n            // add checkbox\n            if (options.show_item_checkboxes) {\n                tmpl += \"<th>\";\n                if (options.items.length > 0) {\n                    tmpl +=\n                        '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                        '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n                }\n                tmpl += \"</th>\";\n            }\n\n            // create header elements\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.visible) {\n                    tmpl += '<th id=\"' + column.key + '-header\">';\n                    if (column.href) {\n                        tmpl +=\n                            '<a href=\"' +\n                            column.href +\n                            '\" class=\"sort-link\" sort_key=\"' +\n                            column.key +\n                            '\">' +\n                            column.label +\n                            \"</a>\";\n                    } else {\n                        tmpl += column.label;\n                    }\n                    tmpl +=\n                        '<span class=\"sort-arrow\">' +\n                        column.extra +\n                        \"</span>\" +\n                        \"</th>\";\n                }\n            }\n\n            // finalize\n            tmpl += \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        body: function(options) {\n            // initialize\n            var tmpl = \"\";\n            var num_rows_rendered = 0;\n            var items_length = options.items.length;\n\n            // empty grid?\n            if (items_length == 0) {\n                // No results.\n                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n                num_rows_rendered = 1;\n            }\n\n            // create rows\n            for (var i in options.items) {\n                // encode ids\n                var item = options.items[i];\n                var encoded_id = item.encode_id;\n                var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n                // Tag current\n                tmpl += \"<tr \";\n                if (options.current_item_id == item.id) {\n                    tmpl += 'class=\"current\"';\n                }\n                tmpl += \">\";\n\n                // Item selection column\n                if (options.show_item_checkboxes) {\n                    tmpl +=\n                        '<td style=\"width: 1.5em;\">' +\n                        '<input type=\"checkbox\" name=\"id\" value=\"' +\n                        encoded_id +\n                        '\" id=\"' +\n                        encoded_id +\n                        '\" class=\"grid-row-select-checkbox\" />' +\n                        \"</td>\";\n                }\n\n                // Data columns\n                for (var j in options.columns) {\n                    var column = options.columns[j];\n                    if (column.visible) {\n                        // Nowrap\n                        var nowrap = \"\";\n                        if (column.nowrap) {\n                            nowrap = 'style=\"white-space:nowrap;\"';\n                        }\n\n                        // get column settings\n                        var column_settings = item.column_config[column.label];\n\n                        // load attributes\n                        var link = column_settings.link;\n                        var value = column_settings.value;\n                        var target = column_settings.target;\n\n                        // unescape value\n                        if (jQuery.type(value) === \"string\") {\n                            value = value.replace(/\\/\\//g, \"/\");\n                        }\n\n                        // Attach popup menu?\n                        var id = \"\";\n                        var cls = \"\";\n                        if (column.attach_popup) {\n                            id = \"grid-\" + i + \"-popup\";\n                            cls = \"menubutton\";\n                            if (link != \"\") {\n                                cls += \" split\";\n                            }\n                            cls += \" popup\";\n                        }\n\n                        // Check for row wrapping\n                        tmpl += \"<td \" + nowrap + \">\";\n\n                        // Link\n                        if (link) {\n                            if (options.operations.length != 0) {\n                                tmpl +=\n                                    '<div id=\"' +\n                                    id +\n                                    '\" class=\"' +\n                                    cls +\n                                    '\" style=\"float: left;\">';\n                            }\n                            tmpl +=\n                                '<a class=\"menubutton-label use-target\" target=\"' +\n                                target +\n                                '\" href=\"' +\n                                link +\n                                '\" onclick=\"return false;\">' +\n                                value +\n                                \"</a>\";\n                            if (options.operations.length != 0) {\n                                tmpl += \"</div>\";\n                            }\n                        } else {\n                            tmpl +=\n                                '<div id=\"' +\n                                id +\n                                '\" class=\"' +\n                                cls +\n                                '\"><label id=\"' +\n                                column.label_id_prefix +\n                                encoded_id +\n                                '\" for=\"' +\n                                encoded_id +\n                                '\">' +\n                                (value || \"\") +\n                                \"</label></div>\";\n                        }\n                        tmpl += \"</td>\";\n                    }\n                }\n                tmpl += \"</tr>\";\n                num_rows_rendered++;\n            }\n            return tmpl;\n        },\n\n        // template\n        footer: function(options) {\n            // create template string\n            var tmpl = \"\";\n\n            // paging\n            if (options.use_paging && options.num_pages > 1) {\n                // get configuration\n                var num_page_links = options.num_page_links;\n                var cur_page_num = options.cur_page_num;\n                var num_pages = options.num_pages;\n\n                // First pass on min page.\n                var page_link_range = num_page_links / 2;\n                var min_page = cur_page_num - page_link_range;\n                var min_offset = 0;\n                if (min_page <= 0) {\n                    // Min page is too low.\n                    min_page = 1;\n                    min_offset = page_link_range - (cur_page_num - min_page);\n                }\n\n                // Set max page.\n                var max_range = page_link_range + min_offset;\n                var max_page = cur_page_num + max_range;\n                var max_offset;\n                if (max_page <= num_pages) {\n                    // Max page is fine.\n                    max_offset = 0;\n                } else {\n                    // Max page is too high.\n                    max_page = num_pages;\n                    // +1 to account for the +1 in the loop below.\n                    max_offset = max_range - (max_page + 1 - cur_page_num);\n                }\n\n                // Second and final pass on min page to add any unused\n                // offset from max to min.\n                if (max_offset != 0) {\n                    min_page -= max_offset;\n                    if (min_page < 1) {\n                        min_page = 1;\n                    }\n                }\n\n                // template header\n                tmpl += '<tr id=\"page-links-row\">';\n                if (options.show_item_checkboxes) {\n                    tmpl += \"<td></td>\";\n                }\n                tmpl +=\n                    '<td colspan=\"100\">' +\n                    '<span id=\"page-link-container\">' +\n                    \"Page:\";\n\n                if (min_page > 1) {\n                    tmpl +=\n                        '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n                }\n\n                // create page urls\n                for (\n                    var page_index = min_page;\n                    page_index < max_page + 1;\n                    page_index++\n                ) {\n                    if (page_index == options.cur_page_num) {\n                        tmpl +=\n                            '<span class=\"page-link inactive-link\" id=\"page-link-' +\n                            page_index +\n                            '\">' +\n                            page_index +\n                            \"</span>\";\n                    } else {\n                        tmpl +=\n                            '<span class=\"page-link\" id=\"page-link-' +\n                            page_index +\n                            '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                            page_index +\n                            '\">' +\n                            page_index +\n                            \"</a></span>\";\n                    }\n                }\n\n                // show last page\n                if (max_page < num_pages) {\n                    tmpl +=\n                        \"...\" +\n                        '<span class=\"page-link\" id=\"page-link-' +\n                        num_pages +\n                        '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                        num_pages +\n                        '\">' +\n                        num_pages +\n                        \"</a></span>\";\n                }\n                tmpl += \"</span>\";\n\n                // Show all link\n                tmpl +=\n                    '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                    \"</td>\" +\n                    \"</tr>\";\n            }\n\n            // Grid operations for multiple items.\n            if (options.show_item_checkboxes) {\n                // start template\n                tmpl +=\n                    \"<tr>\" +\n                    '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                    \"<td></td>\" +\n                    '<td colspan=\"100\">' +\n                    'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n                // configure buttons for operations\n                for (var i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.allow_multiple) {\n                        tmpl +=\n                            '<input type=\"button\" value=\"' +\n                            operation.label +\n                            '\" class=\"operation-button action-button\">&nbsp;';\n                    }\n                }\n\n                // finalize template\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // count global operations\n            var found_global = false;\n            for (i in options.operations) {\n                if (options.operations[i].global_operation) {\n                    found_global = true;\n                    break;\n                }\n            }\n\n            // add global operations\n            if (found_global) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">';\n                for (i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.global_operation) {\n                        tmpl +=\n                            '<a class=\"action-button\" href=\"' +\n                            operation.global_operation +\n                            '\">' +\n                            operation.label +\n                            \"</a>\";\n                    }\n                }\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // add legend\n            if (options.legend) {\n                tmpl +=\n                    \"<tr>\" +\n                    '<td colspan=\"100\">' +\n                    options.legend +\n                    \"</td>\" +\n                    \"</tr>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        message: function(options) {\n            var status = options.status == \"success\" ? \"done\" : options.status;\n            return (\n                \"<p>\" +\n                '<div class=\"' +\n                status +\n                'message transient-message\">' +\n                _.escape(options.message) +\n                \"</div>\" +\n                '<div style=\"clear: both\"></div>' +\n                \"</p>\"\n            );\n        },\n\n        // template\n        grid_filters: function(options) {\n            // get filters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n\n            // show advanced search if flag set or if there are filters for advanced search fields\n            var advanced_search_display = \"none\";\n            if (options.advanced_search) {\n                advanced_search_display = \"block\";\n            }\n\n            // identify columns with advanced filtering\n            var show_advanced_search_link = false;\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    var column_key = column.key;\n                    var f_key = filters[column_key];\n                    var d_key = default_filter_dict[column_key];\n                    if (f_key && d_key && f_key != d_key) {\n                        advanced_search_display = \"block\";\n                    }\n                    show_advanced_search_link = true;\n                }\n            }\n\n            // hide standard search if advanced is shown\n            var standard_search_display = \"block\";\n            if (advanced_search_display == \"block\") {\n                standard_search_display = \"none\";\n            }\n\n            //\n            // standard search\n            //\n            var tmpl =\n                '<div id=\"standard-search\" style=\"display: ' +\n                standard_search_display +\n                ';\">' +\n                \"<table>\" +\n                \"<tr>\" +\n                '<td style=\"padding: 0;\">' +\n                \"<table>\";\n\n            // add standard filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"standard\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize standard search\n            tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n            // show advanced search link in standard display\n            if (show_advanced_search_link) {\n                tmpl +=\n                    '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n            }\n\n            // finalize standard search display\n            tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n            //\n            // advanced search\n            //\n            tmpl +=\n                '<div id=\"advanced-search\" style=\"display: ' +\n                advanced_search_display +\n                '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                \"<table>\" +\n                \"<tr>\" +\n                '<td style=\"text-align: left\" colspan=\"100\">' +\n                '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                \"</td>\" +\n                \"</tr>\";\n\n            // add advanced filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize advanced search template\n            tmpl += \"</table>\" + \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        grid_column_filter: function(options, column) {\n            // collect parameters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n            var column_label = column.label;\n            var column_key = column.key;\n            if (column.filterable == \"advanced\") {\n                column_label = column_label.toLowerCase();\n            }\n\n            // start\n            var tmpl = \"<tr>\";\n\n            if (column.filterable == \"advanced\") {\n                tmpl +=\n                    '<td align=\"left\" style=\"padding-left: 10px\">' +\n                    column_label +\n                    \":</td>\";\n            }\n            tmpl += '<td style=\"padding-bottom: 1px;\">';\n            if (column.is_text) {\n                tmpl +=\n                    '<form class=\"text-filter-form\" column_key=\"' +\n                    column_key +\n                    '\" action=\"' +\n                    options.url +\n                    '\" method=\"get\" >';\n                // Carry forward filtering criteria with hidden inputs.\n                for (i in options.columns) {\n                    var temp_column = options.columns[i];\n                    var filter_value = filters[temp_column.key];\n                    if (filter_value) {\n                        if (filter_value != \"All\") {\n                            if (temp_column.is_text) {\n                                filter_value = JSON.stringify(filter_value);\n                            }\n                            tmpl +=\n                                '<input type=\"hidden\" id=\"' +\n                                temp_column.key +\n                                '\" name=\"f-' +\n                                temp_column.key +\n                                '\" value=\"' +\n                                filter_value +\n                                '\"/>';\n                        }\n                    }\n                }\n                // Print current filtering criteria and links to delete.\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add filters\n                var column_filter = filters[column_key];\n                if (column_filter) {\n                    // identify type\n                    var type = jQuery.type(column_filter);\n\n                    // single filter value\n                    if (type == \"string\") {\n                        if (column_filter != \"All\") {\n                            // append template\n                            tmpl += this.filter_element(\n                                column_key,\n                                column_filter\n                            );\n                        }\n                    }\n\n                    // multiple filter values\n                    if (type == \"array\") {\n                        for (var i in column_filter) {\n                            // get filter\n                            var filter = column_filter[i];\n\n                            // copy filters and remove entry\n                            var params = column_filter;\n                            params = params.slice(i);\n\n                            // append template\n                            tmpl += this.filter_element(column_key, filter);\n                        }\n                    }\n                }\n\n                // close span\n                tmpl += \"</span>\";\n\n                // Set value, size of search input field. Minimum size is 20 characters.\n                var value = \"\";\n                if (column.filterable == \"standard\") {\n                    value = column.label.toLowerCase();\n                    var size = value.length;\n                    if (size < 20) {\n                        size = 20;\n                    }\n                    // +4 to account for space after placeholder\n                    size = size + 4;\n                }\n\n                // print input field for column\n                tmpl +=\n                    '<span class=\"search-box\">' +\n                    '<input class=\"search-box-input\" id=\"input-' +\n                    column_key +\n                    '-filter\" name=\"f-' +\n                    column_key +\n                    '\" type=\"text\" placeholder=\"' +\n                    value +\n                    '\" size=\"' +\n                    size +\n                    '\"/>' +\n                    '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                    '<i class=\"fa fa-search\"></i>' +\n                    \"</button>\" +\n                    \"</span>\" +\n                    \"</form>\";\n            } else {\n                // filter criteria\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add category filters\n                var seperator = false;\n                for (var cf_label in options.categorical_filters[column_key]) {\n                    // get category filter\n                    var cf = options.categorical_filters[column_key][cf_label];\n\n                    // each filter will have only a single argument, so get that single argument\n                    var cf_key = \"\";\n                    var cf_arg = \"\";\n                    for (var key in cf) {\n                        cf_key = key;\n                        cf_arg = cf[key];\n                    }\n\n                    // add seperator\n                    if (seperator) {\n                        tmpl += \" | \";\n                    }\n                    seperator = true;\n\n                    // add category\n                    var filter = filters[column_key];\n                    if (filter && cf[column_key] && filter == cf_arg) {\n                        tmpl +=\n                            '<span class=\"categorical-filter ' +\n                            column_key +\n                            '-filter current-filter\">' +\n                            cf_label +\n                            \"</span>\";\n                    } else {\n                        tmpl +=\n                            '<span class=\"categorical-filter ' +\n                            column_key +\n                            '-filter\">' +\n                            '<a href=\"javascript:void(0);\" filter_key=\"' +\n                            cf_key +\n                            '\" filter_val=\"' +\n                            cf_arg +\n                            '\">' +\n                            cf_label +\n                            \"</a>\" +\n                            \"</span>\";\n                    }\n                }\n                tmpl += \"</span>\";\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template for filter items\n        filter_element: function(filter_key, filter_value) {\n            filter_value = Utils.sanitize(filter_value);\n            return (\n                '<span class=\"text-filter-val\">' +\n                filter_value +\n                '<a href=\"javascript:void(0);\" filter_key=\"' +\n                filter_key +\n                '\" filter_val=\"' +\n                filter_value +\n                '\">' +\n                '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                \"</a>\" +\n                \"</span>\"\n            );\n        }\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","define([\"utils/utils\"], function(Utils) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    min: null,\n                    max: null,\n                    step: null,\n                    precise: false,\n                    split: 10000,\n                    value: null,\n                    onchange: function() {}\n                }).set(options);\n\n            // create new element\n            this.setElement(this._template());\n            this.$el.attr(\"id\", this.model.id);\n            this.$text = this.$(\".ui-form-slider-text\");\n            this.$slider = this.$(\".ui-form-slider-element\");\n\n            // add text field event\n            var pressed = [];\n            this.$text\n                .on(\"change\", function() {\n                    self.value($(this).val());\n                })\n                .on(\"keyup\", function(e) {\n                    pressed[e.which] = false;\n                })\n                .on(\"keydown\", function(e) {\n                    var v = e.which;\n                    pressed[v] = true;\n                    if (\n                        self.model.get(\"is_workflow\") &&\n                        pressed[16] &&\n                        v == 52\n                    ) {\n                        self.value(\"$\");\n                        event.preventDefault();\n                    } else if (\n                        !(\n                            v == 8 ||\n                            v == 9 ||\n                            v == 13 ||\n                            v == 37 ||\n                            v == 39 ||\n                            (v >= 48 && v <= 57 && !pressed[16]) ||\n                            (v >= 96 && v <= 105) ||\n                            ((v == 190 || v == 110) &&\n                                $(this)\n                                    .val()\n                                    .indexOf(\".\") == -1 &&\n                                self.model.get(\"precise\")) ||\n                            ((v == 189 || v == 109) &&\n                                $(this)\n                                    .val()\n                                    .indexOf(\"-\") == -1) ||\n                            self._isParameter($(this).val()) ||\n                            pressed[91] ||\n                            pressed[17]\n                        )\n                    ) {\n                        event.preventDefault();\n                    }\n                });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider =\n                opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if (!step) {\n                if (opts.precise && this.has_slider) {\n                    step = (opts.max - opts.min) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if (this.has_slider) {\n                this.$text.addClass(\"ui-form-slider-left\");\n                this.$slider\n                    .slider({ min: opts.min, max: opts.max, step: step })\n                    .on(\"slide\", function(event, ui) {\n                        self.value(ui.value);\n                    });\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get(\"value\");\n            this.has_slider && this.$slider.slider(\"value\", value);\n            value !== this.$text.val() && this.$text.val(value);\n        },\n\n        /** Set and return the current value */\n        value: function(new_val) {\n            var options = this.model.attributes;\n            if (new_val !== undefined) {\n                if (\n                    new_val !== null &&\n                    new_val !== \"\" &&\n                    !this._isParameter(new_val)\n                ) {\n                    isNaN(new_val) && (new_val = 0);\n                    !options.precise && (new_val = Math.round(new_val));\n                    options.max !== null &&\n                        (new_val = Math.min(new_val, options.max));\n                    options.min !== null &&\n                        (new_val = Math.max(new_val, options.min));\n                }\n                this.model.set(\"value\", new_val);\n                this.model.trigger(\"change\");\n                options.onchange(new_val);\n            }\n            return this.model.get(\"value\");\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function(value) {\n            return (\n                this.model.get(\"is_workflow\") &&\n                String(value).substring(0, 1) === \"$\"\n            );\n        },\n\n        /** Slider template */\n        _template: function() {\n            return (\n                '<div class=\"ui-form-slider\">' +\n                '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                '<div class=\"ui-form-slider-element\"/>' +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","/** This class creates/wraps a drill down element. */\ndefine([\"utils/utils\", \"mvc/ui/ui-options\"], function(Utils, Options) {\n    var View = Options.BaseIcons.extend({\n        initialize: function(options) {\n            options.type = options.display || \"checkbox\";\n            options.multiple = options.type == \"checkbox\";\n            Options.BaseIcons.prototype.initialize.call(this, options);\n        },\n\n        /** Set states for selected values */\n        _setValue: function(new_value) {\n            Options.BaseIcons.prototype._setValue.call(this, new_value);\n            if (\n                new_value !== undefined &&\n                new_value !== null &&\n                this.header_index\n            ) {\n                var self = this;\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function(v) {\n                    var list = self.header_index[v];\n                    _.each(list, function(element) {\n                        self._setState(element, true);\n                    });\n                });\n            }\n        },\n\n        /** Expand/collapse a sub group */\n        _setState: function(header_id, is_expanded) {\n            var $button = this.$(\".button-\" + header_id);\n            var $subgroup = this.$(\".subgroup-\" + header_id);\n            $button.data(\"is_expanded\", is_expanded);\n            if (is_expanded) {\n                $subgroup.show();\n                $button\n                    .removeClass(\"fa-plus-square\")\n                    .addClass(\"fa-minus-square\");\n            } else {\n                $subgroup.hide();\n                $button\n                    .removeClass(\"fa-minus-square\")\n                    .addClass(\"fa-plus-square\");\n            }\n        },\n\n        /** Template to create options tree */\n        _templateOptions: function() {\n            var self = this;\n            this.header_index = {};\n\n            // attach event handler\n            function attach($el, header_id) {\n                var $button = $el.find(\".button-\" + header_id);\n                $button.on(\"click\", function() {\n                    self._setState(header_id, !$button.data(\"is_expanded\"));\n                });\n            }\n\n            // recursive function which iterates through options\n            function iterate($tmpl, options, header) {\n                header = header || [];\n                for (var i in options) {\n                    var level = options[i];\n                    var has_options = level.options && level.options.length > 0;\n                    var new_header = header.slice(0);\n                    self.header_index[level.value] = new_header.slice(0);\n                    var $group = $(\"<div/>\");\n                    if (has_options) {\n                        var header_id = Utils.uid();\n                        var $button = $(\"<span/>\")\n                            .addClass(\"button-\" + header_id)\n                            .addClass(\"ui-drilldown-button fa fa-plus-square\");\n                        var $subgroup = $(\"<div/>\")\n                            .addClass(\"subgroup-\" + header_id)\n                            .addClass(\"ui-drilldown-subgroup\");\n                        $group.append(\n                            $(\"<div/>\")\n                                .append($button)\n                                .append(\n                                    self._templateOption({\n                                        label: level.name,\n                                        value: level.value\n                                    })\n                                )\n                        );\n                        new_header.push(header_id);\n                        iterate($subgroup, level.options, new_header);\n                        $group.append($subgroup);\n                        attach($group, header_id);\n                    } else {\n                        $group.append(\n                            self._templateOption({\n                                label: level.name,\n                                value: level.value\n                            })\n                        );\n                    }\n                    $tmpl.append($group);\n                }\n            }\n\n            // iterate through options and create dom\n            var $tmpl = $(\"<div/>\");\n            iterate($tmpl, this.model.get(\"data\"));\n            return $tmpl;\n        },\n\n        /** Template for drill down view */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"ui-options-list drilldown-container\")\n                .attr(\"id\", this.model.id);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/form/form-repeat\",\n        \"mvc/form/form-input\",\n        \"mvc/form/form-parameters\"\n    ],\n    function(Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n        var View = Backbone.View.extend({\n            initialize: function(app, options) {\n                this.app = app;\n                this.inputs = options.inputs;\n                this.parameters = new Parameters();\n                this.setElement($(\"<div/>\"));\n                this.render();\n            },\n\n            /** Render section view */\n            render: function() {\n                var self = this;\n                this.$el.empty();\n                _.each(this.inputs, function(input) {\n                    self.add(input);\n                });\n            },\n\n            /** Add a new input element */\n            add: function(input) {\n                var input_def = jQuery.extend(true, {}, input);\n                input_def.id = input.id = Utils.uid();\n                this.app.input_list[input_def.id] = input_def;\n                switch (input_def.type) {\n                    case \"conditional\":\n                        this._addConditional(input_def);\n                        break;\n                    case \"repeat\":\n                        this._addRepeat(input_def);\n                        break;\n                    case \"section\":\n                        this._addSection(input_def);\n                        break;\n                    default:\n                        this._addRow(input_def);\n                }\n            },\n\n            /** Add a conditional block */\n            _addConditional: function(input_def) {\n                var self = this;\n                input_def.test_param.id = input_def.id;\n                this.app.model.get(\"sustain_conditionals\") &&\n                    (input_def.test_param.disabled = true);\n                var field = this._addRow(input_def.test_param);\n\n                // set onchange event for test parameter\n                field.model &&\n                    field.model.set(\"onchange\", function(value) {\n                        var selectedCase = self.app.data.matchCase(\n                            input_def,\n                            value\n                        );\n                        for (var i in input_def.cases) {\n                            var case_def = input_def.cases[i];\n                            var section_row = self.$(\n                                \"#\" + input_def.id + \"-section-\" + i\n                            );\n                            var nonhidden = false;\n                            for (var j in case_def.inputs) {\n                                if (!case_def.inputs[j].hidden) {\n                                    nonhidden = true;\n                                    break;\n                                }\n                            }\n                            if (i == selectedCase && nonhidden) {\n                                section_row.fadeIn(\"fast\");\n                            } else {\n                                section_row.hide();\n                            }\n                        }\n                        self.app.trigger(\"change\");\n                    });\n\n                // add conditional sub sections\n                for (var i in input_def.cases) {\n                    var sub_section = new View(this.app, {\n                        inputs: input_def.cases[i].inputs\n                    });\n                    this._append(\n                        sub_section.$el.addClass(\"ui-form-section\"),\n                        input_def.id + \"-section-\" + i\n                    );\n                }\n\n                // trigger refresh on conditional input field after all input elements have been created\n                field.trigger(\"change\");\n            },\n\n            /** Add a repeat block */\n            _addRepeat: function(input_def) {\n                var self = this;\n                var block_index = 0;\n\n                // create repeat block element\n                var repeat = new Repeat.View({\n                    title: input_def.title || \"Repeat\",\n                    min: input_def.min,\n                    max: input_def.max,\n                    onnew: function() {\n                        create(input_def.inputs);\n                        self.app.trigger(\"change\");\n                    }\n                });\n\n                // helper function to create new repeat blocks\n                function create(inputs) {\n                    var sub_section_id =\n                        input_def.id + \"-section-\" + block_index++;\n                    var sub_section = new View(self.app, { inputs: inputs });\n                    repeat.add({\n                        id: sub_section_id,\n                        $el: sub_section.$el,\n                        ondel: function() {\n                            repeat.del(sub_section_id);\n                            self.app.trigger(\"change\");\n                        }\n                    });\n                }\n\n                //\n                // add parsed/minimum number of repeat blocks\n                //\n                var n_cache = _.size(input_def.cache);\n                for (\n                    var i = 0;\n                    i <\n                    Math.max(\n                        Math.max(n_cache, input_def.min || 0),\n                        input_def.default || 0\n                    );\n                    i++\n                ) {\n                    create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n                }\n\n                // hide options\n                this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n                // create input field wrapper\n                var input_element = new InputElement(this.app, {\n                    label: input_def.title || input_def.name,\n                    help: input_def.help,\n                    field: repeat\n                });\n                this._append(input_element.$el, input_def.id);\n            },\n\n            /** Add a customized section */\n            _addSection: function(input_def) {\n                var portlet = new Portlet.View({\n                    title: input_def.title || input_def.name,\n                    cls: \"ui-portlet-section\",\n                    collapsible: true,\n                    collapsible_button: true,\n                    collapsed: !input_def.expanded\n                });\n                portlet.append(\n                    new View(this.app, { inputs: input_def.inputs }).$el\n                );\n                portlet.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(input_def.help)\n                );\n                this.app.on(\"expand\", function(input_id) {\n                    portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n                });\n                this._append(portlet.$el, input_def.id);\n            },\n\n            /** Add a single input field element */\n            _addRow: function(input_def) {\n                var self = this;\n                var id = input_def.id;\n                input_def.onchange =\n                    input_def.onchange ||\n                    function() {\n                        self.app.trigger(\"change\", id);\n                    };\n                var field = this.parameters.create(input_def);\n                this.app.field_list[id] = field;\n                var input_element = new InputElement(this.app, {\n                    name: input_def.name,\n                    label: input_def.hide_label\n                        ? \"\"\n                        : input_def.label || input_def.name,\n                    value: input_def.value,\n                    text_value: input_def.text_value,\n                    collapsible_value: input_def.collapsible_value,\n                    collapsible_preview: input_def.collapsible_preview,\n                    help: input_def.help,\n                    argument: input_def.argument,\n                    disabled: input_def.disabled,\n                    color: input_def.color,\n                    style: input_def.style,\n                    backdrop: input_def.backdrop,\n                    hidden: input_def.hidden,\n                    fixed: input_def.fixed,\n                    field: field\n                });\n                this.app.element_list[id] = input_element;\n                this._append(input_element.$el, input_def.id);\n                return field;\n            },\n\n            /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n            _append: function($el, id) {\n                this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-section.js","/** This class creates a ui component which enables the dynamic creation of portlets */\ndefine([\"utils/utils\", \"mvc/ui/ui-portlet\", \"mvc/ui/ui-misc\"], function(\n    Utils,\n    Portlet,\n    Ui\n) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.list = {};\n            this.options = Utils.merge(options, {\n                title: \"Repeat\",\n                empty_text: \"Not available.\",\n                max: null,\n                min: null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon: \"fa-plus\",\n                title: \"Insert \" + this.options.title,\n                tooltip: \"Add new \" + this.options.title + \" block\",\n                cls: \"ui-button-icon ui-clear-float form-repeat-add\",\n                onclick: function() {\n                    options.onnew && options.onnew();\n                }\n            });\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$list = $(\"<div/>\")))\n                    .append($(\"<div/>\").append(this.button_new.$el))\n            );\n        },\n\n        /** Number of repeat blocks */\n        size: function() {\n            return _.size(this.list);\n        },\n\n        /** Add new repeat block */\n        add: function(options) {\n            if (!options.id || this.list[options.id]) {\n                Galaxy.emit.debug(\n                    \"form-repeat::add()\",\n                    \"Duplicate or invalid repeat block id.\"\n                );\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon: \"fa-trash-o\",\n                tooltip: \"Delete this repeat block\",\n                cls: \"ui-button-icon-plain form-repeat-delete\",\n                onclick: function() {\n                    options.ondel && options.ondel();\n                }\n            });\n            var portlet = new Portlet.View({\n                id: options.id,\n                title: \"placeholder\",\n                cls: options.cls || \"ui-portlet-repeat\",\n                operations: { button_delete: button_delete }\n            });\n            portlet.append(options.$el);\n            portlet.$el.addClass(\"section-row\").hide();\n            this.list[options.id] = portlet;\n            this.$list.append(portlet.$el.fadeIn(\"fast\"));\n            this.options.max > 0 &&\n                this.size() >= this.options.max &&\n                this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function(id) {\n            if (!this.list[id]) {\n                Galaxy.emit.debug(\n                    \"form-repeat::del()\",\n                    \"Invalid repeat block id.\"\n                );\n                return;\n            }\n            this.$list.find(\"#\" + id).remove();\n            delete this.list[id];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function() {\n            for (var id in this.list) {\n                this.del(id);\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function() {\n            this.button_new.$el.hide();\n            _.each(this.list, function(portlet) {\n                portlet.hideOperation(\"button_delete\");\n            });\n            _.isEmpty(this.list) &&\n                this.$el.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(this.options.empty_text)\n                );\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            var index = 0;\n            for (var id in this.list) {\n                var portlet = this.list[id];\n                portlet.title(++index + \": \" + this.options.title);\n                portlet[\n                    this.size() > this.options.min\n                        ? \"showOperation\"\n                        : \"hideOperation\"\n                ](\"button_delete\");\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-repeat.js","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = (options && options.field) || new Backbone.View();\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    text_enable: this.app_options.text_enable || \"Enable\",\n                    text_disable: this.app_options.text_disable || \"Disable\",\n                    cls_enable:\n                        this.app_options.cls_enable ||\n                        \"fa fa-caret-square-o-down\",\n                    cls_disable:\n                        this.app_options.cls_disable ||\n                        \"fa fa-caret-square-o-up\",\n                    always_refresh: this.app_options.always_refresh\n                }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$(\".ui-form-field\");\n            this.$info = this.$(\".ui-form-info\");\n            this.$preview = this.$(\".ui-form-preview\");\n            this.$collapsible = this.$(\".ui-form-collapsible\");\n            this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n            this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n            this.$title = this.$(\".ui-form-title\");\n            this.$title_text = this.$(\".ui-form-title-text\");\n            this.$error_text = this.$(\".ui-form-error-text\");\n            this.$error = this.$(\".ui-form-error\");\n            this.$backdrop = this.$(\".ui-form-backdrop\");\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get(\"collapsible_value\");\n            this.field.collapsed =\n                collapsible_value !== undefined &&\n                JSON.stringify(this.model.get(\"value\")) ==\n                    JSON.stringify(collapsible_value);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on(\"click\", function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger(\"change\");\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get(\"always_refresh\")) {\n                this.listenTo(this.field.model, \"change:value\", function() {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set(\"backdrop\", true);\n        },\n\n        /** Set error text */\n        error: function(text) {\n            this.model.set(\"error_text\", text);\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n        },\n\n        render: function() {\n            // render help\n            $(\".tooltip\").hide();\n            var help_text = this.model.get(\"help\", \"\");\n            var help_argument = this.model.get(\"argument\");\n            if (\n                help_argument &&\n                help_text.indexOf(\"(\" + help_argument + \")\") == -1\n            ) {\n                help_text += \" (\" + help_argument + \")\";\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n            // render preview view for collapsed fields\n            this.$preview\n                [\n                    (this.field.collapsed &&\n                        this.model.get(\"collapsible_preview\")) ||\n                    this.model.get(\"disabled\")\n                        ? \"show\"\n                        : \"hide\"\n                ]()\n                .html(_.escape(this.model.get(\"text_value\")));\n            // render error messages\n            var error_text = this.model.get(\"error_text\");\n            this.$error[error_text ? \"show\" : \"hide\"]();\n            this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n            // render input field\n            this.field.collapsed || this.model.get(\"disabled\")\n                ? this.$field.hide()\n                : this.$field.show();\n            // render input field color and style\n            this.field.model &&\n                this.field.model.set({\n                    color: this.model.get(\"color\"),\n                    style: this.model.get(\"style\")\n                });\n            // render collapsible options\n            if (\n                !this.model.get(\"disabled\") &&\n                this.model.get(\"collapsible_value\") !== undefined\n            ) {\n                var collapsible_state = this.field.collapsed\n                    ? \"enable\"\n                    : \"disable\";\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get(\"label\"));\n                this.$collapsible_icon\n                    .removeClass()\n                    .addClass(\"icon\")\n                    .addClass(this.model.get(\"cls_\" + collapsible_state))\n                    .attr(\n                        \"data-original-title\",\n                        this.model.get(\"text_\" + collapsible_state)\n                    )\n                    .tooltip({ placement: \"bottom\" });\n            } else {\n                this.$title_text.show().text(this.model.get(\"label\"));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"ui-form-element\")\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-error ui-error\")\n                        .append($(\"<span/>\").addClass(\"fa fa-arrow-down\"))\n                        .append($(\"<span/>\").addClass(\"ui-form-error-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-title\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-collapsible\")\n                                .append(\n                                    $(\"<i/>\").addClass(\n                                        \"ui-form-collapsible-icon\"\n                                    )\n                                )\n                                .append(\n                                    $(\"<span/>\").addClass(\n                                        \"ui-form-collapsible-text\"\n                                    )\n                                )\n                        )\n                        .append($(\"<span/>\").addClass(\"ui-form-title-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-field\")\n                        .append($(\"<span/>\").addClass(\"ui-form-info\"))\n                        .append($(\"<div/>\").addClass(\"ui-form-backdrop\"))\n                )\n                .append($(\"<div/>\").addClass(\"ui-form-preview\"));\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-input.js","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-select-content\",\n        \"mvc/ui/ui-select-library\",\n        \"mvc/ui/ui-select-ftp\",\n        \"mvc/ui/ui-select-genomespace\",\n        \"mvc/ui/ui-color-picker\"\n    ],\n    function(\n        Utils,\n        Ui,\n        SelectContent,\n        SelectLibrary,\n        SelectFtp,\n        SelectGenomeSpace,\n        ColorPicker\n    ) {\n        // create form view\n        return Backbone.Model.extend({\n            /** Available parameter types */\n            types: {\n                text: \"_fieldText\",\n                password: \"_fieldText\",\n                select: \"_fieldSelect\",\n                data_column: \"_fieldSelect\",\n                genomebuild: \"_fieldSelect\",\n                data: \"_fieldData\",\n                data_collection: \"_fieldData\",\n                integer: \"_fieldSlider\",\n                float: \"_fieldSlider\",\n                boolean: \"_fieldBoolean\",\n                drill_down: \"_fieldDrilldown\",\n                color: \"_fieldColor\",\n                hidden: \"_fieldHidden\",\n                hidden_data: \"_fieldHidden\",\n                baseurl: \"_fieldHidden\",\n                library_data: \"_fieldLibrary\",\n                ftpfile: \"_fieldFtp\",\n                upload: \"_fieldUpload\",\n                genomespacefile: \"_fieldGenomeSpace\"\n            },\n\n            /** Returns an input field for a given field type */\n            create: function(input_def) {\n                var fieldClass = this.types[input_def.type];\n                var field =\n                    typeof this[fieldClass] === \"function\"\n                        ? this[fieldClass].call(this, input_def)\n                        : null;\n                if (!field) {\n                    field = input_def.options\n                        ? this._fieldSelect(input_def)\n                        : this._fieldText(input_def);\n                    Galaxy.emit.debug(\n                        \"form-parameters::_addRow()\",\n                        \"Auto matched field type (\" + input_def.type + \").\"\n                    );\n                }\n                input_def.value === undefined && (input_def.value = null);\n                field.value(input_def.value);\n                return field;\n            },\n\n            /** Data input field */\n            _fieldData: function(input_def) {\n                return new SelectContent.View({\n                    id: \"field-\" + input_def.id,\n                    extensions: input_def.extensions,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    type: input_def.type,\n                    flavor: input_def.flavor,\n                    data: input_def.options,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Select/Checkbox/Radio options field */\n            _fieldSelect: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // customize properties\n                if (input_def.type == \"data_column\") {\n                    input_def.error_text =\n                        \"Missing columns in referenced dataset.\";\n                }\n\n                // identify available options\n                var data = input_def.data;\n                if (!data) {\n                    data = [];\n                    _.each(input_def.options, function(option) {\n                        data.push({ label: option[0], value: option[1] });\n                    });\n                }\n\n                // identify display type\n                var SelectClass = Ui.Select;\n                switch (input_def.display) {\n                    case \"checkboxes\":\n                        SelectClass = Ui.Checkbox;\n                        break;\n                    case \"radio\":\n                        SelectClass = Ui.Radio;\n                        break;\n                    case \"radiobutton\":\n                        SelectClass = Ui.RadioButton;\n                        break;\n                }\n\n                // create select field\n                return new SelectClass.View({\n                    id: \"field-\" + input_def.id,\n                    data: data,\n                    error_text: input_def.error_text || \"No options available\",\n                    readonly: input_def.readonly,\n                    multiple: input_def.multiple,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange,\n                    individual: input_def.individual,\n                    searchable: input_def.flavor !== \"workflow\"\n                });\n            },\n\n            /** Drill down options field */\n            _fieldDrilldown: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // create drill down field\n                return new Ui.Drilldown.View({\n                    id: \"field-\" + input_def.id,\n                    data: input_def.options,\n                    display: input_def.display,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Text input field */\n            _fieldText: function(input_def) {\n                // field replaces e.g. a select field\n                if (input_def.options && input_def.data) {\n                    input_def.area = input_def.multiple;\n                    if (Utils.isEmpty(input_def.value)) {\n                        input_def.value = null;\n                    } else {\n                        if ($.isArray(input_def.value)) {\n                            var str_value = \"\";\n                            for (var i in input_def.value) {\n                                str_value += String(input_def.value[i]);\n                                if (!input_def.multiple) {\n                                    break;\n                                }\n                                str_value += \"\\n\";\n                            }\n                            input_def.value = str_value;\n                        }\n                    }\n                }\n                // create input element\n                return new Ui.Input({\n                    id: \"field-\" + input_def.id,\n                    type: input_def.type,\n                    area: input_def.area,\n                    readonly: input_def.readonly,\n                    placeholder: input_def.placeholder,\n                    datalist: input_def.datalist,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Slider field */\n            _fieldSlider: function(input_def) {\n                return new Ui.Slider.View({\n                    id: \"field-\" + input_def.id,\n                    precise: input_def.type == \"float\",\n                    is_workflow: input_def.is_workflow,\n                    min: input_def.min,\n                    max: input_def.max,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Hidden field */\n            _fieldHidden: function(input_def) {\n                return new Ui.Hidden({\n                    id: \"field-\" + input_def.id,\n                    info: input_def.info\n                });\n            },\n\n            /** Boolean field */\n            _fieldBoolean: function(input_def) {\n                return new Ui.RadioButton.View({\n                    id: \"field-\" + input_def.id,\n                    data: [\n                        { label: \"Yes\", value: \"true\" },\n                        { label: \"No\", value: \"false\" }\n                    ],\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Color picker field */\n            _fieldColor: function(input_def) {\n                return new ColorPicker({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Library dataset field */\n            _fieldLibrary: function(input_def) {\n                return new SelectLibrary.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** FTP file field */\n            _fieldFtp: function(input_def) {\n                return new SelectFtp.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** GenomeSpace file select field\n         */\n            _fieldGenomeSpace: function(input_def) {\n                var self = this;\n                return new SelectGenomeSpace.View({\n                    id: \"field-\" + input_def.id,\n                    onchange: function() {\n                        self.app.trigger(\"change\");\n                    }\n                });\n            },\n\n            /** Upload file field */\n            _fieldUpload: function(input_def) {\n                return new Ui.Upload({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-parameters.js","define([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-select-default\"], function(\n    Utils,\n    Ui,\n    Select\n) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.LINKED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.LINKED\n            }\n        ],\n        data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collections\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        module_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ],\n        module_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder\",\n                tooltip: \"Multiple collections\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                    pagelimit: 100,\n                    statustimer: 1000\n                }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [\n                    {\n                        icon: \"fa fa-chain\",\n                        value: \"false\",\n                        tooltip:\n                            \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                    },\n                    {\n                        icon: \"fa fa-chain-broken\",\n                        value: \"true\",\n                        tooltip:\n                            \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                    }\n                ]\n            });\n            var $batch_div = $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n                .append(\n                    $(\"<span/>\").html(\n                        \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                    )\n                );\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div\n                    .clone()\n                    .append(\n                        $(\"<div/>\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"Batch options:\")\n                            )\n                            .append(this.button_product.$el)\n                    )\n                    .append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el\n                .on(\"dragenter\", function(e) {\n                    this.lastenter = e.target;\n                    self.$el.addClass(\"ui-dragover\");\n                })\n                .on(\"dragover\", function(e) {\n                    e.preventDefault();\n                })\n                .on(\"dragleave\", function(e) {\n                    this.lastenter === e.target &&\n                        self.$el.removeClass(\"ui-dragover\");\n                })\n                .on(\"drop\", function(e) {\n                    self._handleDrop(e);\n                });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:current\",\n                this._changeCurrent,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:type change:optional change:multiple change:extensions\",\n                this._changeType,\n                this\n            );\n            this.render();\n\n            // add change event\n            this.on(\"change\", function() {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[\n                                id_list[i] + \"_\" + this.config[current].src\n                            ];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\n                                    \"ui-select-content::value()\",\n                                    \"Requested details not found for '\" +\n                                        id_list[i] +\n                                        \"'.\"\n                                );\n                                return null;\n                            }\n                        }\n                        result.values.sort(function(a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\n                    \"ui-select-content::value()\",\n                    \"Invalid value/source '\" + new_value + \"'.\"\n                );\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function() {\n            var self = this;\n            _.each(this.fields, function(field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function($batchfield, batchmode) {\n                        $batchfield[\n                            self.config[i].batch == batchmode ? \"show\" : \"hide\"\n                        ]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id =\n                (this.model.get(\"flavor\")\n                    ? this.model.get(\"flavor\") + \"_\"\n                    : \"\") +\n                String(this.model.get(\"type\")) +\n                (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\n                    \"ui-select-content::_changeType()\",\n                    \"Invalid configuration/type id '\" + config_id + \"'.\"\n                );\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function(c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(\n                    new Select.View({\n                        optional: self.model.get(\"optional\"),\n                        multiple: c.multiple,\n                        searchable:\n                            !c.multiple ||\n                            (data &&\n                                data[c.src] &&\n                                data[c.src].length >\n                                    self.model.get(\"pagelimit\")),\n                        individual: true,\n                        error_text:\n                            \"No \" +\n                            (extensions ? extensions + \" \" : \"\") +\n                            (src_labels[c.src] || \"content\") +\n                            \" available.\",\n                        onchange: function() {\n                            self.trigger(\"change\");\n                        }\n                    })\n                );\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function(field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function($batchfield, batchmode) {\n                self.$el.append(\n                    $batchfield.css({ \"margin-left\": button_width })\n                );\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function() {\n            var self = this;\n            _.each(this.fields, function(field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function(items, src) {\n                select_options[src] = [];\n                _.each(items, function(item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function(c, i) {\n                select_options[c.src] &&\n                    self.fields[i].add(select_options[c.src], function(a, b) {\n                        return b.hid - a.hid;\n                    });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function(value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (\n                        c.src == src &&\n                        [multiple, true].indexOf(c.multiple) !== -1\n                    ) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function(field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(\n                    ev.originalEvent.dataTransfer.getData(\"text\")\n                )[0];\n                var new_id = drop_data.id;\n                var new_src =\n                    drop_data.history_content_type == \"dataset\"\n                        ? \"hda\"\n                        : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function(status) {\n            var self = this;\n            this.$el\n                .removeClass(\"ui-dragover\")\n                .addClass(\"ui-dragover-\" + status);\n            setTimeout(function() {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (\n                    config.batch == Batch.ENABLED &&\n                    this.button_product.value() === \"true\"\n                ) {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-content.js","// dependencies\ndefine(\n    [\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-table\", \"mvc/ui/ui-list\"],\n    function(Utils, Ui, Table, List) {\n        // collection of libraries\n        var Libraries = Backbone.Collection.extend({\n            url: Galaxy.root + \"api/libraries?deleted=false\"\n        });\n\n        // collection of dataset\n        var LibraryDatasets = Backbone.Collection.extend({\n            initialize: function() {\n                var self = this;\n                this.config = new Backbone.Model({ library_id: null });\n                this.config.on(\"change\", function() {\n                    self.fetch({ reset: true });\n                });\n            },\n            url: function() {\n                return (\n                    Galaxy.root +\n                    \"api/libraries/\" +\n                    this.config.get(\"library_id\") +\n                    \"/contents\"\n                );\n            }\n        });\n\n        // hda/hdca content selector ui element\n        var View = Backbone.View.extend({\n            // initialize\n            initialize: function(options) {\n                // link this\n                var self = this;\n\n                // collections\n                this.libraries = new Libraries();\n                this.datasets = new LibraryDatasets();\n\n                // link app and options\n                this.options = options;\n\n                // select field for the library\n                // TODO: Remove this once the library API supports searching for library datasets\n                this.library_select = new Ui.Select.View({\n                    onchange: function(value) {\n                        self.datasets.config.set(\"library_id\", value);\n                    }\n                });\n\n                // create ui-list view to keep track of selected data libraries\n                this.dataset_list = new List.View({\n                    name: \"dataset\",\n                    optional: options.optional,\n                    multiple: options.multiple,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                });\n\n                // add reset handler for fetched libraries\n                this.libraries.on(\"reset\", function() {\n                    var data = [];\n                    self.libraries.each(function(model) {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    });\n                    self.library_select.update(data);\n                });\n\n                // add reset handler for fetched library datasets\n                this.datasets.on(\"reset\", function() {\n                    var data = [];\n                    var library_current = self.library_select.text();\n                    if (library_current !== null) {\n                        self.datasets.each(function(model) {\n                            if (model.get(\"type\") === \"file\") {\n                                data.push({\n                                    value: model.id,\n                                    label: model.get(\"name\")\n                                });\n                            }\n                        });\n                    }\n                    self.dataset_list.update(data);\n                });\n\n                // add change event. fires on trigger\n                this.on(\"change\", function() {\n                    options.onchange && options.onchange(self.value());\n                });\n\n                // create elements\n                this.setElement(this._template());\n                this.$(\".library-select\").append(this.library_select.$el);\n                this.$el.append(this.dataset_list.$el);\n\n                // initial fetch of libraries\n                this.libraries.fetch({\n                    reset: true,\n                    success: function() {\n                        self.library_select.trigger(\"change\");\n                        if (self.options.value !== undefined) {\n                            self.value(self.options.value);\n                        }\n                    }\n                });\n            },\n\n            /** Return/Set currently selected library datasets */\n            value: function(val) {\n                return this.dataset_list.value(val);\n            },\n\n            /** Template */\n            _template: function() {\n                return (\n                    '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                    '<span class=\"library-title\">Select Library</span>' +\n                    '<span class=\"library-select\"/>' +\n                    \"</div>\" +\n                    \"</div>\"\n                );\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-library.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-list\"], function(Utils, List) {\n    /**\n * FTP file selector\n */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // create ui-list view to keep track of selected ftp files\n            this.ftpfile_list = new List.View({\n                name: \"file\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function() {\n                    options.onchange && options.onchange(self.value());\n                }\n            });\n\n            // create elements\n            this.setElement(this.ftpfile_list.$el);\n\n            // initial fetch of ftps\n            Utils.get({\n                url: Galaxy.root + \"api/remote_files\",\n                success: function(response) {\n                    var data = [];\n                    for (var i in response) {\n                        data.push({\n                            value: response[i][\"path\"],\n                            label: response[i][\"path\"]\n                        });\n                    }\n                    self.ftpfile_list.update(data);\n                }\n            });\n        },\n\n        /** Return/Set currently selected ftp datasets */\n        value: function(val) {\n            return this.ftpfile_list.value(val);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-ftp.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/tool/tool-genomespace\"], function(\n    Utils,\n    Ui,\n    GenomespaceBrowser\n) {\n    /**\n * GenomeSpace file selector\n */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // create insert new list element button\n            this.browse_button = new Ui.ButtonIcon({\n                title: \"Browse\",\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Browse GenomeSpace\",\n                onclick: function() {\n                    self.browseGenomeSpace();\n                }\n            });\n\n            // create genomespace filepath textbox\n            this.filename_textbox = new Ui.Input();\n\n            // create genomespace token textbox\n            this.token_textbox = new Ui.Input({\n                type: \"password\"\n            });\n\n            // create elements\n            this.setElement(this._template(options));\n            this.$(\".ui-gs-browse-button\").append(this.browse_button.$el);\n            this.$(\".ui-gs-filename-textbox\").append(this.filename_textbox.$el);\n            this.$(\".ui-gs-token-textbox\").append(this.token_textbox.$el);\n        },\n\n        /** Browse GenomeSpace */\n        browseGenomeSpace: function(options) {\n            var self = this;\n            GenomespaceBrowser.openFileBrowser({\n                successCallback: function(data) {\n                    self.value(data.destination + \"^\" + data.token);\n                }\n            });\n        },\n\n        /** Main Template */\n        _template: function(options) {\n            return (\n                '<div class=\"ui-gs-select-file\">' +\n                '<div class=\"ui-gs-browse-field\">' +\n                '<span class=\"ui-gs-browse-button\" />' +\n                '<span class=\"ui-gs-filename-textbox\" />' +\n                \"</div>\" +\n                '<div class=\"ui-gs-token-field\">' +\n                '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' +\n                '<span class=\"ui-gs-token-textbox\" />' +\n                \"</div>\" +\n                \"</div>\"\n            );\n        },\n\n        /** Return/Set currently selected genomespace filename/token */\n        value: function(new_value) {\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            } else {\n                return this._getValue();\n            }\n        },\n\n        // get value\n        _getValue: function() {\n            return (\n                this.filename_textbox.value() + \"^\" + this.token_textbox.value()\n            );\n        },\n\n        // set value\n        _setValue: function(new_value) {\n            if (new_value) {\n                values = new_value.split(\"^\");\n                this.filename_textbox.value(values[0]);\n                this.token_textbox.value(values[1]);\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-genomespace.js","// Provides support for interacting with the GenomeSpace File Browser popup dialogue\ndefine([], function() {\n    // tool form templates\n    return {\n        openFileBrowser: function(options) {\n            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n            var GS_UPLOAD_URL =\n                GS_UI_URL + \"upload/loadUrlToGenomespace.html?getLocation=true\";\n\n            var newWin = window.open(\n                GS_UPLOAD_URL,\n                \"GenomeSpace File Browser\",\n                \"height=360px,width=600px\"\n            );\n\n            successCalBack = options[\"successCallback\"];\n            window.addEventListener(\n                \"message\",\n                function(e) {\n                    successCalBack(e.data);\n                },\n                false\n            );\n\n            newWin.focus();\n\n            if (options[\"errorCallback\"] != null)\n                newWin.setCallbackOnGSUploadError = config[\"errorCallback\"];\n        }\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/tool/tool-genomespace.js","/** Renders the color picker used e.g. in the tool form **/\ndefine([\"utils/utils\"], function(Utils) {\n    return Backbone.View.extend({\n        colors: {\n            standard: [\n                \"c00000\",\n                \"ff0000\",\n                \"ffc000\",\n                \"ffff00\",\n                \"92d050\",\n                \"00b050\",\n                \"00b0f0\",\n                \"0070c0\",\n                \"002060\",\n                \"7030a0\"\n            ],\n            base: [\n                \"ffffff\",\n                \"000000\",\n                \"eeece1\",\n                \"1f497d\",\n                \"4f81bd\",\n                \"c0504d\",\n                \"9bbb59\",\n                \"8064a2\",\n                \"4bacc6\",\n                \"f79646\"\n            ],\n            theme: [\n                [\n                    \"f2f2f2\",\n                    \"7f7f7f\",\n                    \"ddd9c3\",\n                    \"c6d9f0\",\n                    \"dbe5f1\",\n                    \"f2dcdb\",\n                    \"ebf1dd\",\n                    \"e5e0ec\",\n                    \"dbeef3\",\n                    \"fdeada\"\n                ],\n                [\n                    \"d8d8d8\",\n                    \"595959\",\n                    \"c4bd97\",\n                    \"8db3e2\",\n                    \"b8cce4\",\n                    \"e5b9b7\",\n                    \"d7e3bc\",\n                    \"ccc1d9\",\n                    \"b7dde8\",\n                    \"fbd5b5\"\n                ],\n                [\n                    \"bfbfbf\",\n                    \"3f3f3f\",\n                    \"938953\",\n                    \"548dd4\",\n                    \"95b3d7\",\n                    \"d99694\",\n                    \"c3d69b\",\n                    \"b2a2c7\",\n                    \"92cddc\",\n                    \"fac08f\"\n                ],\n                [\n                    \"a5a5a5\",\n                    \"262626\",\n                    \"494429\",\n                    \"17365d\",\n                    \"366092\",\n                    \"953734\",\n                    \"76923c\",\n                    \"5f497a\",\n                    \"31859b\",\n                    \"e36c09\"\n                ],\n                [\n                    \"7f7f7e\",\n                    \"0c0c0c\",\n                    \"1d1b10\",\n                    \"0f243e\",\n                    \"244061\",\n                    \"632423\",\n                    \"4f6128\",\n                    \"3f3151\",\n                    \"205867\",\n                    \"974806\"\n                ]\n            ]\n        },\n\n        initialize: function(options) {\n            this.options = Utils.merge(options, {});\n            this.setElement(this._template());\n            this.$panel = this.$(\".ui-color-picker-panel\");\n            this.$view = this.$(\".ui-color-picker-view\");\n            this.$value = this.$(\".ui-color-picker-value\");\n            this.$header = this.$(\".ui-color-picker-header\");\n            this._build();\n            this.visible = false;\n            this.value(this.options.value);\n            this.$boxes = this.$(\".ui-color-picker-box\");\n            var self = this;\n            this.$boxes.on(\"click\", function() {\n                self.value($(this).css(\"background-color\"));\n                self.$header.trigger(\"click\");\n            });\n            this.$header.on(\"click\", function() {\n                self.visible = !self.visible;\n                if (self.visible) {\n                    self.$view.fadeIn(\"fast\");\n                } else {\n                    self.$view.fadeOut(\"fast\");\n                }\n            });\n        },\n\n        /** Get/set value */\n        value: function(new_val) {\n            if (new_val !== undefined && new_val !== null) {\n                this.$value.css(\"background-color\", new_val);\n                this.$(\".ui-color-picker-box\").empty();\n                this.$(this._getValue()).html(this._templateCheck());\n                this.options.onchange && this.options.onchange(new_val);\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var rgb = this.$value.css(\"background-color\");\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if (rgb) {\n                function hex(x) {\n                    return (\"0\" + parseInt(x).toString(16)).slice(-2);\n                }\n                return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function() {\n            this._content({ colors: this.colors.base });\n            for (var i in this.colors.theme) {\n                var line_def = {};\n                if (i == 0) {\n                    line_def[\"bottom\"] = true;\n                } else if (i != this.colors.theme.length - 1) {\n                    line_def[\"top\"] = true;\n                    line_def[\"bottom\"] = true;\n                } else {\n                    line_def[\"top\"] = true;\n                }\n                line_def[\"colors\"] = this.colors.theme[i];\n                this._content(line_def);\n            }\n            this._content({ colors: this.colors.standard });\n        },\n\n        /** Create content */\n        _content: function(options) {\n            var colors = options.colors;\n            var $content = $(this._templateContent());\n            var $line = $content.find(\".line\");\n            this.$panel.append($content);\n            for (var i in colors) {\n                var $box = $(this._templateBox(colors[i]));\n                if (options.top) {\n                    $box.css(\"border-top\", \"none\");\n                    $box.css(\"border-top-left-radius\", \"0px\");\n                    $box.css(\"border-top-right-radius\", \"0px\");\n                }\n                if (options.bottom) {\n                    $box.css(\"border-bottom\", \"none\");\n                    $box.css(\"border-bottom-left-radius\", \"0px\");\n                    $box.css(\"border-bottom-right-radius\", \"0px\");\n                }\n                $line.append($box);\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function() {\n            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function() {\n            return (\n                '<div class=\"ui-color-picker-content\">' +\n                '<div class=\"line\"/>' +\n                \"</div>\"\n            );\n        },\n\n        /** Box template */\n        _templateBox: function(color) {\n            return (\n                '<div id=\"' +\n                color +\n                '\" class=\"ui-color-picker-box\" style=\"background-color: #' +\n                color +\n                ';\"/>'\n            );\n        },\n\n        /** Main template */\n        _template: function() {\n            return (\n                '<div class=\"ui-color-picker\">' +\n                '<div class=\"ui-color-picker-header\">' +\n                '<div class=\"ui-color-picker-value\"/>' +\n                '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                \"</div>\" +\n                '<div class=\"ui-color-picker-view ui-input\">' +\n                '<div class=\"ui-color-picker-panel\"/>' +\n                \"</div>\"\n            );\n            (\"</div>\");\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-color-picker.js","import jQuery from \"jquery\";\nvar $ = jQuery;\nimport QUERY_STRING from \"utils/query-string-parsing\";\nimport Ui from \"mvc/ui/ui-misc\";\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function(url, data) {\n        data = data || {};\n        data.__identifer = Math.random()\n            .toString(36)\n            .substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            url += $.param(data, true);\n        }\n        Galaxy.params = data;\n        this.navigate(url, { trigger: true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function(callback, args, name) {\n        Galaxy.debug(\"router execute:\", callback, args, name);\n        var queryObj = QUERY_STRING.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function(args, name) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display(\n            new Ui.Message({\n                status: \"danger\",\n                message:\n                    \"You must be logged in with proper credentials to make this request.\",\n                persistent: true\n            })\n        );\n    }\n});\n\nexport default Router;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-select-default\",\n        \"mvc/ui/ui-slider\",\n        \"mvc/ui/ui-options\",\n        \"mvc/ui/ui-drilldown\",\n        \"mvc/ui/ui-buttons\",\n        \"mvc/ui/ui-modal\"\n    ],\n    function(Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n        /** Label wrapper */\n        var Label = Backbone.View.extend({\n            tagName: \"label\",\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.tagName = options.tagName || this.tagName;\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            title: function(new_title) {\n                this.model.set(\"title\", new_title);\n            },\n            value: function() {\n                return this.model.get(\"title\");\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-label\")\n                    .addClass(this.model.get(\"cls\"))\n                    .html(this.model.get(\"title\"));\n                return this;\n            }\n        });\n\n        /** Displays messages used e.g. in the tool form */\n        var Message = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        message: null,\n                        status: \"info\",\n                        cls: \"\",\n                        persistent: false,\n                        fade: true\n                    }).set(options);\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            update: function(options) {\n                this.model.set(options);\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-message\")\n                    .addClass(this.model.get(\"cls\"));\n                var status = this.model.get(\"status\");\n                if (this.model.get(\"large\")) {\n                    this.$el.addClass(\n                        ((status == \"success\" && \"done\") ||\n                            (status == \"danger\" && \"error\") ||\n                            status) + \"messagelarge\"\n                    );\n                } else {\n                    this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n                }\n                if (this.model.get(\"message\")) {\n                    this.$el.html(this.messageForDisplay());\n                    this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                    this.timeout && window.clearTimeout(this.timeout);\n                    if (!this.model.get(\"persistent\")) {\n                        var self = this;\n                        this.timeout = window.setTimeout(function() {\n                            self.model.set(\"message\", \"\");\n                        }, 3000);\n                    }\n                } else {\n                    this.$el.fadeOut();\n                }\n                return this;\n            },\n            messageForDisplay: function() {\n                return _.escape(this.model.get(\"message\"));\n            }\n        });\n\n        var UnescapedMessage = Message.extend({\n            messageForDisplay: function() {\n                return this.model.get(\"message\");\n            }\n        });\n\n        /** Renders an input element used e.g. in the tool form */\n        var Input = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        type: \"text\",\n                        placeholder: \"\",\n                        disabled: false,\n                        readonly: false,\n                        visible: true,\n                        cls: \"\",\n                        area: false,\n                        color: null,\n                        style: null\n                    }).set(options);\n                this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            events: {\n                input: \"_onchange\"\n            },\n            value: function(new_val) {\n                new_val !== undefined &&\n                    this.model.set(\n                        \"value\",\n                        typeof new_val === \"string\" ? new_val : \"\"\n                    );\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                var self = this;\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-\" + this.tagName)\n                    .addClass(this.model.get(\"cls\"))\n                    .addClass(this.model.get(\"style\"))\n                    .attr(\"id\", this.model.id)\n                    .attr(\"type\", this.model.get(\"type\"))\n                    .attr(\"placeholder\", this.model.get(\"placeholder\"))\n                    .css(\"color\", this.model.get(\"color\") || \"\")\n                    .css(\"border-color\", this.model.get(\"color\") || \"\");\n                var datalist = this.model.get(\"datalist\");\n                if ($.isArray(datalist) && datalist.length > 0) {\n                    this.$el.autocomplete({\n                        source: function(request, response) {\n                            response(self.model.get(\"datalist\"));\n                        },\n                        change: function() {\n                            self._onchange();\n                        }\n                    });\n                }\n                if (this.model.get(\"value\") !== this.$el.val()) {\n                    this.$el.val(this.model.get(\"value\"));\n                }\n                _.each([\"readonly\", \"disabled\"], function(attr_name) {\n                    self.model.get(attr_name)\n                        ? self.$el.attr(attr_name, true)\n                        : self.$el.removeAttr(attr_name);\n                });\n                this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n                return this;\n            },\n            _onchange: function() {\n                this.value(this.$el.val());\n                this.model.get(\"onchange\") &&\n                    this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n        });\n\n        /** Creates a hidden element input field used e.g. in the tool form */\n        var Hidden = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append((this.$hidden = $(\"<div/>\")))\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.$hidden.val(this.model.get(\"value\"));\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                return this;\n            }\n        });\n\n        /** Creates a upload element input field */\n        var Upload = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append(\n                            (this.$file = $(\"<input/>\")\n                                .attr(\"type\", \"file\")\n                                .addClass(\"ui-margin-bottom\"))\n                        )\n                        .append(\n                            (this.$text = $(\"<textarea/>\")\n                                .addClass(\"ui-textarea\")\n                                .attr(\"disabled\", true))\n                        )\n                        .append(\n                            (this.$wait = $(\"<i/>\").addClass(\n                                \"fa fa-spinner fa-spin\"\n                            ))\n                        )\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.$file.on(\"change\", function(e) {\n                    self._readFile(e);\n                });\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                this.model.get(\"value\")\n                    ? this.$text.text(this.model.get(\"value\")).show()\n                    : this.$text.hide();\n                this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n                return this;\n            },\n            _readFile: function(e) {\n                var self = this;\n                var file = e.target.files && e.target.files[0];\n                if (file) {\n                    var reader = new FileReader();\n                    reader.onload = function() {\n                        self.model.set({ wait: false, value: this.result });\n                    };\n                    this.model.set({ wait: true, value: null });\n                    reader.readAsText(file);\n                }\n            }\n        });\n\n        return {\n            Button: Buttons.ButtonDefault,\n            ButtonIcon: Buttons.ButtonIcon,\n            ButtonCheck: Buttons.ButtonCheck,\n            ButtonMenu: Buttons.ButtonMenu,\n            ButtonLink: Buttons.ButtonLink,\n            Input: Input,\n            Label: Label,\n            Message: Message,\n            UnescapedMessage: UnescapedMessage,\n            Upload: Upload,\n            Modal: Modal,\n            RadioButton: Options.RadioButton,\n            Checkbox: Options.Checkbox,\n            Radio: Options.Radio,\n            Select: Select,\n            Hidden: Hidden,\n            Slider: Slider,\n            Drilldown: Drilldown\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","/** Generic form view */\ndefine([\"mvc/form/form-view\", \"mvc/ui/ui-misc\"], function(Form, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.model = new Backbone.Model(options);\n            this.url = this.model.get(\"url\");\n            this.redirect = this.model.get(\"redirect\");\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + this.url,\n                type: \"GET\"\n            })\n                .done(function(response) {\n                    var options = $.extend({}, self.model.attributes, response);\n                    var form = new Form({\n                        title: options.title,\n                        message: options.message,\n                        status: options.status || \"warning\",\n                        icon: options.icon,\n                        inputs: options.inputs,\n                        buttons: {\n                            submit: new Ui.Button({\n                                tooltip: options.submit_tooltip,\n                                title: options.submit_title || \"Save\",\n                                icon: options.submit_icon || \"fa-save\",\n                                cls: \"btn btn-primary ui-clear-float\",\n                                onclick: function() {\n                                    self._submit(form);\n                                }\n                            })\n                        }\n                    });\n                    self.$el.empty().append(form.$el);\n                })\n                .fail(function(response) {\n                    self.$el.empty().append(\n                        new Ui.Message({\n                            message:\n                                \"Failed to load resource \" + self.url + \".\",\n                            status: \"danger\",\n                            persistent: true\n                        }).$el\n                    );\n                });\n        },\n\n        _submit: function(form) {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + self.url,\n                data: JSON.stringify(form.data.create()),\n                type: \"PUT\",\n                contentType: \"application/json\"\n            })\n                .done(function(response) {\n                    var success_message = {\n                        message: response.message,\n                        status: \"success\",\n                        persistent: false\n                    };\n                    if (self.redirect) {\n                        window.location =\n                            Galaxy.root +\n                            self.redirect +\n                            \"?\" +\n                            $.param(success_message);\n                    } else {\n                        form.data.matchModel(response, function(\n                            input,\n                            input_id\n                        ) {\n                            form.field_list[input_id].value(input.value);\n                        });\n                        self._showMessage(form, success_message);\n                    }\n                })\n                .fail(function(response) {\n                    self._showMessage(form, {\n                        message: response.responseJSON.err_msg,\n                        status: \"danger\",\n                        persistent: false\n                    });\n                });\n        },\n\n        _showMessage: function(form, options) {\n            var $panel = form.$el\n                .parents()\n                .filter(function() {\n                    return (\n                        [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) !=\n                        -1\n                    );\n                })\n                .first();\n            $panel.animate({ scrollTop: 0 }, 500);\n            form.message.update(options);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-wrapper.js","define([\"utils/utils\", \"mvc/ui/ui-misc\"], function(Utils, Ui) {\n    var View = Backbone.View.extend({\n        visible: false,\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    cls: \"ui-portlet\",\n                    title: \"\",\n                    icon: \"\",\n                    buttons: null,\n                    body: null,\n                    scrollable: true,\n                    nopadding: false,\n                    operations: null,\n                    collapsible: false,\n                    collapsible_button: false,\n                    collapsed: false,\n                    onchange_title: null\n                }).set(options);\n            this.setElement(this._template());\n\n            // link all dom elements\n            this.$body = this.$(\".portlet-body\");\n            this.$title_text = this.$(\".portlet-title-text\");\n            this.$title_icon = this.$(\".portlet-title-icon\");\n            this.$header = this.$(\".portlet-header\");\n            this.$content = this.$(\".portlet-content\");\n            this.$backdrop = this.$(\".portlet-backdrop\");\n            this.$buttons = this.$(\".portlet-buttons\");\n            this.$operations = this.$(\".portlet-operations\");\n\n            // add body to component list\n            this.model.get(\"body\") && this.append(this.model.get(\"body\"));\n\n            // add icon for collapsible option\n            this.collapsible_button = new Ui.ButtonIcon({\n                icon: \"fa-eye\",\n                tooltip: \"Collapse/Expand\",\n                cls: \"ui-button-icon-plain\",\n                onclick: function() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                }\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr(\"id\", options.id);\n            this.$header[options.title ? \"show\" : \"hide\"]();\n            this.$title_text.html(options.title);\n            _.each([this.$content, this.$body], function($el) {\n                $el[options.nopadding ? \"addClass\" : \"removeClass\"](\n                    \"no-padding\"\n                );\n            });\n\n            // render title icon\n            if (options.icon) {\n                this.$title_icon\n                    .removeClass()\n                    .addClass(\"portlet-title-icon fa\")\n                    .addClass(options.icon)\n                    .show();\n            } else {\n                this.$title_icon.hide();\n            }\n\n            // make portlet collapsible\n            this.$title_text\n                [options.collapsible ? \"addClass\" : \"removeClass\"](\n                    \"no-highlight collapsible\"\n                )\n                .off();\n            if (options.collapsible) {\n                this.$title_text.on(\"click\", function() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                });\n                options.collapsed ? this.collapse() : this.expand();\n            }\n\n            // allow title editing\n            this.$title_text.prop(\"disabled\", !options.onchange_title);\n            options.onchange_title &&\n                this.$title_text.make_text_editable({\n                    on_finish: function(new_title) {\n                        options.onchange_title(new_title);\n                    }\n                });\n\n            // render buttons\n            if (options.buttons) {\n                this.$buttons.empty().show();\n                $.each(this.model.get(\"buttons\"), function(name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$buttons.append(item.$el);\n                });\n            } else {\n                this.$buttons.hide();\n            }\n\n            // render operations\n            this.$operations.empty;\n            if (options.collapsible_button) {\n                this.$operations.append(this.collapsible_button.$el);\n            }\n            if (options.operations) {\n                $.each(options.operations, function(name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$operations.append(item.$el);\n                });\n            }\n            return this;\n        },\n\n        /** Append new doms to body */\n        append: function($el) {\n            this.$body.append($el);\n        },\n\n        /** Remove all content */\n        empty: function() {\n            this.$body.empty();\n        },\n\n        /** Return header element */\n        header: function() {\n            return this.$header;\n        },\n\n        /** Return body element */\n        body: function() {\n            return this.$body;\n        },\n\n        /** Show portlet */\n        show: function() {\n            this.visible = true;\n            this.$el.fadeIn(\"fast\");\n        },\n\n        /** Hide portlet */\n        hide: function() {\n            this.visible = false;\n            this.$el.hide();\n        },\n\n        /** Enable a particular button */\n        enableButton: function(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", false);\n        },\n\n        /** Disable a particular button */\n        disableButton: function(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", true);\n        },\n\n        /** Hide a particular operation */\n        hideOperation: function(id) {\n            this.$operations.find(\"#\" + id).hide();\n        },\n\n        /** Show a particular operation */\n        showOperation: function(id) {\n            this.$operations.find(\"#\" + id).show();\n        },\n\n        /** Replaces the event callback of an existing operation */\n        setOperation: function(id, callback) {\n            this.$operations\n                .find(\"#\" + id)\n                .off(\"click\")\n                .on(\"click\", callback);\n        },\n\n        /** Change title */\n        title: function(new_title) {\n            new_title && this.$title_text.html(new_title);\n            return this.$title_text.html();\n        },\n\n        /** Collapse portlet */\n        collapse: function() {\n            this.collapsed = true;\n            this.$content.height(\"0%\");\n            this.$body.hide();\n            this.collapsible_button.setIcon(\"fa-eye-slash\");\n        },\n\n        /** Expand portlet */\n        expand: function() {\n            this.collapsed = false;\n            this.$content.height(\"100%\");\n            this.$body.fadeIn(\"fast\");\n            this.collapsible_button.setIcon(\"fa-eye\");\n        },\n\n        /** Disable content access */\n        disable: function() {\n            this.$backdrop.show();\n        },\n\n        /** Enable content access */\n        enable: function() {\n            this.$backdrop.hide();\n        },\n\n        _template: function() {\n            return $(\"<div/>\")\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"portlet-header\")\n                        .append($(\"<div/>\").addClass(\"portlet-operations\"))\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"portlet-title\")\n                                .append(\n                                    $(\"<i/>\").addClass(\"portlet-title-icon\")\n                                )\n                                .append(\n                                    $(\"<span/>\").addClass(\"portlet-title-text\")\n                                )\n                        )\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"portlet-content\")\n                        .append($(\"<div/>\").addClass(\"portlet-body\"))\n                        .append($(\"<div/>\").addClass(\"portlet-buttons\"))\n                )\n                .append($(\"<div/>\").addClass(\"portlet-backdrop\"));\n        }\n    });\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-portlet.js","/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/form/form-section\",\n        \"mvc/form/form-data\"\n    ],\n    function(Utils, Portlet, Ui, FormSection, FormData) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                this.model = new Backbone.Model({\n                    initial_errors: false,\n                    cls: \"ui-portlet-limited\",\n                    icon: null,\n                    always_refresh: true,\n                    status: \"warning\",\n                    hide_operations: false,\n                    onchange: function() {}\n                }).set(options);\n                this.setElement(\"<div/>\");\n                this.render();\n            },\n\n            /** Update available options */\n            update: function(new_model) {\n                var self = this;\n                this.data.matchModel(new_model, function(node, input_id) {\n                    var input = self.input_list[input_id];\n                    if (input && input.options) {\n                        if (!_.isEqual(input.options, node.options)) {\n                            input.options = node.options;\n                            var field = self.field_list[input_id];\n                            if (field.update) {\n                                var new_options = [];\n                                if (\n                                    [\n                                        \"data\",\n                                        \"data_collection\",\n                                        \"drill_down\"\n                                    ].indexOf(input.type) != -1\n                                ) {\n                                    new_options = input.options;\n                                } else {\n                                    for (var i in node.options) {\n                                        var opt = node.options[i];\n                                        if (opt.length > 2) {\n                                            new_options.push({\n                                                label: opt[0],\n                                                value: opt[1]\n                                            });\n                                        }\n                                    }\n                                }\n                                field.update(new_options);\n                                field.trigger(\"change\");\n                                Galaxy.emit.debug(\n                                    \"form-view::update()\",\n                                    \"Updating options for \" + input_id\n                                );\n                            }\n                        }\n                    }\n                });\n            },\n\n            /** Set form into wait mode */\n            wait: function(active) {\n                for (var i in this.input_list) {\n                    var field = this.field_list[i];\n                    var input = this.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        field[active ? \"wait\" : \"unwait\"]();\n                    }\n                }\n            },\n\n            /** Highlight and scroll to input element (currently only used for error notifications) */\n            highlight: function(input_id, message, silent) {\n                var input_element = this.element_list[input_id];\n                if (input_element) {\n                    input_element.error(\n                        message || \"Please verify this parameter.\"\n                    );\n                    this.portlet.expand();\n                    this.trigger(\"expand\", input_id);\n                    if (!silent) {\n                        var $panel = this.$el\n                            .parents()\n                            .filter(function() {\n                                return (\n                                    [\"auto\", \"scroll\"].indexOf(\n                                        $(this).css(\"overflow\")\n                                    ) != -1\n                                );\n                            })\n                            .first();\n                        $panel.animate(\n                            {\n                                scrollTop:\n                                    $panel.scrollTop() +\n                                    input_element.$el.offset().top -\n                                    120\n                            },\n                            500\n                        );\n                    }\n                }\n            },\n\n            /** Highlights errors */\n            errors: function(options) {\n                this.trigger(\"reset\");\n                if (options && options.errors) {\n                    var error_messages = this.data.matchResponse(\n                        options.errors\n                    );\n                    for (var input_id in this.element_list) {\n                        var input = this.element_list[input_id];\n                        if (error_messages[input_id]) {\n                            this.highlight(\n                                input_id,\n                                error_messages[input_id],\n                                true\n                            );\n                        }\n                    }\n                }\n            },\n\n            /** Render tool form */\n            render: function() {\n                var self = this;\n                this.off(\"change\");\n                this.off(\"reset\");\n                // contains the dom field elements as created by the parameter factory i.e. form-parameters\n                this.field_list = {};\n                // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n                this.input_list = {};\n                // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n                this.element_list = {};\n                // converts the form into a json data structure\n                this.data = new FormData.Manager(this);\n                this._renderForm();\n                this.data.create();\n                this.model.get(\"initial_errors\") &&\n                    this.errors(this.model.attributes);\n                // add listener which triggers on checksum change, and reset the form input wrappers\n                var current_check = this.data.checksum();\n                this.on(\"change\", function(input_id) {\n                    var input = self.input_list[input_id];\n                    if (\n                        !input ||\n                        input.refresh_on_change ||\n                        self.model.get(\"always_refresh\")\n                    ) {\n                        var new_check = self.data.checksum();\n                        if (new_check != current_check) {\n                            current_check = new_check;\n                            self.model.get(\"onchange\")();\n                        }\n                    }\n                });\n                this.on(\"reset\", function() {\n                    _.each(self.element_list, function(input_element) {\n                        input_element.reset();\n                    });\n                });\n                return this;\n            },\n\n            /** Renders/appends dom elements of the form */\n            _renderForm: function() {\n                $(\".tooltip\").remove();\n                var options = this.model.attributes;\n                this.message = new Ui.UnescapedMessage();\n                this.section = new FormSection.View(this, {\n                    inputs: options.inputs\n                });\n                this.portlet = new Portlet.View({\n                    icon: options.icon,\n                    title: options.title,\n                    cls: options.cls,\n                    operations: !options.hide_operations && options.operations,\n                    buttons: options.buttons,\n                    collapsible: options.collapsible,\n                    collapsed: options.collapsed,\n                    onchange_title: options.onchange_title\n                });\n                this.portlet.append(this.message.$el);\n                this.portlet.append(this.section.$el);\n                this.$el.empty();\n                options.inputs && this.$el.append(this.portlet.$el);\n                options.message &&\n                    this.message.update({\n                        persistent: true,\n                        status: options.status,\n                        message: options.message\n                    });\n                Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-view.js"],"sourceRoot":""}