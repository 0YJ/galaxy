{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js?fd98*","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js?4ced*","webpack:///./galaxy/scripts/mvc/grid/grid-view.js?be4f*","webpack:///./galaxy/scripts/mvc/ui/ui-options.js?405a*","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js?a948*","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js?402d*","webpack:///./galaxy/scripts/mvc/grid/grid-model.js?e551*","webpack:///./galaxy/scripts/mvc/grid/grid-template.js?73e1*","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js?de06*","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js?93a7*","webpack:///./galaxy/scripts/layout/router.js?1c11","webpack:///./galaxy/scripts/apps/panels/admin-panel.js"],"names":["webpackJsonp","0","module","exports","__webpack_require__","_","jQuery","$","GalaxyApp","AdminPanel","GridView","Router","Page","window","app","options","bootstrapped","Galaxy","debug","params","config","AdminRouter","extend","routes","(/)admin(/)users","authenticate","args","name","user","id","get","show_users","this","page","display","url_base","root","dict_format","active_view","View","Left","call","7","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Backbone","Utils","Select","Slider","Options","Drilldown","Buttons","Modal","Label","tagName","initialize","model","Model","setElement","listenTo","render","title","new_title","set","value","$el","removeClass","addClass","html","Message","message","status","cls","persistent","fade","update","messageForDisplay","timeout","clearTimeout","self","setTimeout","fadeOut","escape","UnescapedMessage","Input","type","placeholder","disabled","readonly","visible","area","color","style","events","input","new_val","undefined","attr","css","datalist","isArray","length","autocomplete","source","request","response","change","_onchange","val","each","attr_name","removeAttr","Hidden","append","$info","$hidden","show","text","hide","Upload","$file","$text","$wait","on","e","_readFile","file","target","files","reader","FileReader","onload","wait","result","readAsText","Button","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","ButtonLink","RadioButton","Checkbox","Radio","apply","9","uid","floating","icon","wait_text","wait_cls","percentage","$icon","$title","$progress","$progress_bar","attributes","off","onclick","tooltip","placement","width","prop","disable","enable","unwait","setIcon","href","icons","onchange","total","$button","$menu","pull","onunload","tag","collection","Collection","$root","float","where","preventDefault","remove","submodel","suboptions","$link","divider","addMenu","add","merge","11","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","add_tag_to_grid_filter","tag_name","tag_value","advanced_search","is","slideToggle","add_filter_condition","items","url_data","filters","v","k","ajax","url","param","success","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","top","currHistoryPanel","loadCurrentHistory","replace","find","header","body","footer","use_hide_message","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","filter","rating","set_page","execute","items_length","item","index","button","popup","operation","_add_operation","settings","operation_config","label","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","add_filter","t","filter_element","container","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","empty","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","number_of_checked_ids","findWhere","operations","item_ids","push","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","$div","closest","load","method","data","error","alert","response_text","insert","json","parseJSON","complete","12","Base","error_text","multiple","optional","_changeValue","_changeWait","_changeData","_changeVisible","$message","$options","_template","all_button","_getValue","trigger","_templateOptions","option","_templateOption","_messageShow","_setValue","first","values","selected","isEmpty","BaseIcons","pair","prototype","15","menu","event","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","i","li","join","map","checked","menuWidth","x","pageX","Math","min","document","scrollLeft","max","pageY","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","toString","create","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","16","data2","empty_text","searchable","selectall","pagesize","_changeDisabled","_renderSearchable","_renderClassic","$select","$dropdown","$resize","$resize_icon","currentY","currentHeight","height","minHeight","select2","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","callback","slice","more","formatResult","reduce","memo","exists","d","sorter","keep","sort","setOnChange","a","b","25","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","key","cur_val","condition","condition_index","pairs","get_url","26","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","j","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_range","max_page","max_offset","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","JSON","stringify","column_filter","size","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","27","header_index","list","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","29","step","precise","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","43","QUERY_STRING","Ui","__identifer","random","substr","isEmptyObject","navigate","queryObj","parse","pop","access_denied","99","_l","categories","enabled","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","allow_user_impersonation","enable_quotas","category","$section","_templateSection","$entries"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    GalaxyApp = __webpack_require__(40).GalaxyApp,\n\t    AdminPanel = __webpack_require__(99),\n\t    GridView = __webpack_require__(11),\n\t    Ui = __webpack_require__(7),\n\t    Router = __webpack_require__(43),\n\t    Page = __webpack_require__(41);\n\t\n\twindow.app = function app(options, bootstrapped) {\n\t    window.Galaxy = new GalaxyApp(options, bootstrapped);\n\t    Galaxy.debug('admin app');\n\t    Galaxy.params = Galaxy.config.params;\n\t\n\t    /** Routes */\n\t    var AdminRouter = Router.extend({\n\t        routes: {\n\t            '(/)admin(/)users': 'show_users'\n\t        },\n\t\n\t        authenticate: function (args, name) {\n\t            return Galaxy.user && Galaxy.user.id && Galaxy.user.get('is_admin');\n\t        },\n\t\n\t        show_users: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/users_list', dict_format: true }));\n\t        }\n\t    });\n\t\n\t    $(function () {\n\t        _.extend(options.config, { active_view: 'admin' });\n\t        Galaxy.page = new Page.View(_.extend(options, {\n\t            Left: AdminPanel,\n\t            Router: AdminRouter\n\t        }));\n\t    });\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n\n/***/ 7:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(16), __webpack_require__(29), __webpack_require__(12), __webpack_require__(27), __webpack_require__(9), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n\t\n\t    /** Label wrapper */\n\t    var Label = Backbone.View.extend({\n\t        tagName: 'label',\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.tagName = options.tagName || this.tagName;\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        title: function (new_title) {\n\t            this.model.set('title', new_title);\n\t        },\n\t        value: function () {\n\t            return this.model.get('title');\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-label').addClass(this.model.get('cls')).html(this.model.get('title'));\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Displays messages used e.g. in the tool form */\n\t    var Message = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                message: null,\n\t                status: 'info',\n\t                cls: '',\n\t                persistent: false,\n\t                fade: true\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        update: function (options) {\n\t            this.model.set(options);\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-message').addClass(this.model.get('cls'));\n\t            var status = this.model.get('status');\n\t            if (this.model.get('large')) {\n\t                this.$el.addClass((status == 'success' && 'done' || status == 'danger' && 'error' || status) + 'messagelarge');\n\t            } else {\n\t                this.$el.addClass('alert').addClass('alert-' + status);\n\t            }\n\t            if (this.model.get('message')) {\n\t                this.$el.html(this.messageForDisplay());\n\t                this.$el[this.model.get('fade') ? 'fadeIn' : 'show']();\n\t                this.timeout && window.clearTimeout(this.timeout);\n\t                if (!this.model.get('persistent')) {\n\t                    var self = this;\n\t                    this.timeout = window.setTimeout(function () {\n\t                        self.model.set('message', '');\n\t                    }, 3000);\n\t                }\n\t            } else {\n\t                this.$el.fadeOut();\n\t            }\n\t            return this;\n\t        },\n\t        messageForDisplay: function () {\n\t            return _.escape(this.model.get('message'));\n\t        }\n\t    });\n\t\n\t    var UnescapedMessage = Message.extend({\n\t        messageForDisplay: function () {\n\t            return this.model.get('message');\n\t        }\n\t    });\n\t\n\t    /** Renders an input element used e.g. in the tool form */\n\t    var Input = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                type: 'text',\n\t                placeholder: '',\n\t                disabled: false,\n\t                readonly: false,\n\t                visible: true,\n\t                cls: '',\n\t                area: false,\n\t                color: null,\n\t                style: null\n\t            }).set(options);\n\t            this.tagName = this.model.get('area') ? 'textarea' : 'input';\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        events: {\n\t            'input': '_onchange'\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', typeof new_val === 'string' ? new_val : '');\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.removeClass().addClass('ui-' + this.tagName).addClass(this.model.get('cls')).addClass(this.model.get('style')).attr('id', this.model.id).attr('type', this.model.get('type')).attr('placeholder', this.model.get('placeholder')).css('color', this.model.get('color') || '').css('border-color', this.model.get('color') || '');\n\t            var datalist = this.model.get('datalist');\n\t            if ($.isArray(datalist) && datalist.length > 0) {\n\t                this.$el.autocomplete({ source: function (request, response) {\n\t                        response(self.model.get('datalist'));\n\t                    },\n\t                    change: function () {\n\t                        self._onchange();\n\t                    } });\n\t            }\n\t            if (this.model.get('value') !== this.$el.val()) {\n\t                this.$el.val(this.model.get('value'));\n\t            }\n\t            _.each(['readonly', 'disabled'], function (attr_name) {\n\t                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n\t            });\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            return this;\n\t        },\n\t        _onchange: function () {\n\t            this.value(this.$el.val());\n\t            this.model.get('onchange') && this.model.get('onchange')(this.model.get('value'));\n\t        }\n\t    });\n\t\n\t    /** Creates a hidden element input field used e.g. in the tool form */\n\t    var Hidden = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$hidden = $('<div/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.$hidden.val(this.model.get('value'));\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Creates a upload element input field */\n\t    var Upload = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$file = $('<input/>').attr('type', 'file').addClass('ui-margin-bottom')).append(this.$text = $('<textarea/>').addClass('ui-textarea').attr('disabled', true)).append(this.$wait = $('<i/>').addClass('fa fa-spinner fa-spin')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.$file.on('change', function (e) {\n\t                self._readFile(e);\n\t            });\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            this.model.get('value') ? this.$text.text(this.model.get('value')).show() : this.$text.hide();\n\t            this.model.get('wait') ? this.$wait.show() : this.$wait.hide();\n\t            return this;\n\t        },\n\t        _readFile: function (e) {\n\t            var self = this;\n\t            var file = e.target.files && e.target.files[0];\n\t            if (file) {\n\t                var reader = new FileReader();\n\t                reader.onload = function () {\n\t                    self.model.set({ wait: false, value: this.result });\n\t                };\n\t                this.model.set({ wait: true, value: null });\n\t                reader.readAsText(file);\n\t            }\n\t        }\n\t    });\n\t\n\t    return {\n\t        Button: Buttons.ButtonDefault,\n\t        ButtonIcon: Buttons.ButtonIcon,\n\t        ButtonCheck: Buttons.ButtonCheck,\n\t        ButtonMenu: Buttons.ButtonMenu,\n\t        ButtonLink: Buttons.ButtonLink,\n\t        Input: Input,\n\t        Label: Label,\n\t        Message: Message,\n\t        UnescapedMessage: UnescapedMessage,\n\t        Upload: Upload,\n\t        Modal: Modal,\n\t        RadioButton: Options.RadioButton,\n\t        Checkbox: Options.Checkbox,\n\t        Radio: Options.Radio,\n\t        Select: Select,\n\t        Hidden: Hidden,\n\t        Slider: Slider,\n\t        Drilldown: Drilldown\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 9:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This module contains all button views. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n\t    var ButtonDefault = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                floating: 'right',\n\t                icon: '',\n\t                cls: 'btn btn-default',\n\t                wait: false,\n\t                wait_text: 'Sending...',\n\t                wait_cls: 'btn btn-info',\n\t                disabled: false,\n\t                percentage: -1\n\t            }).set(options);\n\t            this.setElement($('<button/>').attr('type', 'button').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>')).append(this.$progress = $('<div/>').append(this.$progress_bar = $('<div/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('ui-button-default').addClass(options.disabled && 'disabled').attr('id', options.id).attr('disabled', options.disabled).css('float', options.floating).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                options.onclick && !self.disabled && options.onclick();\n\t            }).tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$progress.addClass('progress').css('display', options.percentage !== -1 ? 'block' : 'none');\n\t            this.$progress_bar.addClass('progress-bar').css({ width: options.percentage + '%' });\n\t            this.$icon.removeClass().addClass('icon fa');\n\t            this.$title.removeClass().addClass('title');\n\t            if (options.wait) {\n\t                this.$el.addClass(options.wait_cls).prop('disabled', true);\n\t                this.$icon.addClass('fa-spinner fa-spin ui-margin-right');\n\t                this.$title.html(options.wait_text);\n\t            } else {\n\t                this.$el.addClass(options.cls);\n\t                this.$icon.addClass(options.icon);\n\t                this.$title.html(options.title);\n\t                options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            }\n\t        },\n\t\n\t        /** Show button */\n\t        show: function () {\n\t            this.$el.show();\n\t        },\n\t\n\t        /** Hide button */\n\t        hide: function () {\n\t            this.$el.hide();\n\t        },\n\t\n\t        /** Disable button */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Enable button */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Show spinner to indicate that the button is not ready to be clicked */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner to indicate that the button is ready to be clicked */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Change icon */\n\t        setIcon: function (icon) {\n\t            this.model.set('icon', icon);\n\t        }\n\t    });\n\t\n\t    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n\t    var ButtonLink = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: ''\n\t            }).set(options);\n\t            this.setElement($('<a/>').append(this.$icon = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).attr({ id: options.id,\n\t                href: options.href || 'javascript:void(0)',\n\t                title: options.title,\n\t                target: options.target || '_top',\n\t                disabled: options.disabled }).tooltip({ placement: 'bottom' }).off('click').on('click', function () {\n\t                options.onclick && !options.disabled && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass(options.icon);\n\t        }\n\t    });\n\t\n\t    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n\t    var ButtonCheck = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: 'Select/Unselect all',\n\t                icons: ['fa-square-o', 'fa-minus-square-o', 'fa-check-square-o'],\n\t                value: 0,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$icon = $('<span/>')).append(this.$title = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.addClass('ui-button-check').off('click').on('click', function () {\n\t                self.model.set('value', self.model.get('value') === 0 && 2 || 0);\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$title.html(options.title);\n\t            this.$icon.removeClass().addClass('icon fa ui-margin-right').addClass(options.icons[options.value]);\n\t        },\n\t\n\t        /* Sets a new value and/or returns the value.\n\t        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n\t        * OR:\n\t        * @param{Integer}   new_val - Number of selected options.\n\t        * @param{Integer}   total   - Total number of available options.\n\t        */\n\t        value: function (new_val, total) {\n\t            if (new_val !== undefined) {\n\t                if (total && new_val !== 0) {\n\t                    new_val = new_val !== total && 1 || 2;\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.get('onchange')(this.model.get('value'));\n\t            }\n\t            return this.model.get('value');\n\t        }\n\t    });\n\t\n\t    /** This renders a differently styled, more compact button version. */\n\t    var ButtonIcon = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                floating: 'right',\n\t                icon: '',\n\t                cls: 'ui-button-icon',\n\t                disabled: false\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$button = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && 'disabled').attr('disabled', options.disabled).attr('id', options.id).css('float', options.floating).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                !options.disabled && options.onclick && options.onclick();\n\t            });\n\t            this.$button.addClass('button').tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t        }\n\t    });\n\t\n\t    /** This class creates a button with dropdown menu. */\n\t    var ButtonMenu = ButtonDefault.extend({\n\t        $menu: null,\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: '',\n\t                title: '',\n\t                floating: 'right',\n\t                pull: 'right',\n\t                icon: null,\n\t                onclick: null,\n\t                cls: 'ui-button-icon ui-button-menu',\n\t                tooltip: '',\n\t                target: '',\n\t                href: '',\n\t                onunload: null,\n\t                visible: true,\n\t                tag: ''\n\t            }).set(options);\n\t            this.collection = new Backbone.Collection();\n\t            this.setElement($('<div/>').append(this.$root = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.listenTo(this.collection, 'change add remove reset', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('dropdown').addClass(options.cls).attr('id', options.id).css({ float: options.floating,\n\t                display: options.visible && this.collection.where({ visible: true }).length > 0 ? 'block' : 'none' });\n\t            this.$root.addClass('root button dropdown-toggle').attr('data-toggle', 'dropdown').tooltip({ title: options.tooltip, placement: 'bottom' }).off('click').on('click', function (e) {\n\t                $('.tooltip').hide();\n\t                e.preventDefault();\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.removeClass().addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            this.$menu && this.$menu.remove();\n\t            if (this.collection.length > 0) {\n\t                this.$menu = $('<ul/>').addClass('menu dropdown-menu').addClass('pull-' + self.model.get('pull')).attr('role', 'menu');\n\t                this.$el.append(this.$menu);\n\t            }\n\t            this.collection.each(function (submodel) {\n\t                var suboptions = submodel.attributes;\n\t                if (suboptions.visible) {\n\t                    var $link = $('<a/>').addClass('dropdown-item').attr({ href: suboptions.href, target: suboptions.target }).append($('<i/>').addClass('fa').addClass(suboptions.icon).css('display', suboptions.icon ? 'inline-block' : 'none')).append(suboptions.title).on('click', function (e) {\n\t                        if (suboptions.onclick) {\n\t                            e.preventDefault();\n\t                            suboptions.onclick();\n\t                        }\n\t                    });\n\t                    self.$menu.append($('<li/>').append($link));\n\t                    suboptions.divider && self.$menu.append($('<li/>').addClass('divider'));\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Add a new menu item */\n\t        addMenu: function (options) {\n\t            this.collection.add(Utils.merge(options, {\n\t                title: '',\n\t                target: '',\n\t                href: '',\n\t                onclick: null,\n\t                divider: false,\n\t                visible: true,\n\t                icon: null,\n\t                cls: 'button-menu btn-group'\n\t            }));\n\t        }\n\t    });\n\t\n\t    return {\n\t        ButtonDefault: ButtonDefault,\n\t        ButtonLink: ButtonLink,\n\t        ButtonIcon: ButtonIcon,\n\t        ButtonCheck: ButtonCheck,\n\t        ButtonMenu: ButtonMenu\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n\n/***/ 11:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n\t// not appended to the identifier of a nested array.\n\tjQuery.ajaxSettings.traditional = true;\n\t\n\t// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(25), __webpack_require__(26), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n\t\n\t    // grid view\n\t    return Backbone.View.extend({\n\t\n\t        // model\n\t        grid: null,\n\t\n\t        // Initialize\n\t        initialize: function (grid_config) {\n\t            this.dict_format = grid_config.dict_format;\n\t            var self = this;\n\t            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n\t                // Put tag name and value together.\n\t                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n\t                var advanced_search = $('#advanced-search').is(\":visible\");\n\t                if (!advanced_search) {\n\t                    $('#standard-search').slideToggle('fast');\n\t                    $('#advanced-search').slideToggle('fast');\n\t                }\n\t                self.add_filter_condition(\"tags\", tag);\n\t            };\n\t\n\t            // set element\n\t            if (this.dict_format) {\n\t                this.setElement('<div/>');\n\t                if (grid_config.url_base && !grid_config.items) {\n\t                    var url_data = {};\n\t                    _.each(grid_config.filters, function (v, k) {\n\t                        url_data['f-' + k] = v;\n\t                    });\n\t                    $.ajax({\n\t                        url: grid_config.url_base + '?' + $.param(url_data),\n\t                        success: function (response) {\n\t                            response.embedded = grid_config.embedded;\n\t                            response.filters = grid_config.filters;\n\t                            self.init_grid(response);\n\t                        }\n\t                    });\n\t                } else {\n\t                    this.init_grid(grid_config);\n\t                }\n\t            } else {\n\t                this.setElement('#grid-container');\n\t                this.init_grid(grid_config);\n\t            }\n\t\n\t            // fix padding\n\t            if (grid_config.use_panels) {\n\t                $('#center').css({\n\t                    padding: '10px',\n\t                    overflow: 'auto'\n\t                });\n\t            }\n\t        },\n\t\n\t        // refresh frames\n\t        handle_refresh: function (refresh_frames) {\n\t            if (refresh_frames) {\n\t                if ($.inArray('history', refresh_frames) > -1) {\n\t                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n\t                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        // Initialize\n\t        init_grid: function (grid_config) {\n\t            // link grid model\n\t            this.grid = new GridModel(grid_config);\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t\n\t            // handle refresh requests\n\t            this.handle_refresh(options.refresh_frames);\n\t\n\t            // strip protocol and domain\n\t            var url = this.grid.get('url_base');\n\t            url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n\t            this.grid.set('url_base', url);\n\t\n\t            // append main template\n\t            this.$el.html(Templates.grid(options));\n\t\n\t            // update div contents\n\t            this.$el.find('#grid-table-header').html(Templates.header(options));\n\t            this.$el.find('#grid-table-body').html(Templates.body(options));\n\t            this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\t\n\t            // update message\n\t            if (options.message) {\n\t                this.$el.find('#grid-message').html(Templates.message(options));\n\t                var self = this;\n\t                if (options.use_hide_message) {\n\t                    setTimeout(function () {\n\t                        self.$el.find('#grid-message').html('');\n\t                    }, 5000);\n\t                }\n\t            }\n\t\n\t            // configure elements\n\t            this.init_grid_elements();\n\t            this.init_grid_controls();\n\t\n\t            // attach global event handler\n\t            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n\t            init_refresh_on_change();\n\t        },\n\t\n\t        // Initialize grid controls\n\t        init_grid_controls: function () {\n\t\n\t            // link\n\t            var self = this;\n\t\n\t            // Initialize grid operation button.\n\t            this.$el.find('.operation-button').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.submit_operation(this);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters to select text on click and use normal font when user is typing.\n\t            this.$el.find('input[type=text]').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    $(this).select();\n\t                }).keyup(function () {\n\t                    $(this).css('font-style', 'normal');\n\t                });\n\t            });\n\t\n\t            // Initialize sort links.\n\t            this.$el.find('.sort-link').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_sort_condition($(this).attr('sort_key'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters.\n\t            this.$el.find('.text-filter-form').each(function () {\n\t                $(this).off();\n\t                $(this).submit(function () {\n\t                    var column_key = $(this).attr('column_key');\n\t                    var text_input_obj = $('#input-' + column_key + '-filter');\n\t                    var text_input = text_input_obj.val();\n\t                    text_input_obj.val('');\n\t                    self.add_filter_condition(column_key, text_input);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.text-filter-val > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    // Remove visible element.\n\t                    $(this).parent().remove();\n\t\n\t                    // Remove filter condition.\n\t                    self.remove_filter_condition($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t\n\t                    // Return\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.categorical-filter > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_categorical_filter($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize standard, advanced search toggles.\n\t            this.$el.find('.advanced-search-toggle').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.$el.find('#standard-search').slideToggle('fast');\n\t                    self.$el.find('#advanced-search').slideToggle('fast');\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Add event to check all box\n\t            this.$el.find('#check_all').off();\n\t            this.$el.find('#check_all').on('click', function () {\n\t                self.check_all_items();\n\t            });\n\t        },\n\t\n\t        // Initialize grid elements.\n\t        init_grid_elements: function () {\n\t            // Initialize grid selection checkboxes.\n\t            this.$el.find('.grid').each(function () {\n\t                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n\t                var check_count = $(this).find(\"span.grid-selected-count\");\n\t                var update_checked = function () {\n\t                    check_count.text($(checkboxes).filter(\":checked\").length);\n\t                };\n\t\n\t                $(checkboxes).each(function () {\n\t                    $(this).change(update_checked);\n\t                });\n\t                update_checked();\n\t            });\n\t\n\t            // Initialize ratings.\n\t            if (this.$el.find('.community_rating_star').length !== 0) this.$el.find('.community_rating_star').rating({});\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t            var self = this;\n\t\n\t            //\n\t            // add page click events\n\t            //\n\t            this.$el.find('.page-link > a').each(function () {\n\t                $(this).click(function () {\n\t                    self.set_page($(this).attr('page_num'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            //\n\t            // add inbound/outbound events\n\t            //\n\t            this.$el.find('.use-target').each(function () {\n\t                $(this).click(function (e) {\n\t                    self.execute({\n\t                        href: $(this).attr('href'),\n\t                        target: $(this).attr('target')\n\t                    });\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // empty grid?\n\t            var items_length = options.items.length;\n\t            if (items_length == 0) {\n\t                return;\n\t            }\n\t\n\t            // add operation popup menus\n\t            _.each(options.items, function (item, index) {\n\t                var button = self.$('#grid-' + index + '-popup').off();\n\t                var popup = new PopupMenu(button);\n\t                _.each(options['operations'], function (operation) {\n\t                    self._add_operation(popup, operation, item);\n\t                });\n\t            });\n\t        },\n\t\n\t        /** Add an operation to the items menu */\n\t        _add_operation: function (popup, operation, item) {\n\t            var self = this;\n\t            var settings = item.operation_config[operation.label];\n\t            if (settings.allowed && operation.allow_popup) {\n\t                popup.addItem({\n\t                    html: operation.label,\n\t                    href: settings.url_args,\n\t                    target: settings.target,\n\t                    confirmation_text: operation.confirm,\n\t                    func: function (e) {\n\t                        e.preventDefault();\n\t                        var label = $(e.target).html();\n\t                        if (operation.onclick) {\n\t                            operation.onclick(item.encode_id);\n\t                        } else {\n\t                            self.execute(this.findItemByHtml(label));\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        },\n\t\n\t        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        add_filter_condition: function (name, value) {\n\t            // Do nothing is value is empty.\n\t            if (value === \"\") {\n\t                return false;\n\t            }\n\t\n\t            // Add condition to grid.\n\t            this.grid.add_filter(name, value, true);\n\t\n\t            // Add button that displays filter and provides a button to delete it.\n\t            var t = $(Templates.filter_element(name, value));\n\t            var self = this;\n\t            t.click(function () {\n\t                // Remove visible element.\n\t                $(this).remove();\n\t\n\t                // Remove filter condition.\n\t                self.remove_filter_condition(name, value);\n\t            });\n\t\n\t            // append to container\n\t            var container = this.$el.find('#' + name + '-filtering-criteria');\n\t            container.append(t);\n\t\n\t            // execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        remove_filter_condition: function (name, value) {\n\t            // Remove filter condition.\n\t            this.grid.remove_filter(name, value);\n\t\n\t            // Execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set sort condition for grid.\n\t        set_sort_condition: function (col_key) {\n\t            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n\t            // currently sorted column, sort is reversed.\n\t            var cur_sort = this.grid.get('sort_key');\n\t            var new_sort = col_key;\n\t            if (cur_sort.indexOf(col_key) !== -1) {\n\t                // Reverse sort.\n\t                if (cur_sort.substring(0, 1) !== '-') {\n\t                    new_sort = '-' + col_key;\n\t                }\n\t            }\n\t\n\t            // Remove sort arrows elements.\n\t            this.$el.find('.sort-arrow').remove();\n\t\n\t            // Add sort arrow element to new sort column.\n\t            var sort_arrow = new_sort.substring(0, 1) == '-' ? '&uarr;' : '&darr;';\n\t            var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\t\n\t            // Add to header\n\t            this.$el.find('#' + col_key + '-header').append(t);\n\t\n\t            // Update grid.\n\t            this.grid.set('sort_key', new_sort);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set new value for categorical filter.\n\t        set_categorical_filter: function (name, new_value) {\n\t            // Update filter hyperlinks to reflect new filter value.\n\t            var category_filter = this.grid.get('categorical_filters')[name],\n\t                cur_value = this.grid.get('filters')[name];\n\t            var self = this;\n\t            this.$el.find('.' + name + '-filter').each(function () {\n\t                var text = $.trim($(this).text());\n\t                var filter = category_filter[text];\n\t                var filter_value = filter[name];\n\t                if (filter_value == new_value) {\n\t                    // Remove filter link since grid will be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    $(this).empty();\n\t                    $(this).addClass('current-filter');\n\t                    $(this).append(text);\n\t                } else if (filter_value == cur_value) {\n\t                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    $(this).empty();\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_categorical_filter(name, filter_value);\n\t                    });\n\t                    $(this).removeClass('current-filter');\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            // Update grid.\n\t            this.grid.add_filter(name, new_value);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set page to view.\n\t        set_page: function (new_page) {\n\t            // Update page hyperlink to reflect new page.\n\t            var self = this;\n\t            this.$el.find('.page-link').each(function () {\n\t                var id = $(this).attr('id'),\n\t                    page_num = parseInt(id.split('-')[2], 10),\n\t                    // Id has form 'page-link-<page_num>\n\t                cur_page = self.grid.get('cur_page'),\n\t                    text;\n\t                if (page_num === new_page) {\n\t                    // Remove link to page since grid will be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    text = $(this).children().text();\n\t                    $(this).empty();\n\t                    $(this).addClass('inactive-link');\n\t                    $(this).text(text);\n\t                } else if (page_num === cur_page) {\n\t                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    text = $(this).text();\n\t                    $(this).empty();\n\t                    $(this).removeClass('inactive-link');\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_page(page_num);\n\t                    });\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            if (new_page === 'all') {\n\t                this.grid.set('cur_page', new_page);\n\t            } else {\n\t                this.grid.set('cur_page', parseInt(new_page, 10));\n\t            }\n\t            this.execute();\n\t        },\n\t\n\t        // confirmation/submission of operation request\n\t        submit_operation: function (operation_button, confirmation_text) {\n\t            // identify operation\n\t            var operation_name = $(operation_button).val();\n\t\n\t            // verify in any item is selected\n\t            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n\t            if (!number_of_checked_ids > 0) {\n\t                return false;\n\t            }\n\t\n\t            // Check to see if there's grid confirmation text for this operation\n\t            var operation = _.findWhere(this.grid.attributes.operations, { label: operation_name });\n\t            if (operation && !confirmation_text) {\n\t                confirmation_text = operation.confirm || '';\n\t            }\n\t\n\t            // collect ids\n\t            var item_ids = [];\n\t            this.$el.find('input[name=id]:checked').each(function () {\n\t                item_ids.push($(this).val());\n\t            });\n\t\n\t            // execute operation\n\t            var options = {\n\t                operation: operation_name,\n\t                id: item_ids,\n\t                confirmation_text: confirmation_text\n\t            };\n\t            if (operation.target == 'top') {\n\t                options = _.extend(options, {\n\t                    href: operation.href,\n\t                    target: operation.target\n\t                });\n\t            }\n\t            this.execute(options);\n\t            return true;\n\t        },\n\t\n\t        check_all_items: function () {\n\t            var check = this.$('.grid-row-select-checkbox');\n\t            var state = this.$('#check_all').prop('checked');\n\t            _.each(check, function (c) {\n\t                $(c).prop('checked', state);\n\t            });\n\t            this.init_grid_elements();\n\t        },\n\t\n\t        // Go back to page one; this is useful when a filter is applied.\n\t        go_page_one: function () {\n\t            // Need to go back to page 1 if not showing all.\n\t            var cur_page = this.grid.get('cur_page');\n\t            if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n\t                this.grid.set('cur_page', 1);\n\t            }\n\t        },\n\t\n\t        //\n\t        // execute operations and hyperlink requests\n\t        //\n\t        execute: function (options) {\n\t            // get url\n\t            var id = null;\n\t            var href = null;\n\t            var operation = null;\n\t            var confirmation_text = null;\n\t            var target = null;\n\t\n\t            // check for options\n\t            if (options) {\n\t                // get options\n\t                href = options.href;\n\t                operation = options.operation;\n\t                id = options.id;\n\t                confirmation_text = options.confirmation_text;\n\t                target = options.target;\n\t\n\t                // check if input contains the operation tag\n\t                if (href !== undefined && href.indexOf('operation=') != -1) {\n\t                    // Get operation, id in hyperlink's href.\n\t                    var href_parts = href.split(\"?\");\n\t                    if (href_parts.length > 1) {\n\t                        var href_parms_str = href_parts[1];\n\t                        var href_parms = href_parms_str.split(\"&\");\n\t                        for (var index = 0; index < href_parms.length; index++) {\n\t                            if (href_parms[index].indexOf('operation') != -1) {\n\t                                // Found operation parm; get operation value.\n\t                                operation = href_parms[index].split('=')[1];\n\t                                operation = operation.replace(/\\+/g, ' ');\n\t                            } else if (href_parms[index].indexOf('id') != -1) {\n\t                                // Found id parm; get id value.\n\t                                id = href_parms[index].split('=')[1];\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            // check for operation details\n\t            if (operation && id) {\n\t                // show confirmation box\n\t                if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null') if (!confirm(confirmation_text)) return false;\n\t\n\t                // use small characters for operation?!\n\t                operation = operation.toLowerCase();\n\t\n\t                // Update grid.\n\t                this.grid.set({\n\t                    operation: operation,\n\t                    item_ids: id\n\t                });\n\t\n\t                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n\t                if (target == 'top') {\n\t                    window.top.location = href + '?' + $.param(this.grid.get_url_data());\n\t                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n\t                    this.update_grid();\n\t                } else {\n\t                    this.go_to(target, href);\n\t                }\n\t\n\t                // done\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (href) {\n\t                this.go_to(target, href);\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (this.grid.get('async') || this.dict_format) {\n\t                this.update_grid();\n\t            } else {\n\t                this.go_to(target, href);\n\t            }\n\t\n\t            // done\n\t            return false;\n\t        },\n\t\n\t        // go to url\n\t        go_to: function (target, href) {\n\t            // get aysnc status\n\t            var async = this.grid.get('async');\n\t            this.grid.set('async', false);\n\t\n\t            // get slide status\n\t            advanced_search = this.$el.find('#advanced-search').is(':visible');\n\t            this.grid.set('advanced_search', advanced_search);\n\t\n\t            // get default url\n\t            if (!href) {\n\t                href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n\t            }\n\t\n\t            // clear grid of transient request attributes.\n\t            this.grid.set({\n\t                operation: undefined,\n\t                item_ids: undefined,\n\t                async: async\n\t            });\n\t            switch (target) {\n\t                case 'inbound':\n\t                    // this currently assumes that there is only a single grid shown at a time\n\t                    var $div = $('.grid-header').closest('.inbound');\n\t                    if ($div.length !== 0) {\n\t                        $div.load(href);\n\t                        return;\n\t                    }\n\t                    break;\n\t                case 'top':\n\t                    window.top.location = href;\n\t                    break;\n\t                default:\n\t                    window.location = href;\n\t            }\n\t        },\n\t\n\t        // Update grid.\n\t        update_grid: function () {\n\t            // If there's an operation, do POST; otherwise, do GET.\n\t            var method = this.grid.get('operation') ? 'POST' : 'GET';\n\t\n\t            // Show overlay to indicate loading and prevent user actions.\n\t            this.$el.find('.loading-elt-overlay').show();\n\t            var self = this;\n\t            $.ajax({\n\t                type: method,\n\t                url: self.grid.get('url_base'),\n\t                data: self.grid.get_url_data(),\n\t                error: function (response) {\n\t                    alert('Grid refresh failed');\n\t                },\n\t                success: function (response_text) {\n\t\n\t                    // backup\n\t                    var embedded = self.grid.get('embedded');\n\t                    var insert = self.grid.get('insert');\n\t\n\t                    // request new configuration\n\t                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\t\n\t                    // update\n\t                    json.embedded = embedded;\n\t                    json.insert = insert;\n\t\n\t                    // Initialize new grid config\n\t                    self.init_grid(json);\n\t\n\t                    // Hide loading overlay.\n\t                    self.$el.find('.loading-elt-overlay').hide();\n\t                },\n\t                complete: function () {\n\t                    // Clear grid of transient request attributes.\n\t                    self.grid.set({\n\t                        operation: undefined,\n\t                        item_ids: undefined\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 12:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/** Base class for options based ui elements **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var Base = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                visible: true,\n\t                data: [],\n\t                id: Utils.uid(),\n\t                error_text: 'No options available.',\n\t                wait_text: 'Please wait...',\n\t                multiple: false,\n\t                optional: false,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.on('change', function () {\n\t                self.model.get('onchange')(self.value());\n\t            });\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.empty().removeClass().addClass('ui-options').append(this.$message = $('<div/>')).append(this.$menu = $('<div/>').addClass('ui-options-menu')).append(this.$options = $(this._template()));\n\t\n\t            // add select/unselect all button\n\t            this.all_button = null;\n\t            if (this.model.get('multiple')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        self.$('input').prop('checked', self.all_button.value() !== 0);\n\t                        self.value(self._getValue());\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$menu.append(this.all_button.$el);\n\t            }\n\t\n\t            // finalize dom\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.$options.empty();\n\t            if (this._templateOptions) {\n\t                this.$options.append(this._templateOptions(this.model.get('data')));\n\t            } else {\n\t                _.each(this.model.get('data'), function (option) {\n\t                    self.$options.append($(self._templateOption(option)).addClass('ui-option').tooltip({ title: option.tooltip, placement: 'bottom' }));\n\t                });\n\t            }\n\t            var self = this;\n\t            this.$('input').on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeValue();\n\t            this._changeWait();\n\t        },\n\t\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        _changeWait: function () {\n\t            if (this.model.get('wait')) {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('wait_text'), 'info');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                }\n\t            } else {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('error_text'), 'danger');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                } else {\n\t                    this.$message.hide();\n\t                    this.$options.css('display', 'inline-block');\n\t                    this.$menu.show();\n\t                }\n\t            }\n\t        },\n\t\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this._getValue() === null && !this.model.get('multiple') && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return first available option */\n\t        first: function () {\n\t            var options = this.$('input').first();\n\t            return options.length > 0 ? options.val() : null;\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns the number of options */\n\t        length: function () {\n\t            return this.$('.ui-option').length;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                if (new_value !== null) {\n\t                    var values = $.isArray(new_value) ? new_value : [new_value];\n\t                    _.each(values, function (v) {\n\t                        self.$('input[value=\"' + v + '\"]').first().prop('checked', true);\n\t                    });\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Return current selection */\n\t        _getValue: function () {\n\t            var selected = [];\n\t            this.$(':checked').each(function () {\n\t                selected.push($(this).val());\n\t            });\n\t            if (Utils.isEmpty(selected)) {\n\t                return null;\n\t            }\n\t            return this.model.get('multiple') ? selected : selected[0];\n\t        },\n\t\n\t        /** Show message instead if options */\n\t        _messageShow: function (text, status) {\n\t            this.$message.show().removeClass().addClass('ui-message alert alert-' + status).html(text);\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list');\n\t        }\n\t    });\n\t\n\t    /** Iconized **/\n\t    var BaseIcons = Base.extend({\n\t        _templateOption: function (pair) {\n\t            var id = Utils.uid();\n\t            return $('<div/>').addClass('ui-option').append($('<input/>').attr({\n\t                id: id,\n\t                type: this.model.get('type'),\n\t                name: this.model.id,\n\t                value: pair.value })).append($('<label/>').addClass('ui-options-label').attr('for', id).html(pair.label));\n\t        }\n\t    });\n\t\n\t    /** Radio button field **/\n\t    var Radio = {};\n\t    Radio.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'radio';\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Checkbox options field **/\n\t    var Checkbox = {};\n\t    Checkbox.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'checkbox';\n\t            options.multiple = true;\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Radio button options field styled as classic buttons **/\n\t    var RadioButton = {};\n\t    RadioButton.View = Base.extend({\n\t        initialize: function (options) {\n\t            Base.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set current value */\n\t        _setValue: function (new_value) {\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                this.$('label').removeClass('active');\n\t                this.$('[value=\"' + new_value + '\"]').prop('checked', true).closest('label').addClass('active');\n\t            }\n\t        },\n\t\n\t        /** Template for a single option */\n\t        _templateOption: function (pair) {\n\t            var $el = $('<label/>').addClass('btn btn-default');\n\t            pair.icon && $el.append($('<i/>').addClass('fa').addClass(pair.icon).addClass(!pair.label && 'no-padding'));\n\t            $el.append($('<input/>').attr({ type: 'radio', name: this.model.id, value: pair.value }));\n\t            pair.label && $el.append(pair.label);\n\t            return $el;\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('btn-group ui-radiobutton').attr('data-toggle', 'buttons');\n\t        }\n\t    });\n\t\n\t    return {\n\t        Base: Base,\n\t        BaseIcons: BaseIcons,\n\t        Radio: Radio,\n\t        RadioButton: RadioButton,\n\t        Checkbox: Checkbox\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 15:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    //jquery\n\t    //backbone\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    // =============================================================================\n\t    /**\n\t     * view for a popup menu\n\t     */\n\t    var PopupMenu = Backbone.View.extend({\n\t        //TODO: maybe better as singleton off the Galaxy obj\n\t        /** Cache the desired button element and options, set up the button click handler\n\t         *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n\t         */\n\t        initialize: function ($button, options) {\n\t            // default settings\n\t            this.$button = $button;\n\t            if (!this.$button.length) {\n\t                this.$button = $('<div/>');\n\t            }\n\t            this.options = options || [];\n\t            this.$button.data('popupmenu', this);\n\t\n\t            // set up button click -> open menu behavior\n\t            var menu = this;\n\t            this.$button.click(function (event) {\n\t                // if there's already a menu open, remove it\n\t                $('.popmenu-wrapper').remove();\n\t                menu._renderAndShow(event);\n\t                return false;\n\t            });\n\t        },\n\t\n\t        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n\t        _renderAndShow: function (clickEvent) {\n\t            this.render();\n\t            this.$el.appendTo('body').css(this._getShownPosition(clickEvent)).show();\n\t            this._setUpCloseBehavior();\n\t        },\n\t\n\t        // render the menu\n\t        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n\t        render: function () {\n\t            // render the menu body absolute and hidden, fill with template\n\t            this.$el.addClass('popmenu-wrapper').hide().css({ position: 'absolute' }).html(this.template(this.$button.attr('id'), this.options));\n\t\n\t            // set up behavior on each link/anchor elem\n\t            if (this.options.length) {\n\t                var menu = this;\n\t                //precondition: there should be one option per li\n\t                this.$el.find('li').each(function (i, li) {\n\t                    var option = menu.options[i];\n\t\n\t                    // if the option has 'func', call that function when the anchor is clicked\n\t                    if (option.func) {\n\t                        $(this).children('a.popupmenu-option').click(function (event) {\n\t                            option.func.call(menu, event, option);\n\t                            // We must preventDefault otherwise clicking \"cancel\"\n\t                            // on a purge or something still navigates and causes\n\t                            // the action.\n\t                            event.preventDefault();\n\t                            // bubble up so that an option click will call the close behavior\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t\n\t        template: function (id, options) {\n\t            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), '</ul>'].join('');\n\t        },\n\t\n\t        _templateOptions: function (options) {\n\t            if (!options.length) {\n\t                return '<li>(no options)</li>';\n\t            }\n\t            return _.map(options, function (option) {\n\t                if (option.divider) {\n\t                    return '<li class=\"divider\"></li>';\n\t                } else if (option.header) {\n\t                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>'].join('');\n\t                }\n\t                var href = option.href || 'javascript:void(0);',\n\t                    target = option.target ? ' target=\"' + option.target + '\"' : '',\n\t                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : '';\n\t                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>', check, option.html, '</a></li>'].join('');\n\t            }).join('');\n\t        },\n\t\n\t        // get the absolute position/offset for the menu\n\t        _getShownPosition: function (clickEvent) {\n\t\n\t            // display menu horiz. centered on click...\n\t            var menuWidth = this.$el.width();\n\t            var x = clickEvent.pageX - menuWidth / 2;\n\t\n\t            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n\t            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n\t            x = Math.max(x, $(document).scrollLeft() + 5);\n\t            return {\n\t                top: clickEvent.pageY,\n\t                left: x\n\t            };\n\t        },\n\t\n\t        // bind an event handler to all available frames so that when anything is clicked\n\t        // the menu is removed from the DOM and the event handler unbinds itself\n\t        _setUpCloseBehavior: function () {\n\t            var menu = this;\n\t            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\t\n\t            // function to close popup and unbind itself\n\t            function closePopup(event) {\n\t                $(document).off('click.close_popup');\n\t                if (window && window.parent !== window) {\n\t                    try {\n\t                        $(window.parent.document).off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                } else {\n\t                    try {\n\t                        $('iframe#galaxy_main').contents().off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                }\n\t                menu.remove();\n\t            }\n\t\n\t            $('html').one(\"click.close_popup\", closePopup);\n\t            if (window && window.parent !== window) {\n\t                try {\n\t                    $(window.parent.document).find('html').one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            } else {\n\t                try {\n\t                    $('iframe#galaxy_main').contents().one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            }\n\t        },\n\t\n\t        // add a menu option/item at the given index\n\t        addItem: function (item, index) {\n\t            // append to end if no index\n\t            index = index >= 0 ? index : this.options.length;\n\t            this.options.splice(index, 0, item);\n\t            return this;\n\t        },\n\t\n\t        // remove a menu option/item at the given index\n\t        removeItem: function (index) {\n\t            if (index >= 0) {\n\t                this.options.splice(index, 1);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findIndexByHtml: function (html) {\n\t            for (var i = 0; i < this.options.length; i++) {\n\t                if (_.has(this.options[i], 'html') && this.options[i].html === html) {\n\t                    return i;\n\t                }\n\t            }\n\t            return null;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findItemByHtml: function (html) {\n\t            return this.options[this.findIndexByHtml(html)];\n\t        },\n\t\n\t        // string representation\n\t        toString: function () {\n\t            return 'PopupMenu';\n\t        }\n\t    });\n\t    /** shortcut to new for when you don't need to preserve the ref */\n\t    PopupMenu.create = function _create($button, options) {\n\t        return new PopupMenu($button, options);\n\t    };\n\t\n\t    // -----------------------------------------------------------------------------\n\t    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n\t    // to the newer backbone.js PopupMenu\n\t\n\t    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n\t     *      Converts initial_options to object array used by PopupMenu.\n\t     *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n\t     *  @param {Object} initial_options map of key -> values, where\n\t     *      key is option text, value is fn to call when option is clicked\n\t     *  @returns {PopupMenu} the PopupMenu created\n\t     */\n\t    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n\t        var convertedOptions = [];\n\t        _.each(initial_options, function (optionVal, optionKey) {\n\t            var newOption = { html: optionKey };\n\t\n\t            // keys with null values indicate: header\n\t            if (optionVal === null) {\n\t                // !optionVal? (null only?)\n\t                newOption.header = true;\n\t\n\t                // keys with function values indicate: a menu option\n\t            } else if (jQuery.type(optionVal) === 'function') {\n\t                newOption.func = optionVal;\n\t            }\n\t            //TODO:?? any other special optionVals?\n\t            // there was no divider option originally\n\t            convertedOptions.push(newOption);\n\t        });\n\t        return new PopupMenu($(button_element), convertedOptions);\n\t    };\n\t\n\t    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n\t     *  @param {jQuery} $parent the element that contains the links to convert to options\n\t     *  @param {String} selector jq selector string to find links\n\t     *  @returns {Object[]} the options array to initialize a PopupMenu\n\t     */\n\t    //TODO: lose parent and selector, pass in array of links, use map to return options\n\t    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n\t        $parent = $($parent);\n\t        selector = selector || 'a';\n\t        var options = [];\n\t        $parent.find(selector).each(function (elem, i) {\n\t            var option = {},\n\t                $link = $(elem);\n\t\n\t            // convert link text to the option text (html) and the href into the option func\n\t            option.html = $link.text();\n\t            if ($link.attr('href')) {\n\t                var linkHref = $link.attr('href'),\n\t                    linkTarget = $link.attr('target'),\n\t                    confirmText = $link.attr('confirm');\n\t\n\t                option.func = function () {\n\t                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n\t                    //  if the user cancels - do nothing\n\t                    if (confirmText && !confirm(confirmText)) {\n\t                        return;\n\t                    }\n\t\n\t                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n\t                    switch (linkTarget) {\n\t                        // relocate the center panel\n\t                        case '_parent':\n\t                            window.parent.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate the entire window\n\t                        case '_top':\n\t                            window.top.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate this panel\n\t                        default:\n\t                            window.location = linkHref;\n\t                    }\n\t                };\n\t            }\n\t            options.push(option);\n\t        });\n\t        return options;\n\t    };\n\t\n\t    /** Create a single popupmenu from existing DOM button and anchor elements\n\t     *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n\t     *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n\t     *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n\t     *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n\t     */\n\t    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n\t        $buttonElement = $($buttonElement);\n\t        $menuElement = $($menuElement);\n\t        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n\t        // we're done with the menu (having converted it to an options map)\n\t        $menuElement.remove();\n\t        return new PopupMenu($buttonElement, options);\n\t    };\n\t\n\t    /** Create all popupmenus within a document or a more specific element\n\t     *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n\t     *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n\t     *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n\t     *      Will be passed $menuElement, parent.\n\t     *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n\t     *  @returns {PopupMenu[]} array of popupmenus created\n\t     */\n\t    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n\t        parent = parent || document;\n\t        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n\t        //  which contains the id of the button that activates the menu\n\t        menuSelector = menuSelector || 'div[popupmenu]';\n\t        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n\t        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n\t            return '#' + $menuElement.attr('popupmenu');\n\t        };\n\t\n\t        // aggregate and return all PopupMenus\n\t        var popupMenusCreated = [];\n\t        $(parent).find(menuSelector).each(function () {\n\t            var $menuElement = $(this),\n\t                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n\t            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n\t            $buttonElement.addClass('popup');\n\t        });\n\t        return popupMenusCreated;\n\t    };\n\t\n\t    // =============================================================================\n\t    return PopupMenu;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1), __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n\n/***/ 16:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class creates/wraps a default html select field as backbone class.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.data = [];\n\t            this.data2 = [];\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                cls: 'ui-select',\n\t                error_text: 'No options available',\n\t                empty_text: 'Nothing selected',\n\t                visible: true,\n\t                wait: false,\n\t                multiple: false,\n\t                searchable: true,\n\t                optional: false,\n\t                disabled: false,\n\t                onchange: function () {},\n\t                value: null,\n\t                selectall: true,\n\t                pagesize: 20\n\t            }).set(options);\n\t            this.on('change', function () {\n\t                self.model.get('onchange') && self.model.get('onchange')(self.value());\n\t            });\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:disabled', this._changeDisabled, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:multiple change:searchable change:cls change:id', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.model.get('searchable') ? this._renderSearchable() : this._renderClassic();\n\t            this.$el.addClass(this.model.get('cls')).attr('id', this.model.get('id'));\n\t            this.$select.empty().addClass('select').attr('id', this.model.get('id') + '_select').prop('multiple', this.model.get('multiple')).on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t            this._changeDisabled();\n\t        },\n\t\n\t        /** Renders the classic selection field */\n\t        _renderClassic: function () {\n\t            var self = this;\n\t            this.$el.addClass(this.model.get('multiple') ? 'ui-select-multiple' : 'ui-select').append(this.$select = $('<select/>')).append(this.$dropdown = $('<div/>')).append(this.$resize = $('<div/>').append(this.$resize_icon = $('<i/>')));\n\t            if (this.model.get('multiple')) {\n\t                this.$dropdown.hide();\n\t                this.$resize_icon.addClass('fa fa-angle-double-right fa-rotate-45').show();\n\t                this.$resize.removeClass().addClass('icon-resize').show().off('mousedown').on('mousedown', function (event) {\n\t                    var currentY = event.pageY;\n\t                    var currentHeight = self.$select.height();\n\t                    self.minHeight = self.minHeight || currentHeight;\n\t                    $('#dd-helper').show().on('mousemove', function (event) {\n\t                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n\t                    }).on('mouseup mouseleave', function () {\n\t                        $('#dd-helper').hide().off();\n\t                    });\n\t                });\n\t            } else {\n\t                this.$dropdown.show();\n\t                this.$resize.hide();\n\t                this.$resize_icon.hide();\n\t            }\n\t        },\n\t\n\t        /** Renders the default select2 field */\n\t        _renderSearchable: function () {\n\t            var self = this;\n\t            this.$el.append(this.$select = $('<div/>')).append(this.$dropdown = $('<div/>'));\n\t            this.$dropdown.hide();\n\t            if (!this.model.get('multiple')) {\n\t                this.$dropdown.show().on('click', function () {\n\t                    self.$select.select2 && self.$select.select2('open');\n\t                });\n\t            }\n\t            this.all_button = null;\n\t            if (this.model.get('multiple') && this.model.get('selectall')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        var new_value = [];\n\t                        self.all_button.value() !== 0 && _.each(self.model.get('data'), function (option) {\n\t                            new_value.push(option.value);\n\t                        });\n\t                        self.value(new_value);\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$el.prepend(this.all_button.$el);\n\t            }\n\t        },\n\t\n\t        /** Matches a search term with a given text */\n\t        _match: function (term, text) {\n\t            return !term || term == '' || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n\t        },\n\t\n\t        /** Updates the selection options */\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.data = [];\n\t            if (!this.model.get('multiple') && this.model.get('optional')) {\n\t                this.data.push({ value: '__null__', label: self.model.get('empty_text') });\n\t            }\n\t            _.each(this.model.get('data'), function (option) {\n\t                self.data.push(option);\n\t            });\n\t            if (this.length() == 0) {\n\t                this.data.push({ value: '__null__', label: this.model.get('error_text') });\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                this.data2 = [];\n\t                _.each(this.data, function (option, index) {\n\t                    self.data2.push({ order: index, id: option.value, text: option.label, tags: option.tags });\n\t                });\n\t                this.$select.data('select2') && this.$select.select2('destroy');\n\t                this.matched_tags = {};\n\t                this.$select.select2({\n\t                    data: self.data2,\n\t                    closeOnSelect: !this.model.get('multiple'),\n\t                    multiple: this.model.get('multiple'),\n\t                    query: function (q) {\n\t                        self.matched_tags = {};\n\t                        var pagesize = self.model.get('pagesize');\n\t                        var results = _.filter(self.data2, function (e) {\n\t                            var found = false;\n\t                            _.each(e.tags, function (tag) {\n\t                                if (self._match(q.term, tag)) {\n\t                                    found = self.matched_tags[tag] = true;\n\t                                }\n\t                            });\n\t                            return found || self._match(q.term, e.text);\n\t                        });\n\t                        q.callback({\n\t                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n\t                            more: results.length >= q.page * pagesize\n\t                        });\n\t                    },\n\t                    formatResult: function (result) {\n\t                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n\t                            if (self.matched_tags[tag]) {\n\t                                return memo + '&nbsp;' + '<div class=\"label label-info\">' + _.escape(tag) + '</div>';\n\t                            }\n\t                            return memo;\n\t                        }, '') + '</div>';\n\t                    }\n\t                });\n\t                this.$('.select2-container .select2-search input').off('blur');\n\t            } else {\n\t                this.$select.find('option').remove();\n\t                _.each(this.data, function (option) {\n\t                    self.$select.append($('<option/>').attr('value', option.value).html(_.escape(option.label)));\n\t                });\n\t            }\n\t            this.model.set('disabled', this.length() == 0);\n\t            this._changeValue();\n\t        },\n\t\n\t        /** Handles field enabling/disabling, usually used when no options are available */\n\t        _changeDisabled: function () {\n\t            if (this.model.get('searchable')) {\n\t                this.$select.select2(this.model.get('disabled') ? 'disable' : 'enable');\n\t            } else {\n\t                this.$select.prop('disabled', this.model.get('disabled'));\n\t            }\n\t        },\n\t\n\t        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n\t        _changeWait: function () {\n\t            this.$dropdown.removeClass().addClass('icon-dropdown fa').addClass(this.model.get('wait') ? 'fa-spinner fa-spin' : 'fa-caret-down');\n\t        },\n\t\n\t        /** Handles field visibility */\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            this.$select[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        /** Synchronizes the model value with the actually selected field value */\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this.model.get('multiple')) {\n\t                if (this.all_button) {\n\t                    var value = this._getValue();\n\t                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n\t                }\n\t            } else if (this._getValue() === null && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return the first select option */\n\t        first: function () {\n\t            return this.data.length > 0 ? this.data[0].value : null;\n\t        },\n\t\n\t        /** Check if a value is an existing option */\n\t        exists: function (value) {\n\t            return _.findWhere(this.data, { value: value });\n\t        },\n\t\n\t        /** Return the label/text of the current selection */\n\t        text: function () {\n\t            var v = this._getValue();\n\t            var d = this.exists($.isArray(v) ? v[0] : v);\n\t            return d ? d.label : '';\n\t        },\n\t\n\t        /** Show the select field */\n\t        show: function () {\n\t            this.model.set('visible', true);\n\t        },\n\t\n\t        /** Hide the select field */\n\t        hide: function () {\n\t            this.model.set('visible', false);\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns true if the field is disabled */\n\t        disabled: function () {\n\t            return this.model.get('disabled');\n\t        },\n\t\n\t        /** Enable the select field */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Disable the select field */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Update all available options at once */\n\t        add: function (options, sorter) {\n\t            _.each(this.model.get('data'), function (v) {\n\t                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n\t            });\n\t            sorter && options && options.sort(sorter);\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Set the custom onchange callback function */\n\t        setOnChange: function (callback) {\n\t            this.model.set('onchange', callback);\n\t        },\n\t\n\t        /** Number of available options */\n\t        length: function () {\n\t            return $.isArray(this.model.get('data')) ? this.model.get('data').length : 0;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value === null || new_value === undefined) {\n\t                new_value = '__null__';\n\t            }\n\t            if (this.model.get('multiple')) {\n\t                new_value = $.isArray(new_value) ? new_value : [new_value];\n\t            } else if ($.isArray(new_value)) {\n\t                if (new_value.length > 0) {\n\t                    new_value = new_value[0];\n\t                } else {\n\t                    new_value = '__null__';\n\t                }\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                if ($.isArray(new_value)) {\n\t                    val = [];\n\t                    _.each(new_value, function (v) {\n\t                        var d = _.findWhere(self.data2, { id: v });\n\t                        d && val.push(d);\n\t                    });\n\t                    new_value = val;\n\t                } else {\n\t                    var d = _.findWhere(this.data2, { id: new_value });\n\t                    new_value = d;\n\t                }\n\t                this.$select.select2('data', new_value);\n\t            } else {\n\t                this.$select.val(new_value);\n\t            }\n\t        },\n\t\n\t        /** Get value from dom */\n\t        _getValue: function () {\n\t            var val = null;\n\t            if (this.model.get('searchable')) {\n\t                var selected = this.$select.select2('data');\n\t                if (selected) {\n\t                    if ($.isArray(selected)) {\n\t                        val = [];\n\t                        selected.sort(function (a, b) {\n\t                            return a.order - b.order;\n\t                        });\n\t                        _.each(selected, function (v) {\n\t                            val.push(v.id);\n\t                        });\n\t                    } else {\n\t                        val = selected.id;\n\t                    }\n\t                }\n\t            } else {\n\t                val = this.$select.val();\n\t            }\n\t            return Utils.isEmpty(val) ? null : val;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\n\t    // grid model\n\t    return Backbone.Model.extend({\n\t        defaults: {\n\t            url_base: '',\n\t            async: false,\n\t            async_ops: [],\n\t            categorical_filters: [],\n\t            filters: {},\n\t            sort_key: null,\n\t            show_item_checkboxes: false,\n\t            advanced_search: false,\n\t            cur_page: 1,\n\t            num_pages: 1,\n\t            operation: undefined,\n\t            item_ids: undefined\n\t        },\n\t\n\t        /**\n\t         * Return true if operation can be done asynchronously.\n\t         */\n\t        can_async_op: function (op) {\n\t            return _.indexOf(this.attributes.async_ops, op) !== -1;\n\t        },\n\t\n\t        /**\n\t         * Add filtering criterion.\n\t         */\n\t        add_filter: function (key, value, append) {\n\t            // Update URL arg with new condition.            \n\t            if (append) {\n\t                // Update or append value.\n\t                var cur_val = this.attributes.filters[key],\n\t                    new_val;\n\t                if (cur_val === null || cur_val === undefined) {\n\t                    new_val = value;\n\t                } else if (typeof cur_val == 'string') {\n\t                    if (cur_val == 'All') {\n\t                        new_val = value;\n\t                    } else {\n\t                        // Replace string with array.\n\t                        var values = [];\n\t                        values[0] = cur_val;\n\t                        values[1] = value;\n\t                        new_val = values;\n\t                    }\n\t                } else {\n\t                    // Current value is an array.\n\t                    new_val = cur_val;\n\t                    new_val.push(value);\n\t                }\n\t                this.attributes.filters[key] = new_val;\n\t            } else {\n\t                // Replace value.\n\t                this.attributes.filters[key] = value;\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Remove filtering criterion.\n\t         */\n\t        remove_filter: function (key, condition) {\n\t            var cur_val = this.attributes.filters[key];\n\t            if (cur_val === null || cur_val === undefined) {\n\t                return false;\n\t            }\n\t\n\t            if (typeof cur_val === 'string') {\n\t                // overwrite/remove condition.\n\t                this.attributes.filters[key] = '';\n\t            } else {\n\t                // filter contains an array of conditions.\n\t                var condition_index = _.indexOf(cur_val, condition);\n\t                if (condition_index !== -1) {\n\t                    cur_val[condition_index] = '';\n\t                }\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Returns URL data for obtaining a new grid.\n\t         */\n\t        get_url_data: function () {\n\t            var url_data = {\n\t                async: this.attributes.async,\n\t                sort: this.attributes.sort_key,\n\t                page: this.attributes.cur_page,\n\t                show_item_checkboxes: this.attributes.show_item_checkboxes,\n\t                advanced_search: this.attributes.advanced_search\n\t            };\n\t\n\t            // Add operation, item_ids only if they have values.\n\t            if (this.attributes.operation) {\n\t                url_data.operation = this.attributes.operation;\n\t            }\n\t            if (this.attributes.item_ids) {\n\t                url_data.id = this.attributes.item_ids;\n\t            }\n\t\n\t            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n\t            var self = this;\n\t            _.each(_.pairs(self.attributes.filters), function (k) {\n\t                url_data['f-' + k[0]] = k[1];\n\t            });\n\t            return url_data;\n\t        },\n\t\n\t        // Return URL for obtaining a new grid\n\t        get_url: function (args) {\n\t            return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n\t        }\n\t\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t\n\t    // grid view templates\n\t    return {\n\t        // template\n\t        grid: function (options) {\n\t            var tmpl = '';\n\t            if (options.embedded) {\n\t                tmpl = this.grid_header(options) + this.grid_table(options);\n\t            } else {\n\t                tmpl = '<div class=\"loading-elt-overlay\"></div>' + '<table>' + '<tr>' + '<td width=\"75%\">' + this.grid_header(options) + '</td>' + '<td></td>' + '<td></td>' + '</tr>' + '<tr>' + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + '<td></td>' + '<td></td>' + '</tr>' + '</table>' + this.grid_table(options);\n\t            }\n\t\n\t            // add info text\n\t            if (options.info_text) {\n\t                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_table: function (options) {\n\t            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + '</table>' + '</form>';\n\t        },\n\t\n\t        // template\n\t        grid_header: function (options) {\n\t            var tmpl = '<div class=\"grid-header\">';\n\t            if (!options.embedded) {\n\t                tmpl += '<h2>' + options.title + '</h2>';\n\t            }\n\t            if (options.global_actions) {\n\t                tmpl += '<ul class=\"manage-table-actions\">';\n\t                var show_popup = options.global_actions.length >= 3;\n\t                if (show_popup) {\n\t                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n\t                }\n\t                for (i in options.global_actions) {\n\t                    var action = options.global_actions[i];\n\t                    tmpl += '<li>' + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' + '</li>';\n\t                }\n\t                if (show_popup) {\n\t                    tmpl += '</div>';\n\t                }\n\t                tmpl += '</ul>';\n\t            }\n\t            if (options.insert) {\n\t                tmpl += options.insert;\n\t            }\n\t\n\t            // add grid filters\n\t            tmpl += this.grid_filters(options);\n\t            tmpl += '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        header: function (options) {\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            // add checkbox\n\t            if (options.show_item_checkboxes) {\n\t                tmpl += '<th>';\n\t                if (options.items.length > 0) {\n\t                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n\t                }\n\t                tmpl += '</th>';\n\t            }\n\t\n\t            // create header elements\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.visible) {\n\t                    tmpl += '<th id=\"' + column.key + '-header\">';\n\t                    if (column.href) {\n\t                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n\t                    } else {\n\t                        tmpl += column.label;\n\t                    }\n\t                    tmpl += '<span class=\"sort-arrow\">' + column.extra + '</span>' + '</th>';\n\t                }\n\t            }\n\t\n\t            // finalize\n\t            tmpl += '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        body: function (options) {\n\t            // initialize\n\t            var tmpl = '';\n\t            var num_rows_rendered = 0;\n\t            var items_length = options.items.length;\n\t\n\t            // empty grid?\n\t            if (items_length == 0) {\n\t                // No results.\n\t                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n\t                num_rows_rendered = 1;\n\t            }\n\t\n\t            // create rows\n\t            for (var i in options.items) {\n\t\n\t                // encode ids\n\t                var item = options.items[i];\n\t                var encoded_id = item.encode_id;\n\t                var popupmenu_id = 'grid-' + i + '-popup';\n\t\n\t                // Tag current\n\t                tmpl += '<tr ';\n\t                if (options.current_item_id == item.id) {\n\t                    tmpl += 'class=\"current\"';\n\t                }\n\t                tmpl += '>';\n\t\n\t                // Item selection column\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + '</td>';\n\t                }\n\t\n\t                // Data columns\n\t                for (j in options.columns) {\n\t                    var column = options.columns[j];\n\t                    if (column.visible) {\n\t                        // Nowrap\n\t                        var nowrap = '';\n\t                        if (column.nowrap) {\n\t                            nowrap = 'style=\"white-space:nowrap;\"';\n\t                        }\n\t\n\t                        // get column settings\n\t                        var column_settings = item.column_config[column.label];\n\t\n\t                        // load attributes\n\t                        var link = column_settings.link;\n\t                        var value = column_settings.value;\n\t                        var target = column_settings.target;\n\t\n\t                        // unescape value\n\t                        if (jQuery.type(value) === 'string') {\n\t                            value = value.replace(/\\/\\//g, '/');\n\t                        }\n\t\n\t                        // Attach popup menu?\n\t                        var id = '';\n\t                        var cls = '';\n\t                        if (column.attach_popup) {\n\t                            id = 'grid-' + i + '-popup';\n\t                            cls = 'menubutton';\n\t                            if (link != '') {\n\t                                cls += ' split';\n\t                            }\n\t                            cls += ' popup';\n\t                        }\n\t\n\t                        // Check for row wrapping\n\t                        tmpl += '<td ' + nowrap + '>';\n\t\n\t                        // Link\n\t                        if (link) {\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n\t                            }\n\t                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '</div>';\n\t                            }\n\t                        } else {\n\t                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n\t                        }\n\t                        tmpl += '</td>';\n\t                    }\n\t                }\n\t                tmpl += '</tr>';\n\t                num_rows_rendered++;\n\t            }\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        footer: function (options) {\n\t\n\t            // create template string\n\t            var tmpl = '';\n\t\n\t            // paging\n\t            if (options.use_paging && options.num_pages > 1) {\n\t                // get configuration\n\t                var num_page_links = options.num_page_links;\n\t                var cur_page_num = options.cur_page_num;\n\t                var num_pages = options.num_pages;\n\t\n\t                // First pass on min page.\n\t                var page_link_range = num_page_links / 2;\n\t                var min_page = cur_page_num - page_link_range;\n\t                var min_offset = 0;\n\t                if (min_page <= 0) {\n\t                    // Min page is too low.\n\t                    min_page = 1;\n\t                    min_offset = page_link_range - (cur_page_num - min_page);\n\t                }\n\t\n\t                // Set max page.\n\t                var max_range = page_link_range + min_offset;\n\t                var max_page = cur_page_num + max_range;\n\t                if (max_page <= num_pages) {\n\t                    // Max page is fine.\n\t                    max_offset = 0;\n\t                } else {\n\t                    // Max page is too high.\n\t                    max_page = num_pages;\n\t                    // +1 to account for the +1 in the loop below.\n\t                    max_offset = max_range - (max_page + 1 - cur_page_num);\n\t                }\n\t\n\t                // Second and final pass on min page to add any unused\n\t                // offset from max to min.\n\t                if (max_offset != 0) {\n\t                    min_page -= max_offset;\n\t                    if (min_page < 1) {\n\t                        min_page = 1;\n\t                    }\n\t                }\n\t\n\t                // template header\n\t                tmpl += '<tr id=\"page-links-row\">';\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td></td>';\n\t                }\n\t                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + 'Page:';\n\t\n\t                if (min_page > 1) {\n\t                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n\t                }\n\t\n\t                // create page urls\n\t                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n\t\n\t                    if (page_index == options.cur_page_num) {\n\t                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n\t                    }\n\t                }\n\t\n\t                // show last page\n\t                if (max_page < num_pages) {\n\t                    tmpl += '...' + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n\t                }\n\t                tmpl += '</span>';\n\t\n\t                // Show all link\n\t                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + '</td>' + '</tr>';\n\t            }\n\t\n\t            // Grid operations for multiple items.\n\t            if (options.show_item_checkboxes) {\n\t                // start template\n\t                tmpl += '<tr>' + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + '<td></td>' + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\t\n\t                // configure buttons for operations\n\t                for (i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.allow_multiple) {\n\t                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n\t                    }\n\t                }\n\t\n\t                // finalize template\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // count global operations\n\t            var found_global = false;\n\t            for (i in options.operations) {\n\t                if (options.operations[i].global_operation) {\n\t                    found_global = true;\n\t                    break;\n\t                }\n\t            }\n\t\n\t            // add global operations\n\t            if (found_global) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">';\n\t                for (i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.global_operation) {\n\t                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n\t                    }\n\t                }\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // add legend\n\t            if (options.legend) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">' + options.legend + '</td>' + '</tr>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        message: function (options) {\n\t            return '<p>' + '<div class=\"' + options.status + 'message transient-message\">' + options.message + '</div>' + '<div style=\"clear: both\"></div>' + '</p>';\n\t        },\n\t\n\t        // template\n\t        grid_filters: function (options) {\n\t\n\t            // get filters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t\n\t            // show advanced search if flag set or if there are filters for advanced search fields\n\t            var advanced_search_display = 'none';\n\t            if (options.advanced_search) {\n\t                advanced_search_display = 'block';\n\t            }\n\t\n\t            // identify columns with advanced filtering\n\t            var show_advanced_search_link = false;\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    var column_key = column.key;\n\t                    var f_key = filters[column_key];\n\t                    var d_key = default_filter_dict[column_key];\n\t                    if (f_key && d_key && f_key != d_key) {\n\t                        advanced_search_display = 'block';\n\t                    }\n\t                    show_advanced_search_link = true;\n\t                }\n\t            }\n\t\n\t            // hide standard search if advanced is shown\n\t            var standard_search_display = 'block';\n\t            if (advanced_search_display == 'block') {\n\t                standard_search_display = 'none';\n\t            }\n\t\n\t            //\n\t            // standard search\n\t            //\n\t            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + '<table>' + '<tr>' + '<td style=\"padding: 0;\">' + '<table>';\n\t\n\t            // add standard filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'standard') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize standard search\n\t            tmpl += '</table>' + '</td>' + '</tr>' + '<tr>' + '<td>';\n\t\n\t            // show advanced search link in standard display\n\t            if (show_advanced_search_link) {\n\t                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n\t            }\n\t\n\t            // finalize standard search display\n\t            tmpl += '</td>' + '</tr>' + '</table>' + '</div>';\n\t\n\t            //\n\t            // advanced search\n\t            //\n\t            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + '<table>' + '<tr>' + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + '</td>' + '</tr>';\n\t\n\t            // add advanced filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize advanced search template\n\t            tmpl += '</table>' + '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_column_filter: function (options, column) {\n\t\n\t            // collect parameters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t            var column_label = column.label;\n\t            var column_key = column.key;\n\t            if (column.filterable == 'advanced') {\n\t                column_label = column_label.toLowerCase();\n\t            }\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            if (column.filterable == 'advanced') {\n\t                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n\t            }\n\t            tmpl += '<td style=\"padding-bottom: 1px;\">';\n\t            if (column.is_text) {\n\t                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n\t                // Carry forward filtering criteria with hidden inputs.\n\t                for (i in options.columns) {\n\t                    var temp_column = options.columns[i];\n\t                    var filter_value = filters[temp_column.key];\n\t                    if (filter_value) {\n\t                        if (filter_value != 'All') {\n\t                            if (temp_column.is_text) {\n\t                                filter_value = JSON.stringify(filter_value);\n\t                            }\n\t                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n\t                        }\n\t                    }\n\t                }\n\t                // Print current filtering criteria and links to delete.\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add filters\n\t                var column_filter = filters[column_key];\n\t                if (column_filter) {\n\t                    // identify type\n\t                    var type = jQuery.type(column_filter);\n\t\n\t                    // single filter value\n\t                    if (type == 'string') {\n\t                        if (column_filter != 'All') {\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, column_filter);\n\t                        }\n\t                    }\n\t\n\t                    // multiple filter values\n\t                    if (type == 'array') {\n\t                        for (var i in column_filter) {\n\t                            // get filter\n\t                            var filter = column_filter[i];\n\t\n\t                            // copy filters and remove entry\n\t                            var params = column_filter;\n\t                            params = params.slice(i);\n\t\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, filter);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // close span\n\t                tmpl += '</span>';\n\t\n\t                // Set value, size of search input field. Minimum size is 20 characters.\n\t                var value = '';\n\t                if (column.filterable == 'standard') {\n\t                    value = column.label.toLowerCase();\n\t                    var size = value.length;\n\t                    if (size < 20) {\n\t                        size = 20;\n\t                    }\n\t                    // +4 to account for space after placeholder\n\t                    size = size + 4;\n\t                }\n\t\n\t                // print input field for column\n\t                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + '</button>' + '</span>' + '</form>';\n\t            } else {\n\t                // filter criteria\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add category filters\n\t                var seperator = false;\n\t                for (cf_label in options.categorical_filters[column_key]) {\n\t                    // get category filter\n\t                    var cf = options.categorical_filters[column_key][cf_label];\n\t\n\t                    // each filter will have only a single argument, so get that single argument\n\t                    var cf_key = '';\n\t                    var cf_arg = '';\n\t                    for (key in cf) {\n\t                        cf_key = key;\n\t                        cf_arg = cf[key];\n\t                    }\n\t\n\t                    // add seperator\n\t                    if (seperator) {\n\t                        tmpl += ' | ';\n\t                    }\n\t                    seperator = true;\n\t\n\t                    // add category\n\t                    var filter = filters[column_key];\n\t                    if (filter && cf[column_key] && filter == cf_arg) {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' + '</span>';\n\t                    }\n\t                }\n\t                tmpl += '</span>';\n\t            }\n\t            tmpl += '</td>' + '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template for filter items\n\t        filter_element: function (filter_key, filter_value) {\n\t            filter_value = Utils.sanitize(filter_value);\n\t            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + '</a>' + '</span>';\n\t        }\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($, _) {/** This class creates/wraps a drill down element. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n\t\n\t    var View = Options.BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = options.display || 'checkbox';\n\t            options.multiple = options.type == 'checkbox';\n\t            Options.BaseIcons.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set states for selected values */\n\t        _setValue: function (new_value) {\n\t            Options.BaseIcons.prototype._setValue.call(this, new_value);\n\t            if (new_value !== undefined && new_value !== null && this.header_index) {\n\t                var self = this;\n\t                var values = $.isArray(new_value) ? new_value : [new_value];\n\t                _.each(values, function (v) {\n\t                    var list = self.header_index[v];\n\t                    _.each(list, function (element) {\n\t                        self._setState(element, true);\n\t                    });\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Expand/collapse a sub group */\n\t        _setState: function (header_id, is_expanded) {\n\t            var $button = this.$('.button-' + header_id);\n\t            var $subgroup = this.$('.subgroup-' + header_id);\n\t            $button.data('is_expanded', is_expanded);\n\t            if (is_expanded) {\n\t                $subgroup.show();\n\t                $button.removeClass('fa-plus-square').addClass('fa-minus-square');\n\t            } else {\n\t                $subgroup.hide();\n\t                $button.removeClass('fa-minus-square').addClass('fa-plus-square');\n\t            }\n\t        },\n\t\n\t        /** Template to create options tree */\n\t        _templateOptions: function () {\n\t            var self = this;\n\t            this.header_index = {};\n\t\n\t            // attach event handler\n\t            function attach($el, header_id) {\n\t                var $button = $el.find('.button-' + header_id);\n\t                $button.on('click', function () {\n\t                    self._setState(header_id, !$button.data('is_expanded'));\n\t                });\n\t            }\n\t\n\t            // recursive function which iterates through options\n\t            function iterate($tmpl, options, header) {\n\t                header = header || [];\n\t                for (i in options) {\n\t                    var level = options[i];\n\t                    var has_options = level.options && level.options.length > 0;\n\t                    var new_header = header.slice(0);\n\t                    self.header_index[level.value] = new_header.slice(0);\n\t                    var $group = $('<div/>');\n\t                    if (has_options) {\n\t                        var header_id = Utils.uid();\n\t                        var $button = $('<span/>').addClass('button-' + header_id).addClass('ui-drilldown-button fa fa-plus-square');\n\t                        var $subgroup = $('<div/>').addClass('subgroup-' + header_id).addClass('ui-drilldown-subgroup');\n\t                        $group.append($('<div/>').append($button).append(self._templateOption({ label: level.name, value: level.value })));\n\t                        new_header.push(header_id);\n\t                        iterate($subgroup, level.options, new_header);\n\t                        $group.append($subgroup);\n\t                        attach($group, header_id);\n\t                    } else {\n\t                        $group.append(self._templateOption({ label: level.name, value: level.value }));\n\t                    }\n\t                    $tmpl.append($group);\n\t                }\n\t            }\n\t\n\t            // iterate through options and create dom\n\t            var $tmpl = $('<div/>');\n\t            iterate($tmpl, this.model.get('data'));\n\t            return $tmpl;\n\t        },\n\t\n\t        /** Template for drill down view */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list drilldown-container').attr('id', this.model.id);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 29:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                min: null,\n\t                max: null,\n\t                step: null,\n\t                precise: false,\n\t                split: 10000,\n\t                value: null,\n\t                onchange: function () {}\n\t            }).set(options);\n\t\n\t            // create new element\n\t            this.setElement(this._template());\n\t            this.$el.attr('id', this.model.id);\n\t            this.$text = this.$('.ui-form-slider-text');\n\t            this.$slider = this.$('.ui-form-slider-element');\n\t\n\t            // add text field event\n\t            var pressed = [];\n\t            this.$text.on('change', function () {\n\t                self.value($(this).val());\n\t            }).on('keyup', function (e) {\n\t                pressed[e.which] = false;\n\t            }).on('keydown', function (e) {\n\t                var v = e.which;\n\t                pressed[v] = true;\n\t                if (self.model.get('is_workflow') && pressed[16] && v == 52) {\n\t                    self.value('$');\n\t                    event.preventDefault();\n\t                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf('.') == -1 && self.model.get('precise') || (v == 189 || v == 109) && $(this).val().indexOf('-') == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n\t                    event.preventDefault();\n\t                }\n\t            });\n\t\n\t            // build slider, cannot be rebuild in render\n\t            var opts = this.model.attributes;\n\t            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n\t            var step = opts.step;\n\t            if (!step) {\n\t                if (opts.precise && this.has_slider) {\n\t                    step = (opts.max - opts.min) / opts.split;\n\t                } else {\n\t                    step = 1.0;\n\t                }\n\t            }\n\t            if (this.has_slider) {\n\t                this.$text.addClass('ui-form-slider-left');\n\t                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on('slide', function (event, ui) {\n\t                    self.value(ui.value);\n\t                });\n\t            } else {\n\t                this.$slider.hide();\n\t            }\n\t\n\t            // add listeners\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var value = this.model.get('value');\n\t            this.has_slider && this.$slider.slider('value', value);\n\t            value !== this.$text.val() && this.$text.val(value);\n\t        },\n\t\n\t        /** Set and return the current value */\n\t        value: function (new_val) {\n\t            var options = this.model.attributes;\n\t            if (new_val !== undefined) {\n\t                if (new_val !== null && new_val !== '' && !this._isParameter(new_val)) {\n\t                    isNaN(new_val) && (new_val = 0);\n\t                    !options.precise && (new_val = Math.round(new_val));\n\t                    options.max !== null && (new_val = Math.min(new_val, options.max));\n\t                    options.min !== null && (new_val = Math.max(new_val, options.min));\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.trigger('change');\n\t                options.onchange(new_val);\n\t            }\n\t            return this.model.get('value');\n\t        },\n\t\n\t        /** Return true if the field contains a workflow parameter i.e. $('name') */\n\t        _isParameter: function (value) {\n\t            return this.model.get('is_workflow') && String(value).substring(0, 1) === '$';\n\t        },\n\t\n\t        /** Slider template */\n\t        _template: function () {\n\t            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n\n/***/ 43:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    QUERY_STRING = __webpack_require__(38),\n\t    Ui = __webpack_require__(7);\n\t\n\tvar Router = Backbone.Router.extend({\n\t    // TODO: not many client routes at this point - fill and remove from server.\n\t    // since we're at root here, this may be the last to be routed entirely on the client.\n\t    initialize: function (page, options) {\n\t        this.page = page;\n\t        this.options = options;\n\t    },\n\t\n\t    /** helper to push a new navigation state */\n\t    push: function (url, data) {\n\t        data = data || {};\n\t        data.__identifer = Math.random().toString(36).substr(2);\n\t        if (!$.isEmptyObject(data)) {\n\t            url += url.indexOf('?') == -1 ? '?' : '&';\n\t            url += $.param(data, true);\n\t        }\n\t        this.navigate(url, { 'trigger': true });\n\t    },\n\t\n\t    /** override to parse query string into obj and send to each route */\n\t    execute: function (callback, args, name) {\n\t        Galaxy.debug('router execute:', callback, args, name);\n\t        var queryObj = QUERY_STRING.parse(args.pop());\n\t        args.push(queryObj);\n\t        if (callback) {\n\t            if (this.authenticate(args, name)) {\n\t                callback.apply(this, args);\n\t            } else {\n\t                this.access_denied();\n\t            }\n\t        }\n\t    },\n\t\n\t    authenticate: function (args, name) {\n\t        return true;\n\t    },\n\t\n\t    access_denied: function () {\n\t        this.page.display(new Ui.Message({ status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true }));\n\t    }\n\t});\n\t\n\tmodule.exports = Router;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n\n/***/ 99:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var _l = __webpack_require__(5);\n\t\n\tvar AdminPanel = Backbone.View.extend({\n\t    initialize: function (page, options) {\n\t        var self = this;\n\t        this.page = page;\n\t        this.root = options.root;\n\t        this.config = options.config;\n\t        this.settings = options.settings;\n\t        this.message = options.message;\n\t        this.status = options.status;\n\t        this.model = new Backbone.Model({\n\t            title: _l('Administration')\n\t        });\n\t        this.categories = new Backbone.Collection([{\n\t            title: 'Server',\n\t            items: [{\n\t                title: 'Data types registry',\n\t                url: 'admin/view_datatypes_registry'\n\t            }, {\n\t                title: 'Data tables registry',\n\t                url: 'admin/view_tool_data_tables'\n\t            }, {\n\t                title: 'Display applications',\n\t                url: 'admin/display_applications'\n\t            }, {\n\t                title: 'Manage jobs',\n\t                url: 'admin/jobs'\n\t            }]\n\t        }, {\n\t            title: 'Tools and Tool Shed',\n\t            items: [{\n\t                title: 'Search Tool Shed',\n\t                url: 'admin_toolshed/browse_tool_sheds',\n\t                enabled: self.settings.is_tool_shed_installed\n\t            }, {\n\t                title: 'Search Tool Shed (Beta)',\n\t                url: 'admin_toolshed/browse_toolsheds',\n\t                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n\t            }, {\n\t                title: 'Monitor installing repositories',\n\t                url: 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n\t                enabled: self.settings.installing_repository_ids\n\t            }, {\n\t                title: 'Manage installed tools',\n\t                url: 'admin_toolshed/browse_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Reset metadata',\n\t                url: 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Download local tool',\n\t                url: 'admin/package_tool'\n\t            }, {\n\t                title: 'Tool lineage',\n\t                url: 'admin/tool_versions'\n\t            }, {\n\t                title: 'Reload a tool\\'s configuration',\n\t                url: 'admin/reload_tool'\n\t            }, {\n\t                title: 'Review tool migration stages',\n\t                url: 'admin/review_tool_migration_stages'\n\t            }, {\n\t                title: 'View Tool Error Logs',\n\t                url: 'admin/tool_errors'\n\t            }, {\n\t                title: 'Manage Display Whitelist',\n\t                url: 'admin/sanitize_whitelist'\n\t            }, {\n\t                title: 'Manage Tool Dependencies',\n\t                url: 'admin/manage_tool_dependencies'\n\t            }]\n\t        }, {\n\t            title: 'User Management',\n\t            items: [{\n\t                title: 'Users',\n\t                url: 'admin/users',\n\t                target: 'top'\n\t            }, {\n\t                title: 'Groups',\n\t                url: 'admin/groups'\n\t            }, {\n\t                title: 'Roles',\n\t                url: 'admin/roles'\n\t            }, {\n\t                title: 'API keys',\n\t                url: 'userskeys/all_users'\n\t            }, {\n\t                title: 'Impersonate a user',\n\t                url: 'admin/impersonate',\n\t                enabled: self.config.allow_user_impersonation\n\t            }]\n\t        }, {\n\t            title: 'Data',\n\t            items: [{\n\t                title: 'Quotas',\n\t                url: 'admin/quotas',\n\t                enabled: self.config.enable_quotas\n\t            }, {\n\t                title: 'Data libraries',\n\t                url: 'library_admin/browse_libraries'\n\t            }, {\n\t                title: 'Roles',\n\t                url: 'admin/roles'\n\t            }, {\n\t                title: 'Local data',\n\t                url: 'data_manager'\n\t            }]\n\t        }, {\n\t            title: 'Form Definitions',\n\t            items: [{\n\t                title: 'Form definitions',\n\t                url: 'forms/browse_form_definitions'\n\t            }]\n\t        }, {\n\t            title: 'Sample Tracking',\n\t            items: [{\n\t                title: 'Sequencers and external services',\n\t                url: 'external_service/browse_external_services'\n\t            }, {\n\t                title: 'Request types',\n\t                url: 'request_type/browse_request_types'\n\t            }, {\n\t                title: 'Sequencing requests',\n\t                url: 'requests_admin/browse_requests'\n\t            }, {\n\t                title: 'Find samples',\n\t                url: 'requests_common/find_samples?cntrller=requests_admin'\n\t            }]\n\t        }]);\n\t        this.setElement(this._template());\n\t    },\n\t\n\t    render: function () {\n\t        var self = this;\n\t        this.$el.empty();\n\t        this.categories.each(function (category) {\n\t            var $section = $(self._templateSection(category.attributes));\n\t            var $entries = $section.find('.ui-side-section-body');\n\t            _.each(category.get('items'), function (item) {\n\t                if (item.enabled === undefined || item.enabled) {\n\t                    $entries.append($('<div/>').addClass('ui-side-section-body-title').append($('<a/>').attr({\n\t                        href: self.root + item.url,\n\t                        target: item.target || 'galaxy_main' }).text(_l(item.title))));\n\t                }\n\t            });\n\t            self.$el.append($section);\n\t        });\n\t        this.page.$('#galaxy_main').prop('src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status);\n\t    },\n\t\n\t    _templateSection: function (options) {\n\t        return ['<div>', '<div class=\"ui-side-section-title\">' + _l(options.title) + '</div>', '<div class=\"ui-side-section-body\"/>', '</div>'].join('');\n\t    },\n\t\n\t    _template: function () {\n\t        return '<div class=\"ui-side-panel\"/>';\n\t    },\n\t\n\t    toString: function () {\n\t        return 'adminPanel';\n\t    }\n\t});\n\t\n\tmodule.exports = AdminPanel;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)))\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    GalaxyApp = require( 'galaxy' ).GalaxyApp,\n    AdminPanel = require( './panels/admin-panel' ),\n    GridView = require( 'mvc/grid/grid-view' ),\n    Ui = require( 'mvc/ui/ui-misc' ),\n    Router = require( 'layout/router' ),\n    Page = require( 'layout/page' );\n\nwindow.app = function app( options, bootstrapped ){\n    window.Galaxy = new GalaxyApp( options, bootstrapped );\n    Galaxy.debug( 'admin app' );\n    Galaxy.params = Galaxy.config.params;\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            '(/)admin(/)users' : 'show_users'\n        },\n\n        authenticate: function( args, name ) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get( 'is_admin' );\n        },\n\n        show_users: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/users_list', dict_format: true } ) );\n        }\n    });\n\n    $(function() {\n        _.extend( options.config, { active_view : 'admin' } );\n        Galaxy.page = new Page.View( _.extend( options, {\n            Left    : AdminPanel,\n            Router  : AdminRouter\n        } ) );\n    });\n};\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(['utils/utils',\n    'mvc/ui/ui-select-default',\n    'mvc/ui/ui-slider',\n    'mvc/ui/ui-options',\n    'mvc/ui/ui-drilldown',\n    'mvc/ui/ui-buttons',\n    'mvc/ui/ui-modal'],\n    function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.tagName = options.tagName || this.tagName;\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        title: function( new_title ) {\n            this.model.set( 'title', new_title );\n        },\n        value: function() {\n            return this.model.get( 'title' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-label' )\n                    .addClass( this.model.get( 'cls' ) )\n                    .html( this.model.get( 'title' ) );\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                message     : null,\n                status      : 'info',\n                cls         : '',\n                persistent  : false,\n                fade        : true\n            }).set( options );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        update: function( options ) {\n            this.model.set( options );\n        },\n        render: function() {\n            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n            var status = this.model.get( 'status' );\n            if ( this.model.get( 'large' ) ) {\n                this.$el.addClass((( status == 'success' && 'done' ) ||\n                                   ( status == 'danger' && 'error' ) ||\n                                     status ) + 'messagelarge' );\n            } else {\n                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n            }\n            if ( this.model.get( 'message' ) ) {\n                this.$el.html( this.messageForDisplay() );\n                this.$el[ this.model.get( 'fade' ) ? 'fadeIn' : 'show' ]();\n                this.timeout && window.clearTimeout( this.timeout );\n                if ( !this.model.get( 'persistent' ) ) {\n                    var self = this;\n                    this.timeout = window.setTimeout( function() {\n                        self.model.set( 'message', '' );\n                    }, 3000 );\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function() {\n            return _.escape( this.model.get( 'message' ) );\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function() {\n            return this.model.get( 'message' );\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                type            : 'text',\n                placeholder     : '',\n                disabled        : false,\n                readonly        : false,\n                visible         : true,\n                cls             : '',\n                area            : false,\n                color           : null,\n                style           : null\n            }).set( options );\n            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            var self = this;\n            this.$el.removeClass()\n                    .addClass( 'ui-' + this.tagName )\n                    .addClass( this.model.get( 'cls' ) )\n                    .addClass( this.model.get( 'style' ) )\n                    .attr( 'id', this.model.id )\n                    .attr( 'type', this.model.get( 'type' ) )\n                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n                    .css( 'color', this.model.get( 'color' ) || '' )\n                    .css( 'border-color', this.model.get( 'color' ) || '' );\n            var datalist = this.model.get( 'datalist' );\n            if ( $.isArray( datalist ) && datalist.length > 0 ) {\n                this.$el.autocomplete( { source : function( request, response ) { response( self.model.get( 'datalist' ) ) },\n                                         change : function() { self._onchange() } } );\n            }\n            if ( this.model.get( 'value' ) !== this.$el.val() ) {\n                this.$el.val( this.model.get( 'value' ) );\n            }\n            _.each( [ 'readonly', 'disabled' ], function( attr_name ) {\n                self.model.get( attr_name ) ? self.$el.attr( attr_name, true ) : self.$el.removeAttr( attr_name );\n            });\n            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n            return this;\n        },\n        _onchange: function() {\n            this.value( this.$el.val() );\n            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$hidden = $( '<div/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.$hidden.val( this.model.get( 'value' ) );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$file = $( '<input/>' ).attr( 'type', 'file' ).addClass( 'ui-margin-bottom' ) )\n                                           .append( this.$text = $( '<textarea/>' ).addClass( 'ui-textarea' ).attr( 'disabled', true ) )\n                                           .append( this.$wait = $( '<i/>' ).addClass( 'fa fa-spinner fa-spin' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.$file.on( 'change', function( e ) { self._readFile( e ) } );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            this.model.get( 'value' ) ? this.$text.text( this.model.get( 'value' ) ).show() : this.$text.hide();\n            this.model.get( 'wait' ) ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function( e ) {\n            var self = this;\n            var file = e.target.files && e.target.files[ 0 ];\n            if ( file ) {\n                var reader = new FileReader();\n                reader.onload = function() {\n                    self.model.set( { wait: false, value: this.result } );\n                }\n                this.model.set( { wait: true, value: null } );\n                reader.readAsText( file );\n            }\n        }\n    });\n\n    return {\n        Button           : Buttons.ButtonDefault,\n        ButtonIcon       : Buttons.ButtonIcon,\n        ButtonCheck      : Buttons.ButtonCheck,\n        ButtonMenu       : Buttons.ButtonMenu,\n        ButtonLink       : Buttons.ButtonLink,\n        Input            : Input,\n        Label            : Label,\n        Message          : Message,\n        UnescapedMessage : UnescapedMessage,\n        Upload           : Upload,\n        Modal            : Modal,\n        RadioButton      : Options.RadioButton,\n        Checkbox         : Options.Checkbox,\n        Radio            : Options.Radio,\n        Select           : Select,\n        Hidden           : Hidden,\n        Slider           : Slider,\n        Drilldown        : Drilldown\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","/** This module contains all button views. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                icon        : '',\n                cls         : 'btn btn-default',\n                wait        : false,\n                wait_text   : 'Sending...',\n                wait_cls    : 'btn btn-info',\n                disabled    : false,\n                percentage  : -1\n            }).set( options );\n            this.setElement( $( '<button/>' ).attr( 'type', 'button' )\n                                             .append( this.$icon        = $( '<i/>' ) )\n                                             .append( this.$title       = $( '<span/>' ) )\n                                             .append( this.$progress    = $( '<div/>' ).append( this.$progress_bar = $( '<div/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'ui-button-default' )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'id', options.id )\n                    .attr( 'disabled', options.disabled )\n                    .css( 'float', options.floating )\n                    .off( 'click' ).on( 'click' , function() {\n                        $( '.tooltip' ).hide();\n                        options.onclick && !self.disabled && options.onclick();\n                    })\n                    .tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$progress.addClass( 'progress' ).css( 'display', options.percentage !== -1 ? 'block' : 'none' );\n            this.$progress_bar.addClass( 'progress-bar' ).css( { width : options.percentage + '%' } );\n            this.$icon.removeClass().addClass( 'icon fa' );\n            this.$title.removeClass().addClass( 'title' );\n            if ( options.wait ) {\n                this.$el.addClass( options.wait_cls ).prop( 'disabled', true );\n                this.$icon.addClass( 'fa-spinner fa-spin ui-margin-right' );\n                this.$title.html( options.wait_text );\n            } else {\n                this.$el.addClass( options.cls );\n                this.$icon.addClass( options.icon );\n                this.$title.html( options.title );\n                options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set( 'disabled', true );\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set( 'disabled', false );\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set( 'wait', true );\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set( 'wait', false );\n        },\n\n        /** Change icon */\n        setIcon: function( icon ) {\n            this.model.set( 'icon', icon );\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : ''\n            }).set( options );\n            this.setElement( $( '<a/>' ).append( this.$icon  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .attr( { id         : options.id,\n                             href       : options.href || 'javascript:void(0)',\n                             title      : options.title,\n                             target     : options.target || '_top',\n                             disabled   : options.disabled } )\n                    .tooltip( { placement: 'bottom' } )\n                    .off( 'click' ).on( 'click' , function() {\n                        options.onclick && !options.disabled && options.onclick();\n                    });\n            this.$icon.removeClass().addClass( options.icon );\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : 'Select/Unselect all',\n                icons       : [ 'fa-square-o', 'fa-minus-square-o', 'fa-check-square-o' ],\n                value       : 0,\n                onchange    : function(){}\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$icon   = $( '<span/>' ) )\n                                          .append( this.$title  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass( 'ui-button-check' )\n                    .off( 'click' ).on('click', function() {\n                        self.model.set( 'value', ( self.model.get( 'value' ) === 0 && 2 ) || 0 );\n                        options.onclick && options.onclick();\n                    });\n            this.$title.html( options.title );\n            this.$icon.removeClass()\n                      .addClass( 'icon fa ui-margin-right' )\n                      .addClass( options.icons[ options.value ] );\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function ( new_val, total ) {\n            if ( new_val !== undefined ) {\n                if ( total && new_val !== 0 ) {\n                    new_val = ( new_val !== total ) && 1 || 2;\n                }\n                this.model.set( 'value', new_val );\n                this.model.get( 'onchange' )( this.model.get( 'value' ) );\n            }\n            return this.model.get( 'value' );\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                icon        : '',\n                cls         : 'ui-button-icon',\n                disabled    : false\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$button = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                               .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render : function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'disabled', options.disabled )\n                    .attr( 'id', options.id )\n                    .css( 'float', options.floating )\n                    .off( 'click' ).on( 'click', function() {\n                        $( '.tooltip' ).hide();\n                        !options.disabled && options.onclick && options.onclick();\n                    });\n            this.$button.addClass( 'button' ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function ( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id              : '',\n                title           : '',\n                floating        : 'right',\n                pull            : 'right',\n                icon            : null,\n                onclick         : null,\n                cls             : 'ui-button-icon ui-button-menu',\n                tooltip         : '',\n                target          : '',\n                href            : '',\n                onunload        : null,\n                visible         : true,\n                tag             : ''\n            }).set( options );\n            this.collection = new Backbone.Collection();\n            this.setElement( $( '<div/>' ).append( this.$root = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                             .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.listenTo( this.collection, 'change add remove reset', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'dropdown' )\n                    .addClass( options.cls )\n                    .attr( 'id', options.id )\n                    .css( { float   : options.floating,\n                            display : options.visible && this.collection.where( { visible: true } ).length > 0 ? 'block' : 'none' } );\n            this.$root.addClass( 'root button dropdown-toggle' )\n                      .attr( 'data-toggle', 'dropdown' )\n                      .tooltip( { title: options.tooltip, placement: 'bottom' } )\n                      .off( 'click' ).on( 'click', function( e ) {\n                            $( '.tooltip' ).hide();\n                            e.preventDefault();\n                            options.onclick && options.onclick();\n                      } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.removeClass().addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            this.$menu && this.$menu.remove();\n            if ( this.collection.length > 0 ) {\n                this.$menu = $( '<ul/>' ).addClass( 'menu dropdown-menu' )\n                                         .addClass( 'pull-' + self.model.get( 'pull' ) )\n                                         .attr( 'role', 'menu' );\n                this.$el.append( this.$menu );\n            }\n            this.collection.each( function( submodel ) {\n                var suboptions = submodel.attributes;\n                if ( suboptions.visible ) {\n                    var $link = $( '<a/>' ).addClass( 'dropdown-item' )\n                                           .attr( { href : suboptions.href, target : suboptions.target } )\n                                           .append( $( '<i/>' ).addClass( 'fa' )\n                                                               .addClass( suboptions.icon )\n                                                               .css( 'display', suboptions.icon ? 'inline-block' : 'none' ) )\n                                           .append( suboptions.title )\n                                           .on( 'click', function( e ) {\n                                                if ( suboptions.onclick ) {\n                                                    e.preventDefault();\n                                                    suboptions.onclick();\n                                                }\n                                           } );\n                    self.$menu.append( $( '<li/>' ).append( $link ) );\n                    suboptions.divider && self.$menu.append( $( '<li/>' ).addClass( 'divider' ) );\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function ( options ) {\n            this.collection.add( Utils.merge( options, {\n                title       : '',\n                target      : '',\n                href        : '',\n                onclick     : null,\n                divider     : false,\n                visible     : true,\n                icon        : null,\n                cls         : 'button-menu btn-group'\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault   : ButtonDefault,\n        ButtonLink      : ButtonLink,\n        ButtonIcon      : ButtonIcon,\n        ButtonCheck     : ButtonCheck,\n        ButtonMenu      : ButtonMenu\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'utils/utils',\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    'mvc/ui/popup-menu'\n], function(Utils, GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.dict_format = grid_config.dict_format;\n        var self = this;\n        window.add_tag_to_grid_filter = function( tag_name, tag_value ){\n            // Put tag name and value together.\n            var tag = tag_name + ( tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\" );\n            var advanced_search = $( '#advanced-search').is(\":visible\" );\n            if( !advanced_search ){\n                $('#standard-search').slideToggle('fast');\n                $('#advanced-search').slideToggle('fast');\n            }\n            self.add_filter_condition( \"tags\", tag );\n        };\n\n        // set element\n        if ( this.dict_format ) {\n            this.setElement('<div/>');\n            if ( grid_config.url_base && !grid_config.items ) {\n                var url_data = {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data['f-' + k] = v;\n                });\n                $.ajax({\n                    url     : grid_config.url_base + '?' + $.param( url_data ),\n                    success : function( response ) {\n                        response.embedded = grid_config.embedded;\n                        response.filters  = grid_config.filters;\n                        self.init_grid( response );\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement('#grid-container');\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        // link grid model\n        this.grid = new GridModel(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each( options.items, function( item, index ) {\n            var button = self.$( '#grid-' + index + '-popup' ).off();\n            var popup = new PopupMenu( button );\n            _.each( options[ 'operations' ], function( operation ) {\n                self._add_operation( popup, operation, item );\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function( popup, operation, item ) {\n        var self = this;\n        var settings = item.operation_config[ operation.label ];\n        if ( settings.allowed && operation.allow_popup ) {\n            popup.addItem({\n                html                : operation.label,\n                href                : settings.url_args,\n                target              : settings.target,\n                confirmation_text   : operation.confirm,\n                func                : function( e ) {\n                    e.preventDefault();\n                    var label = $( e.target ).html();\n                    if ( operation.onclick ) {\n                        operation.onclick( item.encode_id );\n                    } else {\n                        self.execute( this.findItemByHtml( label ) );\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        var options = {\n                operation           : operation_name,\n                id                  : item_ids,\n                confirmation_text   : confirmation_text\n        };\n        if ( operation.target == 'top' ) {\n            options = _.extend( options, {\n                href   : operation.href,\n                target : operation.target\n            });\n        }\n        this.execute( options );\n        return true;\n    },\n\n    check_all_items: function () {\n        var check = this.$('.grid-row-select-checkbox');\n        var state = this.$( '#check_all' ).prop( 'checked' );\n        _.each( check, function( c ) {\n            $( c ).prop( 'checked', state );\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if ( target == 'top' ) {\n                window.top.location = href + '?' + $.param( this.grid.get_url_data() );\n            } else if ( this.grid.can_async_op(operation) || this.dict_format ) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async') || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","/** Base class for options based ui elements **/\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar Base = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false,\n            optional    : false,\n            onchange    : function(){}\n        }).set( options );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.on( 'change', function() { self.model.get( 'onchange' )( self.value() ) } );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty()\n                .removeClass()\n                .addClass( 'ui-options' )\n                .append( this.$message   = $( '<div/>' ) )\n                .append( this.$menu      = $( '<div/>' ).addClass( 'ui-options-menu' ) )\n                .append( this.$options   = $( this._template() ) );\n\n        // add select/unselect all button\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$( 'input' ).prop( 'checked', self.all_button.value() !== 0 );\n                    self.value( self._getValue() );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$menu.append( this.all_button.$el );\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if ( this._templateOptions ) {\n            this.$options.append( this._templateOptions( this.model.get( 'data' ) ) );\n        } else {\n            _.each( this.model.get( 'data' ), function( option ) {\n                self.$options.append( $( self._templateOption( option ) )\n                                        .addClass( 'ui-option' )\n                                        .tooltip( { title: option.tooltip, placement: 'bottom' } ) );\n            });\n        }\n        var self = this;\n        this.$( 'input' ).on( 'change', function() {\n            self.value( self._getValue() );\n            self.trigger( 'change' );\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    _changeWait: function() {\n        if ( this.model.get( 'wait' ) ) {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'wait_text' ), 'info' );\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'error_text' ), 'danger' );\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css( 'display', 'inline-block' );\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this._getValue() === null && !this.model.get( 'multiple' ) && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n        this.all_button && this.all_button.value( $.isArray( this._getValue() ) ? this._getValue().length : 0, this.length() );\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$( 'input' ).first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$( '.ui-option' ).length;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            if ( new_value !== null ) {\n                var values = $.isArray( new_value ) ? new_value : [ new_value ];\n                _.each( values, function( v ) {\n                    self.$( 'input[value=\"' + v + '\"]' ).first().prop( 'checked', true );\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$( ':checked' ).each( function() {\n            selected.push( $( this ).val() );\n        });\n        if ( Utils.isEmpty( selected ) ) {\n            return null;\n        }\n        return this.model.get( 'multiple' ) ? selected : selected[ 0 ];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function( text, status ) {\n        this.$message.show()\n                     .removeClass()\n                     .addClass( 'ui-message alert alert-' + status )\n                     .html( text );\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list' );\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function( pair ) {\n        var id = Utils.uid();\n        return  $( '<div/>' ).addClass( 'ui-option' )\n                    .append( $( '<input/>' ).attr( {\n                        id      : id,\n                        type    : this.model.get( 'type' ),\n                        name    : this.model.id,\n                        value   : pair.value } ) )\n                    .append( $( '<label/>' ).addClass( 'ui-options-label' )\n                                            .attr( 'for', id )\n                                            .html( pair.label ) );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'checkbox';\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function( options ) {\n        Base.prototype.initialize.call( this, options );\n    },\n\n    /** Set current value */\n    _setValue: function ( new_value ) {\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            this.$( 'label' ).removeClass( 'active' );\n            this.$( '[value=\"' + new_value + '\"]' ).prop( 'checked', true ).closest( 'label' ).addClass( 'active' );\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function( pair ) {\n        var $el =  $( '<label/>' ).addClass( 'btn btn-default' );\n        pair.icon && $el.append( $( '<i/>' ).addClass( 'fa' ).addClass( pair.icon ).addClass( !pair.label && 'no-padding' ) );\n        $el.append( $( '<input/>' ).attr( { type: 'radio', name: this.model.id, value: pair.value } ) );\n        pair.label && $el.append( pair.label );\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'btn-group ui-radiobutton' ).attr( 'data-toggle', 'buttons' );\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","define([\n    //jquery\n    //backbone\n], function(){\n// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n//TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function( $button, options ){\n        // default settings\n        this.$button = $button;\n        if( !this.$button.length ){\n            this.$button = $( '<div/>' );\n        }\n        this.options = options || [];\n        this.$button.data( 'popupmenu', this );\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click( function( event ){\n            // if there's already a menu open, remove it\n            $( '.popmenu-wrapper' ).remove();\n            menu._renderAndShow( event );\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function( clickEvent ){\n        this.render();\n        this.$el.appendTo( 'body' ).css( this._getShownPosition( clickEvent )).show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function(){\n        // render the menu body absolute and hidden, fill with template\n        this.$el.addClass( 'popmenu-wrapper' ).hide()\n            .css({ position : 'absolute' })\n            .html( this.template( this.$button.attr( 'id' ), this.options ));\n\n        // set up behavior on each link/anchor elem\n        if( this.options.length ){\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find( 'li' ).each( function( i, li ){\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if( option.func ){\n                    $( this ).children( 'a.popupmenu-option' ).click( function( event ){\n                        option.func.call( menu, event, option );\n                        // We must preventDefault otherwise clicking \"cancel\"\n                        // on a purge or something still navigates and causes\n                        // the action.\n                        event.preventDefault();\n                        // bubble up so that an option click will call the close behavior\n                    });\n                }\n            });\n        }\n        return this;\n    },\n\n    template : function( id, options ){\n        return [\n            '<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions( options ), '</ul>'\n        ].join( '' );\n    },\n\n    _templateOptions : function( options ){\n        if( !options.length ){\n            return '<li>(no options)</li>';\n        }\n        return _.map( options, function( option ){\n            if( option.divider ){\n                return '<li class=\"divider\"></li>';\n            } else if( option.header ){\n                return [ '<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>' ].join( '' );\n            }\n            var href   = option.href || 'javascript:void(0);',\n                target = ( option.target  )?( ' target=\"' + option.target + '\"' ):( '' ),\n                check  = ( option.checked )?( '<span class=\"fa fa-check\"></span>' ):( '' );\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>',\n                    check, option.html,\n                '</a></li>'\n            ].join( '' );\n        }).join( '' );\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition : function( clickEvent ){\n\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2 ;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min( x, $( document ).scrollLeft() + $( window ).width() - menuWidth - 5 );\n        x = Math.max( x, $( document ).scrollLeft() + 5 );\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function(){\n        var menu = this;\n//TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup( event ){\n            $( document ).off( 'click.close_popup' );\n            if( window && window.parent !== window ){\n                try {\n                    $( window.parent.document ).off( \"click.close_popup\" );\n                } catch( err ){}\n            } else {\n                try {\n                    $( 'iframe#galaxy_main' ).contents().off( \"click.close_popup\" );\n                } catch( err ){}\n            }\n            menu.remove();\n        }\n\n        $( 'html' ).one( \"click.close_popup\", closePopup );\n        if( window && window.parent !== window ){\n            try {\n                $( window.parent.document ).find( 'html' ).one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        } else {\n            try {\n                $( 'iframe#galaxy_main' ).contents().one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function( item, index ){\n        // append to end if no index\n        index = ( index >= 0 ) ? index : this.options.length;\n        this.options.splice( index, 0, item );\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function( index ){\n        if( index >=0 ){\n            this.options.splice( index, 1 );\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function( html ){\n        for( var i = 0; i < this.options.length; i++ ){\n            if( _.has( this.options[i], 'html' ) && ( this.options[i].html === html )){\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function( html ){\n        return this.options[( this.findIndexByHtml( html ))];\n    },\n\n    // string representation\n    toString: function(){\n        return 'PopupMenu';\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create( $button, options ){\n    return new PopupMenu( $button, options );\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = function( button_element, initial_options ){\n    var convertedOptions = [];\n    _.each( initial_options, function( optionVal, optionKey ){\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if( optionVal === null ){ // !optionVal? (null only?)\n            newOption.header = true;\n\n        // keys with function values indicate: a menu option\n        } else if( jQuery.type( optionVal ) === 'function' ){\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push( newOption );\n    });\n    return new PopupMenu( $( button_element ), convertedOptions );\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = function( $parent, selector ){\n    $parent = $( $parent );\n    selector = selector || 'a';\n    var options = [];\n    $parent.find( selector ).each( function( elem, i ){\n        var option = {}, $link = $( elem );\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if( $link.attr( 'href' ) ){\n            var linkHref    = $link.attr( 'href' ),\n                linkTarget  = $link.attr( 'target' ),\n                confirmText = $link.attr( 'confirm' );\n\n            option.func = function(){\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if( ( confirmText ) && ( !confirm( confirmText ) ) ){ return; }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch( linkTarget ){\n                    // relocate the center panel\n                    case '_parent':\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case '_top':\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push( option );\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = function( $buttonElement, $menuElement, menuElementLinkSelector ){\n    $buttonElement = $( $buttonElement );\n    $menuElement = $( $menuElement );\n    var options = PopupMenu.convertLinksToOptions( $menuElement, menuElementLinkSelector );\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu( $buttonElement, options );\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = function( parent, menuSelector, buttonSelectorBuildFn ){\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || 'div[popupmenu]';\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || function( $menuElement, parent ){\n        return '#' + $menuElement.attr( 'popupmenu' );\n    };\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $( parent ).find( menuSelector ).each( function(){\n        var $menuElement    = $( this ),\n            $buttonElement  = $( parent ).find( buttonSelectorBuildFn( $menuElement, parent ) );\n        popupMenusCreated.push( PopupMenu.fromDom( $buttonElement, $menuElement ) );\n        $buttonElement.addClass( 'popup' );\n    });\n    return popupMenusCreated;\n};\n\n\n// =============================================================================\n    return PopupMenu;\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar View = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.data  = [];\n        this.data2 = [];\n        this.model = options && options.model || new Backbone.Model({\n            id          : Utils.uid(),\n            cls         : 'ui-select',\n            error_text  : 'No options available',\n            empty_text  : 'Nothing selected',\n            visible     : true,\n            wait        : false,\n            multiple    : false,\n            searchable  : true,\n            optional    : false,\n            disabled    : false,\n            onchange    : function(){},\n            value       : null,\n            selectall   : true,\n            pagesize    : 20\n        }).set( options );\n        this.on( 'change', function() { self.model.get( 'onchange' ) && self.model.get( 'onchange' )( self.value() ) } );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:disabled', this._changeDisabled, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:multiple change:searchable change:cls change:id', this.render, this );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get( 'searchable' ) ? this._renderSearchable() : this._renderClassic();\n        this.$el.addClass( this.model.get( 'cls' ) )\n                .attr( 'id', this.model.get( 'id' ) );\n        this.$select.empty().addClass( 'select' )\n                    .attr( 'id', this.model.get( 'id' ) + '_select' )\n                    .prop( 'multiple', this.model.get( 'multiple' ) )\n                    .on( 'change', function() {\n                        self.value( self._getValue() );\n                        self.trigger( 'change' );\n                    });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el.addClass( this.model.get( 'multiple' ) ? 'ui-select-multiple' : 'ui-select' )\n                .append( this.$select      = $( '<select/>' ) )\n                .append( this.$dropdown    = $( '<div/>' ) )\n                .append( this.$resize      = $( '<div/>' )\n                .append( this.$resize_icon = $( '<i/>' ) ) );\n        if ( this.model.get( 'multiple' ) ) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass( 'fa fa-angle-double-right fa-rotate-45' ).show();\n            this.$resize.removeClass()\n                        .addClass( 'icon-resize' )\n                        .show()\n                        .off( 'mousedown' ).on( 'mousedown', function( event ) {\n                            var currentY = event.pageY;\n                            var currentHeight = self.$select.height();\n                            self.minHeight = self.minHeight || currentHeight;\n                            $( '#dd-helper' ).show().on( 'mousemove', function( event ) {\n                                self.$select.height( Math.max( currentHeight + ( event.pageY - currentY ), self.minHeight ) );\n                            }).on( 'mouseup mouseleave', function() {\n                                $( '#dd-helper' ).hide().off();\n                            });\n                        });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el.append( this.$select   = $( '<div/>' ) )\n                .append( this.$dropdown = $( '<div/>' ) );\n        this.$dropdown.hide();\n        if ( !this.model.get( 'multiple' ) ) {\n            this.$dropdown.show().on( 'click', function() {\n                self.$select.select2 && self.$select.select2( 'open' );\n            });\n        }\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) && this.model.get( 'selectall' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 && _.each( self.model.get( 'data' ), function( option ) {\n                        new_value.push( option.value );\n                    });\n                    self.value( new_value );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$el.prepend( this.all_button.$el );\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function( term, text ) {\n        return !term || term == '' || String( text ).toUpperCase().indexOf( term.toUpperCase() ) >= 0\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if ( !this.model.get( 'multiple' ) && this.model.get( 'optional' ) ) {\n            this.data.push( { value: '__null__', label: self.model.get( 'empty_text' ) } );\n        }\n        _.each( this.model.get( 'data' ), function( option ) {\n            self.data.push( option );\n        });\n        if ( this.length() == 0 ) {\n            this.data.push( { value: '__null__', label: this.model.get( 'error_text' ) } );\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            this.data2 = [];\n            _.each( this.data, function( option, index ) {\n                self.data2.push( { order: index, id: option.value, text: option.label, tags: option.tags } );\n            });\n            this.$select.data( 'select2' ) && this.$select.select2( 'destroy' );\n            this.matched_tags = {};\n            this.$select.select2({\n                data            : self.data2,\n                closeOnSelect   : !this.model.get( 'multiple' ),\n                multiple        : this.model.get( 'multiple' ),\n                query           : function( q ) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get( 'pagesize' );\n                    var results = _.filter( self.data2, function ( e ) {\n                        var found = false;\n                        _.each( e.tags, function( tag ) {\n                            if ( self._match( q.term, tag ) ) {\n                                found = self.matched_tags[ tag ] = true;\n                            }\n                        });\n                        return found || self._match( q.term, e.text );\n                    });\n                    q.callback({\n                        results: results.slice( ( q.page - 1 ) * pagesize, q.page * pagesize ),\n                        more   : results.length >= q.page * pagesize\n                    });\n                },\n                formatResult    : function( result ) {\n                    return _.escape( result.text ) +\n                        '<div class=\"ui-tags\">' +\n                            _.reduce( result.tags, function( memo, tag ) {\n                                if ( self.matched_tags[ tag ] ) {\n                                    return memo + '&nbsp;' +\n                                        '<div class=\"label label-info\">' +\n                                            _.escape( tag ) +\n                                        '</div>'\n                                }\n                                return memo;\n                            }, '' ) +\n                        '</div>';\n                }\n            });\n            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n        } else {\n            this.$select.find( 'option' ).remove();\n            _.each( this.data, function( option ) {\n                self.$select.append( $( '<option/>' ).attr( 'value', option.value ).html( _.escape( option.label ) ) );\n            });\n        }\n        this.model.set( 'disabled', this.length() == 0 );\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if ( this.model.get( 'searchable' ) ) {\n            this.$select.select2( this.model.get( 'disabled' ) ? 'disable' : 'enable' );\n        } else {\n            this.$select.prop( 'disabled', this.model.get( 'disabled' ) );\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown.removeClass()\n                      .addClass( 'icon-dropdown fa' )\n                      .addClass( this.model.get( 'wait' ) ? 'fa-spinner fa-spin' : 'fa-caret-down' );\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n        this.$select[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this.model.get( 'multiple' ) ) {\n            if ( this.all_button ) {\n                var value = this._getValue();\n                this.all_button.value( $.isArray( value ) ? value.length : 0, this.length() );\n            }\n        } else if ( this._getValue() === null && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[ 0 ].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function( value ) {\n        return _.findWhere( this.data, { value: value } );\n    },\n\n    /** Return the label/text of the current selection */\n    text: function () {\n        var v = this._getValue();\n        var d = this.exists( $.isArray( v ) ? v[ 0 ] : v );\n        return d ? d.label : '';\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set( 'visible', true );\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set( 'visible', false );\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get( 'disabled' );\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set( 'disabled', false );\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set( 'disabled', true );\n    },\n\n    /** Update all available options at once */\n    add: function( options, sorter ) {\n        _.each( this.model.get( 'data' ), function( v ) {\n            v.keep && !_.findWhere( options, { value: v.value } ) && options.push( v );\n        });\n        sorter && options && options.sort( sorter );\n        this.model.set( 'data', options );\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function( callback ) {\n        this.model.set( 'onchange', callback );\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray( this.model.get( 'data' ) ) ? this.model.get( 'data' ).length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if( new_value === null || new_value === undefined ) {\n            new_value = '__null__';\n        }\n        if ( this.model.get( 'multiple' ) ) {\n            new_value = $.isArray( new_value ) ? new_value : [ new_value ];\n        } else if ( $.isArray( new_value ) ) {\n            if ( new_value.length > 0 ) {\n                new_value = new_value[ 0 ];\n            } else {\n                new_value = '__null__';\n            }\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            if ( $.isArray( new_value ) ) {\n                val = [];\n                _.each( new_value, function( v ) {\n                    var d = _.findWhere( self.data2, { id: v } );\n                    d && val.push( d );\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere( this.data2, { id: new_value } );\n                new_value = d;\n            }\n            this.$select.select2( 'data', new_value );\n        } else {\n            this.$select.val( new_value );\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if ( this.model.get( 'searchable' ) ) {\n            var selected = this.$select.select2( 'data' );\n            if ( selected ) {\n                if ( $.isArray( selected ) ) {\n                    val = [];\n                    selected.sort( function( a, b ) { return a.order - b.order } );\n                    _.each( selected, function( v ) { val.push( v.id ) } );\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty( val ) ? null : val;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","// dependencies\ndefine([], function() {\n\n// grid model\nreturn Backbone.Model.extend({\n    defaults: {\n        url_base: '',\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.            \n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key],\n                new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } \n            else if (typeof(cur_val) == 'string') {\n                if (cur_val == 'All') {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;   \n                }\n            } \n            else {\n                // Current value is an array.\n                new_val = cur_val;\n                new_val.push(value);\n            }\n            this.attributes.filters[key] = new_val;\n        } \n        else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;            \n        }\n\n        if (typeof(cur_val) === 'string') {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = '';\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = '';\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), function(k) {\n            url_data['f-' + k[0]] = k[1];\n        });\n        return url_data;\n    },\n    \n    // Return URL for obtaining a new grid\n    get_url: function (args) {\n        return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n    }\n    \n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n// grid view templates\nreturn {\n    // template\n    grid: function(options) {\n        var tmpl = '';\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = '<div class=\"loading-elt-overlay\"></div>' +\n                    '<table>' +\n                        '<tr>' +\n                            '<td width=\"75%\">' +\n                                this.grid_header(options) +\n                            '</td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                        '<tr>' +\n                            '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                    '</table>' +\n                    this.grid_table(options);\n        }\n       \n        // add info text\n        if (options.info_text) {\n            tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n        }\n       \n        // return\n        return tmpl;\n    },\n    \n    // template\n    grid_table: function(options) {\n        return  '<form method=\"post\" onsubmit=\"return false;\">' +\n                    '<table id=\"grid-table\" class=\"grid\">' +\n                        '<thead id=\"grid-table-header\"></thead>' +\n                        '<tbody id=\"grid-table-body\"></tbody>' +\n                        '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                    '</table>' +\n                '</form>';\n    },\n    \n    // template\n    grid_header: function(options) {\n        var tmpl =  '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl +=     '<h2>' + options.title + '</h2>';\n        }\n        if (options.global_actions) {\n            tmpl +=     '<ul class=\"manage-table-actions\">';\n            var show_popup = (options.global_actions.length >= 3);\n            if (show_popup) {\n                tmpl +=     '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                            '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl +=         '<li>' +\n                                    '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' +\n                                '</li>';\n            }\n            if (show_popup) {\n                tmpl +=     '</div>';\n            }\n            tmpl +=     '</ul>';\n        }\n        if (options.insert) {\n            tmpl +=     options.insert;\n        }\n       \n        // add grid filters\n        tmpl +=     this.grid_filters(options);\n        tmpl += '</div>'\n        \n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl +=         '<th>';\n            if (options.items.length > 0) {\n                tmpl +=         '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                                '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl +=         '</th>';\n        }\n        \n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl +=     '<th id=\"' + column.key + '-header\">';\n                if (column.href) {\n                    tmpl +=     '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n                } else {\n                    tmpl +=     column.label;\n                }\n                tmpl +=         '<span class=\"sort-arrow\">' + column.extra + '</span>' +\n                            '</th>';\n            }\n        }\n        \n        // finalize\n        tmpl +=        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = '';\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n        \n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n        \n        // create rows\n        for (var i in options.items) {\n        \n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = 'grid-' + i + '-popup';\n            \n            // Tag current\n            tmpl += '<tr ';\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += '>';\n            \n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += '<td style=\"width: 1.5em;\">' +\n                            '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' +\n                        '</td>';\n            }\n            \n            // Data columns\n            for (j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = '';\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n                    \n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n                    \n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n                        \n                    // unescape value\n                    if (jQuery.type( value ) === 'string') {\n                        value = value.replace(/\\/\\//g, '/');\n                    }\n                    \n                    // Attach popup menu?\n                    var id = '';\n                    var cls = '';\n                    if (column.attach_popup) {\n                        id = 'grid-' + i + '-popup';\n                        cls = 'menubutton';\n                        if (link != '') {\n                            cls += ' split';\n                        }\n                        cls += ' popup';\n                    }\n                    \n                    // Check for row wrapping\n                    tmpl += '<td ' + nowrap + '>';\n                \n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                        }\n                        tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n                        if (options.operations.length != 0) {\n                            tmpl += '</div>';\n                        }\n                    } else {\n                        tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n                    }\n                    tmpl += '</td>';\n                }\n            }\n            tmpl += '</tr>';\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n    \n        // create template string\n        var tmpl = '';\n        \n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links      = options.num_page_links;\n            var cur_page_num        = options.cur_page_num;\n            var num_pages           = options.num_pages;\n            \n            // First pass on min page.\n            var page_link_range     = num_page_links / 2;\n            var min_page            = cur_page_num - page_link_range\n            var min_offset          = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - ( cur_page_num - min_page );\n            }\n            \n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - ( max_page + 1 - cur_page_num );\n            }\n            \n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset\n                if (min_page < 1) {\n                    min_page = 1\n                }\n            }\n            \n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += '<td></td>';\n            }\n            tmpl +=     '<td colspan=\"100\">' +\n                            '<span id=\"page-link-container\">' +\n                                'Page:';\n            \n            if (min_page > 1) {\n                tmpl +=         '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n            \n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                \n                if (page_index == options.cur_page_num) {\n                    tmpl +=     '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n                } else {\n                    tmpl +=     '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n                }\n            }\n            \n            // show last page\n            if (max_page < num_pages) {\n                    tmpl +=     '...' +\n                                '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n            }\n            tmpl +=         '</span>';\n            \n            // Show all link\n            tmpl +=         '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                        '</td>' +\n                    '</tr>';\n        }\n        \n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += '<tr>' +\n                        '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                        '<td></td>' +\n                        '<td colspan=\"100\">' +\n                            'For <span class=\"grid-selected-count\"></span> selected items: ';\n            \n            // configure buttons for operations\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                }\n            }\n            \n            // finalize template\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n    \n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n    \n        // add global operations\n        if (found_global) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n                }\n            }\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n        \n        // add legend\n        if (options.legend) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">' + options.legend + '</td>' +\n                    '</tr>';\n        }\n        \n        // return\n        return tmpl;\n    },\n        \n    // template\n    message: function(options) {\n        return  '<p>' +\n                    '<div class=\"' + options.status + 'message transient-message\">' + options.message + '</div>' +\n                    '<div style=\"clear: both\"></div>' +\n                '</p>';\n    },\n    \n    // template\n    grid_filters: function (options) {\n    \n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = 'none';\n        if (options.advanced_search) {\n            advanced_search_display = 'block';\n        }\n        \n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = 'block';\n                }\n                show_advanced_search_link = true;\n            }\n        }\n        \n        // hide standard search if advanced is shown\n        var standard_search_display = 'block';\n        if (advanced_search_display == 'block') {\n            standard_search_display = 'none';\n        }\n\n        //\n        // standard search\n        //\n        var tmpl =  '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"padding: 0;\">' +\n                                    '<table>';\n        \n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'standard') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize standard search\n        tmpl +=                     '</table>' +\n                                '</td>' +\n                            '</tr>' +\n                            '<tr>' +\n                                '<td>';\n                \n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl +=                 '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n        \n        // finalize standard search display\n        tmpl +=                 '</td>' +\n                            '</tr>' +\n                        '</table>' +\n                    '</div>';\n    \n        //\n        // advanced search\n        //\n        tmpl +=     '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"text-align: left\" colspan=\"100\">' +\n                                    '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                                '</td>' +\n                            '</tr>';\n        \n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize advanced search template\n        tmpl +=         '</table>' +\n                    '</div>';\n\n        // return template\n        return tmpl;\n    },\n    \n    // template\n    grid_column_filter: function(options, column) {\n        \n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == 'advanced') {\n            column_label = column_label.toLowerCase();\n        }\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        if (column.filterable == 'advanced') {\n            tmpl +=         '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n        }\n        tmpl +=             '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl +=             '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != 'All') {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify( filter_value )\n                        }\n                        tmpl +=     '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl +=                 '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n                \n                // single filter value\n                if (type == 'string') {\n                    if (column_filter != 'All') {\n                        // append template\n                        tmpl +=         this.filter_element(column_key, column_filter);\n                    }\n                }\n                \n                // multiple filter values\n                if (type == 'array') {\n                    for (var i in column_filter ) {\n                        // get filter\n                        var filter = column_filter[i];\n                        \n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl +=         this.filter_element(column_key, filter);\n                    }\n                }\n            }\n            \n            // close span\n            tmpl +=                 '</span>';\n            \n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = '';\n            if (column.filterable == 'standard') {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n            \n            // print input field for column\n            tmpl +=                 '<span class=\"search-box\">' +\n                                        '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' +\n                                        '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                                            '<i class=\"fa fa-search\"></i>' +\n                                        '</button>' +\n                                    '</span>' +\n                                '</form>';\n        } else {\n            // filter criteria\n            tmpl +=             '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add category filters\n            var seperator = false;\n            for (cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n                \n                // each filter will have only a single argument, so get that single argument\n                var cf_key = '';\n                var cf_arg = '';\n                for (key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n                \n                // add seperator\n                if (seperator) {\n                    tmpl += ' | ';\n                }\n                seperator = true;\n                \n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n                } else {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter\">' +\n                                        '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' +\n                                    '</span>';\n                }\n            }\n            tmpl +=             '</span>';\n        }\n        tmpl +=             '</td>' +\n                        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return  '<span class=\"text-filter-val\">' + filter_value +\n                    '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' +\n                        '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                    '</a>' +\n                '</span>';\n\n    }\n};\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","/** This class creates/wraps a drill down element. */\ndefine([ 'utils/utils', 'mvc/ui/ui-options' ], function( Utils, Options ) {\n\nvar View = Options.BaseIcons.extend({\n    initialize: function( options ) {\n        options.type     = options.display || 'checkbox';\n        options.multiple = ( options.type == 'checkbox' );\n        Options.BaseIcons.prototype.initialize.call( this, options );\n    },\n\n    /** Set states for selected values */\n    _setValue: function ( new_value ) {\n        Options.BaseIcons.prototype._setValue.call( this, new_value );\n        if ( new_value !== undefined && new_value !== null && this.header_index ) {\n            var self = this;\n            var values = $.isArray( new_value ) ? new_value : [ new_value ];\n            _.each( values, function( v ) {\n                var list = self.header_index[ v ];\n                _.each( list, function( element ) {\n                    self._setState( element, true );\n                });\n            });\n        }\n    },\n\n    /** Expand/collapse a sub group */\n    _setState: function ( header_id, is_expanded ) {\n        var $button = this.$( '.button-' + header_id );\n        var $subgroup = this.$( '.subgroup-' + header_id );\n        $button.data( 'is_expanded', is_expanded );\n        if ( is_expanded ) {\n            $subgroup.show();\n            $button.removeClass( 'fa-plus-square' ).addClass( 'fa-minus-square' );\n        } else {\n            $subgroup.hide();\n            $button.removeClass( 'fa-minus-square' ).addClass( 'fa-plus-square' );\n        }\n    },\n\n    /** Template to create options tree */\n    _templateOptions: function() {\n        var self = this;\n        this.header_index = {};\n\n        // attach event handler\n        function attach( $el, header_id ) {\n            var $button = $el.find( '.button-' + header_id );\n            $button.on( 'click', function() {\n                self._setState( header_id, !$button.data( 'is_expanded' ) );\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate ( $tmpl, options, header ) {\n            header = header || [];\n            for ( i in options ) {\n                var level = options[ i ];\n                var has_options = level.options && level.options.length > 0;\n                var new_header = header.slice( 0 );\n                self.header_index[ level.value ] = new_header.slice( 0 );\n                var $group = $( '<div/>' );\n                if ( has_options ) {\n                    var header_id = Utils.uid();\n                    var $button = $( '<span/>' ).addClass( 'button-' + header_id ).addClass( 'ui-drilldown-button fa fa-plus-square' );\n                    var $subgroup = $( '<div/>' ).addClass( 'subgroup-' + header_id ).addClass( 'ui-drilldown-subgroup' );\n                    $group.append( $( '<div/>' )\n                                        .append( $button )\n                                        .append( self._templateOption( { label: level.name, value: level.value } ) ) );\n                    new_header.push( header_id );\n                    iterate ( $subgroup, level.options, new_header );\n                    $group.append( $subgroup );\n                    attach( $group, header_id );\n                } else {\n                    $group.append( self._templateOption( { label: level.name, value: level.value } ) );\n                }\n                $tmpl.append( $group );\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $( '<div/>' );\n        iterate( $tmpl, this.model.get( 'data' ) );\n        return $tmpl;\n    },\n\n    /** Template for drill down view */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list drilldown-container' ).attr( 'id', this.model.id );\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","define([ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id       : Utils.uid(),\n                min      : null,\n                max      : null,\n                step     : null,\n                precise  : false,\n                split    : 10000,\n                value    : null,\n                onchange : function(){}\n            }).set( options );\n\n            // create new element\n            this.setElement( this._template() );\n            this.$el.attr( 'id', this.model.id );\n            this.$text   = this.$( '.ui-form-slider-text' );\n            this.$slider = this.$( '.ui-form-slider-element' );\n\n            // add text field event\n            var pressed = [];\n            this.$text.on( 'change', function () {\n                self.value( $( this ).val() );\n            }).on( 'keyup', function( e ) {\n                pressed[e.which] = false;\n            }).on( 'keydown', function ( e ) {\n                var v = e.which;\n                pressed[ v ] = true;\n                if ( self.model.get( 'is_workflow' ) && pressed[ 16 ] && v == 52 ) {\n                    self.value( '$' );\n                    event.preventDefault();\n                } else if (!( v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || ( v >= 48 && v <= 57 && !pressed[ 16 ] ) || ( v >= 96 && v <= 105 )\n                    || ( ( v == 190 || v == 110 ) && $( this ).val().indexOf( '.' ) == -1 && self.model.get( 'precise' ) )\n                    || ( ( v == 189 || v == 109 ) && $( this ).val().indexOf( '-' ) == -1 )\n                    || self._isParameter( $( this ).val() )\n                    || pressed[ 91 ] || pressed[ 17 ] ) ) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if ( !step ) {\n                if ( opts.precise && this.has_slider ) {\n                    step = ( opts.max - opts.min ) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if ( this.has_slider ) {\n                this.$text.addClass( 'ui-form-slider-left' );\n                this.$slider.slider( { min: opts.min, max: opts.max, step: step } )\n                            .on( 'slide', function ( event, ui ) { self.value( ui.value ) } );\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get( 'value' );\n            this.has_slider && this.$slider.slider( 'value', value );\n            value !== this.$text.val() && this.$text.val( value );\n        },\n\n        /** Set and return the current value */\n        value : function ( new_val ) {\n            var options = this.model.attributes;\n            if ( new_val !== undefined ) {\n                if ( new_val !== null && new_val !== '' && !this._isParameter( new_val ) ) {\n                    isNaN( new_val ) && ( new_val = 0 );\n                    !options.precise && ( new_val = Math.round( new_val ) );\n                    options.max !== null && ( new_val = Math.min( new_val, options.max ) );\n                    options.min !== null && ( new_val = Math.max( new_val, options.min ) );\n                }\n                this.model.set( 'value', new_val );\n                this.model.trigger( 'change' );\n                options.onchange( new_val );\n            }\n            return this.model.get( 'value' );\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function( value ) {\n            return this.model.get( 'is_workflow' ) && String( value ).substring( 0, 1 ) === '$';\n        },\n\n        /** Slider template */\n        _template: function() {\n            return  '<div class=\"ui-form-slider\">' +\n                        '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                        '<div class=\"ui-form-slider-element\"/>' +\n                    '</div>';\n        }\n    });\n\n    return {\n        View : View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    QUERY_STRING = require( 'utils/query-string-parsing' ),\n    Ui = require( 'mvc/ui/ui-misc' );\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize : function( page, options ){\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function( url, data ) {\n        data = data || {};\n        data.__identifer = Math.random().toString( 36 ).substr( 2 );\n        if ( !$.isEmptyObject( data ) ) {\n            url += url.indexOf( '?' ) == -1 ? '?' : '&';\n            url += $.param( data , true );\n        }\n        this.navigate( url, { 'trigger': true } );\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function( callback, args, name ){\n        Galaxy.debug( 'router execute:', callback, args, name );\n        var queryObj = QUERY_STRING.parse( args.pop() );\n        args.push( queryObj );\n        if( callback ){\n            if ( this.authenticate( args, name ) ) {\n                callback.apply( this, args );\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function( args, name ) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display( new Ui.Message( { status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true } ) );\n    }\n});\n\nmodule.exports = Router\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","var _l = require( 'utils/localization' );\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function( page, options ) {\n        var self = this;\n        this.page       = page;\n        this.root       = options.root;\n        this.config     = options.config;\n        this.settings   = options.settings;\n        this.message    = options.message;\n        this.status     = options.status;\n        this.model = new Backbone.Model({\n            title   : _l( 'Administration' )\n        });\n        this.categories = new Backbone.Collection([{\n            title : 'Server',\n            items : [ {\n                title   : 'Data types registry',\n                url     : 'admin/view_datatypes_registry'\n            },{\n                title   : 'Data tables registry',\n                url     : 'admin/view_tool_data_tables'\n            },{\n                title   : 'Display applications',\n                url     : 'admin/display_applications'\n            },{\n                title   : 'Manage jobs',\n                url     : 'admin/jobs'\n            } ]\n        },{\n            title : 'Tools and Tool Shed',\n            items : [ {\n                title   : 'Search Tool Shed',\n                url     : 'admin_toolshed/browse_tool_sheds',\n                enabled : self.settings.is_tool_shed_installed\n            },{\n                title   : 'Search Tool Shed (Beta)',\n                url     : 'admin_toolshed/browse_toolsheds',\n                enabled : self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            },{\n                title   : 'Monitor installing repositories',\n                url     : 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n                enabled : self.settings.installing_repository_ids\n            },{\n                title   : 'Manage installed tools',\n                url     : 'admin_toolshed/browse_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Reset metadata',\n                url     : 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Download local tool',\n                url     : 'admin/package_tool'\n            },{\n                title   : 'Tool lineage',\n                url     : 'admin/tool_versions'\n            },{\n                title   : 'Reload a tool\\'s configuration',\n                url     : 'admin/reload_tool'\n            },{\n                title   : 'Review tool migration stages',\n                url     : 'admin/review_tool_migration_stages'\n            },{\n                title   : 'View Tool Error Logs',\n                url     : 'admin/tool_errors'\n            },{\n                title   : 'Manage Display Whitelist',\n                url     : 'admin/sanitize_whitelist'\n            },{\n                title   : 'Manage Tool Dependencies',\n                url     : 'admin/manage_tool_dependencies'\n            } ]\n        },{\n            title : 'User Management',\n            items : [ {\n                title   : 'Users',\n                url     : 'admin/users',\n                target  : 'top'\n            },{\n                title   : 'Groups',\n                url     : 'admin/groups'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles'\n            },{\n                title   : 'API keys',\n                url     : 'userskeys/all_users'\n            },{\n                title   : 'Impersonate a user',\n                url     : 'admin/impersonate',\n                enabled : self.config.allow_user_impersonation\n            } ]\n        },{\n            title : 'Data',\n            items : [ {\n                title   : 'Quotas',\n                url     : 'admin/quotas',\n                enabled : self.config.enable_quotas\n            },{\n                title   : 'Data libraries',\n                url     : 'library_admin/browse_libraries'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles'\n            },{\n                title   : 'Local data',\n                url     : 'data_manager'\n            } ]\n        },{\n            title : 'Form Definitions',\n            items : [ {\n                title   : 'Form definitions',\n                url     : 'forms/browse_form_definitions'\n            } ]\n        },{\n            title : 'Sample Tracking',\n            items : [ {\n                title   : 'Sequencers and external services',\n                url     : 'external_service/browse_external_services'\n            },{\n                title   : 'Request types',\n                url     : 'request_type/browse_request_types'\n            },{\n                title   : 'Sequencing requests',\n                url     : 'requests_admin/browse_requests'\n            },{\n                title   : 'Find samples',\n                url     : 'requests_common/find_samples?cntrller=requests_admin'\n            } ]\n        }]);\n        this.setElement( this._template() );\n    },\n\n    render : function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each( function( category ) {\n            var $section = $( self._templateSection( category.attributes ) );\n            var $entries = $section.find( '.ui-side-section-body' );\n            _.each( category.get( 'items' ), function( item ) {\n                if ( item.enabled === undefined || item.enabled ) {\n                    $entries.append( $( '<div/>' ).addClass( 'ui-side-section-body-title' )\n                                                  .append( $( '<a/>' ).attr({\n                                                                href    : self.root + item.url,\n                                                                target  : item.target || 'galaxy_main' }).text( _l( item.title ) ) ) );\n                }\n            });\n            self.$el.append( $section );\n        });\n        this.page.$( '#galaxy_main' ).prop( 'src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status );\n    },\n\n    _templateSection : function( options ) {\n        return [\n            '<div>',\n                '<div class=\"ui-side-section-title\">' + _l( options.title ) + '</div>',\n                '<div class=\"ui-side-section-body\"/>',\n            '</div>'\n        ].join('');\n    },\n\n    _template : function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString : function() { return 'adminPanel' }\n});\n\nmodule.exports = AdminPanel;\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js"],"sourceRoot":""}