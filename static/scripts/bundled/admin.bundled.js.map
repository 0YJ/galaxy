{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js","webpack:///./galaxy/scripts/mvc/grid/grid-view.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/apps/panels/admin-panel.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js","webpack:///./galaxy/scripts/mvc/ui/ui-options.js","webpack:///./galaxy/scripts/mvc/ui/ui-list.js","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js","webpack:///./galaxy/scripts/mvc/ui/ui-table.js","webpack:///./galaxy/scripts/mvc/form/form-data.js","webpack:///./galaxy/scripts/mvc/grid/grid-model.js","webpack:///./galaxy/scripts/mvc/grid/grid-template.js","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js","webpack:///./galaxy/scripts/mvc/form/form-section.js","webpack:///./galaxy/scripts/mvc/form/form-repeat.js","webpack:///./galaxy/scripts/mvc/form/form-input.js","webpack:///./galaxy/scripts/mvc/form/form-parameters.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-content.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-genomespace.js","webpack:///./galaxy/scripts/mvc/tool/tool-genomespace.js","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js","webpack:///./galaxy/scripts/layout/router.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js","webpack:///./galaxy/scripts/mvc/form/form-wrapper.js","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js","webpack:///./galaxy/scripts/mvc/form/form-view.js"],"names":["webpackJsonp","10","module","exports","__webpack_require__","Backbone","$","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","Utils","ButtonDefault","View","extend","initialize","options","this","model","Model","id","uid","title","icon","cls","wait","wait_text","wait_cls","disabled","percentage","set","setElement","attr","append","$icon","$title","$progress","$progress_bar","listenTo","render","self","attributes","$el","removeClass","addClass","off","on","hide","onclick","tooltip","placement","css","width","prop","html","show","disable","enable","unwait","setIcon","ButtonLink","href","target","ButtonCheck","icons","value","onchange","get","new_val","total","ButtonIcon","$button","ButtonMenu","$menu","pull","onunload","visible","tag","collection","Collection","$root","display","where","length","e","preventDefault","remove","each","submodel","suboptions","$link","divider","addMenu","add","merge","apply","call","15","jQuery","_","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","dict_format","window","add_tag_to_grid_filter","tag_name","tag_value","is","slideToggle","add_filter_condition","url_base","items","url_data","filters","v","k","ajax","url","param","success","response","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","top","Galaxy","currHistoryPanel","loadCurrentHistory","allow_title_display","setWindowTitle","replace","find","header","body","footer","message","use_hide_message","setTimeout","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","val","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","text","filter","change","rating","set_page","execute","item","index","button","popup","operation","_add_operation","settings","operation_config","label","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","name","add_filter","t","filter_element","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","empty","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","findWhere","operations","item_ids","push","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","advanced_search","$div","closest","load","method","type","data","error","alert","response_text","insert","json","parseJSON","complete","156","GalaxyApp","AdminPanel","FormWrapper","GridView","QueryStringParsing","Router","Page","app","bootstrapped","debug","AdminRouter","routes","(/)admin(/)users","(/)admin(/)roles","(/)admin(/)groups","(/)admin(/)tool_versions","(/)admin(/)quotas","(/)admin(/)forms(/)(:form_id)","authenticate","args","user","show_users","page","root","params","show_roles","show_groups","show_tool_versions","show_quotas","show_forms","form_id","form_defs","reset_user_password","submit_title","redirect","manage_roles_and_groups_for_user","manage_users_and_groups_for_role","manage_users_and_roles_for_group","manage_users_and_groups_for_quota","create_role","create_group","create_quota","rename_role","rename_group","rename_quota","edit_quota","set_quota_default","config","active_view","Left","157","_l","status","categories","enabled","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","allow_user_impersonation","enable_quotas","_template","category","$section","_templateSection","$entries","router","join","toString","16","Buttons","data2","error_text","empty_text","multiple","searchable","optional","individual","pagesize","_changeData","_changeDisabled","_changeWait","_changeVisible","_changeValue","_renderSearchable","_renderClassic","$select","_getValue","trigger","$dropdown","$resize","$resize_icon","event","currentY","pageY","currentHeight","height","minHeight","Math","max","select2","all_button","option","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","callback","slice","more","formatResult","result","escape","reduce","memo","_setValue","isArray","first","exists","d","sorter","keep","sort","update","setOnChange","selected","a","b","isEmpty","17","Base","$message","$options","_templateOptions","_templateOption","_messageShow","values","BaseIcons","pair","Radio","prototype","Checkbox","RadioButton","18","Portlet","Ui","Message","portlet","Select","i","v_id","v_name","_refresh","lst","_templateRow","19","menu","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","li","map","checked","menuWidth","x","pageX","min","document","scrollLeft","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","create","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","22","content","ondblclick","onconfirm","selectable","cls_tr","$thead","$tbody","$tmessage","row","_row","row_count","events","dblclick","addHeader","appendHeader","align","wrapper","fade","_commit","del","delAll","before","after","size","fadeIn","_onclick","old_value","_ondblclick","23","Manager","checksum","sum","section","field","field_list","JSON","stringify","collapsed","flat_id","input_id","input_value","flat_dict","result_dict","element_list","convert","identifier","head","node","input","block_indices","block_prefix","block_label","pos","substr","test_param","selectedCase","matchCase","flat","ignore","collapsible_value","payload","p_id","dict","_iterate","match","matchModel","visitInputs","inputs","matchResponse","search","new_id","separator","Array","child","hasClass","input_list","truevalue","falsevalue","cases","prefix","context","key","cache","j","emit","27","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","cur_val","condition","condition_index","pairs","get_url","28","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_offset","max_range","max_page","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","29","step","precise","$text","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","30","Options","header_index","list","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","31","Repeat","InputElement","Parameters","parameters","input_def","_addConditional","_addRepeat","_addSection","_addRow","case_def","section_row","nonhidden","hidden","sub_section","_append","sub_section_id","block_index","repeat","ondel","onnew","n_cache","default","hideOptions","input_element","help","collapsible","collapsible_button","expanded","expand","hide_label","text_value","collapsible_preview","argument","color","style","backdrop","fixed","32","button_new","$list","button_delete","hideOperation","33","app_options","text_enable","text_disable","cls_enable","cls_disable","always_refresh","$field","$info","$preview","$collapsible","$collapsible_text","$collapsible_icon","$title_text","$error_text","$error","$backdrop","reset","help_text","help_argument","collapsible_state","34","SelectContent","SelectLibrary","SelectFtp","SelectGenomeSpace","ColorPicker","types","password","data_column","genomebuild","data_collection","integer","float","boolean","drill_down","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","fieldClass","_fieldSelect","_fieldText","_fieldData","extensions","flavor","is_workflow","SelectClass","_fieldDrilldown","Drilldown","area","str_value","Input","readonly","placeholder","datalist","_fieldSlider","Slider","_fieldHidden","Hidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","_fieldUpload","Upload","35","Batch","DISABLED","ENABLED","LINKED","Configurations","src","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","src_labels","hda","hdca","pagelimit","statustimer","button_product","$batch_div","$batch","linked","clone","lastenter","_handleDrop","history","_changeCurrent","_changeType","current","id_list","fields","_batch","details","hid","$batchfield","batchmode","button_type","config_id","textify","button_data","button_width","margin-left","select_options","ev","drop_data","parse","originalEvent","dataTransfer","getData","new_src","history_content_type","current_value","_handleDropStatus","map_over_type","36","Table","List","Libraries","LibraryDatasets","library_id","fetch","libraries","datasets","library_select","dataset_list","37","ftpfile_list","38","GenomespaceBrowser","browse_button","browseGenomeSpace","filename_textbox","token_textbox","openFileBrowser","successCallback","destination","token","39","GS_UI_URL","genomespace_ui_url","GS_UPLOAD_URL","newWin","open","successCalBack","addEventListener","focus","setCallbackOnGSUploadError","40","colors","standard","base","theme","$panel","$view","$value","$header","_build","$boxes","fadeOut","_templateCheck","rgb","hex","_content","line_def","$content","_templateContent","$line","$box","_templateBox","bottom","44","QUERY_STRING","__identifer","random","isEmptyObject","navigate","queryObj","pop","access_denied","persistent","5","Modal","Label","tagName","new_title","messageForDisplay","timeout","clearTimeout","UnescapedMessage","autocomplete","source","request","_onchange","attr_name","removeAttr","$hidden","$file","$wait","_readFile","file","files","reader","FileReader","onload","readAsText","Button","57","Form","done","form","buttons","submit_tooltip","submit_icon","_submit","fail","contentType","success_message","_showMessage","responseJSON","err_msg","parents","animate","scrollTop","8","scrollable","nopadding","onchange_title","$body","$title_icon","$buttons","$operations","collapse","make_text_editable","on_finish","enableButton","disableButton","showOperation","setOperation","9","FormSection","FormData","initial_errors","new_model","isEqual","new_options","opt","active","is_dynamic","highlight","silent","offset","errors","error_messages","_renderForm","current_check","refresh_on_change","new_check"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This module contains all button views. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: '',\n                icon: '',\n                cls: 'btn btn-default',\n                wait: false,\n                wait_text: 'Sending...',\n                wait_cls: 'btn btn-info',\n                disabled: false,\n                percentage: -1\n            }).set(options);\n            this.setElement($('<button/>').attr('type', 'button').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>')).append(this.$progress = $('<div/>').append(this.$progress_bar = $('<div/>'))));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass('ui-button-default').addClass(options.disabled && 'disabled').attr('id', options.id).attr('disabled', options.disabled).off('click').on('click', function () {\n                $('.tooltip').hide();\n                options.onclick && !self.disabled && options.onclick();\n            }).tooltip({ title: options.tooltip, placement: 'bottom' });\n            this.$progress.addClass('progress').css('display', options.percentage !== -1 ? 'block' : 'none');\n            this.$progress_bar.addClass('progress-bar').css({ width: options.percentage + '%' });\n            this.$icon.removeClass().addClass('icon fa');\n            this.$title.removeClass().addClass('title');\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop('disabled', true);\n                this.$icon.addClass('fa-spinner fa-spin ui-margin-right');\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon && options.title && this.$icon.addClass('ui-margin-right');\n            }\n        },\n\n        /** Show button */\n        show: function show() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function hide() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function disable() {\n            this.model.set('disabled', true);\n        },\n\n        /** Enable button */\n        enable: function enable() {\n            this.model.set('disabled', false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function wait() {\n            this.model.set('wait', true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function unwait() {\n            this.model.set('wait', false);\n        },\n\n        /** Change icon */\n        setIcon: function setIcon(icon) {\n            this.model.set('icon', icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: '',\n                icon: '',\n                cls: ''\n            }).set(options);\n            this.setElement($('<a/>').append(this.$icon = $('<span/>')));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr({ id: options.id,\n                href: options.href || 'javascript:void(0)',\n                title: options.title,\n                target: options.target || '_top',\n                disabled: options.disabled }).tooltip({ placement: 'bottom' }).off('click').on('click', function () {\n                options.onclick && !options.disabled && options.onclick();\n            });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: 'Select/Unselect all',\n                icons: ['fa-square-o', 'fa-minus-square-o', 'fa-check-square-o'],\n                value: 0,\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement($('<div/>').append(this.$icon = $('<span/>')).append(this.$title = $('<span/>')));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass('ui-button-check').off('click').on('click', function () {\n                self.model.set('value', self.model.get('value') === 0 && 2 || 0);\n                options.onclick && options.onclick();\n            });\n            this.$title.html(options.title);\n            this.$icon.removeClass().addClass('icon fa ui-margin-right').addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function value(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = new_val !== total && 1 || 2;\n                }\n                this.model.set('value', new_val);\n                this.model.get('onchange')(this.model.get('value'));\n            }\n            return this.model.get('value');\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: '',\n                icon: '',\n                cls: 'ui-button-icon',\n                disabled: false\n            }).set(options);\n            this.setElement($('<div/>').append(this.$button = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && 'disabled').attr('disabled', options.disabled).attr('id', options.id).off('click').on('click', function () {\n                $('.tooltip').hide();\n                !options.disabled && options.onclick && options.onclick();\n            });\n            this.$button.addClass('button').tooltip({ title: options.tooltip, placement: 'bottom' });\n            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n            this.$title.addClass('title').html(options.title);\n            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: '',\n                title: '',\n                pull: 'right',\n                icon: null,\n                onclick: null,\n                cls: 'ui-button-icon ui-button-menu',\n                tooltip: '',\n                target: '',\n                href: '',\n                onunload: null,\n                visible: true,\n                tag: ''\n            }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement($('<div/>').append(this.$root = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.listenTo(this.collection, 'change add remove reset', this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass('dropdown').addClass(options.cls).attr('id', options.id).css({ display: options.visible && this.collection.where({ visible: true }).length > 0 ? 'block' : 'none' });\n            this.$root.addClass('root button dropdown-toggle').attr('data-toggle', 'dropdown').tooltip({ title: options.tooltip, placement: 'bottom' }).off('click').on('click', function (e) {\n                $('.tooltip').hide();\n                e.preventDefault();\n                options.onclick && options.onclick();\n            });\n            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n            this.$title.removeClass().addClass('title').html(options.title);\n            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $('<ul/>').addClass('menu dropdown-menu').addClass('pull-' + self.model.get('pull')).attr('role', 'menu');\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function (submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $('<a/>').addClass('dropdown-item').attr({ href: suboptions.href, target: suboptions.target }).append($('<i/>').addClass('fa').addClass(suboptions.icon).css('display', suboptions.icon ? 'inline-block' : 'none')).append(suboptions.title).on('click', function (e) {\n                        if (suboptions.onclick) {\n                            e.preventDefault();\n                            suboptions.onclick();\n                        }\n                    });\n                    self.$menu.append($('<li/>').append($link));\n                    suboptions.divider && self.$menu.append($('<li/>').addClass('divider'));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function addMenu(options) {\n            this.collection.add(Utils.merge(options, {\n                title: '',\n                target: '',\n                href: '',\n                onclick: null,\n                divider: false,\n                visible: true,\n                icon: null,\n                cls: 'button-menu btn-group'\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 15:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(27), __webpack_require__(28), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n\n    // grid view\n    return Backbone.View.extend({\n\n        // model\n        grid: null,\n\n        // Initialize\n        initialize: function initialize(grid_config) {\n            this.grid = new GridModel();\n            this.dict_format = grid_config.dict_format;\n            this.title = grid_config.title;\n            var self = this;\n            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n                // Put tag name and value together.\n                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n                var advanced_search = $('#advanced-search').is(\":visible\");\n                if (!advanced_search) {\n                    $('#standard-search').slideToggle('fast');\n                    $('#advanced-search').slideToggle('fast');\n                }\n                self.add_filter_condition(\"tags\", tag);\n            };\n\n            // set element\n            if (this.dict_format) {\n                this.setElement('<div/>');\n                if (grid_config.url_base && !grid_config.items) {\n                    var url_data = grid_config.url_data || {};\n                    _.each(grid_config.filters, function (v, k) {\n                        url_data['f-' + k] = v;\n                    });\n                    $.ajax({\n                        url: grid_config.url_base + '?' + $.param(url_data),\n                        success: function success(response) {\n                            response.embedded = grid_config.embedded;\n                            response.filters = grid_config.filters || {};\n                            self.init_grid(response);\n                        }\n                    });\n                } else {\n                    this.init_grid(grid_config);\n                }\n            } else {\n                this.setElement('#grid-container');\n                this.init_grid(grid_config);\n            }\n\n            // fix padding\n            if (grid_config.use_panels) {\n                $('#center').css({\n                    padding: '10px',\n                    overflow: 'auto'\n                });\n            }\n        },\n\n        // refresh frames\n        handle_refresh: function handle_refresh(refresh_frames) {\n            if (refresh_frames) {\n                if ($.inArray('history', refresh_frames) > -1) {\n                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                }\n            }\n        },\n\n        // Initialize\n        init_grid: function init_grid(grid_config) {\n            this.grid.set(grid_config);\n\n            // get options\n            var options = this.grid.attributes;\n\n            if (this.allow_title_display && options.title) {\n                Utils.setWindowTitle(options.title);\n            }\n            // handle refresh requests\n            this.handle_refresh(options.refresh_frames);\n\n            // strip protocol and domain\n            var url = this.grid.get('url_base');\n            url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n            this.grid.set('url_base', url);\n\n            // append main template\n            this.$el.html(Templates.grid(options));\n\n            // update div contents\n            this.$el.find('#grid-table-header').html(Templates.header(options));\n            this.$el.find('#grid-table-body').html(Templates.body(options));\n            this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n            // update message\n            if (options.message) {\n                this.$el.find('#grid-message').html(Templates.message(options));\n                var self = this;\n                if (options.use_hide_message) {\n                    setTimeout(function () {\n                        self.$el.find('#grid-message').html('');\n                    }, 5000);\n                }\n            }\n\n            // configure elements\n            this.init_grid_elements();\n            this.init_grid_controls();\n\n            // attach global event handler\n            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n            init_refresh_on_change();\n        },\n\n        // Initialize grid controls\n        init_grid_controls: function init_grid_controls() {\n\n            // link\n            var self = this;\n\n            // Initialize grid operation button.\n            this.$el.find('.operation-button').each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.submit_operation(this);\n                    return false;\n                });\n            });\n\n            // Initialize text filters to select text on click and use normal font when user is typing.\n            this.$el.find('input[type=text]').each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    $(this).select();\n                }).keyup(function () {\n                    $(this).css('font-style', 'normal');\n                });\n            });\n\n            // Initialize sort links.\n            this.$el.find('.sort-link').each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_sort_condition($(this).attr('sort_key'));\n                    return false;\n                });\n            });\n\n            // Initialize text filters.\n            this.$el.find('.text-filter-form').each(function () {\n                $(this).off();\n                $(this).submit(function () {\n                    var column_key = $(this).attr('column_key');\n                    var text_input_obj = $('#input-' + column_key + '-filter');\n                    var text_input = text_input_obj.val();\n                    text_input_obj.val('');\n                    self.add_filter_condition(column_key, text_input);\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find('.text-filter-val > a').each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    // Remove visible element.\n                    $(this).parent().remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                    // Return\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find('.categorical-filter > a').each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_categorical_filter($(this).attr('filter_key'), $(this).attr('filter_val'));\n                    return false;\n                });\n            });\n\n            // Initialize standard, advanced search toggles.\n            this.$el.find('.advanced-search-toggle').each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.$el.find('#standard-search').slideToggle('fast');\n                    self.$el.find('#advanced-search').slideToggle('fast');\n                    return false;\n                });\n            });\n\n            // Add event to check all box\n            this.$el.find('#check_all').off();\n            this.$el.find('#check_all').on('click', function () {\n                self.check_all_items();\n            });\n        },\n\n        // Initialize grid elements.\n        init_grid_elements: function init_grid_elements() {\n            // Initialize grid selection checkboxes.\n            this.$el.find('.grid').each(function () {\n                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n                var check_count = $(this).find(\"span.grid-selected-count\");\n                var update_checked = function update_checked() {\n                    check_count.text($(checkboxes).filter(\":checked\").length);\n                };\n\n                $(checkboxes).each(function () {\n                    $(this).change(update_checked);\n                });\n                update_checked();\n            });\n\n            // Initialize ratings.\n            if (this.$el.find('.community_rating_star').length !== 0) this.$el.find('.community_rating_star').rating({});\n\n            // get options\n            var options = this.grid.attributes;\n            var self = this;\n\n            //\n            // add page click events\n            //\n            this.$el.find('.page-link > a').each(function () {\n                $(this).click(function () {\n                    self.set_page($(this).attr('page_num'));\n                    return false;\n                });\n            });\n\n            //\n            // add inbound/outbound events\n            //\n            this.$el.find('.use-target').each(function () {\n                $(this).click(function (e) {\n                    self.execute({\n                        href: $(this).attr('href'),\n                        target: $(this).attr('target')\n                    });\n                    return false;\n                });\n            });\n\n            // empty grid?\n            var items_length = options.items.length;\n            if (items_length == 0) {\n                return;\n            }\n\n            // add operation popup menus\n            _.each(options.items, function (item, index) {\n                var button = self.$('#grid-' + index + '-popup').off();\n                var popup = new PopupMenu(button);\n                _.each(options['operations'], function (operation) {\n                    self._add_operation(popup, operation, item);\n                });\n            });\n        },\n\n        /** Add an operation to the items menu */\n        _add_operation: function _add_operation(popup, operation, item) {\n            var self = this;\n            var settings = item.operation_config[operation.label];\n            if (settings.allowed && operation.allow_popup) {\n                popup.addItem({\n                    html: operation.label,\n                    href: settings.url_args,\n                    target: settings.target,\n                    confirmation_text: operation.confirm,\n                    func: function func(e) {\n                        e.preventDefault();\n                        var label = $(e.target).html();\n                        if (operation.onclick) {\n                            operation.onclick(item.encode_id);\n                        } else {\n                            self.execute(this.findItemByHtml(label));\n                        }\n                    }\n                });\n            }\n        },\n\n        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n        add_filter_condition: function add_filter_condition(name, value) {\n            // Do nothing is value is empty.\n            if (value === \"\") {\n                return false;\n            }\n\n            // Add condition to grid.\n            this.grid.add_filter(name, value, true);\n\n            // Add button that displays filter and provides a button to delete it.\n            var t = $(Templates.filter_element(name, value));\n            var self = this;\n            t.click(function () {\n                // Remove visible element.\n                $(this).remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition(name, value);\n            });\n\n            // append to container\n            var container = this.$el.find('#' + name + '-filtering-criteria');\n            container.append(t);\n\n            // execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n        remove_filter_condition: function remove_filter_condition(name, value) {\n            // Remove filter condition.\n            this.grid.remove_filter(name, value);\n\n            // Execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set sort condition for grid.\n        set_sort_condition: function set_sort_condition(col_key) {\n            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n            // currently sorted column, sort is reversed.\n            var cur_sort = this.grid.get('sort_key');\n            var new_sort = col_key;\n            if (cur_sort.indexOf(col_key) !== -1) {\n                // Reverse sort.\n                if (cur_sort.substring(0, 1) !== '-') {\n                    new_sort = '-' + col_key;\n                }\n            }\n\n            // Remove sort arrows elements.\n            this.$el.find('.sort-arrow').remove();\n\n            // Add sort arrow element to new sort column.\n            var sort_arrow = new_sort.substring(0, 1) == '-' ? '&uarr;' : '&darr;';\n            var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n            // Add to header\n            this.$el.find('#' + col_key + '-header').append(t);\n\n            // Update grid.\n            this.grid.set('sort_key', new_sort);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set new value for categorical filter.\n        set_categorical_filter: function set_categorical_filter(name, new_value) {\n            // Update filter hyperlinks to reflect new filter value.\n            var category_filter = this.grid.get('categorical_filters')[name],\n                cur_value = this.grid.get('filters')[name];\n            var self = this;\n            this.$el.find('.' + name + '-filter').each(function () {\n                var text = $.trim($(this).text());\n                var filter = category_filter[text];\n                var filter_value = filter[name];\n                if (filter_value == new_value) {\n                    // Remove filter link since grid will be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    $(this).empty();\n                    $(this).addClass('current-filter');\n                    $(this).append(text);\n                } else if (filter_value == cur_value) {\n                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    $(this).empty();\n                    var t = $('<a href=\"#\">' + text + '</a>');\n                    t.click(function () {\n                        self.set_categorical_filter(name, filter_value);\n                    });\n                    $(this).removeClass('current-filter');\n                    $(this).append(t);\n                }\n            });\n\n            // Update grid.\n            this.grid.add_filter(name, new_value);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set page to view.\n        set_page: function set_page(new_page) {\n            // Update page hyperlink to reflect new page.\n            var self = this;\n            this.$el.find('.page-link').each(function () {\n                var id = $(this).attr('id'),\n                    page_num = parseInt(id.split('-')[2], 10),\n                    // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                    text;\n                if (page_num === new_page) {\n                    // Remove link to page since grid will be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    text = $(this).children().text();\n                    $(this).empty();\n                    $(this).addClass('inactive-link');\n                    $(this).text(text);\n                } else if (page_num === cur_page) {\n                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    text = $(this).text();\n                    $(this).empty();\n                    $(this).removeClass('inactive-link');\n                    var t = $('<a href=\"#\">' + text + '</a>');\n                    t.click(function () {\n                        self.set_page(page_num);\n                    });\n                    $(this).append(t);\n                }\n            });\n\n            if (new_page === 'all') {\n                this.grid.set('cur_page', new_page);\n            } else {\n                this.grid.set('cur_page', parseInt(new_page, 10));\n            }\n            this.execute();\n        },\n\n        // confirmation/submission of operation request\n        submit_operation: function submit_operation(operation_button, confirmation_text) {\n            // identify operation\n            var operation_name = $(operation_button).val();\n\n            // verify in any item is selected\n            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n            if (!number_of_checked_ids > 0) {\n                return false;\n            }\n\n            // Check to see if there's grid confirmation text for this operation\n            var operation = _.findWhere(this.grid.attributes.operations, { label: operation_name });\n            if (operation && !confirmation_text) {\n                confirmation_text = operation.confirm || '';\n            }\n\n            // collect ids\n            var item_ids = [];\n            this.$el.find('input[name=id]:checked').each(function () {\n                item_ids.push($(this).val());\n            });\n\n            // execute operation\n            var options = {\n                operation: operation_name,\n                id: item_ids,\n                confirmation_text: confirmation_text\n            };\n            if (operation.target == 'top') {\n                options = _.extend(options, {\n                    href: operation.href,\n                    target: operation.target\n                });\n            }\n            this.execute(options);\n            return true;\n        },\n\n        check_all_items: function check_all_items() {\n            var check = this.$('.grid-row-select-checkbox');\n            var state = this.$('#check_all').prop('checked');\n            _.each(check, function (c) {\n                $(c).prop('checked', state);\n            });\n            this.init_grid_elements();\n        },\n\n        // Go back to page one; this is useful when a filter is applied.\n        go_page_one: function go_page_one() {\n            // Need to go back to page 1 if not showing all.\n            var cur_page = this.grid.get('cur_page');\n            if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n                this.grid.set('cur_page', 1);\n            }\n        },\n\n        //\n        // execute operations and hyperlink requests\n        //\n        execute: function execute(options) {\n            // get url\n            var id = null;\n            var href = null;\n            var operation = null;\n            var confirmation_text = null;\n            var target = null;\n\n            // check for options\n            if (options) {\n                // get options\n                href = options.href;\n                operation = options.operation;\n                id = options.id;\n                confirmation_text = options.confirmation_text;\n                target = options.target;\n\n                // check if input contains the operation tag\n                if (href !== undefined && href.indexOf('operation=') != -1) {\n                    // Get operation, id in hyperlink's href.\n                    var href_parts = href.split(\"?\");\n                    if (href_parts.length > 1) {\n                        var href_parms_str = href_parts[1];\n                        var href_parms = href_parms_str.split(\"&\");\n                        for (var index = 0; index < href_parms.length; index++) {\n                            if (href_parms[index].indexOf('operation') != -1) {\n                                // Found operation parm; get operation value.\n                                operation = href_parms[index].split('=')[1];\n                                operation = operation.replace(/\\+/g, ' ');\n                            } else if (href_parms[index].indexOf('id') != -1) {\n                                // Found id parm; get id value.\n                                id = href_parms[index].split('=')[1];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // check for operation details\n            if (operation && id) {\n                // show confirmation box\n                if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null') if (!confirm(confirmation_text)) return false;\n\n                // use small characters for operation?!\n                operation = operation.toLowerCase();\n\n                // Update grid.\n                this.grid.set({\n                    operation: operation,\n                    item_ids: id\n                });\n\n                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                if (target == 'top') {\n                    window.top.location = href + '?' + $.param(this.grid.get_url_data());\n                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            }\n\n            // refresh grid\n            if (href) {\n                this.go_to(target, href);\n                return false;\n            }\n\n            // refresh grid\n            if (this.grid.get('async') || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        },\n\n        // go to url\n        go_to: function go_to(target, href) {\n            // get aysnc status\n            var async = this.grid.get('async');\n            this.grid.set('async', false);\n\n            // get slide status\n            var advanced_search = this.$el.find('#advanced-search').is(':visible');\n            this.grid.set('advanced_search', advanced_search);\n\n            // get default url\n            if (!href) {\n                href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n            }\n\n            // clear grid of transient request attributes.\n            this.grid.set({\n                operation: undefined,\n                item_ids: undefined,\n                async: async\n            });\n            switch (target) {\n                case 'inbound':\n                    // this currently assumes that there is only a single grid shown at a time\n                    var $div = $('.grid-header').closest('.inbound');\n                    if ($div.length !== 0) {\n                        $div.load(href);\n                        return;\n                    }\n                    break;\n                case 'top':\n                    window.top.location = href;\n                    break;\n                default:\n                    window.location = href;\n            }\n        },\n\n        // Update grid.\n        update_grid: function update_grid() {\n            // If there's an operation, do POST; otherwise, do GET.\n            var method = this.grid.get('operation') ? 'POST' : 'GET';\n\n            // Show overlay to indicate loading and prevent user actions.\n            this.$el.find('.loading-elt-overlay').show();\n            var self = this;\n            $.ajax({\n                type: method,\n                url: self.grid.get('url_base'),\n                data: self.grid.get_url_data(),\n                error: function error(response) {\n                    alert('Grid refresh failed');\n                },\n                success: function success(response_text) {\n\n                    // backup\n                    var embedded = self.grid.get('embedded');\n                    var insert = self.grid.get('insert');\n                    var advanced_search = self.$el.find('#advanced-search').is(':visible');\n\n                    // request new configuration\n                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                    // update\n                    json.embedded = embedded;\n                    json.insert = insert;\n                    json.advanced_search = advanced_search;\n\n                    // Initialize new grid config\n                    self.init_grid(json);\n\n                    // Hide loading overlay.\n                    self.$el.find('.loading-elt-overlay').hide();\n                },\n                complete: function complete() {\n                    // Clear grid of transient request attributes.\n                    self.grid.set({\n                        operation: undefined,\n                        item_ids: undefined\n                    });\n                }\n            });\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 156:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(_) {\n\nvar jQuery = __webpack_require__(0),\n    $ = jQuery,\n    GalaxyApp = __webpack_require__(42).GalaxyApp,\n    AdminPanel = __webpack_require__(157),\n    FormWrapper = __webpack_require__(57),\n    GridView = __webpack_require__(15),\n    Ui = __webpack_require__(5),\n    QueryStringParsing = __webpack_require__(20),\n    Router = __webpack_require__(44),\n    Utils = __webpack_require__(3),\n    Page = __webpack_require__(43);\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new GalaxyApp(options, bootstrapped);\n    Galaxy.debug('admin app');\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            '(/)admin(/)users': 'show_users',\n            '(/)admin(/)roles': 'show_roles',\n            '(/)admin(/)groups': 'show_groups',\n            '(/)admin(/)tool_versions': 'show_tool_versions',\n            '(/)admin(/)quotas': 'show_quotas',\n            '(/)admin(/)forms(/)(:form_id)': 'show_forms'\n        },\n\n        authenticate: function authenticate(args, name) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get('is_admin');\n        },\n\n        show_users: function show_users() {\n            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true }));\n        },\n\n        show_roles: function show_roles() {\n            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/roles_list', url_data: Galaxy.params, dict_format: true }));\n        },\n\n        show_groups: function show_groups() {\n            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/groups_list', url_data: Galaxy.params, dict_format: true }));\n        },\n\n        show_tool_versions: function show_tool_versions() {\n            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/tool_versions_list', url_data: Galaxy.params, dict_format: true }));\n        },\n\n        show_quotas: function show_quotas() {\n            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/quotas_list', url_data: Galaxy.params, dict_format: true }));\n        },\n\n        show_forms: function show_forms(form_id) {\n            var id = '?id=' + QueryStringParsing.get('id');\n            var form_defs = {\n                reset_user_password: {\n                    title: 'Reset passwords',\n                    url: 'admin/reset_user_password' + id,\n                    icon: 'fa-user',\n                    submit_title: 'Save new password',\n                    redirect: 'admin/users'\n                },\n                manage_roles_and_groups_for_user: {\n                    url: 'admin/manage_roles_and_groups_for_user' + id,\n                    icon: 'fa-users',\n                    redirect: 'admin/users'\n                },\n                manage_users_and_groups_for_role: {\n                    url: 'admin/manage_users_and_groups_for_role' + id,\n                    redirect: 'admin/roles'\n                },\n                manage_users_and_roles_for_group: {\n                    url: 'admin/manage_users_and_roles_for_group' + id,\n                    redirect: 'admin/groups'\n                },\n                manage_users_and_groups_for_quota: {\n                    url: 'admin/manage_users_and_groups_for_quota' + id,\n                    redirect: 'admin/quotas'\n                },\n                create_role: {\n                    url: 'admin/create_role',\n                    redirect: 'admin/roles'\n                },\n                create_group: {\n                    url: 'admin/create_group',\n                    redirect: 'admin/groups'\n                },\n                create_quota: {\n                    url: 'admin/create_quota',\n                    redirect: 'admin/quotas'\n                },\n                rename_role: {\n                    url: 'admin/rename_role' + id,\n                    redirect: 'admin/roles'\n                },\n                rename_group: {\n                    url: 'admin/rename_group' + id,\n                    redirect: 'admin/groups'\n                },\n                rename_quota: {\n                    url: 'admin/rename_quota' + id,\n                    redirect: 'admin/quotas'\n                },\n                edit_quota: {\n                    url: 'admin/edit_quota' + id,\n                    redirect: 'admin/quotas'\n                },\n                set_quota_default: {\n                    url: 'admin/set_quota_default' + id,\n                    redirect: 'admin/quotas'\n                }\n            };\n            this.page.display(new FormWrapper.View(form_defs[form_id]));\n        }\n    });\n\n    $(function () {\n        _.extend(options.config, { active_view: 'admin' });\n        Utils.setWindowTitle(\"Administration\");\n        Galaxy.page = new Page.View(_.extend(options, {\n            Left: AdminPanel,\n            Router: AdminRouter\n        }));\n    });\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 157:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nvar _l = __webpack_require__(4);\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function initialize(page, options) {\n        var self = this;\n        this.page = page;\n        this.root = options.root;\n        this.config = options.config;\n        this.settings = options.settings;\n        this.message = options.message;\n        this.status = options.status;\n        this.model = new Backbone.Model({\n            title: _l('Administration')\n        });\n        this.categories = new Backbone.Collection([{\n            title: 'Server',\n            items: [{\n                title: 'Data types registry',\n                url: 'admin/view_datatypes_registry'\n            }, {\n                title: 'Data tables registry',\n                url: 'admin/view_tool_data_tables'\n            }, {\n                title: 'Display applications',\n                url: 'admin/display_applications'\n            }, {\n                title: 'Manage jobs',\n                url: 'admin/jobs'\n            }]\n        }, {\n            title: 'Tools and Tool Shed',\n            items: [{\n                title: 'Search Tool Shed',\n                url: 'admin_toolshed/browse_tool_sheds',\n                enabled: self.settings.is_tool_shed_installed\n            }, {\n                title: 'Search Tool Shed (Beta)',\n                url: 'admin_toolshed/browse_toolsheds',\n                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            }, {\n                title: 'Monitor installing repositories',\n                url: 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n                enabled: self.settings.installing_repository_ids\n            }, {\n                title: 'Manage installed tools',\n                url: 'admin_toolshed/browse_repositories',\n                enabled: self.settings.is_repo_installed\n            }, {\n                title: 'Reset metadata',\n                url: 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n                enabled: self.settings.is_repo_installed\n            }, {\n                title: 'Download local tool',\n                url: 'admin/package_tool'\n            }, {\n                title: 'Tool lineage',\n                url: 'admin/tool_versions',\n                target: '__use_router__'\n            }, {\n                title: 'Reload a tool\\'s configuration',\n                url: 'admin/reload_tool'\n            }, {\n                title: 'Review tool migration stages',\n                url: 'admin/review_tool_migration_stages'\n            }, {\n                title: 'View Tool Error Logs',\n                url: 'admin/tool_errors'\n            }, {\n                title: 'Manage Display Whitelist',\n                url: 'admin/sanitize_whitelist'\n            }, {\n                title: 'Manage Tool Dependencies',\n                url: 'admin/manage_tool_dependencies'\n            }]\n        }, {\n            title: 'User Management',\n            items: [{\n                title: 'Users',\n                url: 'admin/users',\n                target: '__use_router__'\n            }, {\n                title: 'Groups',\n                url: 'admin/groups',\n                target: '__use_router__'\n            }, {\n                title: 'Roles',\n                url: 'admin/roles',\n                target: '__use_router__'\n            }, {\n                title: 'API keys',\n                url: 'userskeys/all_users'\n            }, {\n                title: 'Impersonate a user',\n                url: 'admin/impersonate',\n                enabled: self.config.allow_user_impersonation\n            }]\n        }, {\n            title: 'Data',\n            items: [{\n                title: 'Quotas',\n                url: 'admin/quotas',\n                target: '__use_router__',\n                enabled: self.config.enable_quotas\n            }, {\n                title: 'Data libraries',\n                url: 'library_admin/browse_libraries'\n            }, {\n                title: 'Roles',\n                url: 'admin/roles',\n                target: '__use_router__'\n            }, {\n                title: 'Local data',\n                url: 'data_manager'\n            }]\n        }, {\n            title: 'Form Definitions',\n            items: [{\n                title: 'Form definitions',\n                url: 'forms/browse_form_definitions'\n            }]\n        }, {\n            title: 'Sample Tracking',\n            items: [{\n                title: 'Sequencers and external services',\n                url: 'external_service/browse_external_services'\n            }, {\n                title: 'Request types',\n                url: 'request_type/browse_request_types'\n            }, {\n                title: 'Sequencing requests',\n                url: 'requests_admin/browse_requests'\n            }, {\n                title: 'Find samples',\n                url: 'requests_common/find_samples?cntrller=requests_admin'\n            }]\n        }]);\n        this.setElement(this._template());\n    },\n\n    render: function render() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each(function (category) {\n            var $section = $(self._templateSection(category.attributes));\n            var $entries = $section.find('.ui-side-section-body');\n            _.each(category.get('items'), function (item) {\n                if (item.enabled === undefined || item.enabled) {\n                    var $link = $('<a/>').attr({ href: self.root + item.url }).text(_l(item.title));\n                    if (item.target == '__use_router__') {\n                        $link.on('click', function (e) {\n                            e.preventDefault();self.page.router.push(item.url);\n                        });\n                    } else {\n                        $link.attr('target', 'galaxy_main');\n                    }\n                    $entries.append($('<div/>').addClass('ui-side-section-body-title').append($link));\n                }\n            });\n            self.$el.append($section);\n        });\n        this.page.$('#galaxy_main').prop('src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status);\n    },\n\n    _templateSection: function _templateSection(options) {\n        return ['<div>', '<div class=\"ui-side-section-title\">' + _l(options.title) + '</div>', '<div class=\"ui-side-section-body\"/>', '</div>'].join('');\n    },\n\n    _template: function _template() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString: function toString() {\n        return 'adminPanel';\n    }\n});\n\nmodule.exports = AdminPanel;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 16:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class creates/wraps a default html select field as backbone class.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: 'ui-select',\n                error_text: 'No options available',\n                empty_text: 'Nothing selected',\n                visible: true,\n                wait: false,\n                multiple: false,\n                searchable: true,\n                optional: false,\n                disabled: false,\n                onchange: function onchange() {},\n                value: null,\n                individual: false,\n                pagesize: 20\n            }).set(options);\n            this.on('change', function () {\n                self.model.get('onchange') && self.model.get('onchange')(self.value());\n            });\n            this.listenTo(this.model, 'change:data', this._changeData, this);\n            this.listenTo(this.model, 'change:disabled', this._changeDisabled, this);\n            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n            this.listenTo(this.model, 'change:value', this._changeValue, this);\n            this.listenTo(this.model, 'change:multiple change:searchable change:cls change:id', this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.model.get('searchable') ? this._renderSearchable() : this._renderClassic();\n            this.$el.addClass(this.model.get('cls')).attr('id', this.model.get('id'));\n            this.$select.empty().addClass('select').attr('id', this.model.get('id') + '_select').prop('multiple', this.model.get('multiple')).on('change', function () {\n                self.value(self._getValue());\n                self.trigger('change');\n            });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function _renderClassic() {\n            var self = this;\n            this.$el.addClass(this.model.get('multiple') ? 'ui-select-multiple' : 'ui-select').append(this.$select = $('<select/>')).append(this.$dropdown = $('<div/>')).append(this.$resize = $('<div/>').append(this.$resize_icon = $('<i/>')));\n            if (this.model.get('multiple')) {\n                this.$dropdown.hide();\n                this.$resize_icon.addClass('fa fa-angle-double-right fa-rotate-45').show();\n                this.$resize.removeClass().addClass('icon-resize').show().off('mousedown').on('mousedown', function (event) {\n                    var currentY = event.pageY;\n                    var currentHeight = self.$select.height();\n                    self.minHeight = self.minHeight || currentHeight;\n                    $('#dd-helper').show().on('mousemove', function (event) {\n                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n                    }).on('mouseup mouseleave', function () {\n                        $('#dd-helper').hide().off();\n                    });\n                });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function _renderSearchable() {\n            var self = this;\n            this.$el.append(this.$select = $('<div/>')).append(this.$dropdown = $('<div/>'));\n            this.$dropdown.hide();\n            if (!this.model.get('multiple')) {\n                this.$dropdown.show().on('click', function () {\n                    self.$select.select2 && self.$select.select2('open');\n                });\n            }\n            this.all_button = null;\n            if (this.model.get('multiple') && !this.model.get('individual')) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 && _.each(self.model.get('data'), function (option) {\n                            new_value.push(option.value);\n                        });\n                        self.value(new_value);\n                        self.trigger('change');\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function _match(term, text) {\n            return !term || term == '' || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n        },\n\n        /** Updates the selection options */\n        _changeData: function _changeData() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get('multiple') && this.model.get('optional')) {\n                this.data.push({ value: '__null__', label: self.model.get('empty_text') });\n            }\n            _.each(this.model.get('data'), function (option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({ value: '__null__', label: this.model.get('error_text') });\n            }\n            if (this.model.get('searchable')) {\n                this.data2 = [];\n                _.each(this.data, function (option, index) {\n                    self.data2.push({ order: index, id: option.value, text: option.label, tags: option.tags });\n                });\n                this.$select.data('select2') && this.$select.select2('destroy');\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get('multiple'),\n                    multiple: this.model.get('multiple'),\n                    query: function query(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get('pagesize');\n                        var results = _.filter(self.data2, function (e) {\n                            var found = false;\n                            _.each(e.tags, function (tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function formatResult(result) {\n                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n                            if (self.matched_tags[tag]) {\n                                return memo + '&nbsp;' + '<div class=\"label label-info\">' + _.escape(tag) + '</div>';\n                            }\n                            return memo;\n                        }, '') + '</div>';\n                    }\n                });\n                this.$('.select2-container .select2-search input').off('blur');\n            } else {\n                this.$select.find('option').remove();\n                _.each(this.data, function (option) {\n                    self.$select.append($('<option/>').attr('value', option.value).html(_.escape(option.label)));\n                });\n            }\n            this.model.set('disabled', this.length() == 0);\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function _changeDisabled() {\n            if (this.model.get('searchable')) {\n                this.$select.select2(this.model.get('disabled') ? 'disable' : 'enable');\n            } else {\n                this.$select.prop('disabled', this.model.get('disabled'));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function _changeWait() {\n            this.$dropdown.removeClass().addClass('icon-dropdown fa').addClass(this.model.get('wait') ? 'fa-spinner fa-spin' : 'fa-caret-down');\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n            this.$select[this.model.get('visible') ? 'show' : 'hide']();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get('value'));\n            if (this.model.get('multiple')) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n                }\n            } else if (this._getValue() === null && !this.model.get('optional')) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set('value', new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function first() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function exists(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function text() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : '';\n        },\n\n        /** Show the select field */\n        show: function show() {\n            this.model.set('visible', true);\n        },\n\n        /** Hide the select field */\n        hide: function hide() {\n            this.model.set('visible', false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set('wait', true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set('wait', false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function disabled() {\n            return this.model.get('disabled');\n        },\n\n        /** Enable the select field */\n        enable: function enable() {\n            this.model.set('disabled', false);\n        },\n\n        /** Disable the select field */\n        disable: function disable() {\n            this.model.set('disabled', true);\n        },\n\n        /** Update all available options at once */\n        add: function add(options, sorter) {\n            _.each(this.model.get('data'), function (v) {\n                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set('data', options);\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set('data', options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function setOnChange(callback) {\n            this.model.set('onchange', callback);\n        },\n\n        /** Number of available options */\n        length: function length() {\n            return $.isArray(this.model.get('data')) ? this.model.get('data').length : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = '__null__';\n            }\n            if (this.model.get('multiple')) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = '__null__';\n                }\n            }\n            if (this.model.get('searchable')) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function (v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2('data', new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var val = null;\n            if (this.model.get('searchable')) {\n                var selected = this.$select.select2('data');\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function (a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function (v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Base class for options based ui elements **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                visible: true,\n                data: [],\n                id: Utils.uid(),\n                error_text: 'No options available.',\n                wait_text: 'Please wait...',\n                multiple: false,\n                optional: false,\n                onchange: function onchange() {}\n            }).set(options);\n            this.listenTo(this.model, 'change:value', this._changeValue, this);\n            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n            this.listenTo(this.model, 'change:data', this._changeData, this);\n            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n            this.on('change', function () {\n                self.model.get('onchange')(self.value());\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.$el.empty().removeClass().addClass('ui-options').append(this.$message = $('<div/>')).append(this.$menu = $('<div/>').addClass('ui-options-menu')).append(this.$options = $(this._template()));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get('multiple')) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        self.$('input').prop('checked', self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger('change');\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set('data', options);\n        },\n\n        _changeData: function _changeData() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(this._templateOptions(this.model.get('data')));\n            } else {\n                _.each(this.model.get('data'), function (option) {\n                    self.$options.append($(self._templateOption(option)).addClass('ui-option').tooltip({ title: option.tooltip, placement: 'bottom' }));\n                });\n            }\n            var self = this;\n            this.$('input').on('change', function () {\n                self.value(self._getValue());\n                self.trigger('change');\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n        },\n\n        _changeWait: function _changeWait() {\n            if (this.model.get('wait')) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get('wait_text'), 'info');\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get('error_text'), 'danger');\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css('display', 'inline-block');\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get('value'));\n            if (this._getValue() === null && !this.model.get('multiple') && !this.model.get('optional')) {\n                this._setValue(this.first());\n            }\n            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set('value', new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function first() {\n            var options = this.$('input').first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set('wait', true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set('wait', false);\n        },\n\n        /** Returns the number of options */\n        length: function length() {\n            return this.$('.ui-option').length;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$('input').prop('checked', false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function (v) {\n                        self.$('input[value=\"' + v + '\"]').first().prop('checked', true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function _getValue() {\n            var selected = [];\n            this.$(':checked').each(function () {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get('multiple') ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function _messageShow(text, status) {\n            this.$message.show().removeClass().addClass('ui-message alert alert-' + status).html(text);\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $('<div/>').addClass('ui-options-list');\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function _templateOption(pair) {\n            var id = Utils.uid();\n            return $('<div/>').addClass('ui-option').append($('<input/>').attr({\n                id: id,\n                type: this.model.get('type'),\n                name: this.model.id,\n                value: pair.value })).append($('<label/>').addClass('ui-options-label').attr('for', id).html(pair.label));\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = 'radio';\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = 'checkbox';\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function initialize(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function _setValue(new_value) {\n            if (new_value !== undefined) {\n                this.$('input').prop('checked', false);\n                this.$('label').removeClass('active');\n                this.$('[value=\"' + new_value + '\"]').prop('checked', true).closest('label').addClass('active');\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function _templateOption(pair) {\n            var $el = $('<label/>').addClass('btn btn-default');\n            pair.icon && $el.append($('<i/>').addClass('fa').addClass(pair.icon).addClass(!pair.label && 'no-padding'));\n            $el.append($('<input/>').attr({ type: 'radio', name: this.model.id, value: pair.value }));\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $('<div/>').addClass('btn-group ui-radiobutton').attr('data-toggle', 'buttons');\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 18:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n\n    // ui list element\n    var View = Backbone.View.extend({\n        // create portlet to keep track of selected list elements\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // initialize options\n            this.options = options;\n            this.name = options.name || 'element';\n            this.multiple = options.multiple || false;\n\n            // create message handler\n            this.message = new Ui.Message();\n\n            // create portlet\n            this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\n            // create select field containing the options which can be inserted into the list\n            this.select = new Ui.Select.View({ optional: options.optional });\n\n            // create insert new list element button\n            this.button = new Ui.ButtonIcon({\n                icon: 'fa fa-sign-in',\n                tooltip: 'Insert new ' + this.name,\n                onclick: function onclick() {\n                    self.add({\n                        id: self.select.value(),\n                        name: self.select.text()\n                    });\n                }\n            });\n\n            // build main element\n            this.setElement(this._template(options));\n            this.$('.ui-list-message').append(this.message.$el);\n            this.$('.ui-list-portlet').append(this.portlet.$el);\n            this.$('.ui-list-button').append(this.button.$el);\n            this.$('.ui-list-select').append(this.select.$el);\n        },\n\n        /** Return/Set currently selected list elements */\n        value: function value(val) {\n            // set new value\n            if (val !== undefined) {\n                this.portlet.empty();\n                if ($.isArray(val)) {\n                    for (var i in val) {\n                        var v = val[i];\n                        var v_id = null;\n                        var v_name = null;\n                        if ($.type(v) != 'string') {\n                            v_id = v.id;\n                            v_name = v.name;\n                        } else {\n                            v_id = v_name = v;\n                        }\n                        if (v_id != null) {\n                            this.add({\n                                id: v_id,\n                                name: v_name\n                            });\n                        }\n                    }\n                }\n                this._refresh();\n            }\n            // get current value\n            var lst = [];\n            this.$('.ui-list-id').each(function () {\n                lst.push({\n                    id: $(this).prop('id'),\n                    name: $(this).find('.ui-list-name').html()\n                });\n            });\n            if (lst.length == 0) {\n                return null;\n            }\n            return lst;\n        },\n\n        /** Add row */\n        add: function add(options) {\n            var self = this;\n            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n                if (!Utils.isEmpty(options.id)) {\n                    var $el = $(this._templateRow({\n                        id: options.id,\n                        name: options.name\n                    }));\n                    $el.on('click', function () {\n                        $el.remove();\n                        self._refresh();\n                    });\n                    $el.on('mouseover', function () {\n                        $el.addClass('portlet-highlight');\n                    });\n                    $el.on('mouseout', function () {\n                        $el.removeClass('portlet-highlight');\n                    });\n                    this.portlet.append($el);\n                    this._refresh();\n                } else {\n                    this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n                }\n            } else {\n                this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n            }\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.select.update(options);\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            if (this.$('.ui-list-id').length > 0) {\n                !this.multiple && this.button.disable();\n                this.$('.ui-list-portlet').show();\n            } else {\n                this.button.enable();\n                this.$('.ui-list-portlet').hide();\n            }\n            this.options.onchange && this.options.onchange();\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-list\">' + '<div class=\"ui-margin-top\">' + '<span class=\"ui-list-button\"/>' + '<span class=\"ui-list-select\"/>' + '</div>' + '<div class=\"ui-list-message\"/>' + '<div class=\"ui-list-portlet\"/>' + '</div>';\n        },\n\n        /** Row Template */\n        _templateRow: function _templateRow(options) {\n            return '<div id=\"' + options.id + '\" class=\"ui-list-id\">' + '<span class=\"ui-list-delete fa fa-trash\"/>' + '<span class=\"ui-list-name\">' + options.name + '</span>' + '</div>';\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    //jquery\n    //backbone\n], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // =============================================================================\n    /**\n     * view for a popup menu\n     */\n    var PopupMenu = Backbone.View.extend({\n        //TODO: maybe better as singleton off the Galaxy obj\n        /** Cache the desired button element and options, set up the button click handler\n         *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n         */\n        initialize: function initialize($button, options) {\n            // default settings\n            this.$button = $button;\n            if (!this.$button.length) {\n                this.$button = $('<div/>');\n            }\n            this.options = options || [];\n            this.$button.data('popupmenu', this);\n\n            // set up button click -> open menu behavior\n            var menu = this;\n            this.$button.click(function (event) {\n                // if there's already a menu open, remove it\n                $('.popmenu-wrapper').remove();\n                menu._renderAndShow(event);\n                return false;\n            });\n        },\n\n        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n        _renderAndShow: function _renderAndShow(clickEvent) {\n            this.render();\n            this.$el.appendTo('body').css(this._getShownPosition(clickEvent)).show();\n            this._setUpCloseBehavior();\n        },\n\n        // render the menu\n        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n        render: function render() {\n            // render the menu body absolute and hidden, fill with template\n            this.$el.addClass('popmenu-wrapper').hide().css({ position: 'absolute' }).html(this.template(this.$button.attr('id'), this.options));\n\n            // set up behavior on each link/anchor elem\n            if (this.options.length) {\n                var menu = this;\n                //precondition: there should be one option per li\n                this.$el.find('li').each(function (i, li) {\n                    var option = menu.options[i];\n\n                    // if the option has 'func', call that function when the anchor is clicked\n                    if (option.func) {\n                        $(this).children('a.popupmenu-option').click(function (event) {\n                            option.func.call(menu, event, option);\n                            // We must preventDefault otherwise clicking \"cancel\"\n                            // on a purge or something still navigates and causes\n                            // the action.\n                            event.preventDefault();\n                            // bubble up so that an option click will call the close behavior\n                        });\n                    }\n                });\n            }\n            return this;\n        },\n\n        template: function template(id, options) {\n            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), '</ul>'].join('');\n        },\n\n        _templateOptions: function _templateOptions(options) {\n            if (!options.length) {\n                return '<li>(no options)</li>';\n            }\n            return _.map(options, function (option) {\n                if (option.divider) {\n                    return '<li class=\"divider\"></li>';\n                } else if (option.header) {\n                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>'].join('');\n                }\n                var href = option.href || 'javascript:void(0);',\n                    target = option.target ? ' target=\"' + option.target + '\"' : '',\n                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : '';\n                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>', check, option.html, '</a></li>'].join('');\n            }).join('');\n        },\n\n        // get the absolute position/offset for the menu\n        _getShownPosition: function _getShownPosition(clickEvent) {\n\n            // display menu horiz. centered on click...\n            var menuWidth = this.$el.width();\n            var x = clickEvent.pageX - menuWidth / 2;\n\n            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n            x = Math.max(x, $(document).scrollLeft() + 5);\n            return {\n                top: clickEvent.pageY,\n                left: x\n            };\n        },\n\n        // bind an event handler to all available frames so that when anything is clicked\n        // the menu is removed from the DOM and the event handler unbinds itself\n        _setUpCloseBehavior: function _setUpCloseBehavior() {\n            var menu = this;\n            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n            // function to close popup and unbind itself\n            function closePopup(event) {\n                $(document).off('click.close_popup');\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document).off(\"click.close_popup\");\n                    } catch (err) {}\n                } else {\n                    try {\n                        $('iframe#galaxy_main').contents().off(\"click.close_popup\");\n                    } catch (err) {}\n                }\n                menu.remove();\n            }\n\n            $('html').one(\"click.close_popup\", closePopup);\n            if (window && window.parent !== window) {\n                try {\n                    $(window.parent.document).find('html').one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            } else {\n                try {\n                    $('iframe#galaxy_main').contents().one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            }\n        },\n\n        // add a menu option/item at the given index\n        addItem: function addItem(item, index) {\n            // append to end if no index\n            index = index >= 0 ? index : this.options.length;\n            this.options.splice(index, 0, item);\n            return this;\n        },\n\n        // remove a menu option/item at the given index\n        removeItem: function removeItem(index) {\n            if (index >= 0) {\n                this.options.splice(index, 1);\n            }\n            return this;\n        },\n\n        // search for a menu option by its html\n        findIndexByHtml: function findIndexByHtml(html) {\n            for (var i = 0; i < this.options.length; i++) {\n                if (_.has(this.options[i], 'html') && this.options[i].html === html) {\n                    return i;\n                }\n            }\n            return null;\n        },\n\n        // search for a menu option by its html\n        findItemByHtml: function findItemByHtml(html) {\n            return this.options[this.findIndexByHtml(html)];\n        },\n\n        // string representation\n        toString: function toString() {\n            return 'PopupMenu';\n        }\n    });\n    /** shortcut to new for when you don't need to preserve the ref */\n    PopupMenu.create = function _create($button, options) {\n        return new PopupMenu($button, options);\n    };\n\n    // -----------------------------------------------------------------------------\n    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n    // to the newer backbone.js PopupMenu\n\n    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n     *      Converts initial_options to object array used by PopupMenu.\n     *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n     *  @param {Object} initial_options map of key -> values, where\n     *      key is option text, value is fn to call when option is clicked\n     *  @returns {PopupMenu} the PopupMenu created\n     */\n    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n        var convertedOptions = [];\n        _.each(initial_options, function (optionVal, optionKey) {\n            var newOption = { html: optionKey };\n\n            // keys with null values indicate: header\n            if (optionVal === null) {\n                // !optionVal? (null only?)\n                newOption.header = true;\n\n                // keys with function values indicate: a menu option\n            } else if (jQuery.type(optionVal) === 'function') {\n                newOption.func = optionVal;\n            }\n            //TODO:?? any other special optionVals?\n            // there was no divider option originally\n            convertedOptions.push(newOption);\n        });\n        return new PopupMenu($(button_element), convertedOptions);\n    };\n\n    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n     *  @param {jQuery} $parent the element that contains the links to convert to options\n     *  @param {String} selector jq selector string to find links\n     *  @returns {Object[]} the options array to initialize a PopupMenu\n     */\n    //TODO: lose parent and selector, pass in array of links, use map to return options\n    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n        $parent = $($parent);\n        selector = selector || 'a';\n        var options = [];\n        $parent.find(selector).each(function (elem, i) {\n            var option = {},\n                $link = $(elem);\n\n            // convert link text to the option text (html) and the href into the option func\n            option.html = $link.text();\n            if ($link.attr('href')) {\n                var linkHref = $link.attr('href'),\n                    linkTarget = $link.attr('target'),\n                    confirmText = $link.attr('confirm');\n\n                option.func = function () {\n                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                    //  if the user cancels - do nothing\n                    if (confirmText && !confirm(confirmText)) {\n                        return;\n                    }\n\n                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n                    switch (linkTarget) {\n                        // relocate the center panel\n                        case '_parent':\n                            window.parent.location = linkHref;\n                            break;\n\n                        // relocate the entire window\n                        case '_top':\n                            window.top.location = linkHref;\n                            break;\n\n                        // relocate this panel\n                        default:\n                            window.location = linkHref;\n                    }\n                };\n            }\n            options.push(option);\n        });\n        return options;\n    };\n\n    /** Create a single popupmenu from existing DOM button and anchor elements\n     *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n     *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n     *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n     *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n     */\n    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n        $buttonElement = $($buttonElement);\n        $menuElement = $($menuElement);\n        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n        // we're done with the menu (having converted it to an options map)\n        $menuElement.remove();\n        return new PopupMenu($buttonElement, options);\n    };\n\n    /** Create all popupmenus within a document or a more specific element\n     *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n     *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n     *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n     *      Will be passed $menuElement, parent.\n     *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n     *  @returns {PopupMenu[]} array of popupmenus created\n     */\n    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n        parent = parent || document;\n        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n        //  which contains the id of the button that activates the menu\n        menuSelector = menuSelector || 'div[popupmenu]';\n        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n            return '#' + $menuElement.attr('popupmenu');\n        };\n\n        // aggregate and return all PopupMenus\n        var popupMenusCreated = [];\n        $(parent).find(menuSelector).each(function () {\n            var $menuElement = $(this),\n                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n            $buttonElement.addClass('popup');\n        });\n        return popupMenusCreated;\n    };\n\n    // =============================================================================\n    return PopupMenu;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui table element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {\n                content: 'No content available.',\n                onchange: null,\n                ondblclick: null,\n                onconfirm: null,\n                cls: 'ui-table',\n                selectable: true,\n                cls_tr: ''\n            });\n            this.setElement(this._template());\n            this.$thead = this.$('thead');\n            this.$tbody = this.$('tbody');\n            this.$tmessage = this.$('tmessage');\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events: {\n            'click': '_onclick',\n            'dblclick': '_ondblclick'\n        },\n\n        /** Add cell to header row */\n        addHeader: function addHeader($el) {\n            this.row.append($('<th/>').append($el));\n        },\n\n        /** Append header row to table */\n        appendHeader: function appendHeader() {\n            this.$thead.append(this.row);\n            this.row = $('<tr/>');\n        },\n\n        /** Add cell to row */\n        add: function add($el, width, align) {\n            var wrapper = $('<td/>');\n            if (width) {\n                wrapper.css('width', width);\n            }\n            if (align) {\n                wrapper.css('text-align', align);\n            }\n            this.row.append(wrapper.append($el));\n        },\n\n        /** Append row to table */\n        append: function append(id, fade) {\n            this._commit(id, fade, false);\n        },\n\n        /** Prepend row to table */\n        prepend: function prepend(id, fade) {\n            this._commit(id, fade, true);\n        },\n\n        /** Helper to get row element */\n        get: function get(id) {\n            return this.$('#' + id);\n        },\n\n        /** Delete row by id */\n        del: function del(id) {\n            var item = this.$tbody.find('#' + id);\n            if (item.length > 0) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function delAll() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function value(new_value) {\n            if (this.options.selectable) {\n                this.before = this.$tbody.find('.current').attr('id');\n                if (new_value !== undefined) {\n                    this.$tbody.find('tr').removeClass('current');\n                    if (new_value) {\n                        this.$tbody.find('#' + new_value).addClass('current');\n                    }\n                }\n                var after = this.$tbody.find('.current').attr('id');\n                if (after === undefined) {\n                    return null;\n                } else {\n                    if (after != this.before && this.options.onchange) {\n                        this.options.onchange(new_value);\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function size() {\n            return this.$tbody.find('tr').length;\n        },\n\n        /** Helper to append rows */\n        _commit: function _commit(id, fade, prepend) {\n            this.del(id);\n            this.row.attr('id', id);\n            if (prepend) {\n                this.$tbody.prepend(this.row);\n            } else {\n                this.$tbody.append(this.row);\n            }\n            if (fade) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function _row() {\n            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n        },\n\n        /** Handles onclick events */\n        _onclick: function _onclick(e) {\n            var old_value = this.value();\n            var new_value = $(e.target).closest('tr').attr('id');\n            if (new_value != '') {\n                if (new_value && old_value != new_value) {\n                    if (this.options.onconfirm) {\n                        this.options.onconfirm(new_value);\n                    } else {\n                        this.value(new_value);\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function _ondblclick(e) {\n            var value = this.value();\n            if (value && this.options.ondblclick) {\n                this.options.ondblclick(value);\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function _refresh() {\n            if (this.row_count == 0) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function _template() {\n            return '<div>' + '<table class=\"' + this.options.cls + '\">' + '<thead/>' + '<tbody/>' + '</table>' + '<tmessage>' + this.options.content + '</tmessage>' + '<div>';\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/* This class maps the form dom to an api compatible javascript dictionary. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function initialize(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function checksum() {\n            var sum = '';\n            var self = this;\n            this.app.section.$el.find('.section-row').each(function () {\n                var id = $(this).attr('id');\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum += id + ':' + JSON.stringify(field.value && field.value()) + ':' + field.collapsed + ';';\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function create() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr('tour_id', flat_id);\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != '') {\n                            flat_id += '|';\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case 'repeat':\n                                var section_label = 'section-';\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(section_label);\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(parseInt(block_label.substr(pos)));\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(0, pos);\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function (a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(flat_id + '_' + index++, node[block_prefix + block_indices[i]]);\n                                }\n                                break;\n                            case 'conditional':\n                                var value = self.app.field_list[input.id].value();\n                                add(flat_id + '|' + input.test_param.name, input.id, value);\n                                var selectedCase = _matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(flat_id, head[input.id + '-section-' + selectedCase]);\n                                }\n                                break;\n                            case 'section':\n                                convert(!input.flat && flat_id || '', node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (input.ignore === undefined || input.ignore != value) {\n                                        if (field.collapsed && input.collapsible_value) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(p_id, input.id, input.payload[p_id]);\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert('', dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function match(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function matchCase(input, value) {\n            return _matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function matchModel(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function (input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function matchResponse(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === 'string') {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== '') {\n                            var separator = '|';\n                            if (head instanceof Array) {\n                                separator = '_';\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search('', response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function _iterate(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function () {\n                var child = this;\n                var id = $(child).attr('id');\n                if ($(child).hasClass('section-row')) {\n                    var input = self.app.input_list[id];\n                    dict[id] = input && { input: input } || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var _matchCase = function _matchCase(input, value) {\n        if (input.test_param.type == 'boolean') {\n            if (value == 'true') {\n                value = input.test_param.truevalue || 'true';\n            } else {\n                value = input.test_param.falsevalue || 'false';\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function visitInputs(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function (input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + '|' + node.name : node.name;\n            switch (node.type) {\n                case 'repeat':\n                    _.each(node.cache, function (cache, j) {\n                        visitInputs(cache, callback, name + '_' + j, context);\n                    });\n                    break;\n                case 'conditional':\n                    if (node.test_param) {\n                        callback(node.test_param, name + '|' + node.test_param.name, context);\n                        var selectedCase = _matchCase(node, node.test_param.value);\n                        if (selectedCase != -1) {\n                            visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n                        } else {\n                            Galaxy.emit.debug('form-data::visitInputs() - Invalid case for ' + name + '.');\n                        }\n                    } else {\n                        Galaxy.emit.debug('form-data::visitInputs() - Conditional test parameter missing for ' + name + '.');\n                    }\n                    break;\n                case 'section':\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 27:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: '',\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n         * Return true if operation can be done asynchronously.\n         */\n        can_async_op: function can_async_op(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n         * Add filtering criterion.\n         */\n        add_filter: function add_filter(key, value, append) {\n            // Update URL arg with new condition.            \n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == 'string') {\n                    if (cur_val == 'All' || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n         * Remove filtering criterion.\n         */\n        remove_filter: function remove_filter(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === 'string') {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = '';\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = '';\n                }\n            }\n        },\n\n        /**\n         * Returns URL data for obtaining a new grid.\n         */\n        get_url_data: function get_url_data() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function (k) {\n                url_data['f-' + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function get_url(args) {\n            return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n        }\n\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 28:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\n    // grid view templates\n    return {\n        // template\n        grid: function grid(options) {\n            var tmpl = '';\n            if (options.embedded) {\n                tmpl = this.grid_header(options) + this.grid_table(options);\n            } else {\n                tmpl = '<div class=\"loading-elt-overlay\"></div>' + '<table>' + '<tr>' + '<td width=\"75%\">' + this.grid_header(options) + '</td>' + '<td></td>' + '<td></td>' + '</tr>' + '<tr>' + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + '<td></td>' + '<td></td>' + '</tr>' + '</table>' + this.grid_table(options);\n            }\n\n            // add info text\n            if (options.info_text) {\n                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        grid_table: function grid_table(options) {\n            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + '</table>' + '</form>';\n        },\n\n        // template\n        grid_header: function grid_header(options) {\n            var tmpl = '<div class=\"grid-header\">';\n            if (!options.embedded) {\n                tmpl += '<h2>' + options.title + '</h2>';\n            }\n            if (options.global_actions) {\n                tmpl += '<ul class=\"manage-table-actions\">';\n                var show_popup = options.global_actions.length >= 3;\n                if (show_popup) {\n                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n                }\n                for (var i in options.global_actions) {\n                    var action = options.global_actions[i];\n                    tmpl += '<li>' + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' + '</li>';\n                }\n                if (show_popup) {\n                    tmpl += '</div>';\n                }\n                tmpl += '</ul>';\n            }\n            if (options.insert) {\n                tmpl += options.insert;\n            }\n\n            // add grid filters\n            tmpl += this.grid_filters(options);\n            tmpl += '</div>';\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        header: function header(options) {\n\n            // start\n            var tmpl = '<tr>';\n\n            // add checkbox\n            if (options.show_item_checkboxes) {\n                tmpl += '<th>';\n                if (options.items.length > 0) {\n                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n                }\n                tmpl += '</th>';\n            }\n\n            // create header elements\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.visible) {\n                    tmpl += '<th id=\"' + column.key + '-header\">';\n                    if (column.href) {\n                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n                    } else {\n                        tmpl += column.label;\n                    }\n                    tmpl += '<span class=\"sort-arrow\">' + column.extra + '</span>' + '</th>';\n                }\n            }\n\n            // finalize\n            tmpl += '</tr>';\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        body: function body(options) {\n            // initialize\n            var tmpl = '';\n            var num_rows_rendered = 0;\n            var items_length = options.items.length;\n\n            // empty grid?\n            if (items_length == 0) {\n                // No results.\n                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n                num_rows_rendered = 1;\n            }\n\n            // create rows\n            for (var i in options.items) {\n\n                // encode ids\n                var item = options.items[i];\n                var encoded_id = item.encode_id;\n                var popupmenu_id = 'grid-' + i + '-popup';\n\n                // Tag current\n                tmpl += '<tr ';\n                if (options.current_item_id == item.id) {\n                    tmpl += 'class=\"current\"';\n                }\n                tmpl += '>';\n\n                // Item selection column\n                if (options.show_item_checkboxes) {\n                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + '</td>';\n                }\n\n                // Data columns\n                for (var j in options.columns) {\n                    var column = options.columns[j];\n                    if (column.visible) {\n                        // Nowrap\n                        var nowrap = '';\n                        if (column.nowrap) {\n                            nowrap = 'style=\"white-space:nowrap;\"';\n                        }\n\n                        // get column settings\n                        var column_settings = item.column_config[column.label];\n\n                        // load attributes\n                        var link = column_settings.link;\n                        var value = column_settings.value;\n                        var target = column_settings.target;\n\n                        // unescape value\n                        if (jQuery.type(value) === 'string') {\n                            value = value.replace(/\\/\\//g, '/');\n                        }\n\n                        // Attach popup menu?\n                        var id = '';\n                        var cls = '';\n                        if (column.attach_popup) {\n                            id = 'grid-' + i + '-popup';\n                            cls = 'menubutton';\n                            if (link != '') {\n                                cls += ' split';\n                            }\n                            cls += ' popup';\n                        }\n\n                        // Check for row wrapping\n                        tmpl += '<td ' + nowrap + '>';\n\n                        // Link\n                        if (link) {\n                            if (options.operations.length != 0) {\n                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                            }\n                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n                            if (options.operations.length != 0) {\n                                tmpl += '</div>';\n                            }\n                        } else {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n                        }\n                        tmpl += '</td>';\n                    }\n                }\n                tmpl += '</tr>';\n                num_rows_rendered++;\n            }\n            return tmpl;\n        },\n\n        // template\n        footer: function footer(options) {\n\n            // create template string\n            var tmpl = '';\n\n            // paging\n            if (options.use_paging && options.num_pages > 1) {\n                // get configuration\n                var num_page_links = options.num_page_links;\n                var cur_page_num = options.cur_page_num;\n                var num_pages = options.num_pages;\n\n                // First pass on min page.\n                var page_link_range = num_page_links / 2;\n                var min_page = cur_page_num - page_link_range;\n                var min_offset = 0;\n                if (min_page <= 0) {\n                    // Min page is too low.\n                    min_page = 1;\n                    min_offset = page_link_range - (cur_page_num - min_page);\n                }\n\n                // Set max page.\n                var max_range = page_link_range + min_offset;\n                var max_page = cur_page_num + max_range;\n                var max_offset;\n                if (max_page <= num_pages) {\n                    // Max page is fine.\n                    max_offset = 0;\n                } else {\n                    // Max page is too high.\n                    max_page = num_pages;\n                    // +1 to account for the +1 in the loop below.\n                    max_offset = max_range - (max_page + 1 - cur_page_num);\n                }\n\n                // Second and final pass on min page to add any unused\n                // offset from max to min.\n                if (max_offset != 0) {\n                    min_page -= max_offset;\n                    if (min_page < 1) {\n                        min_page = 1;\n                    }\n                }\n\n                // template header\n                tmpl += '<tr id=\"page-links-row\">';\n                if (options.show_item_checkboxes) {\n                    tmpl += '<td></td>';\n                }\n                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + 'Page:';\n\n                if (min_page > 1) {\n                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n                }\n\n                // create page urls\n                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n\n                    if (page_index == options.cur_page_num) {\n                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n                    } else {\n                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n                    }\n                }\n\n                // show last page\n                if (max_page < num_pages) {\n                    tmpl += '...' + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n                }\n                tmpl += '</span>';\n\n                // Show all link\n                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + '</td>' + '</tr>';\n            }\n\n            // Grid operations for multiple items.\n            if (options.show_item_checkboxes) {\n                // start template\n                tmpl += '<tr>' + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + '<td></td>' + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n                // configure buttons for operations\n                for (var i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.allow_multiple) {\n                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                    }\n                }\n\n                // finalize template\n                tmpl += '</td>' + '</tr>';\n            }\n\n            // count global operations\n            var found_global = false;\n            for (i in options.operations) {\n                if (options.operations[i].global_operation) {\n                    found_global = true;\n                    break;\n                }\n            }\n\n            // add global operations\n            if (found_global) {\n                tmpl += '<tr>' + '<td colspan=\"100\">';\n                for (i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.global_operation) {\n                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n                    }\n                }\n                tmpl += '</td>' + '</tr>';\n            }\n\n            // add legend\n            if (options.legend) {\n                tmpl += '<tr>' + '<td colspan=\"100\">' + options.legend + '</td>' + '</tr>';\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        message: function message(options) {\n            var status = options.status == 'success' ? 'done' : options.status;\n            return '<p>' + '<div class=\"' + status + 'message transient-message\">' + _.escape(options.message) + '</div>' + '<div style=\"clear: both\"></div>' + '</p>';\n        },\n\n        // template\n        grid_filters: function grid_filters(options) {\n\n            // get filters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n\n            // show advanced search if flag set or if there are filters for advanced search fields\n            var advanced_search_display = 'none';\n            if (options.advanced_search) {\n                advanced_search_display = 'block';\n            }\n\n            // identify columns with advanced filtering\n            var show_advanced_search_link = false;\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == 'advanced') {\n                    var column_key = column.key;\n                    var f_key = filters[column_key];\n                    var d_key = default_filter_dict[column_key];\n                    if (f_key && d_key && f_key != d_key) {\n                        advanced_search_display = 'block';\n                    }\n                    show_advanced_search_link = true;\n                }\n            }\n\n            // hide standard search if advanced is shown\n            var standard_search_display = 'block';\n            if (advanced_search_display == 'block') {\n                standard_search_display = 'none';\n            }\n\n            //\n            // standard search\n            //\n            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + '<table>' + '<tr>' + '<td style=\"padding: 0;\">' + '<table>';\n\n            // add standard filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == 'standard') {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize standard search\n            tmpl += '</table>' + '</td>' + '</tr>' + '<tr>' + '<td>';\n\n            // show advanced search link in standard display\n            if (show_advanced_search_link) {\n                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n            }\n\n            // finalize standard search display\n            tmpl += '</td>' + '</tr>' + '</table>' + '</div>';\n\n            //\n            // advanced search\n            //\n            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + '<table>' + '<tr>' + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + '</td>' + '</tr>';\n\n            // add advanced filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == 'advanced') {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize advanced search template\n            tmpl += '</table>' + '</div>';\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        grid_column_filter: function grid_column_filter(options, column) {\n\n            // collect parameters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n            var column_label = column.label;\n            var column_key = column.key;\n            if (column.filterable == 'advanced') {\n                column_label = column_label.toLowerCase();\n            }\n\n            // start\n            var tmpl = '<tr>';\n\n            if (column.filterable == 'advanced') {\n                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n            }\n            tmpl += '<td style=\"padding-bottom: 1px;\">';\n            if (column.is_text) {\n                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n                // Carry forward filtering criteria with hidden inputs.\n                for (i in options.columns) {\n                    var temp_column = options.columns[i];\n                    var filter_value = filters[temp_column.key];\n                    if (filter_value) {\n                        if (filter_value != 'All') {\n                            if (temp_column.is_text) {\n                                filter_value = JSON.stringify(filter_value);\n                            }\n                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                        }\n                    }\n                }\n                // Print current filtering criteria and links to delete.\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add filters\n                var column_filter = filters[column_key];\n                if (column_filter) {\n                    // identify type\n                    var type = jQuery.type(column_filter);\n\n                    // single filter value\n                    if (type == 'string') {\n                        if (column_filter != 'All') {\n                            // append template\n                            tmpl += this.filter_element(column_key, column_filter);\n                        }\n                    }\n\n                    // multiple filter values\n                    if (type == 'array') {\n                        for (var i in column_filter) {\n                            // get filter\n                            var filter = column_filter[i];\n\n                            // copy filters and remove entry\n                            var params = column_filter;\n                            params = params.slice(i);\n\n                            // append template\n                            tmpl += this.filter_element(column_key, filter);\n                        }\n                    }\n                }\n\n                // close span\n                tmpl += '</span>';\n\n                // Set value, size of search input field. Minimum size is 20 characters.\n                var value = '';\n                if (column.filterable == 'standard') {\n                    value = column.label.toLowerCase();\n                    var size = value.length;\n                    if (size < 20) {\n                        size = 20;\n                    }\n                    // +4 to account for space after placeholder\n                    size = size + 4;\n                }\n\n                // print input field for column\n                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + '</button>' + '</span>' + '</form>';\n            } else {\n                // filter criteria\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add category filters\n                var seperator = false;\n                for (var cf_label in options.categorical_filters[column_key]) {\n                    // get category filter\n                    var cf = options.categorical_filters[column_key][cf_label];\n\n                    // each filter will have only a single argument, so get that single argument\n                    var cf_key = '';\n                    var cf_arg = '';\n                    for (var key in cf) {\n                        cf_key = key;\n                        cf_arg = cf[key];\n                    }\n\n                    // add seperator\n                    if (seperator) {\n                        tmpl += ' | ';\n                    }\n                    seperator = true;\n\n                    // add category\n                    var filter = filters[column_key];\n                    if (filter && cf[column_key] && filter == cf_arg) {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n                    } else {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' + '</span>';\n                    }\n                }\n                tmpl += '</span>';\n            }\n            tmpl += '</td>' + '</tr>';\n\n            // return template\n            return tmpl;\n        },\n\n        // template for filter items\n        filter_element: function filter_element(filter_key, filter_value) {\n            filter_value = Utils.sanitize(filter_value);\n            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + '</a>' + '</span>';\n        }\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                min: null,\n                max: null,\n                step: null,\n                precise: false,\n                split: 10000,\n                value: null,\n                onchange: function onchange() {}\n            }).set(options);\n\n            // create new element\n            this.setElement(this._template());\n            this.$el.attr('id', this.model.id);\n            this.$text = this.$('.ui-form-slider-text');\n            this.$slider = this.$('.ui-form-slider-element');\n\n            // add text field event\n            var pressed = [];\n            this.$text.on('change', function () {\n                self.value($(this).val());\n            }).on('keyup', function (e) {\n                pressed[e.which] = false;\n            }).on('keydown', function (e) {\n                var v = e.which;\n                pressed[v] = true;\n                if (self.model.get('is_workflow') && pressed[16] && v == 52) {\n                    self.value('$');\n                    event.preventDefault();\n                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf('.') == -1 && self.model.get('precise') || (v == 189 || v == 109) && $(this).val().indexOf('-') == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if (!step) {\n                if (opts.precise && this.has_slider) {\n                    step = (opts.max - opts.min) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if (this.has_slider) {\n                this.$text.addClass('ui-form-slider-left');\n                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on('slide', function (event, ui) {\n                    self.value(ui.value);\n                });\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var value = this.model.get('value');\n            this.has_slider && this.$slider.slider('value', value);\n            value !== this.$text.val() && this.$text.val(value);\n        },\n\n        /** Set and return the current value */\n        value: function value(new_val) {\n            var options = this.model.attributes;\n            if (new_val !== undefined) {\n                if (new_val !== null && new_val !== '' && !this._isParameter(new_val)) {\n                    isNaN(new_val) && (new_val = 0);\n                    !options.precise && (new_val = Math.round(new_val));\n                    options.max !== null && (new_val = Math.min(new_val, options.max));\n                    options.min !== null && (new_val = Math.max(new_val, options.min));\n                }\n                this.model.set('value', new_val);\n                this.model.trigger('change');\n                options.onchange(new_val);\n            }\n            return this.model.get('value');\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function _isParameter(value) {\n            return this.model.get('is_workflow') && String(value).substring(0, 1) === '$';\n        },\n\n        /** Slider template */\n        _template: function _template() {\n            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + '</div>';\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 30:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates/wraps a drill down element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n\n    var View = Options.BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = options.display || 'checkbox';\n            options.multiple = options.type == 'checkbox';\n            Options.BaseIcons.prototype.initialize.call(this, options);\n        },\n\n        /** Set states for selected values */\n        _setValue: function _setValue(new_value) {\n            Options.BaseIcons.prototype._setValue.call(this, new_value);\n            if (new_value !== undefined && new_value !== null && this.header_index) {\n                var self = this;\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function (v) {\n                    var list = self.header_index[v];\n                    _.each(list, function (element) {\n                        self._setState(element, true);\n                    });\n                });\n            }\n        },\n\n        /** Expand/collapse a sub group */\n        _setState: function _setState(header_id, is_expanded) {\n            var $button = this.$('.button-' + header_id);\n            var $subgroup = this.$('.subgroup-' + header_id);\n            $button.data('is_expanded', is_expanded);\n            if (is_expanded) {\n                $subgroup.show();\n                $button.removeClass('fa-plus-square').addClass('fa-minus-square');\n            } else {\n                $subgroup.hide();\n                $button.removeClass('fa-minus-square').addClass('fa-plus-square');\n            }\n        },\n\n        /** Template to create options tree */\n        _templateOptions: function _templateOptions() {\n            var self = this;\n            this.header_index = {};\n\n            // attach event handler\n            function attach($el, header_id) {\n                var $button = $el.find('.button-' + header_id);\n                $button.on('click', function () {\n                    self._setState(header_id, !$button.data('is_expanded'));\n                });\n            }\n\n            // recursive function which iterates through options\n            function iterate($tmpl, options, header) {\n                header = header || [];\n                for (var i in options) {\n                    var level = options[i];\n                    var has_options = level.options && level.options.length > 0;\n                    var new_header = header.slice(0);\n                    self.header_index[level.value] = new_header.slice(0);\n                    var $group = $('<div/>');\n                    if (has_options) {\n                        var header_id = Utils.uid();\n                        var $button = $('<span/>').addClass('button-' + header_id).addClass('ui-drilldown-button fa fa-plus-square');\n                        var $subgroup = $('<div/>').addClass('subgroup-' + header_id).addClass('ui-drilldown-subgroup');\n                        $group.append($('<div/>').append($button).append(self._templateOption({ label: level.name, value: level.value })));\n                        new_header.push(header_id);\n                        iterate($subgroup, level.options, new_header);\n                        $group.append($subgroup);\n                        attach($group, header_id);\n                    } else {\n                        $group.append(self._templateOption({ label: level.name, value: level.value }));\n                    }\n                    $tmpl.append($group);\n                }\n            }\n\n            // iterate through options and create dom\n            var $tmpl = $('<div/>');\n            iterate($tmpl, this.model.get('data'));\n            return $tmpl;\n        },\n\n        /** Template for drill down view */\n        _template: function _template() {\n            return $('<div/>').addClass('ui-options-list drilldown-container').attr('id', this.model.id);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(8), __webpack_require__(32), __webpack_require__(33), __webpack_require__(34)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement($('<div/>'));\n            this.render();\n        },\n\n        /** Render section view */\n        render: function render() {\n            var self = this;\n            this.$el.empty();\n            _.each(this.inputs, function (input) {\n                self.add(input);\n            });\n        },\n\n        /** Add a new input element */\n        add: function add(input) {\n            var input_def = jQuery.extend(true, {}, input);\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[input_def.id] = input_def;\n            switch (input_def.type) {\n                case 'conditional':\n                    this._addConditional(input_def);\n                    break;\n                case 'repeat':\n                    this._addRepeat(input_def);\n                    break;\n                case 'section':\n                    this._addSection(input_def);\n                    break;\n                default:\n                    this._addRow(input_def);\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function _addConditional(input_def) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get('sustain_conditionals') && (input_def.test_param.disabled = true);\n            var field = this._addRow(input_def.test_param);\n\n            // set onchange event for test parameter\n            field.model && field.model.set('onchange', function (value) {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$('#' + input_def.id + '-section-' + i);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn('fast');\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger('change');\n            });\n\n            // add conditional sub sections\n            for (var i in input_def.cases) {\n                var sub_section = new View(this.app, { inputs: input_def.cases[i].inputs });\n                this._append(sub_section.$el.addClass('ui-form-section'), input_def.id + '-section-' + i);\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger('change');\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function _addRepeat(input_def) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title: input_def.title || 'Repeat',\n                min: input_def.min,\n                max: input_def.max,\n                onnew: function onnew() {\n                    create(input_def.inputs);self.app.trigger('change');\n                }\n            });\n\n            // helper function to create new repeat blocks\n            function create(inputs) {\n                var sub_section_id = input_def.id + '-section-' + block_index++;\n                var sub_section = new View(self.app, { inputs: inputs });\n                repeat.add({ id: sub_section_id,\n                    $el: sub_section.$el,\n                    ondel: function ondel() {\n                        repeat.del(sub_section_id);self.app.trigger('change');\n                    } });\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size(input_def.cache);\n            for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n                create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n            }\n\n            // hide options\n            this.app.model.get('sustain_repeats') && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement(this.app, {\n                label: input_def.title || input_def.name,\n                help: input_def.help,\n                field: repeat\n            });\n            this._append(input_element.$el, input_def.id);\n        },\n\n        /** Add a customized section */\n        _addSection: function _addSection(input_def) {\n            var portlet = new Portlet.View({\n                title: input_def.title || input_def.name,\n                cls: 'ui-portlet-section',\n                collapsible: true,\n                collapsible_button: true,\n                collapsed: !input_def.expanded\n            });\n            portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n            portlet.append($('<div/>').addClass('ui-form-info').html(input_def.help));\n            this.app.on('expand', function (input_id) {\n                portlet.$('#' + input_id).length > 0 && portlet.expand();\n            });\n            this._append(portlet.$el, input_def.id);\n        },\n\n        /** Add a single input field element */\n        _addRow: function _addRow(input_def) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function () {\n                self.app.trigger('change', id);\n            };\n            var field = this.parameters.create(input_def);\n            this.app.field_list[id] = field;\n            var input_element = new InputElement(this.app, {\n                name: input_def.name,\n                label: input_def.hide_label ? '' : input_def.label || input_def.name,\n                value: input_def.value,\n                text_value: input_def.text_value,\n                collapsible_value: input_def.collapsible_value,\n                collapsible_preview: input_def.collapsible_preview,\n                help: input_def.help,\n                argument: input_def.argument,\n                disabled: input_def.disabled,\n                color: input_def.color,\n                style: input_def.style,\n                backdrop: input_def.backdrop,\n                hidden: input_def.hidden,\n                fixed: input_def.fixed,\n                field: field\n            });\n            this.app.element_list[id] = input_element;\n            this._append(input_element.$el, input_def.id);\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function _append($el, id) {\n            this.$el.append($el.addClass('section-row').attr('id', id));\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 32:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui component which enables the dynamic creation of portlets */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.list = {};\n            this.options = Utils.merge(options, {\n                title: 'Repeat',\n                empty_text: 'Not available.',\n                max: null,\n                min: null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon: 'fa-plus',\n                title: 'Insert ' + this.options.title,\n                tooltip: 'Add new ' + this.options.title + ' block',\n                cls: 'ui-button-icon ui-clear-float form-repeat-add',\n                onclick: function onclick() {\n                    options.onnew && options.onnew();\n                }\n            });\n            this.setElement($('<div/>').append(this.$list = $('<div/>')).append($('<div/>').append(this.button_new.$el)));\n        },\n\n        /** Number of repeat blocks */\n        size: function size() {\n            return _.size(this.list);\n        },\n\n        /** Add new repeat block */\n        add: function add(options) {\n            if (!options.id || this.list[options.id]) {\n                Galaxy.emit.debug('form-repeat::add()', 'Duplicate or invalid repeat block id.');\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon: 'fa-trash-o',\n                tooltip: 'Delete this repeat block',\n                cls: 'ui-button-icon-plain form-repeat-delete',\n                onclick: function onclick() {\n                    options.ondel && options.ondel();\n                }\n            });\n            var portlet = new Portlet.View({\n                id: options.id,\n                title: 'placeholder',\n                cls: options.cls || 'ui-portlet-repeat',\n                operations: { button_delete: button_delete }\n            });\n            portlet.append(options.$el);\n            portlet.$el.addClass('section-row').hide();\n            this.list[options.id] = portlet;\n            this.$list.append(portlet.$el.fadeIn('fast'));\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function del(id) {\n            if (!this.list[id]) {\n                Galaxy.emit.debug('form-repeat::del()', 'Invalid repeat block id.');\n                return;\n            }\n            this.$list.find('#' + id).remove();\n            delete this.list[id];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function delAll() {\n            for (var id in this.list) {\n                this.del(id);\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function hideOptions() {\n            this.button_new.$el.hide();\n            _.each(this.list, function (portlet) {\n                portlet.hideOperation('button_delete');\n            });\n            _.isEmpty(this.list) && this.$el.append($('<div/>').addClass('ui-form-info').html(this.options.empty_text));\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            var index = 0;\n            for (var id in this.list) {\n                var portlet = this.list[id];\n                portlet.title(++index + ': ' + this.options.title);\n                portlet[this.size() > this.options.min ? 'showOperation' : 'hideOperation']('button_delete');\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 33:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form input element wrapper\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    return Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable: this.app_options.text_enable || 'Enable',\n                text_disable: this.app_options.text_disable || 'Disable',\n                cls_enable: this.app_options.cls_enable || 'fa fa-caret-square-o-down',\n                cls_disable: this.app_options.cls_disable || 'fa fa-caret-square-o-up',\n                always_refresh: this.app_options.always_refresh\n            }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$('.ui-form-field');\n            this.$info = this.$('.ui-form-info');\n            this.$preview = this.$('.ui-form-preview');\n            this.$collapsible = this.$('.ui-form-collapsible');\n            this.$collapsible_text = this.$('.ui-form-collapsible-text');\n            this.$collapsible_icon = this.$('.ui-form-collapsible-icon');\n            this.$title = this.$('.ui-form-title');\n            this.$title_text = this.$('.ui-form-title-text');\n            this.$error_text = this.$('.ui-form-error-text');\n            this.$error = this.$('.ui-form-error');\n            this.$backdrop = this.$('.ui-form-backdrop');\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get('collapsible_value');\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify(this.model.get('value')) == JSON.stringify(collapsible_value);\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on('click', function () {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger('change');\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get('always_refresh')) {\n                this.listenTo(this.field.model, 'change:value', function () {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function backdrop() {\n            this.model.set('backdrop', true);\n        },\n\n        /** Set error text */\n        error: function error(text) {\n            this.model.set('error_text', text);\n        },\n\n        /** Reset this view */\n        reset: function reset() {\n            !this.model.get('fixed') && this.model.set('error_text', null);\n        },\n\n        render: function render() {\n            // render help\n            $('.tooltip').hide();\n            var help_text = this.model.get('help', '');\n            var help_argument = this.model.get('argument');\n            if (help_argument && help_text.indexOf('(' + help_argument + ')') == -1) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get('hidden') ? 'hide' : 'show']();\n            // render preview view for collapsed fields\n            this.$preview[this.field.collapsed && this.model.get('collapsible_preview') || this.model.get('disabled') ? 'show' : 'hide']().html(_.escape(this.model.get('text_value')));\n            // render error messages\n            var error_text = this.model.get('error_text');\n            this.$error[error_text ? 'show' : 'hide']();\n            this.$el[error_text ? 'addClass' : 'removeClass']('ui-error');\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get('backdrop') ? 'show' : 'hide']();\n            // render input field\n            this.field.collapsed || this.model.get('disabled') ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set({ 'color': this.model.get('color'), 'style': this.model.get('style') });\n            // render collapsible options\n            if (!this.model.get('disabled') && this.model.get('collapsible_value') !== undefined) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get('label'));\n                this.$collapsible_icon.removeClass().addClass('icon').addClass(this.model.get('cls_' + collapsible_state)).attr('data-original-title', this.model.get('text_' + collapsible_state)).tooltip({ placement: 'bottom' });\n            } else {\n                this.$title_text.show().text(this.model.get('label'));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function _template() {\n            return $('<div/>').addClass('ui-form-element').append($('<div/>').addClass('ui-form-error ui-error').append($('<span/>').addClass('fa fa-arrow-down')).append($('<span/>').addClass('ui-form-error-text'))).append($('<div/>').addClass('ui-form-title').append($('<div/>').addClass('ui-form-collapsible').append($('<i/>').addClass('ui-form-collapsible-icon')).append($('<span/>').addClass('ui-form-collapsible-text'))).append($('<span/>').addClass('ui-form-title-text'))).append($('<div/>').addClass('ui-form-field').append($('<span/>').addClass('ui-form-info')).append($('<div/>').addClass('ui-form-backdrop'))).append($('<div/>').addClass('ui-form-preview'));\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 34:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text': '_fieldText',\n            'password': '_fieldText',\n            'select': '_fieldSelect',\n            'data_column': '_fieldSelect',\n            'genomebuild': '_fieldSelect',\n            'data': '_fieldData',\n            'data_collection': '_fieldData',\n            'integer': '_fieldSlider',\n            'float': '_fieldSlider',\n            'boolean': '_fieldBoolean',\n            'drill_down': '_fieldDrilldown',\n            'color': '_fieldColor',\n            'hidden': '_fieldHidden',\n            'hidden_data': '_fieldHidden',\n            'baseurl': '_fieldHidden',\n            'library_data': '_fieldLibrary',\n            'ftpfile': '_fieldFtp',\n            'upload': '_fieldUpload',\n            'genomespacefile': '_fieldGenomeSpace'\n        },\n\n        /** Returns an input field for a given field type */\n        create: function create(input_def) {\n            var fieldClass = this.types[input_def.type];\n            var field = typeof this[fieldClass] === 'function' ? this[fieldClass].call(this, input_def) : null;\n            if (!field) {\n                field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && (input_def.value = null);\n            field.value(input_def.value);\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function _fieldData(input_def) {\n            return new SelectContent.View({\n                id: 'field-' + input_def.id,\n                extensions: input_def.extensions,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                type: input_def.type,\n                flavor: input_def.flavor,\n                data: input_def.options,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function _fieldSelect(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // customize properties\n            if (input_def.type == 'data_column') {\n                input_def.error_text = 'Missing columns in referenced dataset.';\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if (!data) {\n                data = [];\n                _.each(input_def.options, function (option) {\n                    data.push({ label: option[0], value: option[1] });\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch (input_def.display) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n                case 'radiobutton':\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id: 'field-' + input_def.id,\n                data: data,\n                error_text: input_def.error_text || 'No options available',\n                multiple: input_def.multiple,\n                optional: input_def.optional,\n                onchange: input_def.onchange,\n                individual: input_def.individual,\n                searchable: input_def.flavor !== 'workflow'\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function _fieldDrilldown(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id: 'field-' + input_def.id,\n                data: input_def.options,\n                display: input_def.display,\n                optional: input_def.optional,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function _fieldText(input_def) {\n            // field replaces e.g. a select field\n            if (input_def.options && input_def.data) {\n                input_def.area = input_def.multiple;\n                if (Utils.isEmpty(input_def.value)) {\n                    input_def.value = null;\n                } else {\n                    if ($.isArray(input_def.value)) {\n                        var str_value = '';\n                        for (var i in input_def.value) {\n                            str_value += String(input_def.value[i]);\n                            if (!input_def.multiple) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id: 'field-' + input_def.id,\n                type: input_def.type,\n                area: input_def.area,\n                readonly: input_def.readonly,\n                placeholder: input_def.placeholder,\n                datalist: input_def.datalist,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function _fieldSlider(input_def) {\n            return new Ui.Slider.View({\n                id: 'field-' + input_def.id,\n                precise: input_def.type == 'float',\n                is_workflow: input_def.is_workflow,\n                min: input_def.min,\n                max: input_def.max,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function _fieldHidden(input_def) {\n            return new Ui.Hidden({\n                id: 'field-' + input_def.id,\n                info: input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function _fieldBoolean(input_def) {\n            return new Ui.RadioButton.View({\n                id: 'field-' + input_def.id,\n                data: [{ label: 'Yes', value: 'true' }, { label: 'No', value: 'false' }],\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function _fieldColor(input_def) {\n            return new ColorPicker({\n                id: 'field-' + input_def.id,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function _fieldLibrary(input_def) {\n            return new SelectLibrary.View({\n                id: 'field-' + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function _fieldFtp(input_def) {\n            return new SelectFtp.View({\n                id: 'field-' + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** GenomeSpace file select field\n         */\n        _fieldGenomeSpace: function _fieldGenomeSpace(input_def) {\n            var self = this;\n            return new SelectGenomeSpace.View({\n                id: 'field-' + input_def.id,\n                onchange: function onchange() {\n                    self.app.trigger('change');\n                }\n            });\n        },\n\n        /** Upload file field */\n        _fieldUpload: function _fieldUpload(input_def) {\n            return new Ui.Upload({\n                id: 'field-' + input_def.id,\n                onchange: input_def.onchange\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 35:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Select) {\n\n    /** Batch mode variations */\n    var Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.LINKED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.LINKED }],\n        data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections', multiple: true, batch: Batch.DISABLED }],\n        data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n        workflow_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }],\n        workflow_data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }],\n        workflow_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n        module_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.ENABLED }],\n        module_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder', tooltip: 'Multiple collections', multiple: true, batch: Batch.ENABLED }]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                src_labels: { 'hda': 'dataset', 'hdca': 'dataset collection' },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n            this.setElement($('<div/>').addClass('ui-select-content'));\n            this.button_product = new Ui.RadioButton.View({\n                value: 'false',\n                data: [{ icon: 'fa fa-chain', value: 'false',\n                    tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' }, { icon: 'fa fa-chain-broken', value: 'true',\n                    tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' }] });\n            var $batch_div = $('<div/>').addClass('ui-form-info').append($('<i/>').addClass('fa fa-sitemap')).append($('<span/>').html('This is a batch mode input field. Separate jobs will be triggered for each dataset selection.'));\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div.clone().append($('<div/>').append($('<div/>').addClass('ui-form-title').html('Batch options:')).append(this.button_product.$el)).append($('<div/>').css('clear', 'both'))\n            };\n\n            // add drag-drop event handlers\n            this.$el.on('dragenter', function (e) {\n                this.lastenter = e.target;self.$el.addClass('ui-dragover');\n            }).on('dragover', function (e) {\n                e.preventDefault();\n            }).on('dragleave', function (e) {\n                this.lastenter === e.target && self.$el.removeClass('ui-dragover');\n            }).on('drop', function (e) {\n                self._handleDrop(e);\n            });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, 'change:data', this._changeData, this);\n            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n            this.listenTo(this.model, 'change:current', this._changeCurrent, this);\n            this.listenTo(this.model, 'change:value', this._changeValue, this);\n            this.listenTo(this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this);\n            this.render();\n\n            // add change event\n            this.on('change', function () {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function render() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function wait() {\n            this.model.set('wait', true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function unwait() {\n            this.model.set('wait', false);\n        },\n\n        /** Update data representing selectable options */\n        update: function update(options) {\n            this.model.set('data', options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set('value', new_value);\n            var current = this.model.get('current');\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[id_list[i] + '_' + this.config[current].src];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug('ui-select-content::value()', 'Requested details not found for \\'' + id_list[i] + '\\'.');\n                                return null;\n                            }\n                        }\n                        result.values.sort(function (a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug('ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.');\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function _changeCurrent() {\n            var self = this;\n            _.each(this.fields, function (field, i) {\n                if (self.model.get('current') == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function ($batchfield, batchmode) {\n                        $batchfield[self.config[i].batch == batchmode ? 'show' : 'hide']();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function _changeType() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id = (this.model.get('flavor') ? this.model.get('flavor') + '_' : '') + String(this.model.get('type')) + (this.model.get('multiple') ? '_multiple' : '');\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations['data'];\n                Galaxy.emit.debug('ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.');\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get('data');\n            var extensions = Utils.textify(this.model.get('extensions'));\n            var src_labels = this.model.get('src_labels');\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function (c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(new Select.View({\n                    optional: self.model.get('optional'),\n                    multiple: c.multiple,\n                    searchable: !c.multiple || data && data[c.src] && data[c.src].length > self.model.get('pagelimit'),\n                    individual: true,\n                    error_text: 'No ' + (extensions ? extensions + ' ' : '') + (src_labels[c.src] || 'content') + ' available.',\n                    onchange: function onchange() {\n                        self.trigger('change');\n                    }\n                }));\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get('current'),\n                data: this.button_data,\n                onchange: function onchange(value) {\n                    self.model.set('current', value);\n                    self.trigger('change');\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + 'px';\n            }\n            _.each(this.fields, function (field) {\n                self.$el.append(field.$el.css({ 'margin-left': button_width }));\n            });\n            _.each(this.$batch, function ($batchfield, batchmode) {\n                self.$el.append($batchfield.css({ 'margin-left': button_width }));\n            });\n            this.model.set('current', 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function _changeWait() {\n            var self = this;\n            _.each(this.fields, function (field) {\n                field[self.model.get('wait') ? 'wait' : 'unwait']();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function _changeData() {\n            var options = this.model.get('data');\n            var self = this;\n            var select_options = {};\n            _.each(options, function (items, src) {\n                select_options[src] = [];\n                _.each(items, function (item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + ': ' + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + '_' + src] = item;\n                });\n            });\n            _.each(this.config, function (c, i) {\n                select_options[c.src] && self.fields[i].add(select_options[c.src], function (a, b) {\n                    return b.hid - a.hid;\n                });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function _changeValue() {\n            var new_value = this.model.get('value');\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function (value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n                        this.model.set('current', i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function (field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function _handleDrop(ev) {\n            try {\n                var data = this.model.get('data');\n                var current = this.model.get('current');\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData('text'))[0];\n                var new_id = drop_data.id;\n                var new_src = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set('value', { values: [new_value] });\n                        this.model.trigger('change:value');\n                    }\n                    this.trigger('change');\n                    this._handleDropStatus('success');\n                } else {\n                    this._handleDropStatus('danger');\n                }\n            } catch (e) {\n                this._handleDropStatus('danger');\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function _handleDropStatus(status) {\n            var self = this;\n            this.$el.removeClass('ui-dragover').addClass('ui-dragover-' + status);\n            setTimeout(function () {\n                self.$el.removeClass('ui-dragover-' + status);\n            }, this.model.get('statustimer'));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function _batch(result) {\n            result['batch'] = false;\n            var current = this.model.get('current');\n            var config = this.config[current];\n            if (config.src == 'hdca' && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + '_hdca'];\n                if (hdca && hdca.map_over_type) {\n                    result['batch'] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result['batch'] = true;\n                if (config.batch == Batch.ENABLED && this.button_product.value() === 'true') {\n                    result['product'] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(22), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Table, List) {\n\n    // collection of libraries\n    var Libraries = Backbone.Collection.extend({\n        url: Galaxy.root + 'api/libraries?deleted=false'\n    });\n\n    // collection of dataset\n    var LibraryDatasets = Backbone.Collection.extend({\n        initialize: function initialize() {\n            var self = this;\n            this.config = new Backbone.Model({ library_id: null });\n            this.config.on('change', function () {\n                self.fetch({ reset: true });\n            });\n        },\n        url: function url() {\n            return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n        }\n    });\n\n    // hda/hdca content selector ui element\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // collections\n            this.libraries = new Libraries();\n            this.datasets = new LibraryDatasets();\n\n            // link app and options\n            this.options = options;\n\n            // select field for the library\n            // TODO: Remove this once the library API supports searching for library datasets\n            this.library_select = new Ui.Select.View({\n                onchange: function onchange(value) {\n                    self.datasets.config.set('library_id', value);\n                }\n            });\n\n            // create ui-list view to keep track of selected data libraries\n            this.dataset_list = new List.View({\n                name: 'dataset',\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    self.trigger('change');\n                }\n            });\n\n            // add reset handler for fetched libraries\n            this.libraries.on('reset', function () {\n                var data = [];\n                self.libraries.each(function (model) {\n                    data.push({\n                        value: model.id,\n                        label: model.get('name')\n                    });\n                });\n                self.library_select.update(data);\n            });\n\n            // add reset handler for fetched library datasets\n            this.datasets.on('reset', function () {\n                var data = [];\n                var library_current = self.library_select.text();\n                if (library_current !== null) {\n                    self.datasets.each(function (model) {\n                        if (model.get('type') === 'file') {\n                            data.push({\n                                value: model.id,\n                                label: model.get('name')\n                            });\n                        }\n                    });\n                }\n                self.dataset_list.update(data);\n            });\n\n            // add change event. fires on trigger\n            this.on('change', function () {\n                options.onchange && options.onchange(self.value());\n            });\n\n            // create elements\n            this.setElement(this._template());\n            this.$('.library-select').append(this.library_select.$el);\n            this.$el.append(this.dataset_list.$el);\n\n            // initial fetch of libraries\n            this.libraries.fetch({\n                reset: true,\n                success: function success() {\n                    self.library_select.trigger('change');\n                    if (self.options.value !== undefined) {\n                        self.value(self.options.value);\n                    }\n                }\n            });\n        },\n\n        /** Return/Set currently selected library datasets */\n        value: function value(val) {\n            return this.dataset_list.value(val);\n        },\n\n        /** Template */\n        _template: function _template() {\n            return '<div class=\"ui-select-library\">' + '<div class=\"library ui-margin-bottom\">' + '<span class=\"library-title\">Select Library</span>' + '<span class=\"library-select\"/>' + '</div>' + '</div>';\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 37:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, List) {\n\n    /**\n     * FTP file selector\n     */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // create ui-list view to keep track of selected ftp files\n            this.ftpfile_list = new List.View({\n                name: 'file',\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    options.onchange && options.onchange(self.value());\n                }\n            });\n\n            // create elements\n            this.setElement(this.ftpfile_list.$el);\n\n            // initial fetch of ftps\n            Utils.get({\n                url: Galaxy.root + 'api/remote_files',\n                success: function success(response) {\n                    var data = [];\n                    for (var i in response) {\n                        data.push({\n                            value: response[i]['path'],\n                            label: response[i]['path']\n                        });\n                    }\n                    self.ftpfile_list.update(data);\n                }\n            });\n        },\n\n        /** Return/Set currently selected ftp datasets */\n        value: function value(val) {\n            return this.ftpfile_list.value(val);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(39)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, GenomespaceBrowser) {\n\n    /**\n     * GenomeSpace file selector\n     */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n\n            // link this\n            var self = this;\n\n            // create insert new list element button\n            this.browse_button = new Ui.ButtonIcon({\n                title: 'Browse',\n                icon: 'fa fa-sign-in',\n                tooltip: 'Browse GenomeSpace',\n                onclick: function onclick() {\n                    self.browseGenomeSpace();\n                }\n            });\n\n            // create genomespace filepath textbox\n            this.filename_textbox = new Ui.Input();\n\n            // create genomespace token textbox\n            this.token_textbox = new Ui.Input({\n                type: 'password'\n            });\n\n            // create elements\n            this.setElement(this._template(options));\n            this.$('.ui-gs-browse-button').append(this.browse_button.$el);\n            this.$('.ui-gs-filename-textbox').append(this.filename_textbox.$el);\n            this.$('.ui-gs-token-textbox').append(this.token_textbox.$el);\n        },\n\n        /** Browse GenomeSpace */\n        browseGenomeSpace: function browseGenomeSpace(options) {\n            var self = this;\n            GenomespaceBrowser.openFileBrowser({\n                successCallback: function successCallback(data) {\n                    self.value(data.destination + \"^\" + data.token);\n                }\n            });\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-gs-select-file\">' + '<div class=\"ui-gs-browse-field\">' + '<span class=\"ui-gs-browse-button\" />' + '<span class=\"ui-gs-filename-textbox\" />' + '</div>' + '<div class=\"ui-gs-token-field\">' + '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' + '<span class=\"ui-gs-token-textbox\" />' + '</div>' + '</div>';\n        },\n\n        /** Return/Set currently selected genomespace filename/token */\n        value: function value(new_value) {\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            } else {\n                return this._getValue();\n            }\n        },\n\n        // get value\n        _getValue: function _getValue() {\n            return this.filename_textbox.value() + \"^\" + this.token_textbox.value();\n        },\n\n        // set value\n        _setValue: function _setValue(new_value) {\n            if (new_value) {\n                values = new_value.split(\"^\");\n                this.filename_textbox.value(values[0]);\n                this.token_textbox.value(values[1]);\n            }\n        }\n\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// Provides support for interacting with the GenomeSpace File Browser popup dialogue\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\n    // tool form templates\n    return {\n        openFileBrowser: function openFileBrowser(options) {\n            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n            var GS_UPLOAD_URL = GS_UI_URL + 'upload/loadUrlToGenomespace.html?getLocation=true';\n\n            var newWin = window.open(GS_UPLOAD_URL, \"GenomeSpace File Browser\", \"height=360px,width=600px\");\n\n            successCalBack = options['successCallback'];\n            window.addEventListener(\"message\", function (e) {\n                successCalBack(e.data);\n            }, false);\n\n            newWin.focus();\n\n            if (options['errorCallback'] != null) newWin.setCallbackOnGSUploadError = config['errorCallback'];\n        }\n\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Renders the color picker used e.g. in the tool form **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    return Backbone.View.extend({\n        colors: {\n            standard: ['c00000', 'ff0000', 'ffc000', 'ffff00', '92d050', '00b050', '00b0f0', '0070c0', '002060', '7030a0'],\n            base: ['ffffff', '000000', 'eeece1', '1f497d', '4f81bd', 'c0504d', '9bbb59', '8064a2', '4bacc6', 'f79646'],\n            theme: [['f2f2f2', '7f7f7f', 'ddd9c3', 'c6d9f0', 'dbe5f1', 'f2dcdb', 'ebf1dd', 'e5e0ec', 'dbeef3', 'fdeada'], ['d8d8d8', '595959', 'c4bd97', '8db3e2', 'b8cce4', 'e5b9b7', 'd7e3bc', 'ccc1d9', 'b7dde8', 'fbd5b5'], ['bfbfbf', '3f3f3f', '938953', '548dd4', '95b3d7', 'd99694', 'c3d69b', 'b2a2c7', '92cddc', 'fac08f'], ['a5a5a5', '262626', '494429', '17365d', '366092', '953734', '76923c', '5f497a', '31859b', 'e36c09'], ['7f7f7e', '0c0c0c', '1d1b10', '0f243e', '244061', '632423', '4f6128', '3f3151', '205867', '974806']]\n        },\n\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {});\n            this.setElement(this._template());\n            this.$panel = this.$('.ui-color-picker-panel');\n            this.$view = this.$('.ui-color-picker-view');\n            this.$value = this.$('.ui-color-picker-value');\n            this.$header = this.$('.ui-color-picker-header');\n            this._build();\n            this.visible = false;\n            this.value(this.options.value);\n            this.$boxes = this.$('.ui-color-picker-box');\n            var self = this;\n            this.$boxes.on('click', function () {\n                self.value($(this).css('background-color'));\n                self.$header.trigger('click');\n            });\n            this.$header.on('click', function () {\n                self.visible = !self.visible;\n                if (self.visible) {\n                    self.$view.fadeIn('fast');\n                } else {\n                    self.$view.fadeOut('fast');\n                }\n            });\n        },\n\n        /** Get/set value */\n        value: function value(new_val) {\n            if (new_val !== undefined && new_val !== null) {\n                this.$value.css('background-color', new_val);\n                this.$('.ui-color-picker-box').empty();\n                this.$(this._getValue()).html(this._templateCheck());\n                this.options.onchange && this.options.onchange(new_val);\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var rgb = this.$value.css('background-color');\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if (rgb) {\n                var hex = function hex(x) {\n                    return ('0' + parseInt(x).toString(16)).slice(-2);\n                };\n\n                return '#' + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function _build() {\n            this._content({ colors: this.colors.base });\n            for (var i in this.colors.theme) {\n                var line_def = {};\n                if (i == 0) {\n                    line_def['bottom'] = true;\n                } else if (i != this.colors.theme.length - 1) {\n                    line_def['top'] = true;\n                    line_def['bottom'] = true;\n                } else {\n                    line_def['top'] = true;\n                }\n                line_def['colors'] = this.colors.theme[i];\n                this._content(line_def);\n            }\n            this._content({ colors: this.colors.standard });\n        },\n\n        /** Create content */\n        _content: function _content(options) {\n            var colors = options.colors;\n            var $content = $(this._templateContent());\n            var $line = $content.find('.line');\n            this.$panel.append($content);\n            for (var i in colors) {\n                var $box = $(this._templateBox(colors[i]));\n                if (options.top) {\n                    $box.css('border-top', 'none');\n                    $box.css('border-top-left-radius', '0px');\n                    $box.css('border-top-right-radius', '0px');\n                }\n                if (options.bottom) {\n                    $box.css('border-bottom', 'none');\n                    $box.css('border-bottom-left-radius', '0px');\n                    $box.css('border-bottom-right-radius', '0px');\n                }\n                $line.append($box);\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function _templateCheck() {\n            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function _templateContent() {\n            return '<div class=\"ui-color-picker-content\">' + '<div class=\"line\"/>' + '</div>';\n        },\n\n        /** Box template */\n        _templateBox: function _templateBox(color) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function _template() {\n            return '<div class=\"ui-color-picker\">' + '<div class=\"ui-color-picker-header\">' + '<div class=\"ui-color-picker-value\"/>' + '<div class=\"ui-color-picker-label\">Select a color</div>' + '</div>' + '<div class=\"ui-color-picker-view ui-input\">' + '<div class=\"ui-color-picker-panel\"/>' + '</div>';\n            '</div>';\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 44:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nvar jQuery = __webpack_require__(0),\n    $ = jQuery,\n    QUERY_STRING = __webpack_require__(20),\n    Ui = __webpack_require__(5);\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function initialize(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function push(url, data) {\n        data = data || {};\n        data.__identifer = Math.random().toString(36).substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf('?') == -1 ? '?' : '&';\n            url += $.param(data, true);\n        }\n        Galaxy.params = {};\n        this.navigate(url, { 'trigger': true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function execute(callback, args, name) {\n        Galaxy.debug('router execute:', callback, args, name);\n        var queryObj = QUERY_STRING.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function authenticate(args, name) {\n        return true;\n    },\n\n    access_denied: function access_denied() {\n        this.page.display(new Ui.Message({ status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true }));\n    }\n});\n\nmodule.exports = Router;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 5:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(16), __webpack_require__(29), __webpack_require__(17), __webpack_require__(30), __webpack_require__(10), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.tagName = options.tagName || this.tagName;\n            this.setElement($('<' + this.tagName + '/>'));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n        title: function title(new_title) {\n            this.model.set('title', new_title);\n        },\n        value: function value() {\n            return this.model.get('title');\n        },\n        render: function render() {\n            this.$el.removeClass().addClass('ui-label').addClass(this.model.get('cls')).html(this.model.get('title'));\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                message: null,\n                status: 'info',\n                cls: '',\n                persistent: false,\n                fade: true\n            }).set(options);\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n        update: function update(options) {\n            this.model.set(options);\n        },\n        render: function render() {\n            this.$el.removeClass().addClass('ui-message').addClass(this.model.get('cls'));\n            var status = this.model.get('status');\n            if (this.model.get('large')) {\n                this.$el.addClass((status == 'success' && 'done' || status == 'danger' && 'error' || status) + 'messagelarge');\n            } else {\n                this.$el.addClass('alert').addClass('alert-' + status);\n            }\n            if (this.model.get('message')) {\n                this.$el.html(this.messageForDisplay());\n                this.$el[this.model.get('fade') ? 'fadeIn' : 'show']();\n                this.timeout && window.clearTimeout(this.timeout);\n                if (!this.model.get('persistent')) {\n                    var self = this;\n                    this.timeout = window.setTimeout(function () {\n                        self.model.set('message', '');\n                    }, 3000);\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function messageForDisplay() {\n            return _.escape(this.model.get('message'));\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function messageForDisplay() {\n            return this.model.get('message');\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                type: 'text',\n                placeholder: '',\n                disabled: false,\n                readonly: false,\n                visible: true,\n                cls: '',\n                area: false,\n                color: null,\n                style: null\n            }).set(options);\n            this.tagName = this.model.get('area') ? 'textarea' : 'input';\n            this.setElement($('<' + this.tagName + '/>'));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set('value', typeof new_val === 'string' ? new_val : '');\n            return this.model.get('value');\n        },\n        render: function render() {\n            var self = this;\n            this.$el.removeClass().addClass('ui-' + this.tagName).addClass(this.model.get('cls')).addClass(this.model.get('style')).attr('id', this.model.id).attr('type', this.model.get('type')).attr('placeholder', this.model.get('placeholder')).css('color', this.model.get('color') || '').css('border-color', this.model.get('color') || '');\n            var datalist = this.model.get('datalist');\n            if ($.isArray(datalist) && datalist.length > 0) {\n                this.$el.autocomplete({ source: function source(request, response) {\n                        response(self.model.get('datalist'));\n                    },\n                    change: function change() {\n                        self._onchange();\n                    } });\n            }\n            if (this.model.get('value') !== this.$el.val()) {\n                this.$el.val(this.model.get('value'));\n            }\n            _.each(['readonly', 'disabled'], function (attr_name) {\n                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n            });\n            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n            return this;\n        },\n        _onchange: function _onchange() {\n            this.value(this.$el.val());\n            this.model.get('onchange') && this.model.get('onchange')(this.model.get('value'));\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$hidden = $('<div/>')));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set('value', new_val);\n            return this.model.get('value');\n        },\n        render: function render() {\n            this.$el.attr('id', this.model.id);\n            this.$hidden.val(this.model.get('value'));\n            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$file = $('<input/>').attr('type', 'file').addClass('ui-margin-bottom')).append(this.$text = $('<textarea/>').addClass('ui-textarea').attr('disabled', true)).append(this.$wait = $('<i/>').addClass('fa fa-spinner fa-spin')));\n            this.listenTo(this.model, 'change', this.render, this);\n            this.$file.on('change', function (e) {\n                self._readFile(e);\n            });\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set('value', new_val);\n            return this.model.get('value');\n        },\n        render: function render() {\n            this.$el.attr('id', this.model.id);\n            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n            this.model.get('value') ? this.$text.text(this.model.get('value')).show() : this.$text.hide();\n            this.model.get('wait') ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function _readFile(e) {\n            var self = this;\n            var file = e.target.files && e.target.files[0];\n            if (file) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    self.model.set({ wait: false, value: this.result });\n                };\n                this.model.set({ wait: true, value: null });\n                reader.readAsText(file);\n            }\n        }\n    });\n\n    return {\n        Button: Buttons.ButtonDefault,\n        ButtonIcon: Buttons.ButtonIcon,\n        ButtonCheck: Buttons.ButtonCheck,\n        ButtonMenu: Buttons.ButtonMenu,\n        ButtonLink: Buttons.ButtonLink,\n        Input: Input,\n        Label: Label,\n        Message: Message,\n        UnescapedMessage: UnescapedMessage,\n        Upload: Upload,\n        Modal: Modal,\n        RadioButton: Options.RadioButton,\n        Checkbox: Options.Checkbox,\n        Radio: Options.Radio,\n        Select: Select,\n        Hidden: Hidden,\n        Slider: Slider,\n        Drilldown: Drilldown\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 57:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Generic form view */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Form, Ui) {\n\n    var View = Backbone.View.extend({\n\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model(options);\n            this.url = this.model.get('url');\n            this.redirect = this.model.get('redirect');\n            this.setElement('<div/>');\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + this.url,\n                type: 'GET'\n            }).done(function (response) {\n                var options = $.extend({}, self.model.attributes, response);\n                var form = new Form({\n                    title: options.title,\n                    message: options.message,\n                    status: options.status || 'warning',\n                    icon: options.icon,\n                    inputs: options.inputs,\n                    buttons: {\n                        'submit': new Ui.Button({\n                            tooltip: options.submit_tooltip,\n                            title: options.submit_title || 'Save',\n                            icon: options.submit_icon || 'fa-save',\n                            cls: 'btn btn-primary ui-clear-float',\n                            onclick: function onclick() {\n                                self._submit(form);\n                            }\n                        })\n                    }\n                });\n                self.$el.empty().append(form.$el);\n            }).fail(function (response) {\n                self.$el.empty().append(new Ui.Message({\n                    message: 'Failed to load resource ' + self.url + '.',\n                    status: 'danger',\n                    persistent: true\n                }).$el);\n            });\n        },\n\n        _submit: function _submit(form) {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + self.url,\n                data: JSON.stringify(form.data.create()),\n                type: 'PUT',\n                contentType: 'application/json'\n            }).done(function (response) {\n                var success_message = { message: response.message, status: 'success', persistent: false };\n                if (self.redirect) {\n                    window.location = Galaxy.root + self.redirect + '?' + $.param(success_message);\n                } else {\n                    form.data.matchModel(response, function (input, input_id) {\n                        form.field_list[input_id].value(input.value);\n                    });\n                    self._showMessage(form, success_message);\n                }\n            }).fail(function (response) {\n                self._showMessage(form, { message: response.responseJSON.err_msg, status: 'danger', persistent: false });\n            });\n        },\n\n        _showMessage: function _showMessage(form, options) {\n            var $panel = form.$el.parents().filter(function () {\n                return ['auto', 'scroll'].indexOf($(this).css('overflow')) != -1;\n            }).first();\n            $panel.animate({ scrollTop: 0 }, 500);\n            form.message.update(options);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui) {\n    var View = Backbone.View.extend({\n        visible: false,\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: 'ui-portlet',\n                title: '',\n                icon: '',\n                buttons: null,\n                body: null,\n                scrollable: true,\n                nopadding: false,\n                operations: null,\n                collapsible: false,\n                collapsible_button: false,\n                collapsed: false,\n                onchange_title: null\n            }).set(options);\n            this.setElement(this._template());\n\n            // link all dom elements\n            this.$body = this.$('.portlet-body');\n            this.$title_text = this.$('.portlet-title-text');\n            this.$title_icon = this.$('.portlet-title-icon');\n            this.$header = this.$('.portlet-header');\n            this.$content = this.$('.portlet-content');\n            this.$backdrop = this.$('.portlet-backdrop');\n            this.$buttons = this.$('.portlet-buttons');\n            this.$operations = this.$('.portlet-operations');\n\n            // add body to component list\n            this.model.get('body') && this.append(this.model.get('body'));\n\n            // add icon for collapsible option\n            this.collapsible_button = new Ui.ButtonIcon({\n                icon: 'fa-eye',\n                tooltip: 'Collapse/Expand',\n                cls: 'ui-button-icon-plain',\n                onclick: function onclick() {\n                    self[self.collapsed ? 'expand' : 'collapse']();\n                }\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr('id', options.id);\n            this.$header[options.title ? 'show' : 'hide']();\n            this.$title_text.html(options.title);\n            _.each([this.$content, this.$body], function ($el) {\n                $el[options.nopadding ? 'addClass' : 'removeClass']('no-padding');\n            });\n\n            // render title icon\n            if (options.icon) {\n                this.$title_icon.removeClass().addClass('portlet-title-icon fa').addClass(options.icon).show();\n            } else {\n                this.$title_icon.hide();\n            }\n\n            // make portlet collapsible\n            this.$title_text[options.collapsible ? 'addClass' : 'removeClass']('no-highlight collapsible').off();\n            if (options.collapsible) {\n                this.$title_text.on('click', function () {\n                    self[self.collapsed ? 'expand' : 'collapse']();\n                });\n                options.collapsed ? this.collapse() : this.expand();\n            }\n\n            // allow title editing\n            this.$title_text.prop('disabled', !options.onchange_title);\n            options.onchange_title && this.$title_text.make_text_editable({\n                on_finish: function on_finish(new_title) {\n                    options.onchange_title(new_title);\n                }\n            });\n\n            // render buttons\n            if (options.buttons) {\n                this.$buttons.empty().show();\n                $.each(this.model.get('buttons'), function (name, item) {\n                    item.$el.prop('id', name);\n                    self.$buttons.append(item.$el);\n                });\n            } else {\n                this.$buttons.hide();\n            }\n\n            // render operations\n            this.$operations.empty;\n            if (options.collapsible_button) {\n                this.$operations.append(this.collapsible_button.$el);\n            }\n            if (options.operations) {\n                $.each(options.operations, function (name, item) {\n                    item.$el.prop('id', name);\n                    self.$operations.append(item.$el);\n                });\n            }\n            return this;\n        },\n\n        /** Append new doms to body */\n        append: function append($el) {\n            this.$body.append($el);\n        },\n\n        /** Remove all content */\n        empty: function empty() {\n            this.$body.empty();\n        },\n\n        /** Return header element */\n        header: function header() {\n            return this.$header;\n        },\n\n        /** Return body element */\n        body: function body() {\n            return this.$body;\n        },\n\n        /** Show portlet */\n        show: function show() {\n            this.visible = true;\n            this.$el.fadeIn('fast');\n        },\n\n        /** Hide portlet */\n        hide: function hide() {\n            this.visible = false;\n            this.$el.hide();\n        },\n\n        /** Enable a particular button */\n        enableButton: function enableButton(id) {\n            this.$buttons.find('#' + id).prop('disabled', false);\n        },\n\n        /** Disable a particular button */\n        disableButton: function disableButton(id) {\n            this.$buttons.find('#' + id).prop('disabled', true);\n        },\n\n        /** Hide a particular operation */\n        hideOperation: function hideOperation(id) {\n            this.$operations.find('#' + id).hide();\n        },\n\n        /** Show a particular operation */\n        showOperation: function showOperation(id) {\n            this.$operations.find('#' + id).show();\n        },\n\n        /** Replaces the event callback of an existing operation */\n        setOperation: function setOperation(id, callback) {\n            this.$operations.find('#' + id).off('click').on('click', callback);\n        },\n\n        /** Change title */\n        title: function title(new_title) {\n            new_title && this.$title_text.html(new_title);\n            return this.$title_text.html();\n        },\n\n        /** Collapse portlet */\n        collapse: function collapse() {\n            this.collapsed = true;\n            this.$content.height('0%');\n            this.$body.hide();\n            this.collapsible_button.setIcon('fa-eye-slash');\n        },\n\n        /** Expand portlet */\n        expand: function expand() {\n            this.collapsed = false;\n            this.$content.height('100%');\n            this.$body.fadeIn('fast');\n            this.collapsible_button.setIcon('fa-eye');\n        },\n\n        /** Disable content access */\n        disable: function disable() {\n            this.$backdrop.show();\n        },\n\n        /** Enable content access */\n        enable: function enable() {\n            this.$backdrop.hide();\n        },\n\n        _template: function _template() {\n            return $('<div/>').append($('<div/>').addClass('portlet-header').append($('<div/>').addClass('portlet-operations')).append($('<div/>').addClass('portlet-title').append($('<i/>').addClass('portlet-title-icon')).append($('<span/>').addClass('portlet-title-text')))).append($('<div/>').addClass('portlet-content').append($('<div/>').addClass('portlet-body')).append($('<div/>').addClass('portlet-buttons'))).append($('<div/>').addClass('portlet-backdrop'));\n        }\n    });\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5), __webpack_require__(31), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui, FormSection, FormData) {\n    return Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model({\n                initial_errors: false,\n                cls: 'ui-portlet-limited',\n                icon: null,\n                always_refresh: true,\n                status: 'warning',\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement('<div/>');\n            this.render();\n        },\n\n        /** Update available options */\n        update: function update(new_model) {\n            var self = this;\n            this.data.matchModel(new_model, function (node, input_id) {\n                var input = self.input_list[input_id];\n                if (input && input.options) {\n                    if (!_.isEqual(input.options, node.options)) {\n                        input.options = node.options;\n                        var field = self.field_list[input_id];\n                        if (field.update) {\n                            var new_options = [];\n                            if (['data', 'data_collection', 'drill_down'].indexOf(input.type) != -1) {\n                                new_options = input.options;\n                            } else {\n                                for (var i in node.options) {\n                                    var opt = node.options[i];\n                                    if (opt.length > 2) {\n                                        new_options.push({ label: opt[0], value: opt[1] });\n                                    }\n                                }\n                            }\n                            field.update(new_options);\n                            field.trigger('change');\n                            Galaxy.emit.debug('form-view::update()', 'Updating options for ' + input_id);\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function wait(active) {\n            for (var i in this.input_list) {\n                var field = this.field_list[i];\n                var input = this.input_list[i];\n                if (input.is_dynamic && field.wait && field.unwait) {\n                    field[active ? 'wait' : 'unwait']();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function highlight(input_id, message, silent) {\n            var input_element = this.element_list[input_id];\n            if (input_element) {\n                input_element.error(message || 'Please verify this parameter.');\n                this.portlet.expand();\n                this.trigger('expand', input_id);\n                if (!silent) {\n                    var $panel = this.$el.parents().filter(function () {\n                        return ['auto', 'scroll'].indexOf($(this).css('overflow')) != -1;\n                    }).first();\n                    $panel.animate({ scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500);\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function errors(options) {\n            this.trigger('reset');\n            if (options && options.errors) {\n                var error_messages = this.data.matchResponse(options.errors);\n                for (var input_id in this.element_list) {\n                    var input = this.element_list[input_id];\n                    if (error_messages[input_id]) {\n                        this.highlight(input_id, error_messages[input_id], true);\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function render() {\n            var self = this;\n            this.off('change');\n            this.off('reset');\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager(this);\n            this._renderForm();\n            this.data.create();\n            this.model.get('initial_errors') && this.errors(this.model.attributes);\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on('change', function (input_id) {\n                var input = self.input_list[input_id];\n                if (!input || input.refresh_on_change || self.model.get('always_refresh')) {\n                    var new_check = self.data.checksum();\n                    if (new_check != current_check) {\n                        current_check = new_check;\n                        self.model.get('onchange')();\n                    }\n                }\n            });\n            this.on('reset', function () {\n                _.each(self.element_list, function (input_element) {\n                    input_element.reset();\n                });\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function _renderForm() {\n            $('.tooltip').remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View(this, { inputs: options.inputs });\n            this.portlet = new Portlet.View({\n                icon: options.icon,\n                title: options.title,\n                cls: options.cls,\n                operations: options.operations,\n                buttons: options.buttons,\n                collapsible: options.collapsible,\n                collapsed: options.collapsed,\n                onchange_title: options.onchange_title\n            });\n            this.portlet.append(this.message.$el);\n            this.portlet.append(this.section.$el);\n            this.$el.empty();\n            options.inputs && this.$el.append(this.portlet.$el);\n            options.message && this.message.update({ persistent: true, status: options.status, message: options.message });\n            Galaxy.emit.debug('form-view::initialize()', 'Completed');\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ })\n\n},[156]);\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","/** This module contains all button views. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : 'btn btn-default',\n                wait        : false,\n                wait_text   : 'Sending...',\n                wait_cls    : 'btn btn-info',\n                disabled    : false,\n                percentage  : -1\n            }).set( options );\n            this.setElement( $( '<button/>' ).attr( 'type', 'button' )\n                                             .append( this.$icon        = $( '<i/>' ) )\n                                             .append( this.$title       = $( '<span/>' ) )\n                                             .append( this.$progress    = $( '<div/>' ).append( this.$progress_bar = $( '<div/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'ui-button-default' )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'id', options.id )\n                    .attr( 'disabled', options.disabled )\n                    .off( 'click' ).on( 'click' , function() {\n                        $( '.tooltip' ).hide();\n                        options.onclick && !self.disabled && options.onclick();\n                    })\n                    .tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$progress.addClass( 'progress' ).css( 'display', options.percentage !== -1 ? 'block' : 'none' );\n            this.$progress_bar.addClass( 'progress-bar' ).css( { width : options.percentage + '%' } );\n            this.$icon.removeClass().addClass( 'icon fa' );\n            this.$title.removeClass().addClass( 'title' );\n            if ( options.wait ) {\n                this.$el.addClass( options.wait_cls ).prop( 'disabled', true );\n                this.$icon.addClass( 'fa-spinner fa-spin ui-margin-right' );\n                this.$title.html( options.wait_text );\n            } else {\n                this.$el.addClass( options.cls );\n                this.$icon.addClass( options.icon );\n                this.$title.html( options.title );\n                options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set( 'disabled', true );\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set( 'disabled', false );\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set( 'wait', true );\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set( 'wait', false );\n        },\n\n        /** Change icon */\n        setIcon: function( icon ) {\n            this.model.set( 'icon', icon );\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : ''\n            }).set( options );\n            this.setElement( $( '<a/>' ).append( this.$icon  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .attr( { id         : options.id,\n                             href       : options.href || 'javascript:void(0)',\n                             title      : options.title,\n                             target     : options.target || '_top',\n                             disabled   : options.disabled } )\n                    .tooltip( { placement: 'bottom' } )\n                    .off( 'click' ).on( 'click' , function() {\n                        options.onclick && !options.disabled && options.onclick();\n                    });\n            this.$icon.removeClass().addClass( options.icon );\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : 'Select/Unselect all',\n                icons       : [ 'fa-square-o', 'fa-minus-square-o', 'fa-check-square-o' ],\n                value       : 0,\n                onchange    : function(){}\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$icon   = $( '<span/>' ) )\n                                          .append( this.$title  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass( 'ui-button-check' )\n                    .off( 'click' ).on('click', function() {\n                        self.model.set( 'value', ( self.model.get( 'value' ) === 0 && 2 ) || 0 );\n                        options.onclick && options.onclick();\n                    });\n            this.$title.html( options.title );\n            this.$icon.removeClass()\n                      .addClass( 'icon fa ui-margin-right' )\n                      .addClass( options.icons[ options.value ] );\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function ( new_val, total ) {\n            if ( new_val !== undefined ) {\n                if ( total && new_val !== 0 ) {\n                    new_val = ( new_val !== total ) && 1 || 2;\n                }\n                this.model.set( 'value', new_val );\n                this.model.get( 'onchange' )( this.model.get( 'value' ) );\n            }\n            return this.model.get( 'value' );\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : 'ui-button-icon',\n                disabled    : false\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$button = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                               .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render : function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'disabled', options.disabled )\n                    .attr( 'id', options.id )\n                    .off( 'click' ).on( 'click', function() {\n                        $( '.tooltip' ).hide();\n                        !options.disabled && options.onclick && options.onclick();\n                    });\n            this.$button.addClass( 'button' ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function ( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id              : '',\n                title           : '',\n                pull            : 'right',\n                icon            : null,\n                onclick         : null,\n                cls             : 'ui-button-icon ui-button-menu',\n                tooltip         : '',\n                target          : '',\n                href            : '',\n                onunload        : null,\n                visible         : true,\n                tag             : ''\n            }).set( options );\n            this.collection = new Backbone.Collection();\n            this.setElement( $( '<div/>' ).append( this.$root = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                             .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.listenTo( this.collection, 'change add remove reset', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'dropdown' )\n                    .addClass( options.cls )\n                    .attr( 'id', options.id )\n                    .css( { display : options.visible && this.collection.where( { visible: true } ).length > 0 ? 'block' : 'none' } );\n            this.$root.addClass( 'root button dropdown-toggle' )\n                      .attr( 'data-toggle', 'dropdown' )\n                      .tooltip( { title: options.tooltip, placement: 'bottom' } )\n                      .off( 'click' ).on( 'click', function( e ) {\n                            $( '.tooltip' ).hide();\n                            e.preventDefault();\n                            options.onclick && options.onclick();\n                      } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.removeClass().addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            this.$menu && this.$menu.remove();\n            if ( this.collection.length > 0 ) {\n                this.$menu = $( '<ul/>' ).addClass( 'menu dropdown-menu' )\n                                         .addClass( 'pull-' + self.model.get( 'pull' ) )\n                                         .attr( 'role', 'menu' );\n                this.$el.append( this.$menu );\n            }\n            this.collection.each( function( submodel ) {\n                var suboptions = submodel.attributes;\n                if ( suboptions.visible ) {\n                    var $link = $( '<a/>' ).addClass( 'dropdown-item' )\n                                           .attr( { href : suboptions.href, target : suboptions.target } )\n                                           .append( $( '<i/>' ).addClass( 'fa' )\n                                                               .addClass( suboptions.icon )\n                                                               .css( 'display', suboptions.icon ? 'inline-block' : 'none' ) )\n                                           .append( suboptions.title )\n                                           .on( 'click', function( e ) {\n                                                if ( suboptions.onclick ) {\n                                                    e.preventDefault();\n                                                    suboptions.onclick();\n                                                }\n                                           } );\n                    self.$menu.append( $( '<li/>' ).append( $link ) );\n                    suboptions.divider && self.$menu.append( $( '<li/>' ).addClass( 'divider' ) );\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function ( options ) {\n            this.collection.add( Utils.merge( options, {\n                title       : '',\n                target      : '',\n                href        : '',\n                onclick     : null,\n                divider     : false,\n                visible     : true,\n                icon        : null,\n                cls         : 'button-menu btn-group'\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault   : ButtonDefault,\n        ButtonLink      : ButtonLink,\n        ButtonIcon      : ButtonIcon,\n        ButtonCheck     : ButtonCheck,\n        ButtonMenu      : ButtonMenu\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'utils/utils',\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    'mvc/ui/popup-menu'\n], function(Utils, GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.grid = new GridModel();\n        this.dict_format = grid_config.dict_format;\n        this.title = grid_config.title;\n        var self = this;\n        window.add_tag_to_grid_filter = function( tag_name, tag_value ){\n            // Put tag name and value together.\n            var tag = tag_name + ( tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\" );\n            var advanced_search = $( '#advanced-search').is(\":visible\" );\n            if( !advanced_search ){\n                $('#standard-search').slideToggle('fast');\n                $('#advanced-search').slideToggle('fast');\n            }\n            self.add_filter_condition( \"tags\", tag );\n        };\n\n        // set element\n        if ( this.dict_format ) {\n            this.setElement('<div/>');\n            if ( grid_config.url_base && !grid_config.items ) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data['f-' + k] = v;\n                });\n                $.ajax({\n                    url     : grid_config.url_base + '?' + $.param( url_data ),\n                    success : function( response ) {\n                        response.embedded = grid_config.embedded;\n                        response.filters  = grid_config.filters || {};\n                        self.init_grid( response );\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement('#grid-container');\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        this.grid.set( grid_config );\n\n        // get options\n        var options = this.grid.attributes;\n\n        if (this.allow_title_display && options.title){\n            Utils.setWindowTitle(options.title);\n        }\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each( options.items, function( item, index ) {\n            var button = self.$( '#grid-' + index + '-popup' ).off();\n            var popup = new PopupMenu( button );\n            _.each( options[ 'operations' ], function( operation ) {\n                self._add_operation( popup, operation, item );\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function( popup, operation, item ) {\n        var self = this;\n        var settings = item.operation_config[ operation.label ];\n        if ( settings.allowed && operation.allow_popup ) {\n            popup.addItem({\n                html                : operation.label,\n                href                : settings.url_args,\n                target              : settings.target,\n                confirmation_text   : operation.confirm,\n                func                : function( e ) {\n                    e.preventDefault();\n                    var label = $( e.target ).html();\n                    if ( operation.onclick ) {\n                        operation.onclick( item.encode_id );\n                    } else {\n                        self.execute( this.findItemByHtml( label ) );\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        var options = {\n            operation           : operation_name,\n            id                  : item_ids,\n            confirmation_text   : confirmation_text\n        };\n        if ( operation.target == 'top' ) {\n            options = _.extend( options, {\n                href   : operation.href,\n                target : operation.target\n            });\n        }\n        this.execute( options );\n        return true;\n    },\n\n    check_all_items: function () {\n        var check = this.$('.grid-row-select-checkbox');\n        var state = this.$( '#check_all' ).prop( 'checked' );\n        _.each( check, function( c ) {\n            $( c ).prop( 'checked', state );\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if ( target == 'top' ) {\n                window.top.location = href + '?' + $.param( this.grid.get_url_data() );\n            } else if ( this.grid.can_async_op(operation) || this.dict_format ) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async') || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        var advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n                var advanced_search = self.$el.find('#advanced-search').is(':visible');\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    GalaxyApp = require( 'galaxy' ).GalaxyApp,\n    AdminPanel = require( './panels/admin-panel' ),\n    FormWrapper = require( 'mvc/form/form-wrapper' ),\n    GridView = require( 'mvc/grid/grid-view' ),\n    Ui = require( 'mvc/ui/ui-misc' ),\n    QueryStringParsing = require( 'utils/query-string-parsing' ),\n    Router = require( 'layout/router' ),\n    Utils = require( 'utils/utils' ),\n    Page = require( 'layout/page' );\n\nwindow.app = function app( options, bootstrapped ){\n    window.Galaxy = new GalaxyApp( options, bootstrapped );\n    Galaxy.debug( 'admin app' );\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            '(/)admin(/)users' : 'show_users',\n            '(/)admin(/)roles' : 'show_roles',\n            '(/)admin(/)groups' : 'show_groups',\n            '(/)admin(/)tool_versions' : 'show_tool_versions',\n            '(/)admin(/)quotas' : 'show_quotas',\n            '(/)admin(/)forms(/)(:form_id)' : 'show_forms'\n        },\n\n        authenticate: function( args, name ) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get( 'is_admin' );\n        },\n\n        show_users: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_roles: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/roles_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_groups: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/groups_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_tool_versions: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/tool_versions_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_quotas: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/quotas_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_forms : function( form_id ) {\n            var id = '?id=' + QueryStringParsing.get( 'id' );\n            var form_defs = {\n                reset_user_password: {\n                    title           : 'Reset passwords',\n                    url             : 'admin/reset_user_password' + id,\n                    icon            : 'fa-user',\n                    submit_title    : 'Save new password',\n                    redirect        : 'admin/users'\n                },\n                manage_roles_and_groups_for_user: {\n                    url             : 'admin/manage_roles_and_groups_for_user' + id,\n                    icon            : 'fa-users',\n                    redirect        : 'admin/users'\n                },\n                manage_users_and_groups_for_role: {\n                    url             : 'admin/manage_users_and_groups_for_role' + id,\n                    redirect        : 'admin/roles'\n                },\n                manage_users_and_roles_for_group: {\n                    url             : 'admin/manage_users_and_roles_for_group' + id,\n                    redirect        : 'admin/groups'\n                },\n                manage_users_and_groups_for_quota: {\n                    url             : 'admin/manage_users_and_groups_for_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                create_role: {\n                    url             : 'admin/create_role',\n                    redirect        : 'admin/roles'\n                },\n                create_group: {\n                    url             : 'admin/create_group',\n                    redirect        : 'admin/groups'\n                },\n                create_quota: {\n                    url             : 'admin/create_quota',\n                    redirect        : 'admin/quotas'\n                },\n                rename_role: {\n                    url             : 'admin/rename_role' + id,\n                    redirect        : 'admin/roles'\n                },\n                rename_group: {\n                    url             : 'admin/rename_group' + id,\n                    redirect        : 'admin/groups'\n                },\n                rename_quota: {\n                    url             : 'admin/rename_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                edit_quota: {\n                    url             : 'admin/edit_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                set_quota_default: {\n                    url             : 'admin/set_quota_default' + id,\n                    redirect        : 'admin/quotas'\n                },\n            };\n            this.page.display( new FormWrapper.View ( form_defs[ form_id ] ) );\n        }\n    });\n\n    $(function() {\n        _.extend( options.config, { active_view : 'admin' } );\n        Utils.setWindowTitle(\"Administration\");\n        Galaxy.page = new Page.View( _.extend( options, {\n            Left    : AdminPanel,\n            Router  : AdminRouter\n        } ) );\n    });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","var _l = require( 'utils/localization' );\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function( page, options ) {\n        var self = this;\n        this.page       = page;\n        this.root       = options.root;\n        this.config     = options.config;\n        this.settings   = options.settings;\n        this.message    = options.message;\n        this.status     = options.status;\n        this.model = new Backbone.Model({\n            title   : _l( 'Administration' )\n        });\n        this.categories = new Backbone.Collection([{\n            title : 'Server',\n            items : [ {\n                title   : 'Data types registry',\n                url     : 'admin/view_datatypes_registry'\n            },{\n                title   : 'Data tables registry',\n                url     : 'admin/view_tool_data_tables'\n            },{\n                title   : 'Display applications',\n                url     : 'admin/display_applications'\n            },{\n                title   : 'Manage jobs',\n                url     : 'admin/jobs'\n            } ]\n        },{\n            title : 'Tools and Tool Shed',\n            items : [ {\n                title   : 'Search Tool Shed',\n                url     : 'admin_toolshed/browse_tool_sheds',\n                enabled : self.settings.is_tool_shed_installed\n            },{\n                title   : 'Search Tool Shed (Beta)',\n                url     : 'admin_toolshed/browse_toolsheds',\n                enabled : self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            },{\n                title   : 'Monitor installing repositories',\n                url     : 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n                enabled : self.settings.installing_repository_ids\n            },{\n                title   : 'Manage installed tools',\n                url     : 'admin_toolshed/browse_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Reset metadata',\n                url     : 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Download local tool',\n                url     : 'admin/package_tool'\n            },{\n                title   : 'Tool lineage',\n                url     : 'admin/tool_versions',\n                target  : '__use_router__'\n            },{\n                title   : 'Reload a tool\\'s configuration',\n                url     : 'admin/reload_tool'\n            },{\n                title   : 'Review tool migration stages',\n                url     : 'admin/review_tool_migration_stages'\n            },{\n                title   : 'View Tool Error Logs',\n                url     : 'admin/tool_errors'\n            },{\n                title   : 'Manage Display Whitelist',\n                url     : 'admin/sanitize_whitelist'\n            },{\n                title   : 'Manage Tool Dependencies',\n                url     : 'admin/manage_tool_dependencies'\n            } ]\n        },{\n            title : 'User Management',\n            items : [ {\n                title   : 'Users',\n                url     : 'admin/users',\n                target  : '__use_router__'\n            },{\n                title   : 'Groups',\n                url     : 'admin/groups',\n                target  : '__use_router__'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles',\n                target  : '__use_router__'\n            },{\n                title   : 'API keys',\n                url     : 'userskeys/all_users'\n            },{\n                title   : 'Impersonate a user',\n                url     : 'admin/impersonate',\n                enabled : self.config.allow_user_impersonation\n            } ]\n        },{\n            title : 'Data',\n            items : [ {\n                title   : 'Quotas',\n                url     : 'admin/quotas',\n                target  : '__use_router__',\n                enabled : self.config.enable_quotas\n            },{\n                title   : 'Data libraries',\n                url     : 'library_admin/browse_libraries'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles',\n                target  : '__use_router__'\n            },{\n                title   : 'Local data',\n                url     : 'data_manager'\n            } ]\n        },{\n            title : 'Form Definitions',\n            items : [ {\n                title   : 'Form definitions',\n                url     : 'forms/browse_form_definitions'\n            } ]\n        },{\n            title : 'Sample Tracking',\n            items : [ {\n                title   : 'Sequencers and external services',\n                url     : 'external_service/browse_external_services'\n            },{\n                title   : 'Request types',\n                url     : 'request_type/browse_request_types'\n            },{\n                title   : 'Sequencing requests',\n                url     : 'requests_admin/browse_requests'\n            },{\n                title   : 'Find samples',\n                url     : 'requests_common/find_samples?cntrller=requests_admin'\n            } ]\n        }]);\n        this.setElement( this._template() );\n    },\n\n    render : function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each( function( category ) {\n            var $section = $( self._templateSection( category.attributes ) );\n            var $entries = $section.find( '.ui-side-section-body' );\n            _.each( category.get( 'items' ), function( item ) {\n                if ( item.enabled === undefined || item.enabled ) {\n                    var $link = $( '<a/>' ).attr( { href : self.root + item.url } ).text( _l( item.title ) );\n                    if ( item.target == '__use_router__' ) {\n                        $link.on( 'click', function( e ) { e.preventDefault(); self.page.router.push( item.url ); } );\n                    } else {\n                        $link.attr( 'target', 'galaxy_main' );\n                    }\n                    $entries.append( $( '<div/>' ).addClass( 'ui-side-section-body-title' ).append( $link ) );\n                }\n            });\n            self.$el.append( $section );\n        });\n        this.page.$( '#galaxy_main' ).prop( 'src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status );\n    },\n\n    _templateSection : function( options ) {\n        return [\n            '<div>',\n                '<div class=\"ui-side-section-title\">' + _l( options.title ) + '</div>',\n                '<div class=\"ui-side-section-body\"/>',\n            '</div>'\n        ].join('');\n    },\n\n    _template : function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString : function() { return 'adminPanel' }\n});\n\nmodule.exports = AdminPanel;\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar View = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.data  = [];\n        this.data2 = [];\n        this.model = options && options.model || new Backbone.Model({\n            id          : Utils.uid(),\n            cls         : 'ui-select',\n            error_text  : 'No options available',\n            empty_text  : 'Nothing selected',\n            visible     : true,\n            wait        : false,\n            multiple    : false,\n            searchable  : true,\n            optional    : false,\n            disabled    : false,\n            onchange    : function(){},\n            value       : null,\n            individual  : false,\n            pagesize    : 20\n        }).set( options );\n        this.on( 'change', function() { self.model.get( 'onchange' ) && self.model.get( 'onchange' )( self.value() ) } );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:disabled', this._changeDisabled, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:multiple change:searchable change:cls change:id', this.render, this );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get( 'searchable' ) ? this._renderSearchable() : this._renderClassic();\n        this.$el.addClass( this.model.get( 'cls' ) )\n                .attr( 'id', this.model.get( 'id' ) );\n        this.$select.empty().addClass( 'select' )\n                    .attr( 'id', this.model.get( 'id' ) + '_select' )\n                    .prop( 'multiple', this.model.get( 'multiple' ) )\n                    .on( 'change', function() {\n                        self.value( self._getValue() );\n                        self.trigger( 'change' );\n                    });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el.addClass( this.model.get( 'multiple' ) ? 'ui-select-multiple' : 'ui-select' )\n                .append( this.$select      = $( '<select/>' ) )\n                .append( this.$dropdown    = $( '<div/>' ) )\n                .append( this.$resize      = $( '<div/>' )\n                .append( this.$resize_icon = $( '<i/>' ) ) );\n        if ( this.model.get( 'multiple' ) ) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass( 'fa fa-angle-double-right fa-rotate-45' ).show();\n            this.$resize.removeClass()\n                        .addClass( 'icon-resize' )\n                        .show()\n                        .off( 'mousedown' ).on( 'mousedown', function( event ) {\n                            var currentY = event.pageY;\n                            var currentHeight = self.$select.height();\n                            self.minHeight = self.minHeight || currentHeight;\n                            $( '#dd-helper' ).show().on( 'mousemove', function( event ) {\n                                self.$select.height( Math.max( currentHeight + ( event.pageY - currentY ), self.minHeight ) );\n                            }).on( 'mouseup mouseleave', function() {\n                                $( '#dd-helper' ).hide().off();\n                            });\n                        });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el.append( this.$select   = $( '<div/>' ) )\n                .append( this.$dropdown = $( '<div/>' ) );\n        this.$dropdown.hide();\n        if ( !this.model.get( 'multiple' ) ) {\n            this.$dropdown.show().on( 'click', function() {\n                self.$select.select2 && self.$select.select2( 'open' );\n            });\n        }\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) && !this.model.get( 'individual' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 && _.each( self.model.get( 'data' ), function( option ) {\n                        new_value.push( option.value );\n                    });\n                    self.value( new_value );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$el.prepend( this.all_button.$el );\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function( term, text ) {\n        return !term || term == '' || String( text ).toUpperCase().indexOf( term.toUpperCase() ) >= 0\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if ( !this.model.get( 'multiple' ) && this.model.get( 'optional' ) ) {\n            this.data.push( { value: '__null__', label: self.model.get( 'empty_text' ) } );\n        }\n        _.each( this.model.get( 'data' ), function( option ) {\n            self.data.push( option );\n        });\n        if ( this.length() == 0 ) {\n            this.data.push( { value: '__null__', label: this.model.get( 'error_text' ) } );\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            this.data2 = [];\n            _.each( this.data, function( option, index ) {\n                self.data2.push( { order: index, id: option.value, text: option.label, tags: option.tags } );\n            });\n            this.$select.data( 'select2' ) && this.$select.select2( 'destroy' );\n            this.matched_tags = {};\n            this.$select.select2({\n                data            : self.data2,\n                closeOnSelect   : !this.model.get( 'multiple' ),\n                multiple        : this.model.get( 'multiple' ),\n                query           : function( q ) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get( 'pagesize' );\n                    var results = _.filter( self.data2, function ( e ) {\n                        var found = false;\n                        _.each( e.tags, function( tag ) {\n                            if ( self._match( q.term, tag ) ) {\n                                found = self.matched_tags[ tag ] = true;\n                            }\n                        });\n                        return found || self._match( q.term, e.text );\n                    });\n                    q.callback({\n                        results: results.slice( ( q.page - 1 ) * pagesize, q.page * pagesize ),\n                        more   : results.length >= q.page * pagesize\n                    });\n                },\n                formatResult    : function( result ) {\n                    return _.escape( result.text ) +\n                        '<div class=\"ui-tags\">' +\n                            _.reduce( result.tags, function( memo, tag ) {\n                                if ( self.matched_tags[ tag ] ) {\n                                    return memo + '&nbsp;' +\n                                        '<div class=\"label label-info\">' +\n                                            _.escape( tag ) +\n                                        '</div>'\n                                }\n                                return memo;\n                            }, '' ) +\n                        '</div>';\n                }\n            });\n            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n        } else {\n            this.$select.find( 'option' ).remove();\n            _.each( this.data, function( option ) {\n                self.$select.append( $( '<option/>' ).attr( 'value', option.value ).html( _.escape( option.label ) ) );\n            });\n        }\n        this.model.set( 'disabled', this.length() == 0 );\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if ( this.model.get( 'searchable' ) ) {\n            this.$select.select2( this.model.get( 'disabled' ) ? 'disable' : 'enable' );\n        } else {\n            this.$select.prop( 'disabled', this.model.get( 'disabled' ) );\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown.removeClass()\n                      .addClass( 'icon-dropdown fa' )\n                      .addClass( this.model.get( 'wait' ) ? 'fa-spinner fa-spin' : 'fa-caret-down' );\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n        this.$select[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this.model.get( 'multiple' ) ) {\n            if ( this.all_button ) {\n                var value = this._getValue();\n                this.all_button.value( $.isArray( value ) ? value.length : 0, this.length() );\n            }\n        } else if ( this._getValue() === null && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[ 0 ].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function( value ) {\n        return _.findWhere( this.data, { value: value } );\n    },\n\n    /** Return the label/text of the current selection */\n    text: function () {\n        var v = this._getValue();\n        var d = this.exists( $.isArray( v ) ? v[ 0 ] : v );\n        return d ? d.label : '';\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set( 'visible', true );\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set( 'visible', false );\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get( 'disabled' );\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set( 'disabled', false );\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set( 'disabled', true );\n    },\n\n    /** Update all available options at once */\n    add: function( options, sorter ) {\n        _.each( this.model.get( 'data' ), function( v ) {\n            v.keep && !_.findWhere( options, { value: v.value } ) && options.push( v );\n        });\n        sorter && options && options.sort( sorter );\n        this.model.set( 'data', options );\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function( callback ) {\n        this.model.set( 'onchange', callback );\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray( this.model.get( 'data' ) ) ? this.model.get( 'data' ).length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if( new_value === null || new_value === undefined ) {\n            new_value = '__null__';\n        }\n        if ( this.model.get( 'multiple' ) ) {\n            new_value = $.isArray( new_value ) ? new_value : [ new_value ];\n        } else if ( $.isArray( new_value ) ) {\n            if ( new_value.length > 0 ) {\n                new_value = new_value[ 0 ];\n            } else {\n                new_value = '__null__';\n            }\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            if ( $.isArray( new_value ) ) {\n                var val = [];\n                _.each( new_value, function( v ) {\n                    var d = _.findWhere( self.data2, { id: v } );\n                    d && val.push( d );\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere( this.data2, { id: new_value } );\n                new_value = d;\n            }\n            this.$select.select2( 'data', new_value );\n        } else {\n            this.$select.val( new_value );\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if ( this.model.get( 'searchable' ) ) {\n            var selected = this.$select.select2( 'data' );\n            if ( selected ) {\n                if ( $.isArray( selected ) ) {\n                    val = [];\n                    selected.sort( function( a, b ) { return a.order - b.order } );\n                    _.each( selected, function( v ) { val.push( v.id ) } );\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty( val ) ? null : val;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","/** Base class for options based ui elements **/\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar Base = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false,\n            optional    : false,\n            onchange    : function(){}\n        }).set( options );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.on( 'change', function() { self.model.get( 'onchange' )( self.value() ) } );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty()\n                .removeClass()\n                .addClass( 'ui-options' )\n                .append( this.$message   = $( '<div/>' ) )\n                .append( this.$menu      = $( '<div/>' ).addClass( 'ui-options-menu' ) )\n                .append( this.$options   = $( this._template() ) );\n\n        // add select/unselect all button\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$( 'input' ).prop( 'checked', self.all_button.value() !== 0 );\n                    self.value( self._getValue() );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$menu.append( this.all_button.$el );\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if ( this._templateOptions ) {\n            this.$options.append( this._templateOptions( this.model.get( 'data' ) ) );\n        } else {\n            _.each( this.model.get( 'data' ), function( option ) {\n                self.$options.append( $( self._templateOption( option ) )\n                                        .addClass( 'ui-option' )\n                                        .tooltip( { title: option.tooltip, placement: 'bottom' } ) );\n            });\n        }\n        var self = this;\n        this.$( 'input' ).on( 'change', function() {\n            self.value( self._getValue() );\n            self.trigger( 'change' );\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    _changeWait: function() {\n        if ( this.model.get( 'wait' ) ) {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'wait_text' ), 'info' );\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'error_text' ), 'danger' );\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css( 'display', 'inline-block' );\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this._getValue() === null && !this.model.get( 'multiple' ) && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n        this.all_button && this.all_button.value( $.isArray( this._getValue() ) ? this._getValue().length : 0, this.length() );\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$( 'input' ).first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$( '.ui-option' ).length;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            if ( new_value !== null ) {\n                var values = $.isArray( new_value ) ? new_value : [ new_value ];\n                _.each( values, function( v ) {\n                    self.$( 'input[value=\"' + v + '\"]' ).first().prop( 'checked', true );\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$( ':checked' ).each( function() {\n            selected.push( $( this ).val() );\n        });\n        if ( Utils.isEmpty( selected ) ) {\n            return null;\n        }\n        return this.model.get( 'multiple' ) ? selected : selected[ 0 ];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function( text, status ) {\n        this.$message.show()\n                     .removeClass()\n                     .addClass( 'ui-message alert alert-' + status )\n                     .html( text );\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list' );\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function( pair ) {\n        var id = Utils.uid();\n        return  $( '<div/>' ).addClass( 'ui-option' )\n                    .append( $( '<input/>' ).attr( {\n                        id      : id,\n                        type    : this.model.get( 'type' ),\n                        name    : this.model.id,\n                        value   : pair.value } ) )\n                    .append( $( '<label/>' ).addClass( 'ui-options-label' )\n                                            .attr( 'for', id )\n                                            .html( pair.label ) );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'checkbox';\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function( options ) {\n        Base.prototype.initialize.call( this, options );\n    },\n\n    /** Set current value */\n    _setValue: function ( new_value ) {\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            this.$( 'label' ).removeClass( 'active' );\n            this.$( '[value=\"' + new_value + '\"]' ).prop( 'checked', true ).closest( 'label' ).addClass( 'active' );\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function( pair ) {\n        var $el =  $( '<label/>' ).addClass( 'btn btn-default' );\n        pair.icon && $el.append( $( '<i/>' ).addClass( 'fa' ).addClass( pair.icon ).addClass( !pair.label && 'no-padding' ) );\n        $el.append( $( '<input/>' ).attr( { type: 'radio', name: this.model.id, value: pair.value } ) );\n        pair.label && $el.append( pair.label );\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'btn-group ui-radiobutton' ).attr( 'data-toggle', 'buttons' );\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc'], function(Utils, Portlet, Ui) {\n\n// ui list element\nvar View = Backbone.View.extend({\n    // create portlet to keep track of selected list elements\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // initialize options\n        this.options = options;\n        this.name = options.name || 'element';\n        this.multiple = options.multiple || false;\n\n        // create message handler\n        this.message = new Ui.Message();\n\n        // create portlet\n        this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\n        // create select field containing the options which can be inserted into the list\n        this.select = new Ui.Select.View({ optional : options.optional });\n\n        // create insert new list element button\n        this.button = new Ui.ButtonIcon({\n            icon        : 'fa fa-sign-in',\n            tooltip     : 'Insert new ' + this.name,\n            onclick     : function() {\n                self.add({\n                    id      : self.select.value(),\n                    name    : self.select.text()\n                });\n            }\n        });\n\n        // build main element\n        this.setElement(this._template(options));\n        this.$('.ui-list-message').append(this.message.$el);\n        this.$('.ui-list-portlet').append(this.portlet.$el);\n        this.$('.ui-list-button').append(this.button.$el);\n        this.$('.ui-list-select').append(this.select.$el);\n    },\n\n    /** Return/Set currently selected list elements */\n    value: function(val) {\n        // set new value\n        if (val !== undefined) {\n            this.portlet.empty();\n            if ($.isArray(val)) {\n                for (var i in val) {\n                    var v = val[i];\n                    var v_id = null;\n                    var v_name = null;\n                    if ($.type(v) != 'string') {\n                        v_id = v.id;\n                        v_name = v.name;\n                    } else {\n                        v_id = v_name = v;\n                    }\n                    if (v_id != null) {\n                        this.add({\n                            id      : v_id,\n                            name    : v_name\n                        });\n                    }\n                }\n            }\n            this._refresh();\n        }\n        // get current value\n        var lst = [];\n        this.$('.ui-list-id').each(function() {\n            lst.push({\n                id      : $(this).prop('id'),\n                name    : $(this).find('.ui-list-name').html()\n            });\n        });\n        if (lst.length == 0) {\n            return null;\n        }\n        return lst;\n    },\n\n    /** Add row */\n    add: function(options) {\n        var self = this;\n        if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n            if (!Utils.isEmpty(options.id)) {\n                var $el = $(this._templateRow({\n                    id      : options.id,\n                    name    : options.name\n                }));\n                $el.on('click', function() {\n                    $el.remove();\n                    self._refresh();\n                });\n                $el.on('mouseover', function() {\n                    $el.addClass('portlet-highlight');\n                });\n                $el.on('mouseout', function() {\n                    $el.removeClass('portlet-highlight');\n                });\n                this.portlet.append($el);\n                this._refresh();\n            } else {\n                this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n            }\n        } else {\n            this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n        }\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.select.update(options);\n    },\n\n    /** Refresh view */\n    _refresh: function() {\n        if (this.$('.ui-list-id').length > 0) {\n            !this.multiple && this.button.disable();\n            this.$('.ui-list-portlet').show();\n        } else {\n            this.button.enable();\n            this.$('.ui-list-portlet').hide();\n        }\n        this.options.onchange && this.options.onchange();\n    },\n\n    /** Main Template */\n    _template: function(options) {\n        return  '<div class=\"ui-list\">' +\n                    '<div class=\"ui-margin-top\">' +\n                        '<span class=\"ui-list-button\"/>' +\n                        '<span class=\"ui-list-select\"/>' +\n                    '</div>' +\n                    '<div class=\"ui-list-message\"/>' +\n                    '<div class=\"ui-list-portlet\"/>' +\n                '</div>';\n    },\n\n    /** Row Template */\n    _templateRow: function(options) {\n        return  '<div id=\"' + options.id + '\" class=\"ui-list-id\">' +\n                    '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                    '<span class=\"ui-list-name\">' + options.name + '</span>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-list.js","define([\n    //jquery\n    //backbone\n], function(){\n// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n//TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function( $button, options ){\n        // default settings\n        this.$button = $button;\n        if( !this.$button.length ){\n            this.$button = $( '<div/>' );\n        }\n        this.options = options || [];\n        this.$button.data( 'popupmenu', this );\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click( function( event ){\n            // if there's already a menu open, remove it\n            $( '.popmenu-wrapper' ).remove();\n            menu._renderAndShow( event );\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function( clickEvent ){\n        this.render();\n        this.$el.appendTo( 'body' ).css( this._getShownPosition( clickEvent )).show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function(){\n        // render the menu body absolute and hidden, fill with template\n        this.$el.addClass( 'popmenu-wrapper' ).hide()\n            .css({ position : 'absolute' })\n            .html( this.template( this.$button.attr( 'id' ), this.options ));\n\n        // set up behavior on each link/anchor elem\n        if( this.options.length ){\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find( 'li' ).each( function( i, li ){\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if( option.func ){\n                    $( this ).children( 'a.popupmenu-option' ).click( function( event ){\n                        option.func.call( menu, event, option );\n                        // We must preventDefault otherwise clicking \"cancel\"\n                        // on a purge or something still navigates and causes\n                        // the action.\n                        event.preventDefault();\n                        // bubble up so that an option click will call the close behavior\n                    });\n                }\n            });\n        }\n        return this;\n    },\n\n    template : function( id, options ){\n        return [\n            '<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions( options ), '</ul>'\n        ].join( '' );\n    },\n\n    _templateOptions : function( options ){\n        if( !options.length ){\n            return '<li>(no options)</li>';\n        }\n        return _.map( options, function( option ){\n            if( option.divider ){\n                return '<li class=\"divider\"></li>';\n            } else if( option.header ){\n                return [ '<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>' ].join( '' );\n            }\n            var href   = option.href || 'javascript:void(0);',\n                target = ( option.target  )?( ' target=\"' + option.target + '\"' ):( '' ),\n                check  = ( option.checked )?( '<span class=\"fa fa-check\"></span>' ):( '' );\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>',\n                    check, option.html,\n                '</a></li>'\n            ].join( '' );\n        }).join( '' );\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition : function( clickEvent ){\n\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2 ;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min( x, $( document ).scrollLeft() + $( window ).width() - menuWidth - 5 );\n        x = Math.max( x, $( document ).scrollLeft() + 5 );\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function(){\n        var menu = this;\n//TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup( event ){\n            $( document ).off( 'click.close_popup' );\n            if( window && window.parent !== window ){\n                try {\n                    $( window.parent.document ).off( \"click.close_popup\" );\n                } catch( err ){}\n            } else {\n                try {\n                    $( 'iframe#galaxy_main' ).contents().off( \"click.close_popup\" );\n                } catch( err ){}\n            }\n            menu.remove();\n        }\n\n        $( 'html' ).one( \"click.close_popup\", closePopup );\n        if( window && window.parent !== window ){\n            try {\n                $( window.parent.document ).find( 'html' ).one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        } else {\n            try {\n                $( 'iframe#galaxy_main' ).contents().one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function( item, index ){\n        // append to end if no index\n        index = ( index >= 0 ) ? index : this.options.length;\n        this.options.splice( index, 0, item );\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function( index ){\n        if( index >=0 ){\n            this.options.splice( index, 1 );\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function( html ){\n        for( var i = 0; i < this.options.length; i++ ){\n            if( _.has( this.options[i], 'html' ) && ( this.options[i].html === html )){\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function( html ){\n        return this.options[( this.findIndexByHtml( html ))];\n    },\n\n    // string representation\n    toString: function(){\n        return 'PopupMenu';\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create( $button, options ){\n    return new PopupMenu( $button, options );\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = function( button_element, initial_options ){\n    var convertedOptions = [];\n    _.each( initial_options, function( optionVal, optionKey ){\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if( optionVal === null ){ // !optionVal? (null only?)\n            newOption.header = true;\n\n        // keys with function values indicate: a menu option\n        } else if( jQuery.type( optionVal ) === 'function' ){\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push( newOption );\n    });\n    return new PopupMenu( $( button_element ), convertedOptions );\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = function( $parent, selector ){\n    $parent = $( $parent );\n    selector = selector || 'a';\n    var options = [];\n    $parent.find( selector ).each( function( elem, i ){\n        var option = {}, $link = $( elem );\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if( $link.attr( 'href' ) ){\n            var linkHref    = $link.attr( 'href' ),\n                linkTarget  = $link.attr( 'target' ),\n                confirmText = $link.attr( 'confirm' );\n\n            option.func = function(){\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if( ( confirmText ) && ( !confirm( confirmText ) ) ){ return; }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch( linkTarget ){\n                    // relocate the center panel\n                    case '_parent':\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case '_top':\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push( option );\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = function( $buttonElement, $menuElement, menuElementLinkSelector ){\n    $buttonElement = $( $buttonElement );\n    $menuElement = $( $menuElement );\n    var options = PopupMenu.convertLinksToOptions( $menuElement, menuElementLinkSelector );\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu( $buttonElement, options );\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = function( parent, menuSelector, buttonSelectorBuildFn ){\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || 'div[popupmenu]';\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || function( $menuElement, parent ){\n        return '#' + $menuElement.attr( 'popupmenu' );\n    };\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $( parent ).find( menuSelector ).each( function(){\n        var $menuElement    = $( this ),\n            $buttonElement  = $( parent ).find( buttonSelectorBuildFn( $menuElement, parent ) );\n        popupMenusCreated.push( PopupMenu.fromDom( $buttonElement, $menuElement ) );\n        $buttonElement.addClass( 'popup' );\n    });\n    return popupMenusCreated;\n};\n\n\n// =============================================================================\n    return PopupMenu;\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/** This class creates a ui table element. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function(options) {\n            this.options = Utils.merge(options, {\n                content     : 'No content available.',\n                onchange    : null,\n                ondblclick  : null,\n                onconfirm   : null,\n                cls         : 'ui-table',\n                selectable  : true,\n                cls_tr      : ''\n            });\n            this.setElement( this._template() );\n            this.$thead     = this.$('thead');\n            this.$tbody     = this.$('tbody');\n            this.$tmessage  = this.$('tmessage');\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events : {\n            'click'     : '_onclick',\n            'dblclick'  : '_ondblclick'\n        },\n\n        /** Add cell to header row */\n        addHeader: function( $el ) {\n            this.row.append( $( '<th/>' ).append( $el ) );\n        },\n\n        /** Append header row to table */\n        appendHeader: function() {\n            this.$thead.append( this.row );\n            this.row = $( '<tr/>' );\n        },\n\n        /** Add cell to row */\n        add: function($el, width, align) {\n            var wrapper = $( '<td/>' );\n            if ( width ) {\n                wrapper.css( 'width', width );\n            }\n            if ( align ) {\n                wrapper.css( 'text-align', align );\n            }\n            this.row.append( wrapper.append( $el ) );\n        },\n        \n        /** Append row to table */\n        append: function( id, fade ) {\n            this._commit( id, fade, false );\n        },\n        \n        /** Prepend row to table */\n        prepend: function( id, fade ) {\n            this._commit( id, fade, true );\n        },\n        \n        /** Helper to get row element */\n        get: function( id ) {\n            return this.$( '#' + id );\n        },\n\n        /** Delete row by id */\n        del: function( id ) {\n            var item = this.$tbody.find( '#' + id );\n            if ( item.length > 0 ) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function( new_value ) {\n            if ( this.options.selectable ) {\n                this.before = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( new_value !== undefined ) {\n                    this.$tbody.find( 'tr' ).removeClass( 'current' );\n                    if ( new_value ) {\n                        this.$tbody.find( '#' + new_value ).addClass( 'current' );\n                    }\n                }\n                var after = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( after === undefined ) {\n                    return null;\n                } else {\n                    if ( after != this.before && this.options.onchange ) {\n                        this.options.onchange( new_value );\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function() {\n            return this.$tbody.find( 'tr' ).length;\n        },\n\n        /** Helper to append rows */\n        _commit: function( id, fade, prepend ) {\n            this.del( id );\n            this.row.attr( 'id', id );\n            if ( prepend ) {\n                this.$tbody.prepend( this.row );\n            } else {\n                this.$tbody.append( this.row );\n            }\n            if ( fade ) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function() {\n            return $( '<tr class=\"' + this.options.cls_tr + '\"></tr>' );\n        },\n\n        /** Handles onclick events */\n        _onclick: function(e) {\n            var old_value = this.value();\n            var new_value = $( e.target ).closest( 'tr' ).attr( 'id' );\n            if ( new_value != '' ){\n                if ( new_value && old_value != new_value ) {\n                    if ( this.options.onconfirm ) {\n                        this.options.onconfirm( new_value );\n                    } else {\n                        this.value( new_value );\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function( e ) {\n            var value = this.value();\n            if ( value && this.options.ondblclick ) {\n                this.options.ondblclick( value );\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function() {\n            if ( this.row_count == 0 ) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function() {\n            return  '<div>' +\n                        '<table class=\"' + this.options.cls + '\">' +\n                            '<thead/>' +\n                            '<tbody/>' +\n                        '</table>' +\n                        '<tmessage>' + this.options.content + '</tmessage>' +\n                    '<div>';\n        }\n    });\n\n    return {\n        View: View\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-table.js","/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([ 'utils/utils' ], function( Utils ) {\n    var Manager = Backbone.Model.extend({\n        initialize: function( app ) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = '';\n            var self = this;\n            this.app.section.$el.find( '.section-row' ).each( function() {\n                var id = $(this).attr( 'id' );\n                var field = self.app.field_list[ id ];\n                if ( field ) {\n                    sum += id + ':' + JSON.stringify( field.value && field.value() ) + ':' + field.collapsed + ';';\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate( this.app.section.$el, dict );\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add( flat_id, input_id, input_value ) {\n                self.flat_dict[ flat_id ] = input_id;\n                result_dict[ flat_id ] = input_value;\n                self.app.element_list[ input_id ] && self.app.element_list[ input_id ].$el.attr( 'tour_id', flat_id );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert( identifier, head ) {\n                for ( var index in head ) {\n                    var node = head[ index ];\n                    if ( node.input ) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if ( identifier != '' ) {\n                            flat_id += '|';\n                        }\n                        flat_id += input.name;\n                        switch ( input.type ) {\n                            case 'repeat':\n                                var section_label = 'section-';\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for ( var block_label in node ) {\n                                    var pos = block_label.indexOf( section_label );\n                                    if ( pos != -1 ) {\n                                        pos += section_label.length;\n                                        block_indices.push( parseInt( block_label.substr( pos ) ));\n                                        if ( !block_prefix ) {\n                                            block_prefix = block_label.substr( 0, pos );\n                                        }\n                                    }\n                                }\n                                block_indices.sort( function( a, b ) { return a - b; });\n                                var index = 0;\n                                for ( var i in block_indices ) {\n                                    convert( flat_id + '_' + index++, node[ block_prefix + block_indices[ i ] ]);\n                                }\n                                break;\n                            case 'conditional':\n                                var value = self.app.field_list[ input.id ].value();\n                                add( flat_id + '|' + input.test_param.name, input.id, value );\n                                var selectedCase = matchCase( input, value );\n                                if ( selectedCase != -1 ) {\n                                    convert( flat_id, head[ input.id + '-section-' + selectedCase ] );\n                                }\n                                break;\n                            case 'section':\n                                convert( !input.flat && flat_id || '', node );\n                                break;\n                            default:\n                                var field = self.app.field_list[ input.id ];\n                                if ( field && field.value ) {\n                                    var value = field.value();\n                                    if ( input.ignore === undefined || input.ignore != value ) {\n                                        if ( field.collapsed && input.collapsible_value ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add( flat_id, input.id, value );\n                                        if ( input.payload ) {\n                                            for ( var p_id in input.payload ) {\n                                                add( p_id, input.id, input.payload[ p_id ] );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert( '', dict );\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function ( flat_id ) {\n            return this.flat_dict && this.flat_dict[ flat_id ];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function( input, value ) {\n            return matchCase( input, value );\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function( model, callback ) {\n            var self = this;\n            visitInputs( model.inputs, function( input, name ) {\n                self.flat_dict[ name ] && callback ( input, self.flat_dict[ name ] );\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function( response ) {\n            var result = {};\n            var self = this;\n            function search ( id, head ) {\n                if ( typeof head === 'string' ) {\n                    var input_id = self.flat_dict[ id ];\n                    input_id && ( result[ input_id ] = head );\n                } else {\n                    for ( var i in head ) {\n                        var new_id = i;\n                        if ( id !== '' ) {\n                            var separator = '|';\n                            if ( head instanceof Array ) {\n                                separator = '_';\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search ( new_id, head[ i ] );\n                    }\n                }\n            }\n            search( '', response );\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function( parent, dict ) {\n            var self = this;\n            var children = $( parent ).children();\n            children.each( function() {\n                var child = this;\n                var id = $( child ).attr( 'id' );\n                if ( $( child ).hasClass( 'section-row' ) ) {\n                    var input = self.app.input_list[ id ];\n                    dict[ id ] = ( input && { input : input } ) || {};\n                    self._iterate( child, dict[ id ] );\n                } else {\n                    self._iterate( child, dict );\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function( input, value ) {\n        if ( input.test_param.type == 'boolean' ) {\n            if ( value == 'true' ) {\n                value = input.test_param.truevalue || 'true';\n            } else {\n                value = input.test_param.falsevalue || 'false';\n            }\n        }\n        for ( var i in input.cases ) {\n            if ( input.cases[ i ].value == value ) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function( inputs, callback, prefix, context ) {\n        context = $.extend( true, {}, context );\n        _.each( inputs, function ( input ) {\n            if ( input && input.type && input.name ) {\n                context[ input.name ] = input;\n            }\n        });\n        for ( var key in inputs ) {\n            var node = inputs[ key ];\n            node.name = node.name || key;\n            var name = prefix ? prefix + '|' + node.name : node.name;\n            switch ( node.type ) {\n                case 'repeat':\n                    _.each( node.cache, function( cache, j ) {\n                        visitInputs( cache, callback, name + '_' + j, context );\n                    });\n                    break;\n                case 'conditional':\n                    if ( node.test_param ) {\n                        callback( node.test_param, name + '|' + node.test_param.name, context );\n                        var selectedCase = matchCase( node, node.test_param.value );\n                        if ( selectedCase != -1 ) {\n                            visitInputs( node.cases[ selectedCase ].inputs, callback, name, context );\n                        } else {\n                            Galaxy.emit.debug( 'form-data::visitInputs() - Invalid case for ' + name + '.' );\n                        }\n                    } else {\n                        Galaxy.emit.debug( 'form-data::visitInputs() - Conditional test parameter missing for ' + name  + '.' );\n                    }\n                    break;\n                case 'section':\n                    visitInputs( node.inputs, callback, name, context )\n                    break;\n                default:\n                    callback( node, name, context );\n            }\n        }\n    };\n\n    return {\n        Manager         : Manager,\n        visitInputs     : visitInputs\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-data.js","// dependencies\ndefine([], function() {\n\n// grid model\nreturn Backbone.Model.extend({\n    defaults: {\n        url_base: '',\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.            \n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key],\n                new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } else if (typeof(cur_val) == 'string') {\n                if (cur_val == 'All' || cur_val == value) {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;\n                }\n            } else {\n                // Current value is an array.\n                new_val = cur_val;\n                if ( new_val.indexOf( value ) === -1 ) {\n                    new_val.push(value);\n                }\n            }\n            this.attributes.filters[key] = new_val;\n        } \n        else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;            \n        }\n\n        if (typeof(cur_val) === 'string') {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = '';\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = '';\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), function(k) {\n            url_data['f-' + k[0]] = k[1];\n        });\n        return url_data;\n    },\n    \n    // Return URL for obtaining a new grid\n    get_url: function (args) {\n        return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n    }\n    \n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n// grid view templates\nreturn {\n    // template\n    grid: function(options) {\n        var tmpl = '';\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = '<div class=\"loading-elt-overlay\"></div>' +\n                    '<table>' +\n                        '<tr>' +\n                            '<td width=\"75%\">' +\n                                this.grid_header(options) +\n                            '</td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                        '<tr>' +\n                            '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                    '</table>' +\n                    this.grid_table(options);\n        }\n       \n        // add info text\n        if (options.info_text) {\n            tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n        }\n       \n        // return\n        return tmpl;\n    },\n    \n    // template\n    grid_table: function(options) {\n        return  '<form method=\"post\" onsubmit=\"return false;\">' +\n                    '<table id=\"grid-table\" class=\"grid\">' +\n                        '<thead id=\"grid-table-header\"></thead>' +\n                        '<tbody id=\"grid-table-body\"></tbody>' +\n                        '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                    '</table>' +\n                '</form>';\n    },\n    \n    // template\n    grid_header: function(options) {\n        var tmpl =  '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl +=     '<h2>' + options.title + '</h2>';\n        }\n        if (options.global_actions) {\n            tmpl +=     '<ul class=\"manage-table-actions\">';\n            var show_popup = (options.global_actions.length >= 3);\n            if (show_popup) {\n                tmpl +=     '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                            '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (var i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl +=         '<li>' +\n                                    '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' +\n                                '</li>';\n            }\n            if (show_popup) {\n                tmpl +=     '</div>';\n            }\n            tmpl +=     '</ul>';\n        }\n        if (options.insert) {\n            tmpl +=     options.insert;\n        }\n       \n        // add grid filters\n        tmpl +=     this.grid_filters(options);\n        tmpl += '</div>'\n        \n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl +=         '<th>';\n            if (options.items.length > 0) {\n                tmpl +=         '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                                '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl +=         '</th>';\n        }\n        \n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl +=     '<th id=\"' + column.key + '-header\">';\n                if (column.href) {\n                    tmpl +=     '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n                } else {\n                    tmpl +=     column.label;\n                }\n                tmpl +=         '<span class=\"sort-arrow\">' + column.extra + '</span>' +\n                            '</th>';\n            }\n        }\n        \n        // finalize\n        tmpl +=        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = '';\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n        \n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n        \n        // create rows\n        for (var i in options.items) {\n        \n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = 'grid-' + i + '-popup';\n            \n            // Tag current\n            tmpl += '<tr ';\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += '>';\n            \n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += '<td style=\"width: 1.5em;\">' +\n                            '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' +\n                        '</td>';\n            }\n            \n            // Data columns\n            for (var j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = '';\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n                    \n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n                    \n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n                        \n                    // unescape value\n                    if (jQuery.type( value ) === 'string') {\n                        value = value.replace(/\\/\\//g, '/');\n                    }\n                    \n                    // Attach popup menu?\n                    var id = '';\n                    var cls = '';\n                    if (column.attach_popup) {\n                        id = 'grid-' + i + '-popup';\n                        cls = 'menubutton';\n                        if (link != '') {\n                            cls += ' split';\n                        }\n                        cls += ' popup';\n                    }\n                    \n                    // Check for row wrapping\n                    tmpl += '<td ' + nowrap + '>';\n                \n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                        }\n                        tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n                        if (options.operations.length != 0) {\n                            tmpl += '</div>';\n                        }\n                    } else {\n                        tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n                    }\n                    tmpl += '</td>';\n                }\n            }\n            tmpl += '</tr>';\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n    \n        // create template string\n        var tmpl = '';\n        \n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links      = options.num_page_links;\n            var cur_page_num        = options.cur_page_num;\n            var num_pages           = options.num_pages;\n            \n            // First pass on min page.\n            var page_link_range     = num_page_links / 2;\n            var min_page            = cur_page_num - page_link_range\n            var min_offset          = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - ( cur_page_num - min_page );\n            }\n            \n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - ( max_page + 1 - cur_page_num );\n            }\n            \n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset\n                if (min_page < 1) {\n                    min_page = 1\n                }\n            }\n            \n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += '<td></td>';\n            }\n            tmpl +=     '<td colspan=\"100\">' +\n                            '<span id=\"page-link-container\">' +\n                                'Page:';\n            \n            if (min_page > 1) {\n                tmpl +=         '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n            \n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                \n                if (page_index == options.cur_page_num) {\n                    tmpl +=     '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n                } else {\n                    tmpl +=     '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n                }\n            }\n            \n            // show last page\n            if (max_page < num_pages) {\n                    tmpl +=     '...' +\n                                '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n            }\n            tmpl +=         '</span>';\n            \n            // Show all link\n            tmpl +=         '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                        '</td>' +\n                    '</tr>';\n        }\n        \n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += '<tr>' +\n                        '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                        '<td></td>' +\n                        '<td colspan=\"100\">' +\n                            'For <span class=\"grid-selected-count\"></span> selected items: ';\n            \n            // configure buttons for operations\n            for (var i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                }\n            }\n            \n            // finalize template\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n    \n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n    \n        // add global operations\n        if (found_global) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n                }\n            }\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n        \n        // add legend\n        if (options.legend) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">' + options.legend + '</td>' +\n                    '</tr>';\n        }\n        \n        // return\n        return tmpl;\n    },\n        \n    // template\n    message: function(options) {\n        var status = options.status == 'success' ? 'done' : options.status;\n        return  '<p>' +\n                    '<div class=\"' + status + 'message transient-message\">' + _.escape( options.message ) + '</div>' +\n                    '<div style=\"clear: both\"></div>' +\n                '</p>';\n    },\n    \n    // template\n    grid_filters: function (options) {\n    \n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = 'none';\n        if (options.advanced_search) {\n            advanced_search_display = 'block';\n        }\n        \n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = 'block';\n                }\n                show_advanced_search_link = true;\n            }\n        }\n        \n        // hide standard search if advanced is shown\n        var standard_search_display = 'block';\n        if (advanced_search_display == 'block') {\n            standard_search_display = 'none';\n        }\n\n        //\n        // standard search\n        //\n        var tmpl =  '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"padding: 0;\">' +\n                                    '<table>';\n        \n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'standard') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize standard search\n        tmpl +=                     '</table>' +\n                                '</td>' +\n                            '</tr>' +\n                            '<tr>' +\n                                '<td>';\n                \n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl +=                 '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n        \n        // finalize standard search display\n        tmpl +=                 '</td>' +\n                            '</tr>' +\n                        '</table>' +\n                    '</div>';\n    \n        //\n        // advanced search\n        //\n        tmpl +=     '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"text-align: left\" colspan=\"100\">' +\n                                    '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                                '</td>' +\n                            '</tr>';\n        \n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize advanced search template\n        tmpl +=         '</table>' +\n                    '</div>';\n\n        // return template\n        return tmpl;\n    },\n    \n    // template\n    grid_column_filter: function(options, column) {\n        \n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == 'advanced') {\n            column_label = column_label.toLowerCase();\n        }\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        if (column.filterable == 'advanced') {\n            tmpl +=         '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n        }\n        tmpl +=             '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl +=             '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != 'All') {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify( filter_value )\n                        }\n                        tmpl +=     '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl +=                 '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n                \n                // single filter value\n                if (type == 'string') {\n                    if (column_filter != 'All') {\n                        // append template\n                        tmpl +=         this.filter_element(column_key, column_filter);\n                    }\n                }\n                \n                // multiple filter values\n                if (type == 'array') {\n                    for (var i in column_filter ) {\n                        // get filter\n                        var filter = column_filter[i];\n                        \n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl +=         this.filter_element(column_key, filter);\n                    }\n                }\n            }\n            \n            // close span\n            tmpl +=                 '</span>';\n            \n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = '';\n            if (column.filterable == 'standard') {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n            \n            // print input field for column\n            tmpl +=                 '<span class=\"search-box\">' +\n                                        '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' +\n                                        '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                                            '<i class=\"fa fa-search\"></i>' +\n                                        '</button>' +\n                                    '</span>' +\n                                '</form>';\n        } else {\n            // filter criteria\n            tmpl +=             '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n                \n                // each filter will have only a single argument, so get that single argument\n                var cf_key = '';\n                var cf_arg = '';\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n                \n                // add seperator\n                if (seperator) {\n                    tmpl += ' | ';\n                }\n                seperator = true;\n                \n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n                } else {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter\">' +\n                                        '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' +\n                                    '</span>';\n                }\n            }\n            tmpl +=             '</span>';\n        }\n        tmpl +=             '</td>' +\n                        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return  '<span class=\"text-filter-val\">' + filter_value +\n                    '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' +\n                        '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                    '</a>' +\n                '</span>';\n\n    }\n};\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","define([ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id       : Utils.uid(),\n                min      : null,\n                max      : null,\n                step     : null,\n                precise  : false,\n                split    : 10000,\n                value    : null,\n                onchange : function(){}\n            }).set( options );\n\n            // create new element\n            this.setElement( this._template() );\n            this.$el.attr( 'id', this.model.id );\n            this.$text   = this.$( '.ui-form-slider-text' );\n            this.$slider = this.$( '.ui-form-slider-element' );\n\n            // add text field event\n            var pressed = [];\n            this.$text.on( 'change', function () {\n                self.value( $( this ).val() );\n            }).on( 'keyup', function( e ) {\n                pressed[e.which] = false;\n            }).on( 'keydown', function ( e ) {\n                var v = e.which;\n                pressed[ v ] = true;\n                if ( self.model.get( 'is_workflow' ) && pressed[ 16 ] && v == 52 ) {\n                    self.value( '$' );\n                    event.preventDefault();\n                } else if (!( v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || ( v >= 48 && v <= 57 && !pressed[ 16 ] ) || ( v >= 96 && v <= 105 )\n                    || ( ( v == 190 || v == 110 ) && $( this ).val().indexOf( '.' ) == -1 && self.model.get( 'precise' ) )\n                    || ( ( v == 189 || v == 109 ) && $( this ).val().indexOf( '-' ) == -1 )\n                    || self._isParameter( $( this ).val() )\n                    || pressed[ 91 ] || pressed[ 17 ] ) ) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if ( !step ) {\n                if ( opts.precise && this.has_slider ) {\n                    step = ( opts.max - opts.min ) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if ( this.has_slider ) {\n                this.$text.addClass( 'ui-form-slider-left' );\n                this.$slider.slider( { min: opts.min, max: opts.max, step: step } )\n                            .on( 'slide', function ( event, ui ) { self.value( ui.value ) } );\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get( 'value' );\n            this.has_slider && this.$slider.slider( 'value', value );\n            value !== this.$text.val() && this.$text.val( value );\n        },\n\n        /** Set and return the current value */\n        value : function ( new_val ) {\n            var options = this.model.attributes;\n            if ( new_val !== undefined ) {\n                if ( new_val !== null && new_val !== '' && !this._isParameter( new_val ) ) {\n                    isNaN( new_val ) && ( new_val = 0 );\n                    !options.precise && ( new_val = Math.round( new_val ) );\n                    options.max !== null && ( new_val = Math.min( new_val, options.max ) );\n                    options.min !== null && ( new_val = Math.max( new_val, options.min ) );\n                }\n                this.model.set( 'value', new_val );\n                this.model.trigger( 'change' );\n                options.onchange( new_val );\n            }\n            return this.model.get( 'value' );\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function( value ) {\n            return this.model.get( 'is_workflow' ) && String( value ).substring( 0, 1 ) === '$';\n        },\n\n        /** Slider template */\n        _template: function() {\n            return  '<div class=\"ui-form-slider\">' +\n                        '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                        '<div class=\"ui-form-slider-element\"/>' +\n                    '</div>';\n        }\n    });\n\n    return {\n        View : View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","/** This class creates/wraps a drill down element. */\ndefine([ 'utils/utils', 'mvc/ui/ui-options' ], function( Utils, Options ) {\n\nvar View = Options.BaseIcons.extend({\n    initialize: function( options ) {\n        options.type     = options.display || 'checkbox';\n        options.multiple = ( options.type == 'checkbox' );\n        Options.BaseIcons.prototype.initialize.call( this, options );\n    },\n\n    /** Set states for selected values */\n    _setValue: function ( new_value ) {\n        Options.BaseIcons.prototype._setValue.call( this, new_value );\n        if ( new_value !== undefined && new_value !== null && this.header_index ) {\n            var self = this;\n            var values = $.isArray( new_value ) ? new_value : [ new_value ];\n            _.each( values, function( v ) {\n                var list = self.header_index[ v ];\n                _.each( list, function( element ) {\n                    self._setState( element, true );\n                });\n            });\n        }\n    },\n\n    /** Expand/collapse a sub group */\n    _setState: function ( header_id, is_expanded ) {\n        var $button = this.$( '.button-' + header_id );\n        var $subgroup = this.$( '.subgroup-' + header_id );\n        $button.data( 'is_expanded', is_expanded );\n        if ( is_expanded ) {\n            $subgroup.show();\n            $button.removeClass( 'fa-plus-square' ).addClass( 'fa-minus-square' );\n        } else {\n            $subgroup.hide();\n            $button.removeClass( 'fa-minus-square' ).addClass( 'fa-plus-square' );\n        }\n    },\n\n    /** Template to create options tree */\n    _templateOptions: function() {\n        var self = this;\n        this.header_index = {};\n\n        // attach event handler\n        function attach( $el, header_id ) {\n            var $button = $el.find( '.button-' + header_id );\n            $button.on( 'click', function() {\n                self._setState( header_id, !$button.data( 'is_expanded' ) );\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate ( $tmpl, options, header ) {\n            header = header || [];\n            for (var i in options ) {\n                var level = options[ i ];\n                var has_options = level.options && level.options.length > 0;\n                var new_header = header.slice( 0 );\n                self.header_index[ level.value ] = new_header.slice( 0 );\n                var $group = $( '<div/>' );\n                if ( has_options ) {\n                    var header_id = Utils.uid();\n                    var $button = $( '<span/>' ).addClass( 'button-' + header_id ).addClass( 'ui-drilldown-button fa fa-plus-square' );\n                    var $subgroup = $( '<div/>' ).addClass( 'subgroup-' + header_id ).addClass( 'ui-drilldown-subgroup' );\n                    $group.append( $( '<div/>' )\n                                        .append( $button )\n                                        .append( self._templateOption( { label: level.name, value: level.value } ) ) );\n                    new_header.push( header_id );\n                    iterate ( $subgroup, level.options, new_header );\n                    $group.append( $subgroup );\n                    attach( $group, header_id );\n                } else {\n                    $group.append( self._templateOption( { label: level.name, value: level.value } ) );\n                }\n                $tmpl.append( $group );\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $( '<div/>' );\n        iterate( $tmpl, this.model.get( 'data' ) );\n        return $tmpl;\n    },\n\n    /** Template for drill down view */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list drilldown-container' ).attr( 'id', this.model.id );\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-portlet', 'mvc/form/form-repeat', 'mvc/form/form-input', 'mvc/form/form-parameters' ],\nfunction( Utils, Ui, Portlet, Repeat, InputElement, Parameters ) {\n    var View = Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement( $( '<div/>' ) );\n            this.render();\n        },\n\n        /** Render section view */\n        render: function() {\n            var self = this;\n            this.$el.empty();\n            _.each( this.inputs, function( input ) { self.add( input ) } );\n        },\n\n        /** Add a new input element */\n        add: function( input ) {\n            var input_def = jQuery.extend( true, {}, input );\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[ input_def.id ] = input_def;\n            switch( input_def.type ) {\n                case 'conditional':\n                    this._addConditional( input_def );\n                    break;\n                case 'repeat':\n                    this._addRepeat( input_def );\n                    break;\n                case 'section':\n                    this._addSection( input_def );\n                    break;\n                default:\n                    this._addRow( input_def );\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function( input_def ) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get( 'sustain_conditionals' ) && ( input_def.test_param.disabled = true );\n            var field = this._addRow( input_def.test_param );\n\n            // set onchange event for test parameter\n            field.model && field.model.set( 'onchange', function( value ) {\n                var selectedCase = self.app.data.matchCase( input_def, value );\n                for ( var i in input_def.cases ) {\n                    var case_def = input_def.cases[ i ];\n                    var section_row = self.$( '#' + input_def.id + '-section-' + i );\n                    var nonhidden = false;\n                    for ( var j in case_def.inputs ) {\n                        if ( !case_def.inputs[ j ].hidden ) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if ( i == selectedCase && nonhidden ) {\n                        section_row.fadeIn( 'fast' );\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger( 'change' );\n            });\n\n            // add conditional sub sections\n            for ( var i in input_def.cases ) {\n                var sub_section = new View( this.app, { inputs: input_def.cases[ i ].inputs } );\n                this._append( sub_section.$el.addClass( 'ui-form-section' ), input_def.id + '-section-' + i );\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger( 'change' );\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function( input_def ) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title           : input_def.title || 'Repeat',\n                min             : input_def.min,\n                max             : input_def.max,\n                onnew           : function() { create( input_def.inputs ); self.app.trigger( 'change' ); }\n            });\n\n            // helper function to create new repeat blocks\n            function create ( inputs ) {\n                var sub_section_id = input_def.id + '-section-' + ( block_index++ );\n                var sub_section = new View( self.app, { inputs: inputs } );\n                repeat.add( { id      : sub_section_id,\n                              $el     : sub_section.$el,\n                              ondel   : function() { repeat.del( sub_section_id ); self.app.trigger( 'change' ); } } );\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size( input_def.cache );\n            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min || 0 ), input_def.default || 0 ); i++ ) {\n                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n            }\n\n            // hide options\n            this.app.model.get( 'sustain_repeats' ) && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement( this.app, {\n                label   : input_def.title || input_def.name,\n                help    : input_def.help,\n                field   : repeat\n            });\n            this._append( input_element.$el, input_def.id );\n        },\n\n        /** Add a customized section */\n        _addSection: function( input_def ) {\n            var portlet = new Portlet.View({\n                title               : input_def.title || input_def.name,\n                cls                 : 'ui-portlet-section',\n                collapsible         : true,\n                collapsible_button  : true,\n                collapsed           : !input_def.expanded\n            });\n            portlet.append( new View( this.app, { inputs: input_def.inputs } ).$el );\n            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n            this.app.on( 'expand', function( input_id ) { ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand(); } );\n            this._append( portlet.$el, input_def.id );\n        },\n\n        /** Add a single input field element */\n        _addRow: function( input_def ) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function() { self.app.trigger( 'change', id ) };\n            var field = this.parameters.create( input_def );\n            this.app.field_list[ id ] = field;\n            var input_element = new InputElement( this.app, {\n                name                : input_def.name,\n                label               : input_def.hide_label ? '' : input_def.label || input_def.name,\n                value               : input_def.value,\n                text_value          : input_def.text_value,\n                collapsible_value   : input_def.collapsible_value,\n                collapsible_preview : input_def.collapsible_preview,\n                help                : input_def.help,\n                argument            : input_def.argument,\n                disabled            : input_def.disabled,\n                color               : input_def.color,\n                style               : input_def.style,\n                backdrop            : input_def.backdrop,\n                hidden              : input_def.hidden,\n                fixed               : input_def.fixed,\n                field               : field\n            });\n            this.app.element_list[ id ] = input_element;\n            this._append( input_element.$el, input_def.id );\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function( $el, id ) {\n            this.$el.append( $el.addClass( 'section-row' ).attr( 'id', id ) );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-section.js","/** This class creates a ui component which enables the dynamic creation of portlets */\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc' ],\nfunction( Utils, Portlet, Ui ) {\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            this.list = {};\n            this.options = Utils.merge( options, {\n                title       : 'Repeat',\n                empty_text  : 'Not available.',\n                max         : null,\n                min         : null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon    : 'fa-plus',\n                title   : 'Insert ' + this.options.title,\n                tooltip : 'Add new ' + this.options.title + ' block',\n                cls     : 'ui-button-icon ui-clear-float form-repeat-add',\n                onclick : function() { options.onnew && options.onnew() }\n            });\n            this.setElement( $( '<div/>' ).append( this.$list = $( '<div/>' ) )\n                                          .append( $( '<div/>' ).append( this.button_new.$el ) ) );\n        },\n\n        /** Number of repeat blocks */\n        size: function() {\n            return _.size( this.list );\n        },\n\n        /** Add new repeat block */\n        add: function( options ) {\n            if ( !options.id || this.list[ options.id ] ) {\n                Galaxy.emit.debug( 'form-repeat::add()', 'Duplicate or invalid repeat block id.' );\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon    : 'fa-trash-o',\n                tooltip : 'Delete this repeat block',\n                cls     : 'ui-button-icon-plain form-repeat-delete',\n                onclick : function() { options.ondel && options.ondel() }\n            });\n            var portlet = new Portlet.View({\n                id              : options.id,\n                title           : 'placeholder',\n                cls             : options.cls || 'ui-portlet-repeat',\n                operations      : { button_delete: button_delete }\n            });\n            portlet.append( options.$el );\n            portlet.$el.addClass( 'section-row' ).hide();\n            this.list[ options.id ] = portlet;\n            this.$list.append( portlet.$el.fadeIn( 'fast' ) );\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function( id ) {\n            if ( !this.list[ id ] ) {\n                Galaxy.emit.debug( 'form-repeat::del()', 'Invalid repeat block id.' );\n                return;\n            }\n            this.$list.find( '#' + id ).remove();\n            delete this.list[ id ];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function() {\n            for( var id in this.list ) {\n                this.del( id );\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function() {\n            this.button_new.$el.hide();\n            _.each( this.list, function( portlet ) { portlet.hideOperation( 'button_delete' ) } );\n            _.isEmpty( this.list ) && this.$el.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( this.options.empty_text ) );\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            var index = 0;\n            for ( var id in this.list ) {\n                var portlet = this.list[ id ];\n                portlet.title( ++index + ': ' + this.options.title );\n                portlet[ this.size() > this.options.min ? 'showOperation' : 'hideOperation' ]( 'button_delete' );\n            }\n        }\n    });\n\n    return {\n        View : View\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-repeat.js","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable     : this.app_options.text_enable   || 'Enable',\n                text_disable    : this.app_options.text_disable  || 'Disable',\n                cls_enable      : this.app_options.cls_enable    || 'fa fa-caret-square-o-down',\n                cls_disable     : this.app_options.cls_disable   || 'fa fa-caret-square-o-up',\n                always_refresh  : this.app_options.always_refresh\n            }).set( options );\n\n            // set element and link components\n            this.setElement( this._template() );\n            this.$field             = this.$( '.ui-form-field' );\n            this.$info              = this.$( '.ui-form-info' );\n            this.$preview           = this.$( '.ui-form-preview' );\n            this.$collapsible       = this.$( '.ui-form-collapsible' );\n            this.$collapsible_text  = this.$( '.ui-form-collapsible-text' );\n            this.$collapsible_icon  = this.$( '.ui-form-collapsible-icon' );\n            this.$title             = this.$( '.ui-form-title' );\n            this.$title_text        = this.$( '.ui-form-title-text' );\n            this.$error_text        = this.$( '.ui-form-error-text' );\n            this.$error             = this.$( '.ui-form-error' );\n            this.$backdrop          = this.$( '.ui-form-backdrop' );\n\n            // add field element\n            this.$field.prepend( this.field.$el );\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get( 'collapsible_value' );\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify( this.model.get( 'value' ) ) == JSON.stringify( collapsible_value );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on( 'click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger( 'change' );\n                self.render();\n            });\n\n            // hide error on value change\n            if ( this.field.model && !this.model.get( 'always_refresh' ) ) {\n                this.listenTo( this.field.model, 'change:value', function() { self.reset() } );\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set( 'backdrop', true );\n        },\n\n        /** Set error text */\n        error: function( text ) {\n            this.model.set( 'error_text', text );\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get( 'fixed' ) && this.model.set( 'error_text', null );\n        },\n\n        render: function() {\n            // render help\n            $( '.tooltip' ).hide();\n            var help_text = this.model.get( 'help', '' );\n            var help_argument = this.model.get( 'argument' );\n            if ( help_argument && help_text.indexOf( '(' + help_argument + ')' ) == -1 ) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html( help_text );\n            // render visibility\n            this.$el[ this.model.get( 'hidden' ) ? 'hide' : 'show' ]();\n            // render preview view for collapsed fields\n            this.$preview[ ( this.field.collapsed && this.model.get( 'collapsible_preview' ) || this.model.get( 'disabled' ) ) ? 'show' : 'hide' ]()\n                         .html( _.escape( this.model.get( 'text_value' ) ) );\n            // render error messages\n            var error_text = this.model.get( 'error_text' );\n            this.$error[ error_text ? 'show' : 'hide' ]();\n            this.$el[ error_text ? 'addClass' : 'removeClass' ]( 'ui-error' );\n            this.$error_text.html( error_text );\n            // render backdrop\n            this.$backdrop[ this.model.get( 'backdrop' ) ? 'show' : 'hide' ]();\n            // render input field\n            this.field.collapsed || this.model.get( 'disabled' ) ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set( { 'color': this.model.get( 'color' ), 'style': this.model.get( 'style' ) } );\n            // render collapsible options\n            if ( !this.model.get( 'disabled' ) && this.model.get( 'collapsible_value' ) !== undefined ) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text( this.model.get( 'label' ) );\n                this.$collapsible_icon.removeClass().addClass( 'icon' )\n                                      .addClass( this.model.get( 'cls_' +  collapsible_state ) )\n                                      .attr( 'data-original-title', this.model.get( 'text_' + collapsible_state ) )\n                                      .tooltip( { placement: 'bottom' } );\n            } else {\n                this.$title_text.show().text( this.model.get( 'label' ) );\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return  $( '<div/>' ).addClass( 'ui-form-element' )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-error ui-error' )\n                                    .append( $( '<span/>' ).addClass( 'fa fa-arrow-down' ) )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-error-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-title' )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-collapsible' )\n                                        .append( $( '<i/>' ).addClass( 'ui-form-collapsible-icon' ) )\n                                        .append( $( '<span/>' ).addClass( 'ui-form-collapsible-text' ) )\n                                    )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-title-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-field' )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-info' ) )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-backdrop' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-preview' ) );\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-input.js","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-misc',\n        'mvc/ui/ui-select-content',\n        'mvc/ui/ui-select-library',\n        'mvc/ui/ui-select-ftp',\n        'mvc/ui/ui-select-genomespace',\n        'mvc/ui/ui-color-picker'],\n    function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker ) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text'              : '_fieldText',\n            'password'          : '_fieldText',\n            'select'            : '_fieldSelect',\n            'data_column'       : '_fieldSelect',\n            'genomebuild'       : '_fieldSelect',\n            'data'              : '_fieldData',\n            'data_collection'   : '_fieldData',\n            'integer'           : '_fieldSlider',\n            'float'             : '_fieldSlider',\n            'boolean'           : '_fieldBoolean',\n            'drill_down'        : '_fieldDrilldown',\n            'color'             : '_fieldColor',\n            'hidden'            : '_fieldHidden',\n            'hidden_data'       : '_fieldHidden',\n            'baseurl'           : '_fieldHidden',\n            'library_data'      : '_fieldLibrary',\n            'ftpfile'           : '_fieldFtp',\n            'upload'            : '_fieldUpload',\n            'genomespacefile'   : '_fieldGenomeSpace'\n        },\n\n        /** Returns an input field for a given field type */\n        create: function( input_def ) {\n            var fieldClass = this.types[ input_def.type ];\n            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n            if ( !field ) {\n                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && ( input_def.value = null );\n            field.value( input_def.value );\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function( input_def ) {\n            return new SelectContent.View({\n                id          : 'field-' + input_def.id,\n                extensions  : input_def.extensions,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                type        : input_def.type,\n                flavor      : input_def.flavor,\n                data        : input_def.options,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // customize properties\n            if ( input_def.type == 'data_column' ) {\n                input_def.error_text = 'Missing columns in referenced dataset.'\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if( !data ) {\n                data = [];\n                _.each( input_def.options, function( option ) {\n                    data.push( { label: option[ 0 ], value: option[ 1 ] } );\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch ( input_def.display ) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n                case 'radiobutton':\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id          : 'field-' + input_def.id,\n                data        : data,\n                error_text  : input_def.error_text || 'No options available',\n                multiple    : input_def.multiple,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange,\n                individual  : input_def.individual,\n                searchable  : input_def.flavor !== 'workflow'\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id          : 'field-' + input_def.id,\n                data        : input_def.options,\n                display     : input_def.display,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function( input_def ) {\n            // field replaces e.g. a select field\n            if ( input_def.options && input_def.data ) {\n                input_def.area = input_def.multiple;\n                if ( Utils.isEmpty( input_def.value ) ) {\n                    input_def.value = null;\n                } else {\n                    if ( $.isArray( input_def.value ) ) {\n                        var str_value = '';\n                        for ( var i in input_def.value ) {\n                            str_value += String( input_def.value[ i ] );\n                            if ( !input_def.multiple ) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id          : 'field-' + input_def.id,\n                type        : input_def.type,\n                area        : input_def.area,\n                readonly    : input_def.readonly,\n                placeholder : input_def.placeholder,\n                datalist    : input_def.datalist,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function( input_def ) {\n            return new Ui.Slider.View({\n                id          : 'field-' + input_def.id,\n                precise     : input_def.type == 'float',\n                is_workflow : input_def.is_workflow,\n                min         : input_def.min,\n                max         : input_def.max,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function( input_def ) {\n            return new Ui.Hidden({\n                id          : 'field-' + input_def.id,\n                info        : input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function( input_def ) {\n            return new Ui.RadioButton.View({\n                id          : 'field-' + input_def.id,\n                data        : [ { label : 'Yes', value : 'true'  },\n                                { label : 'No',  value : 'false' }],\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function( input_def ) {\n            return new ColorPicker({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function( input_def ) {\n            return new SelectLibrary.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function( input_def ) {\n            return new SelectFtp.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** GenomeSpace file select field\n         */\n        _fieldGenomeSpace: function( input_def ) {\n             var self = this;\n             return new SelectGenomeSpace.View({\n                 id          : 'field-' + input_def.id,\n                 onchange    : function() {\n                     self.app.trigger( 'change' );\n                 }\n             });\n         },\n\n        /** Upload file field */\n        _fieldUpload: function( input_def ) {\n            return new Ui.Upload({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-parameters.js","define([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-select-default' ], function( Utils, Ui, Select ) {\n\n/** Batch mode variations */\nvar Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.LINKED     },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.LINKED     } ],\n    data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections',  multiple: true,    batch: Batch.DISABLED   } ],\n    data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   } ],\n    workflow_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    module_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.ENABLED    } ],\n    module_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder',   tooltip: 'Multiple collections', multiple: true,    batch: Batch.ENABLED    } ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            src_labels  : { 'hda' : 'dataset', 'hdca': 'dataset collection' },\n            pagelimit   : 100,\n            statustimer : 1000\n        }).set( options );\n        this.setElement( $( '<div/>' ).addClass( 'ui-select-content' ) );\n        this.button_product = new Ui.RadioButton.View( {\n            value       : 'false',\n            data        : [ { icon: 'fa fa-chain', value: 'false',\n                              tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' },\n                            { icon: 'fa fa-chain-broken',  value: 'true',\n                              tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' } ] } );\n        var $batch_div = $( '<div/>' ).addClass( 'ui-form-info' )\n                            .append( $( '<i/>' ).addClass( 'fa fa-sitemap' ) )\n                            .append( $( '<span/>' ).html( 'This is a batch mode input field. Separate jobs will be triggered for each dataset selection.' ) );\n        this.$batch = {\n            linked  : $batch_div.clone(),\n            enabled : $batch_div.clone().append( $( '<div/>' )\n                                                    .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( 'Batch options:' ) )\n                                                    .append( this.button_product.$el ) )\n                                                    .append( $( '<div/>' ).css( 'clear', 'both' ) )\n        };\n\n        // add drag-drop event handlers\n        this.$el.on( 'dragenter', function( e ) { this.lastenter = e.target; self.$el.addClass( 'ui-dragover' ); } )\n                .on( 'dragover',  function( e ) { e.preventDefault(); } )\n                .on( 'dragleave', function( e ) { this.lastenter === e.target && self.$el.removeClass( 'ui-dragover' ); } )\n                .on( 'drop',      function( e ) { self._handleDrop( e ); } );\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:current', this._changeCurrent, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this );\n        this.render();\n\n        // add change event\n        this.on( 'change', function() { options.onchange && options.onchange( self.value() ) } );\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Update data representing selectable options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Return the currently selected dataset values */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        var current = this.model.get( 'current' );\n        if ( this.config[ current ] ) {\n            var id_list = this.fields[ current ].value();\n            if (id_list !== null) {\n                id_list = $.isArray( id_list ) ? id_list : [ id_list ];\n                if ( id_list.length > 0 ) {\n                    var result = this._batch( { values: [] } );\n                    for ( var i in id_list ) {\n                        var details = this.history[ id_list[ i ] + '_' + this.config[ current ].src ];\n                        if ( details ) {\n                            result.values.push( details );\n                        } else {\n                            Galaxy.emit.debug( 'ui-select-content::value()', 'Requested details not found for \\'' + id_list[ i ] + '\\'.'  );\n                            return null;\n                        }\n                    }\n                    result.values.sort( function( a, b ) { return a.hid - b.hid } );\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug( 'ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.'  );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each( this.fields, function( field, i ) {\n            if ( self.model.get( 'current' ) == i ) {\n                field.$el.show();\n                _.each( self.$batch, function( $batchfield, batchmode ) {\n                    $batchfield[ self.config[ i ].batch == batchmode ? 'show' : 'hide' ]();\n                });\n                self.button_type.value( i );\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id = ( this.model.get( 'flavor' ) ? this.model.get( 'flavor' ) + '_' : '' ) +\n                        String( this.model.get( 'type' ) ) + ( this.model.get( 'multiple' ) ? '_multiple' : '' );\n        if ( Configurations[ config_id ] ) {\n            this.config = Configurations[ config_id ];\n        } else {\n            this.config = Configurations[ 'data' ];\n            Galaxy.emit.debug( 'ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.'  );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get( 'data' );\n        var extensions = Utils.textify( this.model.get( 'extensions' ) );\n        var src_labels = this.model.get( 'src_labels' );\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each( this.config, function( c, i ) {\n            self.button_data.push({\n                value   : i,\n                icon    : c.icon,\n                tooltip : c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional    : self.model.get( 'optional' ),\n                    multiple    : c.multiple,\n                    searchable  : !c.multiple || ( data && data[ c.src ] && data[ c.src ].length > self.model.get( 'pagelimit' ) ),\n                    individual  : true,\n                    error_text  : 'No ' + ( extensions ? extensions + ' ' : '' ) + ( src_labels[ c.src ] || 'content' ) + ' available.',\n                    onchange    : function() {\n                        self.trigger( 'change' );\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value   : this.model.get( 'current' ),\n            data    : this.button_data,\n            onchange: function( value ) {\n                self.model.set( 'current', value );\n                self.trigger( 'change' );\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if ( this.fields.length > 1 ) {\n            this.$el.append( this.button_type.$el );\n            button_width = Math.max( 0, this.fields.length * 36 ) + 'px';\n        }\n        _.each( this.fields, function( field ) {\n            self.$el.append( field.$el.css( { 'margin-left': button_width } ) );\n        });\n        _.each( this.$batch, function( $batchfield, batchmode ) {\n            self.$el.append( $batchfield.css( { 'margin-left': button_width } ) );\n        });\n        this.model.set( 'current', 0 );\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each( this.fields, function( field ) { field[ self.model.get( 'wait' ) ? 'wait' : 'unwait' ]() } );\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get( 'data' );\n        var self = this;\n        var select_options = {};\n        _.each( options, function( items, src ) {\n            select_options[ src ] = [];\n            _.each( items, function( item ) {\n                select_options[ src ].push({\n                    hid  : item.hid,\n                    keep : item.keep,\n                    label: item.hid + ': ' + item.name,\n                    value: item.id,\n                    tags : item.tags\n                });\n                self.history[ item.id + '_' + src ] = item;\n            });\n        });\n        _.each( this.config, function( c, i ) {\n            select_options[ c.src ] && self.fields[ i ].add( select_options[ c.src ], function( a, b ) { return b.hid - a.hid } );\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function () {\n        var new_value = this.model.get( 'value' );\n        if ( new_value && new_value.values && new_value.values.length > 0 ) {\n            // create list with content ids\n            var list = [];\n            _.each( new_value.values, function( value ) {\n                list.push( value.id );\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[ 0 ].src;\n            var multiple = new_value.values.length > 1;\n            for( var i = 0; i < this.config.length; i++ ) {\n                var field = this.fields[ i ];\n                var c = this.config[ i ];\n                if ( c.src == src && [ multiple, true ].indexOf( c.multiple ) !== -1 ) {\n                    this.model.set( 'current', i );\n                    field.value( list );\n                    break;\n                }\n            }\n        } else {\n            _.each( this.fields, function( field ) {\n                field.value( null );\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function( ev ) {\n        try {\n            var data      = this.model.get( 'data' );\n            var current   = this.model.get( 'current' );\n            var config    = this.config[ current ];\n            var field     = this.fields[ current ];\n            var drop_data = JSON.parse( ev.originalEvent.dataTransfer.getData( 'text' ) )[ 0 ];\n            var new_id    = drop_data.id;\n            var new_src   = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n            var new_value = { id: new_id, src: new_src };\n            if ( data && _.findWhere( data[ new_src ], new_value ) ) {\n                if ( config.src == new_src ) {\n                    var current_value = field.value();\n                    if ( current_value && config.multiple ) {\n                        if ( current_value.indexOf( new_id ) == -1 ) {\n                            current_value.push( new_id );\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value( current_value );\n                } else {\n                    this.model.set( 'value', { values: [ new_value ] } );\n                    this.model.trigger( 'change:value' );\n                }\n                this.trigger( 'change' );\n                this._handleDropStatus( 'success' );\n            } else {\n                this._handleDropStatus( 'danger' );\n            }\n        } catch( e ) {\n            this._handleDropStatus( 'danger' );\n        }\n        ev.preventDefault();\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function( status ) {\n        var self = this;\n        this.$el.removeClass( 'ui-dragover' ).addClass( 'ui-dragover-' + status );\n        setTimeout( function() { self.$el.removeClass( 'ui-dragover-' + status ) }, this.model.get( 'statustimer' ) );\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function( result ) {\n        result[ 'batch' ] = false;\n        var current = this.model.get( 'current' );\n        var config = this.config[ current ];\n        if ( config.src == 'hdca' && !config.multiple ) {\n            var hdca = this.history[ this.fields[ current ].value() + '_hdca' ];\n            if ( hdca && hdca.map_over_type ) {\n                result[ 'batch' ] = true;\n            }\n        }\n        if ( config.batch == Batch.LINKED || config.batch == Batch.ENABLED ) {\n            result[ 'batch' ] = true;\n            if ( config.batch == Batch.ENABLED && this.button_product.value() === 'true' ) {\n                result[ 'product' ] = true;\n            }\n        }\n        return result;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-content.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-table', 'mvc/ui/ui-list'],\n        function(Utils, Ui, Table, List) {\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + 'api/libraries?deleted=false'\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on('change', function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries  = new Libraries();\n        this.datasets   = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange    : function(value) {\n                self.datasets.config.set('library_id', value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name        : 'dataset',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                self.trigger('change');\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on('reset', function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value   : model.id,\n                    label   : model.get('name')\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on('reset', function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get('type') === 'file') {\n                        data.push({\n                            value   : model.id,\n                            label   : model.get('name')\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$('.library-select').append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger('change');\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return  '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                        '<span class=\"library-title\">Select Library</span>' +\n                        '<span class=\"library-select\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-library.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-list'],\n        function(Utils, List) {\n\n/**\n * FTP file selector\n */\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // create ui-list view to keep track of selected ftp files\n        this.ftpfile_list = new List.View({\n            name        : 'file',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                options.onchange && options.onchange(self.value());\n            }\n        });\n\n        // create elements\n        this.setElement(this.ftpfile_list.$el);\n\n        // initial fetch of ftps\n        Utils.get({\n            url     : Galaxy.root + 'api/remote_files',\n            success : function(response) {\n                var data = [];\n                for (var i in response) {\n                    data.push({\n                        value   : response[i]['path'],\n                        label   : response[i]['path']\n                    });\n                }\n                self.ftpfile_list.update(data);\n            }\n        });\n    },\n\n    /** Return/Set currently selected ftp datasets */\n    value: function(val) {\n        return this.ftpfile_list.value(val);\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-ftp.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/tool/tool-genomespace'],\n        function(Utils, Ui, GenomespaceBrowser) {\n\n/**\n * GenomeSpace file selector\n */\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n\n        // link this\n        var self = this;\n\n        // create insert new list element button\n        this.browse_button = new Ui.ButtonIcon({\n            title       : 'Browse',\n            icon        : 'fa fa-sign-in',\n            tooltip     : 'Browse GenomeSpace',\n            onclick     : function() {\n                self.browseGenomeSpace();\n            }\n        });\n\n        // create genomespace filepath textbox\n        this.filename_textbox = new Ui.Input();\n\n        // create genomespace token textbox\n        this.token_textbox = new Ui.Input({\n          type       : 'password'        \n        });\n\n        // create elements\n        this.setElement(this._template(options));\n        this.$('.ui-gs-browse-button').append(this.browse_button.$el);\n        this.$('.ui-gs-filename-textbox').append(this.filename_textbox.$el);\n        this.$('.ui-gs-token-textbox').append(this.token_textbox.$el);\n    },\n\n    /** Browse GenomeSpace */\n    browseGenomeSpace: function(options) {\n        var self = this;\n        GenomespaceBrowser.openFileBrowser({\n            successCallback: function(data) {\n                self.value(data.destination + \"^\" + data.token);\n            }\n        });\n    },\n    \n    /** Main Template */\n    _template: function(options) {\n        return  '<div class=\"ui-gs-select-file\">' +\n                    '<div class=\"ui-gs-browse-field\">' +\n                        '<span class=\"ui-gs-browse-button\" />' +\n                        '<span class=\"ui-gs-filename-textbox\" />' +\n                    '</div>' +\n                    '<div class=\"ui-gs-token-field\">' +\n                        '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' +\n                        '<span class=\"ui-gs-token-textbox\" />' +\n                    '</div>' +\n                '</div>';\n    },\n    \n    /** Return/Set currently selected genomespace filename/token */\n    value : function (new_value) {\n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this._setValue(new_value);\n        }\n        else {\n          return this._getValue();\n        }\n    },\n    \n    // get value\n    _getValue: function() {\n        return this.filename_textbox.value() +\n            \"^\" + this.token_textbox.value();\n    },\n    \n    // set value\n    _setValue: function(new_value) {\n        if (new_value) {\n          values = new_value.split(\"^\");\n          this.filename_textbox.value(values[0]);\n          this.token_textbox.value(values[1]);\n        }\n    },\n    \n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-genomespace.js","// Provides support for interacting with the GenomeSpace File Browser popup dialogue\ndefine([], function() {\n\n// tool form templates\nreturn {\n    openFileBrowser: function( options ) {\n        var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n        var GS_UPLOAD_URL = GS_UI_URL + 'upload/loadUrlToGenomespace.html?getLocation=true'\n\n        var newWin = window.open(GS_UPLOAD_URL, \"GenomeSpace File Browser\", \"height=360px,width=600px\");\n         \n        successCalBack = options['successCallback'];\n        window.addEventListener( \"message\", function (e) {\n             successCalBack(e.data);    \n          }, false);\n      \n        newWin.focus();\n       \n        if (options['errorCallback'] != null) newWin.setCallbackOnGSUploadError = config['errorCallback'];  \n    }\n\n};\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/tool/tool-genomespace.js","/** Renders the color picker used e.g. in the tool form **/\ndefine(['utils/utils'], function( Utils ) {\n    return Backbone.View.extend({\n        colors: {\n            standard: ['c00000','ff0000','ffc000','ffff00','92d050','00b050','00b0f0','0070c0','002060','7030a0'],\n            base    : ['ffffff','000000','eeece1','1f497d','4f81bd','c0504d','9bbb59','8064a2','4bacc6','f79646'],\n            theme   :[['f2f2f2','7f7f7f','ddd9c3','c6d9f0','dbe5f1','f2dcdb','ebf1dd','e5e0ec','dbeef3','fdeada'],\n                      ['d8d8d8','595959','c4bd97','8db3e2','b8cce4','e5b9b7','d7e3bc','ccc1d9','b7dde8','fbd5b5'],\n                      ['bfbfbf','3f3f3f','938953','548dd4','95b3d7','d99694','c3d69b','b2a2c7','92cddc','fac08f'],\n                      ['a5a5a5','262626','494429','17365d','366092','953734','76923c','5f497a','31859b','e36c09'],\n                      ['7f7f7e','0c0c0c','1d1b10','0f243e','244061','632423','4f6128','3f3151','205867','974806']]\n        },\n\n        initialize : function( options ) {\n            this.options = Utils.merge( options, {} );\n            this.setElement( this._template() );\n            this.$panel = this.$( '.ui-color-picker-panel' );\n            this.$view = this.$( '.ui-color-picker-view' );\n            this.$value = this.$( '.ui-color-picker-value' );\n            this.$header = this.$( '.ui-color-picker-header' );\n            this._build();\n            this.visible = false;\n            this.value( this.options.value );\n            this.$boxes = this.$( '.ui-color-picker-box' );\n            var self = this;\n            this.$boxes.on( 'click', function() {\n                self.value( $( this ).css( 'background-color' ) );\n                self.$header.trigger( 'click' );\n            } );\n            this.$header.on( 'click', function() {\n                self.visible = !self.visible;\n                if ( self.visible ) {\n                    self.$view.fadeIn( 'fast' );\n                } else {\n                    self.$view.fadeOut( 'fast' );\n                }\n            } );\n        },\n\n        /** Get/set value */\n        value : function ( new_val ) {\n            if ( new_val !== undefined && new_val !== null ) {\n                this.$value.css( 'background-color', new_val );\n                this.$( '.ui-color-picker-box' ).empty();\n                this.$( this._getValue() ).html( this._templateCheck() );\n                this.options.onchange && this.options.onchange( new_val );\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var rgb = this.$value.css( 'background-color' );\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if ( rgb ) {\n                function hex( x ) {\n                    return ( '0' + parseInt( x ).toString( 16 ) ).slice( -2 );\n                }\n                return '#' + hex( rgb[ 1] ) + hex( rgb[ 2 ] ) + hex( rgb[ 3 ] );\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function() {\n            this._content( { colors : this.colors.base } );\n            for ( var i in this.colors.theme ) {\n                var line_def = {};\n                if ( i == 0 ) {\n                    line_def[ 'bottom' ] = true;\n                } else if ( i != this.colors.theme.length - 1 ) {\n                    line_def[ 'top' ]     = true;\n                    line_def[ 'bottom' ]  = true;\n                } else {\n                    line_def[ 'top' ]     = true;\n                }\n                line_def[ 'colors' ] = this.colors.theme[ i ];\n                this._content( line_def );\n            }\n            this._content( { colors : this.colors.standard } );\n        },\n\n        /** Create content */\n        _content: function( options ) {\n            var colors   = options.colors;\n            var $content = $( this._templateContent() );\n            var $line = $content.find( '.line' );\n            this.$panel.append( $content );\n            for ( var i in colors ) {\n                var $box = $( this._templateBox( colors[ i ] ) );\n                if ( options.top ) {\n                    $box.css( 'border-top', 'none' );\n                    $box.css( 'border-top-left-radius', '0px' );\n                    $box.css( 'border-top-right-radius', '0px' );\n                }\n                if ( options.bottom ) {\n                    $box.css( 'border-bottom', 'none' );\n                    $box.css( 'border-bottom-left-radius', '0px' );\n                    $box.css( 'border-bottom-right-radius', '0px' );\n                }\n                $line.append( $box );\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function() {\n            return  '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function() {\n            return  '<div class=\"ui-color-picker-content\">' +\n                        '<div class=\"line\"/>' +\n                    '</div>';\n        },\n\n        /** Box template */\n        _templateBox: function( color ) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function() {\n            return  '<div class=\"ui-color-picker\">' +\n                        '<div class=\"ui-color-picker-header\">' +\n                            '<div class=\"ui-color-picker-value\"/>' +\n                            '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                        '</div>' +\n                        '<div class=\"ui-color-picker-view ui-input\">' +\n                            '<div class=\"ui-color-picker-panel\"/>' +\n                        '</div>'\n                    '</div>';\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-color-picker.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    QUERY_STRING = require( 'utils/query-string-parsing' ),\n    Ui = require( 'mvc/ui/ui-misc' );\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize : function( page, options ){\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function( url, data ) {\n        data = data || {};\n        data.__identifer = Math.random().toString( 36 ).substr( 2 );\n        if ( !$.isEmptyObject( data ) ) {\n            url += url.indexOf( '?' ) == -1 ? '?' : '&';\n            url += $.param( data , true );\n        }\n        Galaxy.params = {};\n        this.navigate( url, { 'trigger': true } );\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function( callback, args, name ){\n        Galaxy.debug( 'router execute:', callback, args, name );\n        var queryObj = QUERY_STRING.parse( args.pop() );\n        args.push( queryObj );\n        if( callback ){\n            if ( this.authenticate( args, name ) ) {\n                callback.apply( this, args );\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function( args, name ) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display( new Ui.Message( { status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true } ) );\n    }\n});\n\nmodule.exports = Router\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(['utils/utils',\n    'mvc/ui/ui-select-default',\n    'mvc/ui/ui-slider',\n    'mvc/ui/ui-options',\n    'mvc/ui/ui-drilldown',\n    'mvc/ui/ui-buttons',\n    'mvc/ui/ui-modal'],\n    function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.tagName = options.tagName || this.tagName;\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        title: function( new_title ) {\n            this.model.set( 'title', new_title );\n        },\n        value: function() {\n            return this.model.get( 'title' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-label' )\n                    .addClass( this.model.get( 'cls' ) )\n                    .html( this.model.get( 'title' ) );\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                message     : null,\n                status      : 'info',\n                cls         : '',\n                persistent  : false,\n                fade        : true\n            }).set( options );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        update: function( options ) {\n            this.model.set( options );\n        },\n        render: function() {\n            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n            var status = this.model.get( 'status' );\n            if ( this.model.get( 'large' ) ) {\n                this.$el.addClass((( status == 'success' && 'done' ) ||\n                                   ( status == 'danger' && 'error' ) ||\n                                     status ) + 'messagelarge' );\n            } else {\n                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n            }\n            if ( this.model.get( 'message' ) ) {\n                this.$el.html( this.messageForDisplay() );\n                this.$el[ this.model.get( 'fade' ) ? 'fadeIn' : 'show' ]();\n                this.timeout && window.clearTimeout( this.timeout );\n                if ( !this.model.get( 'persistent' ) ) {\n                    var self = this;\n                    this.timeout = window.setTimeout( function() {\n                        self.model.set( 'message', '' );\n                    }, 3000 );\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function() {\n            return _.escape( this.model.get( 'message' ) );\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function() {\n            return this.model.get( 'message' );\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                type            : 'text',\n                placeholder     : '',\n                disabled        : false,\n                readonly        : false,\n                visible         : true,\n                cls             : '',\n                area            : false,\n                color           : null,\n                style           : null\n            }).set( options );\n            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            var self = this;\n            this.$el.removeClass()\n                    .addClass( 'ui-' + this.tagName )\n                    .addClass( this.model.get( 'cls' ) )\n                    .addClass( this.model.get( 'style' ) )\n                    .attr( 'id', this.model.id )\n                    .attr( 'type', this.model.get( 'type' ) )\n                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n                    .css( 'color', this.model.get( 'color' ) || '' )\n                    .css( 'border-color', this.model.get( 'color' ) || '' );\n            var datalist = this.model.get( 'datalist' );\n            if ( $.isArray( datalist ) && datalist.length > 0 ) {\n                this.$el.autocomplete( { source : function( request, response ) { response( self.model.get( 'datalist' ) ) },\n                                         change : function() { self._onchange() } } );\n            }\n            if ( this.model.get( 'value' ) !== this.$el.val() ) {\n                this.$el.val( this.model.get( 'value' ) );\n            }\n            _.each( [ 'readonly', 'disabled' ], function( attr_name ) {\n                self.model.get( attr_name ) ? self.$el.attr( attr_name, true ) : self.$el.removeAttr( attr_name );\n            });\n            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n            return this;\n        },\n        _onchange: function() {\n            this.value( this.$el.val() );\n            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$hidden = $( '<div/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.$hidden.val( this.model.get( 'value' ) );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$file = $( '<input/>' ).attr( 'type', 'file' ).addClass( 'ui-margin-bottom' ) )\n                                           .append( this.$text = $( '<textarea/>' ).addClass( 'ui-textarea' ).attr( 'disabled', true ) )\n                                           .append( this.$wait = $( '<i/>' ).addClass( 'fa fa-spinner fa-spin' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.$file.on( 'change', function( e ) { self._readFile( e ) } );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            this.model.get( 'value' ) ? this.$text.text( this.model.get( 'value' ) ).show() : this.$text.hide();\n            this.model.get( 'wait' ) ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function( e ) {\n            var self = this;\n            var file = e.target.files && e.target.files[ 0 ];\n            if ( file ) {\n                var reader = new FileReader();\n                reader.onload = function() {\n                    self.model.set( { wait: false, value: this.result } );\n                }\n                this.model.set( { wait: true, value: null } );\n                reader.readAsText( file );\n            }\n        }\n    });\n\n    return {\n        Button           : Buttons.ButtonDefault,\n        ButtonIcon       : Buttons.ButtonIcon,\n        ButtonCheck      : Buttons.ButtonCheck,\n        ButtonMenu       : Buttons.ButtonMenu,\n        ButtonLink       : Buttons.ButtonLink,\n        Input            : Input,\n        Label            : Label,\n        Message          : Message,\n        UnescapedMessage : UnescapedMessage,\n        Upload           : Upload,\n        Modal            : Modal,\n        RadioButton      : Options.RadioButton,\n        Checkbox         : Options.Checkbox,\n        Radio            : Options.Radio,\n        Select           : Select,\n        Hidden           : Hidden,\n        Slider           : Slider,\n        Drilldown        : Drilldown\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","/** Generic form view */\ndefine( [ 'mvc/form/form-view', 'mvc/ui/ui-misc' ], function( Form, Ui ) {\n\n    var View = Backbone.View.extend({\n\n        initialize: function( options ) {\n            this.model = new Backbone.Model( options );\n            this.url = this.model.get( 'url' );\n            this.redirect = this.model.get( 'redirect' );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            $.ajax({\n                url     : Galaxy.root + this.url,\n                type    : 'GET'\n            }).done( function( response ) {\n                var options = $.extend( {}, self.model.attributes, response );\n                var form = new Form({\n                    title  : options.title,\n                    message: options.message,\n                    status : options.status || 'warning',\n                    icon   : options.icon,\n                    inputs : options.inputs,\n                    buttons: {\n                        'submit': new Ui.Button({\n                            tooltip  : options.submit_tooltip,\n                            title    : options.submit_title || 'Save',\n                            icon     : options.submit_icon || 'fa-save',\n                            cls      : 'btn btn-primary ui-clear-float',\n                            onclick  : function() { self._submit( form ) }\n                        })\n                    }\n                });\n                self.$el.empty().append( form.$el );\n            }).fail( function( response ) {\n                self.$el.empty().append( new Ui.Message({\n                    message     : 'Failed to load resource ' + self.url + '.',\n                    status      : 'danger',\n                    persistent  : true\n                }).$el );\n            });\n        },\n\n        _submit: function( form ) {\n            var self = this;\n            $.ajax( {\n                url         : Galaxy.root + self.url,\n                data        : JSON.stringify( form.data.create() ),\n                type        : 'PUT',\n                contentType : 'application/json'\n            }).done( function( response ) {\n                var success_message = { message: response.message, status: 'success', persistent: false };\n                if ( self.redirect ) {\n                    window.location = Galaxy.root + self.redirect + '?' + $.param( success_message );\n                } else {\n                    form.data.matchModel( response, function ( input, input_id ) {\n                        form.field_list[ input_id ].value( input.value );\n                    });\n                    self._showMessage( form, success_message );\n                }\n            }).fail( function( response ) {\n                self._showMessage( form, { message: response.responseJSON.err_msg, status: 'danger', persistent: false } );\n            });\n        },\n\n        _showMessage: function( form, options ) {\n            var $panel = form.$el.parents().filter(function() {\n                return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n            }).first();\n            $panel.animate( { scrollTop : 0 }, 500 );\n            form.message.update( options );\n        }\n    });\n\n    return {\n        View  : View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-wrapper.js","define([ 'utils/utils', 'mvc/ui/ui-misc' ], function( Utils, Ui ) {\nvar View = Backbone.View.extend({\n    visible     : false,\n    initialize  : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model( {\n            id                  : Utils.uid(),\n            cls                 : 'ui-portlet',\n            title               : '',\n            icon                : '',\n            buttons             : null,\n            body                : null,\n            scrollable          : true,\n            nopadding           : false,\n            operations          : null,\n            collapsible         : false,\n            collapsible_button  : false,\n            collapsed           : false,\n            onchange_title      : null\n        } ).set( options );\n        this.setElement( this._template() );\n\n        // link all dom elements\n        this.$body          = this.$( '.portlet-body' );\n        this.$title_text    = this.$( '.portlet-title-text' );\n        this.$title_icon    = this.$( '.portlet-title-icon' );\n        this.$header        = this.$( '.portlet-header' );\n        this.$content       = this.$( '.portlet-content' );\n        this.$backdrop      = this.$( '.portlet-backdrop' );\n        this.$buttons       = this.$( '.portlet-buttons' );\n        this.$operations    = this.$( '.portlet-operations' );\n\n        // add body to component list\n        this.model.get( 'body' ) && this.append( this.model.get( 'body' ) );\n\n        // add icon for collapsible option\n        this.collapsible_button = new Ui.ButtonIcon({\n            icon    : 'fa-eye',\n            tooltip : 'Collapse/Expand',\n            cls     : 'ui-button-icon-plain',\n            onclick : function() { self[ self.collapsed ? 'expand' : 'collapse' ]() }\n        });\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el.removeClass().addClass( options.cls ).attr( 'id', options.id );\n        this.$header[ options.title ? 'show' : 'hide' ]();\n        this.$title_text.html( options.title );\n        _.each( [ this.$content, this.$body ], function( $el ) {\n            $el[ options.nopadding ? 'addClass' : 'removeClass' ]( 'no-padding' );\n        });\n\n        // render title icon\n        if ( options.icon ) {\n            this.$title_icon.removeClass().addClass( 'portlet-title-icon fa' ).addClass( options.icon ).show();\n        } else {\n            this.$title_icon.hide();\n        }\n\n        // make portlet collapsible\n        this.$title_text[ options.collapsible ? 'addClass' : 'removeClass' ]( 'no-highlight collapsible' ).off();\n        if ( options.collapsible ) {\n            this.$title_text.on( 'click', function() { self[ self.collapsed ? 'expand' : 'collapse' ]() } );\n            options.collapsed ? this.collapse() : this.expand();\n        }\n\n        // allow title editing\n        this.$title_text.prop( 'disabled', !options.onchange_title );\n        options.onchange_title && this.$title_text.make_text_editable({\n            on_finish: function( new_title ) {\n                options.onchange_title( new_title );\n            }\n        });\n\n        // render buttons\n        if ( options.buttons ) {\n            this.$buttons.empty().show();\n            $.each( this.model.get( 'buttons' ), function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$buttons.append( item.$el );\n            });\n        } else {\n            this.$buttons.hide();\n        }\n\n        // render operations\n        this.$operations.empty;\n        if ( options.collapsible_button ) {\n            this.$operations.append( this.collapsible_button.$el );\n        }\n        if ( options.operations ) {\n            $.each( options.operations, function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$operations.append( item.$el );\n            });\n        }\n        return this;\n    },\n\n    /** Append new doms to body */\n    append: function( $el ) {\n        this.$body.append( $el );\n    },\n\n    /** Remove all content */\n    empty: function() {\n        this.$body.empty();\n    },\n\n    /** Return header element */\n    header: function() {\n        return this.$header;\n    },\n\n    /** Return body element */\n    body: function() {\n        return this.$body;\n    },\n\n    /** Show portlet */\n    show: function(){\n        this.visible = true;\n        this.$el.fadeIn( 'fast' );\n    },\n\n    /** Hide portlet */\n    hide: function(){\n        this.visible = false;\n        this.$el.hide();\n    },\n\n    /** Enable a particular button */\n    enableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', false );\n    },\n\n    /** Disable a particular button */\n    disableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', true );\n    },\n\n    /** Hide a particular operation */\n    hideOperation: function( id ) {\n        this.$operations.find( '#' + id ).hide();\n    },\n\n    /** Show a particular operation */\n    showOperation: function( id ) {\n        this.$operations.find( '#' + id ).show();\n    },\n\n    /** Replaces the event callback of an existing operation */\n    setOperation: function( id, callback ) {\n        this.$operations.find( '#' + id ).off( 'click' ).on( 'click', callback );\n    },\n\n    /** Change title */\n    title: function( new_title ) {\n        new_title && this.$title_text.html( new_title );\n        return this.$title_text.html();\n    },\n\n    /** Collapse portlet */\n    collapse: function() {\n        this.collapsed = true;\n        this.$content.height( '0%' );\n        this.$body.hide();\n        this.collapsible_button.setIcon( 'fa-eye-slash' );\n    },\n\n    /** Expand portlet */\n    expand: function() {\n        this.collapsed = false;\n        this.$content.height( '100%' );\n        this.$body.fadeIn( 'fast' );\n        this.collapsible_button.setIcon( 'fa-eye' );\n    },\n\n    /** Disable content access */\n    disable: function() {\n        this.$backdrop.show();\n    },\n\n    /** Enable content access */\n    enable: function() {\n        this.$backdrop.hide();\n    },\n\n    _template: function() {\n        return $( '<div/>' ).append( $( '<div/>' ).addClass( 'portlet-header' )\n                                .append( $( '<div/>' ).addClass( 'portlet-operations' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-title' )\n                                    .append( $( '<i/>' ).addClass( 'portlet-title-icon' ) )\n                                    .append( $( '<span/>' ).addClass( 'portlet-title-text' ) ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-content' )\n                                .append( $( '<div/>' ).addClass( 'portlet-body' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-buttons' ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-backdrop' ) );\n    }\n});\nreturn {\n    View : View\n}\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-portlet.js","/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc', 'mvc/form/form-section', 'mvc/form/form-data' ],\nfunction( Utils, Portlet, Ui, FormSection, FormData ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = new Backbone.Model({\n                initial_errors  : false,\n                cls             : 'ui-portlet-limited',\n                icon            : null,\n                always_refresh  : true,\n                status          : 'warning',\n                onchange        : function(){}\n            }).set( options );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        /** Update available options */\n        update: function( new_model ){\n            var self = this;\n            this.data.matchModel( new_model, function( node, input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( input && input.options ) {\n                    if ( !_.isEqual( input.options, node.options ) ) {\n                        input.options = node.options;\n                        var field = self.field_list[ input_id ];\n                        if ( field.update ) {\n                            var new_options = [];\n                            if ( ( [ 'data', 'data_collection', 'drill_down' ] ).indexOf( input.type ) != -1 ) {\n                                new_options = input.options;\n                            } else {\n                                for ( var i in node.options ) {\n                                    var opt = node.options[ i ];\n                                    if ( opt.length > 2 ) {\n                                        new_options.push( { label: opt[ 0 ], value: opt[ 1 ] } );\n                                    }\n                                }\n                            }\n                            field.update( new_options );\n                            field.trigger( 'change' );\n                            Galaxy.emit.debug( 'form-view::update()', 'Updating options for ' + input_id );\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function( active ) {\n            for ( var i in this.input_list ) {\n                var field = this.field_list[ i ];\n                var input = this.input_list[ i ];\n                if ( input.is_dynamic && field.wait && field.unwait ) {\n                    field[ active ? 'wait' : 'unwait' ]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function ( input_id, message, silent ) {\n            var input_element = this.element_list[ input_id ];\n            if ( input_element ) {\n                input_element.error( message || 'Please verify this parameter.' );\n                this.portlet.expand();\n                this.trigger( 'expand', input_id );\n                if ( !silent ) {\n                    var $panel = this.$el.parents().filter(function() {\n                        return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n                    }).first();\n                    $panel.animate( { scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500 );\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function( options ) {\n            this.trigger( 'reset' );\n            if ( options && options.errors ) {\n                var error_messages = this.data.matchResponse( options.errors );\n                for ( var input_id in this.element_list ) {\n                    var input = this.element_list[ input_id ];\n                    if ( error_messages[ input_id ] ) {\n                        this.highlight( input_id, error_messages[ input_id ], true );\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function() {\n            var self = this;\n            this.off('change');\n            this.off('reset');\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager( this );\n            this._renderForm();\n            this.data.create();\n            this.model.get( 'initial_errors' ) && this.errors( this.model.attributes );\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on( 'change', function( input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( !input || input.refresh_on_change || self.model.get( 'always_refresh' ) ) {\n                    var new_check = self.data.checksum();\n                    if ( new_check != current_check ) {\n                        current_check = new_check;\n                        self.model.get( 'onchange' )();\n                    }\n                }\n            });\n            this.on('reset', function() {\n                _.each( self.element_list, function( input_element ) { input_element.reset() } );\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function() {\n            $( '.tooltip' ).remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View( this, { inputs: options.inputs } );\n            this.portlet = new Portlet.View({\n                icon            : options.icon,\n                title           : options.title,\n                cls             : options.cls,\n                operations      : options.operations,\n                buttons         : options.buttons,\n                collapsible     : options.collapsible,\n                collapsed       : options.collapsed,\n                onchange_title  : options.onchange_title\n            });\n            this.portlet.append( this.message.$el );\n            this.portlet.append( this.section.$el );\n            this.$el.empty();\n            options.inputs && this.$el.append( this.portlet.$el );\n            options.message && this.message.update( { persistent: true, status: options.status, message: options.message } );\n            Galaxy.emit.debug( 'form-view::initialize()', 'Completed' );\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-view.js"],"sourceRoot":""}