{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js?fd98*","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js?0568*","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js?4ced*","webpack:///./galaxy/scripts/mvc/form/form-view.js?db3b*","webpack:///./galaxy/scripts/mvc/grid/grid-view.js?be4f*","webpack:///./galaxy/scripts/mvc/ui/ui-list.js?ecf1*","webpack:///./galaxy/scripts/mvc/ui/ui-options.js?405a*","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js?402d*","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js?a948*","webpack:///./galaxy/scripts/mvc/form/form-data.js?6144*","webpack:///./galaxy/scripts/mvc/ui/ui-table.js?4ded*","webpack:///./galaxy/scripts/mvc/form/form-input.js?af7f*","webpack:///./galaxy/scripts/mvc/form/form-parameters.js?0ee1*","webpack:///./galaxy/scripts/mvc/form/form-repeat.js?7c22*","webpack:///./galaxy/scripts/mvc/form/form-section.js?2ccb*","webpack:///./galaxy/scripts/mvc/grid/grid-model.js?e551*","webpack:///./galaxy/scripts/mvc/grid/grid-template.js?73e1*","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js?fa1d*","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js?de06*","webpack:///./galaxy/scripts/mvc/ui/ui-select-content.js?e092*","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js?cf41*","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js?fd76*","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js?93a7*","webpack:///./galaxy/scripts/layout/router.js?1c11","webpack:///./galaxy/scripts/mvc/form/form-wrapper.js?ceac","webpack:///./galaxy/scripts/apps/panels/admin-panel.js"],"names":["webpackJsonp","module","exports","__webpack_require__","_","jQuery","$","GalaxyApp","AdminPanel","FormWrapper","GridView","QueryStringParsing","Router","Page","window","app","options","bootstrapped","Galaxy","debug","AdminRouter","extend","routes","(/)admin(/)users","(/)admin(/)forms(/)(:form_id)","authenticate","args","name","user","id","get","show_users","this","page","display","url_base","root","url_data","params","dict_format","show_forms","form_id","title","url","icon","submit_title","redirect","View","config","active_view","Left","call","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Backbone","Utils","Select","Slider","Options","Drilldown","Buttons","Modal","Label","tagName","initialize","model","Model","setElement","listenTo","render","new_title","set","value","$el","removeClass","addClass","html","Message","message","status","cls","persistent","fade","update","messageForDisplay","timeout","clearTimeout","self","setTimeout","fadeOut","escape","UnescapedMessage","Input","type","placeholder","disabled","readonly","visible","area","color","style","events","input","new_val","undefined","attr","css","datalist","isArray","length","autocomplete","source","request","response","change","_onchange","val","each","attr_name","removeAttr","Hidden","append","$info","$hidden","show","text","hide","Upload","$file","$text","$wait","on","e","_readFile","file","target","files","reader","FileReader","onload","wait","result","readAsText","Button","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","ButtonLink","RadioButton","Checkbox","Radio","apply","Ui","uid","buttons","body","scrollable","nopadding","operations","collapsible","collapsible_button","collapsed","onchange_title","_template","$body","$title_text","$title_icon","$header","$content","$backdrop","$buttons","$operations","tooltip","onclick","attributes","off","collapse","expand","prop","make_text_editable","on_finish","empty","item","header","fadeIn","enableButton","find","disableButton","hideOperation","showOperation","setOperation","callback","height","setIcon","disable","enable","floating","wait_text","wait_cls","percentage","$icon","$title","$progress","$progress_bar","placement","width","unwait","href","icons","onchange","total","$button","$menu","pull","onunload","tag","collection","Collection","$root","float","where","preventDefault","remove","submodel","suboptions","$link","divider","addMenu","add","merge","Portlet","FormSection","FormData","initial_errors","always_refresh","message_status","new_model","data","matchModel","node","input_id","input_list","isEqual","field","field_list","new_options","indexOf","i","opt","push","label","trigger","emit","active","is_dynamic","highlight","silent","input_element","element_list","error","portlet","$panel","parents","filter","first","animate","scrollTop","offset","top","errors","error_messages","matchResponse","Manager","_renderForm","create","current_check","checksum","refresh_on_change","new_check","reset","section","inputs","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","add_tag_to_grid_filter","tag_name","tag_value","advanced_search","is","slideToggle","add_filter_condition","items","filters","v","k","ajax","param","success","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","currHistoryPanel","loadCurrentHistory","replace","footer","use_hide_message","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","rating","set_page","execute","items_length","index","button","popup","operation","_add_operation","settings","operation_config","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","add_filter","t","filter_element","container","go_page_one","remove_filter","col_key","cur_sort","new_sort","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","number_of_checked_ids","findWhere","item_ids","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","$div","closest","load","method","alert","response_text","insert","json","parseJSON","complete","multiple","optional","v_id","v_name","_refresh","lst","isEmpty","_templateRow","Base","error_text","_changeValue","_changeWait","_changeData","_changeVisible","$message","$options","all_button","_getValue","_templateOptions","option","_templateOption","_messageShow","_setValue","values","selected","BaseIcons","pair","prototype","data2","empty_text","searchable","selectall","pagesize","_changeDisabled","_renderSearchable","_renderClassic","$select","$dropdown","$resize","$resize_icon","event","currentY","pageY","currentHeight","minHeight","Math","max","select2","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","slice","more","formatResult","reduce","memo","exists","d","sorter","keep","sort","setOnChange","a","b","menu","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","li","join","map","checked","menuWidth","x","pageX","min","document","scrollLeft","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","toString","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","sum","JSON","stringify","flat_id","input_value","flat_dict","result_dict","convert","identifier","head","section_label","block_indices","block_prefix","block_label","pos","substr","test_param","selectedCase","matchCase","flat","ignore","collapsible_value","payload","p_id","dict","_iterate","match","visitInputs","search","new_id","separator","Array","child","hasClass","truevalue","falsevalue","cases","prefix","context","key","cache","j","content","ondblclick","onconfirm","selectable","cls_tr","$thead","$tbody","$tmessage","row","_row","row_count","dblclick","addHeader","appendHeader","align","wrapper","_commit","del","delAll","before","after","size","_onclick","old_value","_ondblclick","app_options","text_enable","text_disable","cls_enable","cls_disable","$field","$preview","$collapsible","$collapsible_text","$collapsible_icon","$error_text","$error","backdrop","help_text","help_argument","collapsible_state","SelectContent","SelectLibrary","SelectFtp","ColorPicker","types","password","data_column","genomebuild","data_collection","integer","boolean","drill_down","hidden","hidden_data","baseurl","library_data","ftpfile","upload","input_def","fieldClass","_fieldSelect","_fieldText","_fieldData","extensions","flavor","is_workflow","SelectClass","_fieldDrilldown","str_value","_fieldSlider","precise","_fieldHidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldUpload","list","button_new","onnew","$list","button_delete","ondel","hideOptions","Repeat","InputElement","Parameters","parameters","_addConditional","_addRepeat","_addSection","_addRow","case_def","section_row","nonhidden","sub_section","_append","sub_section_id","block_index","repeat","n_cache","default","help","expanded","hide_label","text_value","collapsible_preview","argument","fixed","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","cur_val","condition","condition_index","pairs","get_url","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_range","max_page","max_offset","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","colors","standard","base","theme","$view","$value","_build","$boxes","_templateCheck","hex","rgb","_content","line_def","_templateContent","$line","$box","_templateBox","bottom","header_index","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","Batch","DISABLED","ENABLED","LINKED","Configurations","src","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","src_labels","hda","hdca","pagelimit","statustimer","button_product","$batch_div","$batch","linked","clone","enabled","lastenter","_handleDrop","history","_changeCurrent","_changeType","current","id_list","fields","_batch","details","hid","$batchfield","batchmode","button_type","config_id","textify","button_data","button_width","margin-left","select_options","ev","drop_data","parse","originalEvent","dataTransfer","getData","new_src","history_content_type","current_value","_handleDropStatus","map_over_type","List","ftpfile_list","Table","Libraries","LibraryDatasets","library_id","fetch","libraries","datasets","library_select","dataset_list","library_current","step","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","QUERY_STRING","__identifer","random","isEmptyObject","navigate","queryObj","pop","access_denied","Form","done","form","submit_tooltip","submit_icon","_submit","fail","contentType","success_message","responseJSON","err_msg","_l","categories","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","allow_user_impersonation","enable_quotas","category","$section","_templateSection","$entries","router"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([4],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    GalaxyApp = __webpack_require__(49).GalaxyApp,\n\t    AdminPanel = __webpack_require__(100),\n\t    FormWrapper = __webpack_require__(59),\n\t    GridView = __webpack_require__(12),\n\t    Ui = __webpack_require__(5),\n\t    QueryStringParsing = __webpack_require__(42),\n\t    Router = __webpack_require__(52),\n\t    Page = __webpack_require__(50);\n\t\n\twindow.app = function app(options, bootstrapped) {\n\t    window.Galaxy = new GalaxyApp(options, bootstrapped);\n\t    Galaxy.debug('admin app');\n\t\n\t    /** Routes */\n\t    var AdminRouter = Router.extend({\n\t        routes: {\n\t            '(/)admin(/)users': 'show_users',\n\t            '(/)admin(/)forms(/)(:form_id)': 'show_forms'\n\t        },\n\t\n\t        authenticate: function (args, name) {\n\t            return Galaxy.user && Galaxy.user.id && Galaxy.user.get('is_admin');\n\t        },\n\t\n\t        show_users: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_forms: function (form_id) {\n\t            var options = {\n\t                title: 'Reset passwords',\n\t                url: 'admin/reset_user_password?id=' + QueryStringParsing.get('id'),\n\t                icon: 'fa-user',\n\t                submit_title: 'Save new password',\n\t                redirect: Galaxy.root + 'admin/users'\n\t            };\n\t            this.page.display(new FormWrapper.View(options));\n\t        }\n\t    });\n\t\n\t    $(function () {\n\t        _.extend(options.config, { active_view: 'admin' });\n\t        Galaxy.page = new Page.View(_.extend(options, {\n\t            Left: AdminPanel,\n\t            Router: AdminRouter\n\t        }));\n\t    });\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(15), __webpack_require__(39), __webpack_require__(14), __webpack_require__(35), __webpack_require__(10), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n\t\n\t    /** Label wrapper */\n\t    var Label = Backbone.View.extend({\n\t        tagName: 'label',\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.tagName = options.tagName || this.tagName;\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        title: function (new_title) {\n\t            this.model.set('title', new_title);\n\t        },\n\t        value: function () {\n\t            return this.model.get('title');\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-label').addClass(this.model.get('cls')).html(this.model.get('title'));\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Displays messages used e.g. in the tool form */\n\t    var Message = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                message: null,\n\t                status: 'info',\n\t                cls: '',\n\t                persistent: false,\n\t                fade: true\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        update: function (options) {\n\t            this.model.set(options);\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-message').addClass(this.model.get('cls'));\n\t            var status = this.model.get('status');\n\t            if (this.model.get('large')) {\n\t                this.$el.addClass((status == 'success' && 'done' || status == 'danger' && 'error' || status) + 'messagelarge');\n\t            } else {\n\t                this.$el.addClass('alert').addClass('alert-' + status);\n\t            }\n\t            if (this.model.get('message')) {\n\t                this.$el.html(this.messageForDisplay());\n\t                this.$el[this.model.get('fade') ? 'fadeIn' : 'show']();\n\t                this.timeout && window.clearTimeout(this.timeout);\n\t                if (!this.model.get('persistent')) {\n\t                    var self = this;\n\t                    this.timeout = window.setTimeout(function () {\n\t                        self.model.set('message', '');\n\t                    }, 3000);\n\t                }\n\t            } else {\n\t                this.$el.fadeOut();\n\t            }\n\t            return this;\n\t        },\n\t        messageForDisplay: function () {\n\t            return _.escape(this.model.get('message'));\n\t        }\n\t    });\n\t\n\t    var UnescapedMessage = Message.extend({\n\t        messageForDisplay: function () {\n\t            return this.model.get('message');\n\t        }\n\t    });\n\t\n\t    /** Renders an input element used e.g. in the tool form */\n\t    var Input = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                type: 'text',\n\t                placeholder: '',\n\t                disabled: false,\n\t                readonly: false,\n\t                visible: true,\n\t                cls: '',\n\t                area: false,\n\t                color: null,\n\t                style: null\n\t            }).set(options);\n\t            this.tagName = this.model.get('area') ? 'textarea' : 'input';\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        events: {\n\t            'input': '_onchange'\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', typeof new_val === 'string' ? new_val : '');\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.removeClass().addClass('ui-' + this.tagName).addClass(this.model.get('cls')).addClass(this.model.get('style')).attr('id', this.model.id).attr('type', this.model.get('type')).attr('placeholder', this.model.get('placeholder')).css('color', this.model.get('color') || '').css('border-color', this.model.get('color') || '');\n\t            var datalist = this.model.get('datalist');\n\t            if ($.isArray(datalist) && datalist.length > 0) {\n\t                this.$el.autocomplete({ source: function (request, response) {\n\t                        response(self.model.get('datalist'));\n\t                    },\n\t                    change: function () {\n\t                        self._onchange();\n\t                    } });\n\t            }\n\t            if (this.model.get('value') !== this.$el.val()) {\n\t                this.$el.val(this.model.get('value'));\n\t            }\n\t            _.each(['readonly', 'disabled'], function (attr_name) {\n\t                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n\t            });\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            return this;\n\t        },\n\t        _onchange: function () {\n\t            this.value(this.$el.val());\n\t            this.model.get('onchange') && this.model.get('onchange')(this.model.get('value'));\n\t        }\n\t    });\n\t\n\t    /** Creates a hidden element input field used e.g. in the tool form */\n\t    var Hidden = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$hidden = $('<div/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.$hidden.val(this.model.get('value'));\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Creates a upload element input field */\n\t    var Upload = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$file = $('<input/>').attr('type', 'file').addClass('ui-margin-bottom')).append(this.$text = $('<textarea/>').addClass('ui-textarea').attr('disabled', true)).append(this.$wait = $('<i/>').addClass('fa fa-spinner fa-spin')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.$file.on('change', function (e) {\n\t                self._readFile(e);\n\t            });\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            this.model.get('value') ? this.$text.text(this.model.get('value')).show() : this.$text.hide();\n\t            this.model.get('wait') ? this.$wait.show() : this.$wait.hide();\n\t            return this;\n\t        },\n\t        _readFile: function (e) {\n\t            var self = this;\n\t            var file = e.target.files && e.target.files[0];\n\t            if (file) {\n\t                var reader = new FileReader();\n\t                reader.onload = function () {\n\t                    self.model.set({ wait: false, value: this.result });\n\t                };\n\t                this.model.set({ wait: true, value: null });\n\t                reader.readAsText(file);\n\t            }\n\t        }\n\t    });\n\t\n\t    return {\n\t        Button: Buttons.ButtonDefault,\n\t        ButtonIcon: Buttons.ButtonIcon,\n\t        ButtonCheck: Buttons.ButtonCheck,\n\t        ButtonMenu: Buttons.ButtonMenu,\n\t        ButtonLink: Buttons.ButtonLink,\n\t        Input: Input,\n\t        Label: Label,\n\t        Message: Message,\n\t        UnescapedMessage: UnescapedMessage,\n\t        Upload: Upload,\n\t        Modal: Modal,\n\t        RadioButton: Options.RadioButton,\n\t        Checkbox: Options.Checkbox,\n\t        Radio: Options.Radio,\n\t        Select: Select,\n\t        Hidden: Hidden,\n\t        Slider: Slider,\n\t        Drilldown: Drilldown\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui) {\n\t    var View = Backbone.View.extend({\n\t        visible: false,\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                cls: 'ui-portlet',\n\t                title: '',\n\t                icon: '',\n\t                buttons: null,\n\t                body: null,\n\t                scrollable: true,\n\t                nopadding: false,\n\t                operations: null,\n\t                collapsible: false,\n\t                collapsible_button: false,\n\t                collapsed: false,\n\t                onchange_title: null\n\t            }).set(options);\n\t            this.setElement(this._template());\n\t\n\t            // link all dom elements\n\t            this.$body = this.$('.portlet-body');\n\t            this.$title_text = this.$('.portlet-title-text');\n\t            this.$title_icon = this.$('.portlet-title-icon');\n\t            this.$header = this.$('.portlet-header');\n\t            this.$content = this.$('.portlet-content');\n\t            this.$backdrop = this.$('.portlet-backdrop');\n\t            this.$buttons = this.$('.portlet-buttons');\n\t            this.$operations = this.$('.portlet-operations');\n\t\n\t            // add body to component list\n\t            this.model.get('body') && this.append(this.model.get('body'));\n\t\n\t            // add icon for collapsible option\n\t            this.collapsible_button = new Ui.ButtonIcon({\n\t                icon: 'fa-eye',\n\t                tooltip: 'Collapse/Expand',\n\t                cls: 'ui-button-icon-plain',\n\t                onclick: function () {\n\t                    self[self.collapsed ? 'expand' : 'collapse']();\n\t                }\n\t            });\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).attr('id', options.id);\n\t            this.$header[options.title ? 'show' : 'hide']();\n\t            this.$title_text.html(options.title);\n\t            _.each([this.$content, this.$body], function ($el) {\n\t                $el[options.nopadding ? 'addClass' : 'removeClass']('no-padding');\n\t            });\n\t\n\t            // render title icon\n\t            if (options.icon) {\n\t                this.$title_icon.removeClass().addClass('portlet-title-icon fa').addClass(options.icon).show();\n\t            } else {\n\t                this.$title_icon.hide();\n\t            }\n\t\n\t            // make portlet collapsible\n\t            this.$title_text[options.collapsible ? 'addClass' : 'removeClass']('no-highlight collapsible').off();\n\t            if (options.collapsible) {\n\t                this.$title_text.on('click', function () {\n\t                    self[self.collapsed ? 'expand' : 'collapse']();\n\t                });\n\t                options.collapsed ? this.collapse() : this.expand();\n\t            }\n\t\n\t            // allow title editing\n\t            this.$title_text.prop('disabled', !options.onchange_title);\n\t            options.onchange_title && this.$title_text.make_text_editable({\n\t                on_finish: function (new_title) {\n\t                    options.onchange_title(new_title);\n\t                }\n\t            });\n\t\n\t            // render buttons\n\t            if (options.buttons) {\n\t                this.$buttons.empty().show();\n\t                $.each(this.model.get('buttons'), function (name, item) {\n\t                    item.$el.prop('id', name);\n\t                    self.$buttons.append(item.$el);\n\t                });\n\t            } else {\n\t                this.$buttons.hide();\n\t            }\n\t\n\t            // render operations\n\t            this.$operations.empty;\n\t            if (options.collapsible_button) {\n\t                this.$operations.append(this.collapsible_button.$el);\n\t            }\n\t            if (options.operations) {\n\t                $.each(options.operations, function (name, item) {\n\t                    item.$el.prop('id', name);\n\t                    self.$operations.append(item.$el);\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t\n\t        /** Append new doms to body */\n\t        append: function ($el) {\n\t            this.$body.append($el);\n\t        },\n\t\n\t        /** Remove all content */\n\t        empty: function () {\n\t            this.$body.empty();\n\t        },\n\t\n\t        /** Return header element */\n\t        header: function () {\n\t            return this.$header;\n\t        },\n\t\n\t        /** Return body element */\n\t        body: function () {\n\t            return this.$body;\n\t        },\n\t\n\t        /** Show portlet */\n\t        show: function () {\n\t            this.visible = true;\n\t            this.$el.fadeIn('fast');\n\t        },\n\t\n\t        /** Hide portlet */\n\t        hide: function () {\n\t            this.visible = false;\n\t            this.$el.hide();\n\t        },\n\t\n\t        /** Enable a particular button */\n\t        enableButton: function (id) {\n\t            this.$buttons.find('#' + id).prop('disabled', false);\n\t        },\n\t\n\t        /** Disable a particular button */\n\t        disableButton: function (id) {\n\t            this.$buttons.find('#' + id).prop('disabled', true);\n\t        },\n\t\n\t        /** Hide a particular operation */\n\t        hideOperation: function (id) {\n\t            this.$operations.find('#' + id).hide();\n\t        },\n\t\n\t        /** Show a particular operation */\n\t        showOperation: function (id) {\n\t            this.$operations.find('#' + id).show();\n\t        },\n\t\n\t        /** Replaces the event callback of an existing operation */\n\t        setOperation: function (id, callback) {\n\t            this.$operations.find('#' + id).off('click').on('click', callback);\n\t        },\n\t\n\t        /** Change title */\n\t        title: function (new_title) {\n\t            new_title && this.$title_text.html(new_title);\n\t            return this.$title_text.html();\n\t        },\n\t\n\t        /** Collapse portlet */\n\t        collapse: function () {\n\t            this.collapsed = true;\n\t            this.$content.height('0%');\n\t            this.$body.hide();\n\t            this.collapsible_button.setIcon('fa-eye-slash');\n\t        },\n\t\n\t        /** Expand portlet */\n\t        expand: function () {\n\t            this.collapsed = false;\n\t            this.$content.height('100%');\n\t            this.$body.fadeIn('fast');\n\t            this.collapsible_button.setIcon('fa-eye');\n\t        },\n\t\n\t        /** Disable content access */\n\t        disable: function () {\n\t            this.$backdrop.show();\n\t        },\n\t\n\t        /** Enable content access */\n\t        enable: function () {\n\t            this.$backdrop.hide();\n\t        },\n\t\n\t        _template: function () {\n\t            return $('<div/>').append($('<div/>').addClass('portlet-header').append($('<div/>').addClass('portlet-operations')).append($('<div/>').addClass('portlet-title').append($('<i/>').addClass('portlet-title-icon')).append($('<span/>').addClass('portlet-title-text')))).append($('<div/>').addClass('portlet-content').append($('<div/>').addClass('portlet-body')).append($('<div/>').addClass('portlet-buttons'))).append($('<div/>').addClass('portlet-backdrop'));\n\t        }\n\t    });\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This module contains all button views. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n\t    var ButtonDefault = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                floating: 'right',\n\t                icon: '',\n\t                cls: 'btn btn-default',\n\t                wait: false,\n\t                wait_text: 'Sending...',\n\t                wait_cls: 'btn btn-info',\n\t                disabled: false,\n\t                percentage: -1\n\t            }).set(options);\n\t            this.setElement($('<button/>').attr('type', 'button').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>')).append(this.$progress = $('<div/>').append(this.$progress_bar = $('<div/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('ui-button-default').addClass(options.disabled && 'disabled').attr('id', options.id).attr('disabled', options.disabled).css('float', options.floating).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                options.onclick && !self.disabled && options.onclick();\n\t            }).tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$progress.addClass('progress').css('display', options.percentage !== -1 ? 'block' : 'none');\n\t            this.$progress_bar.addClass('progress-bar').css({ width: options.percentage + '%' });\n\t            this.$icon.removeClass().addClass('icon fa');\n\t            this.$title.removeClass().addClass('title');\n\t            if (options.wait) {\n\t                this.$el.addClass(options.wait_cls).prop('disabled', true);\n\t                this.$icon.addClass('fa-spinner fa-spin ui-margin-right');\n\t                this.$title.html(options.wait_text);\n\t            } else {\n\t                this.$el.addClass(options.cls);\n\t                this.$icon.addClass(options.icon);\n\t                this.$title.html(options.title);\n\t                options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            }\n\t        },\n\t\n\t        /** Show button */\n\t        show: function () {\n\t            this.$el.show();\n\t        },\n\t\n\t        /** Hide button */\n\t        hide: function () {\n\t            this.$el.hide();\n\t        },\n\t\n\t        /** Disable button */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Enable button */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Show spinner to indicate that the button is not ready to be clicked */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner to indicate that the button is ready to be clicked */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Change icon */\n\t        setIcon: function (icon) {\n\t            this.model.set('icon', icon);\n\t        }\n\t    });\n\t\n\t    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n\t    var ButtonLink = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: ''\n\t            }).set(options);\n\t            this.setElement($('<a/>').append(this.$icon = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).attr({ id: options.id,\n\t                href: options.href || 'javascript:void(0)',\n\t                title: options.title,\n\t                target: options.target || '_top',\n\t                disabled: options.disabled }).tooltip({ placement: 'bottom' }).off('click').on('click', function () {\n\t                options.onclick && !options.disabled && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass(options.icon);\n\t        }\n\t    });\n\t\n\t    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n\t    var ButtonCheck = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: 'Select/Unselect all',\n\t                icons: ['fa-square-o', 'fa-minus-square-o', 'fa-check-square-o'],\n\t                value: 0,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$icon = $('<span/>')).append(this.$title = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.addClass('ui-button-check').off('click').on('click', function () {\n\t                self.model.set('value', self.model.get('value') === 0 && 2 || 0);\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$title.html(options.title);\n\t            this.$icon.removeClass().addClass('icon fa ui-margin-right').addClass(options.icons[options.value]);\n\t        },\n\t\n\t        /* Sets a new value and/or returns the value.\n\t        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n\t        * OR:\n\t        * @param{Integer}   new_val - Number of selected options.\n\t        * @param{Integer}   total   - Total number of available options.\n\t        */\n\t        value: function (new_val, total) {\n\t            if (new_val !== undefined) {\n\t                if (total && new_val !== 0) {\n\t                    new_val = new_val !== total && 1 || 2;\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.get('onchange')(this.model.get('value'));\n\t            }\n\t            return this.model.get('value');\n\t        }\n\t    });\n\t\n\t    /** This renders a differently styled, more compact button version. */\n\t    var ButtonIcon = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                floating: 'right',\n\t                icon: '',\n\t                cls: 'ui-button-icon',\n\t                disabled: false\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$button = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && 'disabled').attr('disabled', options.disabled).attr('id', options.id).css('float', options.floating).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                !options.disabled && options.onclick && options.onclick();\n\t            });\n\t            this.$button.addClass('button').tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t        }\n\t    });\n\t\n\t    /** This class creates a button with dropdown menu. */\n\t    var ButtonMenu = ButtonDefault.extend({\n\t        $menu: null,\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: '',\n\t                title: '',\n\t                floating: 'right',\n\t                pull: 'right',\n\t                icon: null,\n\t                onclick: null,\n\t                cls: 'ui-button-icon ui-button-menu',\n\t                tooltip: '',\n\t                target: '',\n\t                href: '',\n\t                onunload: null,\n\t                visible: true,\n\t                tag: ''\n\t            }).set(options);\n\t            this.collection = new Backbone.Collection();\n\t            this.setElement($('<div/>').append(this.$root = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.listenTo(this.collection, 'change add remove reset', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('dropdown').addClass(options.cls).attr('id', options.id).css({ float: options.floating,\n\t                display: options.visible && this.collection.where({ visible: true }).length > 0 ? 'block' : 'none' });\n\t            this.$root.addClass('root button dropdown-toggle').attr('data-toggle', 'dropdown').tooltip({ title: options.tooltip, placement: 'bottom' }).off('click').on('click', function (e) {\n\t                $('.tooltip').hide();\n\t                e.preventDefault();\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.removeClass().addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            this.$menu && this.$menu.remove();\n\t            if (this.collection.length > 0) {\n\t                this.$menu = $('<ul/>').addClass('menu dropdown-menu').addClass('pull-' + self.model.get('pull')).attr('role', 'menu');\n\t                this.$el.append(this.$menu);\n\t            }\n\t            this.collection.each(function (submodel) {\n\t                var suboptions = submodel.attributes;\n\t                if (suboptions.visible) {\n\t                    var $link = $('<a/>').addClass('dropdown-item').attr({ href: suboptions.href, target: suboptions.target }).append($('<i/>').addClass('fa').addClass(suboptions.icon).css('display', suboptions.icon ? 'inline-block' : 'none')).append(suboptions.title).on('click', function (e) {\n\t                        if (suboptions.onclick) {\n\t                            e.preventDefault();\n\t                            suboptions.onclick();\n\t                        }\n\t                    });\n\t                    self.$menu.append($('<li/>').append($link));\n\t                    suboptions.divider && self.$menu.append($('<li/>').addClass('divider'));\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Add a new menu item */\n\t        addMenu: function (options) {\n\t            this.collection.add(Utils.merge(options, {\n\t                title: '',\n\t                target: '',\n\t                href: '',\n\t                onclick: null,\n\t                divider: false,\n\t                visible: true,\n\t                icon: null,\n\t                cls: 'button-menu btn-group'\n\t            }));\n\t        }\n\t    });\n\t\n\t    return {\n\t        ButtonDefault: ButtonDefault,\n\t        ButtonLink: ButtonLink,\n\t        ButtonIcon: ButtonIcon,\n\t        ButtonCheck: ButtonCheck,\n\t        ButtonMenu: ButtonMenu\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5), __webpack_require__(31), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui, FormSection, FormData) {\n\t    return Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = new Backbone.Model({\n\t                initial_errors: false,\n\t                cls: 'ui-portlet-limited',\n\t                icon: null,\n\t                always_refresh: true,\n\t                message_status: 'warning'\n\t            }).set(options);\n\t            this.setElement('<div/>');\n\t            this.render();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (new_model) {\n\t            var self = this;\n\t            this.data.matchModel(new_model, function (node, input_id) {\n\t                var input = self.input_list[input_id];\n\t                if (input && input.options) {\n\t                    if (!_.isEqual(input.options, node.options)) {\n\t                        input.options = node.options;\n\t                        var field = self.field_list[input_id];\n\t                        if (field.update) {\n\t                            var new_options = [];\n\t                            if (['data', 'data_collection', 'drill_down'].indexOf(input.type) != -1) {\n\t                                new_options = input.options;\n\t                            } else {\n\t                                for (var i in node.options) {\n\t                                    var opt = node.options[i];\n\t                                    if (opt.length > 2) {\n\t                                        new_options.push({ label: opt[0], value: opt[1] });\n\t                                    }\n\t                                }\n\t                            }\n\t                            field.update(new_options);\n\t                            field.trigger('change');\n\t                            Galaxy.emit.debug('form-view::update()', 'Updating options for ' + input_id);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Set form into wait mode */\n\t        wait: function (active) {\n\t            for (var i in this.input_list) {\n\t                var field = this.field_list[i];\n\t                var input = this.input_list[i];\n\t                if (input.is_dynamic && field.wait && field.unwait) {\n\t                    field[active ? 'wait' : 'unwait']();\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlight and scroll to input element (currently only used for error notifications) */\n\t        highlight: function (input_id, message, silent) {\n\t            var input_element = this.element_list[input_id];\n\t            if (input_element) {\n\t                input_element.error(message || 'Please verify this parameter.');\n\t                this.portlet.expand();\n\t                this.trigger('expand', input_id);\n\t                if (!silent) {\n\t                    var $panel = this.$el.parents().filter(function () {\n\t                        return ['auto', 'scroll'].indexOf($(this).css('overflow')) != -1;\n\t                    }).first();\n\t                    $panel.animate({ scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500);\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlights errors */\n\t        errors: function (options) {\n\t            this.trigger('reset');\n\t            if (options && options.errors) {\n\t                var error_messages = this.data.matchResponse(options.errors);\n\t                for (var input_id in this.element_list) {\n\t                    var input = this.element_list[input_id];\n\t                    if (error_messages[input_id]) {\n\t                        this.highlight(input_id, error_messages[input_id], true);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Render tool form */\n\t        render: function () {\n\t            var self = this;\n\t            this.off('change');\n\t            this.off('reset');\n\t            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n\t            this.field_list = {};\n\t            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n\t            this.input_list = {};\n\t            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n\t            this.element_list = {};\n\t            // converts the form into a json data structure\n\t            this.data = new FormData.Manager(this);\n\t            this._renderForm();\n\t            this.data.create();\n\t            this.model.get('initial_errors') && this.errors(this.model.attributes);\n\t            // add listener which triggers on checksum change, and reset the form input wrappers\n\t            var current_check = this.data.checksum();\n\t            this.on('change', function (input_id) {\n\t                var input = self.input_list[input_id];\n\t                if (!input || input.refresh_on_change || self.model.get('always_refresh')) {\n\t                    var new_check = self.data.checksum();\n\t                    if (new_check != current_check) {\n\t                        current_check = new_check;\n\t                        self.model.get('onchange') && self.model.get('onchange')();\n\t                    }\n\t                }\n\t            });\n\t            this.on('reset', function () {\n\t                _.each(self.element_list, function (input_element) {\n\t                    input_element.reset();\n\t                });\n\t            });\n\t            return this;\n\t        },\n\t\n\t        /** Renders/appends dom elements of the form */\n\t        _renderForm: function () {\n\t            $('.tooltip').remove();\n\t            var options = this.model.attributes;\n\t            this.message = new Ui.UnescapedMessage();\n\t            this.section = new FormSection.View(this, { inputs: options.inputs });\n\t            this.portlet = new Portlet.View({\n\t                icon: options.icon,\n\t                title: options.title,\n\t                cls: options.cls,\n\t                operations: options.operations,\n\t                buttons: options.buttons,\n\t                collapsible: options.collapsible,\n\t                collapsed: options.collapsed,\n\t                onchange_title: options.onchange_title\n\t            });\n\t            this.portlet.append(this.message.$el);\n\t            this.portlet.append(this.section.$el);\n\t            this.$el.empty();\n\t            options.inputs && this.$el.append(this.portlet.$el);\n\t            options.message && this.message.update({ persistent: true, status: options.message_status, message: options.message });\n\t            Galaxy.emit.debug('form-view::initialize()', 'Completed');\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n\t// not appended to the identifier of a nested array.\n\tjQuery.ajaxSettings.traditional = true;\n\t\n\t// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(32), __webpack_require__(33), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n\t\n\t    // grid view\n\t    return Backbone.View.extend({\n\t\n\t        // model\n\t        grid: null,\n\t\n\t        // Initialize\n\t        initialize: function (grid_config) {\n\t            this.dict_format = grid_config.dict_format;\n\t            var self = this;\n\t            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n\t                // Put tag name and value together.\n\t                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n\t                var advanced_search = $('#advanced-search').is(\":visible\");\n\t                if (!advanced_search) {\n\t                    $('#standard-search').slideToggle('fast');\n\t                    $('#advanced-search').slideToggle('fast');\n\t                }\n\t                self.add_filter_condition(\"tags\", tag);\n\t            };\n\t\n\t            // set element\n\t            if (this.dict_format) {\n\t                this.setElement('<div/>');\n\t                if (grid_config.url_base && !grid_config.items) {\n\t                    var url_data = grid_config.url_data || {};\n\t                    _.each(grid_config.filters, function (v, k) {\n\t                        url_data['f-' + k] = v;\n\t                    });\n\t                    $.ajax({\n\t                        url: grid_config.url_base + '?' + $.param(url_data),\n\t                        success: function (response) {\n\t                            response.embedded = grid_config.embedded;\n\t                            response.filters = grid_config.filters;\n\t                            self.init_grid(response);\n\t                        }\n\t                    });\n\t                } else {\n\t                    this.init_grid(grid_config);\n\t                }\n\t            } else {\n\t                this.setElement('#grid-container');\n\t                this.init_grid(grid_config);\n\t            }\n\t\n\t            // fix padding\n\t            if (grid_config.use_panels) {\n\t                $('#center').css({\n\t                    padding: '10px',\n\t                    overflow: 'auto'\n\t                });\n\t            }\n\t        },\n\t\n\t        // refresh frames\n\t        handle_refresh: function (refresh_frames) {\n\t            if (refresh_frames) {\n\t                if ($.inArray('history', refresh_frames) > -1) {\n\t                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n\t                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        // Initialize\n\t        init_grid: function (grid_config) {\n\t            // link grid model\n\t            this.grid = new GridModel(grid_config);\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t\n\t            // handle refresh requests\n\t            this.handle_refresh(options.refresh_frames);\n\t\n\t            // strip protocol and domain\n\t            var url = this.grid.get('url_base');\n\t            url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n\t            this.grid.set('url_base', url);\n\t\n\t            // append main template\n\t            this.$el.html(Templates.grid(options));\n\t\n\t            // update div contents\n\t            this.$el.find('#grid-table-header').html(Templates.header(options));\n\t            this.$el.find('#grid-table-body').html(Templates.body(options));\n\t            this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\t\n\t            // update message\n\t            if (options.message) {\n\t                this.$el.find('#grid-message').html(Templates.message(options));\n\t                var self = this;\n\t                if (options.use_hide_message) {\n\t                    setTimeout(function () {\n\t                        self.$el.find('#grid-message').html('');\n\t                    }, 5000);\n\t                }\n\t            }\n\t\n\t            // configure elements\n\t            this.init_grid_elements();\n\t            this.init_grid_controls();\n\t\n\t            // attach global event handler\n\t            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n\t            init_refresh_on_change();\n\t        },\n\t\n\t        // Initialize grid controls\n\t        init_grid_controls: function () {\n\t\n\t            // link\n\t            var self = this;\n\t\n\t            // Initialize grid operation button.\n\t            this.$el.find('.operation-button').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.submit_operation(this);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters to select text on click and use normal font when user is typing.\n\t            this.$el.find('input[type=text]').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    $(this).select();\n\t                }).keyup(function () {\n\t                    $(this).css('font-style', 'normal');\n\t                });\n\t            });\n\t\n\t            // Initialize sort links.\n\t            this.$el.find('.sort-link').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_sort_condition($(this).attr('sort_key'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters.\n\t            this.$el.find('.text-filter-form').each(function () {\n\t                $(this).off();\n\t                $(this).submit(function () {\n\t                    var column_key = $(this).attr('column_key');\n\t                    var text_input_obj = $('#input-' + column_key + '-filter');\n\t                    var text_input = text_input_obj.val();\n\t                    text_input_obj.val('');\n\t                    self.add_filter_condition(column_key, text_input);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.text-filter-val > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    // Remove visible element.\n\t                    $(this).parent().remove();\n\t\n\t                    // Remove filter condition.\n\t                    self.remove_filter_condition($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t\n\t                    // Return\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.categorical-filter > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_categorical_filter($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize standard, advanced search toggles.\n\t            this.$el.find('.advanced-search-toggle').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.$el.find('#standard-search').slideToggle('fast');\n\t                    self.$el.find('#advanced-search').slideToggle('fast');\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Add event to check all box\n\t            this.$el.find('#check_all').off();\n\t            this.$el.find('#check_all').on('click', function () {\n\t                self.check_all_items();\n\t            });\n\t        },\n\t\n\t        // Initialize grid elements.\n\t        init_grid_elements: function () {\n\t            // Initialize grid selection checkboxes.\n\t            this.$el.find('.grid').each(function () {\n\t                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n\t                var check_count = $(this).find(\"span.grid-selected-count\");\n\t                var update_checked = function () {\n\t                    check_count.text($(checkboxes).filter(\":checked\").length);\n\t                };\n\t\n\t                $(checkboxes).each(function () {\n\t                    $(this).change(update_checked);\n\t                });\n\t                update_checked();\n\t            });\n\t\n\t            // Initialize ratings.\n\t            if (this.$el.find('.community_rating_star').length !== 0) this.$el.find('.community_rating_star').rating({});\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t            var self = this;\n\t\n\t            //\n\t            // add page click events\n\t            //\n\t            this.$el.find('.page-link > a').each(function () {\n\t                $(this).click(function () {\n\t                    self.set_page($(this).attr('page_num'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            //\n\t            // add inbound/outbound events\n\t            //\n\t            this.$el.find('.use-target').each(function () {\n\t                $(this).click(function (e) {\n\t                    self.execute({\n\t                        href: $(this).attr('href'),\n\t                        target: $(this).attr('target')\n\t                    });\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // empty grid?\n\t            var items_length = options.items.length;\n\t            if (items_length == 0) {\n\t                return;\n\t            }\n\t\n\t            // add operation popup menus\n\t            _.each(options.items, function (item, index) {\n\t                var button = self.$('#grid-' + index + '-popup').off();\n\t                var popup = new PopupMenu(button);\n\t                _.each(options['operations'], function (operation) {\n\t                    self._add_operation(popup, operation, item);\n\t                });\n\t            });\n\t        },\n\t\n\t        /** Add an operation to the items menu */\n\t        _add_operation: function (popup, operation, item) {\n\t            var self = this;\n\t            var settings = item.operation_config[operation.label];\n\t            if (settings.allowed && operation.allow_popup) {\n\t                popup.addItem({\n\t                    html: operation.label,\n\t                    href: settings.url_args,\n\t                    target: settings.target,\n\t                    confirmation_text: operation.confirm,\n\t                    func: function (e) {\n\t                        e.preventDefault();\n\t                        var label = $(e.target).html();\n\t                        if (operation.onclick) {\n\t                            operation.onclick(item.encode_id);\n\t                        } else {\n\t                            self.execute(this.findItemByHtml(label));\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        },\n\t\n\t        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        add_filter_condition: function (name, value) {\n\t            // Do nothing is value is empty.\n\t            if (value === \"\") {\n\t                return false;\n\t            }\n\t\n\t            // Add condition to grid.\n\t            this.grid.add_filter(name, value, true);\n\t\n\t            // Add button that displays filter and provides a button to delete it.\n\t            var t = $(Templates.filter_element(name, value));\n\t            var self = this;\n\t            t.click(function () {\n\t                // Remove visible element.\n\t                $(this).remove();\n\t\n\t                // Remove filter condition.\n\t                self.remove_filter_condition(name, value);\n\t            });\n\t\n\t            // append to container\n\t            var container = this.$el.find('#' + name + '-filtering-criteria');\n\t            container.append(t);\n\t\n\t            // execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        remove_filter_condition: function (name, value) {\n\t            // Remove filter condition.\n\t            this.grid.remove_filter(name, value);\n\t\n\t            // Execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set sort condition for grid.\n\t        set_sort_condition: function (col_key) {\n\t            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n\t            // currently sorted column, sort is reversed.\n\t            var cur_sort = this.grid.get('sort_key');\n\t            var new_sort = col_key;\n\t            if (cur_sort.indexOf(col_key) !== -1) {\n\t                // Reverse sort.\n\t                if (cur_sort.substring(0, 1) !== '-') {\n\t                    new_sort = '-' + col_key;\n\t                }\n\t            }\n\t\n\t            // Remove sort arrows elements.\n\t            this.$el.find('.sort-arrow').remove();\n\t\n\t            // Add sort arrow element to new sort column.\n\t            var sort_arrow = new_sort.substring(0, 1) == '-' ? '&uarr;' : '&darr;';\n\t            var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\t\n\t            // Add to header\n\t            this.$el.find('#' + col_key + '-header').append(t);\n\t\n\t            // Update grid.\n\t            this.grid.set('sort_key', new_sort);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set new value for categorical filter.\n\t        set_categorical_filter: function (name, new_value) {\n\t            // Update filter hyperlinks to reflect new filter value.\n\t            var category_filter = this.grid.get('categorical_filters')[name],\n\t                cur_value = this.grid.get('filters')[name];\n\t            var self = this;\n\t            this.$el.find('.' + name + '-filter').each(function () {\n\t                var text = $.trim($(this).text());\n\t                var filter = category_filter[text];\n\t                var filter_value = filter[name];\n\t                if (filter_value == new_value) {\n\t                    // Remove filter link since grid will be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    $(this).empty();\n\t                    $(this).addClass('current-filter');\n\t                    $(this).append(text);\n\t                } else if (filter_value == cur_value) {\n\t                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    $(this).empty();\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_categorical_filter(name, filter_value);\n\t                    });\n\t                    $(this).removeClass('current-filter');\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            // Update grid.\n\t            this.grid.add_filter(name, new_value);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set page to view.\n\t        set_page: function (new_page) {\n\t            // Update page hyperlink to reflect new page.\n\t            var self = this;\n\t            this.$el.find('.page-link').each(function () {\n\t                var id = $(this).attr('id'),\n\t                    page_num = parseInt(id.split('-')[2], 10),\n\t                    // Id has form 'page-link-<page_num>\n\t                cur_page = self.grid.get('cur_page'),\n\t                    text;\n\t                if (page_num === new_page) {\n\t                    // Remove link to page since grid will be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    text = $(this).children().text();\n\t                    $(this).empty();\n\t                    $(this).addClass('inactive-link');\n\t                    $(this).text(text);\n\t                } else if (page_num === cur_page) {\n\t                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    text = $(this).text();\n\t                    $(this).empty();\n\t                    $(this).removeClass('inactive-link');\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_page(page_num);\n\t                    });\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            if (new_page === 'all') {\n\t                this.grid.set('cur_page', new_page);\n\t            } else {\n\t                this.grid.set('cur_page', parseInt(new_page, 10));\n\t            }\n\t            this.execute();\n\t        },\n\t\n\t        // confirmation/submission of operation request\n\t        submit_operation: function (operation_button, confirmation_text) {\n\t            // identify operation\n\t            var operation_name = $(operation_button).val();\n\t\n\t            // verify in any item is selected\n\t            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n\t            if (!number_of_checked_ids > 0) {\n\t                return false;\n\t            }\n\t\n\t            // Check to see if there's grid confirmation text for this operation\n\t            var operation = _.findWhere(this.grid.attributes.operations, { label: operation_name });\n\t            if (operation && !confirmation_text) {\n\t                confirmation_text = operation.confirm || '';\n\t            }\n\t\n\t            // collect ids\n\t            var item_ids = [];\n\t            this.$el.find('input[name=id]:checked').each(function () {\n\t                item_ids.push($(this).val());\n\t            });\n\t\n\t            // execute operation\n\t            var options = {\n\t                operation: operation_name,\n\t                id: item_ids,\n\t                confirmation_text: confirmation_text\n\t            };\n\t            if (operation.target == 'top') {\n\t                options = _.extend(options, {\n\t                    href: operation.href,\n\t                    target: operation.target\n\t                });\n\t            }\n\t            this.execute(options);\n\t            return true;\n\t        },\n\t\n\t        check_all_items: function () {\n\t            var check = this.$('.grid-row-select-checkbox');\n\t            var state = this.$('#check_all').prop('checked');\n\t            _.each(check, function (c) {\n\t                $(c).prop('checked', state);\n\t            });\n\t            this.init_grid_elements();\n\t        },\n\t\n\t        // Go back to page one; this is useful when a filter is applied.\n\t        go_page_one: function () {\n\t            // Need to go back to page 1 if not showing all.\n\t            var cur_page = this.grid.get('cur_page');\n\t            if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n\t                this.grid.set('cur_page', 1);\n\t            }\n\t        },\n\t\n\t        //\n\t        // execute operations and hyperlink requests\n\t        //\n\t        execute: function (options) {\n\t            // get url\n\t            var id = null;\n\t            var href = null;\n\t            var operation = null;\n\t            var confirmation_text = null;\n\t            var target = null;\n\t\n\t            // check for options\n\t            if (options) {\n\t                // get options\n\t                href = options.href;\n\t                operation = options.operation;\n\t                id = options.id;\n\t                confirmation_text = options.confirmation_text;\n\t                target = options.target;\n\t\n\t                // check if input contains the operation tag\n\t                if (href !== undefined && href.indexOf('operation=') != -1) {\n\t                    // Get operation, id in hyperlink's href.\n\t                    var href_parts = href.split(\"?\");\n\t                    if (href_parts.length > 1) {\n\t                        var href_parms_str = href_parts[1];\n\t                        var href_parms = href_parms_str.split(\"&\");\n\t                        for (var index = 0; index < href_parms.length; index++) {\n\t                            if (href_parms[index].indexOf('operation') != -1) {\n\t                                // Found operation parm; get operation value.\n\t                                operation = href_parms[index].split('=')[1];\n\t                                operation = operation.replace(/\\+/g, ' ');\n\t                            } else if (href_parms[index].indexOf('id') != -1) {\n\t                                // Found id parm; get id value.\n\t                                id = href_parms[index].split('=')[1];\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            // check for operation details\n\t            if (operation && id) {\n\t                // show confirmation box\n\t                if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null') if (!confirm(confirmation_text)) return false;\n\t\n\t                // use small characters for operation?!\n\t                operation = operation.toLowerCase();\n\t\n\t                // Update grid.\n\t                this.grid.set({\n\t                    operation: operation,\n\t                    item_ids: id\n\t                });\n\t\n\t                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n\t                if (target == 'top') {\n\t                    window.top.location = href + '?' + $.param(this.grid.get_url_data());\n\t                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n\t                    this.update_grid();\n\t                } else {\n\t                    this.go_to(target, href);\n\t                }\n\t\n\t                // done\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (href) {\n\t                this.go_to(target, href);\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (this.grid.get('async') || this.dict_format) {\n\t                this.update_grid();\n\t            } else {\n\t                this.go_to(target, href);\n\t            }\n\t\n\t            // done\n\t            return false;\n\t        },\n\t\n\t        // go to url\n\t        go_to: function (target, href) {\n\t            // get aysnc status\n\t            var async = this.grid.get('async');\n\t            this.grid.set('async', false);\n\t\n\t            // get slide status\n\t            advanced_search = this.$el.find('#advanced-search').is(':visible');\n\t            this.grid.set('advanced_search', advanced_search);\n\t\n\t            // get default url\n\t            if (!href) {\n\t                href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n\t            }\n\t\n\t            // clear grid of transient request attributes.\n\t            this.grid.set({\n\t                operation: undefined,\n\t                item_ids: undefined,\n\t                async: async\n\t            });\n\t            switch (target) {\n\t                case 'inbound':\n\t                    // this currently assumes that there is only a single grid shown at a time\n\t                    var $div = $('.grid-header').closest('.inbound');\n\t                    if ($div.length !== 0) {\n\t                        $div.load(href);\n\t                        return;\n\t                    }\n\t                    break;\n\t                case 'top':\n\t                    window.top.location = href;\n\t                    break;\n\t                default:\n\t                    window.location = href;\n\t            }\n\t        },\n\t\n\t        // Update grid.\n\t        update_grid: function () {\n\t            // If there's an operation, do POST; otherwise, do GET.\n\t            var method = this.grid.get('operation') ? 'POST' : 'GET';\n\t\n\t            // Show overlay to indicate loading and prevent user actions.\n\t            this.$el.find('.loading-elt-overlay').show();\n\t            var self = this;\n\t            $.ajax({\n\t                type: method,\n\t                url: self.grid.get('url_base'),\n\t                data: self.grid.get_url_data(),\n\t                error: function (response) {\n\t                    alert('Grid refresh failed');\n\t                },\n\t                success: function (response_text) {\n\t\n\t                    // backup\n\t                    var embedded = self.grid.get('embedded');\n\t                    var insert = self.grid.get('insert');\n\t\n\t                    // request new configuration\n\t                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\t\n\t                    // update\n\t                    json.embedded = embedded;\n\t                    json.insert = insert;\n\t\n\t                    // Initialize new grid config\n\t                    self.init_grid(json);\n\t\n\t                    // Hide loading overlay.\n\t                    self.$el.find('.loading-elt-overlay').hide();\n\t                },\n\t                complete: function () {\n\t                    // Clear grid of transient request attributes.\n\t                    self.grid.set({\n\t                        operation: undefined,\n\t                        item_ids: undefined\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n\t\n\t    // ui list element\n\t    var View = Backbone.View.extend({\n\t        // create portlet to keep track of selected list elements\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // initialize options\n\t            this.options = options;\n\t            this.name = options.name || 'element';\n\t            this.multiple = options.multiple || false;\n\t\n\t            // create message handler\n\t            this.message = new Ui.Message();\n\t\n\t            // create portlet\n\t            this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\t\n\t            // create select field containing the options which can be inserted into the list\n\t            this.select = new Ui.Select.View({ optional: options.optional });\n\t\n\t            // create insert new list element button\n\t            this.button = new Ui.ButtonIcon({\n\t                icon: 'fa fa-sign-in',\n\t                floating: 'left',\n\t                tooltip: 'Insert new ' + this.name,\n\t                onclick: function () {\n\t                    self.add({\n\t                        id: self.select.value(),\n\t                        name: self.select.text()\n\t                    });\n\t                }\n\t            });\n\t\n\t            // build main element\n\t            this.setElement(this._template(options));\n\t            this.$('.ui-list-message').append(this.message.$el);\n\t            this.$('.ui-list-portlet').append(this.portlet.$el);\n\t            this.$('.ui-list-button').append(this.button.$el);\n\t            this.$('.ui-list-select').append(this.select.$el);\n\t        },\n\t\n\t        /** Return/Set currently selected list elements */\n\t        value: function (val) {\n\t            // set new value\n\t            if (val !== undefined) {\n\t                this.portlet.empty();\n\t                if ($.isArray(val)) {\n\t                    for (var i in val) {\n\t                        var v = val[i];\n\t                        var v_id = null;\n\t                        var v_name = null;\n\t                        if ($.type(v) != 'string') {\n\t                            v_id = v.id;\n\t                            v_name = v.name;\n\t                        } else {\n\t                            v_id = v_name = v;\n\t                        }\n\t                        if (v_id != null) {\n\t                            this.add({\n\t                                id: v_id,\n\t                                name: v_name\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t                this._refresh();\n\t            }\n\t            // get current value\n\t            var lst = [];\n\t            this.$('.ui-list-id').each(function () {\n\t                lst.push({\n\t                    id: $(this).prop('id'),\n\t                    name: $(this).find('.ui-list-name').html()\n\t                });\n\t            });\n\t            if (lst.length == 0) {\n\t                return null;\n\t            }\n\t            return lst;\n\t        },\n\t\n\t        /** Add row */\n\t        add: function (options) {\n\t            var self = this;\n\t            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n\t                if (!Utils.isEmpty(options.id)) {\n\t                    var $el = $(this._templateRow({\n\t                        id: options.id,\n\t                        name: options.name\n\t                    }));\n\t                    $el.on('click', function () {\n\t                        $el.remove();\n\t                        self._refresh();\n\t                    });\n\t                    $el.on('mouseover', function () {\n\t                        $el.addClass('portlet-highlight');\n\t                    });\n\t                    $el.on('mouseout', function () {\n\t                        $el.removeClass('portlet-highlight');\n\t                    });\n\t                    this.portlet.append($el);\n\t                    this._refresh();\n\t                } else {\n\t                    this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n\t                }\n\t            } else {\n\t                this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n\t            }\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.select.update(options);\n\t        },\n\t\n\t        /** Refresh view */\n\t        _refresh: function () {\n\t            if (this.$('.ui-list-id').length > 0) {\n\t                !this.multiple && this.button.disable();\n\t                this.$('.ui-list-portlet').show();\n\t            } else {\n\t                this.button.enable();\n\t                this.$('.ui-list-portlet').hide();\n\t            }\n\t            this.options.onchange && this.options.onchange();\n\t        },\n\t\n\t        /** Main Template */\n\t        _template: function (options) {\n\t            return '<div class=\"ui-list\">' + '<div class=\"ui-margin-top\">' + '<span class=\"ui-list-button\"/>' + '<span class=\"ui-list-select\"/>' + '</div>' + '<div class=\"ui-list-message\"/>' + '<div class=\"ui-list-portlet\"/>' + '</div>';\n\t        },\n\t\n\t        /** Row Template */\n\t        _templateRow: function (options) {\n\t            return '<div id=\"' + options.id + '\" class=\"ui-list-id\">' + '<span class=\"ui-list-delete fa fa-trash\"/>' + '<span class=\"ui-list-name\">' + options.name + '</span>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/** Base class for options based ui elements **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var Base = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                visible: true,\n\t                data: [],\n\t                id: Utils.uid(),\n\t                error_text: 'No options available.',\n\t                wait_text: 'Please wait...',\n\t                multiple: false,\n\t                optional: false,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.on('change', function () {\n\t                self.model.get('onchange')(self.value());\n\t            });\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.empty().removeClass().addClass('ui-options').append(this.$message = $('<div/>')).append(this.$menu = $('<div/>').addClass('ui-options-menu')).append(this.$options = $(this._template()));\n\t\n\t            // add select/unselect all button\n\t            this.all_button = null;\n\t            if (this.model.get('multiple')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        self.$('input').prop('checked', self.all_button.value() !== 0);\n\t                        self.value(self._getValue());\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$menu.append(this.all_button.$el);\n\t            }\n\t\n\t            // finalize dom\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.$options.empty();\n\t            if (this._templateOptions) {\n\t                this.$options.append(this._templateOptions(this.model.get('data')));\n\t            } else {\n\t                _.each(this.model.get('data'), function (option) {\n\t                    self.$options.append($(self._templateOption(option)).addClass('ui-option').tooltip({ title: option.tooltip, placement: 'bottom' }));\n\t                });\n\t            }\n\t            var self = this;\n\t            this.$('input').on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeValue();\n\t            this._changeWait();\n\t        },\n\t\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        _changeWait: function () {\n\t            if (this.model.get('wait')) {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('wait_text'), 'info');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                }\n\t            } else {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('error_text'), 'danger');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                } else {\n\t                    this.$message.hide();\n\t                    this.$options.css('display', 'inline-block');\n\t                    this.$menu.show();\n\t                }\n\t            }\n\t        },\n\t\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this._getValue() === null && !this.model.get('multiple') && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return first available option */\n\t        first: function () {\n\t            var options = this.$('input').first();\n\t            return options.length > 0 ? options.val() : null;\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns the number of options */\n\t        length: function () {\n\t            return this.$('.ui-option').length;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                if (new_value !== null) {\n\t                    var values = $.isArray(new_value) ? new_value : [new_value];\n\t                    _.each(values, function (v) {\n\t                        self.$('input[value=\"' + v + '\"]').first().prop('checked', true);\n\t                    });\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Return current selection */\n\t        _getValue: function () {\n\t            var selected = [];\n\t            this.$(':checked').each(function () {\n\t                selected.push($(this).val());\n\t            });\n\t            if (Utils.isEmpty(selected)) {\n\t                return null;\n\t            }\n\t            return this.model.get('multiple') ? selected : selected[0];\n\t        },\n\t\n\t        /** Show message instead if options */\n\t        _messageShow: function (text, status) {\n\t            this.$message.show().removeClass().addClass('ui-message alert alert-' + status).html(text);\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list');\n\t        }\n\t    });\n\t\n\t    /** Iconized **/\n\t    var BaseIcons = Base.extend({\n\t        _templateOption: function (pair) {\n\t            var id = Utils.uid();\n\t            return $('<div/>').addClass('ui-option').append($('<input/>').attr({\n\t                id: id,\n\t                type: this.model.get('type'),\n\t                name: this.model.id,\n\t                value: pair.value })).append($('<label/>').addClass('ui-options-label').attr('for', id).html(pair.label));\n\t        }\n\t    });\n\t\n\t    /** Radio button field **/\n\t    var Radio = {};\n\t    Radio.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'radio';\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Checkbox options field **/\n\t    var Checkbox = {};\n\t    Checkbox.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'checkbox';\n\t            options.multiple = true;\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Radio button options field styled as classic buttons **/\n\t    var RadioButton = {};\n\t    RadioButton.View = Base.extend({\n\t        initialize: function (options) {\n\t            Base.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set current value */\n\t        _setValue: function (new_value) {\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                this.$('label').removeClass('active');\n\t                this.$('[value=\"' + new_value + '\"]').prop('checked', true).closest('label').addClass('active');\n\t            }\n\t        },\n\t\n\t        /** Template for a single option */\n\t        _templateOption: function (pair) {\n\t            var $el = $('<label/>').addClass('btn btn-default');\n\t            pair.icon && $el.append($('<i/>').addClass('fa').addClass(pair.icon).addClass(!pair.label && 'no-padding'));\n\t            $el.append($('<input/>').attr({ type: 'radio', name: this.model.id, value: pair.value }));\n\t            pair.label && $el.append(pair.label);\n\t            return $el;\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('btn-group ui-radiobutton').attr('data-toggle', 'buttons');\n\t        }\n\t    });\n\t\n\t    return {\n\t        Base: Base,\n\t        BaseIcons: BaseIcons,\n\t        Radio: Radio,\n\t        RadioButton: RadioButton,\n\t        Checkbox: Checkbox\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class creates/wraps a default html select field as backbone class.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.data = [];\n\t            this.data2 = [];\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                cls: 'ui-select',\n\t                error_text: 'No options available',\n\t                empty_text: 'Nothing selected',\n\t                visible: true,\n\t                wait: false,\n\t                multiple: false,\n\t                searchable: true,\n\t                optional: false,\n\t                disabled: false,\n\t                onchange: function () {},\n\t                value: null,\n\t                selectall: true,\n\t                pagesize: 20\n\t            }).set(options);\n\t            this.on('change', function () {\n\t                self.model.get('onchange') && self.model.get('onchange')(self.value());\n\t            });\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:disabled', this._changeDisabled, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:multiple change:searchable change:cls change:id', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.model.get('searchable') ? this._renderSearchable() : this._renderClassic();\n\t            this.$el.addClass(this.model.get('cls')).attr('id', this.model.get('id'));\n\t            this.$select.empty().addClass('select').attr('id', this.model.get('id') + '_select').prop('multiple', this.model.get('multiple')).on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t            this._changeDisabled();\n\t        },\n\t\n\t        /** Renders the classic selection field */\n\t        _renderClassic: function () {\n\t            var self = this;\n\t            this.$el.addClass(this.model.get('multiple') ? 'ui-select-multiple' : 'ui-select').append(this.$select = $('<select/>')).append(this.$dropdown = $('<div/>')).append(this.$resize = $('<div/>').append(this.$resize_icon = $('<i/>')));\n\t            if (this.model.get('multiple')) {\n\t                this.$dropdown.hide();\n\t                this.$resize_icon.addClass('fa fa-angle-double-right fa-rotate-45').show();\n\t                this.$resize.removeClass().addClass('icon-resize').show().off('mousedown').on('mousedown', function (event) {\n\t                    var currentY = event.pageY;\n\t                    var currentHeight = self.$select.height();\n\t                    self.minHeight = self.minHeight || currentHeight;\n\t                    $('#dd-helper').show().on('mousemove', function (event) {\n\t                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n\t                    }).on('mouseup mouseleave', function () {\n\t                        $('#dd-helper').hide().off();\n\t                    });\n\t                });\n\t            } else {\n\t                this.$dropdown.show();\n\t                this.$resize.hide();\n\t                this.$resize_icon.hide();\n\t            }\n\t        },\n\t\n\t        /** Renders the default select2 field */\n\t        _renderSearchable: function () {\n\t            var self = this;\n\t            this.$el.append(this.$select = $('<div/>')).append(this.$dropdown = $('<div/>'));\n\t            this.$dropdown.hide();\n\t            if (!this.model.get('multiple')) {\n\t                this.$dropdown.show().on('click', function () {\n\t                    self.$select.select2 && self.$select.select2('open');\n\t                });\n\t            }\n\t            this.all_button = null;\n\t            if (this.model.get('multiple') && this.model.get('selectall')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        var new_value = [];\n\t                        self.all_button.value() !== 0 && _.each(self.model.get('data'), function (option) {\n\t                            new_value.push(option.value);\n\t                        });\n\t                        self.value(new_value);\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$el.prepend(this.all_button.$el);\n\t            }\n\t        },\n\t\n\t        /** Matches a search term with a given text */\n\t        _match: function (term, text) {\n\t            return !term || term == '' || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n\t        },\n\t\n\t        /** Updates the selection options */\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.data = [];\n\t            if (!this.model.get('multiple') && this.model.get('optional')) {\n\t                this.data.push({ value: '__null__', label: self.model.get('empty_text') });\n\t            }\n\t            _.each(this.model.get('data'), function (option) {\n\t                self.data.push(option);\n\t            });\n\t            if (this.length() == 0) {\n\t                this.data.push({ value: '__null__', label: this.model.get('error_text') });\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                this.data2 = [];\n\t                _.each(this.data, function (option, index) {\n\t                    self.data2.push({ order: index, id: option.value, text: option.label, tags: option.tags });\n\t                });\n\t                this.$select.data('select2') && this.$select.select2('destroy');\n\t                this.matched_tags = {};\n\t                this.$select.select2({\n\t                    data: self.data2,\n\t                    closeOnSelect: !this.model.get('multiple'),\n\t                    multiple: this.model.get('multiple'),\n\t                    query: function (q) {\n\t                        self.matched_tags = {};\n\t                        var pagesize = self.model.get('pagesize');\n\t                        var results = _.filter(self.data2, function (e) {\n\t                            var found = false;\n\t                            _.each(e.tags, function (tag) {\n\t                                if (self._match(q.term, tag)) {\n\t                                    found = self.matched_tags[tag] = true;\n\t                                }\n\t                            });\n\t                            return found || self._match(q.term, e.text);\n\t                        });\n\t                        q.callback({\n\t                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n\t                            more: results.length >= q.page * pagesize\n\t                        });\n\t                    },\n\t                    formatResult: function (result) {\n\t                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n\t                            if (self.matched_tags[tag]) {\n\t                                return memo + '&nbsp;' + '<div class=\"label label-info\">' + _.escape(tag) + '</div>';\n\t                            }\n\t                            return memo;\n\t                        }, '') + '</div>';\n\t                    }\n\t                });\n\t                this.$('.select2-container .select2-search input').off('blur');\n\t            } else {\n\t                this.$select.find('option').remove();\n\t                _.each(this.data, function (option) {\n\t                    self.$select.append($('<option/>').attr('value', option.value).html(_.escape(option.label)));\n\t                });\n\t            }\n\t            this.model.set('disabled', this.length() == 0);\n\t            this._changeValue();\n\t        },\n\t\n\t        /** Handles field enabling/disabling, usually used when no options are available */\n\t        _changeDisabled: function () {\n\t            if (this.model.get('searchable')) {\n\t                this.$select.select2(this.model.get('disabled') ? 'disable' : 'enable');\n\t            } else {\n\t                this.$select.prop('disabled', this.model.get('disabled'));\n\t            }\n\t        },\n\t\n\t        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n\t        _changeWait: function () {\n\t            this.$dropdown.removeClass().addClass('icon-dropdown fa').addClass(this.model.get('wait') ? 'fa-spinner fa-spin' : 'fa-caret-down');\n\t        },\n\t\n\t        /** Handles field visibility */\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            this.$select[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        /** Synchronizes the model value with the actually selected field value */\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this.model.get('multiple')) {\n\t                if (this.all_button) {\n\t                    var value = this._getValue();\n\t                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n\t                }\n\t            } else if (this._getValue() === null && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return the first select option */\n\t        first: function () {\n\t            return this.data.length > 0 ? this.data[0].value : null;\n\t        },\n\t\n\t        /** Check if a value is an existing option */\n\t        exists: function (value) {\n\t            return _.findWhere(this.data, { value: value });\n\t        },\n\t\n\t        /** Return the label/text of the current selection */\n\t        text: function () {\n\t            var v = this._getValue();\n\t            var d = this.exists($.isArray(v) ? v[0] : v);\n\t            return d ? d.label : '';\n\t        },\n\t\n\t        /** Show the select field */\n\t        show: function () {\n\t            this.model.set('visible', true);\n\t        },\n\t\n\t        /** Hide the select field */\n\t        hide: function () {\n\t            this.model.set('visible', false);\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns true if the field is disabled */\n\t        disabled: function () {\n\t            return this.model.get('disabled');\n\t        },\n\t\n\t        /** Enable the select field */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Disable the select field */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Update all available options at once */\n\t        add: function (options, sorter) {\n\t            _.each(this.model.get('data'), function (v) {\n\t                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n\t            });\n\t            sorter && options && options.sort(sorter);\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Set the custom onchange callback function */\n\t        setOnChange: function (callback) {\n\t            this.model.set('onchange', callback);\n\t        },\n\t\n\t        /** Number of available options */\n\t        length: function () {\n\t            return $.isArray(this.model.get('data')) ? this.model.get('data').length : 0;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value === null || new_value === undefined) {\n\t                new_value = '__null__';\n\t            }\n\t            if (this.model.get('multiple')) {\n\t                new_value = $.isArray(new_value) ? new_value : [new_value];\n\t            } else if ($.isArray(new_value)) {\n\t                if (new_value.length > 0) {\n\t                    new_value = new_value[0];\n\t                } else {\n\t                    new_value = '__null__';\n\t                }\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                if ($.isArray(new_value)) {\n\t                    val = [];\n\t                    _.each(new_value, function (v) {\n\t                        var d = _.findWhere(self.data2, { id: v });\n\t                        d && val.push(d);\n\t                    });\n\t                    new_value = val;\n\t                } else {\n\t                    var d = _.findWhere(this.data2, { id: new_value });\n\t                    new_value = d;\n\t                }\n\t                this.$select.select2('data', new_value);\n\t            } else {\n\t                this.$select.val(new_value);\n\t            }\n\t        },\n\t\n\t        /** Get value from dom */\n\t        _getValue: function () {\n\t            var val = null;\n\t            if (this.model.get('searchable')) {\n\t                var selected = this.$select.select2('data');\n\t                if (selected) {\n\t                    if ($.isArray(selected)) {\n\t                        val = [];\n\t                        selected.sort(function (a, b) {\n\t                            return a.order - b.order;\n\t                        });\n\t                        _.each(selected, function (v) {\n\t                            val.push(v.id);\n\t                        });\n\t                    } else {\n\t                        val = selected.id;\n\t                    }\n\t                }\n\t            } else {\n\t                val = this.$select.val();\n\t            }\n\t            return Utils.isEmpty(val) ? null : val;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    //jquery\n\t    //backbone\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    // =============================================================================\n\t    /**\n\t     * view for a popup menu\n\t     */\n\t    var PopupMenu = Backbone.View.extend({\n\t        //TODO: maybe better as singleton off the Galaxy obj\n\t        /** Cache the desired button element and options, set up the button click handler\n\t         *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n\t         */\n\t        initialize: function ($button, options) {\n\t            // default settings\n\t            this.$button = $button;\n\t            if (!this.$button.length) {\n\t                this.$button = $('<div/>');\n\t            }\n\t            this.options = options || [];\n\t            this.$button.data('popupmenu', this);\n\t\n\t            // set up button click -> open menu behavior\n\t            var menu = this;\n\t            this.$button.click(function (event) {\n\t                // if there's already a menu open, remove it\n\t                $('.popmenu-wrapper').remove();\n\t                menu._renderAndShow(event);\n\t                return false;\n\t            });\n\t        },\n\t\n\t        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n\t        _renderAndShow: function (clickEvent) {\n\t            this.render();\n\t            this.$el.appendTo('body').css(this._getShownPosition(clickEvent)).show();\n\t            this._setUpCloseBehavior();\n\t        },\n\t\n\t        // render the menu\n\t        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n\t        render: function () {\n\t            // render the menu body absolute and hidden, fill with template\n\t            this.$el.addClass('popmenu-wrapper').hide().css({ position: 'absolute' }).html(this.template(this.$button.attr('id'), this.options));\n\t\n\t            // set up behavior on each link/anchor elem\n\t            if (this.options.length) {\n\t                var menu = this;\n\t                //precondition: there should be one option per li\n\t                this.$el.find('li').each(function (i, li) {\n\t                    var option = menu.options[i];\n\t\n\t                    // if the option has 'func', call that function when the anchor is clicked\n\t                    if (option.func) {\n\t                        $(this).children('a.popupmenu-option').click(function (event) {\n\t                            option.func.call(menu, event, option);\n\t                            // We must preventDefault otherwise clicking \"cancel\"\n\t                            // on a purge or something still navigates and causes\n\t                            // the action.\n\t                            event.preventDefault();\n\t                            // bubble up so that an option click will call the close behavior\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t\n\t        template: function (id, options) {\n\t            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), '</ul>'].join('');\n\t        },\n\t\n\t        _templateOptions: function (options) {\n\t            if (!options.length) {\n\t                return '<li>(no options)</li>';\n\t            }\n\t            return _.map(options, function (option) {\n\t                if (option.divider) {\n\t                    return '<li class=\"divider\"></li>';\n\t                } else if (option.header) {\n\t                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>'].join('');\n\t                }\n\t                var href = option.href || 'javascript:void(0);',\n\t                    target = option.target ? ' target=\"' + option.target + '\"' : '',\n\t                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : '';\n\t                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>', check, option.html, '</a></li>'].join('');\n\t            }).join('');\n\t        },\n\t\n\t        // get the absolute position/offset for the menu\n\t        _getShownPosition: function (clickEvent) {\n\t\n\t            // display menu horiz. centered on click...\n\t            var menuWidth = this.$el.width();\n\t            var x = clickEvent.pageX - menuWidth / 2;\n\t\n\t            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n\t            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n\t            x = Math.max(x, $(document).scrollLeft() + 5);\n\t            return {\n\t                top: clickEvent.pageY,\n\t                left: x\n\t            };\n\t        },\n\t\n\t        // bind an event handler to all available frames so that when anything is clicked\n\t        // the menu is removed from the DOM and the event handler unbinds itself\n\t        _setUpCloseBehavior: function () {\n\t            var menu = this;\n\t            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\t\n\t            // function to close popup and unbind itself\n\t            function closePopup(event) {\n\t                $(document).off('click.close_popup');\n\t                if (window && window.parent !== window) {\n\t                    try {\n\t                        $(window.parent.document).off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                } else {\n\t                    try {\n\t                        $('iframe#galaxy_main').contents().off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                }\n\t                menu.remove();\n\t            }\n\t\n\t            $('html').one(\"click.close_popup\", closePopup);\n\t            if (window && window.parent !== window) {\n\t                try {\n\t                    $(window.parent.document).find('html').one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            } else {\n\t                try {\n\t                    $('iframe#galaxy_main').contents().one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            }\n\t        },\n\t\n\t        // add a menu option/item at the given index\n\t        addItem: function (item, index) {\n\t            // append to end if no index\n\t            index = index >= 0 ? index : this.options.length;\n\t            this.options.splice(index, 0, item);\n\t            return this;\n\t        },\n\t\n\t        // remove a menu option/item at the given index\n\t        removeItem: function (index) {\n\t            if (index >= 0) {\n\t                this.options.splice(index, 1);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findIndexByHtml: function (html) {\n\t            for (var i = 0; i < this.options.length; i++) {\n\t                if (_.has(this.options[i], 'html') && this.options[i].html === html) {\n\t                    return i;\n\t                }\n\t            }\n\t            return null;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findItemByHtml: function (html) {\n\t            return this.options[this.findIndexByHtml(html)];\n\t        },\n\t\n\t        // string representation\n\t        toString: function () {\n\t            return 'PopupMenu';\n\t        }\n\t    });\n\t    /** shortcut to new for when you don't need to preserve the ref */\n\t    PopupMenu.create = function _create($button, options) {\n\t        return new PopupMenu($button, options);\n\t    };\n\t\n\t    // -----------------------------------------------------------------------------\n\t    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n\t    // to the newer backbone.js PopupMenu\n\t\n\t    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n\t     *      Converts initial_options to object array used by PopupMenu.\n\t     *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n\t     *  @param {Object} initial_options map of key -> values, where\n\t     *      key is option text, value is fn to call when option is clicked\n\t     *  @returns {PopupMenu} the PopupMenu created\n\t     */\n\t    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n\t        var convertedOptions = [];\n\t        _.each(initial_options, function (optionVal, optionKey) {\n\t            var newOption = { html: optionKey };\n\t\n\t            // keys with null values indicate: header\n\t            if (optionVal === null) {\n\t                // !optionVal? (null only?)\n\t                newOption.header = true;\n\t\n\t                // keys with function values indicate: a menu option\n\t            } else if (jQuery.type(optionVal) === 'function') {\n\t                newOption.func = optionVal;\n\t            }\n\t            //TODO:?? any other special optionVals?\n\t            // there was no divider option originally\n\t            convertedOptions.push(newOption);\n\t        });\n\t        return new PopupMenu($(button_element), convertedOptions);\n\t    };\n\t\n\t    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n\t     *  @param {jQuery} $parent the element that contains the links to convert to options\n\t     *  @param {String} selector jq selector string to find links\n\t     *  @returns {Object[]} the options array to initialize a PopupMenu\n\t     */\n\t    //TODO: lose parent and selector, pass in array of links, use map to return options\n\t    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n\t        $parent = $($parent);\n\t        selector = selector || 'a';\n\t        var options = [];\n\t        $parent.find(selector).each(function (elem, i) {\n\t            var option = {},\n\t                $link = $(elem);\n\t\n\t            // convert link text to the option text (html) and the href into the option func\n\t            option.html = $link.text();\n\t            if ($link.attr('href')) {\n\t                var linkHref = $link.attr('href'),\n\t                    linkTarget = $link.attr('target'),\n\t                    confirmText = $link.attr('confirm');\n\t\n\t                option.func = function () {\n\t                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n\t                    //  if the user cancels - do nothing\n\t                    if (confirmText && !confirm(confirmText)) {\n\t                        return;\n\t                    }\n\t\n\t                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n\t                    switch (linkTarget) {\n\t                        // relocate the center panel\n\t                        case '_parent':\n\t                            window.parent.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate the entire window\n\t                        case '_top':\n\t                            window.top.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate this panel\n\t                        default:\n\t                            window.location = linkHref;\n\t                    }\n\t                };\n\t            }\n\t            options.push(option);\n\t        });\n\t        return options;\n\t    };\n\t\n\t    /** Create a single popupmenu from existing DOM button and anchor elements\n\t     *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n\t     *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n\t     *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n\t     *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n\t     */\n\t    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n\t        $buttonElement = $($buttonElement);\n\t        $menuElement = $($menuElement);\n\t        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n\t        // we're done with the menu (having converted it to an options map)\n\t        $menuElement.remove();\n\t        return new PopupMenu($buttonElement, options);\n\t    };\n\t\n\t    /** Create all popupmenus within a document or a more specific element\n\t     *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n\t     *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n\t     *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n\t     *      Will be passed $menuElement, parent.\n\t     *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n\t     *  @returns {PopupMenu[]} array of popupmenus created\n\t     */\n\t    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n\t        parent = parent || document;\n\t        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n\t        //  which contains the id of the button that activates the menu\n\t        menuSelector = menuSelector || 'div[popupmenu]';\n\t        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n\t        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n\t            return '#' + $menuElement.attr('popupmenu');\n\t        };\n\t\n\t        // aggregate and return all PopupMenus\n\t        var popupMenusCreated = [];\n\t        $(parent).find(menuSelector).each(function () {\n\t            var $menuElement = $(this),\n\t                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n\t            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n\t            $buttonElement.addClass('popup');\n\t        });\n\t        return popupMenusCreated;\n\t    };\n\t\n\t    // =============================================================================\n\t    return PopupMenu;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/* This class maps the form dom to an api compatible javascript dictionary. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var Manager = Backbone.Model.extend({\n\t        initialize: function (app) {\n\t            this.app = app;\n\t        },\n\t\n\t        /** Creates a checksum. */\n\t        checksum: function () {\n\t            var sum = '';\n\t            var self = this;\n\t            this.app.section.$el.find('.section-row').each(function () {\n\t                var id = $(this).attr('id');\n\t                var field = self.app.field_list[id];\n\t                if (field) {\n\t                    sum += id + ':' + JSON.stringify(field.value && field.value()) + ':' + field.collapsed + ';';\n\t                }\n\t            });\n\t            return sum;\n\t        },\n\t\n\t        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n\t        create: function () {\n\t            var self = this;\n\t\n\t            // get raw dictionary from dom\n\t            var dict = {};\n\t            this._iterate(this.app.section.$el, dict);\n\t\n\t            // add to result dictionary, label elements\n\t            var result_dict = {};\n\t            this.flat_dict = {};\n\t            function add(flat_id, input_id, input_value) {\n\t                self.flat_dict[flat_id] = input_id;\n\t                result_dict[flat_id] = input_value;\n\t                self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr('tour_id', flat_id);\n\t            }\n\t            // converter between raw dictionary and job dictionary\n\t            function convert(identifier, head) {\n\t                for (var index in head) {\n\t                    var node = head[index];\n\t                    if (node.input) {\n\t                        var input = node.input;\n\t                        var flat_id = identifier;\n\t                        if (identifier != '') {\n\t                            flat_id += '|';\n\t                        }\n\t                        flat_id += input.name;\n\t                        switch (input.type) {\n\t                            case 'repeat':\n\t                                var section_label = 'section-';\n\t                                var block_indices = [];\n\t                                var block_prefix = null;\n\t                                for (var block_label in node) {\n\t                                    var pos = block_label.indexOf(section_label);\n\t                                    if (pos != -1) {\n\t                                        pos += section_label.length;\n\t                                        block_indices.push(parseInt(block_label.substr(pos)));\n\t                                        if (!block_prefix) {\n\t                                            block_prefix = block_label.substr(0, pos);\n\t                                        }\n\t                                    }\n\t                                }\n\t                                block_indices.sort(function (a, b) {\n\t                                    return a - b;\n\t                                });\n\t                                var index = 0;\n\t                                for (var i in block_indices) {\n\t                                    convert(flat_id + '_' + index++, node[block_prefix + block_indices[i]]);\n\t                                }\n\t                                break;\n\t                            case 'conditional':\n\t                                var value = self.app.field_list[input.id].value();\n\t                                add(flat_id + '|' + input.test_param.name, input.id, value);\n\t                                var selectedCase = matchCase(input, value);\n\t                                if (selectedCase != -1) {\n\t                                    convert(flat_id, head[input.id + '-section-' + selectedCase]);\n\t                                }\n\t                                break;\n\t                            case 'section':\n\t                                convert(!input.flat && flat_id || '', node);\n\t                                break;\n\t                            default:\n\t                                var field = self.app.field_list[input.id];\n\t                                if (field && field.value) {\n\t                                    var value = field.value();\n\t                                    if (input.ignore === undefined || input.ignore != value) {\n\t                                        if (field.collapsed && input.collapsible_value) {\n\t                                            value = input.collapsible_value;\n\t                                        }\n\t                                        add(flat_id, input.id, value);\n\t                                        if (input.payload) {\n\t                                            for (var p_id in input.payload) {\n\t                                                add(p_id, input.id, input.payload[p_id]);\n\t                                            }\n\t                                        }\n\t                                    }\n\t                                }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            convert('', dict);\n\t            return result_dict;\n\t        },\n\t\n\t        /** Matches flat ids to corresponding input element\n\t         * @param{string} flat_id - Flat input id to be looked up.\n\t         */\n\t        match: function (flat_id) {\n\t            return this.flat_dict && this.flat_dict[flat_id];\n\t        },\n\t\n\t        /** Match conditional values to selected cases\n\t        */\n\t        matchCase: function (input, value) {\n\t            return matchCase(input, value);\n\t        },\n\t\n\t        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n\t        */\n\t        matchModel: function (model, callback) {\n\t            var self = this;\n\t            visitInputs(model.inputs, function (input, name) {\n\t                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n\t            });\n\t        },\n\t\n\t        /** Matches identifier from api response to input elements e.g. used to display validation errors\n\t        */\n\t        matchResponse: function (response) {\n\t            var result = {};\n\t            var self = this;\n\t            function search(id, head) {\n\t                if (typeof head === 'string') {\n\t                    var input_id = self.flat_dict[id];\n\t                    input_id && (result[input_id] = head);\n\t                } else {\n\t                    for (var i in head) {\n\t                        var new_id = i;\n\t                        if (id !== '') {\n\t                            var separator = '|';\n\t                            if (head instanceof Array) {\n\t                                separator = '_';\n\t                            }\n\t                            new_id = id + separator + new_id;\n\t                        }\n\t                        search(new_id, head[i]);\n\t                    }\n\t                }\n\t            }\n\t            search('', response);\n\t            return result;\n\t        },\n\t\n\t        /** Map dom tree to dictionary tree with input elements.\n\t        */\n\t        _iterate: function (parent, dict) {\n\t            var self = this;\n\t            var children = $(parent).children();\n\t            children.each(function () {\n\t                var child = this;\n\t                var id = $(child).attr('id');\n\t                if ($(child).hasClass('section-row')) {\n\t                    var input = self.app.input_list[id];\n\t                    dict[id] = input && { input: input } || {};\n\t                    self._iterate(child, dict[id]);\n\t                } else {\n\t                    self._iterate(child, dict);\n\t                }\n\t            });\n\t        }\n\t    });\n\t\n\t    /** Match conditional values to selected cases\n\t     * @param{dict}   input     - Definition of conditional input parameter\n\t     * @param{dict}   value     - Current value\n\t     */\n\t    var matchCase = function (input, value) {\n\t        if (input.test_param.type == 'boolean') {\n\t            if (value == 'true') {\n\t                value = input.test_param.truevalue || 'true';\n\t            } else {\n\t                value = input.test_param.falsevalue || 'false';\n\t            }\n\t        }\n\t        for (var i in input.cases) {\n\t            if (input.cases[i].value == value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t\n\t    /** Visits tool inputs\n\t     * @param{dict}   inputs    - Nested dictionary of input elements\n\t     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n\t     */\n\t    var visitInputs = function (inputs, callback, prefix, context) {\n\t        context = $.extend(true, {}, context);\n\t        _.each(inputs, function (input) {\n\t            if (input && input.type && input.name) {\n\t                context[input.name] = input;\n\t            }\n\t        });\n\t        for (var key in inputs) {\n\t            var node = inputs[key];\n\t            node.name = node.name || key;\n\t            var name = prefix ? prefix + '|' + node.name : node.name;\n\t            switch (node.type) {\n\t                case 'repeat':\n\t                    _.each(node.cache, function (cache, j) {\n\t                        visitInputs(cache, callback, name + '_' + j, context);\n\t                    });\n\t                    break;\n\t                case 'conditional':\n\t                    if (node.test_param) {\n\t                        callback(node.test_param, name + '|' + node.test_param.name, context);\n\t                        var selectedCase = matchCase(node, node.test_param.value);\n\t                        if (selectedCase != -1) {\n\t                            visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n\t                        } else {\n\t                            Galaxy.emit.debug('form-data::visitInputs() - Invalid case for ' + name + '.');\n\t                        }\n\t                    } else {\n\t                        Galaxy.emit.debug('form-data::visitInputs() - Conditional test parameter missing for ' + name + '.');\n\t                    }\n\t                    break;\n\t                case 'section':\n\t                    visitInputs(node.inputs, callback, name, context);\n\t                    break;\n\t                default:\n\t                    callback(node, name, context);\n\t            }\n\t        }\n\t    };\n\t\n\t    return {\n\t        Manager: Manager,\n\t        visitInputs: visitInputs\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This class creates a ui table element. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.options = Utils.merge(options, {\n\t                content: 'No content available.',\n\t                onchange: null,\n\t                ondblclick: null,\n\t                onconfirm: null,\n\t                cls: 'ui-table',\n\t                selectable: true,\n\t                cls_tr: ''\n\t            });\n\t            this.setElement(this._template());\n\t            this.$thead = this.$('thead');\n\t            this.$tbody = this.$('tbody');\n\t            this.$tmessage = this.$('tmessage');\n\t            this.row = this._row();\n\t            this.row_count = 0;\n\t        },\n\t\n\t        events: {\n\t            'click': '_onclick',\n\t            'dblclick': '_ondblclick'\n\t        },\n\t\n\t        /** Add cell to header row */\n\t        addHeader: function ($el) {\n\t            this.row.append($('<th/>').append($el));\n\t        },\n\t\n\t        /** Append header row to table */\n\t        appendHeader: function () {\n\t            this.$thead.append(this.row);\n\t            this.row = $('<tr/>');\n\t        },\n\t\n\t        /** Add cell to row */\n\t        add: function ($el, width, align) {\n\t            var wrapper = $('<td/>');\n\t            if (width) {\n\t                wrapper.css('width', width);\n\t            }\n\t            if (align) {\n\t                wrapper.css('text-align', align);\n\t            }\n\t            this.row.append(wrapper.append($el));\n\t        },\n\t\n\t        /** Append row to table */\n\t        append: function (id, fade) {\n\t            this._commit(id, fade, false);\n\t        },\n\t\n\t        /** Prepend row to table */\n\t        prepend: function (id, fade) {\n\t            this._commit(id, fade, true);\n\t        },\n\t\n\t        /** Helper to get row element */\n\t        get: function (id) {\n\t            return this.$('#' + id);\n\t        },\n\t\n\t        /** Delete row by id */\n\t        del: function (id) {\n\t            var item = this.$tbody.find('#' + id);\n\t            if (item.length > 0) {\n\t                item.remove();\n\t                this.row_count--;\n\t                this._refresh();\n\t            }\n\t        },\n\t\n\t        /** Delete all rows */\n\t        delAll: function () {\n\t            this.$tbody.empty();\n\t            this.row_count = 0;\n\t            this._refresh();\n\t        },\n\t\n\t        /** Set a value i.e. selects/highlights a particular row by id */\n\t        value: function (new_value) {\n\t            if (this.options.selectable) {\n\t                this.before = this.$tbody.find('.current').attr('id');\n\t                if (new_value !== undefined) {\n\t                    this.$tbody.find('tr').removeClass('current');\n\t                    if (new_value) {\n\t                        this.$tbody.find('#' + new_value).addClass('current');\n\t                    }\n\t                }\n\t                var after = this.$tbody.find('.current').attr('id');\n\t                if (after === undefined) {\n\t                    return null;\n\t                } else {\n\t                    if (after != this.before && this.options.onchange) {\n\t                        this.options.onchange(new_value);\n\t                    }\n\t                    return after;\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Return the number of rows */\n\t        size: function () {\n\t            return this.$tbody.find('tr').length;\n\t        },\n\t\n\t        /** Helper to append rows */\n\t        _commit: function (id, fade, prepend) {\n\t            this.del(id);\n\t            this.row.attr('id', id);\n\t            if (prepend) {\n\t                this.$tbody.prepend(this.row);\n\t            } else {\n\t                this.$tbody.append(this.row);\n\t            }\n\t            if (fade) {\n\t                this.row.hide();\n\t                this.row.fadeIn();\n\t            }\n\t            this.row = this._row();\n\t            this.row_count++;\n\t            this._refresh();\n\t        },\n\t\n\t        /** Helper to create new row */\n\t        _row: function () {\n\t            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n\t        },\n\t\n\t        /** Handles onclick events */\n\t        _onclick: function (e) {\n\t            var old_value = this.value();\n\t            var new_value = $(e.target).closest('tr').attr('id');\n\t            if (new_value != '') {\n\t                if (new_value && old_value != new_value) {\n\t                    if (this.options.onconfirm) {\n\t                        this.options.onconfirm(new_value);\n\t                    } else {\n\t                        this.value(new_value);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Handles ondblclick events */\n\t        _ondblclick: function (e) {\n\t            var value = this.value();\n\t            if (value && this.options.ondblclick) {\n\t                this.options.ondblclick(value);\n\t            }\n\t        },\n\t\n\t        /** Refresh helper */\n\t        _refresh: function () {\n\t            if (this.row_count == 0) {\n\t                this.$tmessage.show();\n\t            } else {\n\t                this.$tmessage.hide();\n\t            }\n\t        },\n\t\n\t        /** Template */\n\t        _template: function () {\n\t            return '<div>' + '<table class=\"' + this.options.cls + '\">' + '<thead/>' + '<tbody/>' + '</table>' + '<tmessage>' + this.options.content + '</tmessage>' + '<div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */,\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t    This class creates a form input element wrapper\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return Backbone.View.extend({\n\t        initialize: function (app, options) {\n\t            this.app = app;\n\t            this.app_options = app.model ? app.model.attributes : {};\n\t            this.field = options && options.field || new Backbone.View();\n\t            this.model = options && options.model || new Backbone.Model({\n\t                text_enable: this.app_options.text_enable || 'Enable',\n\t                text_disable: this.app_options.text_disable || 'Disable',\n\t                cls_enable: this.app_options.cls_enable || 'fa fa-caret-square-o-down',\n\t                cls_disable: this.app_options.cls_disable || 'fa fa-caret-square-o-up',\n\t                always_refresh: this.app_options.always_refresh\n\t            }).set(options);\n\t\n\t            // set element and link components\n\t            this.setElement(this._template());\n\t            this.$field = this.$('.ui-form-field');\n\t            this.$info = this.$('.ui-form-info');\n\t            this.$preview = this.$('.ui-form-preview');\n\t            this.$collapsible = this.$('.ui-form-collapsible');\n\t            this.$collapsible_text = this.$('.ui-form-collapsible-text');\n\t            this.$collapsible_icon = this.$('.ui-form-collapsible-icon');\n\t            this.$title = this.$('.ui-form-title');\n\t            this.$title_text = this.$('.ui-form-title-text');\n\t            this.$error_text = this.$('.ui-form-error-text');\n\t            this.$error = this.$('.ui-form-error');\n\t            this.$backdrop = this.$('.ui-form-backdrop');\n\t\n\t            // add field element\n\t            this.$field.prepend(this.field.$el);\n\t\n\t            // decide wether to expand or collapse fields\n\t            var collapsible_value = this.model.get('collapsible_value');\n\t            this.field.collapsed = collapsible_value !== undefined && JSON.stringify(this.model.get('value')) == JSON.stringify(collapsible_value);\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t\n\t            // add click handler\n\t            var self = this;\n\t            this.$collapsible.on('click', function () {\n\t                self.field.collapsed = !self.field.collapsed;\n\t                app.trigger && app.trigger('change');\n\t                self.render();\n\t            });\n\t\n\t            // hide error on value change\n\t            if (this.field.model && !this.model.get('always_refresh')) {\n\t                this.listenTo(this.field.model, 'change:value', function () {\n\t                    self.reset();\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Set backdrop for input element */\n\t        backdrop: function () {\n\t            this.model.set('backdrop', true);\n\t        },\n\t\n\t        /** Set error text */\n\t        error: function (text) {\n\t            this.model.set('error_text', text);\n\t        },\n\t\n\t        /** Reset this view */\n\t        reset: function () {\n\t            !this.model.get('fixed') && this.model.set('error_text', null);\n\t        },\n\t\n\t        render: function () {\n\t            // render help\n\t            $('.tooltip').hide();\n\t            var help_text = this.model.get('help', '');\n\t            var help_argument = this.model.get('argument');\n\t            if (help_argument && help_text.indexOf('(' + help_argument + ')') == -1) {\n\t                help_text += ' (' + help_argument + ')';\n\t            }\n\t            this.$info.html(help_text);\n\t            // render visibility\n\t            this.$el[this.model.get('hidden') ? 'hide' : 'show']();\n\t            // render preview view for collapsed fields\n\t            this.$preview[this.field.collapsed && this.model.get('collapsible_preview') || this.model.get('disabled') ? 'show' : 'hide']().html(_.escape(this.model.get('text_value')));\n\t            // render error messages\n\t            var error_text = this.model.get('error_text');\n\t            this.$error[error_text ? 'show' : 'hide']();\n\t            this.$el[error_text ? 'addClass' : 'removeClass']('ui-error');\n\t            this.$error_text.html(error_text);\n\t            // render backdrop\n\t            this.$backdrop[this.model.get('backdrop') ? 'show' : 'hide']();\n\t            // render input field\n\t            this.field.collapsed || this.model.get('disabled') ? this.$field.hide() : this.$field.show();\n\t            // render input field color and style\n\t            this.field.model && this.field.model.set({ 'color': this.model.get('color'), 'style': this.model.get('style') });\n\t            // render collapsible options\n\t            if (!this.model.get('disabled') && this.model.get('collapsible_value') !== undefined) {\n\t                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n\t                this.$title_text.hide();\n\t                this.$collapsible.show();\n\t                this.$collapsible_text.text(this.model.get('label'));\n\t                this.$collapsible_icon.removeClass().addClass('icon').addClass(this.model.get('cls_' + collapsible_state)).attr('data-original-title', this.model.get('text_' + collapsible_state)).tooltip({ placement: 'bottom' });\n\t            } else {\n\t                this.$title_text.show().text(this.model.get('label'));\n\t                this.$collapsible.hide();\n\t            }\n\t        },\n\t\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-form-element').append($('<div/>').addClass('ui-form-error ui-error').append($('<span/>').addClass('fa fa-arrow-down')).append($('<span/>').addClass('ui-form-error-text'))).append($('<div/>').addClass('ui-form-title').append($('<div/>').addClass('ui-form-collapsible').append($('<i/>').addClass('ui-form-collapsible-icon')).append($('<span/>').addClass('ui-form-collapsible-text'))).append($('<span/>').addClass('ui-form-title-text'))).append($('<div/>').addClass('ui-form-field').append($('<span/>').addClass('ui-form-info')).append($('<div/>').addClass('ui-form-backdrop'))).append($('<div/>').addClass('ui-form-preview'));\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This class creates input elements. New input parameter types should be added to the types dictionary.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(36), __webpack_require__(38), __webpack_require__(37), __webpack_require__(34)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, SelectContent, SelectLibrary, SelectFtp, ColorPicker) {\n\t\n\t    // create form view\n\t    return Backbone.Model.extend({\n\t        /** Available parameter types */\n\t        types: {\n\t            'text': '_fieldText',\n\t            'password': '_fieldText',\n\t            'select': '_fieldSelect',\n\t            'data_column': '_fieldSelect',\n\t            'genomebuild': '_fieldSelect',\n\t            'data': '_fieldData',\n\t            'data_collection': '_fieldData',\n\t            'integer': '_fieldSlider',\n\t            'float': '_fieldSlider',\n\t            'boolean': '_fieldBoolean',\n\t            'drill_down': '_fieldDrilldown',\n\t            'color': '_fieldColor',\n\t            'hidden': '_fieldHidden',\n\t            'hidden_data': '_fieldHidden',\n\t            'baseurl': '_fieldHidden',\n\t            'library_data': '_fieldLibrary',\n\t            'ftpfile': '_fieldFtp',\n\t            'upload': '_fieldUpload'\n\t        },\n\t\n\t        /** Returns an input field for a given field type */\n\t        create: function (input_def) {\n\t            var fieldClass = this.types[input_def.type];\n\t            var field = typeof this[fieldClass] === 'function' ? this[fieldClass].call(this, input_def) : null;\n\t            if (!field) {\n\t                field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n\t                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n\t            }\n\t            input_def.value === undefined && (input_def.value = null);\n\t            field.value(input_def.value);\n\t            return field;\n\t        },\n\t\n\t        /** Data input field */\n\t        _fieldData: function (input_def) {\n\t            return new SelectContent.View({\n\t                id: 'field-' + input_def.id,\n\t                extensions: input_def.extensions,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                type: input_def.type,\n\t                flavor: input_def.flavor,\n\t                data: input_def.options,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Select/Checkbox/Radio options field */\n\t        _fieldSelect: function (input_def) {\n\t            // show text field e.g. in workflow editor\n\t            if (input_def.is_workflow) {\n\t                return this._fieldText(input_def);\n\t            }\n\t\n\t            // customize properties\n\t            if (input_def.type == 'data_column') {\n\t                input_def.error_text = 'Missing columns in referenced dataset.';\n\t            }\n\t\n\t            // identify available options\n\t            var data = input_def.data;\n\t            if (!data) {\n\t                data = [];\n\t                _.each(input_def.options, function (option) {\n\t                    data.push({ label: option[0], value: option[1] });\n\t                });\n\t            }\n\t\n\t            // identify display type\n\t            var SelectClass = Ui.Select;\n\t            switch (input_def.display) {\n\t                case 'checkboxes':\n\t                    SelectClass = Ui.Checkbox;\n\t                    break;\n\t                case 'radio':\n\t                    SelectClass = Ui.Radio;\n\t                    break;\n\t                case 'radiobutton':\n\t                    SelectClass = Ui.RadioButton;\n\t                    break;\n\t            }\n\t\n\t            // create select field\n\t            return new SelectClass.View({\n\t                id: 'field-' + input_def.id,\n\t                data: data,\n\t                error_text: input_def.error_text || 'No options available',\n\t                multiple: input_def.multiple,\n\t                optional: input_def.optional,\n\t                onchange: input_def.onchange,\n\t                searchable: input_def.flavor !== 'workflow'\n\t            });\n\t        },\n\t\n\t        /** Drill down options field */\n\t        _fieldDrilldown: function (input_def) {\n\t            // show text field e.g. in workflow editor\n\t            if (input_def.is_workflow) {\n\t                return this._fieldText(input_def);\n\t            }\n\t\n\t            // create drill down field\n\t            return new Ui.Drilldown.View({\n\t                id: 'field-' + input_def.id,\n\t                data: input_def.options,\n\t                display: input_def.display,\n\t                optional: input_def.optional,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Text input field */\n\t        _fieldText: function (input_def) {\n\t            // field replaces e.g. a select field\n\t            if (input_def.options && input_def.data) {\n\t                input_def.area = input_def.multiple;\n\t                if (Utils.isEmpty(input_def.value)) {\n\t                    input_def.value = null;\n\t                } else {\n\t                    if ($.isArray(input_def.value)) {\n\t                        var str_value = '';\n\t                        for (var i in input_def.value) {\n\t                            str_value += String(input_def.value[i]);\n\t                            if (!input_def.multiple) {\n\t                                break;\n\t                            }\n\t                            str_value += '\\n';\n\t                        }\n\t                        input_def.value = str_value;\n\t                    }\n\t                }\n\t            }\n\t            // create input element\n\t            return new Ui.Input({\n\t                id: 'field-' + input_def.id,\n\t                type: input_def.type,\n\t                area: input_def.area,\n\t                readonly: input_def.readonly,\n\t                placeholder: input_def.placeholder,\n\t                datalist: input_def.datalist,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Slider field */\n\t        _fieldSlider: function (input_def) {\n\t            return new Ui.Slider.View({\n\t                id: 'field-' + input_def.id,\n\t                precise: input_def.type == 'float',\n\t                is_workflow: input_def.is_workflow,\n\t                min: input_def.min,\n\t                max: input_def.max,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Hidden field */\n\t        _fieldHidden: function (input_def) {\n\t            return new Ui.Hidden({\n\t                id: 'field-' + input_def.id,\n\t                info: input_def.info\n\t            });\n\t        },\n\t\n\t        /** Boolean field */\n\t        _fieldBoolean: function (input_def) {\n\t            return new Ui.RadioButton.View({\n\t                id: 'field-' + input_def.id,\n\t                data: [{ label: 'Yes', value: 'true' }, { label: 'No', value: 'false' }],\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Color picker field */\n\t        _fieldColor: function (input_def) {\n\t            return new ColorPicker({\n\t                id: 'field-' + input_def.id,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Library dataset field */\n\t        _fieldLibrary: function (input_def) {\n\t            return new SelectLibrary.View({\n\t                id: 'field-' + input_def.id,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** FTP file field */\n\t        _fieldFtp: function (input_def) {\n\t            return new SelectFtp.View({\n\t                id: 'field-' + input_def.id,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Upload file field */\n\t        _fieldUpload: function (input_def) {\n\t            return new Ui.Upload({\n\t                id: 'field-' + input_def.id,\n\t                onchange: input_def.onchange\n\t            });\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/** This class creates a ui component which enables the dynamic creation of portlets */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.list = {};\n\t            this.options = Utils.merge(options, {\n\t                title: 'Repeat',\n\t                empty_text: 'Not available.',\n\t                max: null,\n\t                min: null\n\t            });\n\t            this.button_new = new Ui.ButtonIcon({\n\t                icon: 'fa-plus',\n\t                title: 'Insert ' + this.options.title,\n\t                tooltip: 'Add new ' + this.options.title + ' block',\n\t                floating: 'clear',\n\t                cls: 'ui-button-icon form-repeat-add',\n\t                onclick: function () {\n\t                    options.onnew && options.onnew();\n\t                }\n\t            });\n\t            this.setElement($('<div/>').append(this.$list = $('<div/>')).append($('<div/>').append(this.button_new.$el)));\n\t        },\n\t\n\t        /** Number of repeat blocks */\n\t        size: function () {\n\t            return _.size(this.list);\n\t        },\n\t\n\t        /** Add new repeat block */\n\t        add: function (options) {\n\t            if (!options.id || this.list[options.id]) {\n\t                Galaxy.emit.debug('form-repeat::add()', 'Duplicate or invalid repeat block id.');\n\t                return;\n\t            }\n\t            var button_delete = new Ui.ButtonIcon({\n\t                icon: 'fa-trash-o',\n\t                tooltip: 'Delete this repeat block',\n\t                cls: 'ui-button-icon-plain form-repeat-delete',\n\t                onclick: function () {\n\t                    options.ondel && options.ondel();\n\t                }\n\t            });\n\t            var portlet = new Portlet.View({\n\t                id: options.id,\n\t                title: 'placeholder',\n\t                cls: options.cls || 'ui-portlet-repeat',\n\t                operations: { button_delete: button_delete }\n\t            });\n\t            portlet.append(options.$el);\n\t            portlet.$el.addClass('section-row').hide();\n\t            this.list[options.id] = portlet;\n\t            this.$list.append(portlet.$el.fadeIn('fast'));\n\t            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n\t            this._refresh();\n\t        },\n\t\n\t        /** Delete repeat block */\n\t        del: function (id) {\n\t            if (!this.list[id]) {\n\t                Galaxy.emit.debug('form-repeat::del()', 'Invalid repeat block id.');\n\t                return;\n\t            }\n\t            this.$list.find('#' + id).remove();\n\t            delete this.list[id];\n\t            this.button_new.enable();\n\t            this._refresh();\n\t        },\n\t\n\t        /** Remove all */\n\t        delAll: function () {\n\t            for (var id in this.list) {\n\t                this.del(id);\n\t            }\n\t        },\n\t\n\t        /** Hides add/del options */\n\t        hideOptions: function () {\n\t            this.button_new.$el.hide();\n\t            _.each(this.list, function (portlet) {\n\t                portlet.hideOperation('button_delete');\n\t            });\n\t            _.isEmpty(this.list) && this.$el.append($('<div/>').addClass('ui-form-info').html(this.options.empty_text));\n\t        },\n\t\n\t        /** Refresh view */\n\t        _refresh: function () {\n\t            var index = 0;\n\t            for (var id in this.list) {\n\t                var portlet = this.list[id];\n\t                portlet.title(++index + ': ' + this.options.title);\n\t                portlet[this.size() > this.options.min ? 'showOperation' : 'hideOperation']('button_delete');\n\t            }\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {/**\n\t    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(9), __webpack_require__(30), __webpack_require__(28), __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (app, options) {\n\t            this.app = app;\n\t            this.inputs = options.inputs;\n\t            this.parameters = new Parameters();\n\t            this.setElement($('<div/>'));\n\t            this.render();\n\t        },\n\t\n\t        /** Render section view */\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.empty();\n\t            _.each(this.inputs, function (input) {\n\t                self.add(input);\n\t            });\n\t        },\n\t\n\t        /** Add a new input element */\n\t        add: function (input) {\n\t            var input_def = jQuery.extend(true, {}, input);\n\t            input_def.id = input.id = Utils.uid();\n\t            this.app.input_list[input_def.id] = input_def;\n\t            switch (input_def.type) {\n\t                case 'conditional':\n\t                    this._addConditional(input_def);\n\t                    break;\n\t                case 'repeat':\n\t                    this._addRepeat(input_def);\n\t                    break;\n\t                case 'section':\n\t                    this._addSection(input_def);\n\t                    break;\n\t                default:\n\t                    this._addRow(input_def);\n\t            }\n\t        },\n\t\n\t        /** Add a conditional block */\n\t        _addConditional: function (input_def) {\n\t            var self = this;\n\t            input_def.test_param.id = input_def.id;\n\t            this.app.model.get('sustain_conditionals') && (input_def.test_param.disabled = true);\n\t            var field = this._addRow(input_def.test_param);\n\t\n\t            // set onchange event for test parameter\n\t            field.model && field.model.set('onchange', function (value) {\n\t                var selectedCase = self.app.data.matchCase(input_def, value);\n\t                for (var i in input_def.cases) {\n\t                    var case_def = input_def.cases[i];\n\t                    var section_row = self.$('#' + input_def.id + '-section-' + i);\n\t                    var nonhidden = false;\n\t                    for (var j in case_def.inputs) {\n\t                        if (!case_def.inputs[j].hidden) {\n\t                            nonhidden = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (i == selectedCase && nonhidden) {\n\t                        section_row.fadeIn('fast');\n\t                    } else {\n\t                        section_row.hide();\n\t                    }\n\t                }\n\t                self.app.trigger('change');\n\t            });\n\t\n\t            // add conditional sub sections\n\t            for (var i in input_def.cases) {\n\t                var sub_section = new View(this.app, { inputs: input_def.cases[i].inputs });\n\t                this._append(sub_section.$el.addClass('ui-form-section'), input_def.id + '-section-' + i);\n\t            }\n\t\n\t            // trigger refresh on conditional input field after all input elements have been created\n\t            field.trigger('change');\n\t        },\n\t\n\t        /** Add a repeat block */\n\t        _addRepeat: function (input_def) {\n\t            var self = this;\n\t            var block_index = 0;\n\t\n\t            // create repeat block element\n\t            var repeat = new Repeat.View({\n\t                title: input_def.title || 'Repeat',\n\t                min: input_def.min,\n\t                max: input_def.max,\n\t                onnew: function () {\n\t                    create(input_def.inputs);self.app.trigger('change');\n\t                }\n\t            });\n\t\n\t            // helper function to create new repeat blocks\n\t            function create(inputs) {\n\t                var sub_section_id = input_def.id + '-section-' + block_index++;\n\t                var sub_section = new View(self.app, { inputs: inputs });\n\t                repeat.add({ id: sub_section_id,\n\t                    $el: sub_section.$el,\n\t                    ondel: function () {\n\t                        repeat.del(sub_section_id);self.app.trigger('change');\n\t                    } });\n\t            }\n\t\n\t            //\n\t            // add parsed/minimum number of repeat blocks\n\t            //\n\t            var n_cache = _.size(input_def.cache);\n\t            for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n\t                create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n\t            }\n\t\n\t            // hide options\n\t            this.app.model.get('sustain_repeats') && repeat.hideOptions();\n\t\n\t            // create input field wrapper\n\t            var input_element = new InputElement(this.app, {\n\t                label: input_def.title || input_def.name,\n\t                help: input_def.help,\n\t                field: repeat\n\t            });\n\t            this._append(input_element.$el, input_def.id);\n\t        },\n\t\n\t        /** Add a customized section */\n\t        _addSection: function (input_def) {\n\t            var portlet = new Portlet.View({\n\t                title: input_def.title || input_def.name,\n\t                cls: 'ui-portlet-section',\n\t                collapsible: true,\n\t                collapsible_button: true,\n\t                collapsed: !input_def.expanded\n\t            });\n\t            portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n\t            portlet.append($('<div/>').addClass('ui-form-info').html(input_def.help));\n\t            this.app.on('expand', function (input_id) {\n\t                portlet.$('#' + input_id).length > 0 && portlet.expand();\n\t            });\n\t            this._append(portlet.$el, input_def.id);\n\t        },\n\t\n\t        /** Add a single input field element */\n\t        _addRow: function (input_def) {\n\t            var self = this;\n\t            var id = input_def.id;\n\t            input_def.onchange = input_def.onchange || function () {\n\t                self.app.trigger('change', id);\n\t            };\n\t            var field = this.parameters.create(input_def);\n\t            this.app.field_list[id] = field;\n\t            var input_element = new InputElement(this.app, {\n\t                name: input_def.name,\n\t                label: input_def.hide_label ? '' : input_def.label || input_def.name,\n\t                value: input_def.value,\n\t                text_value: input_def.text_value,\n\t                collapsible_value: input_def.collapsible_value,\n\t                collapsible_preview: input_def.collapsible_preview,\n\t                help: input_def.help,\n\t                argument: input_def.argument,\n\t                disabled: input_def.disabled,\n\t                color: input_def.color,\n\t                style: input_def.style,\n\t                backdrop: input_def.backdrop,\n\t                hidden: input_def.hidden,\n\t                fixed: input_def.fixed,\n\t                field: field\n\t            });\n\t            this.app.element_list[id] = input_element;\n\t            this._append(input_element.$el, input_def.id);\n\t            return field;\n\t        },\n\t\n\t        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n\t        _append: function ($el, id) {\n\t            this.$el.append($el.addClass('section-row').attr('id', id));\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\n\t    // grid model\n\t    return Backbone.Model.extend({\n\t        defaults: {\n\t            url_base: '',\n\t            async: false,\n\t            async_ops: [],\n\t            categorical_filters: [],\n\t            filters: {},\n\t            sort_key: null,\n\t            show_item_checkboxes: false,\n\t            advanced_search: false,\n\t            cur_page: 1,\n\t            num_pages: 1,\n\t            operation: undefined,\n\t            item_ids: undefined\n\t        },\n\t\n\t        /**\n\t         * Return true if operation can be done asynchronously.\n\t         */\n\t        can_async_op: function (op) {\n\t            return _.indexOf(this.attributes.async_ops, op) !== -1;\n\t        },\n\t\n\t        /**\n\t         * Add filtering criterion.\n\t         */\n\t        add_filter: function (key, value, append) {\n\t            // Update URL arg with new condition.            \n\t            if (append) {\n\t                // Update or append value.\n\t                var cur_val = this.attributes.filters[key],\n\t                    new_val;\n\t                if (cur_val === null || cur_val === undefined) {\n\t                    new_val = value;\n\t                } else if (typeof cur_val == 'string') {\n\t                    if (cur_val == 'All') {\n\t                        new_val = value;\n\t                    } else {\n\t                        // Replace string with array.\n\t                        var values = [];\n\t                        values[0] = cur_val;\n\t                        values[1] = value;\n\t                        new_val = values;\n\t                    }\n\t                } else {\n\t                    // Current value is an array.\n\t                    new_val = cur_val;\n\t                    new_val.push(value);\n\t                }\n\t                this.attributes.filters[key] = new_val;\n\t            } else {\n\t                // Replace value.\n\t                this.attributes.filters[key] = value;\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Remove filtering criterion.\n\t         */\n\t        remove_filter: function (key, condition) {\n\t            var cur_val = this.attributes.filters[key];\n\t            if (cur_val === null || cur_val === undefined) {\n\t                return false;\n\t            }\n\t\n\t            if (typeof cur_val === 'string') {\n\t                // overwrite/remove condition.\n\t                this.attributes.filters[key] = '';\n\t            } else {\n\t                // filter contains an array of conditions.\n\t                var condition_index = _.indexOf(cur_val, condition);\n\t                if (condition_index !== -1) {\n\t                    cur_val[condition_index] = '';\n\t                }\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Returns URL data for obtaining a new grid.\n\t         */\n\t        get_url_data: function () {\n\t            var url_data = {\n\t                async: this.attributes.async,\n\t                sort: this.attributes.sort_key,\n\t                page: this.attributes.cur_page,\n\t                show_item_checkboxes: this.attributes.show_item_checkboxes,\n\t                advanced_search: this.attributes.advanced_search\n\t            };\n\t\n\t            // Add operation, item_ids only if they have values.\n\t            if (this.attributes.operation) {\n\t                url_data.operation = this.attributes.operation;\n\t            }\n\t            if (this.attributes.item_ids) {\n\t                url_data.id = this.attributes.item_ids;\n\t            }\n\t\n\t            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n\t            var self = this;\n\t            _.each(_.pairs(self.attributes.filters), function (k) {\n\t                url_data['f-' + k[0]] = k[1];\n\t            });\n\t            return url_data;\n\t        },\n\t\n\t        // Return URL for obtaining a new grid\n\t        get_url: function (args) {\n\t            return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n\t        }\n\t\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery, _) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t\n\t    // grid view templates\n\t    return {\n\t        // template\n\t        grid: function (options) {\n\t            var tmpl = '';\n\t            if (options.embedded) {\n\t                tmpl = this.grid_header(options) + this.grid_table(options);\n\t            } else {\n\t                tmpl = '<div class=\"loading-elt-overlay\"></div>' + '<table>' + '<tr>' + '<td width=\"75%\">' + this.grid_header(options) + '</td>' + '<td></td>' + '<td></td>' + '</tr>' + '<tr>' + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + '<td></td>' + '<td></td>' + '</tr>' + '</table>' + this.grid_table(options);\n\t            }\n\t\n\t            // add info text\n\t            if (options.info_text) {\n\t                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_table: function (options) {\n\t            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + '</table>' + '</form>';\n\t        },\n\t\n\t        // template\n\t        grid_header: function (options) {\n\t            var tmpl = '<div class=\"grid-header\">';\n\t            if (!options.embedded) {\n\t                tmpl += '<h2>' + options.title + '</h2>';\n\t            }\n\t            if (options.global_actions) {\n\t                tmpl += '<ul class=\"manage-table-actions\">';\n\t                var show_popup = options.global_actions.length >= 3;\n\t                if (show_popup) {\n\t                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n\t                }\n\t                for (i in options.global_actions) {\n\t                    var action = options.global_actions[i];\n\t                    tmpl += '<li>' + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' + '</li>';\n\t                }\n\t                if (show_popup) {\n\t                    tmpl += '</div>';\n\t                }\n\t                tmpl += '</ul>';\n\t            }\n\t            if (options.insert) {\n\t                tmpl += options.insert;\n\t            }\n\t\n\t            // add grid filters\n\t            tmpl += this.grid_filters(options);\n\t            tmpl += '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        header: function (options) {\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            // add checkbox\n\t            if (options.show_item_checkboxes) {\n\t                tmpl += '<th>';\n\t                if (options.items.length > 0) {\n\t                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n\t                }\n\t                tmpl += '</th>';\n\t            }\n\t\n\t            // create header elements\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.visible) {\n\t                    tmpl += '<th id=\"' + column.key + '-header\">';\n\t                    if (column.href) {\n\t                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n\t                    } else {\n\t                        tmpl += column.label;\n\t                    }\n\t                    tmpl += '<span class=\"sort-arrow\">' + column.extra + '</span>' + '</th>';\n\t                }\n\t            }\n\t\n\t            // finalize\n\t            tmpl += '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        body: function (options) {\n\t            // initialize\n\t            var tmpl = '';\n\t            var num_rows_rendered = 0;\n\t            var items_length = options.items.length;\n\t\n\t            // empty grid?\n\t            if (items_length == 0) {\n\t                // No results.\n\t                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n\t                num_rows_rendered = 1;\n\t            }\n\t\n\t            // create rows\n\t            for (var i in options.items) {\n\t\n\t                // encode ids\n\t                var item = options.items[i];\n\t                var encoded_id = item.encode_id;\n\t                var popupmenu_id = 'grid-' + i + '-popup';\n\t\n\t                // Tag current\n\t                tmpl += '<tr ';\n\t                if (options.current_item_id == item.id) {\n\t                    tmpl += 'class=\"current\"';\n\t                }\n\t                tmpl += '>';\n\t\n\t                // Item selection column\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + '</td>';\n\t                }\n\t\n\t                // Data columns\n\t                for (j in options.columns) {\n\t                    var column = options.columns[j];\n\t                    if (column.visible) {\n\t                        // Nowrap\n\t                        var nowrap = '';\n\t                        if (column.nowrap) {\n\t                            nowrap = 'style=\"white-space:nowrap;\"';\n\t                        }\n\t\n\t                        // get column settings\n\t                        var column_settings = item.column_config[column.label];\n\t\n\t                        // load attributes\n\t                        var link = column_settings.link;\n\t                        var value = column_settings.value;\n\t                        var target = column_settings.target;\n\t\n\t                        // unescape value\n\t                        if (jQuery.type(value) === 'string') {\n\t                            value = value.replace(/\\/\\//g, '/');\n\t                        }\n\t\n\t                        // Attach popup menu?\n\t                        var id = '';\n\t                        var cls = '';\n\t                        if (column.attach_popup) {\n\t                            id = 'grid-' + i + '-popup';\n\t                            cls = 'menubutton';\n\t                            if (link != '') {\n\t                                cls += ' split';\n\t                            }\n\t                            cls += ' popup';\n\t                        }\n\t\n\t                        // Check for row wrapping\n\t                        tmpl += '<td ' + nowrap + '>';\n\t\n\t                        // Link\n\t                        if (link) {\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n\t                            }\n\t                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '</div>';\n\t                            }\n\t                        } else {\n\t                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n\t                        }\n\t                        tmpl += '</td>';\n\t                    }\n\t                }\n\t                tmpl += '</tr>';\n\t                num_rows_rendered++;\n\t            }\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        footer: function (options) {\n\t\n\t            // create template string\n\t            var tmpl = '';\n\t\n\t            // paging\n\t            if (options.use_paging && options.num_pages > 1) {\n\t                // get configuration\n\t                var num_page_links = options.num_page_links;\n\t                var cur_page_num = options.cur_page_num;\n\t                var num_pages = options.num_pages;\n\t\n\t                // First pass on min page.\n\t                var page_link_range = num_page_links / 2;\n\t                var min_page = cur_page_num - page_link_range;\n\t                var min_offset = 0;\n\t                if (min_page <= 0) {\n\t                    // Min page is too low.\n\t                    min_page = 1;\n\t                    min_offset = page_link_range - (cur_page_num - min_page);\n\t                }\n\t\n\t                // Set max page.\n\t                var max_range = page_link_range + min_offset;\n\t                var max_page = cur_page_num + max_range;\n\t                if (max_page <= num_pages) {\n\t                    // Max page is fine.\n\t                    max_offset = 0;\n\t                } else {\n\t                    // Max page is too high.\n\t                    max_page = num_pages;\n\t                    // +1 to account for the +1 in the loop below.\n\t                    max_offset = max_range - (max_page + 1 - cur_page_num);\n\t                }\n\t\n\t                // Second and final pass on min page to add any unused\n\t                // offset from max to min.\n\t                if (max_offset != 0) {\n\t                    min_page -= max_offset;\n\t                    if (min_page < 1) {\n\t                        min_page = 1;\n\t                    }\n\t                }\n\t\n\t                // template header\n\t                tmpl += '<tr id=\"page-links-row\">';\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td></td>';\n\t                }\n\t                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + 'Page:';\n\t\n\t                if (min_page > 1) {\n\t                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n\t                }\n\t\n\t                // create page urls\n\t                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n\t\n\t                    if (page_index == options.cur_page_num) {\n\t                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n\t                    }\n\t                }\n\t\n\t                // show last page\n\t                if (max_page < num_pages) {\n\t                    tmpl += '...' + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n\t                }\n\t                tmpl += '</span>';\n\t\n\t                // Show all link\n\t                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + '</td>' + '</tr>';\n\t            }\n\t\n\t            // Grid operations for multiple items.\n\t            if (options.show_item_checkboxes) {\n\t                // start template\n\t                tmpl += '<tr>' + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + '<td></td>' + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\t\n\t                // configure buttons for operations\n\t                for (i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.allow_multiple) {\n\t                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n\t                    }\n\t                }\n\t\n\t                // finalize template\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // count global operations\n\t            var found_global = false;\n\t            for (i in options.operations) {\n\t                if (options.operations[i].global_operation) {\n\t                    found_global = true;\n\t                    break;\n\t                }\n\t            }\n\t\n\t            // add global operations\n\t            if (found_global) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">';\n\t                for (i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.global_operation) {\n\t                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n\t                    }\n\t                }\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // add legend\n\t            if (options.legend) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">' + options.legend + '</td>' + '</tr>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        message: function (options) {\n\t            var status = options.status == 'success' ? 'done' : options.status;\n\t            return '<p>' + '<div class=\"' + status + 'message transient-message\">' + _.escape(options.message) + '</div>' + '<div style=\"clear: both\"></div>' + '</p>';\n\t        },\n\t\n\t        // template\n\t        grid_filters: function (options) {\n\t\n\t            // get filters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t\n\t            // show advanced search if flag set or if there are filters for advanced search fields\n\t            var advanced_search_display = 'none';\n\t            if (options.advanced_search) {\n\t                advanced_search_display = 'block';\n\t            }\n\t\n\t            // identify columns with advanced filtering\n\t            var show_advanced_search_link = false;\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    var column_key = column.key;\n\t                    var f_key = filters[column_key];\n\t                    var d_key = default_filter_dict[column_key];\n\t                    if (f_key && d_key && f_key != d_key) {\n\t                        advanced_search_display = 'block';\n\t                    }\n\t                    show_advanced_search_link = true;\n\t                }\n\t            }\n\t\n\t            // hide standard search if advanced is shown\n\t            var standard_search_display = 'block';\n\t            if (advanced_search_display == 'block') {\n\t                standard_search_display = 'none';\n\t            }\n\t\n\t            //\n\t            // standard search\n\t            //\n\t            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + '<table>' + '<tr>' + '<td style=\"padding: 0;\">' + '<table>';\n\t\n\t            // add standard filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'standard') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize standard search\n\t            tmpl += '</table>' + '</td>' + '</tr>' + '<tr>' + '<td>';\n\t\n\t            // show advanced search link in standard display\n\t            if (show_advanced_search_link) {\n\t                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n\t            }\n\t\n\t            // finalize standard search display\n\t            tmpl += '</td>' + '</tr>' + '</table>' + '</div>';\n\t\n\t            //\n\t            // advanced search\n\t            //\n\t            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + '<table>' + '<tr>' + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + '</td>' + '</tr>';\n\t\n\t            // add advanced filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize advanced search template\n\t            tmpl += '</table>' + '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_column_filter: function (options, column) {\n\t\n\t            // collect parameters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t            var column_label = column.label;\n\t            var column_key = column.key;\n\t            if (column.filterable == 'advanced') {\n\t                column_label = column_label.toLowerCase();\n\t            }\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            if (column.filterable == 'advanced') {\n\t                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n\t            }\n\t            tmpl += '<td style=\"padding-bottom: 1px;\">';\n\t            if (column.is_text) {\n\t                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n\t                // Carry forward filtering criteria with hidden inputs.\n\t                for (i in options.columns) {\n\t                    var temp_column = options.columns[i];\n\t                    var filter_value = filters[temp_column.key];\n\t                    if (filter_value) {\n\t                        if (filter_value != 'All') {\n\t                            if (temp_column.is_text) {\n\t                                filter_value = JSON.stringify(filter_value);\n\t                            }\n\t                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n\t                        }\n\t                    }\n\t                }\n\t                // Print current filtering criteria and links to delete.\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add filters\n\t                var column_filter = filters[column_key];\n\t                if (column_filter) {\n\t                    // identify type\n\t                    var type = jQuery.type(column_filter);\n\t\n\t                    // single filter value\n\t                    if (type == 'string') {\n\t                        if (column_filter != 'All') {\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, column_filter);\n\t                        }\n\t                    }\n\t\n\t                    // multiple filter values\n\t                    if (type == 'array') {\n\t                        for (var i in column_filter) {\n\t                            // get filter\n\t                            var filter = column_filter[i];\n\t\n\t                            // copy filters and remove entry\n\t                            var params = column_filter;\n\t                            params = params.slice(i);\n\t\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, filter);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // close span\n\t                tmpl += '</span>';\n\t\n\t                // Set value, size of search input field. Minimum size is 20 characters.\n\t                var value = '';\n\t                if (column.filterable == 'standard') {\n\t                    value = column.label.toLowerCase();\n\t                    var size = value.length;\n\t                    if (size < 20) {\n\t                        size = 20;\n\t                    }\n\t                    // +4 to account for space after placeholder\n\t                    size = size + 4;\n\t                }\n\t\n\t                // print input field for column\n\t                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + '</button>' + '</span>' + '</form>';\n\t            } else {\n\t                // filter criteria\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add category filters\n\t                var seperator = false;\n\t                for (cf_label in options.categorical_filters[column_key]) {\n\t                    // get category filter\n\t                    var cf = options.categorical_filters[column_key][cf_label];\n\t\n\t                    // each filter will have only a single argument, so get that single argument\n\t                    var cf_key = '';\n\t                    var cf_arg = '';\n\t                    for (key in cf) {\n\t                        cf_key = key;\n\t                        cf_arg = cf[key];\n\t                    }\n\t\n\t                    // add seperator\n\t                    if (seperator) {\n\t                        tmpl += ' | ';\n\t                    }\n\t                    seperator = true;\n\t\n\t                    // add category\n\t                    var filter = filters[column_key];\n\t                    if (filter && cf[column_key] && filter == cf_arg) {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' + '</span>';\n\t                    }\n\t                }\n\t                tmpl += '</span>';\n\t            }\n\t            tmpl += '</td>' + '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template for filter items\n\t        filter_element: function (filter_key, filter_value) {\n\t            filter_value = Utils.sanitize(filter_value);\n\t            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + '</a>' + '</span>';\n\t        }\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** Renders the color picker used e.g. in the tool form **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    return Backbone.View.extend({\n\t        colors: {\n\t            standard: ['c00000', 'ff0000', 'ffc000', 'ffff00', '92d050', '00b050', '00b0f0', '0070c0', '002060', '7030a0'],\n\t            base: ['ffffff', '000000', 'eeece1', '1f497d', '4f81bd', 'c0504d', '9bbb59', '8064a2', '4bacc6', 'f79646'],\n\t            theme: [['f2f2f2', '7f7f7f', 'ddd9c3', 'c6d9f0', 'dbe5f1', 'f2dcdb', 'ebf1dd', 'e5e0ec', 'dbeef3', 'fdeada'], ['d8d8d8', '595959', 'c4bd97', '8db3e2', 'b8cce4', 'e5b9b7', 'd7e3bc', 'ccc1d9', 'b7dde8', 'fbd5b5'], ['bfbfbf', '3f3f3f', '938953', '548dd4', '95b3d7', 'd99694', 'c3d69b', 'b2a2c7', '92cddc', 'fac08f'], ['a5a5a5', '262626', '494429', '17365d', '366092', '953734', '76923c', '5f497a', '31859b', 'e36c09'], ['7f7f7e', '0c0c0c', '1d1b10', '0f243e', '244061', '632423', '4f6128', '3f3151', '205867', '974806']]\n\t        },\n\t\n\t        initialize: function (options) {\n\t            this.options = Utils.merge(options, {});\n\t            this.setElement(this._template());\n\t            this.$panel = this.$('.ui-color-picker-panel');\n\t            this.$view = this.$('.ui-color-picker-view');\n\t            this.$value = this.$('.ui-color-picker-value');\n\t            this.$header = this.$('.ui-color-picker-header');\n\t            this._build();\n\t            this.visible = false;\n\t            this.value(this.options.value);\n\t            this.$boxes = this.$('.ui-color-picker-box');\n\t            var self = this;\n\t            this.$boxes.on('click', function () {\n\t                self.value($(this).css('background-color'));\n\t                self.$header.trigger('click');\n\t            });\n\t            this.$header.on('click', function () {\n\t                self.visible = !self.visible;\n\t                if (self.visible) {\n\t                    self.$view.fadeIn('fast');\n\t                } else {\n\t                    self.$view.fadeOut('fast');\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Get/set value */\n\t        value: function (new_val) {\n\t            if (new_val !== undefined && new_val !== null) {\n\t                this.$value.css('background-color', new_val);\n\t                this.$('.ui-color-picker-box').empty();\n\t                this.$(this._getValue()).html(this._templateCheck());\n\t                this.options.onchange && this.options.onchange(new_val);\n\t            }\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Get value from dom */\n\t        _getValue: function () {\n\t            var rgb = this.$value.css('background-color');\n\t            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n\t            if (rgb) {\n\t                function hex(x) {\n\t                    return ('0' + parseInt(x).toString(16)).slice(-2);\n\t                }\n\t                return '#' + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t\n\t        /** Build color panel */\n\t        _build: function () {\n\t            this._content({ colors: this.colors.base });\n\t            for (var i in this.colors.theme) {\n\t                var line_def = {};\n\t                if (i == 0) {\n\t                    line_def['bottom'] = true;\n\t                } else if (i != this.colors.theme.length - 1) {\n\t                    line_def['top'] = true;\n\t                    line_def['bottom'] = true;\n\t                } else {\n\t                    line_def['top'] = true;\n\t                }\n\t                line_def['colors'] = this.colors.theme[i];\n\t                this._content(line_def);\n\t            }\n\t            this._content({ colors: this.colors.standard });\n\t        },\n\t\n\t        /** Create content */\n\t        _content: function (options) {\n\t            var colors = options.colors;\n\t            var $content = $(this._templateContent());\n\t            var $line = $content.find('.line');\n\t            this.$panel.append($content);\n\t            for (var i in colors) {\n\t                var $box = $(this._templateBox(colors[i]));\n\t                if (options.top) {\n\t                    $box.css('border-top', 'none');\n\t                    $box.css('border-top-left-radius', '0px');\n\t                    $box.css('border-top-right-radius', '0px');\n\t                }\n\t                if (options.bottom) {\n\t                    $box.css('border-bottom', 'none');\n\t                    $box.css('border-bottom-left-radius', '0px');\n\t                    $box.css('border-bottom-right-radius', '0px');\n\t                }\n\t                $line.append($box);\n\t            }\n\t            return $content;\n\t        },\n\t\n\t        /** Check icon */\n\t        _templateCheck: function () {\n\t            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n\t        },\n\t\n\t        /** Content template */\n\t        _templateContent: function () {\n\t            return '<div class=\"ui-color-picker-content\">' + '<div class=\"line\"/>' + '</div>';\n\t        },\n\t\n\t        /** Box template */\n\t        _templateBox: function (color) {\n\t            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n\t        },\n\t\n\t        /** Main template */\n\t        _template: function () {\n\t            return '<div class=\"ui-color-picker\">' + '<div class=\"ui-color-picker-header\">' + '<div class=\"ui-color-picker-value\"/>' + '<div class=\"ui-color-picker-label\">Select a color</div>' + '</div>' + '<div class=\"ui-color-picker-view ui-input\">' + '<div class=\"ui-color-picker-panel\"/>' + '</div>';\n\t            '</div>';\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($, _) {/** This class creates/wraps a drill down element. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n\t\n\t    var View = Options.BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = options.display || 'checkbox';\n\t            options.multiple = options.type == 'checkbox';\n\t            Options.BaseIcons.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set states for selected values */\n\t        _setValue: function (new_value) {\n\t            Options.BaseIcons.prototype._setValue.call(this, new_value);\n\t            if (new_value !== undefined && new_value !== null && this.header_index) {\n\t                var self = this;\n\t                var values = $.isArray(new_value) ? new_value : [new_value];\n\t                _.each(values, function (v) {\n\t                    var list = self.header_index[v];\n\t                    _.each(list, function (element) {\n\t                        self._setState(element, true);\n\t                    });\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Expand/collapse a sub group */\n\t        _setState: function (header_id, is_expanded) {\n\t            var $button = this.$('.button-' + header_id);\n\t            var $subgroup = this.$('.subgroup-' + header_id);\n\t            $button.data('is_expanded', is_expanded);\n\t            if (is_expanded) {\n\t                $subgroup.show();\n\t                $button.removeClass('fa-plus-square').addClass('fa-minus-square');\n\t            } else {\n\t                $subgroup.hide();\n\t                $button.removeClass('fa-minus-square').addClass('fa-plus-square');\n\t            }\n\t        },\n\t\n\t        /** Template to create options tree */\n\t        _templateOptions: function () {\n\t            var self = this;\n\t            this.header_index = {};\n\t\n\t            // attach event handler\n\t            function attach($el, header_id) {\n\t                var $button = $el.find('.button-' + header_id);\n\t                $button.on('click', function () {\n\t                    self._setState(header_id, !$button.data('is_expanded'));\n\t                });\n\t            }\n\t\n\t            // recursive function which iterates through options\n\t            function iterate($tmpl, options, header) {\n\t                header = header || [];\n\t                for (i in options) {\n\t                    var level = options[i];\n\t                    var has_options = level.options && level.options.length > 0;\n\t                    var new_header = header.slice(0);\n\t                    self.header_index[level.value] = new_header.slice(0);\n\t                    var $group = $('<div/>');\n\t                    if (has_options) {\n\t                        var header_id = Utils.uid();\n\t                        var $button = $('<span/>').addClass('button-' + header_id).addClass('ui-drilldown-button fa fa-plus-square');\n\t                        var $subgroup = $('<div/>').addClass('subgroup-' + header_id).addClass('ui-drilldown-subgroup');\n\t                        $group.append($('<div/>').append($button).append(self._templateOption({ label: level.name, value: level.value })));\n\t                        new_header.push(header_id);\n\t                        iterate($subgroup, level.options, new_header);\n\t                        $group.append($subgroup);\n\t                        attach($group, header_id);\n\t                    } else {\n\t                        $group.append(self._templateOption({ label: level.name, value: level.value }));\n\t                    }\n\t                    $tmpl.append($group);\n\t                }\n\t            }\n\t\n\t            // iterate through options and create dom\n\t            var $tmpl = $('<div/>');\n\t            iterate($tmpl, this.model.get('data'));\n\t            return $tmpl;\n\t        },\n\t\n\t        /** Template for drill down view */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list drilldown-container').attr('id', this.model.id);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Select) {\n\t\n\t    /** Batch mode variations */\n\t    var Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\t\n\t    /** List of available content selectors options */\n\t    var Configurations = {\n\t        data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.LINKED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.LINKED }],\n\t        data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections', multiple: true, batch: Batch.DISABLED }],\n\t        data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n\t        workflow_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }],\n\t        workflow_data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }],\n\t        workflow_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n\t        module_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.ENABLED }],\n\t        module_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder', tooltip: 'Multiple collections', multiple: true, batch: Batch.ENABLED }]\n\t    };\n\t\n\t    /** View for hda and hdca content selector ui elements */\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                src_labels: { 'hda': 'dataset', 'hdca': 'dataset collection' },\n\t                pagelimit: 100,\n\t                statustimer: 1000\n\t            }).set(options);\n\t            this.setElement($('<div/>').addClass('ui-select-content'));\n\t            this.button_product = new Ui.RadioButton.View({\n\t                value: 'false',\n\t                data: [{ icon: 'fa fa-chain', value: 'false',\n\t                    tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' }, { icon: 'fa fa-chain-broken', value: 'true',\n\t                    tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' }] });\n\t            var $batch_div = $('<div/>').addClass('ui-form-info').append($('<i/>').addClass('fa fa-sitemap')).append($('<span/>').html('This is a batch mode input field. Separate jobs will be triggered for each dataset selection.'));\n\t            this.$batch = {\n\t                linked: $batch_div.clone(),\n\t                enabled: $batch_div.clone().append($('<div/>').append($('<div/>').addClass('ui-form-title').html('Batch options:')).append(this.button_product.$el)).append($('<div/>').css('clear', 'both'))\n\t            };\n\t\n\t            // add drag-drop event handlers\n\t            this.$el.on('dragenter', function (e) {\n\t                this.lastenter = e.target;self.$el.addClass('ui-dragover');\n\t            }).on('dragover', function (e) {\n\t                e.preventDefault();\n\t            }).on('dragleave', function (e) {\n\t                this.lastenter === e.target && self.$el.removeClass('ui-dragover');\n\t            }).on('drop', function (e) {\n\t                self._handleDrop(e);\n\t            });\n\t\n\t            // track current history elements\n\t            this.history = {};\n\t\n\t            // add listeners\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:current', this._changeCurrent, this);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this);\n\t            this.render();\n\t\n\t            // add change event\n\t            this.on('change', function () {\n\t                options.onchange && options.onchange(self.value());\n\t            });\n\t        },\n\t\n\t        render: function () {\n\t            this._changeType();\n\t            this._changeValue();\n\t            this._changeWait();\n\t        },\n\t\n\t        /** Indicate that select fields are being updated */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Indicate that the options update has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Update data representing selectable options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Return the currently selected dataset values */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            var current = this.model.get('current');\n\t            if (this.config[current]) {\n\t                var id_list = this.fields[current].value();\n\t                if (id_list !== null) {\n\t                    id_list = $.isArray(id_list) ? id_list : [id_list];\n\t                    if (id_list.length > 0) {\n\t                        var result = this._batch({ values: [] });\n\t                        for (var i in id_list) {\n\t                            var details = this.history[id_list[i] + '_' + this.config[current].src];\n\t                            if (details) {\n\t                                result.values.push(details);\n\t                            } else {\n\t                                Galaxy.emit.debug('ui-select-content::value()', 'Requested details not found for \\'' + id_list[i] + '\\'.');\n\t                                return null;\n\t                            }\n\t                        }\n\t                        result.values.sort(function (a, b) {\n\t                            return a.hid - b.hid;\n\t                        });\n\t                        return result;\n\t                    }\n\t                }\n\t            } else {\n\t                Galaxy.emit.debug('ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.');\n\t            }\n\t            return null;\n\t        },\n\t\n\t        /** Change of current select field */\n\t        _changeCurrent: function () {\n\t            var self = this;\n\t            _.each(this.fields, function (field, i) {\n\t                if (self.model.get('current') == i) {\n\t                    field.$el.show();\n\t                    _.each(self.$batch, function ($batchfield, batchmode) {\n\t                        $batchfield[self.config[i].batch == batchmode ? 'show' : 'hide']();\n\t                    });\n\t                    self.button_type.value(i);\n\t                } else {\n\t                    field.$el.hide();\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Change of type */\n\t        _changeType: function () {\n\t            var self = this;\n\t\n\t            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n\t            var config_id = (this.model.get('flavor') ? this.model.get('flavor') + '_' : '') + String(this.model.get('type')) + (this.model.get('multiple') ? '_multiple' : '');\n\t            if (Configurations[config_id]) {\n\t                this.config = Configurations[config_id];\n\t            } else {\n\t                this.config = Configurations['data'];\n\t                Galaxy.emit.debug('ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.');\n\t            }\n\t\n\t            // prepare extension component of error message\n\t            var data = self.model.get('data');\n\t            var extensions = Utils.textify(this.model.get('extensions'));\n\t            var src_labels = this.model.get('src_labels');\n\t\n\t            // build views\n\t            this.fields = [];\n\t            this.button_data = [];\n\t            _.each(this.config, function (c, i) {\n\t                self.button_data.push({\n\t                    value: i,\n\t                    icon: c.icon,\n\t                    tooltip: c.tooltip\n\t                });\n\t                self.fields.push(new Select.View({\n\t                    optional: self.model.get('optional'),\n\t                    multiple: c.multiple,\n\t                    searchable: !c.multiple || data && data[c.src] && data[c.src].length > self.model.get('pagelimit'),\n\t                    selectall: false,\n\t                    error_text: 'No ' + (extensions ? extensions + ' ' : '') + (src_labels[c.src] || 'content') + ' available.',\n\t                    onchange: function () {\n\t                        self.trigger('change');\n\t                    }\n\t                }));\n\t            });\n\t            this.button_type = new Ui.RadioButton.View({\n\t                value: this.model.get('current'),\n\t                data: this.button_data,\n\t                onchange: function (value) {\n\t                    self.model.set('current', value);\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t\n\t            // append views\n\t            this.$el.empty();\n\t            var button_width = 0;\n\t            if (this.fields.length > 1) {\n\t                this.$el.append(this.button_type.$el);\n\t                button_width = Math.max(0, this.fields.length * 36) + 'px';\n\t            }\n\t            _.each(this.fields, function (field) {\n\t                self.$el.append(field.$el.css({ 'margin-left': button_width }));\n\t            });\n\t            _.each(this.$batch, function ($batchfield, batchmode) {\n\t                self.$el.append($batchfield.css({ 'margin-left': button_width }));\n\t            });\n\t            this.model.set('current', 0);\n\t            this._changeCurrent();\n\t            this._changeData();\n\t        },\n\t\n\t        /** Change of wait flag */\n\t        _changeWait: function () {\n\t            var self = this;\n\t            _.each(this.fields, function (field) {\n\t                field[self.model.get('wait') ? 'wait' : 'unwait']();\n\t            });\n\t        },\n\t\n\t        /** Change of available options */\n\t        _changeData: function () {\n\t            var options = this.model.get('data');\n\t            var self = this;\n\t            var select_options = {};\n\t            _.each(options, function (items, src) {\n\t                select_options[src] = [];\n\t                _.each(items, function (item) {\n\t                    select_options[src].push({\n\t                        hid: item.hid,\n\t                        keep: item.keep,\n\t                        label: item.hid + ': ' + item.name,\n\t                        value: item.id,\n\t                        tags: item.tags\n\t                    });\n\t                    self.history[item.id + '_' + src] = item;\n\t                });\n\t            });\n\t            _.each(this.config, function (c, i) {\n\t                select_options[c.src] && self.fields[i].add(select_options[c.src], function (a, b) {\n\t                    return b.hid - a.hid;\n\t                });\n\t            });\n\t        },\n\t\n\t        /** Change of incoming value */\n\t        _changeValue: function () {\n\t            var new_value = this.model.get('value');\n\t            if (new_value && new_value.values && new_value.values.length > 0) {\n\t                // create list with content ids\n\t                var list = [];\n\t                _.each(new_value.values, function (value) {\n\t                    list.push(value.id);\n\t                });\n\t                // sniff first suitable field type from config list\n\t                var src = new_value.values[0].src;\n\t                var multiple = new_value.values.length > 1;\n\t                for (var i = 0; i < this.config.length; i++) {\n\t                    var field = this.fields[i];\n\t                    var c = this.config[i];\n\t                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n\t                        this.model.set('current', i);\n\t                        field.value(list);\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                _.each(this.fields, function (field) {\n\t                    field.value(null);\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Handles drop events e.g. from history panel */\n\t        _handleDrop: function (ev) {\n\t            try {\n\t                var data = this.model.get('data');\n\t                var current = this.model.get('current');\n\t                var config = this.config[current];\n\t                var field = this.fields[current];\n\t                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData('text'))[0];\n\t                var new_id = drop_data.id;\n\t                var new_src = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n\t                var new_value = { id: new_id, src: new_src };\n\t                if (data && _.findWhere(data[new_src], new_value)) {\n\t                    if (config.src == new_src) {\n\t                        var current_value = field.value();\n\t                        if (current_value && config.multiple) {\n\t                            if (current_value.indexOf(new_id) == -1) {\n\t                                current_value.push(new_id);\n\t                            }\n\t                        } else {\n\t                            current_value = new_id;\n\t                        }\n\t                        field.value(current_value);\n\t                    } else {\n\t                        this.model.set('value', { values: [new_value] });\n\t                        this.model.trigger('change:value');\n\t                    }\n\t                    this.trigger('change');\n\t                    this._handleDropStatus('success');\n\t                } else {\n\t                    this._handleDropStatus('danger');\n\t                }\n\t            } catch (e) {\n\t                this._handleDropStatus('danger');\n\t            }\n\t        },\n\t\n\t        /** Highlight drag result */\n\t        _handleDropStatus: function (status) {\n\t            var self = this;\n\t            this.$el.removeClass('ui-dragover').addClass('ui-dragover-' + status);\n\t            setTimeout(function () {\n\t                self.$el.removeClass('ui-dragover-' + status);\n\t            }, this.model.get('statustimer'));\n\t        },\n\t\n\t        /** Assists in identifying the batch mode */\n\t        _batch: function (result) {\n\t            result['batch'] = false;\n\t            var current = this.model.get('current');\n\t            var config = this.config[current];\n\t            if (config.src == 'hdca' && !config.multiple) {\n\t                var hdca = this.history[this.fields[current].value() + '_hdca'];\n\t                if (hdca && hdca.map_over_type) {\n\t                    result['batch'] = true;\n\t                }\n\t            }\n\t            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n\t                result['batch'] = true;\n\t                if (config.batch == Batch.ENABLED && this.button_product.value() === 'true') {\n\t                    result['product'] = true;\n\t                }\n\t            }\n\t            return result;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, List) {\n\t\n\t    /**\n\t     * FTP file selector\n\t     */\n\t    var View = Backbone.View.extend({\n\t        // initialize\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // create ui-list view to keep track of selected ftp files\n\t            this.ftpfile_list = new List.View({\n\t                name: 'file',\n\t                optional: options.optional,\n\t                multiple: options.multiple,\n\t                onchange: function () {\n\t                    options.onchange && options.onchange(self.value());\n\t                }\n\t            });\n\t\n\t            // create elements\n\t            this.setElement(this.ftpfile_list.$el);\n\t\n\t            // initial fetch of ftps\n\t            Utils.get({\n\t                url: Galaxy.root + 'api/remote_files',\n\t                success: function (response) {\n\t                    var data = [];\n\t                    for (var i in response) {\n\t                        data.push({\n\t                            value: response[i]['path'],\n\t                            label: response[i]['path']\n\t                        });\n\t                    }\n\t                    self.ftpfile_list.update(data);\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Return/Set currently selected ftp datasets */\n\t        value: function (val) {\n\t            return this.ftpfile_list.value(val);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(23), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Table, List) {\n\t\n\t    // collection of libraries\n\t    var Libraries = Backbone.Collection.extend({\n\t        url: Galaxy.root + 'api/libraries?deleted=false'\n\t    });\n\t\n\t    // collection of dataset\n\t    var LibraryDatasets = Backbone.Collection.extend({\n\t        initialize: function () {\n\t            var self = this;\n\t            this.config = new Backbone.Model({ library_id: null });\n\t            this.config.on('change', function () {\n\t                self.fetch({ reset: true });\n\t            });\n\t        },\n\t        url: function () {\n\t            return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n\t        }\n\t    });\n\t\n\t    // hda/hdca content selector ui element\n\t    var View = Backbone.View.extend({\n\t        // initialize\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // collections\n\t            this.libraries = new Libraries();\n\t            this.datasets = new LibraryDatasets();\n\t\n\t            // link app and options\n\t            this.options = options;\n\t\n\t            // select field for the library\n\t            // TODO: Remove this once the library API supports searching for library datasets\n\t            this.library_select = new Ui.Select.View({\n\t                onchange: function (value) {\n\t                    self.datasets.config.set('library_id', value);\n\t                }\n\t            });\n\t\n\t            // create ui-list view to keep track of selected data libraries\n\t            this.dataset_list = new List.View({\n\t                name: 'dataset',\n\t                optional: options.optional,\n\t                multiple: options.multiple,\n\t                onchange: function () {\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t\n\t            // add reset handler for fetched libraries\n\t            this.libraries.on('reset', function () {\n\t                var data = [];\n\t                self.libraries.each(function (model) {\n\t                    data.push({\n\t                        value: model.id,\n\t                        label: model.get('name')\n\t                    });\n\t                });\n\t                self.library_select.update(data);\n\t            });\n\t\n\t            // add reset handler for fetched library datasets\n\t            this.datasets.on('reset', function () {\n\t                var data = [];\n\t                var library_current = self.library_select.text();\n\t                if (library_current !== null) {\n\t                    self.datasets.each(function (model) {\n\t                        if (model.get('type') === 'file') {\n\t                            data.push({\n\t                                value: model.id,\n\t                                label: model.get('name')\n\t                            });\n\t                        }\n\t                    });\n\t                }\n\t                self.dataset_list.update(data);\n\t            });\n\t\n\t            // add change event. fires on trigger\n\t            this.on('change', function () {\n\t                options.onchange && options.onchange(self.value());\n\t            });\n\t\n\t            // create elements\n\t            this.setElement(this._template());\n\t            this.$('.library-select').append(this.library_select.$el);\n\t            this.$el.append(this.dataset_list.$el);\n\t\n\t            // initial fetch of libraries\n\t            this.libraries.fetch({\n\t                reset: true,\n\t                success: function () {\n\t                    self.library_select.trigger('change');\n\t                    if (self.options.value !== undefined) {\n\t                        self.value(self.options.value);\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Return/Set currently selected library datasets */\n\t        value: function (val) {\n\t            return this.dataset_list.value(val);\n\t        },\n\t\n\t        /** Template */\n\t        _template: function () {\n\t            return '<div class=\"ui-select-library\">' + '<div class=\"library ui-margin-bottom\">' + '<span class=\"library-title\">Select Library</span>' + '<span class=\"library-select\"/>' + '</div>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                min: null,\n\t                max: null,\n\t                step: null,\n\t                precise: false,\n\t                split: 10000,\n\t                value: null,\n\t                onchange: function () {}\n\t            }).set(options);\n\t\n\t            // create new element\n\t            this.setElement(this._template());\n\t            this.$el.attr('id', this.model.id);\n\t            this.$text = this.$('.ui-form-slider-text');\n\t            this.$slider = this.$('.ui-form-slider-element');\n\t\n\t            // add text field event\n\t            var pressed = [];\n\t            this.$text.on('change', function () {\n\t                self.value($(this).val());\n\t            }).on('keyup', function (e) {\n\t                pressed[e.which] = false;\n\t            }).on('keydown', function (e) {\n\t                var v = e.which;\n\t                pressed[v] = true;\n\t                if (self.model.get('is_workflow') && pressed[16] && v == 52) {\n\t                    self.value('$');\n\t                    event.preventDefault();\n\t                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf('.') == -1 && self.model.get('precise') || (v == 189 || v == 109) && $(this).val().indexOf('-') == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n\t                    event.preventDefault();\n\t                }\n\t            });\n\t\n\t            // build slider, cannot be rebuild in render\n\t            var opts = this.model.attributes;\n\t            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n\t            var step = opts.step;\n\t            if (!step) {\n\t                if (opts.precise && this.has_slider) {\n\t                    step = (opts.max - opts.min) / opts.split;\n\t                } else {\n\t                    step = 1.0;\n\t                }\n\t            }\n\t            if (this.has_slider) {\n\t                this.$text.addClass('ui-form-slider-left');\n\t                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on('slide', function (event, ui) {\n\t                    self.value(ui.value);\n\t                });\n\t            } else {\n\t                this.$slider.hide();\n\t            }\n\t\n\t            // add listeners\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var value = this.model.get('value');\n\t            this.has_slider && this.$slider.slider('value', value);\n\t            value !== this.$text.val() && this.$text.val(value);\n\t        },\n\t\n\t        /** Set and return the current value */\n\t        value: function (new_val) {\n\t            var options = this.model.attributes;\n\t            if (new_val !== undefined) {\n\t                if (new_val !== null && new_val !== '' && !this._isParameter(new_val)) {\n\t                    isNaN(new_val) && (new_val = 0);\n\t                    !options.precise && (new_val = Math.round(new_val));\n\t                    options.max !== null && (new_val = Math.min(new_val, options.max));\n\t                    options.min !== null && (new_val = Math.max(new_val, options.min));\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.trigger('change');\n\t                options.onchange(new_val);\n\t            }\n\t            return this.model.get('value');\n\t        },\n\t\n\t        /** Return true if the field contains a workflow parameter i.e. $('name') */\n\t        _isParameter: function (value) {\n\t            return this.model.get('is_workflow') && String(value).substring(0, 1) === '$';\n\t        },\n\t\n\t        /** Slider template */\n\t        _template: function () {\n\t            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 40 */,\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    QUERY_STRING = __webpack_require__(42),\n\t    Ui = __webpack_require__(5);\n\t\n\tvar Router = Backbone.Router.extend({\n\t    // TODO: not many client routes at this point - fill and remove from server.\n\t    // since we're at root here, this may be the last to be routed entirely on the client.\n\t    initialize: function (page, options) {\n\t        this.page = page;\n\t        this.options = options;\n\t    },\n\t\n\t    /** helper to push a new navigation state */\n\t    push: function (url, data) {\n\t        data = data || {};\n\t        data.__identifer = Math.random().toString(36).substr(2);\n\t        if (!$.isEmptyObject(data)) {\n\t            url += url.indexOf('?') == -1 ? '?' : '&';\n\t            url += $.param(data, true);\n\t        }\n\t        Galaxy.params = {};\n\t        this.navigate(url, { 'trigger': true });\n\t    },\n\t\n\t    /** override to parse query string into obj and send to each route */\n\t    execute: function (callback, args, name) {\n\t        Galaxy.debug('router execute:', callback, args, name);\n\t        var queryObj = QUERY_STRING.parse(args.pop());\n\t        args.push(queryObj);\n\t        if (callback) {\n\t            if (this.authenticate(args, name)) {\n\t                callback.apply(this, args);\n\t            } else {\n\t                this.access_denied();\n\t            }\n\t        }\n\t    },\n\t\n\t    authenticate: function (args, name) {\n\t        return true;\n\t    },\n\t\n\t    access_denied: function () {\n\t        this.page.display(new Ui.Message({ status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true }));\n\t    }\n\t});\n\t\n\tmodule.exports = Router;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** Generic form view */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Form, Ui) {\n\t\n\t    var View = Backbone.View.extend({\n\t\n\t        initialize: function (options) {\n\t            this.model = new Backbone.Model(options);\n\t            this.url = this.model.get('url');\n\t            this.redirect = this.model.get('redirect');\n\t            this.setElement('<div/>');\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            $.ajax({\n\t                url: Galaxy.root + this.url,\n\t                type: 'GET'\n\t            }).done(function (response) {\n\t                var options = $.extend({}, self.model.attributes, response);\n\t                var form = new Form({\n\t                    title: options.title,\n\t                    icon: options.icon,\n\t                    inputs: options.inputs,\n\t                    operations: {\n\t                        'submit': new Ui.ButtonIcon({\n\t                            tooltip: options.submit_tooltip,\n\t                            title: options.submit_title || 'Save settings',\n\t                            icon: options.submit_icon || 'fa-save',\n\t                            onclick: function () {\n\t                                self._submit(form);\n\t                            }\n\t                        })\n\t                    }\n\t                });\n\t                self.$el.empty().append(form.$el);\n\t            }).fail(function (response) {\n\t                self.$el.empty().append(new Ui.Message({\n\t                    message: 'Failed to load resource ' + self.url + '.',\n\t                    status: 'danger',\n\t                    persistent: true\n\t                }).$el);\n\t            });\n\t        },\n\t\n\t        _submit: function (form) {\n\t            var self = this;\n\t            $.ajax({\n\t                url: Galaxy.root + self.url,\n\t                data: JSON.stringify(form.data.create()),\n\t                type: 'PUT',\n\t                contentType: 'application/json'\n\t            }).done(function (response) {\n\t                var success_message = { message: response.message, status: 'success' };\n\t                if (self.redirect) {\n\t                    window.location = self.redirect + '?' + $.param(success_message);\n\t                } else {\n\t                    form.data.matchModel(response, function (input, input_id) {\n\t                        form.field_list[input_id].value(input.value);\n\t                    });\n\t                    form.message.update(success_message);\n\t                }\n\t            }).fail(function (response) {\n\t                form.message.update({ message: response.responseJSON.err_msg, status: 'danger' });\n\t            });\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 60 */,\n/* 61 */,\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */,\n/* 70 */,\n/* 71 */,\n/* 72 */,\n/* 73 */,\n/* 74 */,\n/* 75 */,\n/* 76 */,\n/* 77 */,\n/* 78 */,\n/* 79 */,\n/* 80 */,\n/* 81 */,\n/* 82 */,\n/* 83 */,\n/* 84 */,\n/* 85 */,\n/* 86 */,\n/* 87 */,\n/* 88 */,\n/* 89 */,\n/* 90 */,\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var _l = __webpack_require__(6);\n\t\n\tvar AdminPanel = Backbone.View.extend({\n\t    initialize: function (page, options) {\n\t        var self = this;\n\t        this.page = page;\n\t        this.root = options.root;\n\t        this.config = options.config;\n\t        this.settings = options.settings;\n\t        this.message = options.message;\n\t        this.status = options.status;\n\t        this.model = new Backbone.Model({\n\t            title: _l('Administration')\n\t        });\n\t        this.categories = new Backbone.Collection([{\n\t            title: 'Server',\n\t            items: [{\n\t                title: 'Data types registry',\n\t                url: 'admin/view_datatypes_registry'\n\t            }, {\n\t                title: 'Data tables registry',\n\t                url: 'admin/view_tool_data_tables'\n\t            }, {\n\t                title: 'Display applications',\n\t                url: 'admin/display_applications'\n\t            }, {\n\t                title: 'Manage jobs',\n\t                url: 'admin/jobs'\n\t            }]\n\t        }, {\n\t            title: 'Tools and Tool Shed',\n\t            items: [{\n\t                title: 'Search Tool Shed',\n\t                url: 'admin_toolshed/browse_tool_sheds',\n\t                enabled: self.settings.is_tool_shed_installed\n\t            }, {\n\t                title: 'Search Tool Shed (Beta)',\n\t                url: 'admin_toolshed/browse_toolsheds',\n\t                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n\t            }, {\n\t                title: 'Monitor installing repositories',\n\t                url: 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n\t                enabled: self.settings.installing_repository_ids\n\t            }, {\n\t                title: 'Manage installed tools',\n\t                url: 'admin_toolshed/browse_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Reset metadata',\n\t                url: 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Download local tool',\n\t                url: 'admin/package_tool'\n\t            }, {\n\t                title: 'Tool lineage',\n\t                url: 'admin/tool_versions'\n\t            }, {\n\t                title: 'Reload a tool\\'s configuration',\n\t                url: 'admin/reload_tool'\n\t            }, {\n\t                title: 'Review tool migration stages',\n\t                url: 'admin/review_tool_migration_stages'\n\t            }, {\n\t                title: 'View Tool Error Logs',\n\t                url: 'admin/tool_errors'\n\t            }, {\n\t                title: 'Manage Display Whitelist',\n\t                url: 'admin/sanitize_whitelist'\n\t            }, {\n\t                title: 'Manage Tool Dependencies',\n\t                url: 'admin/manage_tool_dependencies'\n\t            }]\n\t        }, {\n\t            title: 'User Management',\n\t            items: [{\n\t                title: 'Users',\n\t                url: 'admin/users',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Groups',\n\t                url: 'admin/groups'\n\t            }, {\n\t                title: 'Roles',\n\t                url: 'admin/roles'\n\t            }, {\n\t                title: 'API keys',\n\t                url: 'userskeys/all_users'\n\t            }, {\n\t                title: 'Impersonate a user',\n\t                url: 'admin/impersonate',\n\t                enabled: self.config.allow_user_impersonation\n\t            }]\n\t        }, {\n\t            title: 'Data',\n\t            items: [{\n\t                title: 'Quotas',\n\t                url: 'admin/quotas',\n\t                enabled: self.config.enable_quotas\n\t            }, {\n\t                title: 'Data libraries',\n\t                url: 'library_admin/browse_libraries'\n\t            }, {\n\t                title: 'Roles',\n\t                url: 'admin/roles'\n\t            }, {\n\t                title: 'Local data',\n\t                url: 'data_manager'\n\t            }]\n\t        }, {\n\t            title: 'Form Definitions',\n\t            items: [{\n\t                title: 'Form definitions',\n\t                url: 'forms/browse_form_definitions'\n\t            }]\n\t        }, {\n\t            title: 'Sample Tracking',\n\t            items: [{\n\t                title: 'Sequencers and external services',\n\t                url: 'external_service/browse_external_services'\n\t            }, {\n\t                title: 'Request types',\n\t                url: 'request_type/browse_request_types'\n\t            }, {\n\t                title: 'Sequencing requests',\n\t                url: 'requests_admin/browse_requests'\n\t            }, {\n\t                title: 'Find samples',\n\t                url: 'requests_common/find_samples?cntrller=requests_admin'\n\t            }]\n\t        }]);\n\t        this.setElement(this._template());\n\t    },\n\t\n\t    render: function () {\n\t        var self = this;\n\t        this.$el.empty();\n\t        this.categories.each(function (category) {\n\t            var $section = $(self._templateSection(category.attributes));\n\t            var $entries = $section.find('.ui-side-section-body');\n\t            _.each(category.get('items'), function (item) {\n\t                if (item.enabled === undefined || item.enabled) {\n\t                    var $link = $('<a/>').attr({ href: self.root + item.url }).text(_l(item.title));\n\t                    if (item.target == '__use_router__') {\n\t                        $link.on('click', function (e) {\n\t                            e.preventDefault();self.page.router.push(item.url);\n\t                        });\n\t                    } else {\n\t                        $link.attr('target', 'galaxy_main');\n\t                    }\n\t                    $entries.append($('<div/>').addClass('ui-side-section-body-title').append($link));\n\t                }\n\t            });\n\t            self.$el.append($section);\n\t        });\n\t        this.page.$('#galaxy_main').prop('src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status);\n\t    },\n\t\n\t    _templateSection: function (options) {\n\t        return ['<div>', '<div class=\"ui-side-section-title\">' + _l(options.title) + '</div>', '<div class=\"ui-side-section-body\"/>', '</div>'].join('');\n\t    },\n\t\n\t    _template: function () {\n\t        return '<div class=\"ui-side-panel\"/>';\n\t    },\n\t\n\t    toString: function () {\n\t        return 'adminPanel';\n\t    }\n\t});\n\t\n\tmodule.exports = AdminPanel;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }\n]);\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    GalaxyApp = require( 'galaxy' ).GalaxyApp,\n    AdminPanel = require( './panels/admin-panel' ),\n    FormWrapper = require( 'mvc/form/form-wrapper' ),\n    GridView = require( 'mvc/grid/grid-view' ),\n    Ui = require( 'mvc/ui/ui-misc' ),\n    QueryStringParsing = require( 'utils/query-string-parsing' ),\n    Router = require( 'layout/router' ),\n    Page = require( 'layout/page' );\n\nwindow.app = function app( options, bootstrapped ){\n    window.Galaxy = new GalaxyApp( options, bootstrapped );\n    Galaxy.debug( 'admin app' );\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            '(/)admin(/)users' : 'show_users',\n            '(/)admin(/)forms(/)(:form_id)' : 'show_forms'\n        },\n\n        authenticate: function( args, name ) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get( 'is_admin' );\n        },\n\n        show_users: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_forms : function( form_id ) {\n            var options = {\n                title           : 'Reset passwords',\n                url             : 'admin/reset_user_password?id=' + QueryStringParsing.get( 'id' ),\n                icon            : 'fa-user',\n                submit_title    : 'Save new password',\n                redirect        : Galaxy.root + 'admin/users'\n            };\n            this.page.display( new FormWrapper.View ( options ) );\n        }\n    });\n\n    $(function() {\n        _.extend( options.config, { active_view : 'admin' } );\n        Galaxy.page = new Page.View( _.extend( options, {\n            Left    : AdminPanel,\n            Router  : AdminRouter\n        } ) );\n    });\n};\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(['utils/utils',\n    'mvc/ui/ui-select-default',\n    'mvc/ui/ui-slider',\n    'mvc/ui/ui-options',\n    'mvc/ui/ui-drilldown',\n    'mvc/ui/ui-buttons',\n    'mvc/ui/ui-modal'],\n    function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.tagName = options.tagName || this.tagName;\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        title: function( new_title ) {\n            this.model.set( 'title', new_title );\n        },\n        value: function() {\n            return this.model.get( 'title' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-label' )\n                    .addClass( this.model.get( 'cls' ) )\n                    .html( this.model.get( 'title' ) );\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                message     : null,\n                status      : 'info',\n                cls         : '',\n                persistent  : false,\n                fade        : true\n            }).set( options );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        update: function( options ) {\n            this.model.set( options );\n        },\n        render: function() {\n            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n            var status = this.model.get( 'status' );\n            if ( this.model.get( 'large' ) ) {\n                this.$el.addClass((( status == 'success' && 'done' ) ||\n                                   ( status == 'danger' && 'error' ) ||\n                                     status ) + 'messagelarge' );\n            } else {\n                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n            }\n            if ( this.model.get( 'message' ) ) {\n                this.$el.html( this.messageForDisplay() );\n                this.$el[ this.model.get( 'fade' ) ? 'fadeIn' : 'show' ]();\n                this.timeout && window.clearTimeout( this.timeout );\n                if ( !this.model.get( 'persistent' ) ) {\n                    var self = this;\n                    this.timeout = window.setTimeout( function() {\n                        self.model.set( 'message', '' );\n                    }, 3000 );\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function() {\n            return _.escape( this.model.get( 'message' ) );\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function() {\n            return this.model.get( 'message' );\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                type            : 'text',\n                placeholder     : '',\n                disabled        : false,\n                readonly        : false,\n                visible         : true,\n                cls             : '',\n                area            : false,\n                color           : null,\n                style           : null\n            }).set( options );\n            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            var self = this;\n            this.$el.removeClass()\n                    .addClass( 'ui-' + this.tagName )\n                    .addClass( this.model.get( 'cls' ) )\n                    .addClass( this.model.get( 'style' ) )\n                    .attr( 'id', this.model.id )\n                    .attr( 'type', this.model.get( 'type' ) )\n                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n                    .css( 'color', this.model.get( 'color' ) || '' )\n                    .css( 'border-color', this.model.get( 'color' ) || '' );\n            var datalist = this.model.get( 'datalist' );\n            if ( $.isArray( datalist ) && datalist.length > 0 ) {\n                this.$el.autocomplete( { source : function( request, response ) { response( self.model.get( 'datalist' ) ) },\n                                         change : function() { self._onchange() } } );\n            }\n            if ( this.model.get( 'value' ) !== this.$el.val() ) {\n                this.$el.val( this.model.get( 'value' ) );\n            }\n            _.each( [ 'readonly', 'disabled' ], function( attr_name ) {\n                self.model.get( attr_name ) ? self.$el.attr( attr_name, true ) : self.$el.removeAttr( attr_name );\n            });\n            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n            return this;\n        },\n        _onchange: function() {\n            this.value( this.$el.val() );\n            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$hidden = $( '<div/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.$hidden.val( this.model.get( 'value' ) );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$file = $( '<input/>' ).attr( 'type', 'file' ).addClass( 'ui-margin-bottom' ) )\n                                           .append( this.$text = $( '<textarea/>' ).addClass( 'ui-textarea' ).attr( 'disabled', true ) )\n                                           .append( this.$wait = $( '<i/>' ).addClass( 'fa fa-spinner fa-spin' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.$file.on( 'change', function( e ) { self._readFile( e ) } );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            this.model.get( 'value' ) ? this.$text.text( this.model.get( 'value' ) ).show() : this.$text.hide();\n            this.model.get( 'wait' ) ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function( e ) {\n            var self = this;\n            var file = e.target.files && e.target.files[ 0 ];\n            if ( file ) {\n                var reader = new FileReader();\n                reader.onload = function() {\n                    self.model.set( { wait: false, value: this.result } );\n                }\n                this.model.set( { wait: true, value: null } );\n                reader.readAsText( file );\n            }\n        }\n    });\n\n    return {\n        Button           : Buttons.ButtonDefault,\n        ButtonIcon       : Buttons.ButtonIcon,\n        ButtonCheck      : Buttons.ButtonCheck,\n        ButtonMenu       : Buttons.ButtonMenu,\n        ButtonLink       : Buttons.ButtonLink,\n        Input            : Input,\n        Label            : Label,\n        Message          : Message,\n        UnescapedMessage : UnescapedMessage,\n        Upload           : Upload,\n        Modal            : Modal,\n        RadioButton      : Options.RadioButton,\n        Checkbox         : Options.Checkbox,\n        Radio            : Options.Radio,\n        Select           : Select,\n        Hidden           : Hidden,\n        Slider           : Slider,\n        Drilldown        : Drilldown\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","define([ 'utils/utils', 'mvc/ui/ui-misc' ], function( Utils, Ui ) {\nvar View = Backbone.View.extend({\n    visible     : false,\n    initialize  : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model( {\n            id                  : Utils.uid(),\n            cls                 : 'ui-portlet',\n            title               : '',\n            icon                : '',\n            buttons             : null,\n            body                : null,\n            scrollable          : true,\n            nopadding           : false,\n            operations          : null,\n            collapsible         : false,\n            collapsible_button  : false,\n            collapsed           : false,\n            onchange_title      : null\n        } ).set( options );\n        this.setElement( this._template() );\n\n        // link all dom elements\n        this.$body          = this.$( '.portlet-body' );\n        this.$title_text    = this.$( '.portlet-title-text' );\n        this.$title_icon    = this.$( '.portlet-title-icon' );\n        this.$header        = this.$( '.portlet-header' );\n        this.$content       = this.$( '.portlet-content' );\n        this.$backdrop      = this.$( '.portlet-backdrop' );\n        this.$buttons       = this.$( '.portlet-buttons' );\n        this.$operations    = this.$( '.portlet-operations' );\n\n        // add body to component list\n        this.model.get( 'body' ) && this.append( this.model.get( 'body' ) );\n\n        // add icon for collapsible option\n        this.collapsible_button = new Ui.ButtonIcon({\n            icon    : 'fa-eye',\n            tooltip : 'Collapse/Expand',\n            cls     : 'ui-button-icon-plain',\n            onclick : function() { self[ self.collapsed ? 'expand' : 'collapse' ]() }\n        });\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el.removeClass().addClass( options.cls ).attr( 'id', options.id );\n        this.$header[ options.title ? 'show' : 'hide' ]();\n        this.$title_text.html( options.title );\n        _.each( [ this.$content, this.$body ], function( $el ) {\n            $el[ options.nopadding ? 'addClass' : 'removeClass' ]( 'no-padding' );\n        });\n\n        // render title icon\n        if ( options.icon ) {\n            this.$title_icon.removeClass().addClass( 'portlet-title-icon fa' ).addClass( options.icon ).show();\n        } else {\n            this.$title_icon.hide();\n        }\n\n        // make portlet collapsible\n        this.$title_text[ options.collapsible ? 'addClass' : 'removeClass' ]( 'no-highlight collapsible' ).off();\n        if ( options.collapsible ) {\n            this.$title_text.on( 'click', function() { self[ self.collapsed ? 'expand' : 'collapse' ]() } );\n            options.collapsed ? this.collapse() : this.expand();\n        }\n\n        // allow title editing\n        this.$title_text.prop( 'disabled', !options.onchange_title );\n        options.onchange_title && this.$title_text.make_text_editable({\n            on_finish: function( new_title ) {\n                options.onchange_title( new_title );\n            }\n        });\n\n        // render buttons\n        if ( options.buttons ) {\n            this.$buttons.empty().show();\n            $.each( this.model.get( 'buttons' ), function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$buttons.append( item.$el );\n            });\n        } else {\n            this.$buttons.hide();\n        }\n\n        // render operations\n        this.$operations.empty;\n        if ( options.collapsible_button ) {\n            this.$operations.append( this.collapsible_button.$el );\n        }\n        if ( options.operations ) {\n            $.each( options.operations, function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$operations.append( item.$el );\n            });\n        }\n        return this;\n    },\n\n    /** Append new doms to body */\n    append: function( $el ) {\n        this.$body.append( $el );\n    },\n\n    /** Remove all content */\n    empty: function() {\n        this.$body.empty();\n    },\n\n    /** Return header element */\n    header: function() {\n        return this.$header;\n    },\n\n    /** Return body element */\n    body: function() {\n        return this.$body;\n    },\n\n    /** Show portlet */\n    show: function(){\n        this.visible = true;\n        this.$el.fadeIn( 'fast' );\n    },\n\n    /** Hide portlet */\n    hide: function(){\n        this.visible = false;\n        this.$el.hide();\n    },\n\n    /** Enable a particular button */\n    enableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', false );\n    },\n\n    /** Disable a particular button */\n    disableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', true );\n    },\n\n    /** Hide a particular operation */\n    hideOperation: function( id ) {\n        this.$operations.find( '#' + id ).hide();\n    },\n\n    /** Show a particular operation */\n    showOperation: function( id ) {\n        this.$operations.find( '#' + id ).show();\n    },\n\n    /** Replaces the event callback of an existing operation */\n    setOperation: function( id, callback ) {\n        this.$operations.find( '#' + id ).off( 'click' ).on( 'click', callback );\n    },\n\n    /** Change title */\n    title: function( new_title ) {\n        new_title && this.$title_text.html( new_title );\n        return this.$title_text.html();\n    },\n\n    /** Collapse portlet */\n    collapse: function() {\n        this.collapsed = true;\n        this.$content.height( '0%' );\n        this.$body.hide();\n        this.collapsible_button.setIcon( 'fa-eye-slash' );\n    },\n\n    /** Expand portlet */\n    expand: function() {\n        this.collapsed = false;\n        this.$content.height( '100%' );\n        this.$body.fadeIn( 'fast' );\n        this.collapsible_button.setIcon( 'fa-eye' );\n    },\n\n    /** Disable content access */\n    disable: function() {\n        this.$backdrop.show();\n    },\n\n    /** Enable content access */\n    enable: function() {\n        this.$backdrop.hide();\n    },\n\n    _template: function() {\n        return $( '<div/>' ).append( $( '<div/>' ).addClass( 'portlet-header' )\n                                .append( $( '<div/>' ).addClass( 'portlet-operations' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-title' )\n                                    .append( $( '<i/>' ).addClass( 'portlet-title-icon' ) )\n                                    .append( $( '<span/>' ).addClass( 'portlet-title-text' ) ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-content' )\n                                .append( $( '<div/>' ).addClass( 'portlet-body' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-buttons' ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-backdrop' ) );\n    }\n});\nreturn {\n    View : View\n}\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-portlet.js","/** This module contains all button views. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                icon        : '',\n                cls         : 'btn btn-default',\n                wait        : false,\n                wait_text   : 'Sending...',\n                wait_cls    : 'btn btn-info',\n                disabled    : false,\n                percentage  : -1\n            }).set( options );\n            this.setElement( $( '<button/>' ).attr( 'type', 'button' )\n                                             .append( this.$icon        = $( '<i/>' ) )\n                                             .append( this.$title       = $( '<span/>' ) )\n                                             .append( this.$progress    = $( '<div/>' ).append( this.$progress_bar = $( '<div/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'ui-button-default' )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'id', options.id )\n                    .attr( 'disabled', options.disabled )\n                    .css( 'float', options.floating )\n                    .off( 'click' ).on( 'click' , function() {\n                        $( '.tooltip' ).hide();\n                        options.onclick && !self.disabled && options.onclick();\n                    })\n                    .tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$progress.addClass( 'progress' ).css( 'display', options.percentage !== -1 ? 'block' : 'none' );\n            this.$progress_bar.addClass( 'progress-bar' ).css( { width : options.percentage + '%' } );\n            this.$icon.removeClass().addClass( 'icon fa' );\n            this.$title.removeClass().addClass( 'title' );\n            if ( options.wait ) {\n                this.$el.addClass( options.wait_cls ).prop( 'disabled', true );\n                this.$icon.addClass( 'fa-spinner fa-spin ui-margin-right' );\n                this.$title.html( options.wait_text );\n            } else {\n                this.$el.addClass( options.cls );\n                this.$icon.addClass( options.icon );\n                this.$title.html( options.title );\n                options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set( 'disabled', true );\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set( 'disabled', false );\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set( 'wait', true );\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set( 'wait', false );\n        },\n\n        /** Change icon */\n        setIcon: function( icon ) {\n            this.model.set( 'icon', icon );\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : ''\n            }).set( options );\n            this.setElement( $( '<a/>' ).append( this.$icon  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .attr( { id         : options.id,\n                             href       : options.href || 'javascript:void(0)',\n                             title      : options.title,\n                             target     : options.target || '_top',\n                             disabled   : options.disabled } )\n                    .tooltip( { placement: 'bottom' } )\n                    .off( 'click' ).on( 'click' , function() {\n                        options.onclick && !options.disabled && options.onclick();\n                    });\n            this.$icon.removeClass().addClass( options.icon );\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : 'Select/Unselect all',\n                icons       : [ 'fa-square-o', 'fa-minus-square-o', 'fa-check-square-o' ],\n                value       : 0,\n                onchange    : function(){}\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$icon   = $( '<span/>' ) )\n                                          .append( this.$title  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass( 'ui-button-check' )\n                    .off( 'click' ).on('click', function() {\n                        self.model.set( 'value', ( self.model.get( 'value' ) === 0 && 2 ) || 0 );\n                        options.onclick && options.onclick();\n                    });\n            this.$title.html( options.title );\n            this.$icon.removeClass()\n                      .addClass( 'icon fa ui-margin-right' )\n                      .addClass( options.icons[ options.value ] );\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function ( new_val, total ) {\n            if ( new_val !== undefined ) {\n                if ( total && new_val !== 0 ) {\n                    new_val = ( new_val !== total ) && 1 || 2;\n                }\n                this.model.set( 'value', new_val );\n                this.model.get( 'onchange' )( this.model.get( 'value' ) );\n            }\n            return this.model.get( 'value' );\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                icon        : '',\n                cls         : 'ui-button-icon',\n                disabled    : false\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$button = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                               .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render : function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'disabled', options.disabled )\n                    .attr( 'id', options.id )\n                    .css( 'float', options.floating )\n                    .off( 'click' ).on( 'click', function() {\n                        $( '.tooltip' ).hide();\n                        !options.disabled && options.onclick && options.onclick();\n                    });\n            this.$button.addClass( 'button' ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function ( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id              : '',\n                title           : '',\n                floating        : 'right',\n                pull            : 'right',\n                icon            : null,\n                onclick         : null,\n                cls             : 'ui-button-icon ui-button-menu',\n                tooltip         : '',\n                target          : '',\n                href            : '',\n                onunload        : null,\n                visible         : true,\n                tag             : ''\n            }).set( options );\n            this.collection = new Backbone.Collection();\n            this.setElement( $( '<div/>' ).append( this.$root = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                             .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.listenTo( this.collection, 'change add remove reset', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'dropdown' )\n                    .addClass( options.cls )\n                    .attr( 'id', options.id )\n                    .css( { float   : options.floating,\n                            display : options.visible && this.collection.where( { visible: true } ).length > 0 ? 'block' : 'none' } );\n            this.$root.addClass( 'root button dropdown-toggle' )\n                      .attr( 'data-toggle', 'dropdown' )\n                      .tooltip( { title: options.tooltip, placement: 'bottom' } )\n                      .off( 'click' ).on( 'click', function( e ) {\n                            $( '.tooltip' ).hide();\n                            e.preventDefault();\n                            options.onclick && options.onclick();\n                      } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.removeClass().addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            this.$menu && this.$menu.remove();\n            if ( this.collection.length > 0 ) {\n                this.$menu = $( '<ul/>' ).addClass( 'menu dropdown-menu' )\n                                         .addClass( 'pull-' + self.model.get( 'pull' ) )\n                                         .attr( 'role', 'menu' );\n                this.$el.append( this.$menu );\n            }\n            this.collection.each( function( submodel ) {\n                var suboptions = submodel.attributes;\n                if ( suboptions.visible ) {\n                    var $link = $( '<a/>' ).addClass( 'dropdown-item' )\n                                           .attr( { href : suboptions.href, target : suboptions.target } )\n                                           .append( $( '<i/>' ).addClass( 'fa' )\n                                                               .addClass( suboptions.icon )\n                                                               .css( 'display', suboptions.icon ? 'inline-block' : 'none' ) )\n                                           .append( suboptions.title )\n                                           .on( 'click', function( e ) {\n                                                if ( suboptions.onclick ) {\n                                                    e.preventDefault();\n                                                    suboptions.onclick();\n                                                }\n                                           } );\n                    self.$menu.append( $( '<li/>' ).append( $link ) );\n                    suboptions.divider && self.$menu.append( $( '<li/>' ).addClass( 'divider' ) );\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function ( options ) {\n            this.collection.add( Utils.merge( options, {\n                title       : '',\n                target      : '',\n                href        : '',\n                onclick     : null,\n                divider     : false,\n                visible     : true,\n                icon        : null,\n                cls         : 'button-menu btn-group'\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault   : ButtonDefault,\n        ButtonLink      : ButtonLink,\n        ButtonIcon      : ButtonIcon,\n        ButtonCheck     : ButtonCheck,\n        ButtonMenu      : ButtonMenu\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc', 'mvc/form/form-section', 'mvc/form/form-data' ],\nfunction( Utils, Portlet, Ui, FormSection, FormData ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = new Backbone.Model({\n                initial_errors  : false,\n                cls             : 'ui-portlet-limited',\n                icon            : null,\n                always_refresh  : true,\n                message_status  : 'warning'\n            }).set( options );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        /** Update available options */\n        update: function( new_model ){\n            var self = this;\n            this.data.matchModel( new_model, function( node, input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( input && input.options ) {\n                    if ( !_.isEqual( input.options, node.options ) ) {\n                        input.options = node.options;\n                        var field = self.field_list[ input_id ];\n                        if ( field.update ) {\n                            var new_options = [];\n                            if ( ( [ 'data', 'data_collection', 'drill_down' ] ).indexOf( input.type ) != -1 ) {\n                                new_options = input.options;\n                            } else {\n                                for ( var i in node.options ) {\n                                    var opt = node.options[ i ];\n                                    if ( opt.length > 2 ) {\n                                        new_options.push( { label: opt[ 0 ], value: opt[ 1 ] } );\n                                    }\n                                }\n                            }\n                            field.update( new_options );\n                            field.trigger( 'change' );\n                            Galaxy.emit.debug( 'form-view::update()', 'Updating options for ' + input_id );\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function( active ) {\n            for ( var i in this.input_list ) {\n                var field = this.field_list[ i ];\n                var input = this.input_list[ i ];\n                if ( input.is_dynamic && field.wait && field.unwait ) {\n                    field[ active ? 'wait' : 'unwait' ]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function ( input_id, message, silent ) {\n            var input_element = this.element_list[ input_id ];\n            if ( input_element ) {\n                input_element.error( message || 'Please verify this parameter.' );\n                this.portlet.expand();\n                this.trigger( 'expand', input_id );\n                if ( !silent ) {\n                    var $panel = this.$el.parents().filter(function() {\n                        return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n                    }).first();\n                    $panel.animate( { scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500 );\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function( options ) {\n            this.trigger( 'reset' );\n            if ( options && options.errors ) {\n                var error_messages = this.data.matchResponse( options.errors );\n                for ( var input_id in this.element_list ) {\n                    var input = this.element_list[ input_id ];\n                    if ( error_messages[ input_id ] ) {\n                        this.highlight( input_id, error_messages[ input_id ], true );\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function() {\n            var self = this;\n            this.off('change');\n            this.off('reset');\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager( this );\n            this._renderForm();\n            this.data.create();\n            this.model.get( 'initial_errors' ) && this.errors( this.model.attributes );\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on( 'change', function( input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( !input || input.refresh_on_change || self.model.get( 'always_refresh' ) ) {\n                    var new_check = self.data.checksum();\n                    if ( new_check != current_check ) {\n                        current_check = new_check;\n                        self.model.get( 'onchange' ) && self.model.get( 'onchange' )();\n                    }\n                }\n            });\n            this.on('reset', function() {\n                _.each( self.element_list, function( input_element ) { input_element.reset() } );\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function() {\n            $( '.tooltip' ).remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View( this, { inputs: options.inputs } );\n            this.portlet = new Portlet.View({\n                icon            : options.icon,\n                title           : options.title,\n                cls             : options.cls,\n                operations      : options.operations,\n                buttons         : options.buttons,\n                collapsible     : options.collapsible,\n                collapsed       : options.collapsed,\n                onchange_title  : options.onchange_title\n            });\n            this.portlet.append( this.message.$el );\n            this.portlet.append( this.section.$el );\n            this.$el.empty();\n            options.inputs && this.$el.append( this.portlet.$el );\n            options.message && this.message.update( { persistent: true, status: options.message_status, message: options.message } );\n            Galaxy.emit.debug( 'form-view::initialize()', 'Completed' );\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-view.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'utils/utils',\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    'mvc/ui/popup-menu'\n], function(Utils, GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.dict_format = grid_config.dict_format;\n        var self = this;\n        window.add_tag_to_grid_filter = function( tag_name, tag_value ){\n            // Put tag name and value together.\n            var tag = tag_name + ( tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\" );\n            var advanced_search = $( '#advanced-search').is(\":visible\" );\n            if( !advanced_search ){\n                $('#standard-search').slideToggle('fast');\n                $('#advanced-search').slideToggle('fast');\n            }\n            self.add_filter_condition( \"tags\", tag );\n        };\n\n        // set element\n        if ( this.dict_format ) {\n            this.setElement('<div/>');\n            if ( grid_config.url_base && !grid_config.items ) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data['f-' + k] = v;\n                });\n                $.ajax({\n                    url     : grid_config.url_base + '?' + $.param( url_data ),\n                    success : function( response ) {\n                        response.embedded = grid_config.embedded;\n                        response.filters  = grid_config.filters;\n                        self.init_grid( response );\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement('#grid-container');\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        // link grid model\n        this.grid = new GridModel(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each( options.items, function( item, index ) {\n            var button = self.$( '#grid-' + index + '-popup' ).off();\n            var popup = new PopupMenu( button );\n            _.each( options[ 'operations' ], function( operation ) {\n                self._add_operation( popup, operation, item );\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function( popup, operation, item ) {\n        var self = this;\n        var settings = item.operation_config[ operation.label ];\n        if ( settings.allowed && operation.allow_popup ) {\n            popup.addItem({\n                html                : operation.label,\n                href                : settings.url_args,\n                target              : settings.target,\n                confirmation_text   : operation.confirm,\n                func                : function( e ) {\n                    e.preventDefault();\n                    var label = $( e.target ).html();\n                    if ( operation.onclick ) {\n                        operation.onclick( item.encode_id );\n                    } else {\n                        self.execute( this.findItemByHtml( label ) );\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        var options = {\n            operation           : operation_name,\n            id                  : item_ids,\n            confirmation_text   : confirmation_text\n        };\n        if ( operation.target == 'top' ) {\n            options = _.extend( options, {\n                href   : operation.href,\n                target : operation.target\n            });\n        }\n        this.execute( options );\n        return true;\n    },\n\n    check_all_items: function () {\n        var check = this.$('.grid-row-select-checkbox');\n        var state = this.$( '#check_all' ).prop( 'checked' );\n        _.each( check, function( c ) {\n            $( c ).prop( 'checked', state );\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if ( target == 'top' ) {\n                window.top.location = href + '?' + $.param( this.grid.get_url_data() );\n            } else if ( this.grid.can_async_op(operation) || this.dict_format ) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async') || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc'], function(Utils, Portlet, Ui) {\n\n// ui list element\nvar View = Backbone.View.extend({\n    // create portlet to keep track of selected list elements\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // initialize options\n        this.options = options;\n        this.name = options.name || 'element';\n        this.multiple = options.multiple || false;\n\n        // create message handler\n        this.message = new Ui.Message();\n\n        // create portlet\n        this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\n        // create select field containing the options which can be inserted into the list\n        this.select = new Ui.Select.View({ optional : options.optional });\n\n        // create insert new list element button\n        this.button = new Ui.ButtonIcon({\n            icon        : 'fa fa-sign-in',\n            floating    : 'left',\n            tooltip     : 'Insert new ' + this.name,\n            onclick     : function() {\n                self.add({\n                    id      : self.select.value(),\n                    name    : self.select.text()\n                });\n            }\n        });\n\n        // build main element\n        this.setElement(this._template(options));\n        this.$('.ui-list-message').append(this.message.$el);\n        this.$('.ui-list-portlet').append(this.portlet.$el);\n        this.$('.ui-list-button').append(this.button.$el);\n        this.$('.ui-list-select').append(this.select.$el);\n    },\n\n    /** Return/Set currently selected list elements */\n    value: function(val) {\n        // set new value\n        if (val !== undefined) {\n            this.portlet.empty();\n            if ($.isArray(val)) {\n                for (var i in val) {\n                    var v = val[i];\n                    var v_id = null;\n                    var v_name = null;\n                    if ($.type(v) != 'string') {\n                        v_id = v.id;\n                        v_name = v.name;\n                    } else {\n                        v_id = v_name = v;\n                    }\n                    if (v_id != null) {\n                        this.add({\n                            id      : v_id,\n                            name    : v_name\n                        });\n                    }\n                }\n            }\n            this._refresh();\n        }\n        // get current value\n        var lst = [];\n        this.$('.ui-list-id').each(function() {\n            lst.push({\n                id      : $(this).prop('id'),\n                name    : $(this).find('.ui-list-name').html()\n            });\n        });\n        if (lst.length == 0) {\n            return null;\n        }\n        return lst;\n    },\n\n    /** Add row */\n    add: function(options) {\n        var self = this;\n        if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n            if (!Utils.isEmpty(options.id)) {\n                var $el = $(this._templateRow({\n                    id      : options.id,\n                    name    : options.name\n                }));\n                $el.on('click', function() {\n                    $el.remove();\n                    self._refresh();\n                });\n                $el.on('mouseover', function() {\n                    $el.addClass('portlet-highlight');\n                });\n                $el.on('mouseout', function() {\n                    $el.removeClass('portlet-highlight');\n                });\n                this.portlet.append($el);\n                this._refresh();\n            } else {\n                this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n            }\n        } else {\n            this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n        }\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.select.update(options);\n    },\n\n    /** Refresh view */\n    _refresh: function() {\n        if (this.$('.ui-list-id').length > 0) {\n            !this.multiple && this.button.disable();\n            this.$('.ui-list-portlet').show();\n        } else {\n            this.button.enable();\n            this.$('.ui-list-portlet').hide();\n        }\n        this.options.onchange && this.options.onchange();\n    },\n\n    /** Main Template */\n    _template: function(options) {\n        return  '<div class=\"ui-list\">' +\n                    '<div class=\"ui-margin-top\">' +\n                        '<span class=\"ui-list-button\"/>' +\n                        '<span class=\"ui-list-select\"/>' +\n                    '</div>' +\n                    '<div class=\"ui-list-message\"/>' +\n                    '<div class=\"ui-list-portlet\"/>' +\n                '</div>';\n    },\n\n    /** Row Template */\n    _templateRow: function(options) {\n        return  '<div id=\"' + options.id + '\" class=\"ui-list-id\">' +\n                    '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                    '<span class=\"ui-list-name\">' + options.name + '</span>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-list.js","/** Base class for options based ui elements **/\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar Base = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false,\n            optional    : false,\n            onchange    : function(){}\n        }).set( options );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.on( 'change', function() { self.model.get( 'onchange' )( self.value() ) } );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty()\n                .removeClass()\n                .addClass( 'ui-options' )\n                .append( this.$message   = $( '<div/>' ) )\n                .append( this.$menu      = $( '<div/>' ).addClass( 'ui-options-menu' ) )\n                .append( this.$options   = $( this._template() ) );\n\n        // add select/unselect all button\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$( 'input' ).prop( 'checked', self.all_button.value() !== 0 );\n                    self.value( self._getValue() );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$menu.append( this.all_button.$el );\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if ( this._templateOptions ) {\n            this.$options.append( this._templateOptions( this.model.get( 'data' ) ) );\n        } else {\n            _.each( this.model.get( 'data' ), function( option ) {\n                self.$options.append( $( self._templateOption( option ) )\n                                        .addClass( 'ui-option' )\n                                        .tooltip( { title: option.tooltip, placement: 'bottom' } ) );\n            });\n        }\n        var self = this;\n        this.$( 'input' ).on( 'change', function() {\n            self.value( self._getValue() );\n            self.trigger( 'change' );\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    _changeWait: function() {\n        if ( this.model.get( 'wait' ) ) {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'wait_text' ), 'info' );\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'error_text' ), 'danger' );\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css( 'display', 'inline-block' );\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this._getValue() === null && !this.model.get( 'multiple' ) && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n        this.all_button && this.all_button.value( $.isArray( this._getValue() ) ? this._getValue().length : 0, this.length() );\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$( 'input' ).first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$( '.ui-option' ).length;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            if ( new_value !== null ) {\n                var values = $.isArray( new_value ) ? new_value : [ new_value ];\n                _.each( values, function( v ) {\n                    self.$( 'input[value=\"' + v + '\"]' ).first().prop( 'checked', true );\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$( ':checked' ).each( function() {\n            selected.push( $( this ).val() );\n        });\n        if ( Utils.isEmpty( selected ) ) {\n            return null;\n        }\n        return this.model.get( 'multiple' ) ? selected : selected[ 0 ];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function( text, status ) {\n        this.$message.show()\n                     .removeClass()\n                     .addClass( 'ui-message alert alert-' + status )\n                     .html( text );\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list' );\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function( pair ) {\n        var id = Utils.uid();\n        return  $( '<div/>' ).addClass( 'ui-option' )\n                    .append( $( '<input/>' ).attr( {\n                        id      : id,\n                        type    : this.model.get( 'type' ),\n                        name    : this.model.id,\n                        value   : pair.value } ) )\n                    .append( $( '<label/>' ).addClass( 'ui-options-label' )\n                                            .attr( 'for', id )\n                                            .html( pair.label ) );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'checkbox';\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function( options ) {\n        Base.prototype.initialize.call( this, options );\n    },\n\n    /** Set current value */\n    _setValue: function ( new_value ) {\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            this.$( 'label' ).removeClass( 'active' );\n            this.$( '[value=\"' + new_value + '\"]' ).prop( 'checked', true ).closest( 'label' ).addClass( 'active' );\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function( pair ) {\n        var $el =  $( '<label/>' ).addClass( 'btn btn-default' );\n        pair.icon && $el.append( $( '<i/>' ).addClass( 'fa' ).addClass( pair.icon ).addClass( !pair.label && 'no-padding' ) );\n        $el.append( $( '<input/>' ).attr( { type: 'radio', name: this.model.id, value: pair.value } ) );\n        pair.label && $el.append( pair.label );\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'btn-group ui-radiobutton' ).attr( 'data-toggle', 'buttons' );\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar View = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.data  = [];\n        this.data2 = [];\n        this.model = options && options.model || new Backbone.Model({\n            id          : Utils.uid(),\n            cls         : 'ui-select',\n            error_text  : 'No options available',\n            empty_text  : 'Nothing selected',\n            visible     : true,\n            wait        : false,\n            multiple    : false,\n            searchable  : true,\n            optional    : false,\n            disabled    : false,\n            onchange    : function(){},\n            value       : null,\n            selectall   : true,\n            pagesize    : 20\n        }).set( options );\n        this.on( 'change', function() { self.model.get( 'onchange' ) && self.model.get( 'onchange' )( self.value() ) } );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:disabled', this._changeDisabled, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:multiple change:searchable change:cls change:id', this.render, this );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get( 'searchable' ) ? this._renderSearchable() : this._renderClassic();\n        this.$el.addClass( this.model.get( 'cls' ) )\n                .attr( 'id', this.model.get( 'id' ) );\n        this.$select.empty().addClass( 'select' )\n                    .attr( 'id', this.model.get( 'id' ) + '_select' )\n                    .prop( 'multiple', this.model.get( 'multiple' ) )\n                    .on( 'change', function() {\n                        self.value( self._getValue() );\n                        self.trigger( 'change' );\n                    });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el.addClass( this.model.get( 'multiple' ) ? 'ui-select-multiple' : 'ui-select' )\n                .append( this.$select      = $( '<select/>' ) )\n                .append( this.$dropdown    = $( '<div/>' ) )\n                .append( this.$resize      = $( '<div/>' )\n                .append( this.$resize_icon = $( '<i/>' ) ) );\n        if ( this.model.get( 'multiple' ) ) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass( 'fa fa-angle-double-right fa-rotate-45' ).show();\n            this.$resize.removeClass()\n                        .addClass( 'icon-resize' )\n                        .show()\n                        .off( 'mousedown' ).on( 'mousedown', function( event ) {\n                            var currentY = event.pageY;\n                            var currentHeight = self.$select.height();\n                            self.minHeight = self.minHeight || currentHeight;\n                            $( '#dd-helper' ).show().on( 'mousemove', function( event ) {\n                                self.$select.height( Math.max( currentHeight + ( event.pageY - currentY ), self.minHeight ) );\n                            }).on( 'mouseup mouseleave', function() {\n                                $( '#dd-helper' ).hide().off();\n                            });\n                        });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el.append( this.$select   = $( '<div/>' ) )\n                .append( this.$dropdown = $( '<div/>' ) );\n        this.$dropdown.hide();\n        if ( !this.model.get( 'multiple' ) ) {\n            this.$dropdown.show().on( 'click', function() {\n                self.$select.select2 && self.$select.select2( 'open' );\n            });\n        }\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) && this.model.get( 'selectall' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 && _.each( self.model.get( 'data' ), function( option ) {\n                        new_value.push( option.value );\n                    });\n                    self.value( new_value );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$el.prepend( this.all_button.$el );\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function( term, text ) {\n        return !term || term == '' || String( text ).toUpperCase().indexOf( term.toUpperCase() ) >= 0\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if ( !this.model.get( 'multiple' ) && this.model.get( 'optional' ) ) {\n            this.data.push( { value: '__null__', label: self.model.get( 'empty_text' ) } );\n        }\n        _.each( this.model.get( 'data' ), function( option ) {\n            self.data.push( option );\n        });\n        if ( this.length() == 0 ) {\n            this.data.push( { value: '__null__', label: this.model.get( 'error_text' ) } );\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            this.data2 = [];\n            _.each( this.data, function( option, index ) {\n                self.data2.push( { order: index, id: option.value, text: option.label, tags: option.tags } );\n            });\n            this.$select.data( 'select2' ) && this.$select.select2( 'destroy' );\n            this.matched_tags = {};\n            this.$select.select2({\n                data            : self.data2,\n                closeOnSelect   : !this.model.get( 'multiple' ),\n                multiple        : this.model.get( 'multiple' ),\n                query           : function( q ) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get( 'pagesize' );\n                    var results = _.filter( self.data2, function ( e ) {\n                        var found = false;\n                        _.each( e.tags, function( tag ) {\n                            if ( self._match( q.term, tag ) ) {\n                                found = self.matched_tags[ tag ] = true;\n                            }\n                        });\n                        return found || self._match( q.term, e.text );\n                    });\n                    q.callback({\n                        results: results.slice( ( q.page - 1 ) * pagesize, q.page * pagesize ),\n                        more   : results.length >= q.page * pagesize\n                    });\n                },\n                formatResult    : function( result ) {\n                    return _.escape( result.text ) +\n                        '<div class=\"ui-tags\">' +\n                            _.reduce( result.tags, function( memo, tag ) {\n                                if ( self.matched_tags[ tag ] ) {\n                                    return memo + '&nbsp;' +\n                                        '<div class=\"label label-info\">' +\n                                            _.escape( tag ) +\n                                        '</div>'\n                                }\n                                return memo;\n                            }, '' ) +\n                        '</div>';\n                }\n            });\n            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n        } else {\n            this.$select.find( 'option' ).remove();\n            _.each( this.data, function( option ) {\n                self.$select.append( $( '<option/>' ).attr( 'value', option.value ).html( _.escape( option.label ) ) );\n            });\n        }\n        this.model.set( 'disabled', this.length() == 0 );\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if ( this.model.get( 'searchable' ) ) {\n            this.$select.select2( this.model.get( 'disabled' ) ? 'disable' : 'enable' );\n        } else {\n            this.$select.prop( 'disabled', this.model.get( 'disabled' ) );\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown.removeClass()\n                      .addClass( 'icon-dropdown fa' )\n                      .addClass( this.model.get( 'wait' ) ? 'fa-spinner fa-spin' : 'fa-caret-down' );\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n        this.$select[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this.model.get( 'multiple' ) ) {\n            if ( this.all_button ) {\n                var value = this._getValue();\n                this.all_button.value( $.isArray( value ) ? value.length : 0, this.length() );\n            }\n        } else if ( this._getValue() === null && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[ 0 ].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function( value ) {\n        return _.findWhere( this.data, { value: value } );\n    },\n\n    /** Return the label/text of the current selection */\n    text: function () {\n        var v = this._getValue();\n        var d = this.exists( $.isArray( v ) ? v[ 0 ] : v );\n        return d ? d.label : '';\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set( 'visible', true );\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set( 'visible', false );\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get( 'disabled' );\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set( 'disabled', false );\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set( 'disabled', true );\n    },\n\n    /** Update all available options at once */\n    add: function( options, sorter ) {\n        _.each( this.model.get( 'data' ), function( v ) {\n            v.keep && !_.findWhere( options, { value: v.value } ) && options.push( v );\n        });\n        sorter && options && options.sort( sorter );\n        this.model.set( 'data', options );\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function( callback ) {\n        this.model.set( 'onchange', callback );\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray( this.model.get( 'data' ) ) ? this.model.get( 'data' ).length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if( new_value === null || new_value === undefined ) {\n            new_value = '__null__';\n        }\n        if ( this.model.get( 'multiple' ) ) {\n            new_value = $.isArray( new_value ) ? new_value : [ new_value ];\n        } else if ( $.isArray( new_value ) ) {\n            if ( new_value.length > 0 ) {\n                new_value = new_value[ 0 ];\n            } else {\n                new_value = '__null__';\n            }\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            if ( $.isArray( new_value ) ) {\n                val = [];\n                _.each( new_value, function( v ) {\n                    var d = _.findWhere( self.data2, { id: v } );\n                    d && val.push( d );\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere( this.data2, { id: new_value } );\n                new_value = d;\n            }\n            this.$select.select2( 'data', new_value );\n        } else {\n            this.$select.val( new_value );\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if ( this.model.get( 'searchable' ) ) {\n            var selected = this.$select.select2( 'data' );\n            if ( selected ) {\n                if ( $.isArray( selected ) ) {\n                    val = [];\n                    selected.sort( function( a, b ) { return a.order - b.order } );\n                    _.each( selected, function( v ) { val.push( v.id ) } );\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty( val ) ? null : val;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","define([\n    //jquery\n    //backbone\n], function(){\n// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n//TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function( $button, options ){\n        // default settings\n        this.$button = $button;\n        if( !this.$button.length ){\n            this.$button = $( '<div/>' );\n        }\n        this.options = options || [];\n        this.$button.data( 'popupmenu', this );\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click( function( event ){\n            // if there's already a menu open, remove it\n            $( '.popmenu-wrapper' ).remove();\n            menu._renderAndShow( event );\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function( clickEvent ){\n        this.render();\n        this.$el.appendTo( 'body' ).css( this._getShownPosition( clickEvent )).show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function(){\n        // render the menu body absolute and hidden, fill with template\n        this.$el.addClass( 'popmenu-wrapper' ).hide()\n            .css({ position : 'absolute' })\n            .html( this.template( this.$button.attr( 'id' ), this.options ));\n\n        // set up behavior on each link/anchor elem\n        if( this.options.length ){\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find( 'li' ).each( function( i, li ){\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if( option.func ){\n                    $( this ).children( 'a.popupmenu-option' ).click( function( event ){\n                        option.func.call( menu, event, option );\n                        // We must preventDefault otherwise clicking \"cancel\"\n                        // on a purge or something still navigates and causes\n                        // the action.\n                        event.preventDefault();\n                        // bubble up so that an option click will call the close behavior\n                    });\n                }\n            });\n        }\n        return this;\n    },\n\n    template : function( id, options ){\n        return [\n            '<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions( options ), '</ul>'\n        ].join( '' );\n    },\n\n    _templateOptions : function( options ){\n        if( !options.length ){\n            return '<li>(no options)</li>';\n        }\n        return _.map( options, function( option ){\n            if( option.divider ){\n                return '<li class=\"divider\"></li>';\n            } else if( option.header ){\n                return [ '<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>' ].join( '' );\n            }\n            var href   = option.href || 'javascript:void(0);',\n                target = ( option.target  )?( ' target=\"' + option.target + '\"' ):( '' ),\n                check  = ( option.checked )?( '<span class=\"fa fa-check\"></span>' ):( '' );\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>',\n                    check, option.html,\n                '</a></li>'\n            ].join( '' );\n        }).join( '' );\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition : function( clickEvent ){\n\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2 ;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min( x, $( document ).scrollLeft() + $( window ).width() - menuWidth - 5 );\n        x = Math.max( x, $( document ).scrollLeft() + 5 );\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function(){\n        var menu = this;\n//TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup( event ){\n            $( document ).off( 'click.close_popup' );\n            if( window && window.parent !== window ){\n                try {\n                    $( window.parent.document ).off( \"click.close_popup\" );\n                } catch( err ){}\n            } else {\n                try {\n                    $( 'iframe#galaxy_main' ).contents().off( \"click.close_popup\" );\n                } catch( err ){}\n            }\n            menu.remove();\n        }\n\n        $( 'html' ).one( \"click.close_popup\", closePopup );\n        if( window && window.parent !== window ){\n            try {\n                $( window.parent.document ).find( 'html' ).one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        } else {\n            try {\n                $( 'iframe#galaxy_main' ).contents().one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function( item, index ){\n        // append to end if no index\n        index = ( index >= 0 ) ? index : this.options.length;\n        this.options.splice( index, 0, item );\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function( index ){\n        if( index >=0 ){\n            this.options.splice( index, 1 );\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function( html ){\n        for( var i = 0; i < this.options.length; i++ ){\n            if( _.has( this.options[i], 'html' ) && ( this.options[i].html === html )){\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function( html ){\n        return this.options[( this.findIndexByHtml( html ))];\n    },\n\n    // string representation\n    toString: function(){\n        return 'PopupMenu';\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create( $button, options ){\n    return new PopupMenu( $button, options );\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = function( button_element, initial_options ){\n    var convertedOptions = [];\n    _.each( initial_options, function( optionVal, optionKey ){\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if( optionVal === null ){ // !optionVal? (null only?)\n            newOption.header = true;\n\n        // keys with function values indicate: a menu option\n        } else if( jQuery.type( optionVal ) === 'function' ){\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push( newOption );\n    });\n    return new PopupMenu( $( button_element ), convertedOptions );\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = function( $parent, selector ){\n    $parent = $( $parent );\n    selector = selector || 'a';\n    var options = [];\n    $parent.find( selector ).each( function( elem, i ){\n        var option = {}, $link = $( elem );\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if( $link.attr( 'href' ) ){\n            var linkHref    = $link.attr( 'href' ),\n                linkTarget  = $link.attr( 'target' ),\n                confirmText = $link.attr( 'confirm' );\n\n            option.func = function(){\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if( ( confirmText ) && ( !confirm( confirmText ) ) ){ return; }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch( linkTarget ){\n                    // relocate the center panel\n                    case '_parent':\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case '_top':\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push( option );\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = function( $buttonElement, $menuElement, menuElementLinkSelector ){\n    $buttonElement = $( $buttonElement );\n    $menuElement = $( $menuElement );\n    var options = PopupMenu.convertLinksToOptions( $menuElement, menuElementLinkSelector );\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu( $buttonElement, options );\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = function( parent, menuSelector, buttonSelectorBuildFn ){\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || 'div[popupmenu]';\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || function( $menuElement, parent ){\n        return '#' + $menuElement.attr( 'popupmenu' );\n    };\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $( parent ).find( menuSelector ).each( function(){\n        var $menuElement    = $( this ),\n            $buttonElement  = $( parent ).find( buttonSelectorBuildFn( $menuElement, parent ) );\n        popupMenusCreated.push( PopupMenu.fromDom( $buttonElement, $menuElement ) );\n        $buttonElement.addClass( 'popup' );\n    });\n    return popupMenusCreated;\n};\n\n\n// =============================================================================\n    return PopupMenu;\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([ 'utils/utils' ], function( Utils ) {\n    var Manager = Backbone.Model.extend({\n        initialize: function( app ) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = '';\n            var self = this;\n            this.app.section.$el.find( '.section-row' ).each( function() {\n                var id = $(this).attr( 'id' );\n                var field = self.app.field_list[ id ];\n                if ( field ) {\n                    sum += id + ':' + JSON.stringify( field.value && field.value() ) + ':' + field.collapsed + ';';\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate( this.app.section.$el, dict );\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add( flat_id, input_id, input_value ) {\n                self.flat_dict[ flat_id ] = input_id;\n                result_dict[ flat_id ] = input_value;\n                self.app.element_list[ input_id ] && self.app.element_list[ input_id ].$el.attr( 'tour_id', flat_id );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert( identifier, head ) {\n                for ( var index in head ) {\n                    var node = head[ index ];\n                    if ( node.input ) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if ( identifier != '' ) {\n                            flat_id += '|';\n                        }\n                        flat_id += input.name;\n                        switch ( input.type ) {\n                            case 'repeat':\n                                var section_label = 'section-';\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for ( var block_label in node ) {\n                                    var pos = block_label.indexOf( section_label );\n                                    if ( pos != -1 ) {\n                                        pos += section_label.length;\n                                        block_indices.push( parseInt( block_label.substr( pos ) ));\n                                        if ( !block_prefix ) {\n                                            block_prefix = block_label.substr( 0, pos );\n                                        }\n                                    }\n                                }\n                                block_indices.sort( function( a, b ) { return a - b; });\n                                var index = 0;\n                                for ( var i in block_indices ) {\n                                    convert( flat_id + '_' + index++, node[ block_prefix + block_indices[ i ] ]);\n                                }\n                                break;\n                            case 'conditional':\n                                var value = self.app.field_list[ input.id ].value();\n                                add( flat_id + '|' + input.test_param.name, input.id, value );\n                                var selectedCase = matchCase( input, value );\n                                if ( selectedCase != -1 ) {\n                                    convert( flat_id, head[ input.id + '-section-' + selectedCase ] );\n                                }\n                                break;\n                            case 'section':\n                                convert( !input.flat && flat_id || '', node );\n                                break;\n                            default:\n                                var field = self.app.field_list[ input.id ];\n                                if ( field && field.value ) {\n                                    var value = field.value();\n                                    if ( input.ignore === undefined || input.ignore != value ) {\n                                        if ( field.collapsed && input.collapsible_value ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add( flat_id, input.id, value );\n                                        if ( input.payload ) {\n                                            for ( var p_id in input.payload ) {\n                                                add( p_id, input.id, input.payload[ p_id ] );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert( '', dict );\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function ( flat_id ) {\n            return this.flat_dict && this.flat_dict[ flat_id ];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function( input, value ) {\n            return matchCase( input, value );\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function( model, callback ) {\n            var self = this;\n            visitInputs( model.inputs, function( input, name ) {\n                self.flat_dict[ name ] && callback ( input, self.flat_dict[ name ] );\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function( response ) {\n            var result = {};\n            var self = this;\n            function search ( id, head ) {\n                if ( typeof head === 'string' ) {\n                    var input_id = self.flat_dict[ id ];\n                    input_id && ( result[ input_id ] = head );\n                } else {\n                    for ( var i in head ) {\n                        var new_id = i;\n                        if ( id !== '' ) {\n                            var separator = '|';\n                            if ( head instanceof Array ) {\n                                separator = '_';\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search ( new_id, head[ i ] );\n                    }\n                }\n            }\n            search( '', response );\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function( parent, dict ) {\n            var self = this;\n            var children = $( parent ).children();\n            children.each( function() {\n                var child = this;\n                var id = $( child ).attr( 'id' );\n                if ( $( child ).hasClass( 'section-row' ) ) {\n                    var input = self.app.input_list[ id ];\n                    dict[ id ] = ( input && { input : input } ) || {};\n                    self._iterate( child, dict[ id ] );\n                } else {\n                    self._iterate( child, dict );\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function( input, value ) {\n        if ( input.test_param.type == 'boolean' ) {\n            if ( value == 'true' ) {\n                value = input.test_param.truevalue || 'true';\n            } else {\n                value = input.test_param.falsevalue || 'false';\n            }\n        }\n        for ( var i in input.cases ) {\n            if ( input.cases[ i ].value == value ) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function( inputs, callback, prefix, context ) {\n        context = $.extend( true, {}, context );\n        _.each( inputs, function ( input ) {\n            if ( input && input.type && input.name ) {\n                context[ input.name ] = input;\n            }\n        });\n        for ( var key in inputs ) {\n            var node = inputs[ key ];\n            node.name = node.name || key;\n            var name = prefix ? prefix + '|' + node.name : node.name;\n            switch ( node.type ) {\n                case 'repeat':\n                    _.each( node.cache, function( cache, j ) {\n                        visitInputs( cache, callback, name + '_' + j, context );\n                    });\n                    break;\n                case 'conditional':\n                    if ( node.test_param ) {\n                        callback( node.test_param, name + '|' + node.test_param.name, context );\n                        var selectedCase = matchCase( node, node.test_param.value );\n                        if ( selectedCase != -1 ) {\n                            visitInputs( node.cases[ selectedCase ].inputs, callback, name, context );\n                        } else {\n                            Galaxy.emit.debug( 'form-data::visitInputs() - Invalid case for ' + name + '.' );\n                        }\n                    } else {\n                        Galaxy.emit.debug( 'form-data::visitInputs() - Conditional test parameter missing for ' + name  + '.' );\n                    }\n                    break;\n                case 'section':\n                    visitInputs( node.inputs, callback, name, context )\n                    break;\n                default:\n                    callback( node, name, context );\n            }\n        }\n    };\n\n    return {\n        Manager         : Manager,\n        visitInputs     : visitInputs\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-data.js","/** This class creates a ui table element. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function(options) {\n            this.options = Utils.merge(options, {\n                content     : 'No content available.',\n                onchange    : null,\n                ondblclick  : null,\n                onconfirm   : null,\n                cls         : 'ui-table',\n                selectable  : true,\n                cls_tr      : ''\n            });\n            this.setElement( this._template() );\n            this.$thead     = this.$('thead');\n            this.$tbody     = this.$('tbody');\n            this.$tmessage  = this.$('tmessage');\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events : {\n            'click'     : '_onclick',\n            'dblclick'  : '_ondblclick'\n        },\n\n        /** Add cell to header row */\n        addHeader: function( $el ) {\n            this.row.append( $( '<th/>' ).append( $el ) );\n        },\n\n        /** Append header row to table */\n        appendHeader: function() {\n            this.$thead.append( this.row );\n            this.row = $( '<tr/>' );\n        },\n\n        /** Add cell to row */\n        add: function($el, width, align) {\n            var wrapper = $( '<td/>' );\n            if ( width ) {\n                wrapper.css( 'width', width );\n            }\n            if ( align ) {\n                wrapper.css( 'text-align', align );\n            }\n            this.row.append( wrapper.append( $el ) );\n        },\n        \n        /** Append row to table */\n        append: function( id, fade ) {\n            this._commit( id, fade, false );\n        },\n        \n        /** Prepend row to table */\n        prepend: function( id, fade ) {\n            this._commit( id, fade, true );\n        },\n        \n        /** Helper to get row element */\n        get: function( id ) {\n            return this.$( '#' + id );\n        },\n\n        /** Delete row by id */\n        del: function( id ) {\n            var item = this.$tbody.find( '#' + id );\n            if ( item.length > 0 ) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function( new_value ) {\n            if ( this.options.selectable ) {\n                this.before = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( new_value !== undefined ) {\n                    this.$tbody.find( 'tr' ).removeClass( 'current' );\n                    if ( new_value ) {\n                        this.$tbody.find( '#' + new_value ).addClass( 'current' );\n                    }\n                }\n                var after = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( after === undefined ) {\n                    return null;\n                } else {\n                    if ( after != this.before && this.options.onchange ) {\n                        this.options.onchange( new_value );\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function() {\n            return this.$tbody.find( 'tr' ).length;\n        },\n\n        /** Helper to append rows */\n        _commit: function( id, fade, prepend ) {\n            this.del( id );\n            this.row.attr( 'id', id );\n            if ( prepend ) {\n                this.$tbody.prepend( this.row );\n            } else {\n                this.$tbody.append( this.row );\n            }\n            if ( fade ) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function() {\n            return $( '<tr class=\"' + this.options.cls_tr + '\"></tr>' );\n        },\n\n        /** Handles onclick events */\n        _onclick: function(e) {\n            var old_value = this.value();\n            var new_value = $( e.target ).closest( 'tr' ).attr( 'id' );\n            if ( new_value != '' ){\n                if ( new_value && old_value != new_value ) {\n                    if ( this.options.onconfirm ) {\n                        this.options.onconfirm( new_value );\n                    } else {\n                        this.value( new_value );\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function( e ) {\n            var value = this.value();\n            if ( value && this.options.ondblclick ) {\n                this.options.ondblclick( value );\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function() {\n            if ( this.row_count == 0 ) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function() {\n            return  '<div>' +\n                        '<table class=\"' + this.options.cls + '\">' +\n                            '<thead/>' +\n                            '<tbody/>' +\n                        '</table>' +\n                        '<tmessage>' + this.options.content + '</tmessage>' +\n                    '<div>';\n        }\n    });\n\n    return {\n        View: View\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-table.js","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable     : this.app_options.text_enable   || 'Enable',\n                text_disable    : this.app_options.text_disable  || 'Disable',\n                cls_enable      : this.app_options.cls_enable    || 'fa fa-caret-square-o-down',\n                cls_disable     : this.app_options.cls_disable   || 'fa fa-caret-square-o-up',\n                always_refresh  : this.app_options.always_refresh\n            }).set( options );\n\n            // set element and link components\n            this.setElement( this._template() );\n            this.$field             = this.$( '.ui-form-field' );\n            this.$info              = this.$( '.ui-form-info' );\n            this.$preview           = this.$( '.ui-form-preview' );\n            this.$collapsible       = this.$( '.ui-form-collapsible' );\n            this.$collapsible_text  = this.$( '.ui-form-collapsible-text' );\n            this.$collapsible_icon  = this.$( '.ui-form-collapsible-icon' );\n            this.$title             = this.$( '.ui-form-title' );\n            this.$title_text        = this.$( '.ui-form-title-text' );\n            this.$error_text        = this.$( '.ui-form-error-text' );\n            this.$error             = this.$( '.ui-form-error' );\n            this.$backdrop          = this.$( '.ui-form-backdrop' );\n\n            // add field element\n            this.$field.prepend( this.field.$el );\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get( 'collapsible_value' );\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify( this.model.get( 'value' ) ) == JSON.stringify( collapsible_value );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on( 'click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger( 'change' );\n                self.render();\n            });\n\n            // hide error on value change\n            if ( this.field.model && !this.model.get( 'always_refresh' ) ) {\n                this.listenTo( this.field.model, 'change:value', function() { self.reset() } );\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set( 'backdrop', true );\n        },\n\n        /** Set error text */\n        error: function( text ) {\n            this.model.set( 'error_text', text );\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get( 'fixed' ) && this.model.set( 'error_text', null );\n        },\n\n        render: function() {\n            // render help\n            $( '.tooltip' ).hide();\n            var help_text = this.model.get( 'help', '' );\n            var help_argument = this.model.get( 'argument' );\n            if ( help_argument && help_text.indexOf( '(' + help_argument + ')' ) == -1 ) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html( help_text );\n            // render visibility\n            this.$el[ this.model.get( 'hidden' ) ? 'hide' : 'show' ]();\n            // render preview view for collapsed fields\n            this.$preview[ ( this.field.collapsed && this.model.get( 'collapsible_preview' ) || this.model.get( 'disabled' ) ) ? 'show' : 'hide' ]()\n                         .html( _.escape( this.model.get( 'text_value' ) ) );\n            // render error messages\n            var error_text = this.model.get( 'error_text' );\n            this.$error[ error_text ? 'show' : 'hide' ]();\n            this.$el[ error_text ? 'addClass' : 'removeClass' ]( 'ui-error' );\n            this.$error_text.html( error_text );\n            // render backdrop\n            this.$backdrop[ this.model.get( 'backdrop' ) ? 'show' : 'hide' ]();\n            // render input field\n            this.field.collapsed || this.model.get( 'disabled' ) ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set( { 'color': this.model.get( 'color' ), 'style': this.model.get( 'style' ) } );\n            // render collapsible options\n            if ( !this.model.get( 'disabled' ) && this.model.get( 'collapsible_value' ) !== undefined ) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text( this.model.get( 'label' ) );\n                this.$collapsible_icon.removeClass().addClass( 'icon' )\n                                      .addClass( this.model.get( 'cls_' +  collapsible_state ) )\n                                      .attr( 'data-original-title', this.model.get( 'text_' + collapsible_state ) )\n                                      .tooltip( { placement: 'bottom' } );\n            } else {\n                this.$title_text.show().text( this.model.get( 'label' ) );\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return  $( '<div/>' ).addClass( 'ui-form-element' )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-error ui-error' )\n                                    .append( $( '<span/>' ).addClass( 'fa fa-arrow-down' ) )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-error-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-title' )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-collapsible' )\n                                        .append( $( '<i/>' ).addClass( 'ui-form-collapsible-icon' ) )\n                                        .append( $( '<span/>' ).addClass( 'ui-form-collapsible-text' ) )\n                                    )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-title-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-field' )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-info' ) )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-backdrop' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-preview' ) );\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-input.js","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-misc',\n        'mvc/ui/ui-select-content',\n        'mvc/ui/ui-select-library',\n        'mvc/ui/ui-select-ftp',\n        'mvc/ui/ui-color-picker'],\n    function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, ColorPicker ) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text'              : '_fieldText',\n            'password'          : '_fieldText',\n            'select'            : '_fieldSelect',\n            'data_column'       : '_fieldSelect',\n            'genomebuild'       : '_fieldSelect',\n            'data'              : '_fieldData',\n            'data_collection'   : '_fieldData',\n            'integer'           : '_fieldSlider',\n            'float'             : '_fieldSlider',\n            'boolean'           : '_fieldBoolean',\n            'drill_down'        : '_fieldDrilldown',\n            'color'             : '_fieldColor',\n            'hidden'            : '_fieldHidden',\n            'hidden_data'       : '_fieldHidden',\n            'baseurl'           : '_fieldHidden',\n            'library_data'      : '_fieldLibrary',\n            'ftpfile'           : '_fieldFtp',\n            'upload'            : '_fieldUpload'\n        },\n\n        /** Returns an input field for a given field type */\n        create: function( input_def ) {\n            var fieldClass = this.types[ input_def.type ];\n            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n            if ( !field ) {\n                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && ( input_def.value = null );\n            field.value( input_def.value );\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function( input_def ) {\n            return new SelectContent.View({\n                id          : 'field-' + input_def.id,\n                extensions  : input_def.extensions,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                type        : input_def.type,\n                flavor      : input_def.flavor,\n                data        : input_def.options,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // customize properties\n            if ( input_def.type == 'data_column' ) {\n                input_def.error_text = 'Missing columns in referenced dataset.'\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if( !data ) {\n                data = [];\n                _.each( input_def.options, function( option ) {\n                    data.push( { label: option[ 0 ], value: option[ 1 ] } );\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch ( input_def.display ) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n                case 'radiobutton':\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id          : 'field-' + input_def.id,\n                data        : data,\n                error_text  : input_def.error_text || 'No options available',\n                multiple    : input_def.multiple,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange,\n                searchable  : input_def.flavor !== 'workflow'\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id          : 'field-' + input_def.id,\n                data        : input_def.options,\n                display     : input_def.display,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function( input_def ) {\n            // field replaces e.g. a select field\n            if ( input_def.options && input_def.data ) {\n                input_def.area = input_def.multiple;\n                if ( Utils.isEmpty( input_def.value ) ) {\n                    input_def.value = null;\n                } else {\n                    if ( $.isArray( input_def.value ) ) {\n                        var str_value = '';\n                        for ( var i in input_def.value ) {\n                            str_value += String( input_def.value[ i ] );\n                            if ( !input_def.multiple ) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id          : 'field-' + input_def.id,\n                type        : input_def.type,\n                area        : input_def.area,\n                readonly    : input_def.readonly,\n                placeholder : input_def.placeholder,\n                datalist    : input_def.datalist,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function( input_def ) {\n            return new Ui.Slider.View({\n                id          : 'field-' + input_def.id,\n                precise     : input_def.type == 'float',\n                is_workflow : input_def.is_workflow,\n                min         : input_def.min,\n                max         : input_def.max,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function( input_def ) {\n            return new Ui.Hidden({\n                id          : 'field-' + input_def.id,\n                info        : input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function( input_def ) {\n            return new Ui.RadioButton.View({\n                id          : 'field-' + input_def.id,\n                data        : [ { label : 'Yes', value : 'true'  },\n                                { label : 'No',  value : 'false' }],\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function( input_def ) {\n            return new ColorPicker({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function( input_def ) {\n            return new SelectLibrary.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function( input_def ) {\n            return new SelectFtp.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Upload file field */\n        _fieldUpload: function( input_def ) {\n            return new Ui.Upload({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-parameters.js","/** This class creates a ui component which enables the dynamic creation of portlets */\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc' ],\nfunction( Utils, Portlet, Ui ) {\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            this.list = {};\n            this.options = Utils.merge( options, {\n                title       : 'Repeat',\n                empty_text  : 'Not available.',\n                max         : null,\n                min         : null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon    : 'fa-plus',\n                title   : 'Insert ' + this.options.title,\n                tooltip : 'Add new ' + this.options.title + ' block',\n                floating: 'clear',\n                cls     : 'ui-button-icon form-repeat-add',\n                onclick : function() { options.onnew && options.onnew() }\n            });\n            this.setElement( $( '<div/>' ).append( this.$list = $( '<div/>' ) )\n                                          .append( $( '<div/>' ).append( this.button_new.$el ) ) );\n        },\n\n        /** Number of repeat blocks */\n        size: function() {\n            return _.size( this.list );\n        },\n\n        /** Add new repeat block */\n        add: function( options ) {\n            if ( !options.id || this.list[ options.id ] ) {\n                Galaxy.emit.debug( 'form-repeat::add()', 'Duplicate or invalid repeat block id.' );\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon    : 'fa-trash-o',\n                tooltip : 'Delete this repeat block',\n                cls     : 'ui-button-icon-plain form-repeat-delete',\n                onclick : function() { options.ondel && options.ondel() }\n            });\n            var portlet = new Portlet.View({\n                id              : options.id,\n                title           : 'placeholder',\n                cls             : options.cls || 'ui-portlet-repeat',\n                operations      : { button_delete: button_delete }\n            });\n            portlet.append( options.$el );\n            portlet.$el.addClass( 'section-row' ).hide();\n            this.list[ options.id ] = portlet;\n            this.$list.append( portlet.$el.fadeIn( 'fast' ) );\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function( id ) {\n            if ( !this.list[ id ] ) {\n                Galaxy.emit.debug( 'form-repeat::del()', 'Invalid repeat block id.' );\n                return;\n            }\n            this.$list.find( '#' + id ).remove();\n            delete this.list[ id ];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function() {\n            for( var id in this.list ) {\n                this.del( id );\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function() {\n            this.button_new.$el.hide();\n            _.each( this.list, function( portlet ) { portlet.hideOperation( 'button_delete' ) } );\n            _.isEmpty( this.list ) && this.$el.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( this.options.empty_text ) );\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            var index = 0;\n            for ( var id in this.list ) {\n                var portlet = this.list[ id ];\n                portlet.title( ++index + ': ' + this.options.title );\n                portlet[ this.size() > this.options.min ? 'showOperation' : 'hideOperation' ]( 'button_delete' );\n            }\n        }\n    });\n\n    return {\n        View : View\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-repeat.js","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-portlet', 'mvc/form/form-repeat', 'mvc/form/form-input', 'mvc/form/form-parameters' ],\nfunction( Utils, Ui, Portlet, Repeat, InputElement, Parameters ) {\n    var View = Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement( $( '<div/>' ) );\n            this.render();\n        },\n\n        /** Render section view */\n        render: function() {\n            var self = this;\n            this.$el.empty();\n            _.each( this.inputs, function( input ) { self.add( input ) } );\n        },\n\n        /** Add a new input element */\n        add: function( input ) {\n            var input_def = jQuery.extend( true, {}, input );\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[ input_def.id ] = input_def;\n            switch( input_def.type ) {\n                case 'conditional':\n                    this._addConditional( input_def );\n                    break;\n                case 'repeat':\n                    this._addRepeat( input_def );\n                    break;\n                case 'section':\n                    this._addSection( input_def );\n                    break;\n                default:\n                    this._addRow( input_def );\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function( input_def ) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get( 'sustain_conditionals' ) && ( input_def.test_param.disabled = true );\n            var field = this._addRow( input_def.test_param );\n\n            // set onchange event for test parameter\n            field.model && field.model.set( 'onchange', function( value ) {\n                var selectedCase = self.app.data.matchCase( input_def, value );\n                for ( var i in input_def.cases ) {\n                    var case_def = input_def.cases[ i ];\n                    var section_row = self.$( '#' + input_def.id + '-section-' + i );\n                    var nonhidden = false;\n                    for ( var j in case_def.inputs ) {\n                        if ( !case_def.inputs[ j ].hidden ) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if ( i == selectedCase && nonhidden ) {\n                        section_row.fadeIn( 'fast' );\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger( 'change' );\n            });\n\n            // add conditional sub sections\n            for ( var i in input_def.cases ) {\n                var sub_section = new View( this.app, { inputs: input_def.cases[ i ].inputs } );\n                this._append( sub_section.$el.addClass( 'ui-form-section' ), input_def.id + '-section-' + i );\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger( 'change' );\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function( input_def ) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title           : input_def.title || 'Repeat',\n                min             : input_def.min,\n                max             : input_def.max,\n                onnew           : function() { create( input_def.inputs ); self.app.trigger( 'change' ); }\n            });\n\n            // helper function to create new repeat blocks\n            function create ( inputs ) {\n                var sub_section_id = input_def.id + '-section-' + ( block_index++ );\n                var sub_section = new View( self.app, { inputs: inputs } );\n                repeat.add( { id      : sub_section_id,\n                              $el     : sub_section.$el,\n                              ondel   : function() { repeat.del( sub_section_id ); self.app.trigger( 'change' ); } } );\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size( input_def.cache );\n            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min || 0 ), input_def.default || 0 ); i++ ) {\n                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n            }\n\n            // hide options\n            this.app.model.get( 'sustain_repeats' ) && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement( this.app, {\n                label   : input_def.title || input_def.name,\n                help    : input_def.help,\n                field   : repeat\n            });\n            this._append( input_element.$el, input_def.id );\n        },\n\n        /** Add a customized section */\n        _addSection: function( input_def ) {\n            var portlet = new Portlet.View({\n                title               : input_def.title || input_def.name,\n                cls                 : 'ui-portlet-section',\n                collapsible         : true,\n                collapsible_button  : true,\n                collapsed           : !input_def.expanded\n            });\n            portlet.append( new View( this.app, { inputs: input_def.inputs } ).$el );\n            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n            this.app.on( 'expand', function( input_id ) { ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand(); } );\n            this._append( portlet.$el, input_def.id );\n        },\n\n        /** Add a single input field element */\n        _addRow: function( input_def ) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function() { self.app.trigger( 'change', id ) };\n            var field = this.parameters.create( input_def );\n            this.app.field_list[ id ] = field;\n            var input_element = new InputElement( this.app, {\n                name                : input_def.name,\n                label               : input_def.hide_label ? '' : input_def.label || input_def.name,\n                value               : input_def.value,\n                text_value          : input_def.text_value,\n                collapsible_value   : input_def.collapsible_value,\n                collapsible_preview : input_def.collapsible_preview,\n                help                : input_def.help,\n                argument            : input_def.argument,\n                disabled            : input_def.disabled,\n                color               : input_def.color,\n                style               : input_def.style,\n                backdrop            : input_def.backdrop,\n                hidden              : input_def.hidden,\n                fixed               : input_def.fixed,\n                field               : field\n            });\n            this.app.element_list[ id ] = input_element;\n            this._append( input_element.$el, input_def.id );\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function( $el, id ) {\n            this.$el.append( $el.addClass( 'section-row' ).attr( 'id', id ) );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-section.js","// dependencies\ndefine([], function() {\n\n// grid model\nreturn Backbone.Model.extend({\n    defaults: {\n        url_base: '',\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.            \n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key],\n                new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } \n            else if (typeof(cur_val) == 'string') {\n                if (cur_val == 'All') {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;   \n                }\n            } \n            else {\n                // Current value is an array.\n                new_val = cur_val;\n                new_val.push(value);\n            }\n            this.attributes.filters[key] = new_val;\n        } \n        else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;            \n        }\n\n        if (typeof(cur_val) === 'string') {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = '';\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = '';\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), function(k) {\n            url_data['f-' + k[0]] = k[1];\n        });\n        return url_data;\n    },\n    \n    // Return URL for obtaining a new grid\n    get_url: function (args) {\n        return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n    }\n    \n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n// grid view templates\nreturn {\n    // template\n    grid: function(options) {\n        var tmpl = '';\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = '<div class=\"loading-elt-overlay\"></div>' +\n                    '<table>' +\n                        '<tr>' +\n                            '<td width=\"75%\">' +\n                                this.grid_header(options) +\n                            '</td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                        '<tr>' +\n                            '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                    '</table>' +\n                    this.grid_table(options);\n        }\n       \n        // add info text\n        if (options.info_text) {\n            tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n        }\n       \n        // return\n        return tmpl;\n    },\n    \n    // template\n    grid_table: function(options) {\n        return  '<form method=\"post\" onsubmit=\"return false;\">' +\n                    '<table id=\"grid-table\" class=\"grid\">' +\n                        '<thead id=\"grid-table-header\"></thead>' +\n                        '<tbody id=\"grid-table-body\"></tbody>' +\n                        '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                    '</table>' +\n                '</form>';\n    },\n    \n    // template\n    grid_header: function(options) {\n        var tmpl =  '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl +=     '<h2>' + options.title + '</h2>';\n        }\n        if (options.global_actions) {\n            tmpl +=     '<ul class=\"manage-table-actions\">';\n            var show_popup = (options.global_actions.length >= 3);\n            if (show_popup) {\n                tmpl +=     '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                            '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl +=         '<li>' +\n                                    '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' +\n                                '</li>';\n            }\n            if (show_popup) {\n                tmpl +=     '</div>';\n            }\n            tmpl +=     '</ul>';\n        }\n        if (options.insert) {\n            tmpl +=     options.insert;\n        }\n       \n        // add grid filters\n        tmpl +=     this.grid_filters(options);\n        tmpl += '</div>'\n        \n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl +=         '<th>';\n            if (options.items.length > 0) {\n                tmpl +=         '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                                '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl +=         '</th>';\n        }\n        \n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl +=     '<th id=\"' + column.key + '-header\">';\n                if (column.href) {\n                    tmpl +=     '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n                } else {\n                    tmpl +=     column.label;\n                }\n                tmpl +=         '<span class=\"sort-arrow\">' + column.extra + '</span>' +\n                            '</th>';\n            }\n        }\n        \n        // finalize\n        tmpl +=        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = '';\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n        \n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n        \n        // create rows\n        for (var i in options.items) {\n        \n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = 'grid-' + i + '-popup';\n            \n            // Tag current\n            tmpl += '<tr ';\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += '>';\n            \n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += '<td style=\"width: 1.5em;\">' +\n                            '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' +\n                        '</td>';\n            }\n            \n            // Data columns\n            for (j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = '';\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n                    \n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n                    \n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n                        \n                    // unescape value\n                    if (jQuery.type( value ) === 'string') {\n                        value = value.replace(/\\/\\//g, '/');\n                    }\n                    \n                    // Attach popup menu?\n                    var id = '';\n                    var cls = '';\n                    if (column.attach_popup) {\n                        id = 'grid-' + i + '-popup';\n                        cls = 'menubutton';\n                        if (link != '') {\n                            cls += ' split';\n                        }\n                        cls += ' popup';\n                    }\n                    \n                    // Check for row wrapping\n                    tmpl += '<td ' + nowrap + '>';\n                \n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                        }\n                        tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n                        if (options.operations.length != 0) {\n                            tmpl += '</div>';\n                        }\n                    } else {\n                        tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n                    }\n                    tmpl += '</td>';\n                }\n            }\n            tmpl += '</tr>';\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n    \n        // create template string\n        var tmpl = '';\n        \n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links      = options.num_page_links;\n            var cur_page_num        = options.cur_page_num;\n            var num_pages           = options.num_pages;\n            \n            // First pass on min page.\n            var page_link_range     = num_page_links / 2;\n            var min_page            = cur_page_num - page_link_range\n            var min_offset          = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - ( cur_page_num - min_page );\n            }\n            \n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - ( max_page + 1 - cur_page_num );\n            }\n            \n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset\n                if (min_page < 1) {\n                    min_page = 1\n                }\n            }\n            \n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += '<td></td>';\n            }\n            tmpl +=     '<td colspan=\"100\">' +\n                            '<span id=\"page-link-container\">' +\n                                'Page:';\n            \n            if (min_page > 1) {\n                tmpl +=         '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n            \n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                \n                if (page_index == options.cur_page_num) {\n                    tmpl +=     '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n                } else {\n                    tmpl +=     '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n                }\n            }\n            \n            // show last page\n            if (max_page < num_pages) {\n                    tmpl +=     '...' +\n                                '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n            }\n            tmpl +=         '</span>';\n            \n            // Show all link\n            tmpl +=         '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                        '</td>' +\n                    '</tr>';\n        }\n        \n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += '<tr>' +\n                        '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                        '<td></td>' +\n                        '<td colspan=\"100\">' +\n                            'For <span class=\"grid-selected-count\"></span> selected items: ';\n            \n            // configure buttons for operations\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                }\n            }\n            \n            // finalize template\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n    \n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n    \n        // add global operations\n        if (found_global) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n                }\n            }\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n        \n        // add legend\n        if (options.legend) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">' + options.legend + '</td>' +\n                    '</tr>';\n        }\n        \n        // return\n        return tmpl;\n    },\n        \n    // template\n    message: function(options) {\n        var status = options.status == 'success' ? 'done' : options.status;\n        return  '<p>' +\n                    '<div class=\"' + status + 'message transient-message\">' + _.escape( options.message ) + '</div>' +\n                    '<div style=\"clear: both\"></div>' +\n                '</p>';\n    },\n    \n    // template\n    grid_filters: function (options) {\n    \n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = 'none';\n        if (options.advanced_search) {\n            advanced_search_display = 'block';\n        }\n        \n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = 'block';\n                }\n                show_advanced_search_link = true;\n            }\n        }\n        \n        // hide standard search if advanced is shown\n        var standard_search_display = 'block';\n        if (advanced_search_display == 'block') {\n            standard_search_display = 'none';\n        }\n\n        //\n        // standard search\n        //\n        var tmpl =  '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"padding: 0;\">' +\n                                    '<table>';\n        \n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'standard') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize standard search\n        tmpl +=                     '</table>' +\n                                '</td>' +\n                            '</tr>' +\n                            '<tr>' +\n                                '<td>';\n                \n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl +=                 '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n        \n        // finalize standard search display\n        tmpl +=                 '</td>' +\n                            '</tr>' +\n                        '</table>' +\n                    '</div>';\n    \n        //\n        // advanced search\n        //\n        tmpl +=     '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"text-align: left\" colspan=\"100\">' +\n                                    '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                                '</td>' +\n                            '</tr>';\n        \n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize advanced search template\n        tmpl +=         '</table>' +\n                    '</div>';\n\n        // return template\n        return tmpl;\n    },\n    \n    // template\n    grid_column_filter: function(options, column) {\n        \n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == 'advanced') {\n            column_label = column_label.toLowerCase();\n        }\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        if (column.filterable == 'advanced') {\n            tmpl +=         '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n        }\n        tmpl +=             '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl +=             '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != 'All') {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify( filter_value )\n                        }\n                        tmpl +=     '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl +=                 '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n                \n                // single filter value\n                if (type == 'string') {\n                    if (column_filter != 'All') {\n                        // append template\n                        tmpl +=         this.filter_element(column_key, column_filter);\n                    }\n                }\n                \n                // multiple filter values\n                if (type == 'array') {\n                    for (var i in column_filter ) {\n                        // get filter\n                        var filter = column_filter[i];\n                        \n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl +=         this.filter_element(column_key, filter);\n                    }\n                }\n            }\n            \n            // close span\n            tmpl +=                 '</span>';\n            \n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = '';\n            if (column.filterable == 'standard') {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n            \n            // print input field for column\n            tmpl +=                 '<span class=\"search-box\">' +\n                                        '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' +\n                                        '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                                            '<i class=\"fa fa-search\"></i>' +\n                                        '</button>' +\n                                    '</span>' +\n                                '</form>';\n        } else {\n            // filter criteria\n            tmpl +=             '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add category filters\n            var seperator = false;\n            for (cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n                \n                // each filter will have only a single argument, so get that single argument\n                var cf_key = '';\n                var cf_arg = '';\n                for (key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n                \n                // add seperator\n                if (seperator) {\n                    tmpl += ' | ';\n                }\n                seperator = true;\n                \n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n                } else {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter\">' +\n                                        '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' +\n                                    '</span>';\n                }\n            }\n            tmpl +=             '</span>';\n        }\n        tmpl +=             '</td>' +\n                        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return  '<span class=\"text-filter-val\">' + filter_value +\n                    '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' +\n                        '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                    '</a>' +\n                '</span>';\n\n    }\n};\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","/** Renders the color picker used e.g. in the tool form **/\ndefine(['utils/utils'], function( Utils ) {\n    return Backbone.View.extend({\n        colors: {\n            standard: ['c00000','ff0000','ffc000','ffff00','92d050','00b050','00b0f0','0070c0','002060','7030a0'],\n            base    : ['ffffff','000000','eeece1','1f497d','4f81bd','c0504d','9bbb59','8064a2','4bacc6','f79646'],\n            theme   :[['f2f2f2','7f7f7f','ddd9c3','c6d9f0','dbe5f1','f2dcdb','ebf1dd','e5e0ec','dbeef3','fdeada'],\n                      ['d8d8d8','595959','c4bd97','8db3e2','b8cce4','e5b9b7','d7e3bc','ccc1d9','b7dde8','fbd5b5'],\n                      ['bfbfbf','3f3f3f','938953','548dd4','95b3d7','d99694','c3d69b','b2a2c7','92cddc','fac08f'],\n                      ['a5a5a5','262626','494429','17365d','366092','953734','76923c','5f497a','31859b','e36c09'],\n                      ['7f7f7e','0c0c0c','1d1b10','0f243e','244061','632423','4f6128','3f3151','205867','974806']]\n        },\n\n        initialize : function( options ) {\n            this.options = Utils.merge( options, {} );\n            this.setElement( this._template() );\n            this.$panel = this.$( '.ui-color-picker-panel' );\n            this.$view = this.$( '.ui-color-picker-view' );\n            this.$value = this.$( '.ui-color-picker-value' );\n            this.$header = this.$( '.ui-color-picker-header' );\n            this._build();\n            this.visible = false;\n            this.value( this.options.value );\n            this.$boxes = this.$( '.ui-color-picker-box' );\n            var self = this;\n            this.$boxes.on( 'click', function() {\n                self.value( $( this ).css( 'background-color' ) );\n                self.$header.trigger( 'click' );\n            } );\n            this.$header.on( 'click', function() {\n                self.visible = !self.visible;\n                if ( self.visible ) {\n                    self.$view.fadeIn( 'fast' );\n                } else {\n                    self.$view.fadeOut( 'fast' );\n                }\n            } );\n        },\n\n        /** Get/set value */\n        value : function ( new_val ) {\n            if ( new_val !== undefined && new_val !== null ) {\n                this.$value.css( 'background-color', new_val );\n                this.$( '.ui-color-picker-box' ).empty();\n                this.$( this._getValue() ).html( this._templateCheck() );\n                this.options.onchange && this.options.onchange( new_val );\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var rgb = this.$value.css( 'background-color' );\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if ( rgb ) {\n                function hex( x ) {\n                    return ( '0' + parseInt( x ).toString( 16 ) ).slice( -2 );\n                }\n                return '#' + hex( rgb[ 1] ) + hex( rgb[ 2 ] ) + hex( rgb[ 3 ] );\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function() {\n            this._content( { colors : this.colors.base } );\n            for ( var i in this.colors.theme ) {\n                var line_def = {};\n                if ( i == 0 ) {\n                    line_def[ 'bottom' ] = true;\n                } else if ( i != this.colors.theme.length - 1 ) {\n                    line_def[ 'top' ]     = true;\n                    line_def[ 'bottom' ]  = true;\n                } else {\n                    line_def[ 'top' ]     = true;\n                }\n                line_def[ 'colors' ] = this.colors.theme[ i ];\n                this._content( line_def );\n            }\n            this._content( { colors : this.colors.standard } );\n        },\n\n        /** Create content */\n        _content: function( options ) {\n            var colors   = options.colors;\n            var $content = $( this._templateContent() );\n            var $line = $content.find( '.line' );\n            this.$panel.append( $content );\n            for ( var i in colors ) {\n                var $box = $( this._templateBox( colors[ i ] ) );\n                if ( options.top ) {\n                    $box.css( 'border-top', 'none' );\n                    $box.css( 'border-top-left-radius', '0px' );\n                    $box.css( 'border-top-right-radius', '0px' );\n                }\n                if ( options.bottom ) {\n                    $box.css( 'border-bottom', 'none' );\n                    $box.css( 'border-bottom-left-radius', '0px' );\n                    $box.css( 'border-bottom-right-radius', '0px' );\n                }\n                $line.append( $box );\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function() {\n            return  '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function() {\n            return  '<div class=\"ui-color-picker-content\">' +\n                        '<div class=\"line\"/>' +\n                    '</div>';\n        },\n\n        /** Box template */\n        _templateBox: function( color ) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function() {\n            return  '<div class=\"ui-color-picker\">' +\n                        '<div class=\"ui-color-picker-header\">' +\n                            '<div class=\"ui-color-picker-value\"/>' +\n                            '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                        '</div>' +\n                        '<div class=\"ui-color-picker-view ui-input\">' +\n                            '<div class=\"ui-color-picker-panel\"/>' +\n                        '</div>'\n                    '</div>';\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-color-picker.js","/** This class creates/wraps a drill down element. */\ndefine([ 'utils/utils', 'mvc/ui/ui-options' ], function( Utils, Options ) {\n\nvar View = Options.BaseIcons.extend({\n    initialize: function( options ) {\n        options.type     = options.display || 'checkbox';\n        options.multiple = ( options.type == 'checkbox' );\n        Options.BaseIcons.prototype.initialize.call( this, options );\n    },\n\n    /** Set states for selected values */\n    _setValue: function ( new_value ) {\n        Options.BaseIcons.prototype._setValue.call( this, new_value );\n        if ( new_value !== undefined && new_value !== null && this.header_index ) {\n            var self = this;\n            var values = $.isArray( new_value ) ? new_value : [ new_value ];\n            _.each( values, function( v ) {\n                var list = self.header_index[ v ];\n                _.each( list, function( element ) {\n                    self._setState( element, true );\n                });\n            });\n        }\n    },\n\n    /** Expand/collapse a sub group */\n    _setState: function ( header_id, is_expanded ) {\n        var $button = this.$( '.button-' + header_id );\n        var $subgroup = this.$( '.subgroup-' + header_id );\n        $button.data( 'is_expanded', is_expanded );\n        if ( is_expanded ) {\n            $subgroup.show();\n            $button.removeClass( 'fa-plus-square' ).addClass( 'fa-minus-square' );\n        } else {\n            $subgroup.hide();\n            $button.removeClass( 'fa-minus-square' ).addClass( 'fa-plus-square' );\n        }\n    },\n\n    /** Template to create options tree */\n    _templateOptions: function() {\n        var self = this;\n        this.header_index = {};\n\n        // attach event handler\n        function attach( $el, header_id ) {\n            var $button = $el.find( '.button-' + header_id );\n            $button.on( 'click', function() {\n                self._setState( header_id, !$button.data( 'is_expanded' ) );\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate ( $tmpl, options, header ) {\n            header = header || [];\n            for ( i in options ) {\n                var level = options[ i ];\n                var has_options = level.options && level.options.length > 0;\n                var new_header = header.slice( 0 );\n                self.header_index[ level.value ] = new_header.slice( 0 );\n                var $group = $( '<div/>' );\n                if ( has_options ) {\n                    var header_id = Utils.uid();\n                    var $button = $( '<span/>' ).addClass( 'button-' + header_id ).addClass( 'ui-drilldown-button fa fa-plus-square' );\n                    var $subgroup = $( '<div/>' ).addClass( 'subgroup-' + header_id ).addClass( 'ui-drilldown-subgroup' );\n                    $group.append( $( '<div/>' )\n                                        .append( $button )\n                                        .append( self._templateOption( { label: level.name, value: level.value } ) ) );\n                    new_header.push( header_id );\n                    iterate ( $subgroup, level.options, new_header );\n                    $group.append( $subgroup );\n                    attach( $group, header_id );\n                } else {\n                    $group.append( self._templateOption( { label: level.name, value: level.value } ) );\n                }\n                $tmpl.append( $group );\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $( '<div/>' );\n        iterate( $tmpl, this.model.get( 'data' ) );\n        return $tmpl;\n    },\n\n    /** Template for drill down view */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list drilldown-container' ).attr( 'id', this.model.id );\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","define([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-select-default' ], function( Utils, Ui, Select ) {\n\n/** Batch mode variations */\nvar Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.LINKED     },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.LINKED     } ],\n    data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections',  multiple: true,    batch: Batch.DISABLED   } ],\n    data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   } ],\n    workflow_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    module_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.ENABLED    } ],\n    module_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder',   tooltip: 'Multiple collections', multiple: true,    batch: Batch.ENABLED    } ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            src_labels  : { 'hda' : 'dataset', 'hdca': 'dataset collection' },\n            pagelimit   : 100,\n            statustimer : 1000\n        }).set( options );\n        this.setElement( $( '<div/>' ).addClass( 'ui-select-content' ) );\n        this.button_product = new Ui.RadioButton.View( {\n            value       : 'false',\n            data        : [ { icon: 'fa fa-chain', value: 'false',\n                              tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' },\n                            { icon: 'fa fa-chain-broken',  value: 'true',\n                              tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' } ] } );\n        var $batch_div = $( '<div/>' ).addClass( 'ui-form-info' )\n                            .append( $( '<i/>' ).addClass( 'fa fa-sitemap' ) )\n                            .append( $( '<span/>' ).html( 'This is a batch mode input field. Separate jobs will be triggered for each dataset selection.' ) );\n        this.$batch = {\n            linked  : $batch_div.clone(),\n            enabled : $batch_div.clone().append( $( '<div/>' )\n                                                    .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( 'Batch options:' ) )\n                                                    .append( this.button_product.$el ) )\n                                                    .append( $( '<div/>' ).css( 'clear', 'both' ) )\n        };\n\n        // add drag-drop event handlers\n        this.$el.on( 'dragenter', function( e ) { this.lastenter = e.target; self.$el.addClass( 'ui-dragover' ); } )\n                .on( 'dragover',  function( e ) { e.preventDefault(); } )\n                .on( 'dragleave', function( e ) { this.lastenter === e.target && self.$el.removeClass( 'ui-dragover' ); } )\n                .on( 'drop',      function( e ) { self._handleDrop( e ); } );\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:current', this._changeCurrent, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this );\n        this.render();\n\n        // add change event\n        this.on( 'change', function() { options.onchange && options.onchange( self.value() ) } );\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Update data representing selectable options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Return the currently selected dataset values */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        var current = this.model.get( 'current' );\n        if ( this.config[ current ] ) {\n            var id_list = this.fields[ current ].value();\n            if (id_list !== null) {\n                id_list = $.isArray( id_list ) ? id_list : [ id_list ];\n                if ( id_list.length > 0 ) {\n                    var result = this._batch( { values: [] } );\n                    for ( var i in id_list ) {\n                        var details = this.history[ id_list[ i ] + '_' + this.config[ current ].src ];\n                        if ( details ) {\n                            result.values.push( details );\n                        } else {\n                            Galaxy.emit.debug( 'ui-select-content::value()', 'Requested details not found for \\'' + id_list[ i ] + '\\'.'  );\n                            return null;\n                        }\n                    }\n                    result.values.sort( function( a, b ) { return a.hid - b.hid } );\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug( 'ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.'  );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each( this.fields, function( field, i ) {\n            if ( self.model.get( 'current' ) == i ) {\n                field.$el.show();\n                _.each( self.$batch, function( $batchfield, batchmode ) {\n                    $batchfield[ self.config[ i ].batch == batchmode ? 'show' : 'hide' ]();\n                });\n                self.button_type.value( i );\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id = ( this.model.get( 'flavor' ) ? this.model.get( 'flavor' ) + '_' : '' ) +\n                        String( this.model.get( 'type' ) ) + ( this.model.get( 'multiple' ) ? '_multiple' : '' );\n        if ( Configurations[ config_id ] ) {\n            this.config = Configurations[ config_id ];\n        } else {\n            this.config = Configurations[ 'data' ];\n            Galaxy.emit.debug( 'ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.'  );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get( 'data' );\n        var extensions = Utils.textify( this.model.get( 'extensions' ) );\n        var src_labels = this.model.get( 'src_labels' );\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each( this.config, function( c, i ) {\n            self.button_data.push({\n                value   : i,\n                icon    : c.icon,\n                tooltip : c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional    : self.model.get( 'optional' ),\n                    multiple    : c.multiple,\n                    searchable  : !c.multiple || ( data && data[ c.src ] && data[ c.src ].length > self.model.get( 'pagelimit' ) ),\n                    selectall   : false,\n                    error_text  : 'No ' + ( extensions ? extensions + ' ' : '' ) + ( src_labels[ c.src ] || 'content' ) + ' available.',\n                    onchange    : function() {\n                        self.trigger( 'change' );\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value   : this.model.get( 'current' ),\n            data    : this.button_data,\n            onchange: function( value ) {\n                self.model.set( 'current', value );\n                self.trigger( 'change' );\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if ( this.fields.length > 1 ) {\n            this.$el.append( this.button_type.$el );\n            button_width = Math.max( 0, this.fields.length * 36 ) + 'px';\n        }\n        _.each( this.fields, function( field ) {\n            self.$el.append( field.$el.css( { 'margin-left': button_width } ) );\n        });\n        _.each( this.$batch, function( $batchfield, batchmode ) {\n            self.$el.append( $batchfield.css( { 'margin-left': button_width } ) );\n        });\n        this.model.set( 'current', 0 );\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each( this.fields, function( field ) { field[ self.model.get( 'wait' ) ? 'wait' : 'unwait' ]() } );\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get( 'data' );\n        var self = this;\n        var select_options = {};\n        _.each( options, function( items, src ) {\n            select_options[ src ] = [];\n            _.each( items, function( item ) {\n                select_options[ src ].push({\n                    hid  : item.hid,\n                    keep : item.keep,\n                    label: item.hid + ': ' + item.name,\n                    value: item.id,\n                    tags : item.tags\n                });\n                self.history[ item.id + '_' + src ] = item;\n            });\n        });\n        _.each( this.config, function( c, i ) {\n            select_options[ c.src ] && self.fields[ i ].add( select_options[ c.src ], function( a, b ) { return b.hid - a.hid } );\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function () {\n        var new_value = this.model.get( 'value' );\n        if ( new_value && new_value.values && new_value.values.length > 0 ) {\n            // create list with content ids\n            var list = [];\n            _.each( new_value.values, function( value ) {\n                list.push( value.id );\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[ 0 ].src;\n            var multiple = new_value.values.length > 1;\n            for( var i = 0; i < this.config.length; i++ ) {\n                var field = this.fields[ i ];\n                var c = this.config[ i ];\n                if ( c.src == src && [ multiple, true ].indexOf( c.multiple ) !== -1 ) {\n                    this.model.set( 'current', i );\n                    field.value( list );\n                    break;\n                }\n            }\n        } else {\n            _.each( this.fields, function( field ) {\n                field.value( null );\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function( ev ) {\n        try {\n            var data      = this.model.get( 'data' );\n            var current   = this.model.get( 'current' );\n            var config    = this.config[ current ];\n            var field     = this.fields[ current ];\n            var drop_data = JSON.parse( ev.originalEvent.dataTransfer.getData( 'text' ) )[ 0 ];\n            var new_id    = drop_data.id;\n            var new_src   = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n            var new_value = { id: new_id, src: new_src };\n            if ( data && _.findWhere( data[ new_src ], new_value ) ) {\n                if ( config.src == new_src ) {\n                    var current_value = field.value();\n                    if ( current_value && config.multiple ) {\n                        if ( current_value.indexOf( new_id ) == -1 ) {\n                            current_value.push( new_id );\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value( current_value );\n                } else {\n                    this.model.set( 'value', { values: [ new_value ] } );\n                    this.model.trigger( 'change:value' );\n                }\n                this.trigger( 'change' );\n                this._handleDropStatus( 'success' );\n            } else {\n                this._handleDropStatus( 'danger' );\n            }\n        } catch( e ) {\n            this._handleDropStatus( 'danger' );\n        }\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function( status ) {\n        var self = this;\n        this.$el.removeClass( 'ui-dragover' ).addClass( 'ui-dragover-' + status );\n        setTimeout( function() { self.$el.removeClass( 'ui-dragover-' + status ) }, this.model.get( 'statustimer' ) );\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function( result ) {\n        result[ 'batch' ] = false;\n        var current = this.model.get( 'current' );\n        var config = this.config[ current ];\n        if ( config.src == 'hdca' && !config.multiple ) {\n            var hdca = this.history[ this.fields[ current ].value() + '_hdca' ];\n            if ( hdca && hdca.map_over_type ) {\n                result[ 'batch' ] = true;\n            }\n        }\n        if ( config.batch == Batch.LINKED || config.batch == Batch.ENABLED ) {\n            result[ 'batch' ] = true;\n            if ( config.batch == Batch.ENABLED && this.button_product.value() === 'true' ) {\n                result[ 'product' ] = true;\n            }\n        }\n        return result;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-content.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-list'],\n        function(Utils, List) {\n\n/**\n * FTP file selector\n */\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // create ui-list view to keep track of selected ftp files\n        this.ftpfile_list = new List.View({\n            name        : 'file',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                options.onchange && options.onchange(self.value());\n            }\n        });\n\n        // create elements\n        this.setElement(this.ftpfile_list.$el);\n\n        // initial fetch of ftps\n        Utils.get({\n            url     : Galaxy.root + 'api/remote_files',\n            success : function(response) {\n                var data = [];\n                for (var i in response) {\n                    data.push({\n                        value   : response[i]['path'],\n                        label   : response[i]['path']\n                    });\n                }\n                self.ftpfile_list.update(data);\n            }\n        });\n    },\n\n    /** Return/Set currently selected ftp datasets */\n    value: function(val) {\n        return this.ftpfile_list.value(val);\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-ftp.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-table', 'mvc/ui/ui-list'],\n        function(Utils, Ui, Table, List) {\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + 'api/libraries?deleted=false'\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on('change', function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries  = new Libraries();\n        this.datasets   = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange    : function(value) {\n                self.datasets.config.set('library_id', value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name        : 'dataset',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                self.trigger('change');\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on('reset', function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value   : model.id,\n                    label   : model.get('name')\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on('reset', function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get('type') === 'file') {\n                        data.push({\n                            value   : model.id,\n                            label   : model.get('name')\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$('.library-select').append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger('change');\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return  '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                        '<span class=\"library-title\">Select Library</span>' +\n                        '<span class=\"library-select\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-library.js","define([ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id       : Utils.uid(),\n                min      : null,\n                max      : null,\n                step     : null,\n                precise  : false,\n                split    : 10000,\n                value    : null,\n                onchange : function(){}\n            }).set( options );\n\n            // create new element\n            this.setElement( this._template() );\n            this.$el.attr( 'id', this.model.id );\n            this.$text   = this.$( '.ui-form-slider-text' );\n            this.$slider = this.$( '.ui-form-slider-element' );\n\n            // add text field event\n            var pressed = [];\n            this.$text.on( 'change', function () {\n                self.value( $( this ).val() );\n            }).on( 'keyup', function( e ) {\n                pressed[e.which] = false;\n            }).on( 'keydown', function ( e ) {\n                var v = e.which;\n                pressed[ v ] = true;\n                if ( self.model.get( 'is_workflow' ) && pressed[ 16 ] && v == 52 ) {\n                    self.value( '$' );\n                    event.preventDefault();\n                } else if (!( v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || ( v >= 48 && v <= 57 && !pressed[ 16 ] ) || ( v >= 96 && v <= 105 )\n                    || ( ( v == 190 || v == 110 ) && $( this ).val().indexOf( '.' ) == -1 && self.model.get( 'precise' ) )\n                    || ( ( v == 189 || v == 109 ) && $( this ).val().indexOf( '-' ) == -1 )\n                    || self._isParameter( $( this ).val() )\n                    || pressed[ 91 ] || pressed[ 17 ] ) ) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if ( !step ) {\n                if ( opts.precise && this.has_slider ) {\n                    step = ( opts.max - opts.min ) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if ( this.has_slider ) {\n                this.$text.addClass( 'ui-form-slider-left' );\n                this.$slider.slider( { min: opts.min, max: opts.max, step: step } )\n                            .on( 'slide', function ( event, ui ) { self.value( ui.value ) } );\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get( 'value' );\n            this.has_slider && this.$slider.slider( 'value', value );\n            value !== this.$text.val() && this.$text.val( value );\n        },\n\n        /** Set and return the current value */\n        value : function ( new_val ) {\n            var options = this.model.attributes;\n            if ( new_val !== undefined ) {\n                if ( new_val !== null && new_val !== '' && !this._isParameter( new_val ) ) {\n                    isNaN( new_val ) && ( new_val = 0 );\n                    !options.precise && ( new_val = Math.round( new_val ) );\n                    options.max !== null && ( new_val = Math.min( new_val, options.max ) );\n                    options.min !== null && ( new_val = Math.max( new_val, options.min ) );\n                }\n                this.model.set( 'value', new_val );\n                this.model.trigger( 'change' );\n                options.onchange( new_val );\n            }\n            return this.model.get( 'value' );\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function( value ) {\n            return this.model.get( 'is_workflow' ) && String( value ).substring( 0, 1 ) === '$';\n        },\n\n        /** Slider template */\n        _template: function() {\n            return  '<div class=\"ui-form-slider\">' +\n                        '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                        '<div class=\"ui-form-slider-element\"/>' +\n                    '</div>';\n        }\n    });\n\n    return {\n        View : View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    QUERY_STRING = require( 'utils/query-string-parsing' ),\n    Ui = require( 'mvc/ui/ui-misc' );\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize : function( page, options ){\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function( url, data ) {\n        data = data || {};\n        data.__identifer = Math.random().toString( 36 ).substr( 2 );\n        if ( !$.isEmptyObject( data ) ) {\n            url += url.indexOf( '?' ) == -1 ? '?' : '&';\n            url += $.param( data , true );\n        }\n        Galaxy.params = {};\n        this.navigate( url, { 'trigger': true } );\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function( callback, args, name ){\n        Galaxy.debug( 'router execute:', callback, args, name );\n        var queryObj = QUERY_STRING.parse( args.pop() );\n        args.push( queryObj );\n        if( callback ){\n            if ( this.authenticate( args, name ) ) {\n                callback.apply( this, args );\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function( args, name ) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display( new Ui.Message( { status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true } ) );\n    }\n});\n\nmodule.exports = Router\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","/** Generic form view */\ndefine( [ 'mvc/form/form-view', 'mvc/ui/ui-misc' ], function( Form, Ui ) {\n\n    var View = Backbone.View.extend({\n\n        initialize: function( options ) {\n            this.model = new Backbone.Model( options );\n            this.url = this.model.get( 'url' );\n            this.redirect = this.model.get( 'redirect' );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            $.ajax({\n                url     : Galaxy.root + this.url,\n                type    : 'GET'\n            }).done( function( response ) {\n                var options = $.extend( {}, self.model.attributes, response );\n                var form = new Form({\n                    title  : options.title,\n                    icon   : options.icon,\n                    inputs : options.inputs,\n                    operations: {\n                        'submit': new Ui.ButtonIcon({\n                            tooltip  : options.submit_tooltip,\n                            title    : options.submit_title || 'Save settings',\n                            icon     : options.submit_icon || 'fa-save',\n                            onclick  : function() { self._submit( form ) }\n                        })\n                    }\n                });\n                self.$el.empty().append( form.$el );\n            }).fail( function( response ) {\n                self.$el.empty().append( new Ui.Message({\n                    message     : 'Failed to load resource ' + self.url + '.',\n                    status      : 'danger',\n                    persistent  : true\n                }).$el );\n            });\n        },\n\n        _submit: function( form ) {\n            var self = this;\n            $.ajax( {\n                url         : Galaxy.root + self.url,\n                data        : JSON.stringify( form.data.create() ),\n                type        : 'PUT',\n                contentType : 'application/json'\n            }).done( function( response ) {\n                var success_message = { message: response.message, status: 'success' };\n                if ( self.redirect ) {\n                    window.location = self.redirect + '?' + $.param( success_message );\n                } else {\n                    form.data.matchModel( response, function ( input, input_id ) {\n                        form.field_list[ input_id ].value( input.value );\n                    });\n                    form.message.update( success_message );\n                }\n            }).fail( function( response ) {\n                form.message.update( { message: response.responseJSON.err_msg, status: 'danger' } );\n            });\n        }\n    });\n\n    return {\n        View  : View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-wrapper.js","var _l = require( 'utils/localization' );\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function( page, options ) {\n        var self = this;\n        this.page       = page;\n        this.root       = options.root;\n        this.config     = options.config;\n        this.settings   = options.settings;\n        this.message    = options.message;\n        this.status     = options.status;\n        this.model = new Backbone.Model({\n            title   : _l( 'Administration' )\n        });\n        this.categories = new Backbone.Collection([{\n            title : 'Server',\n            items : [ {\n                title   : 'Data types registry',\n                url     : 'admin/view_datatypes_registry'\n            },{\n                title   : 'Data tables registry',\n                url     : 'admin/view_tool_data_tables'\n            },{\n                title   : 'Display applications',\n                url     : 'admin/display_applications'\n            },{\n                title   : 'Manage jobs',\n                url     : 'admin/jobs'\n            } ]\n        },{\n            title : 'Tools and Tool Shed',\n            items : [ {\n                title   : 'Search Tool Shed',\n                url     : 'admin_toolshed/browse_tool_sheds',\n                enabled : self.settings.is_tool_shed_installed\n            },{\n                title   : 'Search Tool Shed (Beta)',\n                url     : 'admin_toolshed/browse_toolsheds',\n                enabled : self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            },{\n                title   : 'Monitor installing repositories',\n                url     : 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n                enabled : self.settings.installing_repository_ids\n            },{\n                title   : 'Manage installed tools',\n                url     : 'admin_toolshed/browse_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Reset metadata',\n                url     : 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Download local tool',\n                url     : 'admin/package_tool'\n            },{\n                title   : 'Tool lineage',\n                url     : 'admin/tool_versions'\n            },{\n                title   : 'Reload a tool\\'s configuration',\n                url     : 'admin/reload_tool'\n            },{\n                title   : 'Review tool migration stages',\n                url     : 'admin/review_tool_migration_stages'\n            },{\n                title   : 'View Tool Error Logs',\n                url     : 'admin/tool_errors'\n            },{\n                title   : 'Manage Display Whitelist',\n                url     : 'admin/sanitize_whitelist'\n            },{\n                title   : 'Manage Tool Dependencies',\n                url     : 'admin/manage_tool_dependencies'\n            } ]\n        },{\n            title : 'User Management',\n            items : [ {\n                title   : 'Users',\n                url     : 'admin/users',\n                target  : '__use_router__'\n            },{\n                title   : 'Groups',\n                url     : 'admin/groups'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles'\n            },{\n                title   : 'API keys',\n                url     : 'userskeys/all_users'\n            },{\n                title   : 'Impersonate a user',\n                url     : 'admin/impersonate',\n                enabled : self.config.allow_user_impersonation\n            } ]\n        },{\n            title : 'Data',\n            items : [ {\n                title   : 'Quotas',\n                url     : 'admin/quotas',\n                enabled : self.config.enable_quotas\n            },{\n                title   : 'Data libraries',\n                url     : 'library_admin/browse_libraries'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles'\n            },{\n                title   : 'Local data',\n                url     : 'data_manager'\n            } ]\n        },{\n            title : 'Form Definitions',\n            items : [ {\n                title   : 'Form definitions',\n                url     : 'forms/browse_form_definitions'\n            } ]\n        },{\n            title : 'Sample Tracking',\n            items : [ {\n                title   : 'Sequencers and external services',\n                url     : 'external_service/browse_external_services'\n            },{\n                title   : 'Request types',\n                url     : 'request_type/browse_request_types'\n            },{\n                title   : 'Sequencing requests',\n                url     : 'requests_admin/browse_requests'\n            },{\n                title   : 'Find samples',\n                url     : 'requests_common/find_samples?cntrller=requests_admin'\n            } ]\n        }]);\n        this.setElement( this._template() );\n    },\n\n    render : function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each( function( category ) {\n            var $section = $( self._templateSection( category.attributes ) );\n            var $entries = $section.find( '.ui-side-section-body' );\n            _.each( category.get( 'items' ), function( item ) {\n                if ( item.enabled === undefined || item.enabled ) {\n                    var $link = $( '<a/>' ).attr( { href : self.root + item.url } ).text( _l( item.title ) );\n                    if ( item.target == '__use_router__' ) {\n                        $link.on( 'click', function( e ) { e.preventDefault(); self.page.router.push( item.url ); } );\n                    } else {\n                        $link.attr( 'target', 'galaxy_main' );\n                    }\n                    $entries.append( $( '<div/>' ).addClass( 'ui-side-section-body-title' ).append( $link ) );\n                }\n            });\n            self.$el.append( $section );\n        });\n        this.page.$( '#galaxy_main' ).prop( 'src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status );\n    },\n\n    _templateSection : function( options ) {\n        return [\n            '<div>',\n                '<div class=\"ui-side-section-title\">' + _l( options.title ) + '</div>',\n                '<div class=\"ui-side-section-body\"/>',\n            '</div>'\n        ].join('');\n    },\n\n    _template : function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString : function() { return 'adminPanel' }\n});\n\nmodule.exports = AdminPanel;\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js"],"sourceRoot":""}