{"version":3,"sources":["webpack:///galaxy.bundled.js","webpack:///./galaxy/scripts/apps/galaxy.js","webpack:///./galaxy/scripts/utils/webpack-localization.js?2b67*","webpack:///./galaxy/scripts/mvc/base-mvc.js?0704*","webpack:///./galaxy/scripts/utils/add-logging.js?71c9*","webpack:///./galaxy/scripts/mvc/user/user-model.js?e6b2*","webpack:///./galaxy/scripts/galaxy-app-base.js","webpack:///./galaxy/scripts/utils/metrics-logger.js"],"names":["webpackJsonp","module","exports","__webpack_require__","GalaxyApp","window","console","debug",1,"__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","localeStrings","localize","strToLocalize","cacheNonLocalized","hasOwnProperty","nonLocalized","navigator","language","apply","undefined",3,"_","Backbone","addLogging","_l","mixin","mixinHash1","propsHash","args","Array","prototype","slice","call","arguments","lastArg","pop","unshift","defaults","wrapTemplate","template","jsonNamespace","templateFn","join","json","view","templateVars","LoggableMixin","logger","_logNamespace","log","this","Function","bind","SessionStorageModel","Model","extend","initialize","initialAttrs","_checkEnabledSessionStorage","id","Error","existing","isNew","_read","clear","silent","save","on","sessionStorage","length","err","alert","sync","method","model","options","trigger","returned","_create","_update","_delete","success","error","toJSON","set","setItem","JSON","stringify","DOMException","userAgent","indexOf","parse","getItem","removeItem","_log","toString","omit","SearchableModelMixin","searchAttributes","searchAliases","searchAttribute","attrKey","searchFor","attrVal","get","isArray","_searchArrayAttribute","toLowerCase","array","any","elem","search","filter","key","matches","term","ATTR_SPECIFIER","split","matchesAll","terms","match","s","all","replace","HiddenUntilActivatedViewMixin","hiddenUntilActivated","$activator","HUAVOptions","$elementShown","$el","showFn","jQuery","toggle","showSpeed","hasBeenShown","is","hidden","isHidden","ev","isFunction","onshowFirstTime","onshow","onhide","DraggableViewMixin","attributes","draggable","$dragHandle","$","toggleDraggable","draggableOff","draggableOn","dragStartHandler","_dragStartHandler","dragEndHandler","_dragEndHandler","handle","attr","addEventListener","removeEventListener","event","dataTransfer","effectAllowed","setData","SelectableViewMixin","selectable","selected","$selector","_renderSelected","find","toggleClass","toggleSelector","hideSelector","showSelector","speed","fxSpeed","show","hide","toggleSelect","deselect","select",25,"obj","namespace","addTo","forEach","logFn","emit",39,"baseMVC","User","urlRoot","Galaxy","root","username","email","total_disk_usage","nice_total_disk_usage","quota_percent","is_admin","data","resp","changes","isAnonymous","isAdmin","loadFromApi","idOrCurrent","CURRENT_ID_STR","userFn","newModel","response","url","fetch","clearSessionStorage","userInfo","push","getCurrentUserFromApi","currentUser","Collection",91,"userModel","metricsLogger","bootstrapped","self","_init","Events","_processOptions","_patchGalaxy","_initLogger","loggerOptions","_initLocale","config","_initUser","user","_setUpListeners","defaultOptions","patchExisting","k","patchWith","MetricsLogger","userJSON","currUser","lastAjax","document","xhr","location","href","userEmail",120,"userId","consoleLogger","LoggingCache","ALL","DEBUG","INFO","WARN","ERROR","METRIC","NONE","logLevel","consoleLevel","defaultNamespace","clientPrefix","maxCacheSize","postSize","addTime","cacheKeyPrefix","postUrl","delayPostInMs","getPingData","onServerResponse","_parseLevel","_sending","_waiting","_postSize","_initCache","cache","maxSize","_emitToConsole","level","type","upper","toUpperCase","logArguments","_addToCache","newLength","add","_buildEntry","_postCache","entry","time","Date","toISOString","when","count","entries","entriesLength","postData","metrics","post","always","fail","status","message","readyState","responseJSON","responseText","done","remove","_delayPost","setTimeout","info","warn","metric","_hasStorage","_initStorage","test","localStorage","e","empty","_cache","_fetchAndParse","overage","splice","_unparseAndStore","removed","print"],"mappings":"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","file":"galaxy.bundled.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar GalaxyApp = __webpack_require__( 91 ).GalaxyApp;\n\twindow.GalaxyApp = GalaxyApp;\n\tconsole.debug( 'galaxy.js, GalaxyApp is now in window' );\n\texports = GalaxyApp;\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function( localeStrings ){\n\t    localeStrings = {};\n\t// =============================================================================\n\t/** Attempt to get a localized string for strToLocalize. If not found, return\n\t *      the original strToLocalize.\n\t * @param {String} strToLocalize the string to localize\n\t * @returns either the localized string if found or strToLocalize if not found\n\t */\n\tvar localize = function( strToLocalize ){\n\t    //console.debug( this + '.localize:', strToLocalize );\n\t\n\t    // cache strings that need to be localized but haven't been?\n\t    if( localize.cacheNonLocalized && !localeStrings.hasOwnProperty( strToLocalize ) ){\n\t        //console.debug( 'localization NOT found:', strToLocalize );\n\t        // add nonCached as hash directly to this function\n\t        if( !localize.nonLocalized ){ localize.nonLocalized = {}; }\n\t        localize.nonLocalized[ strToLocalize ] = navigator.language;\n\t    }\n\t    // return the localized version from the closure if it's there, the strToLocalize if not\n\t    return localeStrings[ strToLocalize ] || strToLocalize;\n\t};\n\tlocalize.cacheNonLocalized = false;\n\t\n\t\n\t// =============================================================================\n\t    return localize;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n\n/***/ 3:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(5),\n\t    __webpack_require__(9),\n\t    __webpack_require__(25),\n\t    __webpack_require__(1)\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function( _, Backbone, addLogging, _l ){\n\t//==============================================================================\n\t/** @class Mixin to add logging capabilities to an object.\n\t *      Designed to allow switching an objects log output off/on at one central\n\t *      statement. Can be used with plain browser console (or something more\n\t *      complex like an AJAX logger).\n\t *  <br />NOTE: currently only uses the console.debug log function\n\t *  (as opposed to debug, error, warn, etc.)\n\t *  @name LoggableMixin\n\t *\n\t *  @example\n\t *  // Add to your models/views at the definition using chaining:\n\t *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n\t *\n\t *  // or - more explicitly AFTER the definition:\n\t *      var MyModel = Backbone.Model.extend({\n\t *          logger  : console\n\t *          // ...\n\t *          this.log( '$#%& it! - broken already...' );\n\t *      })\n\t *      _.extend( MyModel.prototype, LoggableMixin )\n\t *\n\t */\n\tvar LoggableMixin =  /** @lends LoggableMixin# */{\n\t\n\t    /** The logging object whose log function will be used to output\n\t     *      messages. Null will supress all logging. Commonly set to console.\n\t     */\n\t    // replace null with console (if available) to see all logs\n\t    logger       : null,\n\t    _logNamespace : '?',\n\t\n\t    /** Output log messages/arguments to logger.\n\t     *  @param {Arguments} ... (this function is variadic)\n\t     *  @returns undefined if not this.logger\n\t     */\n\t    log : function(){\n\t        if( this.logger ){\n\t            var log = this.logger.log;\n\t            if( typeof this.logger.log === 'object' ){\n\t//TODO:! there has to be a way to get the lineno/file into this\n\t                log = Function.prototype.bind.call( this.logger.log, this.logger );\n\t            }\n\t            return log.apply( this.logger, arguments );\n\t        }\n\t        return undefined;\n\t    }\n\t};\n\taddLogging( LoggableMixin );\n\t\n\t\n\t//==============================================================================\n\t/** Backbone model that syncs to the browser's sessionStorage API.\n\t *      This all largely happens behind the scenes and no special calls are required.\n\t */\n\tvar SessionStorageModel = Backbone.Model.extend({\n\t    initialize : function( initialAttrs ){\n\t        // check for sessionStorage and error if no id is provided\n\t        this._checkEnabledSessionStorage();\n\t        if( !initialAttrs.id ){\n\t            throw new Error( 'SessionStorageModel requires an id in the initial attributes' );\n\t        }\n\t        this.id = initialAttrs.id;\n\t\n\t        // load existing from storage (if any), clear any attrs set by bbone before init is called,\n\t        //  layer initial over existing and defaults, and save\n\t        var existing = ( !this.isNew() )?( this._read( this ) ):( {} );\n\t        this.clear({ silent: true });\n\t        this.save( _.extend( {}, this.defaults, existing, initialAttrs ), { silent: true });\n\t\n\t        // save on any change to it immediately\n\t        this.on( 'change', function(){\n\t            this.save();\n\t        });\n\t    },\n\t\n\t    _checkEnabledSessionStorage : function(){\n\t        try {\n\t            return sessionStorage.length;\n\t        } catch( err ){\n\t            alert( 'Please enable cookies in your browser for this Galaxy site' );\n\t            return false;\n\t        }\n\t    },\n\t\n\t    /** override of bbone sync to save to sessionStorage rather than REST\n\t     *      bbone options (success, errror, etc.) should still apply\n\t     */\n\t    sync : function( method, model, options ){\n\t        if( !options.silent ){\n\t            model.trigger( 'request', model, {}, options );\n\t        }\n\t        var returned = {};\n\t        switch( method ){\n\t            case 'create'   : returned = this._create( model ); break;\n\t            case 'read'     : returned = this._read( model );   break;\n\t            case 'update'   : returned = this._update( model ); break;\n\t            case 'delete'   : returned = this._delete( model ); break;\n\t        }\n\t        if( returned !== undefined || returned !== null ){\n\t            if( options.success ){ options.success(); }\n\t        } else {\n\t            if( options.error ){ options.error(); }\n\t        }\n\t        return returned;\n\t    },\n\t\n\t    /** set storage to the stringified item */\n\t    _create : function( model ){\n\t        try {\n\t            var json = model.toJSON(),\n\t                set = sessionStorage.setItem( model.id, JSON.stringify( json ) );\n\t            return ( set === null )?( set ):( json );\n\t        // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n\t        // http://stackoverflow.com/questions/14555347\n\t        // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n\t        } catch( err ){\n\t            if( !( ( err instanceof DOMException ) && ( navigator.userAgent.indexOf(\"Safari\") > -1 ) ) ){\n\t                throw err;\n\t            }\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /** read and parse json from storage */\n\t    _read : function( model ){\n\t        return JSON.parse( sessionStorage.getItem( model.id ) );\n\t    },\n\t\n\t    /** set storage to the item (alias to create) */\n\t    _update : function( model ){\n\t        return model._create( model );\n\t    },\n\t\n\t    /** remove the item from storage */\n\t    _delete : function( model ){\n\t        return sessionStorage.removeItem( model.id );\n\t    },\n\t\n\t    /** T/F whether sessionStorage contains the model's id (data is present) */\n\t    isNew : function(){\n\t        return !sessionStorage.hasOwnProperty( this.id );\n\t    },\n\t\n\t    _log : function(){\n\t        return JSON.stringify( this.toJSON(), null, '  ' );\n\t    },\n\t    toString : function(){\n\t        return 'SessionStorageModel(' + this.id + ')';\n\t    }\n\t\n\t});\n\t(function(){\n\t    SessionStorageModel.prototype = _.omit( SessionStorageModel.prototype, 'url', 'urlRoot' );\n\t}());\n\t\n\t\n\t//==============================================================================\n\t/** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n\t *      (before the more local class overrides/hash).\n\t *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n\t *  @example:\n\t *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n\t *\n\t *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n\t */\n\tfunction mixin( mixinHash1, /* mixinHash2, etc: ... variadic */ propsHash ){\n\t    var args = Array.prototype.slice.call( arguments, 0 ),\n\t        lastArg = args.pop();\n\t    args.unshift( lastArg );\n\t    return _.defaults.apply( _, args );\n\t}\n\t\n\t\n\t//==============================================================================\n\t/** A mixin for models that allow T/F/Matching to their attributes - useful when\n\t *      searching or filtering collections of models.\n\t * @example:\n\t *      see hda-model for searchAttribute and searchAliases definition examples.\n\t *      see history-contents.matches for how collections are filtered\n\t *      and see readonly-history-panel.searchHdas for how user input is connected to the filtering\n\t */\n\tvar SearchableModelMixin = {\n\t\n\t    /** what attributes of an HDA will be used in a text search */\n\t    searchAttributes : [\n\t        // override\n\t    ],\n\t\n\t    /** our attr keys don't often match the labels we display to the user - so, when using\n\t     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n\t     *      following attr keys.\n\t     */\n\t    searchAliases : {\n\t        // override\n\t    },\n\t\n\t    /** search the attribute with key attrKey for the string searchFor; T/F if found */\n\t    searchAttribute : function( attrKey, searchFor ){\n\t        var attrVal = this.get( attrKey );\n\t        //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n\t        // bail if empty searchFor or unsearchable values\n\t        if( !searchFor\n\t        ||  ( attrVal === undefined || attrVal === null ) ){\n\t            return false;\n\t        }\n\t        // pass to sep. fn for deep search of array attributes\n\t        if( _.isArray( attrVal ) ){ return this._searchArrayAttribute( attrVal, searchFor ); }\n\t        return ( attrVal.toString().toLowerCase().indexOf( searchFor.toLowerCase() ) !== -1 );\n\t    },\n\t\n\t    /** deep(er) search for array attributes; T/F if found */\n\t    _searchArrayAttribute : function( array, searchFor ){\n\t        //this.debug( '_searchArrayAttribute', array, searchFor );\n\t        searchFor = searchFor.toLowerCase();\n\t        //precondition: searchFor has already been validated as non-empty string\n\t        //precondition: assumes only 1 level array\n\t        //TODO: could possibly break up searchFor more (CSV...)\n\t        return _.any( array, function( elem ){\n\t            return ( elem.toString().toLowerCase().indexOf( searchFor.toLowerCase() ) !== -1 );\n\t        });\n\t    },\n\t\n\t    /** search all searchAttributes for the string searchFor,\n\t     *      returning a list of keys of attributes that contain searchFor\n\t     */\n\t    search : function( searchFor ){\n\t        var model = this;\n\t        return _.filter( this.searchAttributes, function( key ){\n\t            return model.searchAttribute( key, searchFor );\n\t        });\n\t    },\n\t\n\t    /** alias of search, but returns a boolean; accepts attribute specifiers where\n\t     *      the attributes searched can be narrowed to a single attribute using\n\t     *      the form: matches( 'genome_build=hg19' )\n\t     *      (the attribute keys allowed can also be aliases to the true attribute key;\n\t     *          see searchAliases above)\n\t     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n\t     *  @returns {Boolean} was term found in (any) attribute(s)\n\t     */\n\t    matches : function( term ){\n\t        var ATTR_SPECIFIER = '=',\n\t            split = term.split( ATTR_SPECIFIER );\n\t        // attribute is specified - search only that\n\t        if( split.length >= 2 ){\n\t            var attrKey = split[0];\n\t            attrKey = this.searchAliases[ attrKey ] || attrKey;\n\t            return this.searchAttribute( attrKey, split[1] );\n\t        }\n\t        // no attribute is specified - search all attributes in searchAttributes\n\t        return !!this.search( term ).length;\n\t    },\n\t\n\t    /** an implicit AND search for all terms; IOW, a model must match all terms given\n\t     *      where terms is a whitespace separated value string.\n\t     *      e.g. given terms of: 'blah bler database=hg19'\n\t     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n\t     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n\t     */\n\t    matchesAll : function( terms ){\n\t        var model = this;\n\t        // break the terms up by whitespace and filter out the empty strings\n\t        terms = terms.match( /(\".*\"|\\w*=\".*\"|\\S*)/g ).filter( function( s ){ return !!s; });\n\t        return _.all( terms, function( term ){\n\t            term = term.replace( /\"/g, '' );\n\t            return model.matches( term );\n\t        });\n\t    }\n\t};\n\t\n\t\n\t//==============================================================================\n\t/** A view that renders hidden and shows when some activator is clicked.\n\t *      options:\n\t *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n\t *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n\t *          onShowFirstTime: fn called the first time the view is shown\n\t *          onshow: fn called every time the view is shown\n\t *          onhide: fn called every time the view is hidden\n\t *      events:\n\t *          hiddenUntilActivated:shown (the view is passed as an arg)\n\t *          hiddenUntilActivated:hidden (the view is passed as an arg)\n\t *      instance vars:\n\t *          view.hidden {boolean} is the view in the hidden state\n\t */\n\tvar HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */{\n\t//TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\t\n\t    /** call this in your initialize to set up the mixin\n\t     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n\t     *  @param {Object} hash with mixin options\n\t     */\n\t    hiddenUntilActivated : function( $activator, options ){\n\t        // call this in your view's initialize fn\n\t        options = options || {};\n\t//TODO: flesh out options - show them all here\n\t        this.HUAVOptions = {\n\t            $elementShown   : this.$el,\n\t            showFn          : jQuery.prototype.toggle,\n\t            showSpeed       : 'fast'\n\t        };\n\t        _.extend( this.HUAVOptions, options || {});\n\t        /** has this been shown already (and onshowFirstTime called)? */\n\t        this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is( ':visible' );\n\t        this.hidden = this.isHidden();\n\t\n\t        if( $activator ){\n\t            var mixin = this;\n\t            $activator.on( 'click', function( ev ){\n\t                mixin.toggle( mixin.HUAVOptions.showSpeed );\n\t            });\n\t        }\n\t    },\n\t\n\t//TODO:?? remove? use .hidden?\n\t    /** returns T/F if the view is hidden */\n\t    isHidden : function(){\n\t        return ( this.HUAVOptions.$elementShown.is( ':hidden' ) );\n\t    },\n\t\n\t    /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n\t    toggle : function(){\n\t//TODO: more specific name - toggle is too general\n\t        // can be called manually as well with normal toggle arguments\n\t        //TODO: better as a callback (when the show/hide is actually done)\n\t        // show\n\t        if( this.hidden ){\n\t            // fire the optional fns on the first/each showing - good for render()\n\t            if( !this.HUAVOptions.hasBeenShown ){\n\t                if( _.isFunction( this.HUAVOptions.onshowFirstTime ) ){\n\t                    this.HUAVOptions.hasBeenShown = true;\n\t                    this.HUAVOptions.onshowFirstTime.call( this );\n\t                }\n\t            }\n\t            if( _.isFunction( this.HUAVOptions.onshow ) ){\n\t                this.HUAVOptions.onshow.call( this );\n\t                this.trigger( 'hiddenUntilActivated:shown', this );\n\t            }\n\t            this.hidden = false;\n\t\n\t        // hide\n\t        } else {\n\t            if( _.isFunction( this.HUAVOptions.onhide ) ){\n\t                this.HUAVOptions.onhide.call( this );\n\t                this.trigger( 'hiddenUntilActivated:hidden', this );\n\t            }\n\t            this.hidden = true;\n\t        }\n\t        return this.HUAVOptions.showFn.apply( this.HUAVOptions.$elementShown, arguments );\n\t    }\n\t};\n\t\n\t\n\t//==============================================================================\n\t/** Mixin for views that can be dragged and dropped\n\t *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n\t *          handlers each time.\n\t *      dataTransfer data is set to the JSON string of the view's model.toJSON\n\t *      Override '$dragHandle' to define the draggable DOM sub-element.\n\t */\n\tvar DraggableViewMixin = {\n\t\n\t    /** set up instance vars to track whether this view is currently draggable */\n\t    initialize : function( attributes ){\n\t        /** is the body of this hda view expanded/not? */\n\t        this.draggable  = attributes.draggable || false;\n\t    },\n\t\n\t    /** what part of the view's DOM triggers the dragging */\n\t    $dragHandle : function(){\n\t//TODO: make abstract/general - move this to listItem\n\t        // override to the element you want to be your view's handle\n\t        return this.$( '.title-bar' );\n\t    },\n\t\n\t    /** toggle whether this view is draggable */\n\t    toggleDraggable : function(){\n\t        if( this.draggable ){\n\t            this.draggableOff();\n\t        } else {\n\t            this.draggableOn();\n\t        }\n\t    },\n\t\n\t    /** allow the view to be dragged, set up event handlers */\n\t    draggableOn : function(){\n\t        this.draggable = true;\n\t        this.dragStartHandler = _.bind( this._dragStartHandler, this );\n\t        this.dragEndHandler   = _.bind( this._dragEndHandler,   this );\n\t\n\t        var handle = this.$dragHandle().attr( 'draggable', true ).get(0);\n\t        handle.addEventListener( 'dragstart', this.dragStartHandler, false );\n\t        handle.addEventListener( 'dragend',   this.dragEndHandler,   false );\n\t    },\n\t\n\t    /** turn of view dragging and remove event listeners */\n\t    draggableOff : function(){\n\t        this.draggable = false;\n\t        var handle = this.$dragHandle().attr( 'draggable', false ).get(0);\n\t        handle.removeEventListener( 'dragstart', this.dragStartHandler, false );\n\t        handle.removeEventListener( 'dragend',   this.dragEndHandler,   false );\n\t    },\n\t\n\t    /** sets the dataTransfer data to the model's toJSON\n\t     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n\t     */\n\t    _dragStartHandler : function( event ){\n\t        event.dataTransfer.effectAllowed = 'move';\n\t        //ASSUMES: this.model\n\t        //TODO: all except IE: should be 'application/json', IE: must be 'text'\n\t        event.dataTransfer.setData( 'text', JSON.stringify( this.model.toJSON() ) );\n\t        this.trigger( 'draggable:dragstart', event, this );\n\t        return false;\n\t    },\n\t\n\t    /** handle the dragend\n\t     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n\t     */\n\t    _dragEndHandler : function( event ){\n\t        this.trigger( 'draggable:dragend', event, this );\n\t        return false;\n\t    }\n\t};\n\t\n\t\n\t//==============================================================================\n\t/** Mixin that allows a view to be selected (gen. from a list).\n\t *      Selection controls ($selector) may be hidden/shown/toggled.\n\t *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n\t *      Default rendering is a font-awesome checkbox.\n\t *      Default selector is '.selector' within the view's $el.\n\t *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n\t *          Both events are passed the view and the (jQuery) event.\n\t */\n\tvar SelectableViewMixin = {\n\t\n\t    /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n\t    initialize : function( attributes ){\n\t        /** is the view currently in selection mode? */\n\t        this.selectable = attributes.selectable || false;\n\t        /** is the view currently selected? */\n\t        this.selected   = attributes.selected || false;\n\t    },\n\t\n\t    /** $el sub-element where the selector is rendered and what can be clicked to select. */\n\t    $selector : function(){\n\t        return this.$( '.selector' );\n\t    },\n\t\n\t    /** How the selector is rendered - defaults to font-awesome checkbox */\n\t    _renderSelected : function(){\n\t        // override\n\t        this.$selector().find( 'span' )\n\t            .toggleClass( 'fa-check-square-o', this.selected ).toggleClass( 'fa-square-o', !this.selected );\n\t    },\n\t\n\t    /** Toggle whether the selector is shown */\n\t    toggleSelector : function(){\n\t//TODO: use this.selectable\n\t        if( !this.$selector().is( ':visible' ) ){\n\t            this.showSelector();\n\t        } else {\n\t            this.hideSelector();\n\t        }\n\t    },\n\t\n\t    /** Display the selector control.\n\t     *  @param {Number} a jQuery fx speed\n\t     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n\t     */\n\t    showSelector : function( speed ){\n\t        speed = speed !== undefined? speed : this.fxSpeed;\n\t        // make sure selected state is represented properly\n\t        this.selectable = true;\n\t        this.trigger( 'selectable', true, this );\n\t        this._renderSelected();\n\t        this.$selector().show( speed );\n\t    },\n\t\n\t    /** remove the selector control\n\t     *  @param {Number} a jQuery fx speed\n\t     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n\t     */\n\t    hideSelector : function( speed ){\n\t        speed = speed !== undefined? speed : this.fxSpeed;\n\t        // reverse the process from showSelect\n\t        this.selectable = false;\n\t        this.trigger( 'selectable', false, this );\n\t        this.$selector().hide( speed );\n\t    },\n\t\n\t    /** Toggle whether the view is selected */\n\t    toggleSelect : function( event ){\n\t        if( this.selected ){\n\t            this.deselect( event );\n\t        } else {\n\t            this.select( event );\n\t        }\n\t    },\n\t\n\t    /** Select this view and re-render the selector control to show it\n\t     *  @param {Event} a jQuery event that caused the selection\n\t     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n\t     */\n\t    select : function( event ){\n\t        // switch icon, set selected, and trigger event\n\t        if( !this.selected ){\n\t            this.trigger( 'selected', this, event );\n\t            this.selected = true;\n\t            this._renderSelected();\n\t        }\n\t        return false;\n\t    },\n\t\n\t    /** De-select this view and re-render the selector control to show it\n\t     *  @param {Event} a jQuery event that caused the selection\n\t     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n\t     */\n\t    deselect : function( event ){\n\t        // switch icon, set selected, and trigger event\n\t        if( this.selected ){\n\t            this.trigger( 'de-selected', this, event );\n\t            this.selected = false;\n\t            this._renderSelected();\n\t        }\n\t        return false;\n\t    }\n\t};\n\t\n\t\n\t//==============================================================================\n\t/** Return an underscore template fn from an array of strings.\n\t *  @param {String[]} template      the template strings to compile into the underscore template fn\n\t *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n\t *  @returns {Function} the (wrapped) underscore template fn\n\t *      The function accepts:\n\t *\n\t *  The template strings can access:\n\t *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n\t *      _l: the localizer function\n\t *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n\t *      Because they're namespaced, undefined attributes will not throw an error.\n\t *\n\t *  @example:\n\t *      templateBler : BASE_MVC.wrapTemplate([\n\t *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n\t *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n\t *          '</div>'\n\t *      ], 'mynamespace' )\n\t *\n\t *  Meant to be called in a View's definition in order to compile only once.\n\t *\n\t */\n\tfunction wrapTemplate( template, jsonNamespace ){\n\t    jsonNamespace = jsonNamespace || 'model';\n\t    var templateFn = _.template( template.join( '' ) );\n\t    return function( json, view ){\n\t        var templateVars = { view : view || {}, _l : _l };\n\t        templateVars[ jsonNamespace ] = json || {};\n\t        return templateFn( templateVars );\n\t    };\n\t}\n\t\n\t\n\t//==============================================================================\n\t    return {\n\t        LoggableMixin                   : LoggableMixin,\n\t        SessionStorageModel             : SessionStorageModel,\n\t        mixin                           : mixin,\n\t        SearchableModelMixin            : SearchableModelMixin,\n\t        HiddenUntilActivatedViewMixin   : HiddenUntilActivatedViewMixin,\n\t        DraggableViewMixin              : DraggableViewMixin,\n\t        SelectableViewMixin             : SelectableViewMixin,\n\t        wrapTemplate                    : wrapTemplate\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function(){\n\t//==============================================================================\n\tfunction addLogging( obj, namespace ){\n\t    var addTo = ( obj.prototype !== undefined )?( obj.prototype ):( obj );\n\t    if( namespace !== undefined ){\n\t        addTo._logNamespace = namespace;\n\t    }\n\t\n\t    [ 'debug', 'info', 'warn', 'error', 'metric' ].forEach( function( logFn ){\n\t        addTo[ logFn ] = function(){\n\t            if( !this.logger ){ return undefined; }\n\t            if( this.logger.emit ){\n\t                return this.logger.emit( logFn, this._logNamespace, arguments );\n\t            }\n\t            if( this.logger[ logFn ] ){\n\t//TODO:! there has to be a way to get the lineno/file into this\n\t// http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n\t// http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n\t                return this.logger[ logFn ].apply( this.logger, arguments );\n\t            }\n\t            return undefined;\n\t        };\n\t    });\n\t    return obj;\n\t}\n\t\n\t//==============================================================================\n\treturn addLogging;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n\n/***/ 39:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(5),\n\t    __webpack_require__(9),\n\t    __webpack_require__(3),\n\t    __webpack_require__(1)\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function( _, Backbone, baseMVC, _l ){\n\t//==============================================================================\n\t/** @class Model for a Galaxy user (including anonymous users).\n\t *  @name User\n\t *\n\t *  @augments Backbone.Model\n\t *  @borrows LoggableMixin#logger as #logger\n\t *  @borrows LoggableMixin#log as #log\n\t *  @constructs\n\t */\n\tvar User = Backbone.Model.extend( baseMVC.LoggableMixin ).extend(\n\t/** @lends User.prototype */{\n\t\n\t    ///** logger used to record this.log messages, commonly set to console */\n\t    //// comment this out to suppress log output\n\t    //logger              : console,\n\t\n\t    /** API location for this resource */\n\t    urlRoot : function(){ return Galaxy.options.root + 'api/users'; },\n\t\n\t    /** Model defaults\n\t     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n\t     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n\t     */\n\t    defaults : /** @lends User.prototype */{\n\t        id                      : null,\n\t        username                : '(' + _l( \"anonymous user\" ) + ')',\n\t        email                   : \"\",\n\t        total_disk_usage        : 0,\n\t        nice_total_disk_usage   : \"\",\n\t        quota_percent           : null,\n\t        is_admin                : false\n\t    },\n\t\n\t    /** Set up and bind events\n\t     *  @param {Object} data Initial model data.\n\t     */\n\t    initialize : function( data ){\n\t        this.log( 'User.initialize:', data );\n\t\n\t        this.on( 'loaded', function( model, resp ){ this.log( this + ' has loaded:', model, resp ); });\n\t        this.on( 'change', function( model, data ){ this.log( this + ' has changed:', model, data.changes ); });\n\t    },\n\t\n\t    isAnonymous : function(){\n\t        return ( !this.get( 'email' ) );\n\t    },\n\t\n\t    isAdmin : function(){\n\t        return ( this.get( 'is_admin' ) );\n\t    },\n\t\n\t    /** Load a user with the API using an id.\n\t     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n\t     *      (e.g. 'current') and the API will return the current transaction's user data.\n\t     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n\t     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n\t     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n\t     */\n\t    loadFromApi : function( idOrCurrent, options ){\n\t        idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\t\n\t        options = options || {};\n\t        var model = this,\n\t            userFn = options.success;\n\t\n\t        /** @ignore */\n\t        options.success = function( newModel, response ){\n\t            model.trigger( 'loaded', newModel, response );\n\t            if( userFn ){ userFn( newModel, response ); }\n\t        };\n\t\n\t        // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n\t        if( idOrCurrent === User.CURRENT_ID_STR ){\n\t            options.url = this.urlRoot + '/' + User.CURRENT_ID_STR;\n\t        }\n\t        return Backbone.Model.prototype.fetch.call( this, options );\n\t    },\n\t\n\t    /** Clears all data from the sessionStorage.\n\t     */\n\t    clearSessionStorage : function(){\n\t        for( var key in sessionStorage ){\n\t            //TODO: store these under the user key so we don't have to do this\n\t            // currently only history\n\t            if( key.indexOf( 'history:' ) === 0 ){\n\t                sessionStorage.removeItem( key );\n\t\n\t            } else if( key === 'history-panel' ){\n\t                sessionStorage.removeItem( key );\n\t            }\n\t        }\n\t    },\n\t\n\t    /** string representation */\n\t    toString : function(){\n\t        var userInfo = [ this.get( 'username' ) ];\n\t        if( this.get( 'id' ) ){\n\t            userInfo.unshift( this.get( 'id' ) );\n\t            userInfo.push( this.get( 'email' ) );\n\t        }\n\t        return 'User(' + userInfo.join( ':' ) + ')';\n\t    }\n\t});\n\t\n\t// string to send to tell server to return this transaction's user (see api/users.py)\n\tUser.CURRENT_ID_STR = 'current';\n\t\n\t// class method to load the current user via the api and return that model\n\tUser.getCurrentUserFromApi = function( options ){\n\t    var currentUser = new User();\n\t    currentUser.loadFromApi( User.CURRENT_ID_STR, options );\n\t    return currentUser;\n\t};\n\t\n\t// (stub) collection for users (shouldn't be common unless admin UI)\n\tvar UserCollection = Backbone.Collection.extend( baseMVC.LoggableMixin ).extend({\n\t    model   : User,\n\t    urlRoot : function(){ return Galaxy.options.root + 'api/users'; },\n\t    //logger  : console,\n\t});\n\t\n\t\n\t//==============================================================================\n\treturn {\n\t    User : User\n\t};}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n\n/***/ 91:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(5),\n\t    __webpack_require__(9),\n\t    __webpack_require__(39),\n\t    __webpack_require__(120),\n\t    __webpack_require__(25),\n\t    __webpack_require__(1)\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function( _, Backbone, userModel, metricsLogger, addLogging, localize ){\n\t    console.debug( 'app-base id', jQuery.id );\n\t    if( !jQuery.id ){\n\t        jQuery.id = 'app-base';\n\t    }\n\t// ============================================================================\n\t/** Base galaxy client-side application.\n\t *      Iniitializes:\n\t *          logger      : the logger/metrics-logger\n\t *          localize    : the string localizer\n\t *          config      : the current configuration (any k/v in\n\t *              galaxy.ini available from the configuration API)\n\t *          user        : the current user (as a mvc/user/user-model)\n\t */\n\tfunction GalaxyApp( options, bootstrapped ){\n\t    console.debug( 'GalaxyApp:', options, bootstrapped );\n\t    var self = this;\n\t    return self._init( options || {}, bootstrapped || {} );\n\t}\n\t\n\t// add logging shortcuts for this object\n\taddLogging( GalaxyApp, 'GalaxyApp' );\n\t\n\t/** initalize options and sub-components */\n\tGalaxyApp.prototype._init = function __init( options, bootstrapped ){\n\t    var self = this;\n\t    _.extend( self, Backbone.Events );\n\t\n\t    self._processOptions( options );\n\t    self.debug( 'GalaxyApp.options: ', self.options );\n\t    // special case for root\n\t    self.root = options.root || '/';\n\t\n\t    self._patchGalaxy( window.Galaxy );\n\t\n\t    self._initLogger( options.loggerOptions || {} );\n\t    self.debug( 'GalaxyApp.logger: ', self.logger );\n\t\n\t    self._initLocale();\n\t    self.debug( 'GalaxyApp.localize: ', self.localize );\n\t\n\t    self.config = options.config || {};\n\t    self.debug( 'GalaxyApp.config: ', self.config );\n\t\n\t    self._initUser( options.user || {} );\n\t    self.debug( 'GalaxyApp.user: ', self.user );\n\t\n\t    self._setUpListeners();\n\t    self.trigger( 'ready', self );\n\t\n\t    return self;\n\t};\n\t\n\t/** default options */\n\tGalaxyApp.prototype.defaultOptions = {\n\t    /** monkey patch attributes from existing window.Galaxy object? */\n\t    patchExisting   : true,\n\t    /** root url of this app */\n\t    // move to self.root?\n\t    root            : '/'\n\t};\n\t\n\t/** add an option from options if the key matches an option in defaultOptions */\n\tGalaxyApp.prototype._processOptions = function _processOptions( options ){\n\t    var self = this,\n\t        defaults = self.defaultOptions;\n\t    self.debug( '_processOptions: ', options );\n\t\n\t    self.options = {};\n\t    for( var k in defaults ){\n\t        if( defaults.hasOwnProperty( k ) ){\n\t            self.options[ k ] = ( options.hasOwnProperty( k ) )?( options[ k ] ):( defaults[ k ] );\n\t        }\n\t    }\n\t    return self;\n\t};\n\t\n\t/** add an option from options if the key matches an option in defaultOptions */\n\tGalaxyApp.prototype._patchGalaxy = function _patchGalaxy( patchWith ){\n\t    var self = this;\n\t    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n\t    if( self.options.patchExisting && patchWith ){\n\t        self.debug( 'found existing Galaxy object:', patchWith );\n\t        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n\t        //TODO: move those attributes to more formal assignment in GalaxyApp\n\t        for( var k in patchWith ){\n\t            if( patchWith.hasOwnProperty( k ) ){\n\t                self.debug( '\\t patching in ' + k + ' to Galaxy' );\n\t                self[ k ] = patchWith[ k ];\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\t/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\n\tGalaxyApp.prototype._initLogger = function _initLogger( loggerOptions ){\n\t    var self = this;\n\t    self.debug( '_initLogger:', loggerOptions );\n\t    self.logger = new metricsLogger.MetricsLogger( loggerOptions );\n\t    return self;\n\t};\n\t\n\t/** add the localize fn to this object and the window namespace (as '_l') */\n\tGalaxyApp.prototype._initLocale = function _initLocale( options ){\n\t    var self = this;\n\t    self.debug( '_initLocale:', options );\n\t    self.localize = localize;\n\t    // add to window as global shortened alias\n\t    window._l = self.localize;\n\t    return self;\n\t};\n\t\n\t/** set up the current user as a Backbone model (mvc/user/user-model) */\n\tGalaxyApp.prototype._initUser = function _initUser( userJSON ){\n\t    var self = this;\n\t    self.debug( '_initUser:', userJSON );\n\t    self.user = new userModel.User( userJSON );\n\t\n\t    //TODO: temp - old alias\n\t    self.currUser = self.user;\n\t    return self;\n\t};\n\t\n\t/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\n\tGalaxyApp.prototype._setUpListeners = function _setUpListeners(){\n\t    var self = this;\n\t\n\t    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n\t    /** cached info about the last ajax call made through jQuery */\n\t    self.lastAjax = {};\n\t    $( document ).bind( 'ajaxSend', function( ev, xhr, options ){\n\t        var data = options.data;\n\t        try {\n\t            data = JSON.parse( data );\n\t        } catch( err ){}\n\t\n\t        self.lastAjax = {\n\t            url     : location.href.slice( 0, -1 ) + options.url,\n\t            data    : data\n\t        };\n\t        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n\t    });\n\t    return self;\n\t};\n\t\n\t/** string rep */\n\tGalaxyApp.prototype.toString = function toString(){\n\t    var userEmail = this.user.get( 'email' ) || '(anonymous)';\n\t    return 'GalaxyApp(' + userEmail + ')';\n\t};\n\t\n\t\n\t// ============================================================================\n\t    return {\n\t        GalaxyApp : GalaxyApp\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n\n/***/ 120:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function(){\n\t/*global window, jQuery, console */\n\t/*=============================================================================\n\tTODO:\n\t    while anon: logs saved to 'logs-null' - this will never post\n\t        unless we manually do so at/after login\n\t        OR prepend when userId and localStorage has 'logs-null'\n\t    wire up _delayPost and test\n\t\n\t=============================================================================*/\n\t/** @class MetricsLogger\n\t *\n\t *  Object to cache, output, and post log/metric messages to the server.\n\t *  Meant to be attached to the Galaxy object.\n\t *\n\t *  Log from objects by either attaching logger directly:\n\t *      panel.logger.metric( 'user dataset deletion', panel.user.id, hda.toJSON() )\n\t *  or using the LoggableMixin or addLogging function:\n\t *      MyBackboneModel.extend( LoggableMixin ).extend({ ... })\n\t *      addLogging( MyBackboneModel, 'my-backbone-model' )\n\t *\n\t *  Log from templates by calling directly from Galaxy object:\n\t *      Galaxy.logger.metric( 'template loaded', { ownedByUser : true });\n\t *\n\t *  If you attempt to log an un-serializable object (circular reference, window, etc.),\n\t *  that entry will not be cached (or sent). If you set consoleLevel and consoleLogger\n\t *  appropriately, a warning will be shown when this happens:\n\t *      > panel.metric( 'something weird with window', { window : window })\n\t *      !'Metrics logger could not stringify logArguments: ...'\n\t */\n\tfunction MetricsLogger( options ){\n\t    options = options || {};\n\t    var self = this;\n\t\n\t    ///** get the current user's id from bootstrapped data or options */\n\t    self.userId = ( window.bootstrapped && window.bootstrapped.user )? window.bootstrapped.user.id: null;\n\t    self.userId = self.userId || options.userId || null;\n\t\n\t    /** the (optional) console to emit logs to */\n\t    self.consoleLogger = options.consoleLogger || null;\n\t\n\t    self._init( options );\n\t    return self;\n\t}\n\t\n\t//----------------------------------------------------------------------------- defaults and constants\n\t// see: python std lib, logging\n\tMetricsLogger.ALL  =  0;\n\tMetricsLogger.DEBUG = 10;\n\tMetricsLogger.INFO  = 20;\n\tMetricsLogger.WARN  = 30;\n\tMetricsLogger.ERROR = 40;\n\t// metrics levels here?\n\t//MetricsLogger.MinorEvent  = 45;\n\t//MetricsLogger.MajorEvent  = 50;\n\tMetricsLogger.METRIC = 50;\n\tMetricsLogger.NONE = 100;\n\t\n\t/** default options - override these through the constructor */\n\tMetricsLogger.defaultOptions = {\n\t    /** if an incoming message has a level >= this, it will be cached - can also be a string (e.g. 'debug') */\n\t    logLevel            : MetricsLogger.NONE,\n\t    /** if an incoming message has a level >= this, it will be output to the console */\n\t    consoleLevel        : MetricsLogger.NONE,\n\t    /** the default 'namespace' or label associated with an incoming message (if none is passed) */\n\t    defaultNamespace    : 'Galaxy',\n\t    /** the prefix attached to client-side logs to distinguish them in the metrics db */\n\t    clientPrefix        : 'client.',\n\t\n\t    /** the maximum number of messages the cache should hold; if exceeded older messages are removed first */\n\t    maxCacheSize        : 3000,\n\t    /** the number of messages accumulate before posting to the server; should be <= maxCacheSize */\n\t    postSize            : 1000,\n\t    /** T/F whether to add a timestamp to incoming cached messages */\n\t    addTime             : true,\n\t    /** string to prefix to userid for cache web storage */\n\t    cacheKeyPrefix      : 'logs-',\n\t\n\t    /** the relative url to post messages to */\n\t    postUrl             : '/api/metrics',\n\t    /** delay before trying post again after two failures */\n\t    delayPostInMs       : 1000 * 60 * 10,\n\t\n\t    /** an (optional) function that should return an object; used to send additional data with the metrics */\n\t    getPingData         : undefined,\n\t    /** an (optional) function that will handle the servers response after successfully posting messages */\n\t    onServerResponse    : undefined\n\t};\n\t\n\t//----------------------------------------------------------------------------- set up\n\t/** initialize the logger with options, set up instance vars and cache, and add onpageunload to window */\n\tMetricsLogger.prototype._init = function _init( options ){\n\t    var self = this;\n\t    self.options = {};\n\t    for( var k in MetricsLogger.defaultOptions ){\n\t        if( MetricsLogger.defaultOptions.hasOwnProperty( k ) ){\n\t            self.options[ k ] = ( options.hasOwnProperty( k ) )?( options[ k ] ):( MetricsLogger.defaultOptions[ k ] );\n\t        }\n\t    }\n\t    self.options.logLevel = self._parseLevel( self.options.logLevel );\n\t    self.options.consoleLevel = self._parseLevel( self.options.consoleLevel );\n\t    //self._emitToConsole( 'debug', 'MetricsLogger', 'MetricsLogger.options:', self.options );\n\t\n\t    /** is the logger currently sending? */\n\t    self._sending = false;\n\t    /** the setTimeout id if the logger POST has failed more than once */\n\t    self._waiting = null;\n\t    /** the current number of entries to send in a POST */\n\t    self._postSize = self.options.postSize;\n\t\n\t    self._initCache();\n\t\n\t    return self;\n\t};\n\t\n\t/** initialize the cache */\n\tMetricsLogger.prototype._initCache = function _initCache(){\n\t    try {\n\t        this.cache = new LoggingCache({\n\t            maxSize : this.options.maxCacheSize,\n\t            key     : this.options.cacheKeyPrefix + this.userId\n\t        });\n\t    } catch( err ){\n\t        this._emitToConsole( 'warn', 'MetricsLogger', [ 'Could not intitialize logging cache:', err ] );\n\t        this.options.logLevel = MetricsLogger.NONE;\n\t    }\n\t};\n\t\n\t/** return the numeric log level if level in 'none, debug, log, info, warn, error' */\n\tMetricsLogger.prototype._parseLevel = function _parseLevel( level ){\n\t    var type = typeof level;\n\t    if( type === 'number' ){ return level; }\n\t    if( type === 'string' ){\n\t        var upper = level.toUpperCase();\n\t        if( MetricsLogger.hasOwnProperty( upper ) ){\n\t            return MetricsLogger[ upper ];\n\t        }\n\t    }\n\t    throw new Error( 'Unknown log level: ' + level );\n\t};\n\t\n\t\n\t//----------------------------------------------------------------------------- main entry point\n\t/** record a log/message's arguments to the cache and/or the console based on level and namespace */\n\tMetricsLogger.prototype.emit = function emit( level, namespace, logArguments ){\n\t    //this._emitToConsole( 'debug', 'MetricsLogger', [ 'emit:', level, namespace, logArguments ]);\n\t    var self = this;\n\t    namespace = namespace || self.options.defaultNamespace;\n\t    if( !level || !logArguments ){\n\t        return self;\n\t    }\n\t    // add to cache if proper level\n\t    //TODO: respect do not track?\n\t    //if( !navigator.doNotTrack && level >= self.options.logLevel ){\n\t    level = self._parseLevel( level );\n\t    if( level >= self.options.logLevel ){\n\t        self._addToCache( level, namespace, logArguments );\n\t    }\n\t    // also emit to consoleLogger if proper level for that\n\t    if( self.consoleLogger && level >= self.options.consoleLevel ){\n\t        self._emitToConsole( level, namespace, logArguments );\n\t    }\n\t    return self;\n\t};\n\t\n\t//----------------------------------------------------------------------------- cache\n\t/** add a message to the cache and if messages.length is high enough post them to the server */\n\tMetricsLogger.prototype._addToCache = function _addToCache( level, namespace, logArguments ){\n\t    this._emitToConsole( 'debug', 'MetricsLogger',\n\t        [ '_addToCache:', arguments, this.options.addTime, this.cache.length() ]);\n\t    //this._emitToConsole( 'debug', 'MetricsLogger', [ '\\t logArguments:', logArguments ]);\n\t    var self = this;\n\t    // try add to the cache and if we've got _postSize number of entries, attempt to post them to the server\n\t    try {\n\t        var newLength = self.cache.add( self._buildEntry( level, namespace, logArguments ) );\n\t        if( newLength >= self._postSize ){\n\t            self._postCache();\n\t        }\n\t    // discard entry if an error occurs, but warn if level set to do so\n\t    } catch( err ){\n\t        self._emitToConsole( 'warn', 'MetricsLogger',\n\t            [ 'Metrics logger could not stringify logArguments:', namespace, logArguments ] );\n\t        self._emitToConsole( 'error', 'MetricsLogger', [ err ] );\n\t\n\t    }\n\t    return self;\n\t};\n\t\n\t/** build a log cache entry object from the given level, namespace, and arguments (optionally adding timestamp */\n\tMetricsLogger.prototype._buildEntry = function _buildEntry( level, namespace, logArguments ){\n\t    this._emitToConsole( 'debug', 'MetricsLogger', [ '_buildEntry:', arguments ]);\n\t    var entry = {\n\t            level       : level,\n\t            namespace   : this.options.clientPrefix + namespace,\n\t            args        : logArguments\n\t        };\n\t    if( this.options.addTime ){\n\t        entry.time = new Date().toISOString();\n\t    }\n\t    return entry;\n\t};\n\t\n\t/** post _postSize messages from the cache to the server, removing them if successful\n\t *      if the post fails, wait until maxCacheSize is accumulated instead and try again then\n\t *      in addition to the messages from the cache ('metrics'), any info from getPingData (if set) will be sent\n\t *      onServerResponse will be called (if set) with any response from the server\n\t */\n\tMetricsLogger.prototype._postCache = function _postCache( options ){\n\t    options = options || {};\n\t    this._emitToConsole( 'info', 'MetricsLogger', [ '_postCache', options, this._postSize ]);\n\t\n\t    // short circuit if we're already sending\n\t    if( !this.options.postUrl || this._sending ){\n\t        return jQuery.when({});\n\t    }\n\t\n\t    var self = this,\n\t        postSize = options.count || self._postSize,\n\t        // do not splice - remove after *successful* post\n\t        entries = self.cache.get( postSize ),\n\t        entriesLength = entries.length,\n\t        // use the optional getPingData to add any extra info we may want to send\n\t        postData = ( typeof self.options.getPingData === 'function' )?( self.options.getPingData() ):( {} );\n\t    //console.debug( postSize, entriesLength );\n\t\n\t    // add the metrics and send\n\t    postData.metrics = JSON.stringify( entries );\n\t    //console.debug( postData.metrics );\n\t    self._sending = true;\n\t    return jQuery.post( self.options.postUrl, postData )\n\t        .always( function(){\n\t            self._sending = false;\n\t        })\n\t        .fail( function( xhr, status, message ){\n\t            // if we failed the previous time, set the next post target to the max num of entries\n\t            self._postSize = self.options.maxCacheSize;\n\t//TODO:??\n\t            // log this failure to explain any gap in metrics\n\t            this.emit( 'error', 'MetricsLogger', [ '_postCache error:',\n\t                xhr.readyState, xhr.status, xhr.responseJSON || xhr.responseText ]);\n\t//TODO: still doesn't solve the problem that when cache == max, post will be tried on every emit\n\t//TODO: see _delayPost\n\t        })\n\t        .done( function( response ){\n\t            if( typeof self.options.onServerResponse === 'function' ){\n\t                self.options.onServerResponse( response );\n\t            }\n\t            // only remove if post successful\n\t            self.cache.remove( entriesLength );\n\t            //console.debug( 'removed entries:', entriesLength, 'size now:', self.cache.length() );\n\t            // if we succeeded, reset the post target to the normal num of entries\n\t            self._postSize = self.options.postSize;\n\t        });\n\t    // return the xhr promise\n\t};\n\t\n\t/** set _waiting to true and, after delayPostInMs, set it back to false */\n\tMetricsLogger.prototype._delayPost = function _delayPost(){\n\t//TODO: this won't work between pages\n\t    var self = this;\n\t    self._waiting = setTimeout( function(){\n\t        self._waiting = null;\n\t    }, self.options.delayPostInMs );\n\t};\n\t\n\t\n\t//----------------------------------------------------------------------------- console\n\t/** output message to console based on level and consoleLogger type */\n\tMetricsLogger.prototype._emitToConsole = function _emitToConsole( level, namespace, logArguments ){\n\t    //console.debug( '_emitToConsole:', level, namespace, logArguments );\n\t    var self = this;\n\t    if( !self.consoleLogger ){ return self; }\n\t\n\t    var args = Array.prototype.slice.call( logArguments, 0 );\n\t    args.unshift( namespace );\n\t//TODO: script location and/or source maps?\n\t//TODO: branch on navigator.userAgent == AIIEEE - it only has log\n\t    if(        level >= MetricsLogger.METRIC && typeof( self.consoleLogger.info ) === 'function' ){\n\t        return self.consoleLogger.info.apply( self.consoleLogger, args );\n\t\n\t    } else if( level >= MetricsLogger.ERROR && typeof( self.consoleLogger.error ) === 'function' ){\n\t        return self.consoleLogger.error.apply( self.consoleLogger, args );\n\t    } else if( level >= MetricsLogger.WARN && typeof( self.consoleLogger.warn ) === 'function' ){\n\t        self.consoleLogger.warn.apply( self.consoleLogger, args );\n\t    } else if( level >= MetricsLogger.INFO && typeof( self.consoleLogger.info ) === 'function' ){\n\t        self.consoleLogger.info.apply( self.consoleLogger, args );\n\t    } else if( level >= MetricsLogger.DEBUG && typeof( self.consoleLogger.debug ) === 'function' ){\n\t        self.consoleLogger.debug.apply( self.consoleLogger, args );\n\t    } else if( typeof( self.consoleLogger.log ) === 'function' ){\n\t        self.consoleLogger.log.apply( self.consoleLogger, args );\n\t    }\n\t    return self;\n\t};\n\t\n\t//----------------------------------------------------------------------------- shortcuts\n\t// generic functions when logging from non-namespaced object (e.g. templates)\n\t/** log to default namespace */\n\tMetricsLogger.prototype.log = function log(){\n\t    this.emit( 1, this.options.defaultNamespace,\n\t        Array.prototype.slice.call( arguments, 0 ) );\n\t};\n\t\n\t/** debug to default namespace */\n\tMetricsLogger.prototype.debug = function debug(){\n\t    this.emit( MetricsLogger.DEBUG, this.options.defaultNamespace,\n\t        Array.prototype.slice.call( arguments, 0 ) );\n\t};\n\t\n\t/** info to default namespace */\n\tMetricsLogger.prototype.info = function info(){\n\t    this.emit( MetricsLogger.INFO, this.options.defaultNamespace,\n\t        Array.prototype.slice.call( arguments, 0 ) );\n\t};\n\t\n\t/** warn to default namespace */\n\tMetricsLogger.prototype.warn = function warn(){\n\t    this.emit( MetricsLogger.WARN, this.options.defaultNamespace,\n\t        Array.prototype.slice.call( arguments, 0 ) );\n\t};\n\t\n\t/** error to default namespace */\n\tMetricsLogger.prototype.error = function error(){\n\t    this.emit( MetricsLogger.ERROR, this.options.defaultNamespace,\n\t        Array.prototype.slice.call( arguments, 0 ) );\n\t};\n\t\n\t/** metric to default namespace */\n\tMetricsLogger.prototype.metric = function metric(){\n\t    this.emit( MetricsLogger.METRIC, this.options.defaultNamespace,\n\t        Array.prototype.slice.call( arguments, 0 ) );\n\t};\n\t\n\t\n\t/* ============================================================================\n\tTODO:\n\t    need a performance pass - the JSON un/parsing is a bit much\n\t\n\t============================================================================ */\n\t/** @class LoggingCache\n\t *  Simple implementation of cache wrapping an array.\n\t *\n\t *  Formats an entry before it's cached and only keeps options.maxSize number\n\t *  of entries. Older entries are deleted first.\n\t */\n\tfunction LoggingCache( options ){\n\t    var self = this;\n\t    return self._init( options || {} );\n\t}\n\t\n\t/** default options */\n\tLoggingCache.defaultOptions = {\n\t    /** maximum number of entries to keep before discarding oldest */\n\t    maxSize     : 5000\n\t};\n\t\n\t/** initialize with options */\n\tLoggingCache.prototype._init = function _init( options ){\n\t    if( !this._hasStorage() ){\n\t        //TODO: fall back to jstorage\n\t        throw new Error( 'LoggingCache needs localStorage' );\n\t    }\n\t    if( !options.key ){\n\t        throw new Error( 'LoggingCache needs key for localStorage' );\n\t    }\n\t    this.key = options.key;\n\t    this._initStorage();\n\t\n\t    this.maxSize = options.maxSize || LoggingCache.defaultOptions.maxSize;\n\t    return this;\n\t};\n\t\n\t/** tests for localStorage fns */\n\tLoggingCache.prototype._hasStorage = function _hasStorage(){\n\t//TODO: modernizr\n\t    var test = 'test';\n\t    try {\n\t        localStorage.setItem( test, test );\n\t        localStorage.removeItem( test );\n\t        return true;\n\t    } catch( e ){\n\t        return false;\n\t    }\n\t};\n\t\n\t/** if no localStorage set for key, initialize to empty array */\n\tLoggingCache.prototype._initStorage = function _initStorage(){\n\t    if( localStorage.getItem( this.key ) === null ){\n\t        return this.empty();\n\t    }\n\t    return this;\n\t};\n\t\n\t/** add an entry to the cache, removing the oldest beforehand if size >= maxSize */\n\tLoggingCache.prototype.add = function add( entry ){\n\t    var self = this,\n\t        _cache = self._fetchAndParse(),\n\t        overage = ( _cache.length + 1 ) - self.maxSize;\n\t    if( overage > 0 ){\n\t        _cache.splice( 0, overage );\n\t    }\n\t    _cache.push( entry );\n\t    self._unparseAndStore( _cache );\n\t    return _cache.length;\n\t};\n\t\n\t/** get the entries from localStorage and parse them */\n\tLoggingCache.prototype._fetchAndParse = function _fetchAndParse(){\n\t    var self = this;\n\t    return JSON.parse( localStorage.getItem( self.key ) );\n\t};\n\t\n\t/** stringify the entries and put them in localStorage */\n\tLoggingCache.prototype._unparseAndStore = function _unparseAndStore( entries ){\n\t    var self = this;\n\t    return localStorage.setItem( self.key, JSON.stringify( entries ) );\n\t};\n\t\n\t///** process the entry before caching */\n\t//LoggingCache.prototype._preprocessEntry = function _preprocessEntry( entry ){\n\t//    return JSON.stringify( entry );\n\t//};\n\t\n\t/** return the length --- oh, getters where are you? */\n\tLoggingCache.prototype.length = function length(){\n\t    return this._fetchAndParse().length;\n\t};\n\t\n\t/** get count number of entries starting with the oldest */\n\tLoggingCache.prototype.get = function get( count ){\n\t    return this._fetchAndParse().slice( 0, count );\n\t};\n\t\n\t/** remove count number of entries starting with the oldest */\n\tLoggingCache.prototype.remove = function remove( count ){\n\t    var _cache = this._fetchAndParse(),\n\t        removed = _cache.splice( 0, count );\n\t    this._unparseAndStore( _cache );\n\t    return removed;\n\t};\n\t\n\t/** empty/clear the entire cache */\n\tLoggingCache.prototype.empty = function empty(){\n\t    localStorage.setItem( this.key, '[]' );\n\t    return this;\n\t};\n\t\n\t/** stringify count number of entries (but do not remove) */\n\tLoggingCache.prototype.stringify = function stringify( count ){\n\t    return JSON.stringify( this.get( count ) );\n\t};\n\t\n\t/** outputs entire cache to console */\n\tLoggingCache.prototype.print = function print(){\n\t    // popup? (really, carl? a popup?) - easier to copy/paste\n\t    console.log( JSON.stringify( this._fetchAndParse(), null, '  ' ) );\n\t};\n\t\n\t\n\t//=============================================================================\n\t    return {\n\t        MetricsLogger  : MetricsLogger,\n\t        LoggingCache   : LoggingCache\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** galaxy.bundled.js\n **/","var GalaxyApp = require( '../galaxy-app-base' ).GalaxyApp;\nwindow.GalaxyApp = GalaxyApp;\nconsole.debug( 'galaxy.js, GalaxyApp is now in window' );\nexports = GalaxyApp;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/apps/galaxy.js\n ** module id = 0\n ** module chunks = 5\n **/","define([\n], function( localeStrings ){\n    localeStrings = {};\n// =============================================================================\n/** Attempt to get a localized string for strToLocalize. If not found, return\n *      the original strToLocalize.\n * @param {String} strToLocalize the string to localize\n * @returns either the localized string if found or strToLocalize if not found\n */\nvar localize = function( strToLocalize ){\n    //console.debug( this + '.localize:', strToLocalize );\n\n    // cache strings that need to be localized but haven't been?\n    if( localize.cacheNonLocalized && !localeStrings.hasOwnProperty( strToLocalize ) ){\n        //console.debug( 'localization NOT found:', strToLocalize );\n        // add nonCached as hash directly to this function\n        if( !localize.nonLocalized ){ localize.nonLocalized = {}; }\n        localize.nonLocalized[ strToLocalize ] = navigator.language;\n    }\n    // return the localized version from the closure if it's there, the strToLocalize if not\n    return localeStrings[ strToLocalize ] || strToLocalize;\n};\nlocalize.cacheNonLocalized = false;\n\n\n// =============================================================================\n    return localize;\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/utils/webpack-localization.js\n ** module id = 1\n ** module chunks = 2 3 5\n **/","define([\n    'libs/underscore',\n    'libs/backbone/backbone',\n    'utils/add-logging',\n    'utils/localization'\n], function( _, Backbone, addLogging, _l ){\n//==============================================================================\n/** @class Mixin to add logging capabilities to an object.\n *      Designed to allow switching an objects log output off/on at one central\n *      statement. Can be used with plain browser console (or something more\n *      complex like an AJAX logger).\n *  <br />NOTE: currently only uses the console.debug log function\n *  (as opposed to debug, error, warn, etc.)\n *  @name LoggableMixin\n *\n *  @example\n *  // Add to your models/views at the definition using chaining:\n *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n *\n *  // or - more explicitly AFTER the definition:\n *      var MyModel = Backbone.Model.extend({\n *          logger  : console\n *          // ...\n *          this.log( '$#%& it! - broken already...' );\n *      })\n *      _.extend( MyModel.prototype, LoggableMixin )\n *\n */\nvar LoggableMixin =  /** @lends LoggableMixin# */{\n\n    /** The logging object whose log function will be used to output\n     *      messages. Null will supress all logging. Commonly set to console.\n     */\n    // replace null with console (if available) to see all logs\n    logger       : null,\n    _logNamespace : '?',\n\n    /** Output log messages/arguments to logger.\n     *  @param {Arguments} ... (this function is variadic)\n     *  @returns undefined if not this.logger\n     */\n    log : function(){\n        if( this.logger ){\n            var log = this.logger.log;\n            if( typeof this.logger.log === 'object' ){\n//TODO:! there has to be a way to get the lineno/file into this\n                log = Function.prototype.bind.call( this.logger.log, this.logger );\n            }\n            return log.apply( this.logger, arguments );\n        }\n        return undefined;\n    }\n};\naddLogging( LoggableMixin );\n\n\n//==============================================================================\n/** Backbone model that syncs to the browser's sessionStorage API.\n *      This all largely happens behind the scenes and no special calls are required.\n */\nvar SessionStorageModel = Backbone.Model.extend({\n    initialize : function( initialAttrs ){\n        // check for sessionStorage and error if no id is provided\n        this._checkEnabledSessionStorage();\n        if( !initialAttrs.id ){\n            throw new Error( 'SessionStorageModel requires an id in the initial attributes' );\n        }\n        this.id = initialAttrs.id;\n\n        // load existing from storage (if any), clear any attrs set by bbone before init is called,\n        //  layer initial over existing and defaults, and save\n        var existing = ( !this.isNew() )?( this._read( this ) ):( {} );\n        this.clear({ silent: true });\n        this.save( _.extend( {}, this.defaults, existing, initialAttrs ), { silent: true });\n\n        // save on any change to it immediately\n        this.on( 'change', function(){\n            this.save();\n        });\n    },\n\n    _checkEnabledSessionStorage : function(){\n        try {\n            return sessionStorage.length;\n        } catch( err ){\n            alert( 'Please enable cookies in your browser for this Galaxy site' );\n            return false;\n        }\n    },\n\n    /** override of bbone sync to save to sessionStorage rather than REST\n     *      bbone options (success, errror, etc.) should still apply\n     */\n    sync : function( method, model, options ){\n        if( !options.silent ){\n            model.trigger( 'request', model, {}, options );\n        }\n        var returned = {};\n        switch( method ){\n            case 'create'   : returned = this._create( model ); break;\n            case 'read'     : returned = this._read( model );   break;\n            case 'update'   : returned = this._update( model ); break;\n            case 'delete'   : returned = this._delete( model ); break;\n        }\n        if( returned !== undefined || returned !== null ){\n            if( options.success ){ options.success(); }\n        } else {\n            if( options.error ){ options.error(); }\n        }\n        return returned;\n    },\n\n    /** set storage to the stringified item */\n    _create : function( model ){\n        try {\n            var json = model.toJSON(),\n                set = sessionStorage.setItem( model.id, JSON.stringify( json ) );\n            return ( set === null )?( set ):( json );\n        // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n        // http://stackoverflow.com/questions/14555347\n        // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n        } catch( err ){\n            if( !( ( err instanceof DOMException ) && ( navigator.userAgent.indexOf(\"Safari\") > -1 ) ) ){\n                throw err;\n            }\n        }\n        return null;\n    },\n\n    /** read and parse json from storage */\n    _read : function( model ){\n        return JSON.parse( sessionStorage.getItem( model.id ) );\n    },\n\n    /** set storage to the item (alias to create) */\n    _update : function( model ){\n        return model._create( model );\n    },\n\n    /** remove the item from storage */\n    _delete : function( model ){\n        return sessionStorage.removeItem( model.id );\n    },\n\n    /** T/F whether sessionStorage contains the model's id (data is present) */\n    isNew : function(){\n        return !sessionStorage.hasOwnProperty( this.id );\n    },\n\n    _log : function(){\n        return JSON.stringify( this.toJSON(), null, '  ' );\n    },\n    toString : function(){\n        return 'SessionStorageModel(' + this.id + ')';\n    }\n\n});\n(function(){\n    SessionStorageModel.prototype = _.omit( SessionStorageModel.prototype, 'url', 'urlRoot' );\n}());\n\n\n//==============================================================================\n/** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n *      (before the more local class overrides/hash).\n *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n *  @example:\n *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n *\n *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n */\nfunction mixin( mixinHash1, /* mixinHash2, etc: ... variadic */ propsHash ){\n    var args = Array.prototype.slice.call( arguments, 0 ),\n        lastArg = args.pop();\n    args.unshift( lastArg );\n    return _.defaults.apply( _, args );\n}\n\n\n//==============================================================================\n/** A mixin for models that allow T/F/Matching to their attributes - useful when\n *      searching or filtering collections of models.\n * @example:\n *      see hda-model for searchAttribute and searchAliases definition examples.\n *      see history-contents.matches for how collections are filtered\n *      and see readonly-history-panel.searchHdas for how user input is connected to the filtering\n */\nvar SearchableModelMixin = {\n\n    /** what attributes of an HDA will be used in a text search */\n    searchAttributes : [\n        // override\n    ],\n\n    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n    searchAliases : {\n        // override\n    },\n\n    /** search the attribute with key attrKey for the string searchFor; T/F if found */\n    searchAttribute : function( attrKey, searchFor ){\n        var attrVal = this.get( attrKey );\n        //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n        // bail if empty searchFor or unsearchable values\n        if( !searchFor\n        ||  ( attrVal === undefined || attrVal === null ) ){\n            return false;\n        }\n        // pass to sep. fn for deep search of array attributes\n        if( _.isArray( attrVal ) ){ return this._searchArrayAttribute( attrVal, searchFor ); }\n        return ( attrVal.toString().toLowerCase().indexOf( searchFor.toLowerCase() ) !== -1 );\n    },\n\n    /** deep(er) search for array attributes; T/F if found */\n    _searchArrayAttribute : function( array, searchFor ){\n        //this.debug( '_searchArrayAttribute', array, searchFor );\n        searchFor = searchFor.toLowerCase();\n        //precondition: searchFor has already been validated as non-empty string\n        //precondition: assumes only 1 level array\n        //TODO: could possibly break up searchFor more (CSV...)\n        return _.any( array, function( elem ){\n            return ( elem.toString().toLowerCase().indexOf( searchFor.toLowerCase() ) !== -1 );\n        });\n    },\n\n    /** search all searchAttributes for the string searchFor,\n     *      returning a list of keys of attributes that contain searchFor\n     */\n    search : function( searchFor ){\n        var model = this;\n        return _.filter( this.searchAttributes, function( key ){\n            return model.searchAttribute( key, searchFor );\n        });\n    },\n\n    /** alias of search, but returns a boolean; accepts attribute specifiers where\n     *      the attributes searched can be narrowed to a single attribute using\n     *      the form: matches( 'genome_build=hg19' )\n     *      (the attribute keys allowed can also be aliases to the true attribute key;\n     *          see searchAliases above)\n     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n     *  @returns {Boolean} was term found in (any) attribute(s)\n     */\n    matches : function( term ){\n        var ATTR_SPECIFIER = '=',\n            split = term.split( ATTR_SPECIFIER );\n        // attribute is specified - search only that\n        if( split.length >= 2 ){\n            var attrKey = split[0];\n            attrKey = this.searchAliases[ attrKey ] || attrKey;\n            return this.searchAttribute( attrKey, split[1] );\n        }\n        // no attribute is specified - search all attributes in searchAttributes\n        return !!this.search( term ).length;\n    },\n\n    /** an implicit AND search for all terms; IOW, a model must match all terms given\n     *      where terms is a whitespace separated value string.\n     *      e.g. given terms of: 'blah bler database=hg19'\n     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n     */\n    matchesAll : function( terms ){\n        var model = this;\n        // break the terms up by whitespace and filter out the empty strings\n        terms = terms.match( /(\".*\"|\\w*=\".*\"|\\S*)/g ).filter( function( s ){ return !!s; });\n        return _.all( terms, function( term ){\n            term = term.replace( /\"/g, '' );\n            return model.matches( term );\n        });\n    }\n};\n\n\n//==============================================================================\n/** A view that renders hidden and shows when some activator is clicked.\n *      options:\n *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n *          onShowFirstTime: fn called the first time the view is shown\n *          onshow: fn called every time the view is shown\n *          onhide: fn called every time the view is hidden\n *      events:\n *          hiddenUntilActivated:shown (the view is passed as an arg)\n *          hiddenUntilActivated:hidden (the view is passed as an arg)\n *      instance vars:\n *          view.hidden {boolean} is the view in the hidden state\n */\nvar HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */{\n//TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\n    /** call this in your initialize to set up the mixin\n     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n     *  @param {Object} hash with mixin options\n     */\n    hiddenUntilActivated : function( $activator, options ){\n        // call this in your view's initialize fn\n        options = options || {};\n//TODO: flesh out options - show them all here\n        this.HUAVOptions = {\n            $elementShown   : this.$el,\n            showFn          : jQuery.prototype.toggle,\n            showSpeed       : 'fast'\n        };\n        _.extend( this.HUAVOptions, options || {});\n        /** has this been shown already (and onshowFirstTime called)? */\n        this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is( ':visible' );\n        this.hidden = this.isHidden();\n\n        if( $activator ){\n            var mixin = this;\n            $activator.on( 'click', function( ev ){\n                mixin.toggle( mixin.HUAVOptions.showSpeed );\n            });\n        }\n    },\n\n//TODO:?? remove? use .hidden?\n    /** returns T/F if the view is hidden */\n    isHidden : function(){\n        return ( this.HUAVOptions.$elementShown.is( ':hidden' ) );\n    },\n\n    /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n    toggle : function(){\n//TODO: more specific name - toggle is too general\n        // can be called manually as well with normal toggle arguments\n        //TODO: better as a callback (when the show/hide is actually done)\n        // show\n        if( this.hidden ){\n            // fire the optional fns on the first/each showing - good for render()\n            if( !this.HUAVOptions.hasBeenShown ){\n                if( _.isFunction( this.HUAVOptions.onshowFirstTime ) ){\n                    this.HUAVOptions.hasBeenShown = true;\n                    this.HUAVOptions.onshowFirstTime.call( this );\n                }\n            }\n            if( _.isFunction( this.HUAVOptions.onshow ) ){\n                this.HUAVOptions.onshow.call( this );\n                this.trigger( 'hiddenUntilActivated:shown', this );\n            }\n            this.hidden = false;\n\n        // hide\n        } else {\n            if( _.isFunction( this.HUAVOptions.onhide ) ){\n                this.HUAVOptions.onhide.call( this );\n                this.trigger( 'hiddenUntilActivated:hidden', this );\n            }\n            this.hidden = true;\n        }\n        return this.HUAVOptions.showFn.apply( this.HUAVOptions.$elementShown, arguments );\n    }\n};\n\n\n//==============================================================================\n/** Mixin for views that can be dragged and dropped\n *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n *          handlers each time.\n *      dataTransfer data is set to the JSON string of the view's model.toJSON\n *      Override '$dragHandle' to define the draggable DOM sub-element.\n */\nvar DraggableViewMixin = {\n\n    /** set up instance vars to track whether this view is currently draggable */\n    initialize : function( attributes ){\n        /** is the body of this hda view expanded/not? */\n        this.draggable  = attributes.draggable || false;\n    },\n\n    /** what part of the view's DOM triggers the dragging */\n    $dragHandle : function(){\n//TODO: make abstract/general - move this to listItem\n        // override to the element you want to be your view's handle\n        return this.$( '.title-bar' );\n    },\n\n    /** toggle whether this view is draggable */\n    toggleDraggable : function(){\n        if( this.draggable ){\n            this.draggableOff();\n        } else {\n            this.draggableOn();\n        }\n    },\n\n    /** allow the view to be dragged, set up event handlers */\n    draggableOn : function(){\n        this.draggable = true;\n        this.dragStartHandler = _.bind( this._dragStartHandler, this );\n        this.dragEndHandler   = _.bind( this._dragEndHandler,   this );\n\n        var handle = this.$dragHandle().attr( 'draggable', true ).get(0);\n        handle.addEventListener( 'dragstart', this.dragStartHandler, false );\n        handle.addEventListener( 'dragend',   this.dragEndHandler,   false );\n    },\n\n    /** turn of view dragging and remove event listeners */\n    draggableOff : function(){\n        this.draggable = false;\n        var handle = this.$dragHandle().attr( 'draggable', false ).get(0);\n        handle.removeEventListener( 'dragstart', this.dragStartHandler, false );\n        handle.removeEventListener( 'dragend',   this.dragEndHandler,   false );\n    },\n\n    /** sets the dataTransfer data to the model's toJSON\n     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n     */\n    _dragStartHandler : function( event ){\n        event.dataTransfer.effectAllowed = 'move';\n        //ASSUMES: this.model\n        //TODO: all except IE: should be 'application/json', IE: must be 'text'\n        event.dataTransfer.setData( 'text', JSON.stringify( this.model.toJSON() ) );\n        this.trigger( 'draggable:dragstart', event, this );\n        return false;\n    },\n\n    /** handle the dragend\n     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n     */\n    _dragEndHandler : function( event ){\n        this.trigger( 'draggable:dragend', event, this );\n        return false;\n    }\n};\n\n\n//==============================================================================\n/** Mixin that allows a view to be selected (gen. from a list).\n *      Selection controls ($selector) may be hidden/shown/toggled.\n *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n *      Default rendering is a font-awesome checkbox.\n *      Default selector is '.selector' within the view's $el.\n *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n *          Both events are passed the view and the (jQuery) event.\n */\nvar SelectableViewMixin = {\n\n    /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n    initialize : function( attributes ){\n        /** is the view currently in selection mode? */\n        this.selectable = attributes.selectable || false;\n        /** is the view currently selected? */\n        this.selected   = attributes.selected || false;\n    },\n\n    /** $el sub-element where the selector is rendered and what can be clicked to select. */\n    $selector : function(){\n        return this.$( '.selector' );\n    },\n\n    /** How the selector is rendered - defaults to font-awesome checkbox */\n    _renderSelected : function(){\n        // override\n        this.$selector().find( 'span' )\n            .toggleClass( 'fa-check-square-o', this.selected ).toggleClass( 'fa-square-o', !this.selected );\n    },\n\n    /** Toggle whether the selector is shown */\n    toggleSelector : function(){\n//TODO: use this.selectable\n        if( !this.$selector().is( ':visible' ) ){\n            this.showSelector();\n        } else {\n            this.hideSelector();\n        }\n    },\n\n    /** Display the selector control.\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n     */\n    showSelector : function( speed ){\n        speed = speed !== undefined? speed : this.fxSpeed;\n        // make sure selected state is represented properly\n        this.selectable = true;\n        this.trigger( 'selectable', true, this );\n        this._renderSelected();\n        this.$selector().show( speed );\n    },\n\n    /** remove the selector control\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n     */\n    hideSelector : function( speed ){\n        speed = speed !== undefined? speed : this.fxSpeed;\n        // reverse the process from showSelect\n        this.selectable = false;\n        this.trigger( 'selectable', false, this );\n        this.$selector().hide( speed );\n    },\n\n    /** Toggle whether the view is selected */\n    toggleSelect : function( event ){\n        if( this.selected ){\n            this.deselect( event );\n        } else {\n            this.select( event );\n        }\n    },\n\n    /** Select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    select : function( event ){\n        // switch icon, set selected, and trigger event\n        if( !this.selected ){\n            this.trigger( 'selected', this, event );\n            this.selected = true;\n            this._renderSelected();\n        }\n        return false;\n    },\n\n    /** De-select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    deselect : function( event ){\n        // switch icon, set selected, and trigger event\n        if( this.selected ){\n            this.trigger( 'de-selected', this, event );\n            this.selected = false;\n            this._renderSelected();\n        }\n        return false;\n    }\n};\n\n\n//==============================================================================\n/** Return an underscore template fn from an array of strings.\n *  @param {String[]} template      the template strings to compile into the underscore template fn\n *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n *  @returns {Function} the (wrapped) underscore template fn\n *      The function accepts:\n *\n *  The template strings can access:\n *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n *      _l: the localizer function\n *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n *      Because they're namespaced, undefined attributes will not throw an error.\n *\n *  @example:\n *      templateBler : BASE_MVC.wrapTemplate([\n *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n *          '</div>'\n *      ], 'mynamespace' )\n *\n *  Meant to be called in a View's definition in order to compile only once.\n *\n */\nfunction wrapTemplate( template, jsonNamespace ){\n    jsonNamespace = jsonNamespace || 'model';\n    var templateFn = _.template( template.join( '' ) );\n    return function( json, view ){\n        var templateVars = { view : view || {}, _l : _l };\n        templateVars[ jsonNamespace ] = json || {};\n        return templateFn( templateVars );\n    };\n}\n\n\n//==============================================================================\n    return {\n        LoggableMixin                   : LoggableMixin,\n        SessionStorageModel             : SessionStorageModel,\n        mixin                           : mixin,\n        SearchableModelMixin            : SearchableModelMixin,\n        HiddenUntilActivatedViewMixin   : HiddenUntilActivatedViewMixin,\n        DraggableViewMixin              : DraggableViewMixin,\n        SelectableViewMixin             : SelectableViewMixin,\n        wrapTemplate                    : wrapTemplate\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/base-mvc.js\n ** module id = 3\n ** module chunks = 2 3 5\n **/","define([\n], function(){\n//==============================================================================\nfunction addLogging( obj, namespace ){\n    var addTo = ( obj.prototype !== undefined )?( obj.prototype ):( obj );\n    if( namespace !== undefined ){\n        addTo._logNamespace = namespace;\n    }\n\n    [ 'debug', 'info', 'warn', 'error', 'metric' ].forEach( function( logFn ){\n        addTo[ logFn ] = function(){\n            if( !this.logger ){ return undefined; }\n            if( this.logger.emit ){\n                return this.logger.emit( logFn, this._logNamespace, arguments );\n            }\n            if( this.logger[ logFn ] ){\n//TODO:! there has to be a way to get the lineno/file into this\n// http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n// http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n                return this.logger[ logFn ].apply( this.logger, arguments );\n            }\n            return undefined;\n        };\n    });\n    return obj;\n}\n\n//==============================================================================\nreturn addLogging;\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/utils/add-logging.js\n ** module id = 25\n ** module chunks = 2 3 5\n **/","define([\n    'libs/underscore',\n    'libs/backbone/backbone',\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( _, Backbone, baseMVC, _l ){\n//==============================================================================\n/** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n *\n *  @augments Backbone.Model\n *  @borrows LoggableMixin#logger as #logger\n *  @borrows LoggableMixin#log as #log\n *  @constructs\n */\nvar User = Backbone.Model.extend( baseMVC.LoggableMixin ).extend(\n/** @lends User.prototype */{\n\n    ///** logger used to record this.log messages, commonly set to console */\n    //// comment this out to suppress log output\n    //logger              : console,\n\n    /** API location for this resource */\n    urlRoot : function(){ return Galaxy.options.root + 'api/users'; },\n\n    /** Model defaults\n     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n     */\n    defaults : /** @lends User.prototype */{\n        id                      : null,\n        username                : '(' + _l( \"anonymous user\" ) + ')',\n        email                   : \"\",\n        total_disk_usage        : 0,\n        nice_total_disk_usage   : \"\",\n        quota_percent           : null,\n        is_admin                : false\n    },\n\n    /** Set up and bind events\n     *  @param {Object} data Initial model data.\n     */\n    initialize : function( data ){\n        this.log( 'User.initialize:', data );\n\n        this.on( 'loaded', function( model, resp ){ this.log( this + ' has loaded:', model, resp ); });\n        this.on( 'change', function( model, data ){ this.log( this + ' has changed:', model, data.changes ); });\n    },\n\n    isAnonymous : function(){\n        return ( !this.get( 'email' ) );\n    },\n\n    isAdmin : function(){\n        return ( this.get( 'is_admin' ) );\n    },\n\n    /** Load a user with the API using an id.\n     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n     *      (e.g. 'current') and the API will return the current transaction's user data.\n     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n     */\n    loadFromApi : function( idOrCurrent, options ){\n        idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n        options = options || {};\n        var model = this,\n            userFn = options.success;\n\n        /** @ignore */\n        options.success = function( newModel, response ){\n            model.trigger( 'loaded', newModel, response );\n            if( userFn ){ userFn( newModel, response ); }\n        };\n\n        // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n        if( idOrCurrent === User.CURRENT_ID_STR ){\n            options.url = this.urlRoot + '/' + User.CURRENT_ID_STR;\n        }\n        return Backbone.Model.prototype.fetch.call( this, options );\n    },\n\n    /** Clears all data from the sessionStorage.\n     */\n    clearSessionStorage : function(){\n        for( var key in sessionStorage ){\n            //TODO: store these under the user key so we don't have to do this\n            // currently only history\n            if( key.indexOf( 'history:' ) === 0 ){\n                sessionStorage.removeItem( key );\n\n            } else if( key === 'history-panel' ){\n                sessionStorage.removeItem( key );\n            }\n        }\n    },\n\n    /** string representation */\n    toString : function(){\n        var userInfo = [ this.get( 'username' ) ];\n        if( this.get( 'id' ) ){\n            userInfo.unshift( this.get( 'id' ) );\n            userInfo.push( this.get( 'email' ) );\n        }\n        return 'User(' + userInfo.join( ':' ) + ')';\n    }\n});\n\n// string to send to tell server to return this transaction's user (see api/users.py)\nUser.CURRENT_ID_STR = 'current';\n\n// class method to load the current user via the api and return that model\nUser.getCurrentUserFromApi = function( options ){\n    var currentUser = new User();\n    currentUser.loadFromApi( User.CURRENT_ID_STR, options );\n    return currentUser;\n};\n\n// (stub) collection for users (shouldn't be common unless admin UI)\nvar UserCollection = Backbone.Collection.extend( baseMVC.LoggableMixin ).extend({\n    model   : User,\n    urlRoot : function(){ return Galaxy.options.root + 'api/users'; },\n    //logger  : console,\n});\n\n\n//==============================================================================\nreturn {\n    User : User\n};});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/user/user-model.js\n ** module id = 39\n ** module chunks = 2 3 5\n **/","define([\n    'libs/underscore',\n    'libs/backbone/backbone',\n    'mvc/user/user-model',\n    'utils/metrics-logger',\n    'utils/add-logging',\n    'utils/localization'\n], function( _, Backbone, userModel, metricsLogger, addLogging, localize ){\n    console.debug( 'app-base id', jQuery.id );\n    if( !jQuery.id ){\n        jQuery.id = 'app-base';\n    }\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp( options, bootstrapped ){\n    console.debug( 'GalaxyApp:', options, bootstrapped );\n    var self = this;\n    return self._init( options || {}, bootstrapped || {} );\n}\n\n// add logging shortcuts for this object\naddLogging( GalaxyApp, 'GalaxyApp' );\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init( options, bootstrapped ){\n    var self = this;\n    _.extend( self, Backbone.Events );\n\n    self._processOptions( options );\n    self.debug( 'GalaxyApp.options: ', self.options );\n    // special case for root\n    self.root = options.root || '/';\n\n    self._patchGalaxy( window.Galaxy );\n\n    self._initLogger( options.loggerOptions || {} );\n    self.debug( 'GalaxyApp.logger: ', self.logger );\n\n    self._initLocale();\n    self.debug( 'GalaxyApp.localize: ', self.localize );\n\n    self.config = options.config || {};\n    self.debug( 'GalaxyApp.config: ', self.config );\n\n    self._initUser( options.user || {} );\n    self.debug( 'GalaxyApp.user: ', self.user );\n\n    self._setUpListeners();\n    self.trigger( 'ready', self );\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting   : true,\n    /** root url of this app */\n    // move to self.root?\n    root            : '/'\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._processOptions = function _processOptions( options ){\n    var self = this,\n        defaults = self.defaultOptions;\n    self.debug( '_processOptions: ', options );\n\n    self.options = {};\n    for( var k in defaults ){\n        if( defaults.hasOwnProperty( k ) ){\n            self.options[ k ] = ( options.hasOwnProperty( k ) )?( options[ k ] ):( defaults[ k ] );\n        }\n    }\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy( patchWith ){\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if( self.options.patchExisting && patchWith ){\n        self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for( var k in patchWith ){\n            if( patchWith.hasOwnProperty( k ) ){\n                self.debug( '\\t patching in ' + k + ' to Galaxy' );\n                self[ k ] = patchWith[ k ];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger( loggerOptions ){\n    var self = this;\n    self.debug( '_initLogger:', loggerOptions );\n    self.logger = new metricsLogger.MetricsLogger( loggerOptions );\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale( options ){\n    var self = this;\n    self.debug( '_initLocale:', options );\n    self.localize = localize;\n    // add to window as global shortened alias\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser( userJSON ){\n    var self = this;\n    self.debug( '_initUser:', userJSON );\n    self.user = new userModel.User( userJSON );\n\n    //TODO: temp - old alias\n    self.currUser = self.user;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners(){\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $( document ).bind( 'ajaxSend', function( ev, xhr, options ){\n        var data = options.data;\n        try {\n            data = JSON.parse( data );\n        } catch( err ){}\n\n        self.lastAjax = {\n            url     : location.href.slice( 0, -1 ) + options.url,\n            data    : data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString(){\n    var userEmail = this.user.get( 'email' ) || '(anonymous)';\n    return 'GalaxyApp(' + userEmail + ')';\n};\n\n\n// ============================================================================\n    return {\n        GalaxyApp : GalaxyApp\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/galaxy-app-base.js\n ** module id = 91\n ** module chunks = 5\n **/","define([\n], function(){\n/*global window, jQuery, console */\n/*=============================================================================\nTODO:\n    while anon: logs saved to 'logs-null' - this will never post\n        unless we manually do so at/after login\n        OR prepend when userId and localStorage has 'logs-null'\n    wire up _delayPost and test\n\n=============================================================================*/\n/** @class MetricsLogger\n *\n *  Object to cache, output, and post log/metric messages to the server.\n *  Meant to be attached to the Galaxy object.\n *\n *  Log from objects by either attaching logger directly:\n *      panel.logger.metric( 'user dataset deletion', panel.user.id, hda.toJSON() )\n *  or using the LoggableMixin or addLogging function:\n *      MyBackboneModel.extend( LoggableMixin ).extend({ ... })\n *      addLogging( MyBackboneModel, 'my-backbone-model' )\n *\n *  Log from templates by calling directly from Galaxy object:\n *      Galaxy.logger.metric( 'template loaded', { ownedByUser : true });\n *\n *  If you attempt to log an un-serializable object (circular reference, window, etc.),\n *  that entry will not be cached (or sent). If you set consoleLevel and consoleLogger\n *  appropriately, a warning will be shown when this happens:\n *      > panel.metric( 'something weird with window', { window : window })\n *      !'Metrics logger could not stringify logArguments: ...'\n */\nfunction MetricsLogger( options ){\n    options = options || {};\n    var self = this;\n\n    ///** get the current user's id from bootstrapped data or options */\n    self.userId = ( window.bootstrapped && window.bootstrapped.user )? window.bootstrapped.user.id: null;\n    self.userId = self.userId || options.userId || null;\n\n    /** the (optional) console to emit logs to */\n    self.consoleLogger = options.consoleLogger || null;\n\n    self._init( options );\n    return self;\n}\n\n//----------------------------------------------------------------------------- defaults and constants\n// see: python std lib, logging\nMetricsLogger.ALL  =  0;\nMetricsLogger.DEBUG = 10;\nMetricsLogger.INFO  = 20;\nMetricsLogger.WARN  = 30;\nMetricsLogger.ERROR = 40;\n// metrics levels here?\n//MetricsLogger.MinorEvent  = 45;\n//MetricsLogger.MajorEvent  = 50;\nMetricsLogger.METRIC = 50;\nMetricsLogger.NONE = 100;\n\n/** default options - override these through the constructor */\nMetricsLogger.defaultOptions = {\n    /** if an incoming message has a level >= this, it will be cached - can also be a string (e.g. 'debug') */\n    logLevel            : MetricsLogger.NONE,\n    /** if an incoming message has a level >= this, it will be output to the console */\n    consoleLevel        : MetricsLogger.NONE,\n    /** the default 'namespace' or label associated with an incoming message (if none is passed) */\n    defaultNamespace    : 'Galaxy',\n    /** the prefix attached to client-side logs to distinguish them in the metrics db */\n    clientPrefix        : 'client.',\n\n    /** the maximum number of messages the cache should hold; if exceeded older messages are removed first */\n    maxCacheSize        : 3000,\n    /** the number of messages accumulate before posting to the server; should be <= maxCacheSize */\n    postSize            : 1000,\n    /** T/F whether to add a timestamp to incoming cached messages */\n    addTime             : true,\n    /** string to prefix to userid for cache web storage */\n    cacheKeyPrefix      : 'logs-',\n\n    /** the relative url to post messages to */\n    postUrl             : '/api/metrics',\n    /** delay before trying post again after two failures */\n    delayPostInMs       : 1000 * 60 * 10,\n\n    /** an (optional) function that should return an object; used to send additional data with the metrics */\n    getPingData         : undefined,\n    /** an (optional) function that will handle the servers response after successfully posting messages */\n    onServerResponse    : undefined\n};\n\n//----------------------------------------------------------------------------- set up\n/** initialize the logger with options, set up instance vars and cache, and add onpageunload to window */\nMetricsLogger.prototype._init = function _init( options ){\n    var self = this;\n    self.options = {};\n    for( var k in MetricsLogger.defaultOptions ){\n        if( MetricsLogger.defaultOptions.hasOwnProperty( k ) ){\n            self.options[ k ] = ( options.hasOwnProperty( k ) )?( options[ k ] ):( MetricsLogger.defaultOptions[ k ] );\n        }\n    }\n    self.options.logLevel = self._parseLevel( self.options.logLevel );\n    self.options.consoleLevel = self._parseLevel( self.options.consoleLevel );\n    //self._emitToConsole( 'debug', 'MetricsLogger', 'MetricsLogger.options:', self.options );\n\n    /** is the logger currently sending? */\n    self._sending = false;\n    /** the setTimeout id if the logger POST has failed more than once */\n    self._waiting = null;\n    /** the current number of entries to send in a POST */\n    self._postSize = self.options.postSize;\n\n    self._initCache();\n\n    return self;\n};\n\n/** initialize the cache */\nMetricsLogger.prototype._initCache = function _initCache(){\n    try {\n        this.cache = new LoggingCache({\n            maxSize : this.options.maxCacheSize,\n            key     : this.options.cacheKeyPrefix + this.userId\n        });\n    } catch( err ){\n        this._emitToConsole( 'warn', 'MetricsLogger', [ 'Could not intitialize logging cache:', err ] );\n        this.options.logLevel = MetricsLogger.NONE;\n    }\n};\n\n/** return the numeric log level if level in 'none, debug, log, info, warn, error' */\nMetricsLogger.prototype._parseLevel = function _parseLevel( level ){\n    var type = typeof level;\n    if( type === 'number' ){ return level; }\n    if( type === 'string' ){\n        var upper = level.toUpperCase();\n        if( MetricsLogger.hasOwnProperty( upper ) ){\n            return MetricsLogger[ upper ];\n        }\n    }\n    throw new Error( 'Unknown log level: ' + level );\n};\n\n\n//----------------------------------------------------------------------------- main entry point\n/** record a log/message's arguments to the cache and/or the console based on level and namespace */\nMetricsLogger.prototype.emit = function emit( level, namespace, logArguments ){\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ 'emit:', level, namespace, logArguments ]);\n    var self = this;\n    namespace = namespace || self.options.defaultNamespace;\n    if( !level || !logArguments ){\n        return self;\n    }\n    // add to cache if proper level\n    //TODO: respect do not track?\n    //if( !navigator.doNotTrack && level >= self.options.logLevel ){\n    level = self._parseLevel( level );\n    if( level >= self.options.logLevel ){\n        self._addToCache( level, namespace, logArguments );\n    }\n    // also emit to consoleLogger if proper level for that\n    if( self.consoleLogger && level >= self.options.consoleLevel ){\n        self._emitToConsole( level, namespace, logArguments );\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- cache\n/** add a message to the cache and if messages.length is high enough post them to the server */\nMetricsLogger.prototype._addToCache = function _addToCache( level, namespace, logArguments ){\n    this._emitToConsole( 'debug', 'MetricsLogger',\n        [ '_addToCache:', arguments, this.options.addTime, this.cache.length() ]);\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ '\\t logArguments:', logArguments ]);\n    var self = this;\n    // try add to the cache and if we've got _postSize number of entries, attempt to post them to the server\n    try {\n        var newLength = self.cache.add( self._buildEntry( level, namespace, logArguments ) );\n        if( newLength >= self._postSize ){\n            self._postCache();\n        }\n    // discard entry if an error occurs, but warn if level set to do so\n    } catch( err ){\n        self._emitToConsole( 'warn', 'MetricsLogger',\n            [ 'Metrics logger could not stringify logArguments:', namespace, logArguments ] );\n        self._emitToConsole( 'error', 'MetricsLogger', [ err ] );\n\n    }\n    return self;\n};\n\n/** build a log cache entry object from the given level, namespace, and arguments (optionally adding timestamp */\nMetricsLogger.prototype._buildEntry = function _buildEntry( level, namespace, logArguments ){\n    this._emitToConsole( 'debug', 'MetricsLogger', [ '_buildEntry:', arguments ]);\n    var entry = {\n            level       : level,\n            namespace   : this.options.clientPrefix + namespace,\n            args        : logArguments\n        };\n    if( this.options.addTime ){\n        entry.time = new Date().toISOString();\n    }\n    return entry;\n};\n\n/** post _postSize messages from the cache to the server, removing them if successful\n *      if the post fails, wait until maxCacheSize is accumulated instead and try again then\n *      in addition to the messages from the cache ('metrics'), any info from getPingData (if set) will be sent\n *      onServerResponse will be called (if set) with any response from the server\n */\nMetricsLogger.prototype._postCache = function _postCache( options ){\n    options = options || {};\n    this._emitToConsole( 'info', 'MetricsLogger', [ '_postCache', options, this._postSize ]);\n\n    // short circuit if we're already sending\n    if( !this.options.postUrl || this._sending ){\n        return jQuery.when({});\n    }\n\n    var self = this,\n        postSize = options.count || self._postSize,\n        // do not splice - remove after *successful* post\n        entries = self.cache.get( postSize ),\n        entriesLength = entries.length,\n        // use the optional getPingData to add any extra info we may want to send\n        postData = ( typeof self.options.getPingData === 'function' )?( self.options.getPingData() ):( {} );\n    //console.debug( postSize, entriesLength );\n\n    // add the metrics and send\n    postData.metrics = JSON.stringify( entries );\n    //console.debug( postData.metrics );\n    self._sending = true;\n    return jQuery.post( self.options.postUrl, postData )\n        .always( function(){\n            self._sending = false;\n        })\n        .fail( function( xhr, status, message ){\n            // if we failed the previous time, set the next post target to the max num of entries\n            self._postSize = self.options.maxCacheSize;\n//TODO:??\n            // log this failure to explain any gap in metrics\n            this.emit( 'error', 'MetricsLogger', [ '_postCache error:',\n                xhr.readyState, xhr.status, xhr.responseJSON || xhr.responseText ]);\n//TODO: still doesn't solve the problem that when cache == max, post will be tried on every emit\n//TODO: see _delayPost\n        })\n        .done( function( response ){\n            if( typeof self.options.onServerResponse === 'function' ){\n                self.options.onServerResponse( response );\n            }\n            // only remove if post successful\n            self.cache.remove( entriesLength );\n            //console.debug( 'removed entries:', entriesLength, 'size now:', self.cache.length() );\n            // if we succeeded, reset the post target to the normal num of entries\n            self._postSize = self.options.postSize;\n        });\n    // return the xhr promise\n};\n\n/** set _waiting to true and, after delayPostInMs, set it back to false */\nMetricsLogger.prototype._delayPost = function _delayPost(){\n//TODO: this won't work between pages\n    var self = this;\n    self._waiting = setTimeout( function(){\n        self._waiting = null;\n    }, self.options.delayPostInMs );\n};\n\n\n//----------------------------------------------------------------------------- console\n/** output message to console based on level and consoleLogger type */\nMetricsLogger.prototype._emitToConsole = function _emitToConsole( level, namespace, logArguments ){\n    //console.debug( '_emitToConsole:', level, namespace, logArguments );\n    var self = this;\n    if( !self.consoleLogger ){ return self; }\n\n    var args = Array.prototype.slice.call( logArguments, 0 );\n    args.unshift( namespace );\n//TODO: script location and/or source maps?\n//TODO: branch on navigator.userAgent == AIIEEE - it only has log\n    if(        level >= MetricsLogger.METRIC && typeof( self.consoleLogger.info ) === 'function' ){\n        return self.consoleLogger.info.apply( self.consoleLogger, args );\n\n    } else if( level >= MetricsLogger.ERROR && typeof( self.consoleLogger.error ) === 'function' ){\n        return self.consoleLogger.error.apply( self.consoleLogger, args );\n    } else if( level >= MetricsLogger.WARN && typeof( self.consoleLogger.warn ) === 'function' ){\n        self.consoleLogger.warn.apply( self.consoleLogger, args );\n    } else if( level >= MetricsLogger.INFO && typeof( self.consoleLogger.info ) === 'function' ){\n        self.consoleLogger.info.apply( self.consoleLogger, args );\n    } else if( level >= MetricsLogger.DEBUG && typeof( self.consoleLogger.debug ) === 'function' ){\n        self.consoleLogger.debug.apply( self.consoleLogger, args );\n    } else if( typeof( self.consoleLogger.log ) === 'function' ){\n        self.consoleLogger.log.apply( self.consoleLogger, args );\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- shortcuts\n// generic functions when logging from non-namespaced object (e.g. templates)\n/** log to default namespace */\nMetricsLogger.prototype.log = function log(){\n    this.emit( 1, this.options.defaultNamespace,\n        Array.prototype.slice.call( arguments, 0 ) );\n};\n\n/** debug to default namespace */\nMetricsLogger.prototype.debug = function debug(){\n    this.emit( MetricsLogger.DEBUG, this.options.defaultNamespace,\n        Array.prototype.slice.call( arguments, 0 ) );\n};\n\n/** info to default namespace */\nMetricsLogger.prototype.info = function info(){\n    this.emit( MetricsLogger.INFO, this.options.defaultNamespace,\n        Array.prototype.slice.call( arguments, 0 ) );\n};\n\n/** warn to default namespace */\nMetricsLogger.prototype.warn = function warn(){\n    this.emit( MetricsLogger.WARN, this.options.defaultNamespace,\n        Array.prototype.slice.call( arguments, 0 ) );\n};\n\n/** error to default namespace */\nMetricsLogger.prototype.error = function error(){\n    this.emit( MetricsLogger.ERROR, this.options.defaultNamespace,\n        Array.prototype.slice.call( arguments, 0 ) );\n};\n\n/** metric to default namespace */\nMetricsLogger.prototype.metric = function metric(){\n    this.emit( MetricsLogger.METRIC, this.options.defaultNamespace,\n        Array.prototype.slice.call( arguments, 0 ) );\n};\n\n\n/* ============================================================================\nTODO:\n    need a performance pass - the JSON un/parsing is a bit much\n\n============================================================================ */\n/** @class LoggingCache\n *  Simple implementation of cache wrapping an array.\n *\n *  Formats an entry before it's cached and only keeps options.maxSize number\n *  of entries. Older entries are deleted first.\n */\nfunction LoggingCache( options ){\n    var self = this;\n    return self._init( options || {} );\n}\n\n/** default options */\nLoggingCache.defaultOptions = {\n    /** maximum number of entries to keep before discarding oldest */\n    maxSize     : 5000\n};\n\n/** initialize with options */\nLoggingCache.prototype._init = function _init( options ){\n    if( !this._hasStorage() ){\n        //TODO: fall back to jstorage\n        throw new Error( 'LoggingCache needs localStorage' );\n    }\n    if( !options.key ){\n        throw new Error( 'LoggingCache needs key for localStorage' );\n    }\n    this.key = options.key;\n    this._initStorage();\n\n    this.maxSize = options.maxSize || LoggingCache.defaultOptions.maxSize;\n    return this;\n};\n\n/** tests for localStorage fns */\nLoggingCache.prototype._hasStorage = function _hasStorage(){\n//TODO: modernizr\n    var test = 'test';\n    try {\n        localStorage.setItem( test, test );\n        localStorage.removeItem( test );\n        return true;\n    } catch( e ){\n        return false;\n    }\n};\n\n/** if no localStorage set for key, initialize to empty array */\nLoggingCache.prototype._initStorage = function _initStorage(){\n    if( localStorage.getItem( this.key ) === null ){\n        return this.empty();\n    }\n    return this;\n};\n\n/** add an entry to the cache, removing the oldest beforehand if size >= maxSize */\nLoggingCache.prototype.add = function add( entry ){\n    var self = this,\n        _cache = self._fetchAndParse(),\n        overage = ( _cache.length + 1 ) - self.maxSize;\n    if( overage > 0 ){\n        _cache.splice( 0, overage );\n    }\n    _cache.push( entry );\n    self._unparseAndStore( _cache );\n    return _cache.length;\n};\n\n/** get the entries from localStorage and parse them */\nLoggingCache.prototype._fetchAndParse = function _fetchAndParse(){\n    var self = this;\n    return JSON.parse( localStorage.getItem( self.key ) );\n};\n\n/** stringify the entries and put them in localStorage */\nLoggingCache.prototype._unparseAndStore = function _unparseAndStore( entries ){\n    var self = this;\n    return localStorage.setItem( self.key, JSON.stringify( entries ) );\n};\n\n///** process the entry before caching */\n//LoggingCache.prototype._preprocessEntry = function _preprocessEntry( entry ){\n//    return JSON.stringify( entry );\n//};\n\n/** return the length --- oh, getters where are you? */\nLoggingCache.prototype.length = function length(){\n    return this._fetchAndParse().length;\n};\n\n/** get count number of entries starting with the oldest */\nLoggingCache.prototype.get = function get( count ){\n    return this._fetchAndParse().slice( 0, count );\n};\n\n/** remove count number of entries starting with the oldest */\nLoggingCache.prototype.remove = function remove( count ){\n    var _cache = this._fetchAndParse(),\n        removed = _cache.splice( 0, count );\n    this._unparseAndStore( _cache );\n    return removed;\n};\n\n/** empty/clear the entire cache */\nLoggingCache.prototype.empty = function empty(){\n    localStorage.setItem( this.key, '[]' );\n    return this;\n};\n\n/** stringify count number of entries (but do not remove) */\nLoggingCache.prototype.stringify = function stringify( count ){\n    return JSON.stringify( this.get( count ) );\n};\n\n/** outputs entire cache to console */\nLoggingCache.prototype.print = function print(){\n    // popup? (really, carl? a popup?) - easier to copy/paste\n    console.log( JSON.stringify( this._fetchAndParse(), null, '  ' ) );\n};\n\n\n//=============================================================================\n    return {\n        MetricsLogger  : MetricsLogger,\n        LoggingCache   : LoggingCache\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/utils/metrics-logger.js\n ** module id = 120\n ** module chunks = 5\n **/"],"sourceRoot":""}