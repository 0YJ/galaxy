webpackJsonp([0],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */
/*!********************************************!*\
  !*** ./galaxy/scripts/mvc/ui/ui-select.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A plugin for initializing select2 input items.\n * Make sure the select2 library itself is loaded beforehand.\n * Also the element to which select2 will be appended has to\n * be created before select2 initialization (and passed as option).\n */\nvar View = Backbone.View.extend({\n    // options\n    optionsDefault: {\n        css: \"\",\n        placeholder: \"No data available\",\n        data: [],\n        value: null,\n        multiple: false,\n        minimumInputLength: 0,\n        // example format of initial data: \"id:name,55:anotherrole@role.com,27:role@role.com\"\n        initialData: \"\"\n    },\n\n    // initialize\n    initialize: function initialize(options) {\n        // configure options\n        this.options = _utils2.default.merge(options, this.optionsDefault);\n\n        // create new element\n        this.setElement(this._template(this.options));\n\n        // check if container exists\n        if (!this.options.container) {\n            console.log(\"ui-select::initialize() : container not specified.\");\n            return;\n        }\n\n        // add to dom\n        this.options.container.append(this.$el);\n\n        // link selection dictionary\n        this.select_data = this.options.data;\n\n        // refresh\n        this._refresh();\n\n        if (!this.options.multiple) {\n            // initial value\n            if (this.options.value) {\n                this._setValue(this.options.value);\n            }\n\n            // add change event\n            var self = this;\n            if (this.options.onchange) {\n                this.$el.on(\"change\", function () {\n                    self.options.onchange(self.value());\n                });\n            }\n        }\n    },\n\n    // value\n    value: function value(new_value) {\n        // get current id/value\n        var before = this._getValue();\n\n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this._setValue(new_value);\n        }\n\n        // get current id/value\n        var after = this._getValue();\n\n        // fire onchange\n        if (after != before && this.options.onchange) {\n            this.options.onchange(after);\n        }\n\n        // return current value\n        return after;\n    },\n\n    // label\n    text: function text() {\n        return this.$el.select2(\"data\").text;\n    },\n\n    // disabled\n    disabled: function disabled() {\n        return !this.$el.select2(\"enable\");\n    },\n\n    // enable\n    enable: function enable() {\n        this.$el.select2(\"enable\", true);\n    },\n\n    // disable\n    disable: function disable() {\n        this.$el.select2(\"enable\", false);\n    },\n\n    // add\n    add: function add(options) {\n        // add options\n        this.select_data.push({\n            id: options.id,\n            text: options.text\n        });\n\n        // refresh\n        this._refresh();\n    },\n\n    // remove\n    del: function del(id) {\n        // search option\n        var index = this._getIndex(id);\n\n        // check if found\n        if (index != -1) {\n            // remove options\n            this.select_data.splice(index, 1);\n\n            // refresh\n            this._refresh();\n        }\n    },\n\n    // remove\n    remove: function remove() {\n        this.$el.select2(\"destroy\");\n    },\n\n    // update\n    update: function update(options) {\n        // copy options\n        this.select_data = [];\n        for (var key in options.data) {\n            this.select_data.push(options.data[key]);\n        }\n\n        // refresh\n        this._refresh();\n    },\n\n    // refresh\n    _refresh: function _refresh() {\n        // add select2 data based on type of input\n        if (!this.options.multiple) {\n            var selected = this._getValue();\n            var select_opt = {\n                data: this.select_data,\n                containerCssClass: this.options.css,\n                placeholder: this.options.placeholder,\n                dropdownAutoWidth: true\n            };\n            this.$el.select2(select_opt);\n            // select previous value (if exists)\n            this._setValue(selected);\n        } else {\n            var select_opt = {\n                multiple: this.options.multiple,\n                containerCssClass: this.options.css,\n                placeholder: this.options.placeholder,\n                minimumInputLength: this.options.minimumInputLength,\n                ajax: this.options.ajax,\n                dropdownCssClass: this.options.dropdownCssClass,\n                escapeMarkup: this.options.escapeMarkup,\n                formatResult: this.options.formatResult,\n                formatSelection: this.options.formatSelection,\n                initSelection: this.options.initSelection,\n                initialData: this.options.initialData\n            };\n            this.$el.select2(select_opt);\n        }\n    },\n\n    // get index\n    _getIndex: function _getIndex(value) {\n        // returns the index of the searched value\n        _.findIndex(this.select_data, { id: value });\n    },\n\n    // get value\n    _getValue: function _getValue() {\n        return this.$el.select2(\"val\");\n    },\n\n    // set value\n    _setValue: function _setValue(new_value) {\n        var index = this._getIndex(new_value);\n        if (index == -1) {\n            if (this.select_data.length > 0) {\n                new_value = this.select_data[0].id;\n            }\n        }\n        this.$el.select2(\"val\", new_value);\n    },\n\n    // element\n    _template: function _template(options) {\n        return \"<input type=\\\"hidden\\\" value=\\\"\" + this.options.initialData + \"\\\"/>\";\n    }\n}); // dependencies\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */
/*!*********************************************!*\
  !*** ./galaxy/scripts/mvc/ui/ui-popover.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    optionsDefault: {\n        with_close: true,\n        title: null,\n        placement: \"top\",\n        container: \"body\",\n        body: null\n    },\n\n    initialize: function initialize(options) {\n        this.setElement(this._template());\n        this.uid = _utils2.default.uid();\n        this.options = _.defaults(options || {}, this.optionsDefault);\n        this.options.container.parent().append(this.el);\n        this.$title = this.$(\".popover-title-label\");\n        this.$close = this.$(\".popover-close\");\n        this.$body = this.$(\".popover-content\");\n\n        // add initial content\n        this.options.body && this.append(this.options.body);\n\n        // add event to hide if click is outside of popup and not on container\n        var self = this;\n        $(\"body\").on(\"mousedown.\" + this.uid, function (e) {\n            // the 'is' for buttons that trigger popups\n            // the 'has' for icons within a button that triggers a popup\n            self.visible && !$(self.options.container).is(e.target) && !$(self.el).is(e.target) && $(self.el).has(e.target).length === 0 && self.hide();\n        });\n    },\n\n    /**\n     * Render popover\n     */\n    render: function render() {\n        this.$title.html(this.options.title);\n        this.$el.removeClass().addClass(\"ui-popover popover fade in\").addClass(this.options.placement);\n        this.$el.css(this._get_placement(this.options.placement));\n\n        // configure close option\n        var self = this;\n        if (this.options.with_close) {\n            this.$close.on(\"click\", function () {\n                self.hide();\n            }).show();\n        } else {\n            this.$close.off().hide();\n        }\n    },\n\n    /**\n     * Set the popover title\n     * @params{ String }    newTitle    - New popover title\n     */\n    title: function title(newTitle) {\n        if (newTitle !== undefined) {\n            this.options.title = newTitle;\n            this.$title.html(newTitle);\n        }\n    },\n\n    /**\n     * Show popover\n     */\n    show: function show() {\n        this.render();\n        this.$el.show();\n        this.visible = true;\n    },\n\n    /**\n     * Hide popover\n     */\n    hide: function hide() {\n        this.$el.hide();\n        this.visible = false;\n    },\n\n    /**\n     * Append new content to the popover\n     * @params{ Object }  $el - Dom element\n     */\n    append: function append($el) {\n        this.$body.append($el);\n    },\n\n    /**\n     * Remove all content\n     */\n    empty: function empty() {\n        this.$body.empty();\n    },\n\n    /**\n     * Remove popover\n     */\n    remove: function remove() {\n        $(\"body\").off(\"mousedown.\" + this.uid);\n        this.$el.remove();\n    },\n\n    /**\n     * Improve popover location/placement\n     */\n    _get_placement: function _get_placement(placement) {\n        // get popover dimensions\n        var width = this._get_width(this.$el);\n        var height = this.$el.height();\n\n        // get container details\n        var $container = this.options.container;\n        var container_width = this._get_width($container);\n        var container_height = this._get_height($container);\n        var container_position = $container.position();\n\n        // get position\n        var top;\n\n        var left;\n        top = left = 0;\n        if ([\"top\", \"bottom\"].indexOf(placement) != -1) {\n            left = container_position.left - width + (container_width + width) / 2;\n            switch (placement) {\n                case \"top\":\n                    top = container_position.top - height - 5;\n                    break;\n                case \"bottom\":\n                    top = container_position.top + container_height + 5;\n                    break;\n            }\n        } else {\n            top = container_position.top - height + (container_height + height) / 2;\n            switch (placement) {\n                case \"right\":\n                    left = container_position.left + container_width;\n                    break;\n            }\n        }\n        return { top: top, left: left };\n    },\n\n    /**\n     * Returns padding/margin corrected width\n     */\n    _get_width: function _get_width($el) {\n        return $el.width() + parseInt($el.css(\"padding-left\")) + parseInt($el.css(\"margin-left\")) + parseInt($el.css(\"padding-right\")) + parseInt($el.css(\"margin-right\"));\n    },\n\n    /**\n     * Returns padding corrected height\n     */\n    _get_height: function _get_height($el) {\n        return $el.height() + parseInt($el.css(\"padding-top\")) + parseInt($el.css(\"padding-bottom\"));\n    },\n\n    /**\n     * Return the popover template\n     */\n    _template: function _template(options) {\n        return '<div class=\"ui-popover popover fade in\">' + '<div class=\"arrow\"/>' + '<div class=\"popover-title\">' + '<div class=\"popover-title-label\"/>' + '<div class=\"popover-close fa fa-times-circle\"/>' + \"</div>\" + '<div class=\"popover-content\"/>' + \"</div>\";\n    }\n}); /**\n     * Popover wrapper\n     */\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/*!**********************************************!*\
  !*** ./galaxy/scripts/mvc/dataset/states.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//==============================================================================\n/** Map of possible HDA/collection/job states to their string equivalents.\n *      A port of galaxy.model.Dataset.states.\n */\nvar STATES = {\n    // NOT ready states\n    /** is uploading and not ready */\n    UPLOAD: \"upload\",\n    /** the job that will produce the dataset queued in the runner */\n    QUEUED: \"queued\",\n    /** the job that will produce the dataset is running */\n    RUNNING: \"running\",\n    /** metadata for the dataset is being discovered/set */\n    SETTING_METADATA: \"setting_metadata\",\n\n    // ready states\n    /** was created without a tool */\n    NEW: \"new\",\n    /** has no data */\n    EMPTY: \"empty\",\n    /** has successfully completed running */\n    OK: \"ok\",\n\n    /** the job that will produce the dataset paused */\n    PAUSED: \"paused\",\n    /** metadata discovery/setting failed or errored (but otherwise ok) */\n    FAILED_METADATA: \"failed_metadata\",\n    //TODO: not in trans.app.model.Dataset.states - is in database\n    /** not accessible to the current user (i.e. due to permissions) */\n    NOT_VIEWABLE: \"noPermission\",\n    /** deleted while uploading */\n    DISCARDED: \"discarded\",\n    /** the tool producing this dataset failed */\n    ERROR: \"error\"\n};\n\nSTATES.READY_STATES = [STATES.OK, STATES.EMPTY, STATES.PAUSED, STATES.FAILED_METADATA, STATES.NOT_VIEWABLE, STATES.DISCARDED, STATES.ERROR];\n\nSTATES.NOT_READY_STATES = [STATES.UPLOAD, STATES.QUEUED, STATES.RUNNING, STATES.SETTING_METADATA, STATES.NEW];\n\n//==============================================================================\nexports.default = STATES;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL2RhdGFzZXQvc3RhdGVzLmpzP2JkODMiXSwic291cmNlc0NvbnRlbnQiOlsiLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8qKiBNYXAgb2YgcG9zc2libGUgSERBL2NvbGxlY3Rpb24vam9iIHN0YXRlcyB0byB0aGVpciBzdHJpbmcgZXF1aXZhbGVudHMuXG4gKiAgICAgIEEgcG9ydCBvZiBnYWxheHkubW9kZWwuRGF0YXNldC5zdGF0ZXMuXG4gKi9cbnZhciBTVEFURVMgPSB7XG4gICAgLy8gTk9UIHJlYWR5IHN0YXRlc1xuICAgIC8qKiBpcyB1cGxvYWRpbmcgYW5kIG5vdCByZWFkeSAqL1xuICAgIFVQTE9BRDogXCJ1cGxvYWRcIixcbiAgICAvKiogdGhlIGpvYiB0aGF0IHdpbGwgcHJvZHVjZSB0aGUgZGF0YXNldCBxdWV1ZWQgaW4gdGhlIHJ1bm5lciAqL1xuICAgIFFVRVVFRDogXCJxdWV1ZWRcIixcbiAgICAvKiogdGhlIGpvYiB0aGF0IHdpbGwgcHJvZHVjZSB0aGUgZGF0YXNldCBpcyBydW5uaW5nICovXG4gICAgUlVOTklORzogXCJydW5uaW5nXCIsXG4gICAgLyoqIG1ldGFkYXRhIGZvciB0aGUgZGF0YXNldCBpcyBiZWluZyBkaXNjb3ZlcmVkL3NldCAqL1xuICAgIFNFVFRJTkdfTUVUQURBVEE6IFwic2V0dGluZ19tZXRhZGF0YVwiLFxuXG4gICAgLy8gcmVhZHkgc3RhdGVzXG4gICAgLyoqIHdhcyBjcmVhdGVkIHdpdGhvdXQgYSB0b29sICovXG4gICAgTkVXOiBcIm5ld1wiLFxuICAgIC8qKiBoYXMgbm8gZGF0YSAqL1xuICAgIEVNUFRZOiBcImVtcHR5XCIsXG4gICAgLyoqIGhhcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkIHJ1bm5pbmcgKi9cbiAgICBPSzogXCJva1wiLFxuXG4gICAgLyoqIHRoZSBqb2IgdGhhdCB3aWxsIHByb2R1Y2UgdGhlIGRhdGFzZXQgcGF1c2VkICovXG4gICAgUEFVU0VEOiBcInBhdXNlZFwiLFxuICAgIC8qKiBtZXRhZGF0YSBkaXNjb3Zlcnkvc2V0dGluZyBmYWlsZWQgb3IgZXJyb3JlZCAoYnV0IG90aGVyd2lzZSBvaykgKi9cbiAgICBGQUlMRURfTUVUQURBVEE6IFwiZmFpbGVkX21ldGFkYXRhXCIsXG4gICAgLy9UT0RPOiBub3QgaW4gdHJhbnMuYXBwLm1vZGVsLkRhdGFzZXQuc3RhdGVzIC0gaXMgaW4gZGF0YWJhc2VcbiAgICAvKiogbm90IGFjY2Vzc2libGUgdG8gdGhlIGN1cnJlbnQgdXNlciAoaS5lLiBkdWUgdG8gcGVybWlzc2lvbnMpICovXG4gICAgTk9UX1ZJRVdBQkxFOiBcIm5vUGVybWlzc2lvblwiLFxuICAgIC8qKiBkZWxldGVkIHdoaWxlIHVwbG9hZGluZyAqL1xuICAgIERJU0NBUkRFRDogXCJkaXNjYXJkZWRcIixcbiAgICAvKiogdGhlIHRvb2wgcHJvZHVjaW5nIHRoaXMgZGF0YXNldCBmYWlsZWQgKi9cbiAgICBFUlJPUjogXCJlcnJvclwiXG59O1xuXG5TVEFURVMuUkVBRFlfU1RBVEVTID0gW1xuICAgIFNUQVRFUy5PSyxcbiAgICBTVEFURVMuRU1QVFksXG4gICAgU1RBVEVTLlBBVVNFRCxcbiAgICBTVEFURVMuRkFJTEVEX01FVEFEQVRBLFxuICAgIFNUQVRFUy5OT1RfVklFV0FCTEUsXG4gICAgU1RBVEVTLkRJU0NBUkRFRCxcbiAgICBTVEFURVMuRVJST1Jcbl07XG5cblNUQVRFUy5OT1RfUkVBRFlfU1RBVEVTID0gW1NUQVRFUy5VUExPQUQsIFNUQVRFUy5RVUVVRUQsIFNUQVRFUy5SVU5OSU5HLCBTVEFURVMuU0VUVElOR19NRVRBREFUQSwgU1RBVEVTLk5FV107XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCBTVEFURVM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2RhdGFzZXQvc3RhdGVzLmpzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdCQTtBQUNBO0FBK0JBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */
/*!*********************************************!*\
  !*** ./galaxy/scripts/ui/fa-icon-button.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _jquery = __webpack_require__(/*! jquery */ 0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\"use_strict\";\n\nvar $ = _jquery2.default;\n//============================================================================\n/** Returns a jQuery object containing a clickable font-awesome button.\n *      options:\n *          tooltipConfig   : option map for bootstrap tool tip\n *          classes         : array of class names (will always be classed as icon-btn)\n *          disabled        : T/F - add the 'disabled' class?\n *          title           : tooltip/title string\n *          target          : optional href target\n *          href            : optional href\n *          faIcon          : which font awesome icon to use\n *          onclick         : function to call when the button is clicked\n */\nvar faIconButton = function faIconButton(options) {\n    options = options || {};\n    options.tooltipConfig = options.tooltipConfig || {\n        placement: \"bottom\"\n    };\n\n    options.classes = [\"icon-btn\"].concat(options.classes || []);\n    if (options.disabled) {\n        options.classes.push(\"disabled\");\n    }\n\n    var html = ['<a class=\"', options.classes.join(\" \"), '\"', options.title ? \" title=\\\"\" + options.title + \"\\\"\" : \"\", !options.disabled && options.target ? \" target=\\\"\" + options.target + \"\\\"\" : \"\", ' href=\"', !options.disabled && options.href ? options.href : \"javascript:void(0);\", '\">',\n    // could go with something less specific here - like 'html'\n    '<span class=\"fa ', options.faIcon, '\"></span>', \"</a>\"].join(\"\");\n    var $button = $(html).tooltip(options.tooltipConfig);\n    if (_.isFunction(options.onclick)) {\n        $button.click(options.onclick);\n    }\n    return $button;\n};\n\n//============================================================================\nexports.default = faIconButton;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvdWkvZmEtaWNvbi1idXR0b24uanM/YzU2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgalF1ZXJ5IGZyb20gXCJqcXVlcnlcIjtcbihcInVzZV9zdHJpY3RcIik7XG5cbnZhciAkID0galF1ZXJ5O1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vKiogUmV0dXJucyBhIGpRdWVyeSBvYmplY3QgY29udGFpbmluZyBhIGNsaWNrYWJsZSBmb250LWF3ZXNvbWUgYnV0dG9uLlxuICogICAgICBvcHRpb25zOlxuICogICAgICAgICAgdG9vbHRpcENvbmZpZyAgIDogb3B0aW9uIG1hcCBmb3IgYm9vdHN0cmFwIHRvb2wgdGlwXG4gKiAgICAgICAgICBjbGFzc2VzICAgICAgICAgOiBhcnJheSBvZiBjbGFzcyBuYW1lcyAod2lsbCBhbHdheXMgYmUgY2xhc3NlZCBhcyBpY29uLWJ0bilcbiAqICAgICAgICAgIGRpc2FibGVkICAgICAgICA6IFQvRiAtIGFkZCB0aGUgJ2Rpc2FibGVkJyBjbGFzcz9cbiAqICAgICAgICAgIHRpdGxlICAgICAgICAgICA6IHRvb2x0aXAvdGl0bGUgc3RyaW5nXG4gKiAgICAgICAgICB0YXJnZXQgICAgICAgICAgOiBvcHRpb25hbCBocmVmIHRhcmdldFxuICogICAgICAgICAgaHJlZiAgICAgICAgICAgIDogb3B0aW9uYWwgaHJlZlxuICogICAgICAgICAgZmFJY29uICAgICAgICAgIDogd2hpY2ggZm9udCBhd2Vzb21lIGljb24gdG8gdXNlXG4gKiAgICAgICAgICBvbmNsaWNrICAgICAgICAgOiBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXG4gKi9cbnZhciBmYUljb25CdXR0b24gPSBvcHRpb25zID0+IHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnRvb2x0aXBDb25maWcgPSBvcHRpb25zLnRvb2x0aXBDb25maWcgfHwge1xuICAgICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tXCJcbiAgICB9O1xuXG4gICAgb3B0aW9ucy5jbGFzc2VzID0gW1wiaWNvbi1idG5cIl0uY29uY2F0KG9wdGlvbnMuY2xhc3NlcyB8fCBbXSk7XG4gICAgaWYgKG9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgb3B0aW9ucy5jbGFzc2VzLnB1c2goXCJkaXNhYmxlZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgaHRtbCA9IFtcbiAgICAgICAgJzxhIGNsYXNzPVwiJyxcbiAgICAgICAgb3B0aW9ucy5jbGFzc2VzLmpvaW4oXCIgXCIpLFxuICAgICAgICAnXCInLFxuICAgICAgICBvcHRpb25zLnRpdGxlID8gYCB0aXRsZT1cIiR7b3B0aW9ucy50aXRsZX1cImAgOiBcIlwiLFxuICAgICAgICAhb3B0aW9ucy5kaXNhYmxlZCAmJiBvcHRpb25zLnRhcmdldCA/IGAgdGFyZ2V0PVwiJHtvcHRpb25zLnRhcmdldH1cImAgOiBcIlwiLFxuICAgICAgICAnIGhyZWY9XCInLFxuICAgICAgICAhb3B0aW9ucy5kaXNhYmxlZCAmJiBvcHRpb25zLmhyZWYgPyBvcHRpb25zLmhyZWYgOiBcImphdmFzY3JpcHQ6dm9pZCgwKTtcIixcbiAgICAgICAgJ1wiPicsXG4gICAgICAgIC8vIGNvdWxkIGdvIHdpdGggc29tZXRoaW5nIGxlc3Mgc3BlY2lmaWMgaGVyZSAtIGxpa2UgJ2h0bWwnXG4gICAgICAgICc8c3BhbiBjbGFzcz1cImZhICcsXG4gICAgICAgIG9wdGlvbnMuZmFJY29uLFxuICAgICAgICAnXCI+PC9zcGFuPicsXG4gICAgICAgIFwiPC9hPlwiXG4gICAgXS5qb2luKFwiXCIpO1xuICAgIHZhciAkYnV0dG9uID0gJChodG1sKS50b29sdGlwKG9wdGlvbnMudG9vbHRpcENvbmZpZyk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb25zLm9uY2xpY2spKSB7XG4gICAgICAgICRidXR0b24uY2xpY2sob3B0aW9ucy5vbmNsaWNrKTtcbiAgICB9XG4gICAgcmV0dXJuICRidXR0b247XG59O1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBkZWZhdWx0IGZhSWNvbkJ1dHRvbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy91aS9mYS1pY29uLWJ1dHRvbi5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */,
/* 23 */
/*!**********************************!*\
  !*** ./galaxy/scripts/galaxy.js ***!
  \**********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(/*! libs/underscore */ 1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _backbone = __webpack_require__(/*! libs/backbone */ 2);\n\nvar Backbone = _interopRequireWildcard(_backbone);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _userModel = __webpack_require__(/*! mvc/user/user-model */ 24);\n\nvar _userModel2 = _interopRequireDefault(_userModel);\n\nvar _metricsLogger = __webpack_require__(/*! utils/metrics-logger */ 25);\n\nvar _metricsLogger2 = _interopRequireDefault(_metricsLogger);\n\nvar _addLogging = __webpack_require__(/*! utils/add-logging */ 32);\n\nvar _addLogging2 = _interopRequireDefault(_addLogging);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp(options, bootstrapped) {\n    var self = this;\n    return self._init(options || {}, bootstrapped || {});\n}\n\n// add logging shortcuts for this object\n(0, _addLogging2.default)(GalaxyApp, \"GalaxyApp\");\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = \"galaxy:debug\";\n\nvar NAMESPACE_KEY = DEBUGGING_KEY + \":namespaces\";\nvar FLATTEN_LOG_MESSAGES_KEY = DEBUGGING_KEY + \":flatten\";\n\nvar localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n} catch (storageErr) {\n    console.log((0, _localization2.default)(\"localStorage not available for debug flag retrieval\"));\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init(options, bootstrapped) {\n    var self = this;\n    _.extend(self, Backbone.Events);\n    if (localDebugging) {\n        self.logger = console;\n        console.debug(\"debugging galaxy:\", \"options:\", options, \"bootstrapped:\", bootstrapped);\n    }\n\n    self._processOptions(options);\n\n    // add root and url parameters\n    self.root = options.root || \"/\";\n    self.params = options.params || {};\n    self.session_csrf_token = options.session_csrf_token || null;\n\n    self._initConfig(options.config || {});\n    self._patchGalaxy(window.Galaxy);\n\n    self._initLogger(self.options.loggerOptions || {});\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug(\"GalaxyApp.options: \", self.options);\n    self.debug(\"GalaxyApp.config: \", self.config);\n    self.debug(\"GalaxyApp.logger: \", self.logger);\n\n    self._initLocale();\n    self.debug(\"GalaxyApp.localize: \", self.localize);\n\n    self.config = options.config || {};\n    self.debug(\"GalaxyApp.config: \", self.config);\n\n    self._initUser(options.user || {});\n    self.debug(\"GalaxyApp.user: \", self.user);\n\n    self._setUpListeners();\n    self.trigger(\"ready\", self);\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting: true,\n    /** root url of this app */\n    root: \"/\",\n    session_csrf_token: null\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions(options) {\n    var self = this;\n    var defaults = self.defaultOptions;\n\n    self.options = {};\n    for (var k in defaults) {\n        if (defaults.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : defaults[k];\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig(config) {\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if (self.options.patchExisting && patchWith) {\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for (var k in patchWith) {\n            if (patchWith.hasOwnProperty(k)) {\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[k] = patchWith[k];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if (self.config.debug) {\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel = loggerOptions.consoleLevel || _metricsLogger2.default.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage.getItem(NAMESPACE_KEY).split(\",\");\n        } catch (storageErr) {}\n        try {\n            loggerOptions.consoleFlattenMessages = localStorage.getItem(FLATTEN_LOG_MESSAGES_KEY) == \"true\";\n        } catch (storageErr) {}\n        console.log(loggerOptions.consoleFlattenMessages);\n    }\n\n    self.logger = new _metricsLogger2.default.MetricsLogger(loggerOptions);\n    self.emit = {};\n    [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(function (i) {\n        self.emit[i] = function (data) {\n            self.logger.emit(i, arguments[0], Array.prototype.slice.call(arguments, 1));\n        };\n    });\n\n    if (self.config.debug) {\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        _baseMvc2.default.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale(options) {\n    var self = this;\n    self.debug(\"_initLocale:\", options);\n    self.localize = _localization2.default;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser(userJSON) {\n    var self = this;\n    self.debug(\"_initUser:\", userJSON);\n    self.user = new _userModel2.default.User(userJSON);\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $(document).bind(\"ajaxSend\", function (ev, xhr, options) {\n        var data = options.data;\n        try {\n            data = JSON.parse(data);\n        } catch (err) {}\n\n        self.lastAjax = {\n            url: location.href.slice(0, -1) + options.url,\n            data: data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging(setting) {\n    var self = this;\n    try {\n        if (setting === undefined) {\n            return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n        }\n        if (setting) {\n            localStorage.setItem(DEBUGGING_KEY, true);\n            return true;\n        }\n\n        localStorage.removeItem(DEBUGGING_KEY);\n        // also remove all namespaces\n        self.debuggingNamespaces(null);\n    } catch (storageErr) {\n        console.log((0, _localization2.default)(\"localStorage not available for debug flag retrieval\"));\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(namespaces) {\n    var self = this;\n    try {\n        if (namespaces === undefined) {\n            var csv = localStorage.getItem(NAMESPACE_KEY);\n            return typeof csv === \"string\" ? csv.split(\",\") : [];\n        } else if (namespaces === null) {\n            localStorage.removeItem(NAMESPACE_KEY);\n        } else {\n            localStorage.setItem(NAMESPACE_KEY, namespaces);\n        }\n        var newSettings = self.debuggingNamespaces();\n        if (self.logger) {\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch (storageErr) {\n        console.log((0, _localization2.default)(\"localStorage not available for debug namespace retrieval\"));\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString() {\n    var userEmail = this.user ? this.user.get(\"email\") || \"(anonymous)\" : \"uninitialized\";\n    return \"GalaxyApp(\" + userEmail + \")\";\n};\n\n// ============================================================================\nexports.default = {\n    GalaxyApp: GalaxyApp\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */,
/* 25 */
/*!************************************************!*\
  !*** ./galaxy/scripts/utils/metrics-logger.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global window, jQuery, console */\n/*=============================================================================\nTODO:\n    while anon: logs saved to 'logs-null' - this will never post\n        unless we manually do so at/after login\n        OR prepend when userId and localStorage has 'logs-null'\n    wire up _delayPost and test\n\n=============================================================================*/\n/** @class MetricsLogger\n *\n *  Object to cache, output, and post log/metric messages to the server.\n *  Meant to be attached to the Galaxy object.\n *\n *  Log from objects by either attaching logger directly:\n *      panel.logger.metric( 'user dataset deletion', panel.user.id, hda.toJSON() )\n *  or using the LoggableMixin or addLogging function:\n *      MyBackboneModel.extend( LoggableMixin ).extend({ ... })\n *      addLogging( MyBackboneModel, 'my-backbone-model' )\n *\n *  Log from templates by calling directly from Galaxy object:\n *      Galaxy.logger.metric( 'template loaded', { ownedByUser : true });\n *\n *  If you attempt to log an un-serializable object (circular reference, window, etc.),\n *  that entry will not be cached (or sent). If you set consoleLevel and consoleLogger\n *  appropriately, a warning will be shown when this happens:\n *      > panel.metric( 'something weird with window', { window : window })\n *      !'Metrics logger could not stringify logArguments: ...'\n */\nfunction MetricsLogger(options) {\n    options = options || {};\n    var self = this;\n\n    ///** get the current user's id from bootstrapped data or options */\n    self.userId = window.bootstrapped && window.bootstrapped.user ? window.bootstrapped.user.id : null;\n    self.userId = self.userId || options.userId || null;\n\n    /** the (optional) console to emit logs to */\n    self.consoleLogger = options.consoleLogger || null;\n\n    self._init(options);\n    return self;\n}\n\n//----------------------------------------------------------------------------- defaults and constants\n// see: python std lib, logging\nMetricsLogger.ALL = 0;\nMetricsLogger.LOG = 0;\nMetricsLogger.DEBUG = 10;\nMetricsLogger.INFO = 20;\nMetricsLogger.WARN = 30;\nMetricsLogger.ERROR = 40;\n// metrics levels here?\n//MetricsLogger.MinorEvent  = 45;\n//MetricsLogger.MajorEvent  = 50;\nMetricsLogger.METRIC = 50;\nMetricsLogger.NONE = 100;\n\n/** default options - override these through the constructor */\nMetricsLogger.defaultOptions = {\n    /** if an incoming message has a level >= this, it will be cached - can also be a string (e.g. 'debug') */\n    logLevel: MetricsLogger.NONE,\n    /** if an incoming message has a level >= this, it will be output to the console */\n    consoleLevel: MetricsLogger.NONE,\n    /** the default 'namespace' or label associated with an incoming message (if none is passed) */\n    defaultNamespace: \"Galaxy\",\n    /** the namespaces output to the console (all namespaces will be output if this is falsy)\n     *  note: applies only to the console (not the event/metrics log/cache)\n     */\n    consoleNamespaceWhitelist: null,\n    /** Force all messages into simple strings. */\n    consoleFlattenMessages: false,\n    /** the prefix attached to client-side logs to distinguish them in the metrics db */\n    clientPrefix: \"client.\",\n\n    /** the maximum number of messages the cache should hold; if exceeded older messages are removed first */\n    maxCacheSize: 3000,\n    /** the number of messages accumulate before posting to the server; should be <= maxCacheSize */\n    postSize: 1000,\n    /** T/F whether to add a timestamp to incoming cached messages */\n    addTime: true,\n    /** string to prefix to userid for cache web storage */\n    cacheKeyPrefix: \"logs-\",\n\n    /** the relative url to post messages to */\n    postUrl: \"/api/metrics\",\n    /** delay before trying post again after two failures */\n    delayPostInMs: 1000 * 60 * 10,\n\n    /** an (optional) function that should return an object; used to send additional data with the metrics */\n    getPingData: undefined,\n    /** an (optional) function that will handle the servers response after successfully posting messages */\n    onServerResponse: undefined\n};\n\n//----------------------------------------------------------------------------- set up\n/** initialize the logger with options, set up instance vars and cache, and add onpageunload to window */\nMetricsLogger.prototype._init = function _init(options) {\n    var self = this;\n    self.options = {};\n    for (var k in MetricsLogger.defaultOptions) {\n        if (MetricsLogger.defaultOptions.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : MetricsLogger.defaultOptions[k];\n        }\n    }\n    self.options.logLevel = self._parseLevel(self.options.logLevel);\n    self.options.consoleLevel = self._parseLevel(self.options.consoleLevel);\n    //self._emitToConsole( 'debug', 'MetricsLogger', 'MetricsLogger.options:', self.options );\n\n    /** is the logger currently sending? */\n    self._sending = false;\n    /** the setTimeout id if the logger POST has failed more than once */\n    self._waiting = null;\n    /** the current number of entries to send in a POST */\n    self._postSize = self.options.postSize;\n\n    self._initCache();\n\n    return self;\n};\n\n/** initialize the cache */\nMetricsLogger.prototype._initCache = function _initCache() {\n    try {\n        this.cache = new LoggingCache({\n            maxSize: this.options.maxCacheSize,\n            key: this.options.cacheKeyPrefix + this.userId\n        });\n    } catch (err) {\n        this._emitToConsole(\"warn\", \"MetricsLogger\", [\"Could not intitialize logging cache:\", err]);\n        this.options.logLevel = MetricsLogger.NONE;\n    }\n};\n\n/** return the numeric log level if level in 'none, debug, log, info, warn, error' */\nMetricsLogger.prototype._parseLevel = function _parseLevel(level) {\n    var type = typeof level === \"undefined\" ? \"undefined\" : _typeof(level);\n    if (type === \"number\") {\n        return level;\n    }\n    if (type === \"string\") {\n        var upper = level.toUpperCase();\n        if (MetricsLogger.hasOwnProperty(upper)) {\n            return MetricsLogger[upper];\n        }\n    }\n    throw new Error(\"Unknown log level: \" + level);\n};\n\n//----------------------------------------------------------------------------- main entry point\n/** record a log/message's arguments to the cache and/or the console based on level and namespace */\nMetricsLogger.prototype.emit = function emit(level, namespace, logArguments) {\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ 'emit:', level, namespace, logArguments ]);\n    var self = this;\n    namespace = namespace || self.options.defaultNamespace;\n    if (!level || !logArguments) {\n        return self;\n    }\n    // add to cache if proper level\n    //TODO: respect do not track?\n    //if( !navigator.doNotTrack && level >= self.options.logLevel ){\n    level = self._parseLevel(level);\n    if (level >= self.options.logLevel) {\n        self._addToCache(level, namespace, logArguments);\n    }\n    // also emit to consoleLogger if proper level for that\n    if (self.consoleLogger && level >= self.options.consoleLevel) {\n        self._emitToConsole(level, namespace, logArguments);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- cache\n/** add a message to the cache and if messages.length is high enough post them to the server */\nMetricsLogger.prototype._addToCache = function _addToCache(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\"_addToCache:\", arguments, this.options.addTime, this.cache.length()]);\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ '\\t logArguments:', logArguments ]);\n    var self = this;\n    // try add to the cache and if we've got _postSize number of entries, attempt to post them to the server\n    try {\n        var newLength = self.cache.add(self._buildEntry(level, namespace, logArguments));\n        if (newLength >= self._postSize) {\n            self._postCache();\n        }\n        // discard entry if an error occurs, but warn if level set to do so\n    } catch (err) {\n        self._emitToConsole(\"warn\", \"MetricsLogger\", [\"Metrics logger could not stringify logArguments:\", namespace, logArguments]);\n        self._emitToConsole(\"error\", \"MetricsLogger\", [err]);\n    }\n    return self;\n};\n\n/** build a log cache entry object from the given level, namespace, and arguments (optionally adding timestamp */\nMetricsLogger.prototype._buildEntry = function _buildEntry(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\"_buildEntry:\", arguments]);\n    var entry = {\n        level: level,\n        namespace: this.options.clientPrefix + namespace,\n        args: logArguments\n    };\n    if (this.options.addTime) {\n        entry.time = new Date().toISOString();\n    }\n    return entry;\n};\n\n/** post _postSize messages from the cache to the server, removing them if successful\n *      if the post fails, wait until maxCacheSize is accumulated instead and try again then\n *      in addition to the messages from the cache ('metrics'), any info from getPingData (if set) will be sent\n *      onServerResponse will be called (if set) with any response from the server\n */\nMetricsLogger.prototype._postCache = function _postCache(options) {\n    options = options || {};\n    this._emitToConsole(\"info\", \"MetricsLogger\", [\"_postCache\", options, this._postSize]);\n\n    // short circuit if we're already sending\n    if (!this.options.postUrl || this._sending) {\n        return jQuery.when({});\n    }\n\n    var self = this;\n    var postSize = options.count || self._postSize;\n\n    var // do not splice - remove after *successful* post\n    entries = self.cache.get(postSize);\n\n    var entriesLength = entries.length;\n\n    var // use the optional getPingData to add any extra info we may want to send\n    postData = typeof self.options.getPingData === \"function\" ? self.options.getPingData() : {};\n\n    //console.debug( postSize, entriesLength );\n\n    // add the metrics and send\n    postData.metrics = JSON.stringify(entries);\n    //console.debug( postData.metrics );\n    self._sending = true;\n    return jQuery.post(self.options.postUrl, postData).always(function () {\n        self._sending = false;\n    }).fail(function (xhr, status, message) {\n        // if we failed the previous time, set the next post target to the max num of entries\n        self._postSize = self.options.maxCacheSize;\n        //TODO:??\n        // log this failure to explain any gap in metrics\n        self.emit(\"error\", \"MetricsLogger\", [\"_postCache error:\", xhr.readyState, xhr.status, xhr.responseJSON || xhr.responseText]);\n        //TODO: still doesn't solve the problem that when cache == max, post will be tried on every emit\n        //TODO: see _delayPost\n    }).done(function (response) {\n        if (typeof self.options.onServerResponse === \"function\") {\n            self.options.onServerResponse(response);\n        }\n        // only remove if post successful\n        self.cache.remove(entriesLength);\n        //console.debug( 'removed entries:', entriesLength, 'size now:', self.cache.length() );\n        // if we succeeded, reset the post target to the normal num of entries\n        self._postSize = self.options.postSize;\n    });\n    // return the xhr promise\n};\n\n/** set _waiting to true and, after delayPostInMs, set it back to false */\nMetricsLogger.prototype._delayPost = function _delayPost() {\n    //TODO: this won't work between pages\n    var self = this;\n    self._waiting = setTimeout(function () {\n        self._waiting = null;\n    }, self.options.delayPostInMs);\n};\n\nfunction usefulToString(arg) {\n    var asStr = String(arg);\n    if (asStr == \"[object Object]\") {\n        asStr = JSON.stringify(arg);\n    }\n    return asStr;\n}\n\n//----------------------------------------------------------------------------- console\n/** output message to console based on level and consoleLogger type */\nMetricsLogger.prototype._emitToConsole = function _emitToConsole(level, namespace, logArguments) {\n    //console.debug( '_emitToConsole:', level, namespace, logArguments );\n    var self = this;\n\n    var whitelist = self.options.consoleNamespaceWhitelist;\n    if (!self.consoleLogger) {\n        return self;\n    }\n    // if a whitelist for namespaces is set, bail if this namespace is not in the list\n    if (whitelist && whitelist.indexOf(namespace) === -1) {\n        return self;\n    }\n\n    var args = Array.prototype.slice.call(logArguments, 0);\n    args.unshift(namespace);\n    if (self.options.consoleFlattenMessages) {\n        args = [args.map(usefulToString).join(\" \")];\n    }\n    //TODO: script location and/or source maps?\n    //TODO: branch on navigator.userAgent == AIIEEE - it only has log\n    if (level >= MetricsLogger.METRIC && typeof self.consoleLogger.info === \"function\") {\n        return self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.ERROR && typeof self.consoleLogger.error === \"function\") {\n        return self.consoleLogger.error.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.WARN && typeof self.consoleLogger.warn === \"function\") {\n        self.consoleLogger.warn.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.INFO && typeof self.consoleLogger.info === \"function\") {\n        self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.DEBUG && typeof self.consoleLogger.debug === \"function\") {\n        self.consoleLogger.debug.apply(self.consoleLogger, args);\n    } else if (typeof self.consoleLogger.log === \"function\") {\n        self.consoleLogger.log.apply(self.consoleLogger, args);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- shortcuts\n// generic functions when logging from non-namespaced object (e.g. templates)\n/** log to default namespace */\nMetricsLogger.prototype.log = function log() {\n    this.emit(1, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** debug to default namespace */\nMetricsLogger.prototype.debug = function debug() {\n    this.emit(MetricsLogger.DEBUG, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** info to default namespace */\nMetricsLogger.prototype.info = function info() {\n    this.emit(MetricsLogger.INFO, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** warn to default namespace */\nMetricsLogger.prototype.warn = function warn() {\n    this.emit(MetricsLogger.WARN, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** error to default namespace */\nMetricsLogger.prototype.error = function error() {\n    this.emit(MetricsLogger.ERROR, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** metric to default namespace */\nMetricsLogger.prototype.metric = function metric() {\n    this.emit(MetricsLogger.METRIC, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/* ============================================================================\nTODO:\n    need a performance pass - the JSON un/parsing is a bit much\n\n============================================================================ */\n/** @class LoggingCache\n *  Simple implementation of cache wrapping an array.\n *\n *  Formats an entry before it's cached and only keeps options.maxSize number\n *  of entries. Older entries are deleted first.\n */\nfunction LoggingCache(options) {\n    var self = this;\n    return self._init(options || {});\n}\n\n/** default options */\nLoggingCache.defaultOptions = {\n    /** maximum number of entries to keep before discarding oldest */\n    maxSize: 5000\n};\n\n/** initialize with options */\nLoggingCache.prototype._init = function _init(options) {\n    if (!this._hasStorage()) {\n        //TODO: fall back to jstorage\n        throw new Error(\"LoggingCache needs localStorage\");\n    }\n    if (!options.key) {\n        throw new Error(\"LoggingCache needs key for localStorage\");\n    }\n    this.key = options.key;\n    this._initStorage();\n\n    this.maxSize = options.maxSize || LoggingCache.defaultOptions.maxSize;\n    return this;\n};\n\n/** tests for localStorage fns */\nLoggingCache.prototype._hasStorage = function _hasStorage() {\n    //TODO: modernizr\n    var test = \"test\";\n    try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\n/** if no localStorage set for key, initialize to empty array */\nLoggingCache.prototype._initStorage = function _initStorage() {\n    if (localStorage.getItem(this.key) === null) {\n        return this.empty();\n    }\n    return this;\n};\n\n/** add an entry to the cache, removing the oldest beforehand if size >= maxSize */\nLoggingCache.prototype.add = function add(entry) {\n    var self = this;\n    var _cache = self._fetchAndParse();\n    var overage = _cache.length + 1 - self.maxSize;\n    if (overage > 0) {\n        _cache.splice(0, overage);\n    }\n    _cache.push(entry);\n    self._unparseAndStore(_cache);\n    return _cache.length;\n};\n\n/** get the entries from localStorage and parse them */\nLoggingCache.prototype._fetchAndParse = function _fetchAndParse() {\n    var self = this;\n    return JSON.parse(localStorage.getItem(self.key));\n};\n\n/** stringify the entries and put them in localStorage */\nLoggingCache.prototype._unparseAndStore = function _unparseAndStore(entries) {\n    var self = this;\n    return localStorage.setItem(self.key, JSON.stringify(entries));\n};\n\n///** process the entry before caching */\n//LoggingCache.prototype._preprocessEntry = function _preprocessEntry( entry ){\n//    return JSON.stringify( entry );\n//};\n\n/** return the length --- oh, getters where are you? */\nLoggingCache.prototype.length = function length() {\n    return this._fetchAndParse().length;\n};\n\n/** get count number of entries starting with the oldest */\nLoggingCache.prototype.get = function get(count) {\n    return this._fetchAndParse().slice(0, count);\n};\n\n/** remove count number of entries starting with the oldest */\nLoggingCache.prototype.remove = function remove(count) {\n    var _cache = this._fetchAndParse();\n    var removed = _cache.splice(0, count);\n    this._unparseAndStore(_cache);\n    return removed;\n};\n\n/** empty/clear the entire cache */\nLoggingCache.prototype.empty = function empty() {\n    localStorage.setItem(this.key, \"[]\");\n    return this;\n};\n\n/** stringify count number of entries (but do not remove) */\nLoggingCache.prototype.stringify = function stringify(count) {\n    return JSON.stringify(this.get(count));\n};\n\n/** outputs entire cache to console */\nLoggingCache.prototype.print = function print() {\n    // popup? (really, carl? a popup?) - easier to copy/paste\n    console.log(JSON.stringify(this._fetchAndParse(), null, \"  \"));\n};\n\n//=============================================================================\nexports.default = {\n    MetricsLogger: MetricsLogger,\n    LoggingCache: LoggingCache\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/*!***************************************!*\
  !*** ./galaxy/scripts/layout/page.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _masthead = __webpack_require__(/*! layout/masthead */ 33);\n\nvar _masthead2 = _interopRequireDefault(_masthead);\n\nvar _panel = __webpack_require__(/*! layout/panel */ 22);\n\nvar _panel2 = _interopRequireDefault(_panel);\n\nvar _uiModal = __webpack_require__(/*! mvc/ui/ui-modal */ 8);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    el: \"body\",\n    className: \"full-content\",\n    _panelids: [\"left\", \"right\"],\n\n    initialize: function initialize(options) {\n        var self = this;\n        this.config = _.defaults(options.config || {}, {\n            message_box_visible: false,\n            message_box_content: \"\",\n            message_box_class: \"info\",\n            show_inactivity_warning: false,\n            inactivity_box_content: \"\"\n        });\n\n        // attach global objects, build mastheads\n        Galaxy.modal = this.modal = new _uiModal2.default.View();\n        Galaxy.display = this.display = function (view) {\n            if (view.title) {\n                _utils2.default.setWindowTitle(view.title);\n                view.allow_title_display = false;\n            } else {\n                _utils2.default.setWindowTitle();\n                view.allow_title_display = true;\n            }\n            self.center.display(view);\n        };\n        Galaxy.router = this.router = options.Router && new options.Router(self, options);\n        this.masthead = new _masthead2.default.View(this.config);\n        this.center = new _panel2.default.CenterPanel();\n\n        // build page template\n        this.$el.attr(\"scroll\", \"no\");\n        this.$el.html(this._template());\n        this.$(\"#masthead\").replaceWith(this.masthead.$el);\n        this.$(\"#center\").append(this.center.$el);\n        this.$el.append(this.masthead.frame.$el);\n        this.$el.append(this.modal.$el);\n        this.$messagebox = this.$(\"#messagebox\");\n        this.$inactivebox = this.$(\"#inactivebox\");\n\n        // build panels\n        this.panels = {};\n        _.each(this._panelids, function (panel_id) {\n            var panel_class_name = panel_id.charAt(0).toUpperCase() + panel_id.slice(1);\n            var panel_class = options[panel_class_name];\n            if (panel_class) {\n                var panel_instance = new panel_class(self, options);\n                self[panel_instance.toString()] = panel_instance;\n                self.panels[panel_id] = new _panel2.default.SidePanel({\n                    id: panel_id,\n                    el: self.$(\"#\" + panel_id),\n                    view: panel_instance\n                });\n            }\n        });\n        this.render();\n\n        // start the router\n        this.router && Backbone.history.start({\n            root: Galaxy.root,\n            pushState: true\n        });\n    },\n\n    render: function render() {\n        // TODO: Remove this line after select2 update\n        $(\".select2-hidden-accessible\").remove();\n        this.masthead.render();\n        this.renderMessageBox();\n        this.renderInactivityBox();\n        this.renderPanels();\n        this._checkCommunicationServerOnline();\n        return this;\n    },\n\n    /** Render message box */\n    renderMessageBox: function renderMessageBox() {\n        if (this.config.message_box_visible) {\n            var content = this.config.message_box_content || \"\";\n            var level = this.config.message_box_class || \"info\";\n            this.$el.addClass(\"has-message-box\");\n            this.$messagebox.attr(\"class\", \"panel-\" + level + \"-message\").html(content).toggle(!!content).show();\n        } else {\n            this.$el.removeClass(\"has-message-box\");\n            this.$messagebox.hide();\n        }\n        return this;\n    },\n\n    /** Render inactivity warning */\n    renderInactivityBox: function renderInactivityBox() {\n        if (this.config.show_inactivity_warning) {\n            var content = this.config.inactivity_box_content || \"\";\n            var verificationLink = $(\"<a/>\").attr(\"href\", Galaxy.root + \"user/resend_verification\").text(\"Resend verification\");\n            this.$el.addClass(\"has-inactivity-box\");\n            this.$inactivebox.html(content + \" \").append(verificationLink).toggle(!!content).show();\n        } else {\n            this.$el.removeClass(\"has-inactivity-box\");\n            this.$inactivebox.hide();\n        }\n        return this;\n    },\n\n    /** Render panels */\n    renderPanels: function renderPanels() {\n        var self = this;\n        _.each(this._panelids, function (panel_id) {\n            var panel = self.panels[panel_id];\n            if (panel) {\n                panel.render();\n            } else {\n                self.$(\"#center\").css(panel_id, 0);\n                self.$(\"#\" + panel_id).hide();\n            }\n        });\n        return this;\n    },\n\n    /** body template */\n    _template: function _template() {\n        return ['<div id=\"everything\">', '<div id=\"background\"/>', '<div id=\"masthead\"/>', '<div id=\"messagebox\"/>', '<div id=\"inactivebox\" class=\"panel-warning-message\" />', '<div id=\"left\" />', '<div id=\"center\" />', '<div id=\"right\" />', \"</div>\", '<div id=\"dd-helper\" />'].join(\"\");\n    },\n\n    toString: function toString() {\n        return \"PageLayoutView\";\n    },\n\n    /** Check if the communication server is online and show the icon otherwise hide the icon */\n    _checkCommunicationServerOnline: function _checkCommunicationServerOnline() {\n        var host = window.Galaxy.config.communication_server_host;\n        var port = window.Galaxy.config.communication_server_port;\n        var preferences = window.Galaxy.user.attributes.preferences;\n        var $chat_icon_element = $(\"#show-chat-online\");\n        /** Check if the user has deactivated the communication in it's personal settings */\n        if (preferences && [\"1\", \"true\"].indexOf(preferences.communication_server) != -1) {\n            // See if the configured communication server is available\n            $.ajax({\n                url: host + \":\" + port\n            }).success(function (data) {\n                // enable communication only when a user is logged in\n                if (window.Galaxy.user.id !== null) {\n                    if ($chat_icon_element.css(\"visibility\") === \"hidden\") {\n                        $chat_icon_element.css(\"visibility\", \"visible\");\n                    }\n                }\n            }).error(function (data) {\n                // hide the communication icon if the communication server is not available\n                $chat_icon_element.css(\"visibility\", \"hidden\");\n            });\n        } else {\n            $chat_icon_element.css(\"visibility\", \"hidden\");\n        }\n    }\n});\n\nexports.default = { View: View };\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */,
/* 28 */,
/* 29 */
/*!***************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/upload-model.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar Model = Backbone.Model.extend({\n    defaults: {\n        extension: \"auto\",\n        genome: \"?\",\n        url_paste: \"\",\n        status: \"init\",\n        info: null,\n        file_name: \"\",\n        file_mode: \"\",\n        file_size: 0,\n        file_type: null,\n        file_path: \"\",\n        file_data: null,\n        percentage: 0,\n        space_to_tab: false,\n        to_posix_lines: true,\n        enabled: true\n    },\n    reset: function reset(attr) {\n        this.clear().set(this.defaults).set(attr);\n    }\n});\nvar Collection = Backbone.Collection.extend({ model: Model });\nexports.default = { Model: Model, Collection: Collection };\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL3VwbG9hZC91cGxvYWQtbW9kZWwuanM/YWE3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV4dGVuc2lvbjogXCJhdXRvXCIsXG4gICAgICAgIGdlbm9tZTogXCI/XCIsXG4gICAgICAgIHVybF9wYXN0ZTogXCJcIixcbiAgICAgICAgc3RhdHVzOiBcImluaXRcIixcbiAgICAgICAgaW5mbzogbnVsbCxcbiAgICAgICAgZmlsZV9uYW1lOiBcIlwiLFxuICAgICAgICBmaWxlX21vZGU6IFwiXCIsXG4gICAgICAgIGZpbGVfc2l6ZTogMCxcbiAgICAgICAgZmlsZV90eXBlOiBudWxsLFxuICAgICAgICBmaWxlX3BhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVfZGF0YTogbnVsbCxcbiAgICAgICAgcGVyY2VudGFnZTogMCxcbiAgICAgICAgc3BhY2VfdG9fdGFiOiBmYWxzZSxcbiAgICAgICAgdG9fcG9zaXhfbGluZXM6IHRydWUsXG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKVxuICAgICAgICAgICAgLnNldCh0aGlzLmRlZmF1bHRzKVxuICAgICAgICAgICAgLnNldChhdHRyKTtcbiAgICB9XG59KTtcbnZhciBDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoeyBtb2RlbDogTW9kZWwgfSk7XG5leHBvcnQgZGVmYXVsdCB7IE1vZGVsOiBNb2RlbCwgQ29sbGVjdGlvbjogQ29sbGVjdGlvbiB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy91cGxvYWQvdXBsb2FkLW1vZGVsLmpzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFmQTtBQWlCQTtBQUNBO0FBR0E7QUF0QkE7QUF3QkE7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */
/*!***********************************!*\
  !*** ./galaxy/scripts/mvc/tag.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend(_baseMvc2.default.HiddenUntilActivatedViewMixin).extend({\n    tagName: \"div\",\n    className: \"tags-display\",\n    select_width: \"100%\",\n    events: {},\n\n    /** Set up listeners, parse options */\n    initialize: function initialize(options) {\n        //console.debug( this, options );\n        // only listen to the model only for changes to tags - re-render\n        this.show_editor = false;\n        if (options.usePrompt === false) {\n            this.label = \"\";\n        } else {\n            this.label = \"<label class=\\\"prompt\\\">\" + (0, _localization2.default)(\"Tags\") + \"</label>\";\n        }\n        this.workflow_mode = options.workflow_mode || false;\n        if (this.workflow_mode) {\n            this.events.click = \"showEditor\";\n            this.events.keydown = \"keydownHandler\";\n        }\n        this.hiddenUntilActivated(options.$activator, options);\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render: function render() {\n        var self = this;\n        if (this.workflow_mode) {\n            this.$el.html(this._workflowTemplate());\n        } else {\n            this.$el.html(this._defaultTemplate());\n        }\n        this.$input().select2({\n            placeholder: \"Add tags\",\n            width: this.workflow_mode ? this.width : this.select_width,\n            tags: function tags() {\n                // initialize possible tags in the dropdown based on all the tags the user has used so far\n                return self._getTagsUsed();\n            }\n        });\n\n        this._setUpBehaviors();\n        return this;\n    },\n\n    _hashToName: function _hashToName(tag) {\n        if (tag.startsWith(\"#\")) {\n            return \"name:\" + tag.slice(1);\n        }\n        return tag;\n    },\n\n    _nameToHash: function _nameToHash(tag) {\n        if (tag.startsWith(\"name:\")) {\n            tag = \"#\" + tag.slice(5);\n        }\n        return tag;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _defaultTemplate: function _defaultTemplate() {\n        return [this.label, this._renderEditor()].join(\"\");\n    },\n\n    _workflowTemplate: function _workflowTemplate() {\n        // Shows labels by default, event handler controls whether we show tags or editor\n        return [this.show_editor ? this._renderEditor() : this._renderTags()].join(\" \");\n    },\n\n    keydownHandler: function keydownHandler(e) {\n        switch (e.which) {\n            // esc\n            case 27:\n                // hide the tag editor when pressing escape\n                this.hideEditor();\n                break;\n        }\n    },\n\n    showEditor: function showEditor() {\n        this.show_editor = true;\n        this.render();\n    },\n\n    hideEditor: function hideEditor() {\n        this.show_editor = false;\n        this.render();\n    },\n\n    _renderEditor: function _renderEditor() {\n        // set up initial tags by adding as CSV to input vals (necc. to init select2)\n        return \"<input class=\\\"tags-input\\\" value=\\\"\" + this.tagsToCSV() + \"\\\"/>\";\n    },\n\n    _renderTags: function _renderTags() {\n        var tags = this.model.get(\"tags\");\n        var addButton = Galaxy.root + \"static/images/fugue/tag--plus.png\";\n        var renderedArray = [];\n        _.each(tags, function (tag) {\n            tag = tag.indexOf(\"name:\") == 0 ? tag.slice(5) : tag;\n            var renderString = \"<span class=\\\"label label-info\\\">\" + tag + \"</span>\";\n            renderedArray.push(renderString);\n        });\n        if (renderedArray.length === 0) {\n            // If there are no tags to render we just show the add-tag-button\n            renderedArray.push(\"<img src=\" + addButton + \" class=\\\"add-tag-button\\\" title=\\\"Add tags\\\"/>\");\n        }\n        return renderedArray.join(\" \");\n    },\n\n    /** @returns {String} the sorted, comma-separated tags from the model */\n    tagsToCSV: function tagsToCSV() {\n        var self = this;\n        var tagsArray = this.model.get(\"tags\");\n        if (!_.isArray(tagsArray) || _.isEmpty(tagsArray)) {\n            return \"\";\n        }\n        return tagsArray.map(function (tag) {\n            return _.escape(self._nameToHash(tag));\n        }).sort().join(\",\");\n    },\n\n    /** @returns {jQuery} the input for this view */\n    $input: function $input() {\n        return this.$el.find(\"input.tags-input\");\n    },\n\n    /** @returns {String[]} all tags used by the current user */\n    _getTagsUsed: function _getTagsUsed() {\n        //TODO: global\n        var self = this;\n        return _.map(Galaxy.user.get(\"tags_used\"), self._nameToHash);\n    },\n\n    /** set up any event listeners on the view's DOM (mostly handled by select2) */\n    _setUpBehaviors: function _setUpBehaviors() {\n        var self = this;\n        this.$input().on(\"change\", function (event) {\n            // Modify any 'hashtag' 'nametags'\n            event.val = _.map(event.val, self._hashToName);\n            // save the model's tags in either remove or added event\n            self.model.save({ tags: event.val });\n            // if it's new, add the tag to the users tags\n            if (event.added) {\n                //??: solve weird behavior in FF on test.galaxyproject.org where\n                //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                self._addNewTagToTagsUsed(\"\" + event.added.text);\n            }\n        });\n    },\n\n    /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n    _addNewTagToTagsUsed: function _addNewTagToTagsUsed(newTag) {\n        //TODO: global\n        var tagsUsed = Galaxy.user.get(\"tags_used\");\n        if (!_.contains(tagsUsed, newTag)) {\n            tagsUsed.push(newTag);\n            tagsUsed.sort();\n            Galaxy.user.set(\"tags_used\", tagsUsed);\n        }\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove: function remove() {\n        this.$input.off();\n        this.stopListening(this.model);\n        Backbone.View.prototype.remove.call(this);\n    },\n\n    /** string rep */\n    toString: function toString() {\n        return [\"TagsEditor(\", \"\" + this.model, \")\"].join(\"\");\n    }\n});\n\nexports.default = {\n    TagsEditor: TagsEditor\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */
/*!*****************************************!*\
  !*** ./galaxy/scripts/layout/router.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _jquery = __webpack_require__(/*! jquery */ 0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _queryStringParsing = __webpack_require__(/*! utils/query-string-parsing */ 14);\n\nvar _queryStringParsing2 = _interopRequireDefault(_queryStringParsing);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar $ = _jquery2.default;\n\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function initialize(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function push(url, data) {\n        data = data || {};\n        data.__identifer = Math.random().toString(36).substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            url += $.param(data, true);\n        }\n        Galaxy.params = data;\n        this.navigate(url, { trigger: true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function execute(callback, args, name) {\n        Galaxy.debug(\"router execute:\", callback, args, name);\n        var queryObj = _queryStringParsing2.default.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function authenticate(args, name) {\n        return true;\n    },\n\n    access_denied: function access_denied() {\n        this.page.display(new _uiMisc2.default.Message({\n            status: \"danger\",\n            message: \"You must be logged in with proper credentials to make this request.\",\n            persistent: true\n        }));\n    }\n});\n\nexports.default = Router;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbGF5b3V0L3JvdXRlci5qcz8yNmNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqUXVlcnkgZnJvbSBcImpxdWVyeVwiO1xudmFyICQgPSBqUXVlcnk7XG5pbXBvcnQgUVVFUllfU1RSSU5HIGZyb20gXCJ1dGlscy9xdWVyeS1zdHJpbmctcGFyc2luZ1wiO1xuaW1wb3J0IFVpIGZyb20gXCJtdmMvdWkvdWktbWlzY1wiO1xuXG52YXIgUm91dGVyID0gQmFja2JvbmUuUm91dGVyLmV4dGVuZCh7XG4gICAgLy8gVE9ETzogbm90IG1hbnkgY2xpZW50IHJvdXRlcyBhdCB0aGlzIHBvaW50IC0gZmlsbCBhbmQgcmVtb3ZlIGZyb20gc2VydmVyLlxuICAgIC8vIHNpbmNlIHdlJ3JlIGF0IHJvb3QgaGVyZSwgdGhpcyBtYXkgYmUgdGhlIGxhc3QgdG8gYmUgcm91dGVkIGVudGlyZWx5IG9uIHRoZSBjbGllbnQuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGFnZSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnBhZ2UgPSBwYWdlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG5cbiAgICAvKiogaGVscGVyIHRvIHB1c2ggYSBuZXcgbmF2aWdhdGlvbiBzdGF0ZSAqL1xuICAgIHB1c2g6IGZ1bmN0aW9uKHVybCwgZGF0YSkge1xuICAgICAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICAgICAgZGF0YS5fX2lkZW50aWZlciA9IE1hdGgucmFuZG9tKClcbiAgICAgICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgICAgIC5zdWJzdHIoMik7XG4gICAgICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICB1cmwgKz0gdXJsLmluZGV4T2YoXCI/XCIpID09IC0xID8gXCI/XCIgOiBcIiZcIjtcbiAgICAgICAgICAgIHVybCArPSAkLnBhcmFtKGRhdGEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIEdhbGF4eS5wYXJhbXMgPSBkYXRhO1xuICAgICAgICB0aGlzLm5hdmlnYXRlKHVybCwgeyB0cmlnZ2VyOiB0cnVlIH0pO1xuICAgIH0sXG5cbiAgICAvKiogb3ZlcnJpZGUgdG8gcGFyc2UgcXVlcnkgc3RyaW5nIGludG8gb2JqIGFuZCBzZW5kIHRvIGVhY2ggcm91dGUgKi9cbiAgICBleGVjdXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYXJncywgbmFtZSkge1xuICAgICAgICBHYWxheHkuZGVidWcoXCJyb3V0ZXIgZXhlY3V0ZTpcIiwgY2FsbGJhY2ssIGFyZ3MsIG5hbWUpO1xuICAgICAgICB2YXIgcXVlcnlPYmogPSBRVUVSWV9TVFJJTkcucGFyc2UoYXJncy5wb3AoKSk7XG4gICAgICAgIGFyZ3MucHVzaChxdWVyeU9iaik7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXV0aGVudGljYXRlKGFyZ3MsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzX2RlbmllZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGF1dGhlbnRpY2F0ZTogZnVuY3Rpb24oYXJncywgbmFtZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgYWNjZXNzX2RlbmllZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucGFnZS5kaXNwbGF5KFxuICAgICAgICAgICAgbmV3IFVpLk1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHN0YXR1czogXCJkYW5nZXJcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIllvdSBtdXN0IGJlIGxvZ2dlZCBpbiB3aXRoIHByb3BlciBjcmVkZW50aWFscyB0byBtYWtlIHRoaXMgcmVxdWVzdC5cIixcbiAgICAgICAgICAgICAgICBwZXJzaXN0ZW50OiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbGF5b3V0L3JvdXRlci5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFIQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFoREE7QUFDQTtBQWtEQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/*!******************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/upload-settings.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    options: {\n        class_check: \"fa-check-square-o\",\n        class_uncheck: \"fa-square-o\",\n        parameters: [{\n            id: \"space_to_tab\",\n            title: \"Convert spaces to tabs\"\n        }, {\n            id: \"to_posix_lines\",\n            title: \"Use POSIX standard\"\n        }]\n    },\n\n    initialize: function initialize(options) {\n        var self = this;\n        this.model = options.model;\n        this.setElement($(\"<div/>\").addClass(\"upload-settings\"));\n        this.$el.append($(\"<div/>\").addClass(\"upload-settings-cover\"));\n        this.$el.append($(\"<table/>\").addClass(\"upload-settings-table ui-table-striped\").append(\"<tbody/>\"));\n        this.$cover = this.$(\".upload-settings-cover\");\n        this.$table = this.$(\".upload-settings-table > tbody\");\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.model.trigger(\"change\");\n    },\n\n    render: function render() {\n        var self = this;\n        this.$table.empty();\n        _.each(this.options.parameters, function (parameter) {\n            var $checkbox = $(\"<div/>\").addClass(\"upload-\" + parameter.id + \" upload-icon-button fa\").addClass(self.model.get(parameter.id) && self.options.class_check || self.options.class_uncheck).on(\"click\", function () {\n                self.model.get(\"enabled\") && self.model.set(parameter.id, !self.model.get(parameter.id));\n            });\n            self.$table.append($(\"<tr/>\").append($(\"<td/>\").append($checkbox)).append($(\"<td/>\").append(parameter.title)));\n        });\n        this.$cover[this.model.get(\"enabled\") && \"hide\" || \"show\"]();\n    }\n}); /** This renders the content of the settings popup, allowing users to specify flags i.e. for space-to-tab conversion **/\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL3VwbG9hZC91cGxvYWQtc2V0dGluZ3MuanM/YTc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVGhpcyByZW5kZXJzIHRoZSBjb250ZW50IG9mIHRoZSBzZXR0aW5ncyBwb3B1cCwgYWxsb3dpbmcgdXNlcnMgdG8gc3BlY2lmeSBmbGFncyBpLmUuIGZvciBzcGFjZS10by10YWIgY29udmVyc2lvbiAqKi9cbmltcG9ydCBVdGlscyBmcm9tIFwidXRpbHMvdXRpbHNcIjtcbmV4cG9ydCBkZWZhdWx0IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGNsYXNzX2NoZWNrOiBcImZhLWNoZWNrLXNxdWFyZS1vXCIsXG4gICAgICAgIGNsYXNzX3VuY2hlY2s6IFwiZmEtc3F1YXJlLW9cIixcbiAgICAgICAgcGFyYW1ldGVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBcInNwYWNlX3RvX3RhYlwiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkNvbnZlcnQgc3BhY2VzIHRvIHRhYnNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogXCJ0b19wb3NpeF9saW5lc1wiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlVzZSBQT1NJWCBzdGFuZGFyZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoJChcIjxkaXYvPlwiKS5hZGRDbGFzcyhcInVwbG9hZC1zZXR0aW5nc1wiKSk7XG4gICAgICAgIHRoaXMuJGVsLmFwcGVuZCgkKFwiPGRpdi8+XCIpLmFkZENsYXNzKFwidXBsb2FkLXNldHRpbmdzLWNvdmVyXCIpKTtcbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKFxuICAgICAgICAgICAgJChcIjx0YWJsZS8+XCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwidXBsb2FkLXNldHRpbmdzLXRhYmxlIHVpLXRhYmxlLXN0cmlwZWRcIilcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiPHRib2R5Lz5cIilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy4kY292ZXIgPSB0aGlzLiQoXCIudXBsb2FkLXNldHRpbmdzLWNvdmVyXCIpO1xuICAgICAgICB0aGlzLiR0YWJsZSA9IHRoaXMuJChcIi51cGxvYWQtc2V0dGluZ3MtdGFibGUgPiB0Ym9keVwiKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNoYW5nZVwiLCB0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgICAgIHRoaXMubW9kZWwudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLiR0YWJsZS5lbXB0eSgpO1xuICAgICAgICBfLmVhY2godGhpcy5vcHRpb25zLnBhcmFtZXRlcnMsIHBhcmFtZXRlciA9PiB7XG4gICAgICAgICAgICB2YXIgJGNoZWNrYm94ID0gJChcIjxkaXYvPlwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgdXBsb2FkLSR7cGFyYW1ldGVyLmlkfSB1cGxvYWQtaWNvbi1idXR0b24gZmFgKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygoc2VsZi5tb2RlbC5nZXQocGFyYW1ldGVyLmlkKSAmJiBzZWxmLm9wdGlvbnMuY2xhc3NfY2hlY2spIHx8IHNlbGYub3B0aW9ucy5jbGFzc191bmNoZWNrKVxuICAgICAgICAgICAgICAgIC5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5tb2RlbC5nZXQoXCJlbmFibGVkXCIpICYmIHNlbGYubW9kZWwuc2V0KHBhcmFtZXRlci5pZCwgIXNlbGYubW9kZWwuZ2V0KHBhcmFtZXRlci5pZCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi4kdGFibGUuYXBwZW5kKFxuICAgICAgICAgICAgICAgICQoXCI8dHIvPlwiKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoXCI8dGQvPlwiKS5hcHBlbmQoJGNoZWNrYm94KSlcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKFwiPHRkLz5cIikuYXBwZW5kKHBhcmFtZXRlci50aXRsZSkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4kY292ZXJbKHRoaXMubW9kZWwuZ2V0KFwiZW5hYmxlZFwiKSAmJiBcImhpZGVcIikgfHwgXCJzaG93XCJdKCk7XG4gICAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL3VwbG9hZC91cGxvYWQtc2V0dGluZ3MuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFGQTtBQVJBO0FBQ0E7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBakRBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/*!*************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/upload-ftp.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.model = new Backbone.Model({\n            cls: \"upload-ftp\",\n            class_add: \"upload-icon-button fa fa-square-o\",\n            class_remove: \"upload-icon-button fa fa-check-square-o\",\n            class_partial: \"upload-icon-button fa fa-minus-square-o\",\n            help_enabled: true,\n            help_text: \"This Galaxy server allows you to upload files via FTP. To upload some files, log in to the FTP server at <strong>\" + options.ftp_upload_site + \"</strong> using your Galaxy credentials.\",\n            collection: null,\n            onchange: function onchange() {},\n            onadd: function onadd() {},\n            onremove: function onremove() {}\n        }).set(options);\n        this.collection = this.model.get(\"collection\");\n        this.setElement(this._template());\n        this.$content = this.$(\".upload-ftp-content\");\n        this.$wait = this.$(\".upload-ftp-wait\");\n        this.$help = this.$(\".upload-ftp-help\");\n        this.$number = this.$(\".upload-ftp-number\");\n        this.$disk = this.$(\".upload-ftp-disk\");\n        this.$body = this.$(\".upload-ftp-body\");\n        this.$warning = this.$(\".upload-ftp-warning\");\n        this.$select = this.$(\".upload-ftp-select-all\");\n        this.render();\n    },\n\n    render: function render() {\n        var self = this;\n        this.$wait.show();\n        this.$content.hide();\n        this.$warning.hide();\n        this.$help.hide();\n        $.ajax({\n            url: Galaxy.root + \"api/remote_files\",\n            method: \"GET\",\n            success: function success(ftp_files) {\n                self.model.set(\"ftp_files\", ftp_files);\n                self._index();\n                self._renderTable();\n            },\n            error: function error() {\n                self._renderTable();\n            }\n        });\n    },\n\n    /** Fill table with ftp entries */\n    _renderTable: function _renderTable() {\n        var self = this;\n        var ftp_files = this.model.get(\"ftp_files\");\n        this.rows = [];\n        if (ftp_files && ftp_files.length > 0) {\n            this.$body.empty();\n            var size = 0;\n            _.each(ftp_files, function (ftp_file) {\n                self.rows.push(self._renderRow(ftp_file));\n                size += ftp_file.size;\n            });\n            this.$number.html(ftp_files.length + \" files\");\n            this.$disk.html(_utils2.default.bytesToString(size, true));\n            if (this.collection) {\n                this.$(\"._has_collection\").show();\n                this.$select.addClass(this.model.get(\"class_add\")).off().on(\"click\", function () {\n                    self._all();\n                });\n                this._refresh();\n            }\n            this.$content.show();\n        } else {\n            this.$warning.show();\n        }\n        this.model.get(\"help_enabled\") && this.$help.show();\n        this.$wait.hide();\n    },\n\n    /** Add row */\n    _renderRow: function _renderRow(ftp_file) {\n        var self = this;\n        var options = this.model.attributes;\n        var $it = $(this._templateRow(ftp_file));\n        var $icon = $it.find(\".icon\");\n        this.$body.append($it);\n        if (this.collection) {\n            var model_index = this.ftp_index[ftp_file.path];\n            $icon.addClass(model_index === undefined ? options.class_add : options.class_remove);\n            $it.on(\"click\", function () {\n                self._switch($icon, ftp_file);\n                self._refresh();\n            });\n        } else {\n            $it.on(\"click\", function () {\n                options.onchange(ftp_file);\n            });\n        }\n        return $icon;\n    },\n\n    /** Create ftp index */\n    _index: function _index() {\n        var self = this;\n        this.ftp_index = {};\n        this.collection && this.collection.each(function (model) {\n            if (model.get(\"file_mode\") == \"ftp\") {\n                self.ftp_index[model.get(\"file_path\")] = model.id;\n            }\n        });\n    },\n\n    /** Select all event handler */\n    _all: function _all() {\n        var options = this.model.attributes;\n        var ftp_files = this.model.get(\"ftp_files\");\n        var add = this.$select.hasClass(options.class_add);\n        for (var index in ftp_files) {\n            var ftp_file = ftp_files[index];\n            var model_index = this.ftp_index[ftp_file.path];\n            if (model_index === undefined && add || model_index !== undefined && !add) {\n                this._switch(this.rows[index], ftp_file);\n            }\n        }\n        this._refresh();\n    },\n\n    /** Handle collection changes */\n    _switch: function _switch($icon, ftp_file) {\n        $icon.removeClass();\n        var options = this.model.attributes;\n        var model_index = this.ftp_index[ftp_file.path];\n        if (model_index === undefined) {\n            var new_index = options.onadd(ftp_file);\n            $icon.addClass(options.class_remove);\n            this.ftp_index[ftp_file.path] = new_index;\n        } else {\n            options.onremove(model_index);\n            $icon.addClass(options.class_add);\n            this.ftp_index[ftp_file.path] = undefined;\n        }\n    },\n\n    /** Refresh select all button state */\n    _refresh: function _refresh() {\n        var counts = _.reduce(this.ftp_index, function (memo, element) {\n            element !== undefined && memo++;\n            return memo;\n        }, 0);\n        this.$select.removeClass();\n        if (counts == 0) {\n            this.$select.addClass(this.model.get(\"class_add\"));\n        } else {\n            this.$select.addClass(counts == this.rows.length ? this.model.get(\"class_remove\") : this.model.get(\"class_partial\"));\n        }\n    },\n\n    /** Template of row */\n    _templateRow: function _templateRow(options) {\n        return \"<tr class=\\\"upload-ftp-row\\\"><td class=\\\"_has_collection\\\" style=\\\"display: none;\\\"><div class=\\\"icon\\\"/></td><td class=\\\"ftp-name\\\">\" + _.escape(options.path) + \"</td><td class=\\\"ftp-size\\\">\" + _utils2.default.bytesToString(options.size) + \"</td><td class=\\\"ftp-time\\\">\" + options.ctime + \"</td></tr>\";\n    },\n\n    /** Template of main view */\n    _template: function _template() {\n        return \"<div class=\\\"\" + this.model.get(\"cls\") + \"\\\"><div class=\\\"upload-ftp-wait fa fa-spinner fa-spin\\\"/><div class=\\\"upload-ftp-help\\\">\" + this.model.get(\"help_text\") + \"</div><div class=\\\"upload-ftp-content\\\"><span style=\\\"whitespace: nowrap; float: left;\\\">Available files: </span><span style=\\\"whitespace: nowrap; float: right;\\\"><span class=\\\"upload-icon fa fa-file-text-o\\\"/><span class=\\\"upload-ftp-number\\\"/>&nbsp;&nbsp;<span class=\\\"upload-icon fa fa-hdd-o\\\"/><span class=\\\"upload-ftp-disk\\\"/></span><table class=\\\"grid\\\" style=\\\"float: left;\\\"><thead><tr><th class=\\\"_has_collection\\\" style=\\\"display: none;\\\"><div class=\\\"upload-ftp-select-all\\\"></th><th>Name</th><th>Size</th><th>Created</th></tr></thead><tbody class=\\\"upload-ftp-body\\\"/></table></div><div class=\\\"upload-ftp-warning warningmessage\\\">Your FTP directory does not contain any files.</div>\";\n        \"<div>\";\n    }\n}); /** This renders the content of the ftp popup **/\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/upload-extension.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiPopover = __webpack_require__(/*! mvc/ui/ui-popover */ 15);\n\nvar _uiPopover2 = _interopRequireDefault(_uiPopover);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** This renders a popover with extension details **/\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        this.model = new Backbone.Model(options);\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    render: function render() {\n        var self = this;\n        var options = this.model.attributes;\n        var description = _.findWhere(options.list, {\n            id: options.extension\n        });\n        this.extension_popup && this.extension_popup.remove();\n        this.extension_popup = new _uiPopover2.default.View({\n            placement: options.placement || \"bottom\",\n            container: options.$el\n        });\n        this.extension_popup.title(options.title);\n        this.extension_popup.empty();\n        this.extension_popup.append(this._templateDescription(description));\n        this.extension_popup.show();\n    },\n\n    /** Template for extensions description */\n    _templateDescription: function _templateDescription(options) {\n        if (options.description) {\n            var tmpl = options.description;\n            if (options.description_url) {\n                tmpl += \"&nbsp;(<a href=\\\"\" + options.description_url + \"\\\" target=\\\"_blank\\\">read more</a>)\";\n            }\n            return tmpl;\n        } else {\n            return \"There is no description available for this file extension.\";\n        }\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL3VwbG9hZC91cGxvYWQtZXh0ZW5zaW9uLmpzPzdjZmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFRoaXMgcmVuZGVycyBhIHBvcG92ZXIgd2l0aCBleHRlbnNpb24gZGV0YWlscyAqKi9cbmltcG9ydCBVdGlscyBmcm9tIFwidXRpbHMvdXRpbHNcIjtcbmltcG9ydCBQb3BvdmVyIGZyb20gXCJtdmMvdWkvdWktcG9wb3ZlclwiO1xuZXhwb3J0IGRlZmF1bHQgQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyBCYWNrYm9uZS5Nb2RlbChvcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KFwiPGRpdi8+XCIpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBfLmZpbmRXaGVyZShvcHRpb25zLmxpc3QsIHtcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmV4dGVuc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5leHRlbnNpb25fcG9wdXAgJiYgdGhpcy5leHRlbnNpb25fcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uX3BvcHVwID0gbmV3IFBvcG92ZXIuVmlldyh7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IG9wdGlvbnMucGxhY2VtZW50IHx8IFwiYm90dG9tXCIsXG4gICAgICAgICAgICBjb250YWluZXI6IG9wdGlvbnMuJGVsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4dGVuc2lvbl9wb3B1cC50aXRsZShvcHRpb25zLnRpdGxlKTtcbiAgICAgICAgdGhpcy5leHRlbnNpb25fcG9wdXAuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5leHRlbnNpb25fcG9wdXAuYXBwZW5kKHRoaXMuX3RlbXBsYXRlRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pKTtcbiAgICAgICAgdGhpcy5leHRlbnNpb25fcG9wdXAuc2hvdygpO1xuICAgIH0sXG5cbiAgICAvKiogVGVtcGxhdGUgZm9yIGV4dGVuc2lvbnMgZGVzY3JpcHRpb24gKi9cbiAgICBfdGVtcGxhdGVEZXNjcmlwdGlvbjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdmFyIHRtcGwgPSBvcHRpb25zLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVzY3JpcHRpb25fdXJsKSB7XG4gICAgICAgICAgICAgICAgdG1wbCArPSBgJm5ic3A7KDxhIGhyZWY9XCIke29wdGlvbnMuZGVzY3JpcHRpb25fdXJsfVwiIHRhcmdldD1cIl9ibGFua1wiPnJlYWQgbW9yZTwvYT4pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0bXBsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiVGhlcmUgaXMgbm8gZGVzY3JpcHRpb24gYXZhaWxhYmxlIGZvciB0aGlzIGZpbGUgZXh0ZW5zaW9uLlwiO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL3VwbG9hZC91cGxvYWQtZXh0ZW5zaW9uLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUhBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkNBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/*!*******************************************!*\
  !*** ./galaxy/scripts/utils/uploadbox.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery, _) {\n\n/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n(function ($) {\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        Posts file data to the API\n    */\n    $.uploadpost = function (config) {\n        // parse options\n        var cnf = $.extend({}, {\n            data: {},\n            success: function success() {},\n            error: function error() {},\n            progress: function progress() {},\n            url: null,\n            maxfilesize: 2048,\n            error_filesize: \"File exceeds 2GB. Please use a FTP client.\",\n            error_default: \"Please make sure the file is available.\",\n            error_server: \"Upload request failed.\",\n            error_login: \"Uploads require you to log in.\"\n        }, config);\n\n        // link data\n        var data = cnf.data;\n\n        // check errors\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (var key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (var key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > 1048576 * cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // prepare request\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", cnf.url, true);\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n        // captures state changes\n        xhr.onreadystatechange = function () {\n            // check for request completed, server connection closed\n            if (xhr.readyState == xhr.DONE) {\n                // parse response\n                var response = null;\n                var extra_info = \"\";\n                if (xhr.responseText) {\n                    try {\n                        response = jQuery.parseJSON(xhr.responseText);\n                        extra_info = response.err_msg;\n                    } catch (e) {\n                        response = xhr.responseText;\n                        extra_info = response;\n                    }\n                }\n                // pass any error to the error option\n                if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(text + \" (\" + xhr.status + \"). \" + extra_info);\n                } else {\n                    cnf.success(response);\n                }\n            }\n        };\n\n        // prepare upload progress\n        xhr.upload.addEventListener(\"progress\", function (e) {\n            if (e.lengthComputable) {\n                cnf.progress(Math.round(e.loaded * 100 / e.total));\n            }\n        }, false);\n\n        // send request\n        Galaxy.emit.debug(\"uploadbox::uploadpost()\", \"Posting following data.\", cnf);\n        xhr.send(form);\n    };\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function (options) {\n        // initialize\n        var el = this;\n        var opts = $.extend({}, {\n            ondragover: function ondragover() {},\n            ondragleave: function ondragleave() {},\n            onchange: function onchange() {},\n            multiple: false\n        }, options);\n\n        // append hidden upload field\n        var $input = $(\"<input type=\\\"file\\\" style=\\\"display: none\\\" \" + (opts.multiple && \"multiple\" || \"\") + \"/>\");\n        el.append($input.change(function (e) {\n            opts.onchange(e.target.files);\n            $(this).val(\"\");\n        }));\n\n        // drag/drop events\n        el.on(\"drop\", function (e) {\n            opts.ondragleave(e);\n            if (e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on(\"dragover\", function (e) {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on(\"dragleave\", function (e) {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: function dialog() {\n                $input.trigger(\"click\");\n            }\n        };\n    };\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function (options) {\n        // parse options\n        var opts = $.extend({}, {\n            dragover: function dragover() {},\n            dragleave: function dragleave() {},\n            announce: function announce(d) {},\n            initialize: function initialize(d) {},\n            progress: function progress(d, m) {},\n            success: function success(d, m) {},\n            error: function error(d, m) {\n                alert(m);\n            },\n            complete: function complete() {}\n        }, options);\n\n        // file queue\n        var queue = {};\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple: true,\n            onchange: function onchange(files) {\n                add(files);\n            },\n            ondragover: options.ondragover,\n            ondragleave: options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var index = undefined;\n                _.each(files, function (file, key) {\n                    if (file.mode !== \"new\" && _.filter(queue, function (f) {\n                        return f.name === file.name && f.size === file.size;\n                    }).length) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, function (file) {\n                    if (!file.duplicate) {\n                        index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (var key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index);\n\n            // create and submit data\n            $.uploadpost({\n                url: opts.url,\n                data: opts.initialize(index),\n                success: function success(message) {\n                    opts.success(index, message);\n                    process();\n                },\n                error: function error(message) {\n                    opts.error(index, message);\n                    process();\n                },\n                progress: function progress(percentage) {\n                    opts.progress(index, percentage);\n                }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start() {\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return window.File && window.FormData && window.XMLHttpRequest && window.FileList;\n        }\n\n        // export functions\n        return {\n            select: select,\n            add: add,\n            remove: remove,\n            start: start,\n            stop: stop,\n            reset: reset,\n            configure: configure,\n            compatible: compatible\n        };\n    };\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/*!******************************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/list-collection-creator.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _hdcaModel = __webpack_require__(/*! mvc/history/hdca-model */ 59);\n\nvar _hdcaModel2 = _interopRequireDefault(_hdcaModel);\n\nvar _states = __webpack_require__(/*! mvc/dataset/states */ 16);\n\nvar _states2 = _interopRequireDefault(_states);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _baseCreator = __webpack_require__(/*! mvc/collection/base-creator */ 109);\n\nvar _baseCreator2 = _interopRequireDefault(_baseCreator);\n\nvar _uiModal = __webpack_require__(/*! mvc/ui/ui-modal */ 8);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _naturalSort = __webpack_require__(/*! utils/natural-sort */ 110);\n\nvar _naturalSort2 = _interopRequireDefault(_naturalSort);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\n__webpack_require__(/*! ui/hoverhighlight */ 111);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"collections\";\n\n/*==============================================================================\nTODO:\n    use proper Element model and not just json\n    straighten out createFn, collection.createHDCA\n    possibly stop using modals for this\n    It would be neat to do a drag and drop\n\n==============================================================================*/\n/** A view for both DatasetDCEs and NestedDCDCEs\n *  (things that implement collection-model:DatasetCollectionElementMixin)\n */\nvar DatasetCollectionElementView = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    //TODO: use proper class (DatasetDCE or NestedDCDCE (or the union of both))\n    tagName: \"li\",\n    className: \"collection-element\",\n\n    initialize: function initialize(attributes) {\n        this.element = attributes.element || {};\n        this.selected = attributes.selected || false;\n    },\n\n    render: function render() {\n        this.dragStartHandler = _.bind(this._dragstart, this);\n        this.dragEndHandler = _.bind(this._dragend, this);\n        var handle = this.$el.attr(\"data-element-id\", this.element.id).attr(\"draggable\", true).html(this.template({ element: this.element })).get(0);\n        handle.addEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.addEventListener(\"dragend\", this.dragEndHandler, false);\n        if (this.selected) {\n            this.$el.addClass(\"selected\");\n        }\n        return this;\n    },\n\n    //TODO: lots of unused space in the element - possibly load details and display them horiz.\n    template: _.template(['<a class=\"name\" title=\"', (0, _localization2.default)(\"Click to rename\"), '\" href=\"javascript:void(0)\">', \"<%- element.name %>\", \"</a>\", '<button class=\"discard btn btn-sm\" title=\"', (0, _localization2.default)(\"Remove this dataset from the list\"), '\">', (0, _localization2.default)(\"Discard\"), \"</button>\"].join(\"\")),\n\n    /** select this element and pub */\n    select: function select(toggle) {\n        this.$el.toggleClass(\"selected\", toggle);\n        this.trigger(\"select\", {\n            source: this,\n            selected: this.$el.hasClass(\"selected\")\n        });\n    },\n\n    /** animate the removal of this element and pub */\n    discard: function discard() {\n        var view = this;\n        var parentWidth = this.$el.parent().width();\n        this.$el.animate({ \"margin-right\": parentWidth }, \"fast\", function () {\n            view.trigger(\"discard\", {\n                source: view\n            });\n            view.destroy();\n        });\n    },\n\n    /** remove the DOM and any listeners */\n    destroy: function destroy() {\n        this.off();\n        this.$el.remove();\n    },\n\n    events: {\n        click: \"_click\",\n        \"click .name\": \"_clickName\",\n        \"click .discard\": \"_clickDiscard\",\n\n        dragover: \"_sendToParent\",\n        drop: \"_sendToParent\"\n    },\n\n    /** select when the li is clicked */\n    _click: function _click(ev) {\n        ev.stopPropagation();\n        this.select(ev);\n    },\n\n    /** rename a pair when the name is clicked */\n    _clickName: function _clickName(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        var promptString = [(0, _localization2.default)(\"Enter a new name for the element\"), \":\\n(\", (0, _localization2.default)(\"Note that changing the name here will not rename the dataset\"), \")\"].join(\"\");\n\n        var response = prompt((0, _localization2.default)(\"Enter a new name for the element\") + \":\", this.element.name);\n\n        if (response) {\n            this.element.name = response;\n            this.render();\n        }\n        //TODO: cancelling with ESC leads to closure of the creator...\n    },\n\n    /** discard when the discard button is clicked */\n    _clickDiscard: function _clickDiscard(ev) {\n        ev.stopPropagation();\n        this.discard();\n    },\n\n    /** dragging pairs for re-ordering */\n    _dragstart: function _dragstart(ev) {\n        if (ev.originalEvent) {\n            ev = ev.originalEvent;\n        }\n        ev.dataTransfer.effectAllowed = \"move\";\n        ev.dataTransfer.setData(\"text/plain\", JSON.stringify(this.element));\n\n        this.$el.addClass(\"dragging\");\n        this.$el.parent().trigger(\"collection-element.dragstart\", [this]);\n    },\n\n    /** dragging for re-ordering */\n    _dragend: function _dragend(ev) {\n        this.$el.removeClass(\"dragging\");\n        this.$el.parent().trigger(\"collection-element.dragend\", [this]);\n    },\n\n    /** manually bubble up an event to the parent/container */\n    _sendToParent: function _sendToParent(ev) {\n        this.$el.parent().trigger(ev);\n    },\n\n    /** string rep */\n    toString: function toString() {\n        return \"DatasetCollectionElementView()\";\n    }\n});\n\n// ============================================================================\n/** An interface for building collections.\n */\nvar ListCollectionCreator = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend(_baseCreator2.default.CollectionCreatorMixin).extend({\n    _logNamespace: logNamespace,\n\n    /** the class used to display individual elements */\n    elementViewClass: DatasetCollectionElementView,\n    /** the class this creator will create and save */\n    collectionClass: _hdcaModel2.default.HistoryDatasetCollection,\n    className: \"list-collection-creator collection-creator flex-row-container\",\n\n    /** minimum number of valid elements to start with in order to build a collection of this type */\n    minElements: 1,\n\n    defaultAttributes: {\n        //TODO: remove - use new collectionClass().save()\n        /** takes elements and creates the proper collection - returns a promise */\n        creationFn: function creationFn() {\n            throw new TypeError(\"no creation fn for creator\");\n        },\n        /** fn to call when the collection is created (scoped to this) */\n        oncreate: function oncreate() {},\n        /** fn to call when the cancel button is clicked (scoped to this) - if falsy, no btn is displayed */\n        oncancel: function oncancel() {},\n        /** distance from list edge to begin autoscrolling list */\n        autoscrollDist: 24,\n        /** Color passed to hoverhighlight */\n        highlightClr: \"rgba( 64, 255, 255, 1.0 )\"\n    },\n\n    footerSettings: {\n        \".hide-originals\": \"hideOriginals\"\n    },\n\n    /** set up initial options, instance vars, behaviors */\n    initialize: function initialize(attributes) {\n        this.metric(\"ListCollectionCreator.initialize\", attributes);\n        var creator = this;\n        _.each(this.defaultAttributes, function (value, key) {\n            value = attributes[key] || value;\n            creator[key] = value;\n        });\n\n        /** unordered, original list - cache to allow reversal */\n        creator.initialElements = attributes.elements || [];\n\n        this._setUpCommonSettings(attributes);\n        this._instanceSetUp();\n        this._elementsSetUp();\n        this._setUpBehaviors();\n    },\n\n    /** set up instance vars */\n    _instanceSetUp: function _instanceSetUp() {\n        /** Ids of elements that have been selected by the user - to preserve over renders */\n        this.selectedIds = {};\n        /** DOM elements currently being dragged */\n        this.$dragging = null;\n        /** Used for blocking UI events during ajax/operations (don't post twice) */\n        this.blocking = false;\n    },\n\n    // ------------------------------------------------------------------------ process raw list\n    /** set up main data */\n    _elementsSetUp: function _elementsSetUp() {\n        //this.debug( '-- _dataSetUp' );\n        /** a list of invalid elements and the reasons they aren't valid */\n        this.invalidElements = [];\n        //TODO: handle fundamental problem of syncing DOM, views, and list here\n        /** data for list in progress */\n        this.workingElements = [];\n        /** views for workingElements */\n        this.elementViews = [];\n\n        // copy initial list, sort, add ids if needed\n        this.workingElements = this.initialElements.slice(0);\n        this._ensureElementIds();\n        this._validateElements();\n        this._mangleDuplicateNames();\n        this._sortElements();\n    },\n\n    /** add ids to dataset objs in initial list if none */\n    _ensureElementIds: function _ensureElementIds() {\n        this.workingElements.forEach(function (element) {\n            if (!element.hasOwnProperty(\"id\")) {\n                element.id = _.uniqueId();\n            }\n        });\n        return this.workingElements;\n    },\n\n    /** separate working list into valid and invalid elements for this collection */\n    _validateElements: function _validateElements() {\n        var creator = this;\n        var existingNames = {};\n        creator.invalidElements = [];\n\n        this.workingElements = this.workingElements.filter(function (element) {\n            var problem = creator._isElementInvalid(element);\n            if (problem) {\n                creator.invalidElements.push({\n                    element: element,\n                    text: problem\n                });\n            }\n            return !problem;\n        });\n        return this.workingElements;\n    },\n\n    /** describe what is wrong with a particular element if anything */\n    _isElementInvalid: function _isElementInvalid(element) {\n        if (element.history_content_type !== \"dataset\") {\n            return (0, _localization2.default)(\"is not a dataset\");\n        }\n        var validState = element.state === _states2.default.OK || _.contains(_states2.default.NOT_READY_STATES, element.state);\n        if (!validState) {\n            return (0, _localization2.default)(\"has errored, is paused, or is not accessible\");\n        }\n        if (element.deleted || element.purged) {\n            return (0, _localization2.default)(\"has been deleted or purged\");\n        }\n        return null;\n    },\n\n    /** mangle duplicate names using a mac-like '(counter)' addition to any duplicates */\n    _mangleDuplicateNames: function _mangleDuplicateNames() {\n        var SAFETY = 900;\n        var counter = 1;\n        var existingNames = {};\n        this.workingElements.forEach(function (element) {\n            var currName = element.name;\n            while (existingNames.hasOwnProperty(currName)) {\n                currName = element.name + \" (\" + counter + \")\";\n                counter += 1;\n                if (counter >= SAFETY) {\n                    throw new Error(\"Safety hit in while loop - thats impressive\");\n                }\n            }\n            element.name = currName;\n            existingNames[element.name] = true;\n        });\n    },\n\n    /** sort a list of elements */\n    _sortElements: function _sortElements(list) {\n        // // currently only natural sort by name\n        // this.workingElements.sort( function( a, b ){ return naturalSort( a.name, b.name ); });\n        // return this.workingElements;\n    },\n\n    // ------------------------------------------------------------------------ rendering\n    // templates : ListCollectionCreator.templates,\n    /** render the entire interface */\n    render: function render(speed, callback) {\n        //this.debug( '-- _render' );\n        if (this.workingElements.length < this.minElements) {\n            return this._renderInvalid(speed, callback);\n        }\n\n        this.$el.empty().html(this.templates.main());\n        this._renderHeader(speed);\n        this._renderMiddle(speed);\n        this._renderFooter(speed);\n        this._addPluginComponents();\n        this.$(\".collection-name\").focus();\n        this.trigger(\"rendered\", this);\n        return this;\n    },\n\n    /** render a simplified interface aimed at telling the user why they can't move forward */\n    _renderInvalid: function _renderInvalid(speed, callback) {\n        //this.debug( '-- _render' );\n        this.$el.empty().html(this.templates.invalidInitial({\n            problems: this.invalidElements,\n            elements: this.workingElements\n        }));\n        if (typeof this.oncancel === \"function\") {\n            this.$(\".cancel-create.btn\").show();\n        }\n        this.trigger(\"rendered\", this);\n        return this;\n    },\n\n    /** render the header section */\n    _renderHeader: function _renderHeader(speed, callback) {\n        var $header = this.$(\".header\").empty().html(this.templates.header()).find(\".help-content\").prepend($(this.templates.helpContent()));\n        //TODO: should only show once despite calling _renderHeader again\n        if (this.invalidElements.length) {\n            this._invalidElementsAlert();\n        }\n        return $header;\n    },\n\n    /** render the middle including the elements */\n    _renderMiddle: function _renderMiddle(speed, callback) {\n        var $middle = this.$(\".middle\").empty().html(this.templates.middle());\n        this._renderList(speed);\n        return $middle;\n    },\n\n    /** add any jQuery/bootstrap/custom plugins to elements rendered */\n    _addPluginComponents: function _addPluginComponents() {\n        this.$(\".help-content i\").hoverhighlight(\".collection-creator\", this.highlightClr);\n    },\n\n    /** build and show an alert describing any elements that could not be included due to problems */\n    _invalidElementsAlert: function _invalidElementsAlert() {\n        this._showAlert(this.templates.invalidElements({\n            problems: this.invalidElements\n        }), \"alert-warning\");\n    },\n\n    _disableNameAndCreate: function _disableNameAndCreate(disable) {\n        disable = !_.isUndefined(disable) ? disable : true;\n        if (disable) {\n            this.$(\".collection-name\").prop(\"disabled\", true);\n            this.$(\".create-collection\").toggleClass(\"disabled\", true);\n            // } else {\n            //     this.$( '.collection-name' ).prop( 'disabled', false );\n            //     this.$( '.create-collection' ).removeClass( 'disable' );\n        }\n    },\n\n    // ------------------------------------------------------------------------ rendering elements\n    /** conv. to the main list display DOM */\n    $list: function $list() {\n        return this.$(\".collection-elements\");\n    },\n\n    /** show or hide the clear selected control based on the num of selected elements */\n    _renderClearSelected: function _renderClearSelected() {\n        if (_.size(this.selectedIds)) {\n            this.$(\".collection-elements-controls > .clear-selected\").show();\n        } else {\n            this.$(\".collection-elements-controls > .clear-selected\").hide();\n        }\n    },\n\n    /** render the elements in order (or a warning if no elements found) */\n    _renderList: function _renderList(speed, callback) {\n        //this.debug( '-- _renderList' );\n        var creator = this;\n\n        var $tmp = jQuery(\"<div/>\");\n        var $list = creator.$list();\n\n        _.each(this.elementViews, function (view) {\n            view.destroy();\n            creator.removeElementView(view);\n        });\n\n        // if( !this.workingElements.length ){\n        //     this._renderNoValidElements();\n        //     return;\n        // }\n\n        creator.workingElements.forEach(function (element) {\n            var elementView = creator._createElementView(element);\n            $tmp.append(elementView.$el);\n        });\n\n        creator._renderClearSelected();\n        $list.empty().append($tmp.children());\n        _.invoke(creator.elementViews, \"render\");\n\n        if ($list.height() > $list.css(\"max-height\")) {\n            $list.css(\"border-width\", \"1px 0px 1px 0px\");\n        } else {\n            $list.css(\"border-width\", \"0px\");\n        }\n    },\n\n    /** create an element view, cache in elementViews, set up listeners, and return */\n    _createElementView: function _createElementView(element) {\n        var elementView = new this.elementViewClass({\n            //TODO: use non-generic class or not all\n            // model : COLLECTION.DatasetDCE( element )\n            element: element,\n            selected: _.has(this.selectedIds, element.id)\n        });\n        this.elementViews.push(elementView);\n        this._listenToElementView(elementView);\n        return elementView;\n    },\n\n    /** listen to any element events */\n    _listenToElementView: function _listenToElementView(view) {\n        var creator = this;\n        creator.listenTo(view, {\n            select: function select(data) {\n                var element = data.source.element;\n                if (data.selected) {\n                    creator.selectedIds[element.id] = true;\n                } else {\n                    delete creator.selectedIds[element.id];\n                }\n                creator.trigger(\"elements:select\", data);\n            },\n            discard: function discard(data) {\n                creator.trigger(\"elements:discard\", data);\n            }\n        });\n    },\n\n    /** add a new element view based on the json in element */\n    addElementView: function addElementView(element) {\n        //TODO: workingElements is sorted, add element in appropo index\n        // add element, sort elements, find element index\n        // var view = this._createElementView( element );\n        // return view;\n    },\n\n    /** stop listening to view and remove from caches */\n    removeElementView: function removeElementView(view) {\n        delete this.selectedIds[view.element.id];\n        this._renderClearSelected();\n\n        this.elementViews = _.without(this.elementViews, view);\n        this.stopListening(view);\n    },\n\n    /** render a message in the list that no elements remain to create a collection */\n    _renderNoElementsLeft: function _renderNoElementsLeft() {\n        this._disableNameAndCreate(true);\n        this.$(\".collection-elements\").append(this.templates.noElementsLeft());\n    },\n\n    // /** render a message in the list that no valid elements were found to create a collection */\n    // _renderNoValidElements : function(){\n    //     this._disableNameAndCreate( true );\n    //     this.$( '.collection-elements' ).append( this.templates.noValidElements() );\n    // },\n\n    // ------------------------------------------------------------------------ API\n    /** convert element into JSON compatible with the collections API */\n    _elementToJSON: function _elementToJSON(element) {\n        // return element.toJSON();\n        return element;\n    },\n\n    /** create the collection via the API\n     *  @returns {jQuery.xhr Object} the jquery ajax request\n     */\n    createList: function createList(name) {\n        if (!this.workingElements.length) {\n            var message = (0, _localization2.default)(\"No valid elements for final list\") + \". \";\n            message += \"<a class=\\\"cancel-create\\\" href=\\\"javascript:void(0);\\\">\" + (0, _localization2.default)(\"Cancel\") + \"</a> \";\n            message += (0, _localization2.default)(\"or\");\n            message += \" <a class=\\\"reset\\\" href=\\\"javascript:void(0);\\\">\" + (0, _localization2.default)(\"start over\") + \"</a>.\";\n            this._showAlert(message);\n            return;\n        }\n\n        var creator = this;\n\n        var elements = this.workingElements.map(function (element) {\n            return creator._elementToJSON(element);\n        });\n\n        creator.blocking = true;\n        return creator.creationFn(elements, name, creator.hideOriginals).always(function () {\n            creator.blocking = false;\n        }).fail(function (xhr, status, message) {\n            creator.trigger(\"error\", {\n                xhr: xhr,\n                status: status,\n                message: (0, _localization2.default)(\"An error occurred while creating this collection\")\n            });\n        }).done(function (response, message, xhr) {\n            creator.trigger(\"collection:created\", response, message, xhr);\n            creator.metric(\"collection:created\", response);\n            if (typeof creator.oncreate === \"function\") {\n                creator.oncreate.call(this, response, message, xhr);\n            }\n        });\n    },\n\n    // ------------------------------------------------------------------------ events\n    /** set up event handlers on self */\n    _setUpBehaviors: function _setUpBehaviors() {\n        this.on(\"error\", this._errorHandler);\n\n        this.once(\"rendered\", function () {\n            this.trigger(\"rendered:initial\", this);\n        });\n\n        this.on(\"elements:select\", function (data) {\n            this._renderClearSelected();\n        });\n\n        this.on(\"elements:discard\", function (data) {\n            var element = data.source.element;\n            this.removeElementView(data.source);\n\n            this.workingElements = _.without(this.workingElements, element);\n            if (!this.workingElements.length) {\n                this._renderNoElementsLeft();\n            }\n        });\n\n        //this.on( 'all', function(){\n        //    this.info( arguments );\n        //});\n        return this;\n    },\n\n    /** handle errors with feedback and details to the user (if available) */\n    _errorHandler: function _errorHandler(data) {\n        this.error(data);\n\n        var creator = this;\n        var content = data.message || (0, _localization2.default)(\"An error occurred\");\n        if (data.xhr) {\n            var xhr = data.xhr;\n            var message = data.message;\n            if (xhr.readyState === 0 && xhr.status === 0) {\n                content += \": \" + (0, _localization2.default)(\"Galaxy could not be reached and may be updating.\") + (0, _localization2.default)(\" Try again in a few minutes.\");\n            } else if (xhr.responseJSON) {\n                content += \":<br /><pre>\" + JSON.stringify(xhr.responseJSON) + \"</pre>\";\n            } else {\n                content += \": \" + message;\n            }\n        }\n        creator._showAlert(content, \"alert-danger\");\n    },\n\n    events: {\n        // header\n        \"click .more-help\": \"_clickMoreHelp\",\n        \"click .less-help\": \"_clickLessHelp\",\n        \"click .main-help\": \"_toggleHelp\",\n        \"click .header .alert button\": \"_hideAlert\",\n\n        \"click .reset\": \"reset\",\n        \"click .clear-selected\": \"clearSelectedElements\",\n\n        // elements - selection\n        \"click .collection-elements\": \"clearSelectedElements\",\n\n        // elements - drop target\n        // 'dragenter .collection-elements': '_dragenterElements',\n        // 'dragleave .collection-elements': '_dragleaveElements',\n        \"dragover .collection-elements\": \"_dragoverElements\",\n        \"drop .collection-elements\": \"_dropElements\",\n\n        // these bubble up from the elements as custom events\n        \"collection-element.dragstart .collection-elements\": \"_elementDragstart\",\n        \"collection-element.dragend   .collection-elements\": \"_elementDragend\",\n\n        // footer\n        \"change .collection-name\": \"_changeName\",\n        \"keydown .collection-name\": \"_nameCheckForEnter\",\n        \"change .hide-originals\": \"_changeHideOriginals\",\n        \"click .cancel-create\": \"_cancelCreate\",\n        \"click .create-collection\": \"_clickCreate\" //,\n    },\n\n    // ........................................................................ elements\n    /** reset all data to the initial state */\n    reset: function reset() {\n        this._instanceSetUp();\n        this._elementsSetUp();\n        this.render();\n    },\n\n    /** deselect all elements */\n    clearSelectedElements: function clearSelectedElements(ev) {\n        this.$(\".collection-elements .collection-element\").removeClass(\"selected\");\n        this.$(\".collection-elements-controls > .clear-selected\").hide();\n    },\n\n    //_dragenterElements : function( ev ){\n    //    //this.debug( '_dragenterElements:', ev );\n    //},\n    //TODO: if selected are dragged out of the list area - remove the placeholder - cuz it won't work anyway\n    // _dragleaveElements : function( ev ){\n    //    //this.debug( '_dragleaveElements:', ev );\n    // },\n\n    /** track the mouse drag over the list adding a placeholder to show where the drop would occur */\n    _dragoverElements: function _dragoverElements(ev) {\n        //this.debug( '_dragoverElements:', ev );\n        ev.preventDefault();\n\n        var $list = this.$list();\n        this._checkForAutoscroll($list, ev.originalEvent.clientY);\n        var $nearest = this._getNearestElement(ev.originalEvent.clientY);\n\n        //TODO: no need to re-create - move instead\n        this.$(\".element-drop-placeholder\").remove();\n        var $placeholder = $('<div class=\"element-drop-placeholder\"></div>');\n        if (!$nearest.length) {\n            $list.append($placeholder);\n        } else {\n            $nearest.before($placeholder);\n        }\n    },\n\n    /** If the mouse is near enough to the list's top or bottom, scroll the list */\n    _checkForAutoscroll: function _checkForAutoscroll($element, y) {\n        var AUTOSCROLL_SPEED = 2;\n        var offset = $element.offset();\n        var scrollTop = $element.scrollTop();\n        var upperDist = y - offset.top;\n        var lowerDist = offset.top + $element.outerHeight() - y;\n        if (upperDist >= 0 && upperDist < this.autoscrollDist) {\n            $element.scrollTop(scrollTop - AUTOSCROLL_SPEED);\n        } else if (lowerDist >= 0 && lowerDist < this.autoscrollDist) {\n            $element.scrollTop(scrollTop + AUTOSCROLL_SPEED);\n        }\n    },\n\n    /** get the nearest element based on the mouse's Y coordinate.\n     *  If the y is at the end of the list, return an empty jQuery object.\n     */\n    _getNearestElement: function _getNearestElement(y) {\n        var WIGGLE = 4;\n\n        var lis = this.$(\".collection-elements li.collection-element\").toArray();\n\n        for (var i = 0; i < lis.length; i++) {\n            var $li = $(lis[i]);\n            var top = $li.offset().top;\n            var halfHeight = Math.floor($li.outerHeight() / 2) + WIGGLE;\n            if (top + halfHeight > y && top - halfHeight < y) {\n                return $li;\n            }\n        }\n        return $();\n    },\n\n    /** drop (dragged/selected elements) onto the list, re-ordering the internal list */\n    _dropElements: function _dropElements(ev) {\n        if (ev.originalEvent) {\n            ev = ev.originalEvent;\n        }\n        // both required for firefox\n        ev.preventDefault();\n        ev.dataTransfer.dropEffect = \"move\";\n\n        // insert before the nearest element or after the last.\n        var $nearest = this._getNearestElement(ev.clientY);\n        if ($nearest.length) {\n            this.$dragging.insertBefore($nearest);\n        } else {\n            // no nearest before - insert after last element\n            this.$dragging.insertAfter(this.$(\".collection-elements .collection-element\").last());\n        }\n        // resync the creator's list based on the new DOM order\n        this._syncOrderToDom();\n        return false;\n    },\n\n    /** resync the creator's list of elements based on the DOM order */\n    _syncOrderToDom: function _syncOrderToDom() {\n        var creator = this;\n        var newElements = [];\n        //TODO: doesn't seem wise to use the dom to store these - can't we sync another way?\n        this.$(\".collection-elements .collection-element\").each(function () {\n            var id = $(this).attr(\"data-element-id\");\n\n            var element = _.findWhere(creator.workingElements, {\n                id: id\n            });\n\n            if (element) {\n                newElements.push(element);\n            } else {\n                console.error(\"missing element: \", id);\n            }\n        });\n        this.workingElements = newElements;\n        this._renderList();\n    },\n\n    /** drag communication with element sub-views: dragstart */\n    _elementDragstart: function _elementDragstart(ev, element) {\n        // auto select the element causing the event and move all selected\n        element.select(true);\n        this.$dragging = this.$(\".collection-elements .collection-element.selected\");\n    },\n\n    /** drag communication with element sub-views: dragend - remove the placeholder */\n    _elementDragend: function _elementDragend(ev, element) {\n        $(\".element-drop-placeholder\").remove();\n        this.$dragging = null;\n    },\n\n    // ------------------------------------------------------------------------ templates\n    //TODO: move to require text plugin and load these as text\n    //TODO: underscore currently unnecc. bc no vars are used\n    //TODO: better way of localizing text-nodes in long strings\n    /** underscore template fns attached to class */\n    templates: _.extend({}, _baseCreator2.default.CollectionCreatorMixin._creatorTemplates, {\n        /** the header (not including help text) */\n        header: _.template(['<div class=\"main-help well clear\">', '<a class=\"more-help\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"More help\"), \"</a>\", '<div class=\"help-content\">', '<a class=\"less-help\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"Less\"), \"</a>\", \"</div>\", \"</div>\", '<div class=\"alert alert-dismissable\">', '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" ', 'title=\"', (0, _localization2.default)(\"Close and show more help\"), '\" aria-hidden=\"true\">&times;</button>', '<span class=\"alert-message\"></span>', \"</div>\"].join(\"\")),\n\n        /** the middle: element list */\n        middle: _.template(['<div class=\"collection-elements-controls\">', '<a class=\"reset\" href=\"javascript:void(0);\" ', 'title=\"', (0, _localization2.default)(\"Undo all reordering and discards\"), '\">', (0, _localization2.default)(\"Start over\"), \"</a>\", '<a class=\"clear-selected\" href=\"javascript:void(0);\" ', 'title=\"', (0, _localization2.default)(\"De-select all selected datasets\"), '\">', (0, _localization2.default)(\"Clear selected\"), \"</a>\", \"</div>\", '<div class=\"collection-elements scroll-container flex-row\">', \"</div>\"].join(\"\")),\n\n        /** creation and cancel controls */\n        footer: _.template(['<div class=\"attributes clear\">', '<div class=\"clear\">', '<label class=\"setting-prompt pull-right\">', (0, _localization2.default)(\"Hide original elements\"), \"?\", '<input class=\"hide-originals pull-right\" type=\"checkbox\" />', \"</label>\", \"</div>\", '<div class=\"clear\">', '<input class=\"collection-name form-control pull-right\" ', 'placeholder=\"', (0, _localization2.default)(\"Enter a name for your new collection\"), '\" />', '<div class=\"collection-name-prompt pull-right\">', (0, _localization2.default)(\"Name\"), \":</div>\", \"</div>\", \"</div>\", '<div class=\"actions clear vertically-spaced\">', '<div class=\"other-options pull-left\">', '<button class=\"cancel-create btn\" tabindex=\"-1\">', (0, _localization2.default)(\"Cancel\"), \"</button>\", '<div class=\"create-other btn-group dropup\">', '<button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">', (0, _localization2.default)(\"Create a different kind of collection\"), ' <span class=\"caret\"></span>', \"</button>\", '<ul class=\"dropdown-menu\" role=\"menu\">', '<li><a href=\"#\">', (0, _localization2.default)(\"Create a <i>single</i> pair\"), \"</a></li>\", '<li><a href=\"#\">', (0, _localization2.default)(\"Create a list of <i>unpaired</i> datasets\"), \"</a></li>\", \"</ul>\", \"</div>\", \"</div>\", '<div class=\"main-options pull-right\">', '<button class=\"create-collection btn btn-primary\">', (0, _localization2.default)(\"Create list\"), \"</button>\", \"</div>\", \"</div>\"].join(\"\")),\n\n        /** help content */\n        helpContent: _.template([\"<p>\", (0, _localization2.default)([\"Collections of datasets are permanent, ordered lists of datasets that can be passed to tools and \", \"workflows in order to have analyses done on each member of the entire group. This interface allows \", \"you to create a collection and re-order the final collection.\"].join(\"\")), \"</p>\", \"<ul>\", \"<li>\", (0, _localization2.default)([\"Rename elements in the list by clicking on \", '<i data-target=\".collection-element .name\">the existing name</i>.'].join(\"\")), \"</li>\", \"<li>\", (0, _localization2.default)([\"Discard elements from the final created list by clicking on the \", '<i data-target=\".collection-element .discard\">\"Discard\"</i> button.'].join(\"\")), \"</li>\", \"<li>\", (0, _localization2.default)([\"Reorder the list by clicking and dragging elements. Select multiple elements by clicking on \", '<i data-target=\".collection-element\">them</i> and you can then move those selected by dragging the ', \"entire group. Deselect them by clicking them again or by clicking the \", 'the <i data-target=\".clear-selected\">\"Clear selected\"</i> link.'].join(\"\")), \"</li>\", \"<li>\", (0, _localization2.default)(['Click the <i data-target=\".reset\">\"Start over\"</i> link to begin again as if you had just opened ', \"the interface.\"].join(\"\")), \"</li>\", \"<li>\", (0, _localization2.default)(['Click the <i data-target=\".cancel-create\">\"Cancel\"</i> button to exit the interface.'].join(\"\")), \"</li>\", \"</ul><br />\", \"<p>\", (0, _localization2.default)(['Once your collection is complete, enter a <i data-target=\".collection-name\">name</i> and ', 'click <i data-target=\".create-collection\">\"Create list\"</i>.'].join(\"\")), \"</p>\"].join(\"\")),\n\n        /** shown in list when all elements are discarded */\n        invalidElements: _.template([(0, _localization2.default)(\"The following selections could not be included due to problems:\"), \"<ul><% _.each( problems, function( problem ){ %>\", \"<li><b><%- problem.element.name %></b>: <%- problem.text %></li>\", \"<% }); %></ul>\"].join(\"\")),\n\n        /** shown in list when all elements are discarded */\n        noElementsLeft: _.template(['<li class=\"no-elements-left-message\">', (0, _localization2.default)(\"No elements left! \"), (0, _localization2.default)(\"Would you like to \"), '<a class=\"reset\" href=\"javascript:void(0)\">', (0, _localization2.default)(\"start over\"), \"</a>?\", \"</li>\"].join(\"\")),\n\n        /** a simplified page communicating what went wrong and why the user needs to reselect something else */\n        invalidInitial: _.template(['<div class=\"header flex-row no-flex\">', '<div class=\"alert alert-warning\" style=\"display: block\">', '<span class=\"alert-message\">', \"<% if( _.size( problems ) ){ %>\", (0, _localization2.default)(\"The following selections could not be included due to problems\"), \":\", \"<ul><% _.each( problems, function( problem ){ %>\", \"<li><b><%- problem.element.name %></b>: <%- problem.text %></li>\", \"<% }); %></ul>\", \"<% } else if( _.size( elements ) < 1 ){ %>\", (0, _localization2.default)(\"No datasets were selected\"), \".\", \"<% } %>\", \"<br />\", (0, _localization2.default)(\"At least one element is needed for the collection\"), \". \", (0, _localization2.default)(\"You may need to \"), '<a class=\"cancel-create\" href=\"javascript:void(0)\">', (0, _localization2.default)(\"cancel\"), \"</a> \", (0, _localization2.default)(\"and reselect new elements\"), \".\", \"</span>\", \"</div>\", \"</div>\", '<div class=\"footer flex-row no-flex\">', '<div class=\"actions clear vertically-spaced\">', '<div class=\"other-options pull-left\">', '<button class=\"cancel-create btn\" tabindex=\"-1\">', (0, _localization2.default)(\"Cancel\"), \"</button>\",\n        // _l( 'Create a different kind of collection' ),\n        \"</div>\", \"</div>\", \"</div>\"].join(\"\"))\n    }),\n\n    // ------------------------------------------------------------------------ misc\n    /** string rep */\n    toString: function toString() {\n        return \"ListCollectionCreator\";\n    }\n});\n\n//=============================================================================\n/** Create a modal and load its body with the given CreatorClass creator type\n *  @returns {Deferred} resolved when creator has built a collection.\n */\nvar collectionCreatorModal = function _collectionCreatorModal(elements, options, CreatorClass) {\n    var deferred = jQuery.Deferred();\n    var modal = Galaxy.modal || new _uiModal2.default.View();\n    var creator;\n\n    options = _.defaults(options || {}, {\n        elements: elements,\n        oncancel: function oncancel() {\n            modal.hide();\n            deferred.reject(\"cancelled\");\n        },\n        oncreate: function oncreate(creator, response) {\n            modal.hide();\n            deferred.resolve(response);\n        }\n    });\n\n    creator = new CreatorClass(options);\n    modal.show({\n        title: options.title || (0, _localization2.default)(\"Create a collection\"),\n        body: creator.$el,\n        width: \"80%\",\n        height: \"100%\",\n        closing_events: true\n    });\n    creator.render();\n    window._collectionCreator = creator;\n\n    //TODO: remove modal header\n    return deferred;\n};\n\n/** List collection flavor of collectionCreatorModal. */\nvar listCollectionCreatorModal = function _listCollectionCreatorModal(elements, options) {\n    options = options || {};\n    options.title = (0, _localization2.default)(\"Create a collection from a list of datasets\");\n    return collectionCreatorModal(elements, options, ListCollectionCreator);\n};\n\n//==============================================================================\n/** Use a modal to create a list collection, then add it to the given history contents.\n *  @returns {Deferred} resolved when the collection is added to the history.\n */\nfunction createListCollection(contents, defaultHideSourceItems) {\n    var elements = contents.toJSON();\n\n    var promise = listCollectionCreatorModal(elements, {\n        defaultHideSourceItems: defaultHideSourceItems,\n        creationFn: function creationFn(elements, name, hideSourceItems) {\n            elements = elements.map(function (element) {\n                return {\n                    id: element.id,\n                    name: element.name,\n\n                    //TODO: this allows for list:list even if the filter above does not - reconcile\n                    src: element.history_content_type === \"dataset\" ? \"hda\" : \"hdca\"\n                };\n            });\n            return contents.createHDCA(elements, \"list\", name, hideSourceItems);\n        }\n    });\n\n    return promise;\n}\n\n//==============================================================================\nexports.default = {\n    DatasetCollectionElementView: DatasetCollectionElementView,\n    ListCollectionCreator: ListCollectionCreator,\n\n    collectionCreatorModal: collectionCreatorModal,\n    listCollectionCreatorModal: listCollectionCreatorModal,\n    createListCollection: createListCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL2NvbGxlY3Rpb24vbGlzdC1jb2xsZWN0aW9uLWNyZWF0b3IuanM/ZGNmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSERDQSBmcm9tIFwibXZjL2hpc3RvcnkvaGRjYS1tb2RlbFwiO1xuaW1wb3J0IFNUQVRFUyBmcm9tIFwibXZjL2RhdGFzZXQvc3RhdGVzXCI7XG5pbXBvcnQgQkFTRV9NVkMgZnJvbSBcIm12Yy9iYXNlLW12Y1wiO1xuaW1wb3J0IGJhc2VDcmVhdG9yIGZyb20gXCJtdmMvY29sbGVjdGlvbi9iYXNlLWNyZWF0b3JcIjtcbmltcG9ydCBVSV9NT0RBTCBmcm9tIFwibXZjL3VpL3VpLW1vZGFsXCI7XG5pbXBvcnQgbmF0dXJhbFNvcnQgZnJvbSBcInV0aWxzL25hdHVyYWwtc29ydFwiO1xuaW1wb3J0IF9sIGZyb20gXCJ1dGlscy9sb2NhbGl6YXRpb25cIjtcbmltcG9ydCBcInVpL2hvdmVyaGlnaGxpZ2h0XCI7XG5cbnZhciBsb2dOYW1lc3BhY2UgPSBcImNvbGxlY3Rpb25zXCI7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5UT0RPOlxuICAgIHVzZSBwcm9wZXIgRWxlbWVudCBtb2RlbCBhbmQgbm90IGp1c3QganNvblxuICAgIHN0cmFpZ2h0ZW4gb3V0IGNyZWF0ZUZuLCBjb2xsZWN0aW9uLmNyZWF0ZUhEQ0FcbiAgICBwb3NzaWJseSBzdG9wIHVzaW5nIG1vZGFscyBmb3IgdGhpc1xuICAgIEl0IHdvdWxkIGJlIG5lYXQgdG8gZG8gYSBkcmFnIGFuZCBkcm9wXG5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiogQSB2aWV3IGZvciBib3RoIERhdGFzZXREQ0VzIGFuZCBOZXN0ZWREQ0RDRXNcbiAqICAodGhpbmdzIHRoYXQgaW1wbGVtZW50IGNvbGxlY3Rpb24tbW9kZWw6RGF0YXNldENvbGxlY3Rpb25FbGVtZW50TWl4aW4pXG4gKi9cbnZhciBEYXRhc2V0Q29sbGVjdGlvbkVsZW1lbnRWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoQkFTRV9NVkMuTG9nZ2FibGVNaXhpbikuZXh0ZW5kKHtcbiAgICBfbG9nTmFtZXNwYWNlOiBsb2dOYW1lc3BhY2UsXG5cbiAgICAvL1RPRE86IHVzZSBwcm9wZXIgY2xhc3MgKERhdGFzZXREQ0Ugb3IgTmVzdGVkRENEQ0UgKG9yIHRoZSB1bmlvbiBvZiBib3RoKSlcbiAgICB0YWdOYW1lOiBcImxpXCIsXG4gICAgY2xhc3NOYW1lOiBcImNvbGxlY3Rpb24tZWxlbWVudFwiLFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcykge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBhdHRyaWJ1dGVzLmVsZW1lbnQgfHwge307XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBhdHRyaWJ1dGVzLnNlbGVjdGVkIHx8IGZhbHNlO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRyYWdTdGFydEhhbmRsZXIgPSBfLmJpbmQodGhpcy5fZHJhZ3N0YXJ0LCB0aGlzKTtcbiAgICAgICAgdGhpcy5kcmFnRW5kSGFuZGxlciA9IF8uYmluZCh0aGlzLl9kcmFnZW5kLCB0aGlzKTtcbiAgICAgICAgdmFyIGhhbmRsZSA9IHRoaXMuJGVsXG4gICAgICAgICAgICAuYXR0cihcImRhdGEtZWxlbWVudC1pZFwiLCB0aGlzLmVsZW1lbnQuaWQpXG4gICAgICAgICAgICAuYXR0cihcImRyYWdnYWJsZVwiLCB0cnVlKVxuICAgICAgICAgICAgLmh0bWwodGhpcy50ZW1wbGF0ZSh7IGVsZW1lbnQ6IHRoaXMuZWxlbWVudCB9KSlcbiAgICAgICAgICAgIC5nZXQoMCk7XG4gICAgICAgIGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIHRoaXMuZHJhZ1N0YXJ0SGFuZGxlciwgZmFsc2UpO1xuICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbmRcIiwgdGhpcy5kcmFnRW5kSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy9UT0RPOiBsb3RzIG9mIHVudXNlZCBzcGFjZSBpbiB0aGUgZWxlbWVudCAtIHBvc3NpYmx5IGxvYWQgZGV0YWlscyBhbmQgZGlzcGxheSB0aGVtIGhvcml6LlxuICAgIHRlbXBsYXRlOiBfLnRlbXBsYXRlKFxuICAgICAgICBbXG4gICAgICAgICAgICAnPGEgY2xhc3M9XCJuYW1lXCIgdGl0bGU9XCInLFxuICAgICAgICAgICAgX2woXCJDbGljayB0byByZW5hbWVcIiksXG4gICAgICAgICAgICAnXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiPicsXG4gICAgICAgICAgICBcIjwlLSBlbGVtZW50Lm5hbWUgJT5cIixcbiAgICAgICAgICAgIFwiPC9hPlwiLFxuICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJkaXNjYXJkIGJ0biBidG4tc21cIiB0aXRsZT1cIicsXG4gICAgICAgICAgICBfbChcIlJlbW92ZSB0aGlzIGRhdGFzZXQgZnJvbSB0aGUgbGlzdFwiKSxcbiAgICAgICAgICAgICdcIj4nLFxuICAgICAgICAgICAgX2woXCJEaXNjYXJkXCIpLFxuICAgICAgICAgICAgXCI8L2J1dHRvbj5cIlxuICAgICAgICBdLmpvaW4oXCJcIilcbiAgICApLFxuXG4gICAgLyoqIHNlbGVjdCB0aGlzIGVsZW1lbnQgYW5kIHB1YiAqL1xuICAgIHNlbGVjdDogZnVuY3Rpb24odG9nZ2xlKSB7XG4gICAgICAgIHRoaXMuJGVsLnRvZ2dsZUNsYXNzKFwic2VsZWN0ZWRcIiwgdG9nZ2xlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFwic2VsZWN0XCIsIHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgIHNlbGVjdGVkOiB0aGlzLiRlbC5oYXNDbGFzcyhcInNlbGVjdGVkXCIpXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKiogYW5pbWF0ZSB0aGUgcmVtb3ZhbCBvZiB0aGlzIGVsZW1lbnQgYW5kIHB1YiAqL1xuICAgIGRpc2NhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmlldyA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJlbnRXaWR0aCA9IHRoaXMuJGVsLnBhcmVudCgpLndpZHRoKCk7XG4gICAgICAgIHRoaXMuJGVsLmFuaW1hdGUoeyBcIm1hcmdpbi1yaWdodFwiOiBwYXJlbnRXaWR0aCB9LCBcImZhc3RcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdmlldy50cmlnZ2VyKFwiZGlzY2FyZFwiLCB7XG4gICAgICAgICAgICAgICAgc291cmNlOiB2aWV3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpZXcuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIHJlbW92ZSB0aGUgRE9NIGFuZCBhbnkgbGlzdGVuZXJzICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICAgIHRoaXMuJGVsLnJlbW92ZSgpO1xuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgY2xpY2s6IFwiX2NsaWNrXCIsXG4gICAgICAgIFwiY2xpY2sgLm5hbWVcIjogXCJfY2xpY2tOYW1lXCIsXG4gICAgICAgIFwiY2xpY2sgLmRpc2NhcmRcIjogXCJfY2xpY2tEaXNjYXJkXCIsXG5cbiAgICAgICAgZHJhZ292ZXI6IFwiX3NlbmRUb1BhcmVudFwiLFxuICAgICAgICBkcm9wOiBcIl9zZW5kVG9QYXJlbnRcIlxuICAgIH0sXG5cbiAgICAvKiogc2VsZWN0IHdoZW4gdGhlIGxpIGlzIGNsaWNrZWQgKi9cbiAgICBfY2xpY2s6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnNlbGVjdChldik7XG4gICAgfSxcblxuICAgIC8qKiByZW5hbWUgYSBwYWlyIHdoZW4gdGhlIG5hbWUgaXMgY2xpY2tlZCAqL1xuICAgIF9jbGlja05hbWU6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHZhciBwcm9tcHRTdHJpbmcgPSBbXG4gICAgICAgICAgICBfbChcIkVudGVyIGEgbmV3IG5hbWUgZm9yIHRoZSBlbGVtZW50XCIpLFxuICAgICAgICAgICAgXCI6XFxuKFwiLFxuICAgICAgICAgICAgX2woXCJOb3RlIHRoYXQgY2hhbmdpbmcgdGhlIG5hbWUgaGVyZSB3aWxsIG5vdCByZW5hbWUgdGhlIGRhdGFzZXRcIiksXG4gICAgICAgICAgICBcIilcIlxuICAgICAgICBdLmpvaW4oXCJcIik7XG5cbiAgICAgICAgdmFyIHJlc3BvbnNlID0gcHJvbXB0KGAke19sKFwiRW50ZXIgYSBuZXcgbmFtZSBmb3IgdGhlIGVsZW1lbnRcIil9OmAsIHRoaXMuZWxlbWVudC5uYW1lKTtcblxuICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5uYW1lID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vVE9ETzogY2FuY2VsbGluZyB3aXRoIEVTQyBsZWFkcyB0byBjbG9zdXJlIG9mIHRoZSBjcmVhdG9yLi4uXG4gICAgfSxcblxuICAgIC8qKiBkaXNjYXJkIHdoZW4gdGhlIGRpc2NhcmQgYnV0dG9uIGlzIGNsaWNrZWQgKi9cbiAgICBfY2xpY2tEaXNjYXJkOiBmdW5jdGlvbihldikge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5kaXNjYXJkKCk7XG4gICAgfSxcblxuICAgIC8qKiBkcmFnZ2luZyBwYWlycyBmb3IgcmUtb3JkZXJpbmcgKi9cbiAgICBfZHJhZ3N0YXJ0OiBmdW5jdGlvbihldikge1xuICAgICAgICBpZiAoZXYub3JpZ2luYWxFdmVudCkge1xuICAgICAgICAgICAgZXYgPSBldi5vcmlnaW5hbEV2ZW50O1xuICAgICAgICB9XG4gICAgICAgIGV2LmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gXCJtb3ZlXCI7XG4gICAgICAgIGV2LmRhdGFUcmFuc2Zlci5zZXREYXRhKFwidGV4dC9wbGFpblwiLCBKU09OLnN0cmluZ2lmeSh0aGlzLmVsZW1lbnQpKTtcblxuICAgICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImRyYWdnaW5nXCIpO1xuICAgICAgICB0aGlzLiRlbC5wYXJlbnQoKS50cmlnZ2VyKFwiY29sbGVjdGlvbi1lbGVtZW50LmRyYWdzdGFydFwiLCBbdGhpc10pO1xuICAgIH0sXG5cbiAgICAvKiogZHJhZ2dpbmcgZm9yIHJlLW9yZGVyaW5nICovXG4gICAgX2RyYWdlbmQ6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHRoaXMuJGVsLnJlbW92ZUNsYXNzKFwiZHJhZ2dpbmdcIik7XG4gICAgICAgIHRoaXMuJGVsLnBhcmVudCgpLnRyaWdnZXIoXCJjb2xsZWN0aW9uLWVsZW1lbnQuZHJhZ2VuZFwiLCBbdGhpc10pO1xuICAgIH0sXG5cbiAgICAvKiogbWFudWFsbHkgYnViYmxlIHVwIGFuIGV2ZW50IHRvIHRoZSBwYXJlbnQvY29udGFpbmVyICovXG4gICAgX3NlbmRUb1BhcmVudDogZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdGhpcy4kZWwucGFyZW50KCkudHJpZ2dlcihldik7XG4gICAgfSxcblxuICAgIC8qKiBzdHJpbmcgcmVwICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJEYXRhc2V0Q29sbGVjdGlvbkVsZW1lbnRWaWV3KClcIjtcbiAgICB9XG59KTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqIEFuIGludGVyZmFjZSBmb3IgYnVpbGRpbmcgY29sbGVjdGlvbnMuXG4gKi9cbnZhciBMaXN0Q29sbGVjdGlvbkNyZWF0b3IgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZChCQVNFX01WQy5Mb2dnYWJsZU1peGluKVxuICAgIC5leHRlbmQoYmFzZUNyZWF0b3IuQ29sbGVjdGlvbkNyZWF0b3JNaXhpbilcbiAgICAuZXh0ZW5kKHtcbiAgICAgICAgX2xvZ05hbWVzcGFjZTogbG9nTmFtZXNwYWNlLFxuXG4gICAgICAgIC8qKiB0aGUgY2xhc3MgdXNlZCB0byBkaXNwbGF5IGluZGl2aWR1YWwgZWxlbWVudHMgKi9cbiAgICAgICAgZWxlbWVudFZpZXdDbGFzczogRGF0YXNldENvbGxlY3Rpb25FbGVtZW50VmlldyxcbiAgICAgICAgLyoqIHRoZSBjbGFzcyB0aGlzIGNyZWF0b3Igd2lsbCBjcmVhdGUgYW5kIHNhdmUgKi9cbiAgICAgICAgY29sbGVjdGlvbkNsYXNzOiBIRENBLkhpc3RvcnlEYXRhc2V0Q29sbGVjdGlvbixcbiAgICAgICAgY2xhc3NOYW1lOiBcImxpc3QtY29sbGVjdGlvbi1jcmVhdG9yIGNvbGxlY3Rpb24tY3JlYXRvciBmbGV4LXJvdy1jb250YWluZXJcIixcblxuICAgICAgICAvKiogbWluaW11bSBudW1iZXIgb2YgdmFsaWQgZWxlbWVudHMgdG8gc3RhcnQgd2l0aCBpbiBvcmRlciB0byBidWlsZCBhIGNvbGxlY3Rpb24gb2YgdGhpcyB0eXBlICovXG4gICAgICAgIG1pbkVsZW1lbnRzOiAxLFxuXG4gICAgICAgIGRlZmF1bHRBdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAvL1RPRE86IHJlbW92ZSAtIHVzZSBuZXcgY29sbGVjdGlvbkNsYXNzKCkuc2F2ZSgpXG4gICAgICAgICAgICAvKiogdGFrZXMgZWxlbWVudHMgYW5kIGNyZWF0ZXMgdGhlIHByb3BlciBjb2xsZWN0aW9uIC0gcmV0dXJucyBhIHByb21pc2UgKi9cbiAgICAgICAgICAgIGNyZWF0aW9uRm46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJubyBjcmVhdGlvbiBmbiBmb3IgY3JlYXRvclwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKiogZm4gdG8gY2FsbCB3aGVuIHRoZSBjb2xsZWN0aW9uIGlzIGNyZWF0ZWQgKHNjb3BlZCB0byB0aGlzKSAqL1xuICAgICAgICAgICAgb25jcmVhdGU6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAvKiogZm4gdG8gY2FsbCB3aGVuIHRoZSBjYW5jZWwgYnV0dG9uIGlzIGNsaWNrZWQgKHNjb3BlZCB0byB0aGlzKSAtIGlmIGZhbHN5LCBubyBidG4gaXMgZGlzcGxheWVkICovXG4gICAgICAgICAgICBvbmNhbmNlbDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgIC8qKiBkaXN0YW5jZSBmcm9tIGxpc3QgZWRnZSB0byBiZWdpbiBhdXRvc2Nyb2xsaW5nIGxpc3QgKi9cbiAgICAgICAgICAgIGF1dG9zY3JvbGxEaXN0OiAyNCxcbiAgICAgICAgICAgIC8qKiBDb2xvciBwYXNzZWQgdG8gaG92ZXJoaWdobGlnaHQgKi9cbiAgICAgICAgICAgIGhpZ2hsaWdodENscjogXCJyZ2JhKCA2NCwgMjU1LCAyNTUsIDEuMCApXCJcbiAgICAgICAgfSxcblxuICAgICAgICBmb290ZXJTZXR0aW5nczoge1xuICAgICAgICAgICAgXCIuaGlkZS1vcmlnaW5hbHNcIjogXCJoaWRlT3JpZ2luYWxzXCJcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogc2V0IHVwIGluaXRpYWwgb3B0aW9ucywgaW5zdGFuY2UgdmFycywgYmVoYXZpb3JzICovXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMubWV0cmljKFwiTGlzdENvbGxlY3Rpb25DcmVhdG9yLmluaXRpYWxpemVcIiwgYXR0cmlidXRlcyk7XG4gICAgICAgICAgICB2YXIgY3JlYXRvciA9IHRoaXM7XG4gICAgICAgICAgICBfLmVhY2godGhpcy5kZWZhdWx0QXR0cmlidXRlcywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGF0dHJpYnV0ZXNba2V5XSB8fCB2YWx1ZTtcbiAgICAgICAgICAgICAgICBjcmVhdG9yW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiogdW5vcmRlcmVkLCBvcmlnaW5hbCBsaXN0IC0gY2FjaGUgdG8gYWxsb3cgcmV2ZXJzYWwgKi9cbiAgICAgICAgICAgIGNyZWF0b3IuaW5pdGlhbEVsZW1lbnRzID0gYXR0cmlidXRlcy5lbGVtZW50cyB8fCBbXTtcblxuICAgICAgICAgICAgdGhpcy5fc2V0VXBDb21tb25TZXR0aW5ncyhhdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlU2V0VXAoKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRzU2V0VXAoKTtcbiAgICAgICAgICAgIHRoaXMuX3NldFVwQmVoYXZpb3JzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIHNldCB1cCBpbnN0YW5jZSB2YXJzICovXG4gICAgICAgIF9pbnN0YW5jZVNldFVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qKiBJZHMgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gc2VsZWN0ZWQgYnkgdGhlIHVzZXIgLSB0byBwcmVzZXJ2ZSBvdmVyIHJlbmRlcnMgKi9cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJZHMgPSB7fTtcbiAgICAgICAgICAgIC8qKiBET00gZWxlbWVudHMgY3VycmVudGx5IGJlaW5nIGRyYWdnZWQgKi9cbiAgICAgICAgICAgIHRoaXMuJGRyYWdnaW5nID0gbnVsbDtcbiAgICAgICAgICAgIC8qKiBVc2VkIGZvciBibG9ja2luZyBVSSBldmVudHMgZHVyaW5nIGFqYXgvb3BlcmF0aW9ucyAoZG9uJ3QgcG9zdCB0d2ljZSkgKi9cbiAgICAgICAgICAgIHRoaXMuYmxvY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcHJvY2VzcyByYXcgbGlzdFxuICAgICAgICAvKiogc2V0IHVwIG1haW4gZGF0YSAqL1xuICAgICAgICBfZWxlbWVudHNTZXRVcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL3RoaXMuZGVidWcoICctLSBfZGF0YVNldFVwJyApO1xuICAgICAgICAgICAgLyoqIGEgbGlzdCBvZiBpbnZhbGlkIGVsZW1lbnRzIGFuZCB0aGUgcmVhc29ucyB0aGV5IGFyZW4ndCB2YWxpZCAqL1xuICAgICAgICAgICAgdGhpcy5pbnZhbGlkRWxlbWVudHMgPSBbXTtcbiAgICAgICAgICAgIC8vVE9ETzogaGFuZGxlIGZ1bmRhbWVudGFsIHByb2JsZW0gb2Ygc3luY2luZyBET00sIHZpZXdzLCBhbmQgbGlzdCBoZXJlXG4gICAgICAgICAgICAvKiogZGF0YSBmb3IgbGlzdCBpbiBwcm9ncmVzcyAqL1xuICAgICAgICAgICAgdGhpcy53b3JraW5nRWxlbWVudHMgPSBbXTtcbiAgICAgICAgICAgIC8qKiB2aWV3cyBmb3Igd29ya2luZ0VsZW1lbnRzICovXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRWaWV3cyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBjb3B5IGluaXRpYWwgbGlzdCwgc29ydCwgYWRkIGlkcyBpZiBuZWVkZWRcbiAgICAgICAgICAgIHRoaXMud29ya2luZ0VsZW1lbnRzID0gdGhpcy5pbml0aWFsRWxlbWVudHMuc2xpY2UoMCk7XG4gICAgICAgICAgICB0aGlzLl9lbnN1cmVFbGVtZW50SWRzKCk7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0ZUVsZW1lbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9tYW5nbGVEdXBsaWNhdGVOYW1lcygpO1xuICAgICAgICAgICAgdGhpcy5fc29ydEVsZW1lbnRzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIGFkZCBpZHMgdG8gZGF0YXNldCBvYmpzIGluIGluaXRpYWwgbGlzdCBpZiBub25lICovXG4gICAgICAgIF9lbnN1cmVFbGVtZW50SWRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMud29ya2luZ0VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50Lmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5pZCA9IF8udW5pcXVlSWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndvcmtpbmdFbGVtZW50cztcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogc2VwYXJhdGUgd29ya2luZyBsaXN0IGludG8gdmFsaWQgYW5kIGludmFsaWQgZWxlbWVudHMgZm9yIHRoaXMgY29sbGVjdGlvbiAqL1xuICAgICAgICBfdmFsaWRhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY3JlYXRvciA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdOYW1lcyA9IHt9O1xuICAgICAgICAgICAgY3JlYXRvci5pbnZhbGlkRWxlbWVudHMgPSBbXTtcblxuICAgICAgICAgICAgdGhpcy53b3JraW5nRWxlbWVudHMgPSB0aGlzLndvcmtpbmdFbGVtZW50cy5maWx0ZXIoZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHByb2JsZW0gPSBjcmVhdG9yLl9pc0VsZW1lbnRJbnZhbGlkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9ibGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0b3IuaW52YWxpZEVsZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHByb2JsZW1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhcHJvYmxlbTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud29ya2luZ0VsZW1lbnRzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBkZXNjcmliZSB3aGF0IGlzIHdyb25nIHdpdGggYSBwYXJ0aWN1bGFyIGVsZW1lbnQgaWYgYW55dGhpbmcgKi9cbiAgICAgICAgX2lzRWxlbWVudEludmFsaWQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Lmhpc3RvcnlfY29udGVudF90eXBlICE9PSBcImRhdGFzZXRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfbChcImlzIG5vdCBhIGRhdGFzZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsaWRTdGF0ZSA9IGVsZW1lbnQuc3RhdGUgPT09IFNUQVRFUy5PSyB8fCBfLmNvbnRhaW5zKFNUQVRFUy5OT1RfUkVBRFlfU1RBVEVTLCBlbGVtZW50LnN0YXRlKTtcbiAgICAgICAgICAgIGlmICghdmFsaWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfbChcImhhcyBlcnJvcmVkLCBpcyBwYXVzZWQsIG9yIGlzIG5vdCBhY2Nlc3NpYmxlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuZGVsZXRlZCB8fCBlbGVtZW50LnB1cmdlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfbChcImhhcyBiZWVuIGRlbGV0ZWQgb3IgcHVyZ2VkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIG1hbmdsZSBkdXBsaWNhdGUgbmFtZXMgdXNpbmcgYSBtYWMtbGlrZSAnKGNvdW50ZXIpJyBhZGRpdGlvbiB0byBhbnkgZHVwbGljYXRlcyAqL1xuICAgICAgICBfbWFuZ2xlRHVwbGljYXRlTmFtZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIFNBRkVUWSA9IDkwMDtcbiAgICAgICAgICAgIHZhciBjb3VudGVyID0gMTtcbiAgICAgICAgICAgIHZhciBleGlzdGluZ05hbWVzID0ge307XG4gICAgICAgICAgICB0aGlzLndvcmtpbmdFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyTmFtZSA9IGVsZW1lbnQubmFtZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZXhpc3RpbmdOYW1lcy5oYXNPd25Qcm9wZXJ0eShjdXJyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyck5hbWUgPSBgJHtlbGVtZW50Lm5hbWV9ICgke2NvdW50ZXJ9KWA7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ZXIgPj0gU0FGRVRZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTYWZldHkgaGl0IGluIHdoaWxlIGxvb3AgLSB0aGF0cyBpbXByZXNzaXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsZW1lbnQubmFtZSA9IGN1cnJOYW1lO1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nTmFtZXNbZWxlbWVudC5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogc29ydCBhIGxpc3Qgb2YgZWxlbWVudHMgKi9cbiAgICAgICAgX3NvcnRFbGVtZW50czogZnVuY3Rpb24obGlzdCkge1xuICAgICAgICAgICAgLy8gLy8gY3VycmVudGx5IG9ubHkgbmF0dXJhbCBzb3J0IGJ5IG5hbWVcbiAgICAgICAgICAgIC8vIHRoaXMud29ya2luZ0VsZW1lbnRzLnNvcnQoIGZ1bmN0aW9uKCBhLCBiICl7IHJldHVybiBuYXR1cmFsU29ydCggYS5uYW1lLCBiLm5hbWUgKTsgfSk7XG4gICAgICAgICAgICAvLyByZXR1cm4gdGhpcy53b3JraW5nRWxlbWVudHM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHJlbmRlcmluZ1xuICAgICAgICAvLyB0ZW1wbGF0ZXMgOiBMaXN0Q29sbGVjdGlvbkNyZWF0b3IudGVtcGxhdGVzLFxuICAgICAgICAvKiogcmVuZGVyIHRoZSBlbnRpcmUgaW50ZXJmYWNlICovXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvL3RoaXMuZGVidWcoICctLSBfcmVuZGVyJyApO1xuICAgICAgICAgICAgaWYgKHRoaXMud29ya2luZ0VsZW1lbnRzLmxlbmd0aCA8IHRoaXMubWluRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVySW52YWxpZChzcGVlZCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRlbC5lbXB0eSgpLmh0bWwodGhpcy50ZW1wbGF0ZXMubWFpbigpKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckhlYWRlcihzcGVlZCk7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJNaWRkbGUoc3BlZWQpO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRm9vdGVyKHNwZWVkKTtcbiAgICAgICAgICAgIHRoaXMuX2FkZFBsdWdpbkNvbXBvbmVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuJChcIi5jb2xsZWN0aW9uLW5hbWVcIikuZm9jdXMoKTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIsIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIHJlbmRlciBhIHNpbXBsaWZpZWQgaW50ZXJmYWNlIGFpbWVkIGF0IHRlbGxpbmcgdGhlIHVzZXIgd2h5IHRoZXkgY2FuJ3QgbW92ZSBmb3J3YXJkICovXG4gICAgICAgIF9yZW5kZXJJbnZhbGlkOiBmdW5jdGlvbihzcGVlZCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vdGhpcy5kZWJ1ZyggJy0tIF9yZW5kZXInICk7XG4gICAgICAgICAgICB0aGlzLiRlbC5lbXB0eSgpLmh0bWwoXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZXMuaW52YWxpZEluaXRpYWwoe1xuICAgICAgICAgICAgICAgICAgICBwcm9ibGVtczogdGhpcy5pbnZhbGlkRWxlbWVudHMsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzOiB0aGlzLndvcmtpbmdFbGVtZW50c1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uY2FuY2VsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQoXCIuY2FuY2VsLWNyZWF0ZS5idG5cIikuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIiwgdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogcmVuZGVyIHRoZSBoZWFkZXIgc2VjdGlvbiAqL1xuICAgICAgICBfcmVuZGVySGVhZGVyOiBmdW5jdGlvbihzcGVlZCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciAkaGVhZGVyID0gdGhpcy4kKFwiLmhlYWRlclwiKVxuICAgICAgICAgICAgICAgIC5lbXB0eSgpXG4gICAgICAgICAgICAgICAgLmh0bWwodGhpcy50ZW1wbGF0ZXMuaGVhZGVyKCkpXG4gICAgICAgICAgICAgICAgLmZpbmQoXCIuaGVscC1jb250ZW50XCIpXG4gICAgICAgICAgICAgICAgLnByZXBlbmQoJCh0aGlzLnRlbXBsYXRlcy5oZWxwQ29udGVudCgpKSk7XG4gICAgICAgICAgICAvL1RPRE86IHNob3VsZCBvbmx5IHNob3cgb25jZSBkZXNwaXRlIGNhbGxpbmcgX3JlbmRlckhlYWRlciBhZ2FpblxuICAgICAgICAgICAgaWYgKHRoaXMuaW52YWxpZEVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludmFsaWRFbGVtZW50c0FsZXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJGhlYWRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogcmVuZGVyIHRoZSBtaWRkbGUgaW5jbHVkaW5nIHRoZSBlbGVtZW50cyAqL1xuICAgICAgICBfcmVuZGVyTWlkZGxlOiBmdW5jdGlvbihzcGVlZCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciAkbWlkZGxlID0gdGhpcy4kKFwiLm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgIC5lbXB0eSgpXG4gICAgICAgICAgICAgICAgLmh0bWwodGhpcy50ZW1wbGF0ZXMubWlkZGxlKCkpO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyTGlzdChzcGVlZCk7XG4gICAgICAgICAgICByZXR1cm4gJG1pZGRsZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogYWRkIGFueSBqUXVlcnkvYm9vdHN0cmFwL2N1c3RvbSBwbHVnaW5zIHRvIGVsZW1lbnRzIHJlbmRlcmVkICovXG4gICAgICAgIF9hZGRQbHVnaW5Db21wb25lbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJChcIi5oZWxwLWNvbnRlbnQgaVwiKS5ob3ZlcmhpZ2hsaWdodChcIi5jb2xsZWN0aW9uLWNyZWF0b3JcIiwgdGhpcy5oaWdobGlnaHRDbHIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBidWlsZCBhbmQgc2hvdyBhbiBhbGVydCBkZXNjcmliaW5nIGFueSBlbGVtZW50cyB0aGF0IGNvdWxkIG5vdCBiZSBpbmNsdWRlZCBkdWUgdG8gcHJvYmxlbXMgKi9cbiAgICAgICAgX2ludmFsaWRFbGVtZW50c0FsZXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3dBbGVydChcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlcy5pbnZhbGlkRWxlbWVudHMoe1xuICAgICAgICAgICAgICAgICAgICBwcm9ibGVtczogdGhpcy5pbnZhbGlkRWxlbWVudHNcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBcImFsZXJ0LXdhcm5pbmdcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfZGlzYWJsZU5hbWVBbmRDcmVhdGU6IGZ1bmN0aW9uKGRpc2FibGUpIHtcbiAgICAgICAgICAgIGRpc2FibGUgPSAhXy5pc1VuZGVmaW5lZChkaXNhYmxlKSA/IGRpc2FibGUgOiB0cnVlO1xuICAgICAgICAgICAgaWYgKGRpc2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQoXCIuY29sbGVjdGlvbi1uYW1lXCIpLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQoXCIuY3JlYXRlLWNvbGxlY3Rpb25cIikudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vICAgICB0aGlzLiQoICcuY29sbGVjdGlvbi1uYW1lJyApLnByb3AoICdkaXNhYmxlZCcsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgLy8gICAgIHRoaXMuJCggJy5jcmVhdGUtY29sbGVjdGlvbicgKS5yZW1vdmVDbGFzcyggJ2Rpc2FibGUnICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHJlbmRlcmluZyBlbGVtZW50c1xuICAgICAgICAvKiogY29udi4gdG8gdGhlIG1haW4gbGlzdCBkaXNwbGF5IERPTSAqL1xuICAgICAgICAkbGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kKFwiLmNvbGxlY3Rpb24tZWxlbWVudHNcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIHNob3cgb3IgaGlkZSB0aGUgY2xlYXIgc2VsZWN0ZWQgY29udHJvbCBiYXNlZCBvbiB0aGUgbnVtIG9mIHNlbGVjdGVkIGVsZW1lbnRzICovXG4gICAgICAgIF9yZW5kZXJDbGVhclNlbGVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChfLnNpemUodGhpcy5zZWxlY3RlZElkcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQoXCIuY29sbGVjdGlvbi1lbGVtZW50cy1jb250cm9scyA+IC5jbGVhci1zZWxlY3RlZFwiKS5zaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuJChcIi5jb2xsZWN0aW9uLWVsZW1lbnRzLWNvbnRyb2xzID4gLmNsZWFyLXNlbGVjdGVkXCIpLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKiogcmVuZGVyIHRoZSBlbGVtZW50cyBpbiBvcmRlciAob3IgYSB3YXJuaW5nIGlmIG5vIGVsZW1lbnRzIGZvdW5kKSAqL1xuICAgICAgICBfcmVuZGVyTGlzdDogZnVuY3Rpb24oc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvL3RoaXMuZGVidWcoICctLSBfcmVuZGVyTGlzdCcgKTtcbiAgICAgICAgICAgIHZhciBjcmVhdG9yID0gdGhpcztcblxuICAgICAgICAgICAgdmFyICR0bXAgPSBqUXVlcnkoXCI8ZGl2Lz5cIik7XG4gICAgICAgICAgICB2YXIgJGxpc3QgPSBjcmVhdG9yLiRsaXN0KCk7XG5cbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLmVsZW1lbnRWaWV3cywgdmlldyA9PiB7XG4gICAgICAgICAgICAgICAgdmlldy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgY3JlYXRvci5yZW1vdmVFbGVtZW50Vmlldyh2aWV3KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBpZiggIXRoaXMud29ya2luZ0VsZW1lbnRzLmxlbmd0aCApe1xuICAgICAgICAgICAgLy8gICAgIHRoaXMuX3JlbmRlck5vVmFsaWRFbGVtZW50cygpO1xuICAgICAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgY3JlYXRvci53b3JraW5nRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFZpZXcgPSBjcmVhdG9yLl9jcmVhdGVFbGVtZW50VmlldyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAkdG1wLmFwcGVuZChlbGVtZW50Vmlldy4kZWwpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNyZWF0b3IuX3JlbmRlckNsZWFyU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgICRsaXN0LmVtcHR5KCkuYXBwZW5kKCR0bXAuY2hpbGRyZW4oKSk7XG4gICAgICAgICAgICBfLmludm9rZShjcmVhdG9yLmVsZW1lbnRWaWV3cywgXCJyZW5kZXJcIik7XG5cbiAgICAgICAgICAgIGlmICgkbGlzdC5oZWlnaHQoKSA+ICRsaXN0LmNzcyhcIm1heC1oZWlnaHRcIikpIHtcbiAgICAgICAgICAgICAgICAkbGlzdC5jc3MoXCJib3JkZXItd2lkdGhcIiwgXCIxcHggMHB4IDFweCAwcHhcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRsaXN0LmNzcyhcImJvcmRlci13aWR0aFwiLCBcIjBweFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKiogY3JlYXRlIGFuIGVsZW1lbnQgdmlldywgY2FjaGUgaW4gZWxlbWVudFZpZXdzLCBzZXQgdXAgbGlzdGVuZXJzLCBhbmQgcmV0dXJuICovXG4gICAgICAgIF9jcmVhdGVFbGVtZW50VmlldzogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRWaWV3ID0gbmV3IHRoaXMuZWxlbWVudFZpZXdDbGFzcyh7XG4gICAgICAgICAgICAgICAgLy9UT0RPOiB1c2Ugbm9uLWdlbmVyaWMgY2xhc3Mgb3Igbm90IGFsbFxuICAgICAgICAgICAgICAgIC8vIG1vZGVsIDogQ09MTEVDVElPTi5EYXRhc2V0RENFKCBlbGVtZW50IClcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBfLmhhcyh0aGlzLnNlbGVjdGVkSWRzLCBlbGVtZW50LmlkKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRWaWV3cy5wdXNoKGVsZW1lbnRWaWV3KTtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlblRvRWxlbWVudFZpZXcoZWxlbWVudFZpZXcpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRWaWV3O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBsaXN0ZW4gdG8gYW55IGVsZW1lbnQgZXZlbnRzICovXG4gICAgICAgIF9saXN0ZW5Ub0VsZW1lbnRWaWV3OiBmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgICB2YXIgY3JlYXRvciA9IHRoaXM7XG4gICAgICAgICAgICBjcmVhdG9yLmxpc3RlblRvKHZpZXcsIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkYXRhLnNvdXJjZS5lbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRvci5zZWxlY3RlZElkc1tlbGVtZW50LmlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3JlYXRvci5zZWxlY3RlZElkc1tlbGVtZW50LmlkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjcmVhdG9yLnRyaWdnZXIoXCJlbGVtZW50czpzZWxlY3RcIiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkaXNjYXJkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0b3IudHJpZ2dlcihcImVsZW1lbnRzOmRpc2NhcmRcIiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIGFkZCBhIG5ldyBlbGVtZW50IHZpZXcgYmFzZWQgb24gdGhlIGpzb24gaW4gZWxlbWVudCAqL1xuICAgICAgICBhZGRFbGVtZW50VmlldzogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgLy9UT0RPOiB3b3JraW5nRWxlbWVudHMgaXMgc29ydGVkLCBhZGQgZWxlbWVudCBpbiBhcHByb3BvIGluZGV4XG4gICAgICAgICAgICAvLyBhZGQgZWxlbWVudCwgc29ydCBlbGVtZW50cywgZmluZCBlbGVtZW50IGluZGV4XG4gICAgICAgICAgICAvLyB2YXIgdmlldyA9IHRoaXMuX2NyZWF0ZUVsZW1lbnRWaWV3KCBlbGVtZW50ICk7XG4gICAgICAgICAgICAvLyByZXR1cm4gdmlldztcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogc3RvcCBsaXN0ZW5pbmcgdG8gdmlldyBhbmQgcmVtb3ZlIGZyb20gY2FjaGVzICovXG4gICAgICAgIHJlbW92ZUVsZW1lbnRWaWV3OiBmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZWxlY3RlZElkc1t2aWV3LmVsZW1lbnQuaWRdO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyQ2xlYXJTZWxlY3RlZCgpO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRWaWV3cyA9IF8ud2l0aG91dCh0aGlzLmVsZW1lbnRWaWV3cywgdmlldyk7XG4gICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcodmlldyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIHJlbmRlciBhIG1lc3NhZ2UgaW4gdGhlIGxpc3QgdGhhdCBubyBlbGVtZW50cyByZW1haW4gdG8gY3JlYXRlIGEgY29sbGVjdGlvbiAqL1xuICAgICAgICBfcmVuZGVyTm9FbGVtZW50c0xlZnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hbWVBbmRDcmVhdGUodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLiQoXCIuY29sbGVjdGlvbi1lbGVtZW50c1wiKS5hcHBlbmQodGhpcy50ZW1wbGF0ZXMubm9FbGVtZW50c0xlZnQoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gLyoqIHJlbmRlciBhIG1lc3NhZ2UgaW4gdGhlIGxpc3QgdGhhdCBubyB2YWxpZCBlbGVtZW50cyB3ZXJlIGZvdW5kIHRvIGNyZWF0ZSBhIGNvbGxlY3Rpb24gKi9cbiAgICAgICAgLy8gX3JlbmRlck5vVmFsaWRFbGVtZW50cyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICB0aGlzLl9kaXNhYmxlTmFtZUFuZENyZWF0ZSggdHJ1ZSApO1xuICAgICAgICAvLyAgICAgdGhpcy4kKCAnLmNvbGxlY3Rpb24tZWxlbWVudHMnICkuYXBwZW5kKCB0aGlzLnRlbXBsYXRlcy5ub1ZhbGlkRWxlbWVudHMoKSApO1xuICAgICAgICAvLyB9LFxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBBUElcbiAgICAgICAgLyoqIGNvbnZlcnQgZWxlbWVudCBpbnRvIEpTT04gY29tcGF0aWJsZSB3aXRoIHRoZSBjb2xsZWN0aW9ucyBBUEkgKi9cbiAgICAgICAgX2VsZW1lbnRUb0pTT046IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIHJldHVybiBlbGVtZW50LnRvSlNPTigpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIGNyZWF0ZSB0aGUgY29sbGVjdGlvbiB2aWEgdGhlIEFQSVxuICAgICAgICAgKiAgQHJldHVybnMge2pRdWVyeS54aHIgT2JqZWN0fSB0aGUganF1ZXJ5IGFqYXggcmVxdWVzdFxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlTGlzdDogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndvcmtpbmdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGAke19sKFwiTm8gdmFsaWQgZWxlbWVudHMgZm9yIGZpbmFsIGxpc3RcIil9LiBgO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYDxhIGNsYXNzPVwiY2FuY2VsLWNyZWF0ZVwiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCI+JHtfbChcIkNhbmNlbFwiKX08L2E+IGA7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSArPSBfbChcIm9yXCIpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYCA8YSBjbGFzcz1cInJlc2V0XCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIj4ke19sKFwic3RhcnQgb3ZlclwiKX08L2E+LmA7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvd0FsZXJ0KG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNyZWF0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSB0aGlzLndvcmtpbmdFbGVtZW50cy5tYXAoZWxlbWVudCA9PiBjcmVhdG9yLl9lbGVtZW50VG9KU09OKGVsZW1lbnQpKTtcblxuICAgICAgICAgICAgY3JlYXRvci5ibG9ja2luZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRvclxuICAgICAgICAgICAgICAgIC5jcmVhdGlvbkZuKGVsZW1lbnRzLCBuYW1lLCBjcmVhdG9yLmhpZGVPcmlnaW5hbHMpXG4gICAgICAgICAgICAgICAgLmFsd2F5cygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0b3IuYmxvY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mYWlsKCh4aHIsIHN0YXR1cywgbWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdG9yLnRyaWdnZXIoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogX2woXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBjcmVhdGluZyB0aGlzIGNvbGxlY3Rpb25cIilcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZG9uZShmdW5jdGlvbihyZXNwb25zZSwgbWVzc2FnZSwgeGhyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0b3IudHJpZ2dlcihcImNvbGxlY3Rpb246Y3JlYXRlZFwiLCByZXNwb25zZSwgbWVzc2FnZSwgeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRvci5tZXRyaWMoXCJjb2xsZWN0aW9uOmNyZWF0ZWRcIiwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNyZWF0b3Iub25jcmVhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRvci5vbmNyZWF0ZS5jYWxsKHRoaXMsIHJlc3BvbnNlLCBtZXNzYWdlLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV2ZW50c1xuICAgICAgICAvKiogc2V0IHVwIGV2ZW50IGhhbmRsZXJzIG9uIHNlbGYgKi9cbiAgICAgICAgX3NldFVwQmVoYXZpb3JzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub24oXCJlcnJvclwiLCB0aGlzLl9lcnJvckhhbmRsZXIpO1xuXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJyZW5kZXJlZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZDppbml0aWFsXCIsIHRoaXMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMub24oXCJlbGVtZW50czpzZWxlY3RcIiwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlckNsZWFyU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm9uKFwiZWxlbWVudHM6ZGlzY2FyZFwiLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkYXRhLnNvdXJjZS5lbGVtZW50O1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRWxlbWVudFZpZXcoZGF0YS5zb3VyY2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy53b3JraW5nRWxlbWVudHMgPSBfLndpdGhvdXQodGhpcy53b3JraW5nRWxlbWVudHMsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy53b3JraW5nRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlck5vRWxlbWVudHNMZWZ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vdGhpcy5vbiggJ2FsbCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyAgICB0aGlzLmluZm8oIGFyZ3VtZW50cyApO1xuICAgICAgICAgICAgLy99KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBoYW5kbGUgZXJyb3JzIHdpdGggZmVlZGJhY2sgYW5kIGRldGFpbHMgdG8gdGhlIHVzZXIgKGlmIGF2YWlsYWJsZSkgKi9cbiAgICAgICAgX2Vycm9ySGFuZGxlcjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihkYXRhKTtcblxuICAgICAgICAgICAgdmFyIGNyZWF0b3IgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBkYXRhLm1lc3NhZ2UgfHwgX2woXCJBbiBlcnJvciBvY2N1cnJlZFwiKTtcbiAgICAgICAgICAgIGlmIChkYXRhLnhocikge1xuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBkYXRhLnhocjtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGRhdGEubWVzc2FnZTtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDAgJiYgeGhyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ICs9IGA6ICR7X2woXCJHYWxheHkgY291bGQgbm90IGJlIHJlYWNoZWQgYW5kIG1heSBiZSB1cGRhdGluZy5cIil9JHtfbChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIFRyeSBhZ2FpbiBpbiBhIGZldyBtaW51dGVzLlwiXG4gICAgICAgICAgICAgICAgICAgICl9YDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHhoci5yZXNwb25zZUpTT04pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSBgOjxiciAvPjxwcmU+JHtKU09OLnN0cmluZ2lmeSh4aHIucmVzcG9uc2VKU09OKX08L3ByZT5gO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gYDogJHttZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3JlYXRvci5fc2hvd0FsZXJ0KGNvbnRlbnQsIFwiYWxlcnQtZGFuZ2VyXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgLy8gaGVhZGVyXG4gICAgICAgICAgICBcImNsaWNrIC5tb3JlLWhlbHBcIjogXCJfY2xpY2tNb3JlSGVscFwiLFxuICAgICAgICAgICAgXCJjbGljayAubGVzcy1oZWxwXCI6IFwiX2NsaWNrTGVzc0hlbHBcIixcbiAgICAgICAgICAgIFwiY2xpY2sgLm1haW4taGVscFwiOiBcIl90b2dnbGVIZWxwXCIsXG4gICAgICAgICAgICBcImNsaWNrIC5oZWFkZXIgLmFsZXJ0IGJ1dHRvblwiOiBcIl9oaWRlQWxlcnRcIixcblxuICAgICAgICAgICAgXCJjbGljayAucmVzZXRcIjogXCJyZXNldFwiLFxuICAgICAgICAgICAgXCJjbGljayAuY2xlYXItc2VsZWN0ZWRcIjogXCJjbGVhclNlbGVjdGVkRWxlbWVudHNcIixcblxuICAgICAgICAgICAgLy8gZWxlbWVudHMgLSBzZWxlY3Rpb25cbiAgICAgICAgICAgIFwiY2xpY2sgLmNvbGxlY3Rpb24tZWxlbWVudHNcIjogXCJjbGVhclNlbGVjdGVkRWxlbWVudHNcIixcblxuICAgICAgICAgICAgLy8gZWxlbWVudHMgLSBkcm9wIHRhcmdldFxuICAgICAgICAgICAgLy8gJ2RyYWdlbnRlciAuY29sbGVjdGlvbi1lbGVtZW50cyc6ICdfZHJhZ2VudGVyRWxlbWVudHMnLFxuICAgICAgICAgICAgLy8gJ2RyYWdsZWF2ZSAuY29sbGVjdGlvbi1lbGVtZW50cyc6ICdfZHJhZ2xlYXZlRWxlbWVudHMnLFxuICAgICAgICAgICAgXCJkcmFnb3ZlciAuY29sbGVjdGlvbi1lbGVtZW50c1wiOiBcIl9kcmFnb3ZlckVsZW1lbnRzXCIsXG4gICAgICAgICAgICBcImRyb3AgLmNvbGxlY3Rpb24tZWxlbWVudHNcIjogXCJfZHJvcEVsZW1lbnRzXCIsXG5cbiAgICAgICAgICAgIC8vIHRoZXNlIGJ1YmJsZSB1cCBmcm9tIHRoZSBlbGVtZW50cyBhcyBjdXN0b20gZXZlbnRzXG4gICAgICAgICAgICBcImNvbGxlY3Rpb24tZWxlbWVudC5kcmFnc3RhcnQgLmNvbGxlY3Rpb24tZWxlbWVudHNcIjogXCJfZWxlbWVudERyYWdzdGFydFwiLFxuICAgICAgICAgICAgXCJjb2xsZWN0aW9uLWVsZW1lbnQuZHJhZ2VuZCAgIC5jb2xsZWN0aW9uLWVsZW1lbnRzXCI6IFwiX2VsZW1lbnREcmFnZW5kXCIsXG5cbiAgICAgICAgICAgIC8vIGZvb3RlclxuICAgICAgICAgICAgXCJjaGFuZ2UgLmNvbGxlY3Rpb24tbmFtZVwiOiBcIl9jaGFuZ2VOYW1lXCIsXG4gICAgICAgICAgICBcImtleWRvd24gLmNvbGxlY3Rpb24tbmFtZVwiOiBcIl9uYW1lQ2hlY2tGb3JFbnRlclwiLFxuICAgICAgICAgICAgXCJjaGFuZ2UgLmhpZGUtb3JpZ2luYWxzXCI6IFwiX2NoYW5nZUhpZGVPcmlnaW5hbHNcIixcbiAgICAgICAgICAgIFwiY2xpY2sgLmNhbmNlbC1jcmVhdGVcIjogXCJfY2FuY2VsQ3JlYXRlXCIsXG4gICAgICAgICAgICBcImNsaWNrIC5jcmVhdGUtY29sbGVjdGlvblwiOiBcIl9jbGlja0NyZWF0ZVwiIC8vLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBlbGVtZW50c1xuICAgICAgICAvKiogcmVzZXQgYWxsIGRhdGEgdG8gdGhlIGluaXRpYWwgc3RhdGUgKi9cbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VTZXRVcCgpO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudHNTZXRVcCgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogZGVzZWxlY3QgYWxsIGVsZW1lbnRzICovXG4gICAgICAgIGNsZWFyU2VsZWN0ZWRFbGVtZW50czogZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHRoaXMuJChcIi5jb2xsZWN0aW9uLWVsZW1lbnRzIC5jb2xsZWN0aW9uLWVsZW1lbnRcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIHRoaXMuJChcIi5jb2xsZWN0aW9uLWVsZW1lbnRzLWNvbnRyb2xzID4gLmNsZWFyLXNlbGVjdGVkXCIpLmhpZGUoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvL19kcmFnZW50ZXJFbGVtZW50cyA6IGZ1bmN0aW9uKCBldiApe1xuICAgICAgICAvLyAgICAvL3RoaXMuZGVidWcoICdfZHJhZ2VudGVyRWxlbWVudHM6JywgZXYgKTtcbiAgICAgICAgLy99LFxuICAgICAgICAvL1RPRE86IGlmIHNlbGVjdGVkIGFyZSBkcmFnZ2VkIG91dCBvZiB0aGUgbGlzdCBhcmVhIC0gcmVtb3ZlIHRoZSBwbGFjZWhvbGRlciAtIGN1eiBpdCB3b24ndCB3b3JrIGFueXdheVxuICAgICAgICAvLyBfZHJhZ2xlYXZlRWxlbWVudHMgOiBmdW5jdGlvbiggZXYgKXtcbiAgICAgICAgLy8gICAgLy90aGlzLmRlYnVnKCAnX2RyYWdsZWF2ZUVsZW1lbnRzOicsIGV2ICk7XG4gICAgICAgIC8vIH0sXG5cbiAgICAgICAgLyoqIHRyYWNrIHRoZSBtb3VzZSBkcmFnIG92ZXIgdGhlIGxpc3QgYWRkaW5nIGEgcGxhY2Vob2xkZXIgdG8gc2hvdyB3aGVyZSB0aGUgZHJvcCB3b3VsZCBvY2N1ciAqL1xuICAgICAgICBfZHJhZ292ZXJFbGVtZW50czogZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIC8vdGhpcy5kZWJ1ZyggJ19kcmFnb3ZlckVsZW1lbnRzOicsIGV2ICk7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2YXIgJGxpc3QgPSB0aGlzLiRsaXN0KCk7XG4gICAgICAgICAgICB0aGlzLl9jaGVja0ZvckF1dG9zY3JvbGwoJGxpc3QsIGV2Lm9yaWdpbmFsRXZlbnQuY2xpZW50WSk7XG4gICAgICAgICAgICB2YXIgJG5lYXJlc3QgPSB0aGlzLl9nZXROZWFyZXN0RWxlbWVudChldi5vcmlnaW5hbEV2ZW50LmNsaWVudFkpO1xuXG4gICAgICAgICAgICAvL1RPRE86IG5vIG5lZWQgdG8gcmUtY3JlYXRlIC0gbW92ZSBpbnN0ZWFkXG4gICAgICAgICAgICB0aGlzLiQoXCIuZWxlbWVudC1kcm9wLXBsYWNlaG9sZGVyXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdmFyICRwbGFjZWhvbGRlciA9ICQoJzxkaXYgY2xhc3M9XCJlbGVtZW50LWRyb3AtcGxhY2Vob2xkZXJcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgIGlmICghJG5lYXJlc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJGxpc3QuYXBwZW5kKCRwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRuZWFyZXN0LmJlZm9yZSgkcGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBJZiB0aGUgbW91c2UgaXMgbmVhciBlbm91Z2ggdG8gdGhlIGxpc3QncyB0b3Agb3IgYm90dG9tLCBzY3JvbGwgdGhlIGxpc3QgKi9cbiAgICAgICAgX2NoZWNrRm9yQXV0b3Njcm9sbDogZnVuY3Rpb24oJGVsZW1lbnQsIHkpIHtcbiAgICAgICAgICAgIHZhciBBVVRPU0NST0xMX1NQRUVEID0gMjtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkZWxlbWVudC5vZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSAkZWxlbWVudC5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgIHZhciB1cHBlckRpc3QgPSB5IC0gb2Zmc2V0LnRvcDtcbiAgICAgICAgICAgIHZhciBsb3dlckRpc3QgPSBvZmZzZXQudG9wICsgJGVsZW1lbnQub3V0ZXJIZWlnaHQoKSAtIHk7XG4gICAgICAgICAgICBpZiAodXBwZXJEaXN0ID49IDAgJiYgdXBwZXJEaXN0IDwgdGhpcy5hdXRvc2Nyb2xsRGlzdCkge1xuICAgICAgICAgICAgICAgICRlbGVtZW50LnNjcm9sbFRvcChzY3JvbGxUb3AgLSBBVVRPU0NST0xMX1NQRUVEKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG93ZXJEaXN0ID49IDAgJiYgbG93ZXJEaXN0IDwgdGhpcy5hdXRvc2Nyb2xsRGlzdCkge1xuICAgICAgICAgICAgICAgICRlbGVtZW50LnNjcm9sbFRvcChzY3JvbGxUb3AgKyBBVVRPU0NST0xMX1NQRUVEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKiogZ2V0IHRoZSBuZWFyZXN0IGVsZW1lbnQgYmFzZWQgb24gdGhlIG1vdXNlJ3MgWSBjb29yZGluYXRlLlxuICAgICAgICAgKiAgSWYgdGhlIHkgaXMgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCwgcmV0dXJuIGFuIGVtcHR5IGpRdWVyeSBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBfZ2V0TmVhcmVzdEVsZW1lbnQ6IGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgICAgIHZhciBXSUdHTEUgPSA0O1xuXG4gICAgICAgICAgICB2YXIgbGlzID0gdGhpcy4kKFwiLmNvbGxlY3Rpb24tZWxlbWVudHMgbGkuY29sbGVjdGlvbi1lbGVtZW50XCIpLnRvQXJyYXkoKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgJGxpID0gJChsaXNbaV0pO1xuICAgICAgICAgICAgICAgIHZhciB0b3AgPSAkbGkub2Zmc2V0KCkudG9wO1xuICAgICAgICAgICAgICAgIHZhciBoYWxmSGVpZ2h0ID0gTWF0aC5mbG9vcigkbGkub3V0ZXJIZWlnaHQoKSAvIDIpICsgV0lHR0xFO1xuICAgICAgICAgICAgICAgIGlmICh0b3AgKyBoYWxmSGVpZ2h0ID4geSAmJiB0b3AgLSBoYWxmSGVpZ2h0IDwgeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGxpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIGRyb3AgKGRyYWdnZWQvc2VsZWN0ZWQgZWxlbWVudHMpIG9udG8gdGhlIGxpc3QsIHJlLW9yZGVyaW5nIHRoZSBpbnRlcm5hbCBsaXN0ICovXG4gICAgICAgIF9kcm9wRWxlbWVudHM6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBpZiAoZXYub3JpZ2luYWxFdmVudCkge1xuICAgICAgICAgICAgICAgIGV2ID0gZXYub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJvdGggcmVxdWlyZWQgZm9yIGZpcmVmb3hcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwibW92ZVwiO1xuXG4gICAgICAgICAgICAvLyBpbnNlcnQgYmVmb3JlIHRoZSBuZWFyZXN0IGVsZW1lbnQgb3IgYWZ0ZXIgdGhlIGxhc3QuXG4gICAgICAgICAgICB2YXIgJG5lYXJlc3QgPSB0aGlzLl9nZXROZWFyZXN0RWxlbWVudChldi5jbGllbnRZKTtcbiAgICAgICAgICAgIGlmICgkbmVhcmVzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRkcmFnZ2luZy5pbnNlcnRCZWZvcmUoJG5lYXJlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBubyBuZWFyZXN0IGJlZm9yZSAtIGluc2VydCBhZnRlciBsYXN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICB0aGlzLiRkcmFnZ2luZy5pbnNlcnRBZnRlcih0aGlzLiQoXCIuY29sbGVjdGlvbi1lbGVtZW50cyAuY29sbGVjdGlvbi1lbGVtZW50XCIpLmxhc3QoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXN5bmMgdGhlIGNyZWF0b3IncyBsaXN0IGJhc2VkIG9uIHRoZSBuZXcgRE9NIG9yZGVyXG4gICAgICAgICAgICB0aGlzLl9zeW5jT3JkZXJUb0RvbSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiByZXN5bmMgdGhlIGNyZWF0b3IncyBsaXN0IG9mIGVsZW1lbnRzIGJhc2VkIG9uIHRoZSBET00gb3JkZXIgKi9cbiAgICAgICAgX3N5bmNPcmRlclRvRG9tOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjcmVhdG9yID0gdGhpcztcbiAgICAgICAgICAgIHZhciBuZXdFbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgLy9UT0RPOiBkb2Vzbid0IHNlZW0gd2lzZSB0byB1c2UgdGhlIGRvbSB0byBzdG9yZSB0aGVzZSAtIGNhbid0IHdlIHN5bmMgYW5vdGhlciB3YXk/XG4gICAgICAgICAgICB0aGlzLiQoXCIuY29sbGVjdGlvbi1lbGVtZW50cyAuY29sbGVjdGlvbi1lbGVtZW50XCIpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gJCh0aGlzKS5hdHRyKFwiZGF0YS1lbGVtZW50LWlkXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBfLmZpbmRXaGVyZShjcmVhdG9yLndvcmtpbmdFbGVtZW50cywge1xuICAgICAgICAgICAgICAgICAgICBpZDogaWRcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIm1pc3NpbmcgZWxlbWVudDogXCIsIGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMud29ya2luZ0VsZW1lbnRzID0gbmV3RWxlbWVudHM7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJMaXN0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIGRyYWcgY29tbXVuaWNhdGlvbiB3aXRoIGVsZW1lbnQgc3ViLXZpZXdzOiBkcmFnc3RhcnQgKi9cbiAgICAgICAgX2VsZW1lbnREcmFnc3RhcnQ6IGZ1bmN0aW9uKGV2LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBhdXRvIHNlbGVjdCB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBldmVudCBhbmQgbW92ZSBhbGwgc2VsZWN0ZWRcbiAgICAgICAgICAgIGVsZW1lbnQuc2VsZWN0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy4kZHJhZ2dpbmcgPSB0aGlzLiQoXCIuY29sbGVjdGlvbi1lbGVtZW50cyAuY29sbGVjdGlvbi1lbGVtZW50LnNlbGVjdGVkXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBkcmFnIGNvbW11bmljYXRpb24gd2l0aCBlbGVtZW50IHN1Yi12aWV3czogZHJhZ2VuZCAtIHJlbW92ZSB0aGUgcGxhY2Vob2xkZXIgKi9cbiAgICAgICAgX2VsZW1lbnREcmFnZW5kOiBmdW5jdGlvbihldiwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChcIi5lbGVtZW50LWRyb3AtcGxhY2Vob2xkZXJcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLiRkcmFnZ2luZyA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHRlbXBsYXRlc1xuICAgICAgICAvL1RPRE86IG1vdmUgdG8gcmVxdWlyZSB0ZXh0IHBsdWdpbiBhbmQgbG9hZCB0aGVzZSBhcyB0ZXh0XG4gICAgICAgIC8vVE9ETzogdW5kZXJzY29yZSBjdXJyZW50bHkgdW5uZWNjLiBiYyBubyB2YXJzIGFyZSB1c2VkXG4gICAgICAgIC8vVE9ETzogYmV0dGVyIHdheSBvZiBsb2NhbGl6aW5nIHRleHQtbm9kZXMgaW4gbG9uZyBzdHJpbmdzXG4gICAgICAgIC8qKiB1bmRlcnNjb3JlIHRlbXBsYXRlIGZucyBhdHRhY2hlZCB0byBjbGFzcyAqL1xuICAgICAgICB0ZW1wbGF0ZXM6IF8uZXh0ZW5kKHt9LCBiYXNlQ3JlYXRvci5Db2xsZWN0aW9uQ3JlYXRvck1peGluLl9jcmVhdG9yVGVtcGxhdGVzLCB7XG4gICAgICAgICAgICAvKiogdGhlIGhlYWRlciAobm90IGluY2x1ZGluZyBoZWxwIHRleHQpICovXG4gICAgICAgICAgICBoZWFkZXI6IF8udGVtcGxhdGUoXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1haW4taGVscCB3ZWxsIGNsZWFyXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxhIGNsYXNzPVwibW9yZS1oZWxwXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIj4nLFxuICAgICAgICAgICAgICAgICAgICBfbChcIk1vcmUgaGVscFwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2E+XCIsXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaGVscC1jb250ZW50XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxhIGNsYXNzPVwibGVzcy1oZWxwXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIj4nLFxuICAgICAgICAgICAgICAgICAgICBfbChcIkxlc3NcIiksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9hPlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJhbGVydFwiICcsXG4gICAgICAgICAgICAgICAgICAgICd0aXRsZT1cIicsXG4gICAgICAgICAgICAgICAgICAgIF9sKFwiQ2xvc2UgYW5kIHNob3cgbW9yZSBoZWxwXCIpLFxuICAgICAgICAgICAgICAgICAgICAnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImFsZXJ0LW1lc3NhZ2VcIj48L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2Rpdj5cIlxuICAgICAgICAgICAgICAgIF0uam9pbihcIlwiKVxuICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgLyoqIHRoZSBtaWRkbGU6IGVsZW1lbnQgbGlzdCAqL1xuICAgICAgICAgICAgbWlkZGxlOiBfLnRlbXBsYXRlKFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjb2xsZWN0aW9uLWVsZW1lbnRzLWNvbnRyb2xzXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxhIGNsYXNzPVwicmVzZXRcIiBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiICcsXG4gICAgICAgICAgICAgICAgICAgICd0aXRsZT1cIicsXG4gICAgICAgICAgICAgICAgICAgIF9sKFwiVW5kbyBhbGwgcmVvcmRlcmluZyBhbmQgZGlzY2FyZHNcIiksXG4gICAgICAgICAgICAgICAgICAgICdcIj4nLFxuICAgICAgICAgICAgICAgICAgICBfbChcIlN0YXJ0IG92ZXJcIiksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9hPlwiLFxuICAgICAgICAgICAgICAgICAgICAnPGEgY2xhc3M9XCJjbGVhci1zZWxlY3RlZFwiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCIgJyxcbiAgICAgICAgICAgICAgICAgICAgJ3RpdGxlPVwiJyxcbiAgICAgICAgICAgICAgICAgICAgX2woXCJEZS1zZWxlY3QgYWxsIHNlbGVjdGVkIGRhdGFzZXRzXCIpLFxuICAgICAgICAgICAgICAgICAgICAnXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgX2woXCJDbGVhciBzZWxlY3RlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2E+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY29sbGVjdGlvbi1lbGVtZW50cyBzY3JvbGwtY29udGFpbmVyIGZsZXgtcm93XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2Rpdj5cIlxuICAgICAgICAgICAgICAgIF0uam9pbihcIlwiKVxuICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgLyoqIGNyZWF0aW9uIGFuZCBjYW5jZWwgY29udHJvbHMgKi9cbiAgICAgICAgICAgIGZvb3RlcjogXy50ZW1wbGF0ZShcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYXR0cmlidXRlcyBjbGVhclwiPicsXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY2xlYXJcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2V0dGluZy1wcm9tcHQgcHVsbC1yaWdodFwiPicsXG4gICAgICAgICAgICAgICAgICAgIF9sKFwiSGlkZSBvcmlnaW5hbCBlbGVtZW50c1wiKSxcbiAgICAgICAgICAgICAgICAgICAgXCI/XCIsXG4gICAgICAgICAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJoaWRlLW9yaWdpbmFscyBwdWxsLXJpZ2h0XCIgdHlwZT1cImNoZWNrYm94XCIgLz4nLFxuICAgICAgICAgICAgICAgICAgICBcIjwvbGFiZWw+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY2xlYXJcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwiY29sbGVjdGlvbi1uYW1lIGZvcm0tY29udHJvbCBwdWxsLXJpZ2h0XCIgJyxcbiAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyPVwiJyxcbiAgICAgICAgICAgICAgICAgICAgX2woXCJFbnRlciBhIG5hbWUgZm9yIHlvdXIgbmV3IGNvbGxlY3Rpb25cIiksXG4gICAgICAgICAgICAgICAgICAgICdcIiAvPicsXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY29sbGVjdGlvbi1uYW1lLXByb21wdCBwdWxsLXJpZ2h0XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgX2woXCJOYW1lXCIpLFxuICAgICAgICAgICAgICAgICAgICBcIjo8L2Rpdj5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8L2Rpdj5cIixcblxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFjdGlvbnMgY2xlYXIgdmVydGljYWxseS1zcGFjZWRcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm90aGVyLW9wdGlvbnMgcHVsbC1sZWZ0XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJjYW5jZWwtY3JlYXRlIGJ0blwiIHRhYmluZGV4PVwiLTFcIj4nLFxuICAgICAgICAgICAgICAgICAgICBfbChcIkNhbmNlbFwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2J1dHRvbj5cIixcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjcmVhdGUtb3RoZXIgYnRuLWdyb3VwIGRyb3B1cFwiPicsXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIj4nLFxuICAgICAgICAgICAgICAgICAgICBfbChcIkNyZWF0ZSBhIGRpZmZlcmVudCBraW5kIG9mIGNvbGxlY3Rpb25cIiksXG4gICAgICAgICAgICAgICAgICAgICcgPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICBcIjwvYnV0dG9uPlwiLFxuICAgICAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiIHJvbGU9XCJtZW51XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxsaT48YSBocmVmPVwiI1wiPicsXG4gICAgICAgICAgICAgICAgICAgIF9sKFwiQ3JlYXRlIGEgPGk+c2luZ2xlPC9pPiBwYWlyXCIpLFxuICAgICAgICAgICAgICAgICAgICBcIjwvYT48L2xpPlwiLFxuICAgICAgICAgICAgICAgICAgICAnPGxpPjxhIGhyZWY9XCIjXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgX2woXCJDcmVhdGUgYSBsaXN0IG9mIDxpPnVucGFpcmVkPC9pPiBkYXRhc2V0c1wiKSxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2E+PC9saT5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8L3VsPlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjwvZGl2PlwiLFxuXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWFpbi1vcHRpb25zIHB1bGwtcmlnaHRcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImNyZWF0ZS1jb2xsZWN0aW9uIGJ0biBidG4tcHJpbWFyeVwiPicsXG4gICAgICAgICAgICAgICAgICAgIF9sKFwiQ3JlYXRlIGxpc3RcIiksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCJcbiAgICAgICAgICAgICAgICBdLmpvaW4oXCJcIilcbiAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgIC8qKiBoZWxwIGNvbnRlbnQgKi9cbiAgICAgICAgICAgIGhlbHBDb250ZW50OiBfLnRlbXBsYXRlKFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgXCI8cD5cIixcbiAgICAgICAgICAgICAgICAgICAgX2woXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb2xsZWN0aW9ucyBvZiBkYXRhc2V0cyBhcmUgcGVybWFuZW50LCBvcmRlcmVkIGxpc3RzIG9mIGRhdGFzZXRzIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0b29scyBhbmQgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3b3JrZmxvd3MgaW4gb3JkZXIgdG8gaGF2ZSBhbmFseXNlcyBkb25lIG9uIGVhY2ggbWVtYmVyIG9mIHRoZSBlbnRpcmUgZ3JvdXAuIFRoaXMgaW50ZXJmYWNlIGFsbG93cyBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInlvdSB0byBjcmVhdGUgYSBjb2xsZWN0aW9uIGFuZCByZS1vcmRlciB0aGUgZmluYWwgY29sbGVjdGlvbi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9wPlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjx1bD5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8bGk+XCIsXG4gICAgICAgICAgICAgICAgICAgIF9sKFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVuYW1lIGVsZW1lbnRzIGluIHRoZSBsaXN0IGJ5IGNsaWNraW5nIG9uIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aSBkYXRhLXRhcmdldD1cIi5jb2xsZWN0aW9uLWVsZW1lbnQgLm5hbWVcIj50aGUgZXhpc3RpbmcgbmFtZTwvaT4uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9saT5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8bGk+XCIsXG4gICAgICAgICAgICAgICAgICAgIF9sKFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRGlzY2FyZCBlbGVtZW50cyBmcm9tIHRoZSBmaW5hbCBjcmVhdGVkIGxpc3QgYnkgY2xpY2tpbmcgb24gdGhlIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aSBkYXRhLXRhcmdldD1cIi5jb2xsZWN0aW9uLWVsZW1lbnQgLmRpc2NhcmRcIj5cIkRpc2NhcmRcIjwvaT4gYnV0dG9uLidcbiAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbihcIlwiKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBcIjwvbGk+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPGxpPlwiLFxuICAgICAgICAgICAgICAgICAgICBfbChcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlJlb3JkZXIgdGhlIGxpc3QgYnkgY2xpY2tpbmcgYW5kIGRyYWdnaW5nIGVsZW1lbnRzLiBTZWxlY3QgbXVsdGlwbGUgZWxlbWVudHMgYnkgY2xpY2tpbmcgb24gXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpIGRhdGEtdGFyZ2V0PVwiLmNvbGxlY3Rpb24tZWxlbWVudFwiPnRoZW08L2k+IGFuZCB5b3UgY2FuIHRoZW4gbW92ZSB0aG9zZSBzZWxlY3RlZCBieSBkcmFnZ2luZyB0aGUgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImVudGlyZSBncm91cC4gRGVzZWxlY3QgdGhlbSBieSBjbGlja2luZyB0aGVtIGFnYWluIG9yIGJ5IGNsaWNraW5nIHRoZSBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGhlIDxpIGRhdGEtdGFyZ2V0PVwiLmNsZWFyLXNlbGVjdGVkXCI+XCJDbGVhciBzZWxlY3RlZFwiPC9pPiBsaW5rLidcbiAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbihcIlwiKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBcIjwvbGk+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPGxpPlwiLFxuICAgICAgICAgICAgICAgICAgICBfbChcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ2xpY2sgdGhlIDxpIGRhdGEtdGFyZ2V0PVwiLnJlc2V0XCI+XCJTdGFydCBvdmVyXCI8L2k+IGxpbmsgdG8gYmVnaW4gYWdhaW4gYXMgaWYgeW91IGhhZCBqdXN0IG9wZW5lZCAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGhlIGludGVyZmFjZS5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9saT5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8bGk+XCIsXG4gICAgICAgICAgICAgICAgICAgIF9sKFxuICAgICAgICAgICAgICAgICAgICAgICAgWydDbGljayB0aGUgPGkgZGF0YS10YXJnZXQ9XCIuY2FuY2VsLWNyZWF0ZVwiPlwiQ2FuY2VsXCI8L2k+IGJ1dHRvbiB0byBleGl0IHRoZSBpbnRlcmZhY2UuJ10uam9pbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9saT5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8L3VsPjxiciAvPlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjxwPlwiLFxuICAgICAgICAgICAgICAgICAgICBfbChcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT25jZSB5b3VyIGNvbGxlY3Rpb24gaXMgY29tcGxldGUsIGVudGVyIGEgPGkgZGF0YS10YXJnZXQ9XCIuY29sbGVjdGlvbi1uYW1lXCI+bmFtZTwvaT4gYW5kICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrIDxpIGRhdGEtdGFyZ2V0PVwiLmNyZWF0ZS1jb2xsZWN0aW9uXCI+XCJDcmVhdGUgbGlzdFwiPC9pPi4nXG4gICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oXCJcIilcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXCI8L3A+XCJcbiAgICAgICAgICAgICAgICBdLmpvaW4oXCJcIilcbiAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgIC8qKiBzaG93biBpbiBsaXN0IHdoZW4gYWxsIGVsZW1lbnRzIGFyZSBkaXNjYXJkZWQgKi9cbiAgICAgICAgICAgIGludmFsaWRFbGVtZW50czogXy50ZW1wbGF0ZShcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIF9sKFwiVGhlIGZvbGxvd2luZyBzZWxlY3Rpb25zIGNvdWxkIG5vdCBiZSBpbmNsdWRlZCBkdWUgdG8gcHJvYmxlbXM6XCIpLFxuICAgICAgICAgICAgICAgICAgICBcIjx1bD48JSBfLmVhY2goIHByb2JsZW1zLCBmdW5jdGlvbiggcHJvYmxlbSApeyAlPlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjxsaT48Yj48JS0gcHJvYmxlbS5lbGVtZW50Lm5hbWUgJT48L2I+OiA8JS0gcHJvYmxlbS50ZXh0ICU+PC9saT5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8JSB9KTsgJT48L3VsPlwiXG4gICAgICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICAgICApLFxuXG4gICAgICAgICAgICAvKiogc2hvd24gaW4gbGlzdCB3aGVuIGFsbCBlbGVtZW50cyBhcmUgZGlzY2FyZGVkICovXG4gICAgICAgICAgICBub0VsZW1lbnRzTGVmdDogXy50ZW1wbGF0ZShcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICc8bGkgY2xhc3M9XCJuby1lbGVtZW50cy1sZWZ0LW1lc3NhZ2VcIj4nLFxuICAgICAgICAgICAgICAgICAgICBfbChcIk5vIGVsZW1lbnRzIGxlZnQhIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2woXCJXb3VsZCB5b3UgbGlrZSB0byBcIiksXG4gICAgICAgICAgICAgICAgICAgICc8YSBjbGFzcz1cInJlc2V0XCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiPicsXG4gICAgICAgICAgICAgICAgICAgIF9sKFwic3RhcnQgb3ZlclwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2E+P1wiLFxuICAgICAgICAgICAgICAgICAgICBcIjwvbGk+XCJcbiAgICAgICAgICAgICAgICBdLmpvaW4oXCJcIilcbiAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgIC8qKiBhIHNpbXBsaWZpZWQgcGFnZSBjb21tdW5pY2F0aW5nIHdoYXQgd2VudCB3cm9uZyBhbmQgd2h5IHRoZSB1c2VyIG5lZWRzIHRvIHJlc2VsZWN0IHNvbWV0aGluZyBlbHNlICovXG4gICAgICAgICAgICBpbnZhbGlkSW5pdGlhbDogXy50ZW1wbGF0ZShcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaGVhZGVyIGZsZXgtcm93IG5vLWZsZXhcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIiBzdHlsZT1cImRpc3BsYXk6IGJsb2NrXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYWxlcnQtbWVzc2FnZVwiPicsXG4gICAgICAgICAgICAgICAgICAgIFwiPCUgaWYoIF8uc2l6ZSggcHJvYmxlbXMgKSApeyAlPlwiLFxuICAgICAgICAgICAgICAgICAgICBfbChcIlRoZSBmb2xsb3dpbmcgc2VsZWN0aW9ucyBjb3VsZCBub3QgYmUgaW5jbHVkZWQgZHVlIHRvIHByb2JsZW1zXCIpLFxuICAgICAgICAgICAgICAgICAgICBcIjpcIixcbiAgICAgICAgICAgICAgICAgICAgXCI8dWw+PCUgXy5lYWNoKCBwcm9ibGVtcywgZnVuY3Rpb24oIHByb2JsZW0gKXsgJT5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8bGk+PGI+PCUtIHByb2JsZW0uZWxlbWVudC5uYW1lICU+PC9iPjogPCUtIHByb2JsZW0udGV4dCAlPjwvbGk+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPCUgfSk7ICU+PC91bD5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8JSB9IGVsc2UgaWYoIF8uc2l6ZSggZWxlbWVudHMgKSA8IDEgKXsgJT5cIixcbiAgICAgICAgICAgICAgICAgICAgX2woXCJObyBkYXRhc2V0cyB3ZXJlIHNlbGVjdGVkXCIpLFxuICAgICAgICAgICAgICAgICAgICBcIi5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8JSB9ICU+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPGJyIC8+XCIsXG4gICAgICAgICAgICAgICAgICAgIF9sKFwiQXQgbGVhc3Qgb25lIGVsZW1lbnQgaXMgbmVlZGVkIGZvciB0aGUgY29sbGVjdGlvblwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCIuIFwiLFxuICAgICAgICAgICAgICAgICAgICBfbChcIllvdSBtYXkgbmVlZCB0byBcIiksXG4gICAgICAgICAgICAgICAgICAgICc8YSBjbGFzcz1cImNhbmNlbC1jcmVhdGVcIiBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgX2woXCJjYW5jZWxcIiksXG4gICAgICAgICAgICAgICAgICAgIFwiPC9hPiBcIixcbiAgICAgICAgICAgICAgICAgICAgX2woXCJhbmQgcmVzZWxlY3QgbmV3IGVsZW1lbnRzXCIpLFxuICAgICAgICAgICAgICAgICAgICBcIi5cIixcbiAgICAgICAgICAgICAgICAgICAgXCI8L3NwYW4+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZm9vdGVyIGZsZXgtcm93IG5vLWZsZXhcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFjdGlvbnMgY2xlYXIgdmVydGljYWxseS1zcGFjZWRcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm90aGVyLW9wdGlvbnMgcHVsbC1sZWZ0XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJjYW5jZWwtY3JlYXRlIGJ0blwiIHRhYmluZGV4PVwiLTFcIj4nLFxuICAgICAgICAgICAgICAgICAgICBfbChcIkNhbmNlbFwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCI8L2J1dHRvbj5cIixcbiAgICAgICAgICAgICAgICAgICAgLy8gX2woICdDcmVhdGUgYSBkaWZmZXJlbnQga2luZCBvZiBjb2xsZWN0aW9uJyApLFxuICAgICAgICAgICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICAgICApXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtaXNjXG4gICAgICAgIC8qKiBzdHJpbmcgcmVwICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkxpc3RDb2xsZWN0aW9uQ3JlYXRvclwiO1xuICAgICAgICB9XG4gICAgfSk7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8qKiBDcmVhdGUgYSBtb2RhbCBhbmQgbG9hZCBpdHMgYm9keSB3aXRoIHRoZSBnaXZlbiBDcmVhdG9yQ2xhc3MgY3JlYXRvciB0eXBlXG4gKiAgQHJldHVybnMge0RlZmVycmVkfSByZXNvbHZlZCB3aGVuIGNyZWF0b3IgaGFzIGJ1aWx0IGEgY29sbGVjdGlvbi5cbiAqL1xudmFyIGNvbGxlY3Rpb25DcmVhdG9yTW9kYWwgPSBmdW5jdGlvbiBfY29sbGVjdGlvbkNyZWF0b3JNb2RhbChlbGVtZW50cywgb3B0aW9ucywgQ3JlYXRvckNsYXNzKSB7XG4gICAgdmFyIGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCk7XG4gICAgdmFyIG1vZGFsID0gR2FsYXh5Lm1vZGFsIHx8IG5ldyBVSV9NT0RBTC5WaWV3KCk7XG4gICAgdmFyIGNyZWF0b3I7XG5cbiAgICBvcHRpb25zID0gXy5kZWZhdWx0cyhvcHRpb25zIHx8IHt9LCB7XG4gICAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgICAgb25jYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbW9kYWwuaGlkZSgpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KFwiY2FuY2VsbGVkXCIpO1xuICAgICAgICB9LFxuICAgICAgICBvbmNyZWF0ZTogZnVuY3Rpb24oY3JlYXRvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIG1vZGFsLmhpZGUoKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjcmVhdG9yID0gbmV3IENyZWF0b3JDbGFzcyhvcHRpb25zKTtcbiAgICBtb2RhbC5zaG93KHtcbiAgICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUgfHwgX2woXCJDcmVhdGUgYSBjb2xsZWN0aW9uXCIpLFxuICAgICAgICBib2R5OiBjcmVhdG9yLiRlbCxcbiAgICAgICAgd2lkdGg6IFwiODAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIGNsb3NpbmdfZXZlbnRzOiB0cnVlXG4gICAgfSk7XG4gICAgY3JlYXRvci5yZW5kZXIoKTtcbiAgICB3aW5kb3cuX2NvbGxlY3Rpb25DcmVhdG9yID0gY3JlYXRvcjtcblxuICAgIC8vVE9ETzogcmVtb3ZlIG1vZGFsIGhlYWRlclxuICAgIHJldHVybiBkZWZlcnJlZDtcbn07XG5cbi8qKiBMaXN0IGNvbGxlY3Rpb24gZmxhdm9yIG9mIGNvbGxlY3Rpb25DcmVhdG9yTW9kYWwuICovXG52YXIgbGlzdENvbGxlY3Rpb25DcmVhdG9yTW9kYWwgPSBmdW5jdGlvbiBfbGlzdENvbGxlY3Rpb25DcmVhdG9yTW9kYWwoZWxlbWVudHMsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnRpdGxlID0gX2woXCJDcmVhdGUgYSBjb2xsZWN0aW9uIGZyb20gYSBsaXN0IG9mIGRhdGFzZXRzXCIpO1xuICAgIHJldHVybiBjb2xsZWN0aW9uQ3JlYXRvck1vZGFsKGVsZW1lbnRzLCBvcHRpb25zLCBMaXN0Q29sbGVjdGlvbkNyZWF0b3IpO1xufTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8qKiBVc2UgYSBtb2RhbCB0byBjcmVhdGUgYSBsaXN0IGNvbGxlY3Rpb24sIHRoZW4gYWRkIGl0IHRvIHRoZSBnaXZlbiBoaXN0b3J5IGNvbnRlbnRzLlxuICogIEByZXR1cm5zIHtEZWZlcnJlZH0gcmVzb2x2ZWQgd2hlbiB0aGUgY29sbGVjdGlvbiBpcyBhZGRlZCB0byB0aGUgaGlzdG9yeS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTGlzdENvbGxlY3Rpb24oY29udGVudHMsIGRlZmF1bHRIaWRlU291cmNlSXRlbXMpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBjb250ZW50cy50b0pTT04oKTtcblxuICAgIHZhciBwcm9taXNlID0gbGlzdENvbGxlY3Rpb25DcmVhdG9yTW9kYWwoZWxlbWVudHMsIHtcbiAgICAgICAgZGVmYXVsdEhpZGVTb3VyY2VJdGVtczogZGVmYXVsdEhpZGVTb3VyY2VJdGVtcyxcbiAgICAgICAgY3JlYXRpb25GbjogZnVuY3Rpb24oZWxlbWVudHMsIG5hbWUsIGhpZGVTb3VyY2VJdGVtcykge1xuICAgICAgICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5tYXAoZWxlbWVudCA9PiAoe1xuICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcblxuICAgICAgICAgICAgICAgIC8vVE9ETzogdGhpcyBhbGxvd3MgZm9yIGxpc3Q6bGlzdCBldmVuIGlmIHRoZSBmaWx0ZXIgYWJvdmUgZG9lcyBub3QgLSByZWNvbmNpbGVcbiAgICAgICAgICAgICAgICBzcmM6IGVsZW1lbnQuaGlzdG9yeV9jb250ZW50X3R5cGUgPT09IFwiZGF0YXNldFwiID8gXCJoZGFcIiA6IFwiaGRjYVwiXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudHMuY3JlYXRlSERDQShlbGVtZW50cywgXCJsaXN0XCIsIG5hbWUsIGhpZGVTb3VyY2VJdGVtcyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIERhdGFzZXRDb2xsZWN0aW9uRWxlbWVudFZpZXc6IERhdGFzZXRDb2xsZWN0aW9uRWxlbWVudFZpZXcsXG4gICAgTGlzdENvbGxlY3Rpb25DcmVhdG9yOiBMaXN0Q29sbGVjdGlvbkNyZWF0b3IsXG5cbiAgICBjb2xsZWN0aW9uQ3JlYXRvck1vZGFsOiBjb2xsZWN0aW9uQ3JlYXRvck1vZGFsLFxuICAgIGxpc3RDb2xsZWN0aW9uQ3JlYXRvck1vZGFsOiBsaXN0Q29sbGVjdGlvbkNyZWF0b3JNb2RhbCxcbiAgICBjcmVhdGVMaXN0Q29sbGVjdGlvbjogY3JlYXRlTGlzdENvbGxlY3Rpb25cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2NvbGxlY3Rpb24vbGlzdC1jb2xsZWN0aW9uLWNyZWF0b3IuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzSUE7QUFDQTtBQTZJQTtBQUNBOztBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQTtBQUNBO0FBZUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFEQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkE7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBNUJBO0FBQ0E7QUE4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFxQkE7QUFDQTtBQUNBO0FBb0JBO0FBQ0E7QUFDQTtBQWtEQTtBQUNBO0FBQ0E7QUFnRUE7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBV0E7QUFDQTtBQWlDQTtBQUNBO0FBOU5BO0FBQ0E7QUFvT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXowQkE7QUFDQTtBQTIwQkE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUFBO0FBT0E7QUFDQTtBQVhBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58\n");

/***/ }),
/* 59 */
/*!**************************************************!*\
  !*** ./galaxy/scripts/mvc/history/hdca-model.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _collectionModel = __webpack_require__(/*! mvc/collection/collection-model */ 60);\n\nvar _collectionModel2 = _interopRequireDefault(_collectionModel);\n\nvar _historyContentModel = __webpack_require__(/*! mvc/history/history-content-model */ 108);\n\nvar _historyContentModel2 = _interopRequireDefault(_historyContentModel);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*==============================================================================\n\nModels for DatasetCollections contained within a history.\n\n==============================================================================*/\nvar hcontentMixin = _historyContentModel2.default.HistoryContentMixin;\n\nvar DC = _collectionModel2.default.DatasetCollection;\n\n//==============================================================================\n/** @class Backbone model for List Dataset Collection within a History.\n */\nvar HistoryDatasetCollection = DC.extend(hcontentMixin).extend(\n/** @lends HistoryDatasetCollection.prototype */{\n    defaults: _.extend(_.clone(DC.prototype.defaults), {\n        history_content_type: \"dataset_collection\",\n        model_class: \"HistoryDatasetCollectionAssociation\"\n    }),\n\n    //==============================================================================\n    /** Override to post to contents route w/o id. */\n    save: function save(attributes, options) {\n        if (this.isNew()) {\n            options = options || {};\n            options.url = this.urlRoot + this.get(\"history_id\") + \"/contents\";\n            attributes = attributes || {};\n            attributes.type = \"dataset_collection\";\n        }\n        return DC.prototype.save.call(this, attributes, options);\n    },\n\n    /** String representation. */\n    toString: function toString() {\n        return \"History\" + DC.prototype.toString.call(this);\n    }\n});\n\n//==============================================================================\nexports.default = {\n    HistoryDatasetCollection: HistoryDatasetCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL2hpc3RvcnkvaGRjYS1tb2RlbC5qcz8zM2UyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEQ19NT0RFTCBmcm9tIFwibXZjL2NvbGxlY3Rpb24vY29sbGVjdGlvbi1tb2RlbFwiO1xuaW1wb3J0IEhJU1RPUllfQ09OVEVOVCBmcm9tIFwibXZjL2hpc3RvcnkvaGlzdG9yeS1jb250ZW50LW1vZGVsXCI7XG5pbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5Nb2RlbHMgZm9yIERhdGFzZXRDb2xsZWN0aW9ucyBjb250YWluZWQgd2l0aGluIGEgaGlzdG9yeS5cblxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbnZhciBoY29udGVudE1peGluID0gSElTVE9SWV9DT05URU5ULkhpc3RvcnlDb250ZW50TWl4aW47XG5cbnZhciBEQyA9IERDX01PREVMLkRhdGFzZXRDb2xsZWN0aW9uO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqIEBjbGFzcyBCYWNrYm9uZSBtb2RlbCBmb3IgTGlzdCBEYXRhc2V0IENvbGxlY3Rpb24gd2l0aGluIGEgSGlzdG9yeS5cbiAqL1xudmFyIEhpc3RvcnlEYXRhc2V0Q29sbGVjdGlvbiA9IERDLmV4dGVuZChoY29udGVudE1peGluKS5leHRlbmQoXG4gICAgLyoqIEBsZW5kcyBIaXN0b3J5RGF0YXNldENvbGxlY3Rpb24ucHJvdG90eXBlICovIHtcbiAgICAgICAgZGVmYXVsdHM6IF8uZXh0ZW5kKF8uY2xvbmUoREMucHJvdG90eXBlLmRlZmF1bHRzKSwge1xuICAgICAgICAgICAgaGlzdG9yeV9jb250ZW50X3R5cGU6IFwiZGF0YXNldF9jb2xsZWN0aW9uXCIsXG4gICAgICAgICAgICBtb2RlbF9jbGFzczogXCJIaXN0b3J5RGF0YXNldENvbGxlY3Rpb25Bc3NvY2lhdGlvblwiXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIC8qKiBPdmVycmlkZSB0byBwb3N0IHRvIGNvbnRlbnRzIHJvdXRlIHcvbyBpZC4gKi9cbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNOZXcoKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudXJsID0gYCR7dGhpcy51cmxSb290ICsgdGhpcy5nZXQoXCJoaXN0b3J5X2lkXCIpfS9jb250ZW50c2A7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwge307XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy50eXBlID0gXCJkYXRhc2V0X2NvbGxlY3Rpb25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBEQy5wcm90b3R5cGUuc2F2ZS5jYWxsKHRoaXMsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBTdHJpbmcgcmVwcmVzZW50YXRpb24uICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBgSGlzdG9yeSR7REMucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcyl9YDtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgSGlzdG9yeURhdGFzZXRDb2xsZWN0aW9uOiBIaXN0b3J5RGF0YXNldENvbGxlY3Rpb25cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2hpc3RvcnkvaGRjYS1tb2RlbC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFyQkE7QUFDQTtBQXdCQTtBQUNBO0FBQ0E7QUFEQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/collection-model.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, Backbone, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _datasetModel = __webpack_require__(/*! mvc/dataset/dataset-model */ 107);\n\nvar _datasetModel2 = _interopRequireDefault(_datasetModel);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\n/*\nNotes:\n\nTerminology:\n    DatasetCollection/DC : a container of datasets or nested DatasetCollections\n    Element/DatasetCollectionElement/DCE : an item contained in a DatasetCollection\n    HistoryDatasetCollectionAssociation/HDCA: a DatasetCollection contained in a history\n\n\nThis all seems too complex unfortunately:\n\n- Terminology collision between DatasetCollections (DCs) and Backbone Collections.\n- In the DatasetCollections API JSON, DC Elements use a 'Has A' stucture to *contain*\n    either a dataset or a nested DC. This would make the hierarchy much taller. I've\n    decided to merge the contained JSON with the DC element json - making the 'has a'\n    relation into an 'is a' relation. This seems simpler to me and allowed a lot of\n    DRY in both models and views, but may make tracking or tracing within these models\n    more difficult (since DatasetCollectionElements are now *also* DatasetAssociations\n    or DatasetCollections (nested)). This also violates the rule of thumb about\n    favoring aggregation over inheritance.\n- Currently, there are three DatasetCollection subclasses: List, Pair, and ListPaired.\n    These each should a) be usable on their own, b) be usable in the context of\n    nesting within a collection model (at least in the case of ListPaired), and\n    c) be usable within the context of other container models (like History or\n    LibraryFolder, etc.). I've tried to separate/extract classes in order to\n    handle those three situations, but it's proven difficult to do in a simple,\n    readable manner.\n- Ideally, histories and libraries would inherit from the same server models as\n    dataset collections do since they are (in essence) dataset collections themselves -\n    making the whole nested structure simpler. This would be a large, error-prone\n    refactoring and migration.\n\nMany of the classes and heirarchy are meant as extension points so, while the\nrelations and flow may be difficult to understand initially, they'll allow us to\nhandle the growth or flux dataset collection in the future (w/o actually implementing\nany YAGNI).\n\n*/\n//_________________________________________________________________________________________________ ELEMENTS\n/** @class mixin for Dataset collection elements.\n *      When collection elements are passed from the API, the underlying element is\n *          in a sub-object 'object' (IOW, a DCE representing an HDA will have HDA json in element.object).\n *      This mixin uses the constructor and parse methods to merge that JSON with the DCE attribtues\n *          effectively changing a DCE from a container to a subclass (has a --> is a).\n */\nvar DatasetCollectionElementMixin = {\n    /** default attributes used by elements in a dataset collection */\n    defaults: {\n        model_class: \"DatasetCollectionElement\",\n        element_identifier: null,\n        element_index: null,\n        element_type: null\n    },\n\n    /** merge the attributes of the sub-object 'object' into this model */\n    _mergeObject: function _mergeObject(attributes) {\n        // if we don't preserve and correct ids here, the element id becomes the object id\n        // and collision in backbone's _byId will occur and only\n        _.extend(attributes, attributes.object, {\n            element_id: attributes.id\n        });\n        delete attributes.object;\n        return attributes;\n    },\n\n    /** override to merge this.object into this */\n    constructor: function constructor(attributes, options) {\n        // console.debug( '\\t DatasetCollectionElement.constructor:', attributes, options );\n        attributes = this._mergeObject(attributes);\n        this.idAttribute = \"element_id\";\n        Backbone.Model.apply(this, arguments);\n    },\n\n    /** when the model is fetched, merge this.object into this */\n    parse: function parse(response, options) {\n        var attributes = response;\n        attributes = this._mergeObject(attributes);\n        return attributes;\n    }\n};\n\n/** @class Concrete class of Generic DatasetCollectionElement */\nvar DatasetCollectionElement = Backbone.Model.extend(_baseMvc2.default.LoggableMixin).extend(DatasetCollectionElementMixin).extend({ _logNamespace: \"collections\" });\n\n//==============================================================================\n/** @class Base/Abstract Backbone collection for Generic DCEs - \n    current may be associated with a dataset (DatasetDCECollection)\n    or another collection (NestedDCDCECollection).\n*/\nvar DCECollection = Backbone.Collection.extend(_baseMvc2.default.LoggableMixin).extend(\n/** @lends DCECollection.prototype */{\n    _logNamespace: \"collections\",\n\n    model: DatasetCollectionElement,\n\n    /** String representation. */\n    toString: function toString() {\n        return [\"DatasetCollectionElementCollection(\", this.length, \")\"].join(\"\");\n    }\n});\n\n//==============================================================================\n/** @class Backbone model for a dataset collection element that is a dataset (HDA).\n */\nvar DatasetDCE = _datasetModel2.default.DatasetAssociation.extend(_baseMvc2.default.mixin(DatasetCollectionElementMixin,\n/** @lends DatasetDCE.prototype */{\n    /** url fn */\n    url: function url() {\n        // won't always be an hda\n        if (!this.has(\"history_id\")) {\n            console.warn(\"no endpoint for non-hdas within a collection yet\");\n            // (a little silly since this api endpoint *also* points at hdas)\n            return Galaxy.root + \"api/datasets\";\n        }\n        return Galaxy.root + \"api/histories/\" + this.get(\"history_id\") + \"/contents/\" + this.get(\"id\");\n    },\n\n    defaults: _.extend({}, _datasetModel2.default.DatasetAssociation.prototype.defaults, DatasetCollectionElementMixin.defaults),\n\n    _downloadQueryParameters: function _downloadQueryParameters() {\n        var fileExt = this.get(\"file_ext\");\n        var elementIdentifier = this.get(\"element_identifier\");\n        var parentHdcaId = this.get(\"parent_hdca_id\");\n        return \"?to_ext=\" + fileExt + \"&hdca_id=\" + parentHdcaId + \"&element_identifier=\" + elementIdentifier;\n    },\n\n    // because all objects have constructors (as this hashmap would even if this next line wasn't present)\n    //  the constructor in hcontentMixin won't be attached by BASE_MVC.mixin to this model\n    //  - re-apply manually for now\n    /** call the mixin constructor */\n    constructor: function constructor(attributes, options) {\n        this.debug(\"\\t DatasetDCE.constructor:\", attributes, options);\n        //DATASET_MODEL.DatasetAssociation.prototype.constructor.call( this, attributes, options );\n        DatasetCollectionElementMixin.constructor.call(this, attributes, options);\n    },\n\n    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n    hasDetails: function hasDetails() {\n        return this.elements && this.elements.length;\n    },\n\n    /** String representation. */\n    toString: function toString() {\n        var objStr = this.get(\"element_identifier\");\n        return \"DatasetDCE({objStr})\";\n    }\n}));\n\n//==============================================================================\n/** @class DCECollection of DatasetDCE's (a list of datasets, a pair of datasets).\n */\nvar DatasetDCECollection = DCECollection.extend(\n/** @lends DatasetDCECollection.prototype */{\n    model: DatasetDCE,\n\n    /** String representation. */\n    toString: function toString() {\n        return [\"DatasetDCECollection(\", this.length, \")\"].join(\"\");\n    }\n});\n\n//_________________________________________________________________________________________________ COLLECTIONS\n/** @class Backbone model for Dataset Collections.\n *      The DC API returns an array of JSON objects under the attribute elements.\n *      This model:\n *          - removes that array/attribute ('elements') from the model,\n *          - creates a bbone collection (of the class defined in the 'collectionClass' attribute),\n *          - passes that json onto the bbone collection\n *          - caches the bbone collection in this.elements\n */\nvar DatasetCollection = Backbone.Model.extend(_baseMvc2.default.LoggableMixin).extend(_baseMvc2.default.SearchableModelMixin).extend(\n/** @lends DatasetCollection.prototype */{\n    _logNamespace: \"collections\",\n\n    /** default attributes for a model */\n    defaults: {\n        /* 'list', 'paired', or 'list:paired' */\n        collection_type: null,\n        //??\n        deleted: false\n    },\n\n    /** Which class to use for elements */\n    collectionClass: function collectionClass() {\n        if (this.attributes.collection_type.indexOf(\":\") > 0) {\n            return NestedDCDCECollection;\n        } else {\n            return DatasetDCECollection;\n        }\n    },\n\n    /** set up: create elements instance var and (on changes to elements) update them  */\n    initialize: function initialize(model, options) {\n        this.debug(this + \"(DatasetCollection).initialize:\", model, options, this);\n        this.elements = this._createElementsModel();\n        this.on(\"change:elements\", function () {\n            this.log(\"change:elements\");\n            //TODO: prob. better to update the collection instead of re-creating it\n            this.elements = this._createElementsModel();\n        });\n    },\n\n    /** move elements model attribute to full collection */\n    _createElementsModel: function _createElementsModel() {\n        var collectionClass = this.collectionClass();\n        this.debug(this + \"._createElementsModel\", collectionClass, this.get(\"elements\"), this.elements);\n        //TODO: same patterns as DatasetCollectionElement _createObjectModel - refactor to BASE_MVC.hasSubModel?\n        var elements = this.get(\"elements\") || [];\n        this.unset(\"elements\", { silent: true });\n        var self = this;\n        _.each(elements, function (element, index) {\n            _.extend(element, {\n                parent_hdca_id: self.get(\"id\")\n            });\n        });\n        this.elements = new collectionClass(elements);\n        //this.debug( 'collectionClass:', this.collectionClass + '', this.elements );\n        return this.elements;\n    },\n\n    // ........................................................................ common queries\n    /** pass the elements back within the model json when this is serialized */\n    toJSON: function toJSON() {\n        var json = Backbone.Model.prototype.toJSON.call(this);\n        if (this.elements) {\n            json.elements = this.elements.toJSON();\n        }\n        return json;\n    },\n\n    /** Is this collection in a 'ready' state no processing (for the collection) is left\n     *  to do on the server.\n     */\n    inReadyState: function inReadyState() {\n        var populated = this.get(\"populated\");\n        return this.isDeletedOrPurged() || populated;\n    },\n\n    //TODO:?? the following are the same interface as DatasetAssociation - can we combine?\n    /** Does the DC contain any elements yet? Is a fetch() required? */\n    hasDetails: function hasDetails() {\n        return this.elements.length !== 0;\n    },\n\n    /** Given the filters, what models in this.elements would be returned? */\n    getVisibleContents: function getVisibleContents(filters) {\n        // filters unused for now\n        return this.elements;\n    },\n\n    // ........................................................................ ajax\n    /** override to use actual Dates objects for create/update times */\n    parse: function parse(response, options) {\n        var parsed = Backbone.Model.prototype.parse.call(this, response, options);\n        if (parsed.create_time) {\n            parsed.create_time = new Date(parsed.create_time);\n        }\n        if (parsed.update_time) {\n            parsed.update_time = new Date(parsed.update_time);\n        }\n        return parsed;\n    },\n\n    /** save this dataset, _Mark_ing it as deleted (just a flag) */\n    delete: function _delete(options) {\n        if (this.get(\"deleted\")) {\n            return jQuery.when();\n        }\n        return this.save({ deleted: true }, options);\n    },\n    /** save this dataset, _Mark_ing it as undeleted */\n    undelete: function undelete(options) {\n        if (!this.get(\"deleted\") || this.get(\"purged\")) {\n            return jQuery.when();\n        }\n        return this.save({ deleted: false }, options);\n    },\n\n    /** Is this collection deleted or purged? */\n    isDeletedOrPurged: function isDeletedOrPurged() {\n        return this.get(\"deleted\") || this.get(\"purged\");\n    },\n\n    // ........................................................................ searchable\n    /** searchable attributes for collections */\n    searchAttributes: [\"name\", \"tags\"],\n\n    // ........................................................................ misc\n    /** String representation */\n    toString: function toString() {\n        var idAndName = [this.get(\"id\"), this.get(\"name\") || this.get(\"element_identifier\")];\n        return \"DatasetCollection(\" + idAndName.join(\",\") + \")\";\n    }\n});\n\n//_________________________________________________________________________________________________ NESTED COLLECTIONS\n// this is where things get weird, man. Weird.\n//TODO: it might be possible to compact all the following...I think.\n//==============================================================================\n/** @class Backbone model for a Generic DatasetCollectionElement that is also a DatasetCollection\n *      (a nested collection).\n */\nvar NestedDCDCE = DatasetCollection.extend(_baseMvc2.default.mixin(DatasetCollectionElementMixin,\n/** @lends NestedDCDCE.prototype */{\n    // because all objects have constructors (as this hashmap would even if this next line wasn't present)\n    //  the constructor in hcontentMixin won't be attached by BASE_MVC.mixin to this model\n    //  - re-apply manually it now\n    /** call the mixin constructor */\n    constructor: function constructor(attributes, options) {\n        this.debug(\"\\t NestedDCDCE.constructor:\", attributes, options);\n        DatasetCollectionElementMixin.constructor.call(this, attributes, options);\n    },\n\n    /** String representation. */\n    toString: function toString() {\n        var objStr = this.object ? \"\" + this.object : this.get(\"element_identifier\");\n        return [\"NestedDCDCE(\", objStr, \")\"].join(\"\");\n    }\n}));\n\n//==============================================================================\n/** @class Backbone collection containing Generic NestedDCDCE's (nested dataset collections).\n */\nvar NestedDCDCECollection = DCECollection.extend(\n/** @lends NestedDCDCECollection.prototype */{\n    /** This is a collection of nested collections */\n    model: NestedDCDCE,\n\n    /** String representation. */\n    toString: function toString() {\n        return [\"NestedDCDCECollection(\", this.length, \")\"].join(\"\");\n    }\n});\n\n//==============================================================================\nexports.default = {\n    DatasetCollection: DatasetCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-icons.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    tool: \"fa-wrench\",\n    data_input: \"fa-file-o\",\n    data_collection_input: \"fa-folder-o\",\n    subworkflow: \"fa-sitemap fa-rotate-270\",\n    pause: \"fa-pause\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL3dvcmtmbG93L3dvcmtmbG93LWljb25zLmpzPzVlZGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRvb2w6IFwiZmEtd3JlbmNoXCIsXG4gICAgZGF0YV9pbnB1dDogXCJmYS1maWxlLW9cIixcbiAgICBkYXRhX2NvbGxlY3Rpb25faW5wdXQ6IFwiZmEtZm9sZGVyLW9cIixcbiAgICBzdWJ3b3JrZmxvdzogXCJmYS1zaXRlbWFwIGZhLXJvdGF0ZS0yNzBcIixcbiAgICBwYXVzZTogXCJmYS1wYXVzZVwiXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy93b3JrZmxvdy93b3JrZmxvdy1pY29ucy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/*!*****************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-model.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, jQuery, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _historyContents = __webpack_require__(/*! mvc/history/history-contents */ 63);\n\nvar _historyContents2 = _interopRequireDefault(_historyContents);\n\nvar _historyPreferences = __webpack_require__(/*! mvc/history/history-preferences */ 64);\n\nvar _historyPreferences2 = _interopRequireDefault(_historyPreferences);\n\nvar _controlledFetchCollection = __webpack_require__(/*! mvc/base/controlled-fetch-collection */ 115);\n\nvar _controlledFetchCollection2 = _interopRequireDefault(_controlledFetchCollection);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\n/** @class Model for a Galaxy history resource - both a record of user\n *      tool use and a collection of the datasets those tools produced.\n *  @name History\n *  @augments Backbone.Model\n */\nvar History = Backbone.Model.extend(_baseMvc2.default.LoggableMixin).extend(_baseMvc2.default.mixin(_baseMvc2.default.SearchableModelMixin,\n/** @lends History.prototype */{\n    _logNamespace: \"history\",\n\n    /** ms between fetches when checking running jobs/datasets for updates */\n    UPDATE_DELAY: 4000,\n\n    // values from api (may need more)\n    defaults: {\n        model_class: \"History\",\n        id: null,\n        name: \"Unnamed History\",\n        state: \"new\",\n\n        deleted: false,\n        contents_active: {},\n        contents_states: {}\n    },\n\n    urlRoot: Galaxy.root + \"api/histories\",\n\n    contentsClass: _historyContents2.default.HistoryContents,\n\n    /** What model fields to search with */\n    searchAttributes: [\"name\", \"annotation\", \"tags\"],\n\n    /** Adding title and singular tag */\n    searchAliases: {\n        title: \"name\",\n        tag: \"tags\"\n    },\n\n    // ........................................................................ set up/tear down\n    /** Set up the model\n     *  @param {Object} historyJSON model data for this History\n     *  @param {Object} options     any extra settings including logger\n     */\n    initialize: function initialize(historyJSON, options) {\n        options = options || {};\n        this.logger = options.logger || null;\n        this.log(this + \".initialize:\", historyJSON, options);\n\n        /** HistoryContents collection of the HDAs contained in this history. */\n        this.contents = new this.contentsClass([], {\n            history: this,\n            historyId: this.get(\"id\"),\n            order: options.order\n        });\n\n        this._setUpListeners();\n        this._setUpCollectionListeners();\n\n        /** cached timeout id for the dataset updater */\n        this.updateTimeoutId = null;\n    },\n\n    /** set up any event listeners for this history including those to the contained HDAs\n     *  events: error:contents  if an error occurred with the contents collection\n     */\n    _setUpListeners: function _setUpListeners() {\n        // if the model's id changes ('current' or null -> an actual id), update the contents history_id\n        return this.on({\n            error: function error(model, xhr, options, msg, details) {\n                this.clearUpdateTimeout();\n            },\n            \"change:id\": function changeId(model, newId) {\n                if (this.contents) {\n                    this.contents.historyId = newId;\n                }\n            }\n        });\n    },\n\n    /** event handlers for the contents submodels */\n    _setUpCollectionListeners: function _setUpCollectionListeners() {\n        if (!this.contents) {\n            return this;\n        }\n        // bubble up errors\n        return this.listenTo(this.contents, {\n            error: function error() {\n                this.trigger.apply(this, jQuery.makeArray(arguments));\n            }\n        });\n    },\n\n    // ........................................................................ derived attributes\n    /**  */\n    contentsShown: function contentsShown() {\n        var contentsActive = this.get(\"contents_active\");\n        var shown = contentsActive.active || 0;\n        shown += this.contents.includeDeleted ? contentsActive.deleted : 0;\n        shown += this.contents.includeHidden ? contentsActive.hidden : 0;\n        return shown;\n    },\n\n    /** convert size in bytes to a more human readable version */\n    nice_size: function nice_size() {\n        var size = this.get(\"size\");\n        return size ? _utils2.default.bytesToString(size, true, 2) : (0, _localization2.default)(\"(empty)\");\n    },\n\n    /** override to add nice_size */\n    toJSON: function toJSON() {\n        return _.extend(Backbone.Model.prototype.toJSON.call(this), {\n            nice_size: this.nice_size()\n        });\n    },\n\n    /** override to allow getting nice_size */\n    get: function get(key) {\n        if (key === \"nice_size\") {\n            return this.nice_size();\n        }\n        return Backbone.Model.prototype.get.apply(this, arguments);\n    },\n\n    // ........................................................................ common queries\n    /** T/F is this history owned by the current user (Galaxy.user)\n     *      Note: that this will return false for an anon user even if the history is theirs.\n     */\n    ownedByCurrUser: function ownedByCurrUser() {\n        // no currUser\n        if (!Galaxy || !Galaxy.user) {\n            return false;\n        }\n        // user is anon or history isn't owned\n        if (Galaxy.user.isAnonymous() || Galaxy.user.id !== this.get(\"user_id\")) {\n            return false;\n        }\n        return true;\n    },\n\n    /** Return the number of running jobs assoc with this history (note: unknown === 0) */\n    numOfUnfinishedJobs: function numOfUnfinishedJobs() {\n        var unfinishedJobIds = this.get(\"non_ready_jobs\");\n        return unfinishedJobIds ? unfinishedJobIds.length : 0;\n    },\n\n    /** Return the number of running hda/hdcas in this history (note: unknown === 0) */\n    numOfUnfinishedShownContents: function numOfUnfinishedShownContents() {\n        return this.contents.runningAndActive().length || 0;\n    },\n\n    // ........................................................................ updates\n    _fetchContentRelatedAttributes: function _fetchContentRelatedAttributes() {\n        var contentRelatedAttrs = [\"size\", \"non_ready_jobs\", \"contents_active\", \"hid_counter\"];\n        return this.fetch({\n            data: $.param({\n                keys: contentRelatedAttrs.join(\",\")\n            })\n        });\n    },\n\n    /** check for any changes since the last time we updated (or fetch all if ) */\n    refresh: function refresh(options) {\n        var _this = this;\n\n        // console.log( this + '.refresh' );\n        options = options || {};\n\n        // note if there was no previous update time, all summary contents will be fetched\n        var lastUpdateTime = this.lastUpdateTime;\n        // if we don't flip this, then a fully-fetched list will not be re-checked via fetch\n        this.contents.allFetched = false;\n        var fetchFn = this.contents.currentPage !== 0 ? function () {\n            return _this.contents.fetchPage(_this.contents.currentPage);\n        } : function () {\n            return _this.contents.fetchUpdated(lastUpdateTime);\n        };\n        // note: if there was no previous update time, all summary contents will be fetched\n        return fetchFn().done(function (response, status, xhr) {\n            var serverResponseDatetime;\n            try {\n                serverResponseDatetime = new Date(xhr.getResponseHeader(\"Date\"));\n            } catch (err) {}\n            _this.lastUpdateTime = serverResponseDatetime || new Date();\n            _this.checkForUpdates(options);\n        });\n    },\n\n    /** continuously fetch updated contents every UPDATE_DELAY ms if this history's datasets or jobs are unfinished */\n    checkForUpdates: function checkForUpdates(options) {\n        var _this2 = this;\n\n        // console.log( this + '.checkForUpdates' );\n        options = options || {};\n        var delay = this.UPDATE_DELAY;\n        if (!this.id) {\n            return;\n        }\n\n        var _delayThenUpdate = function _delayThenUpdate() {\n            // prevent buildup of updater timeouts by clearing previous if any, then set new and cache id\n            _this2.clearUpdateTimeout();\n            _this2.updateTimeoutId = setTimeout(function () {\n                _this2.refresh(options);\n            }, delay);\n        };\n\n        // if there are still datasets in the non-ready state, recurse into this function with the new time\n        var nonReadyContentCount = this.numOfUnfinishedShownContents();\n        // console.log( 'nonReadyContentCount:', nonReadyContentCount );\n        if (nonReadyContentCount > 0) {\n            _delayThenUpdate();\n        } else {\n            // no datasets are running, but currently runnning jobs may still produce new datasets\n            // see if the history has any running jobs and continue to update if so\n            // (also update the size for the user in either case)\n            this._fetchContentRelatedAttributes().done(function (historyData) {\n                // console.log( 'non_ready_jobs:', historyData.non_ready_jobs );\n                if (_this2.numOfUnfinishedJobs() > 0) {\n                    _delayThenUpdate();\n                } else {\n                    // otherwise, let listeners know that all updates have stopped\n                    _this2.trigger(\"ready\");\n                }\n            });\n        }\n    },\n\n    /** clear the timeout and the cached timeout id */\n    clearUpdateTimeout: function clearUpdateTimeout() {\n        if (this.updateTimeoutId) {\n            clearTimeout(this.updateTimeoutId);\n            this.updateTimeoutId = null;\n        }\n    },\n\n    stopPolling: function stopPolling() {\n        this.clearUpdateTimeout();\n        if (this.contents) {\n            this.contents.stopPolling();\n        }\n    },\n\n    // ........................................................................ ajax\n    /** override to use actual Dates objects for create/update times */\n    parse: function parse(response, options) {\n        var parsed = Backbone.Model.prototype.parse.call(this, response, options);\n        if (parsed.create_time) {\n            parsed.create_time = new Date(parsed.create_time);\n        }\n        if (parsed.update_time) {\n            parsed.update_time = new Date(parsed.update_time);\n        }\n        return parsed;\n    },\n\n    /** fetch this histories data (using options) then it's contents (using contentsOptions) */\n    fetchWithContents: function fetchWithContents(options, contentsOptions) {\n        options = options || {};\n        var self = this;\n\n        // console.log( this + '.fetchWithContents' );\n        // TODO: push down to a base class\n        options.view = \"dev-detailed\";\n\n        // fetch history then use history data to fetch (paginated) contents\n        return this.fetch(options).then(function getContents(history) {\n            self.contents.history = self;\n            self.contents.setHistoryId(history.id);\n            return self.fetchContents(contentsOptions);\n        });\n    },\n\n    /** fetch this histories contents, adjusting options based on the stored history preferences */\n    fetchContents: function fetchContents(options) {\n        options = options || {};\n        var self = this;\n\n        // we're updating, reset the update time\n        self.lastUpdateTime = new Date();\n        return self.contents.fetchCurrentPage(options);\n    },\n\n    /** save this history, _Mark_ing it as deleted (just a flag) */\n    _delete: function _delete(options) {\n        if (this.get(\"deleted\")) {\n            return jQuery.when();\n        }\n        return this.save({ deleted: true }, options);\n    },\n    /** purge this history, _Mark_ing it as purged and removing all dataset data from the server */\n    purge: function purge(options) {\n        if (this.get(\"purged\")) {\n            return jQuery.when();\n        }\n        return this.save({ deleted: true, purged: true }, options);\n    },\n    /** save this history, _Mark_ing it as undeleted */\n    undelete: function undelete(options) {\n        if (!this.get(\"deleted\")) {\n            return jQuery.when();\n        }\n        return this.save({ deleted: false }, options);\n    },\n\n    /** Make a copy of this history on the server\n     *  @param {Boolean} current    if true, set the copy as the new current history (default: true)\n     *  @param {String} name        name of new history (default: none - server sets to: Copy of <current name>)\n     *  @fires copied               passed this history and the response JSON from the copy\n     *  @returns {xhr}\n     */\n    copy: function copy(current, name, allDatasets) {\n        current = current !== undefined ? current : true;\n        if (!this.id) {\n            throw new Error(\"You must set the history ID before copying it.\");\n        }\n\n        var postData = { history_id: this.id };\n        if (current) {\n            postData.current = true;\n        }\n        if (name) {\n            postData.name = name;\n        }\n        if (!allDatasets) {\n            postData.all_datasets = false;\n        }\n        postData.view = \"dev-detailed\";\n\n        var history = this;\n        var copy = jQuery.post(this.urlRoot, postData);\n        // if current - queue to setAsCurrent before firing 'copied'\n        if (current) {\n            return copy.then(function (response) {\n                var newHistory = new History(response);\n                return newHistory.setAsCurrent().done(function () {\n                    history.trigger(\"copied\", history, response);\n                });\n            });\n        }\n        return copy.done(function (response) {\n            history.trigger(\"copied\", history, response);\n        });\n    },\n\n    setAsCurrent: function setAsCurrent() {\n        var history = this;\n\n        var xhr = jQuery.getJSON(Galaxy.root + \"history/set_as_current?id=\" + this.id);\n\n        xhr.done(function () {\n            history.trigger(\"set-as-current\", history);\n        });\n        return xhr;\n    },\n\n    // ........................................................................ misc\n    toString: function toString() {\n        return \"History(\" + this.get(\"id\") + \",\" + this.get(\"name\") + \")\";\n    }\n}));\n\n//==============================================================================\nvar _collectionSuper = _controlledFetchCollection2.default.InfinitelyScrollingCollection;\n/** @class A collection of histories (per user)\n *      that maintains the current history as the first in the collection.\n *  New or copied histories become the current history.\n */\nvar HistoryCollection = _collectionSuper.extend(_baseMvc2.default.LoggableMixin).extend({\n    _logNamespace: \"history\",\n\n    model: History,\n    /** @type {String} initial order used by collection */\n    order: \"update_time\",\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch: 10,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch: 10,\n\n    initialize: function initialize(models, options) {\n        options = options || {};\n        this.log(\"HistoryCollection.initialize\", models, options);\n        _collectionSuper.prototype.initialize.call(this, models, options);\n\n        /** @type {boolean} should deleted histories be included */\n        this.includeDeleted = options.includeDeleted || false;\n\n        /** @type {String} encoded id of the history that's current */\n        this.currentHistoryId = options.currentHistoryId;\n\n        this.setUpListeners();\n        // note: models are sent to reset *after* this fn ends; up to this point\n        // the collection *is empty*\n    },\n\n    urlRoot: Galaxy.root + \"api/histories\",\n    url: function url() {\n        return this.urlRoot;\n    },\n\n    /** set up reflexive event handlers */\n    setUpListeners: function setUpListeners() {\n        return this.on({\n            // when a history is deleted, remove it from the collection (if optionally set to do so)\n            \"change:deleted\": function changeDeleted(history) {\n                // TODO: this becomes complicated when more filters are used\n                this.debug(\"change:deleted\", this.includeDeleted, history.get(\"deleted\"));\n                if (!this.includeDeleted && history.get(\"deleted\")) {\n                    this.remove(history);\n                }\n            },\n            // listen for a history copy, setting it to current\n            copied: function copied(original, newData) {\n                this.setCurrent(new History(newData, []));\n            },\n            // when a history is made current, track the id in the collection\n            \"set-as-current\": function setAsCurrent(history) {\n                var oldCurrentId = this.currentHistoryId;\n                this.trigger(\"no-longer-current\", oldCurrentId);\n                this.currentHistoryId = history.id;\n            }\n        });\n    },\n\n    /** override to change view */\n    _buildFetchData: function _buildFetchData(options) {\n        return _.extend(_collectionSuper.prototype._buildFetchData.call(this, options), {\n            view: \"dev-detailed\"\n        });\n    },\n\n    /** override to filter out deleted and purged */\n    _buildFetchFilters: function _buildFetchFilters(options) {\n        var superFilters = _collectionSuper.prototype._buildFetchFilters.call(this, options) || {};\n        var filters = {};\n        if (!this.includeDeleted) {\n            filters.deleted = false;\n            filters.purged = false;\n        } else {\n            // force API to return both deleted and non\n            //TODO: when the API is updated, remove this\n            filters.deleted = null;\n        }\n        return _.defaults(superFilters, filters);\n    },\n\n    /** override to fetch current as well (as it may be outside the first 10, etc.) */\n    fetchFirst: function fetchFirst(options) {\n        var self = this;\n        // TODO: batch?\n        var xhr = $.when();\n        if (this.currentHistoryId) {\n            xhr = _collectionSuper.prototype.fetchFirst.call(self, {\n                silent: true,\n                limit: 1,\n                filters: {\n                    // without these a deleted current history will return [] here and block the other xhr\n                    purged: \"\",\n                    deleted: \"\",\n                    \"encoded_id-in\": this.currentHistoryId\n                }\n            });\n        }\n        return xhr.then(function () {\n            options = options || {};\n            options.offset = 0;\n            return self.fetchMore(options);\n        });\n    },\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: _.extend(_.clone(_collectionSuper.prototype.comparators), {\n        name: _baseMvc2.default.buildComparator(\"name\", {\n            ascending: true\n        }),\n        \"name-dsc\": _baseMvc2.default.buildComparator(\"name\", {\n            ascending: false\n        }),\n        size: _baseMvc2.default.buildComparator(\"size\", {\n            ascending: false\n        }),\n        \"size-asc\": _baseMvc2.default.buildComparator(\"size\", {\n            ascending: true\n        })\n    }),\n\n    /** override to always have the current history first */\n    sort: function sort(options) {\n        options = options || {};\n        var silent = options.silent;\n        var currentHistory = this.remove(this.get(this.currentHistoryId));\n        _collectionSuper.prototype.sort.call(this, _.defaults({ silent: true }, options));\n        this.unshift(currentHistory, { silent: true });\n        if (!silent) {\n            this.trigger(\"sort\", this, options);\n        }\n        return this;\n    },\n\n    /** create a new history and by default set it to be the current history */\n    create: function create(data, hdas, historyOptions, xhrOptions) {\n        //TODO: .create is actually a collection function that's overridden here\n        var collection = this;\n\n        var xhr = jQuery.getJSON(Galaxy.root + \"history/create_new_current\");\n        return xhr.done(function (newData) {\n            collection.setCurrent(new History(newData, [], historyOptions || {}));\n        });\n    },\n\n    /** set the current history to the given history, placing it first in the collection.\n     *  Pass standard bbone options for use in unshift.\n     *  @triggers new-current passed history and this collection\n     */\n    setCurrent: function setCurrent(history, options) {\n        options = options || {};\n        // new histories go in the front\n        this.unshift(history, options);\n        this.currentHistoryId = history.get(\"id\");\n        if (!options.silent) {\n            this.trigger(\"new-current\", history, this);\n        }\n        return this;\n    },\n\n    toString: function toString() {\n        return \"HistoryCollection(\" + this.length + \",current:\" + this.currentHistoryId + \")\";\n    }\n});\n\n//==============================================================================\nexports.default = {\n    History: History,\n    HistoryCollection: HistoryCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */
/*!********************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-contents.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, jQuery, Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _controlledFetchCollection = __webpack_require__(/*! mvc/base/controlled-fetch-collection */ 115);\n\nvar _controlledFetchCollection2 = _interopRequireDefault(_controlledFetchCollection);\n\nvar _hdaModel = __webpack_require__(/*! mvc/history/hda-model */ 116);\n\nvar _hdaModel2 = _interopRequireDefault(_hdaModel);\n\nvar _hdcaModel = __webpack_require__(/*! mvc/history/hdca-model */ 59);\n\nvar _hdcaModel2 = _interopRequireDefault(_hdcaModel);\n\nvar _historyPreferences = __webpack_require__(/*! mvc/history/history-preferences */ 64);\n\nvar _historyPreferences2 = _interopRequireDefault(_historyPreferences);\n\nvar _jobStatesModel = __webpack_require__(/*! mvc/history/job-states-model */ 253);\n\nvar _jobStatesModel2 = _interopRequireDefault(_jobStatesModel);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _ajaxQueue = __webpack_require__(/*! utils/ajax-queue */ 117);\n\nvar _ajaxQueue2 = _interopRequireDefault(_ajaxQueue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar limitPerPageDefault = 500;\ntry {\n    limitPerPageDefault = localStorage.getItem(\"historyContentsLimitPerPageDefault\") || limitPerPageDefault;\n} catch (err) {}\n\n//==============================================================================\nvar _super = _controlledFetchCollection2.default.PaginatedCollection;\n/** @class Backbone collection for history content.\n *      NOTE: history content seems like a dataset collection, but differs in that it is mixed:\n *          each element can be either an HDA (dataset) or a DatasetCollection and co-exist on\n *          the same level.\n *      Dataset collections on the other hand are not mixed and (so far) can only contain either\n *          HDAs or child dataset collections on one level.\n *      This is why this does not inherit from any of the DatasetCollections (currently).\n */\nvar HistoryContents = _super.extend(_baseMvc2.default.LoggableMixin).extend({\n    _logNamespace: \"history\",\n\n    // ........................................................................ set up\n    limitPerPage: limitPerPageDefault,\n\n    /** @type {Integer} how many contents per call to fetch when using progressivelyFetchDetails */\n    limitPerProgressiveFetch: limitPerPageDefault,\n\n    /** @type {String} order used here and when fetching from server */\n    order: \"hid\",\n\n    /** root api url */\n    urlRoot: Galaxy.root + \"api/histories\",\n\n    /** complete api url */\n    url: function url() {\n        return this.urlRoot + \"/\" + this.historyId + \"/contents\";\n    },\n\n    /** Set up */\n    initialize: function initialize(models, options) {\n        this.on({\n            \"sync add\": this.trackJobStates\n        });\n\n        options = options || {};\n        _super.prototype.initialize.call(this, models, options);\n\n        this.history = options.history || null;\n        this.setHistoryId(options.historyId || null);\n        /** @type {Boolean} does this collection contain and fetch deleted elements */\n        this.includeDeleted = options.includeDeleted || this.includeDeleted;\n        /** @type {Boolean} does this collection contain and fetch non-visible elements */\n        this.includeHidden = options.includeHidden || this.includeHidden;\n\n        // backbonejs uses collection.model.prototype.idAttribute to determine if a model is *already* in a collection\n        //  and either merged or replaced. In this case, our 'model' is a function so we need to add idAttribute\n        //  manually here - if we don't, contents will not merge but be replaced/swapped.\n        this.model.prototype.idAttribute = \"type_id\";\n    },\n\n    trackJobStates: function trackJobStates() {\n        var _this = this;\n\n        this.each(function (historyContent) {\n            if (historyContent.has(\"job_states_summary\")) {\n                return;\n            }\n\n            if (historyContent.attributes.history_content_type === \"dataset_collection\") {\n                var jobSourceType = historyContent.attributes.job_source_type;\n                var jobSourceId = historyContent.attributes.job_source_id;\n                if (jobSourceType) {\n                    _this.jobStateSummariesCollection.add({\n                        id: jobSourceId,\n                        model: jobSourceType,\n                        history_id: _this.history_id,\n                        collection_id: historyContent.attributes.id\n                    });\n                    var jobStatesSummary = _this.jobStateSummariesCollection.get(jobSourceId);\n                    historyContent.jobStatesSummary = jobStatesSummary;\n                }\n            }\n        });\n    },\n\n    // ........................................................................ composite collection\n    /** since history content is a mix, override model fn into a factory, creating based on history_content_type */\n    model: function model(attrs, options) {\n        if (attrs.history_content_type === \"dataset\") {\n            return new _hdaModel2.default.HistoryDatasetAssociation(attrs, options);\n        } else if (attrs.history_content_type === \"dataset_collection\") {\n            return new _hdcaModel2.default.HistoryDatasetCollection(attrs, options);\n        } else {\n            return {\n                validationError: \"Unknown history_content_type: \" + attrs.history_content_type\n            };\n        }\n    },\n\n    stopPolling: function stopPolling() {\n        if (this.jobStateSummariesCollection) {\n            this.jobStateSummariesCollection.active = false;\n            this.jobStateSummariesCollection.clearUpdateTimeout();\n        }\n    },\n\n    setHistoryId: function setHistoryId(newId) {\n        this.stopPolling();\n        this.historyId = newId;\n        if (newId) {\n            // If actually reflecting a history - setup storage and monitor jobs.\n\n            this._setUpWebStorage();\n\n            this.jobStateSummariesCollection = new _jobStatesModel2.default.JobStatesSummaryCollection();\n            this.jobStateSummariesCollection.historyId = newId;\n            this.jobStateSummariesCollection.monitor();\n        }\n    },\n\n    /** Set up client side storage. Currently PersistanStorage keyed under 'history:<id>' */\n    _setUpWebStorage: function _setUpWebStorage(initialSettings) {\n        // TODO: use initialSettings\n        this.storage = new _historyPreferences2.default.HistoryPrefs({\n            id: _historyPreferences2.default.HistoryPrefs.historyStorageKey(this.historyId)\n        });\n        this.trigger(\"new-storage\", this.storage, this);\n\n        this.on({\n            \"include-deleted\": function includeDeleted(newVal) {\n                this.storage.includeDeleted(newVal);\n            },\n            \"include-hidden\": function includeHidden(newVal) {\n                this.storage.includeHidden(newVal);\n            }\n        });\n\n        this.includeDeleted = this.storage.includeDeleted() || false;\n        this.includeHidden = this.storage.includeHidden() || false;\n        return this;\n    },\n\n    // ........................................................................ common queries\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: _.extend(_.clone(_super.prototype.comparators), {\n        name: _baseMvc2.default.buildComparator(\"name\", { ascending: true }),\n        \"name-dsc\": _baseMvc2.default.buildComparator(\"name\", {\n            ascending: false\n        }),\n        hid: _baseMvc2.default.buildComparator(\"hid\", { ascending: false }),\n        \"hid-asc\": _baseMvc2.default.buildComparator(\"hid\", { ascending: true })\n    }),\n\n    /** Get every model in this collection not in a 'ready' state (running). */\n    running: function running() {\n        return this.filter(function (c) {\n            return !c.inReadyState();\n        });\n    },\n\n    /** return contents that are not ready and not deleted/hidden */\n    runningAndActive: function runningAndActive() {\n        return this.filter(function (c) {\n            return !c.inReadyState() && c.get(\"visible\") &&\n            // TODO: deletedOrPurged?\n            !c.get(\"deleted\");\n        });\n    },\n\n    /** Get the model with the given hid\n     *  @param {Int} hid the hid to search for\n     *  @returns {HistoryDatasetAssociation} the model with the given hid or undefined if not found\n     */\n    getByHid: function getByHid(hid) {\n        // note: there *can* be more than one content with a given hid, this finds the first based on order\n        return this.findWhere({ hid: hid });\n    },\n\n    /** return true if all contents have details */\n    haveDetails: function haveDetails() {\n        return this.all(function (c) {\n            return c.hasDetails();\n        });\n    },\n\n    // ........................................................................ hidden / deleted\n    /** return a new contents collection of only hidden items */\n    hidden: function hidden() {\n        return this.filter(function (c) {\n            return c.hidden();\n        });\n    },\n\n    /** return a new contents collection of only hidden items */\n    deleted: function deleted() {\n        return this.filter(function (c) {\n            return c.get(\"deleted\");\n        });\n    },\n\n    /** return a new contents collection of only hidden items */\n    visibleAndUndeleted: function visibleAndUndeleted() {\n        return this.filter(function (c) {\n            return c.get(\"visible\") &&\n            // TODO: deletedOrPurged?\n            !c.get(\"deleted\");\n        });\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeDeleted: function setIncludeDeleted(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeDeleted) {\n            this.includeDeleted = setting;\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-deleted\", setting, this);\n        }\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeHidden: function setIncludeHidden(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeHidden) {\n            this.includeHidden = setting;\n            options = options || {};\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-hidden\", setting, this);\n        }\n    },\n\n    // ........................................................................ ajax\n    // ............ controlled fetch collection\n    /** override to get expanded ids from sessionStorage and pass to API as details */\n    fetch: function fetch(options) {\n        options = options || {};\n        if (this.historyId && !options.details) {\n            var prefs = _historyPreferences2.default.HistoryPrefs.get(this.historyId).toJSON();\n            if (!_.isEmpty(prefs.expandedIds)) {\n                options.details = _.values(prefs.expandedIds).join(\",\");\n            }\n        }\n        return _super.prototype.fetch.call(this, options);\n    },\n\n    // ............. ControlledFetch stuff\n    /** override to include the API versioning flag */\n    _buildFetchData: function _buildFetchData(options) {\n        return _.extend(_super.prototype._buildFetchData.call(this, options), {\n            v: \"dev\"\n        });\n    },\n\n    /** Extend to include details and version */\n    _fetchParams: _super.prototype._fetchParams.concat([\n    // TODO: remove (the need for) both\n    /** version */\n    \"v\",\n    /** dataset ids to get full details of */\n    \"details\"]),\n\n    /** override to add deleted/hidden filters */\n    _buildFetchFilters: function _buildFetchFilters(options) {\n        var superFilters = _super.prototype._buildFetchFilters.call(this, options) || {};\n        var filters = {};\n        if (!this.includeDeleted) {\n            filters.deleted = false;\n            filters.purged = false;\n        }\n        if (!this.includeHidden) {\n            filters.visible = true;\n        }\n        return _.defaults(superFilters, filters);\n    },\n\n    // ............ paginated collection\n    getTotalItemCount: function getTotalItemCount() {\n        return this.history.contentsShown();\n    },\n\n    // ............ history contents specific ajax\n    /** override to filter requested contents to those updated after the Date 'since' */\n    fetchUpdated: function fetchUpdated(since, options) {\n        if (since) {\n            options = options || { filters: {} };\n            options.remove = false;\n            options.filters = {\n                \"update_time-ge\": since.toISOString(),\n                // workflows will produce hidden datasets (non-output datasets) that still\n                // need to be updated in the collection or they'll update forever\n                // we can remove the default visible filter by using an 'empty' value\n                visible: \"\"\n            };\n        }\n        return this.fetch(options);\n    },\n\n    /** fetch all the deleted==true contents of this collection */\n    fetchDeleted: function fetchDeleted(options) {\n        var _this2 = this;\n\n        options = options || {};\n        options.filters = _.extend(options.filters, {\n            // all deleted, purged or not\n            deleted: true,\n            purged: undefined\n        });\n        options.remove = false;\n\n        this.trigger(\"fetching-deleted\", this);\n        return this.fetch(options).always(function () {\n            _this2.trigger(\"fetching-deleted-done\", _this2);\n        });\n    },\n\n    /** fetch all the visible==false contents of this collection */\n    fetchHidden: function fetchHidden(options) {\n        options = options || {};\n        var self = this;\n        options.filters = _.extend(options.filters, {\n            visible: false\n        });\n        options.remove = false;\n\n        self.trigger(\"fetching-hidden\", self);\n        return self.fetch(options).always(function () {\n            self.trigger(\"fetching-hidden-done\", self);\n        });\n    },\n\n    /** fetch detailed model data for all contents in this collection */\n    fetchAllDetails: function fetchAllDetails(options) {\n        options = options || {};\n        var detailsFlag = { details: \"all\" };\n        options.data = _.extend(options.data || {}, detailsFlag);\n        return this.fetch(options);\n    },\n\n    // ............. quasi-batch ops\n    // TODO: to batch\n    /** helper that fetches using filterParams then calls save on each fetched using updateWhat as the save params */\n    _filterAndUpdate: function _filterAndUpdate(filterParams, updateWhat) {\n        var self = this;\n        var idAttribute = self.model.prototype.idAttribute;\n        var updateArgs = [updateWhat];\n\n        return self.fetch({ filters: filterParams, remove: false }).then(function (fetched) {\n            // convert filtered json array to model array\n            fetched = fetched.reduce(function (modelArray, currJson, i) {\n                var model = self.get(currJson[idAttribute]);\n                return model ? modelArray.concat(model) : modelArray;\n            }, []);\n            return self.ajaxQueue(\"save\", updateArgs, fetched);\n        });\n    },\n\n    /** using a queue, perform ajaxFn on each of the models in this collection */\n    ajaxQueue: function ajaxQueue(ajaxFn, args, collection) {\n        collection = collection || this.models;\n        return new _ajaxQueue2.default.AjaxQueue(collection.slice().reverse().map(function (content, i) {\n            var fn = _.isString(ajaxFn) ? content[ajaxFn] : ajaxFn;\n            return function () {\n                return fn.apply(content, args);\n            };\n        })).deferred;\n    },\n\n    /** fetch contents' details in batches of limitPerCall - note: only get searchable details here */\n    progressivelyFetchDetails: function progressivelyFetchDetails(options) {\n        options = options || {};\n        var deferred = jQuery.Deferred();\n        var self = this;\n        var limit = options.limitPerCall || self.limitPerProgressiveFetch;\n        // TODO: only fetch tags and annotations if specifically requested\n        var searchAttributes = _hdaModel2.default.HistoryDatasetAssociation.prototype.searchAttributes;\n        var detailKeys = searchAttributes.join(\",\");\n\n        function _recursivelyFetch(offset) {\n            offset = offset || 0;\n            var _options = _.extend(_.clone(options), {\n                view: \"summary\",\n                keys: detailKeys,\n                limit: limit,\n                offset: offset,\n                reset: offset === 0,\n                remove: false\n            });\n\n            _.defer(function () {\n                self.fetch.call(self, _options).fail(deferred.reject).done(function (response) {\n                    deferred.notify(response, limit, offset);\n                    if (response.length !== limit) {\n                        self.allFetched = true;\n                        deferred.resolve(response, limit, offset);\n                    } else {\n                        _recursivelyFetch(offset + limit);\n                    }\n                });\n            });\n        }\n        _recursivelyFetch();\n        return deferred;\n    },\n\n    /** does some bit of JSON represent something that can be copied into this contents collection */\n    isCopyable: function isCopyable(contentsJSON) {\n        var copyableModelClasses = [\"HistoryDatasetAssociation\", \"HistoryDatasetCollectionAssociation\"];\n        return _.isObject(contentsJSON) && contentsJSON.id && _.contains(copyableModelClasses, contentsJSON.model_class);\n    },\n\n    /** copy an existing, accessible hda into this collection */\n    copy: function copy(json) {\n        // TODO: somehow showhorn all this into 'save'\n        var id;\n\n        var type;\n        var contentType;\n        if (_.isString(json)) {\n            id = json;\n            contentType = \"hda\";\n            type = \"dataset\";\n        } else {\n            id = json.id;\n            contentType = {\n                HistoryDatasetAssociation: \"hda\",\n                LibraryDatasetDatasetAssociation: \"ldda\",\n                HistoryDatasetCollectionAssociation: \"hdca\"\n            }[json.model_class] || \"hda\";\n            type = contentType === \"hdca\" ? \"dataset_collection\" : \"dataset\";\n        }\n        var collection = this;\n\n        var xhr = jQuery.ajax(this.url(), {\n            method: \"POST\",\n            contentType: \"application/json\",\n            data: JSON.stringify({\n                content: id,\n                source: contentType,\n                type: type\n            })\n        }).done(function (response) {\n            collection.add([response], { parse: true });\n        }).fail(function (error, status, message) {\n            collection.trigger(\"error\", collection, xhr, {}, \"Error copying contents\", {\n                type: type,\n                id: id,\n                source: contentType\n            });\n        });\n\n        return xhr;\n    },\n\n    /** create a new HDCA in this collection */\n    createHDCA: function createHDCA(elementIdentifiers, collectionType, name, hideSourceItems, options) {\n        // normally collection.create returns the new model, but we need the promise from the ajax, so we fake create\n        //precondition: elementIdentifiers is an array of plain js objects\n        //  in the proper form to create the collectionType\n        var hdca = this.model({\n            history_content_type: \"dataset_collection\",\n            collection_type: collectionType,\n            history_id: this.historyId,\n            name: name,\n            hide_source_items: hideSourceItems || false,\n            // should probably be able to just send in a bunch of json here and restruct per class\n            // note: element_identifiers is now (incorrectly) an attribute\n            element_identifiers: elementIdentifiers\n            // do not create the model on the client until the ajax returns\n        });\n        return hdca.save(options);\n    },\n\n    // ........................................................................ searching\n    /** return true if all contents have the searchable attributes */\n    haveSearchDetails: function haveSearchDetails() {\n        return this.allFetched && this.all(function (content // null (which is a valid returned annotation value)\n        ) {\n            return (\n                // will return false when using content.has( 'annotation' )\n                //TODO: a bit hacky - formalize\n                _.has(content.attributes, \"annotation\")\n            );\n        });\n    },\n\n    /** return a new collection of contents whose attributes contain the substring matchesWhat */\n    matches: function matches(matchesWhat) {\n        return this.filter(function (content) {\n            return content.matches(matchesWhat);\n        });\n    },\n\n    // ........................................................................ misc\n    /** In this override, copy the historyId to the clone */\n    clone: function clone() {\n        var clone = Backbone.Collection.prototype.clone.call(this);\n        clone.historyId = this.historyId;\n        return clone;\n    },\n\n    /** String representation. */\n    toString: function toString() {\n        return [\"HistoryContents(\", [this.historyId, this.length].join(), \")\"].join(\"\");\n    }\n});\n\n//==============================================================================\nexports.default = {\n    HistoryContents: HistoryContents\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63\n");

/***/ }),
/* 64 */
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-preferences.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"history\";\n\n// ============================================================================\n/** session storage for individual history preferences */\nvar HistoryPrefs = _baseMvc2.default.SessionStorageModel.extend(\n/** @lends HistoryPrefs.prototype */{\n    //TODO:?? move to user prefs?\n    defaults: {\n        //TODO:?? expandedIds to array?\n        expandedIds: {},\n        show_deleted: false,\n        show_hidden: false\n    },\n\n    /** add an hda id to the hash of expanded hdas */\n    addExpanded: function addExpanded(model) {\n        //TODO: use type_id and not model\n        var current = this.get(\"expandedIds\");\n        current[model.id] = model.get(\"id\");\n        this.save(\"expandedIds\", current);\n    },\n\n    /** remove an hda id from the hash of expanded hdas */\n    removeExpanded: function removeExpanded(model) {\n        var current = this.get(\"expandedIds\");\n        delete current[model.id];\n        this.save(\"expandedIds\", current);\n    },\n\n    isExpanded: function isExpanded(contentId) {\n        return _.result(this.get(\"expandedIds\"), contentId, false);\n    },\n\n    allExpanded: function allExpanded() {\n        return _.values(this.get(\"expandedIds\"));\n    },\n\n    clearExpanded: function clearExpanded() {\n        this.set(\"expandedIds\", {});\n    },\n\n    includeDeleted: function includeDeleted(val) {\n        // moving the invocation here so other components don't need to know the key\n        // TODO: change this key later\n        if (!_.isUndefined(val)) {\n            this.set(\"show_deleted\", val);\n        }\n        return this.get(\"show_deleted\");\n    },\n\n    includeHidden: function includeHidden(val) {\n        // TODO: change this key later\n        if (!_.isUndefined(val)) {\n            this.set(\"show_hidden\", val);\n        }\n        return this.get(\"show_hidden\");\n    },\n\n    toString: function toString() {\n        return \"HistoryPrefs(\" + this.id + \")\";\n    }\n}, {\n    // ........................................................................ class vars\n    // class lvl for access w/o instantiation\n    storageKeyPrefix: \"history:\",\n\n    /** key string to store each histories settings under */\n    historyStorageKey: function historyStorageKey(historyId) {\n        if (!historyId) {\n            throw new Error(\"HistoryPrefs.historyStorageKey needs valid id: \" + historyId);\n        }\n        // single point of change\n        return HistoryPrefs.storageKeyPrefix + historyId;\n    },\n\n    /** return the existing storage for the history with the given id (or create one if it doesn't exist) */\n    get: function get(historyId) {\n        return new HistoryPrefs({\n            id: HistoryPrefs.historyStorageKey(historyId)\n        });\n    },\n\n    /** clear all history related items in sessionStorage */\n    clearAll: function clearAll(historyId) {\n        for (var key in sessionStorage) {\n            if (key.indexOf(HistoryPrefs.storageKeyPrefix) === 0) {\n                sessionStorage.removeItem(key);\n            }\n        }\n    }\n});\n\n//==============================================================================\nexports.default = {\n    HistoryPrefs: HistoryPrefs\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL2hpc3RvcnkvaGlzdG9yeS1wcmVmZXJlbmNlcy5qcz85YmIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCQVNFX01WQyBmcm9tIFwibXZjL2Jhc2UtbXZjXCI7XG5cbnZhciBsb2dOYW1lc3BhY2UgPSBcImhpc3RvcnlcIjtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqIHNlc3Npb24gc3RvcmFnZSBmb3IgaW5kaXZpZHVhbCBoaXN0b3J5IHByZWZlcmVuY2VzICovXG52YXIgSGlzdG9yeVByZWZzID0gQkFTRV9NVkMuU2Vzc2lvblN0b3JhZ2VNb2RlbC5leHRlbmQoXG4gICAgLyoqIEBsZW5kcyBIaXN0b3J5UHJlZnMucHJvdG90eXBlICovIHtcbiAgICAgICAgLy9UT0RPOj8/IG1vdmUgdG8gdXNlciBwcmVmcz9cbiAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgIC8vVE9ETzo/PyBleHBhbmRlZElkcyB0byBhcnJheT9cbiAgICAgICAgICAgIGV4cGFuZGVkSWRzOiB7fSxcbiAgICAgICAgICAgIHNob3dfZGVsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICBzaG93X2hpZGRlbjogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogYWRkIGFuIGhkYSBpZCB0byB0aGUgaGFzaCBvZiBleHBhbmRlZCBoZGFzICovXG4gICAgICAgIGFkZEV4cGFuZGVkOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgLy9UT0RPOiB1c2UgdHlwZV9pZCBhbmQgbm90IG1vZGVsXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0KFwiZXhwYW5kZWRJZHNcIik7XG4gICAgICAgICAgICBjdXJyZW50W21vZGVsLmlkXSA9IG1vZGVsLmdldChcImlkXCIpO1xuICAgICAgICAgICAgdGhpcy5zYXZlKFwiZXhwYW5kZWRJZHNcIiwgY3VycmVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIHJlbW92ZSBhbiBoZGEgaWQgZnJvbSB0aGUgaGFzaCBvZiBleHBhbmRlZCBoZGFzICovXG4gICAgICAgIHJlbW92ZUV4cGFuZGVkOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldChcImV4cGFuZGVkSWRzXCIpO1xuICAgICAgICAgICAgZGVsZXRlIGN1cnJlbnRbbW9kZWwuaWRdO1xuICAgICAgICAgICAgdGhpcy5zYXZlKFwiZXhwYW5kZWRJZHNcIiwgY3VycmVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNFeHBhbmRlZDogZnVuY3Rpb24oY29udGVudElkKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5yZXN1bHQodGhpcy5nZXQoXCJleHBhbmRlZElkc1wiKSwgY29udGVudElkLCBmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWxsRXhwYW5kZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF8udmFsdWVzKHRoaXMuZ2V0KFwiZXhwYW5kZWRJZHNcIikpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFyRXhwYW5kZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoXCJleHBhbmRlZElkc1wiLCB7fSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5jbHVkZURlbGV0ZWQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgLy8gbW92aW5nIHRoZSBpbnZvY2F0aW9uIGhlcmUgc28gb3RoZXIgY29tcG9uZW50cyBkb24ndCBuZWVkIHRvIGtub3cgdGhlIGtleVxuICAgICAgICAgICAgLy8gVE9ETzogY2hhbmdlIHRoaXMga2V5IGxhdGVyXG4gICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwic2hvd19kZWxldGVkXCIsIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoXCJzaG93X2RlbGV0ZWRcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5jbHVkZUhpZGRlbjogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBjaGFuZ2UgdGhpcyBrZXkgbGF0ZXJcbiAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJzaG93X2hpZGRlblwiLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwic2hvd19oaWRkZW5cIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGBIaXN0b3J5UHJlZnMoJHt0aGlzLmlkfSlgO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBjbGFzcyB2YXJzXG4gICAgICAgIC8vIGNsYXNzIGx2bCBmb3IgYWNjZXNzIHcvbyBpbnN0YW50aWF0aW9uXG4gICAgICAgIHN0b3JhZ2VLZXlQcmVmaXg6IFwiaGlzdG9yeTpcIixcblxuICAgICAgICAvKioga2V5IHN0cmluZyB0byBzdG9yZSBlYWNoIGhpc3RvcmllcyBzZXR0aW5ncyB1bmRlciAqL1xuICAgICAgICBoaXN0b3J5U3RvcmFnZUtleTogZnVuY3Rpb24gaGlzdG9yeVN0b3JhZ2VLZXkoaGlzdG9yeUlkKSB7XG4gICAgICAgICAgICBpZiAoIWhpc3RvcnlJZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSGlzdG9yeVByZWZzLmhpc3RvcnlTdG9yYWdlS2V5IG5lZWRzIHZhbGlkIGlkOiAke2hpc3RvcnlJZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNpbmdsZSBwb2ludCBvZiBjaGFuZ2VcbiAgICAgICAgICAgIHJldHVybiBIaXN0b3J5UHJlZnMuc3RvcmFnZUtleVByZWZpeCArIGhpc3RvcnlJZDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogcmV0dXJuIHRoZSBleGlzdGluZyBzdG9yYWdlIGZvciB0aGUgaGlzdG9yeSB3aXRoIHRoZSBnaXZlbiBpZCAob3IgY3JlYXRlIG9uZSBpZiBpdCBkb2Vzbid0IGV4aXN0KSAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChoaXN0b3J5SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSGlzdG9yeVByZWZzKHtcbiAgICAgICAgICAgICAgICBpZDogSGlzdG9yeVByZWZzLmhpc3RvcnlTdG9yYWdlS2V5KGhpc3RvcnlJZClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBjbGVhciBhbGwgaGlzdG9yeSByZWxhdGVkIGl0ZW1zIGluIHNlc3Npb25TdG9yYWdlICovXG4gICAgICAgIGNsZWFyQWxsOiBmdW5jdGlvbiBjbGVhckFsbChoaXN0b3J5SWQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzZXNzaW9uU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihIaXN0b3J5UHJlZnMuc3RvcmFnZUtleVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbik7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgSGlzdG9yeVByZWZzOiBIaXN0b3J5UHJlZnNcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2hpc3RvcnkvaGlzdG9yeS1wcmVmZXJlbmNlcy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXZEQTtBQTBEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTVCQTtBQUNBO0FBK0JBO0FBQ0E7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64\n");

/***/ }),
/* 65 */
/*!**********************************************!*\
  !*** ./galaxy/scripts/mvc/list/list-item.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"list\";\n//==============================================================================\n/** A view which, when first rendered, shows only summary data/attributes, but\n *      can be expanded to show further details (and optionally fetch those\n *      details from the server).\n */\nvar ExpandableView = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    //TODO: Although the reasoning behind them is different, this shares a lot with HiddenUntilActivated above: combine them\n    //PRECONDITION: model must have method hasDetails\n    //PRECONDITION: subclasses must have templates.el and templates.details\n\n    initialize: function initialize(attributes) {\n        /** are the details of this view expanded/shown or not? */\n        this.expanded = attributes.expanded || false;\n        this.log(\"\\t expanded:\", this.expanded);\n        this.fxSpeed = attributes.fxSpeed !== undefined ? attributes.fxSpeed : this.fxSpeed;\n    },\n\n    // ........................................................................ render main\n    /** jq fx speed */\n    fxSpeed: \"fast\",\n\n    /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n    render: function render(speed) {\n        var $newRender = this._buildNewRender();\n        this._setUpBehaviors($newRender);\n        this._queueNewRender($newRender, speed);\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     *      If the view is already expanded, build the details as well.\n     */\n    _buildNewRender: function _buildNewRender() {\n        // create a new render using a skeleton template, render title buttons, render body, and set up events, etc.\n        var $newRender = $(this.templates.el(this.model.toJSON(), this));\n        if (this.expanded) {\n            this.$details($newRender).replaceWith(this._renderDetails().show());\n        }\n        return $newRender;\n    },\n\n    /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n    _queueNewRender: function _queueNewRender($newRender, speed) {\n        speed = speed === undefined ? this.fxSpeed : speed;\n        var view = this;\n\n        if (speed === 0) {\n            view._swapNewRender($newRender);\n            view.trigger(\"rendered\", view);\n        } else {\n            $(view).queue(\"fx\", [function (next) {\n                view.$el.fadeOut(speed, next);\n            }, function (next) {\n                view._swapNewRender($newRender);\n                next();\n            }, function (next) {\n                view.$el.fadeIn(speed, next);\n            }, function (next) {\n                view.trigger(\"rendered\", view);\n                next();\n            }]);\n        }\n    },\n\n    /** empty out the current el, move the $newRender's children in */\n    _swapNewRender: function _swapNewRender($newRender) {\n        return this.$el.empty().attr(\"class\", _.isFunction(this.className) ? this.className() : this.className).append($newRender.children());\n    },\n\n    /** set up js behaviors, event handlers for elements within the given container\n     *  @param {jQuery} $container jq object that contains the elements to process (defaults to this.$el)\n     */\n    _setUpBehaviors: function _setUpBehaviors($where) {\n        $where = $where || this.$el;\n        // set up canned behavior on children (bootstrap, popupmenus, editable_text, etc.)\n        //make_popup_menus( $where );\n        $where.find(\"[title]\").tooltip({ placement: \"bottom\" });\n    },\n\n    // ......................................................................... details\n    /** shortcut to details DOM (as jQ) */\n    $details: function $details($where) {\n        $where = $where || this.$el;\n        return $where.find(\"> .details\");\n    },\n\n    /** build the DOM for the details and set up behaviors on it */\n    _renderDetails: function _renderDetails() {\n        var $newDetails = $(this.templates.details(this.model.toJSON(), this));\n        this._setUpBehaviors($newDetails);\n        return $newDetails;\n    },\n\n    // ......................................................................... expansion/details\n    /** Show or hide the details\n     *  @param {Boolean} expand if true, expand; if false, collapse\n     */\n    toggleExpanded: function toggleExpanded(expand) {\n        expand = expand === undefined ? !this.expanded : expand;\n        if (expand) {\n            this.expand();\n        } else {\n            this.collapse();\n        }\n        return this;\n    },\n\n    /** Render and show the full, detailed body of this view including extra data and controls.\n     *      note: if the model does not have detailed data, fetch that data before showing the body\n     *  @fires expanded when a body has been expanded\n     */\n    expand: function expand() {\n        var view = this;\n        return view._fetchModelDetails().always(function () {\n            view._expand();\n        });\n    },\n\n    /** Check for model details and, if none, fetch them.\n     *  @returns {jQuery.promise} the model.fetch.xhr if details are being fetched, an empty promise if not\n     */\n    _fetchModelDetails: function _fetchModelDetails() {\n        if (!this.model.hasDetails()) {\n            return this.model.fetch();\n        }\n        return jQuery.when();\n    },\n\n    /** Inner fn called when expand (public) has fetched the details */\n    _expand: function _expand() {\n        var view = this;\n        var $newDetails = view._renderDetails();\n        view.$details().replaceWith($newDetails);\n        // needs to be set after the above or the slide will not show\n        view.expanded = true;\n        view.$details().slideDown(view.fxSpeed, function () {\n            view.trigger(\"expanded\", view);\n        });\n    },\n\n    /** Hide the body/details of an HDA.\n     *  @fires collapsed when a body has been collapsed\n     */\n    collapse: function collapse() {\n        this.debug(this + \"(ExpandableView).collapse\");\n        var view = this;\n        view.expanded = false;\n        this.$details().slideUp(view.fxSpeed, function () {\n            view.trigger(\"collapsed\", view);\n        });\n    }\n});\n\n//==============================================================================\n/** A view that is displayed in some larger list/grid/collection.\n *      Inherits from Expandable, Selectable, Draggable.\n *  The DOM contains warnings, a title bar, and a series of primary action controls.\n *      Primary actions are meant to be easily accessible item functions (such as delete)\n *      that are rendered in the title bar.\n *\n *  Details are rendered when the user clicks the title bar or presses enter/space when\n *      the title bar is in focus.\n *\n *  Designed as a base class for history panel contents - but usable elsewhere (I hope).\n */\nvar ListItemView = ExpandableView.extend(_baseMvc2.default.mixin(_baseMvc2.default.SelectableViewMixin, _baseMvc2.default.DraggableViewMixin, {\n    tagName: \"div\",\n    className: \"list-item\",\n\n    /** Set up the base class and all mixins */\n    initialize: function initialize(attributes) {\n        ExpandableView.prototype.initialize.call(this, attributes);\n        _baseMvc2.default.SelectableViewMixin.initialize.call(this, attributes);\n        _baseMvc2.default.DraggableViewMixin.initialize.call(this, attributes);\n        this._setUpListeners();\n    },\n\n    /** event listeners */\n    _setUpListeners: function _setUpListeners() {\n        // hide the primary actions in the title bar when selectable and narrow\n        this.on(\"selectable\", function (isSelectable) {\n            if (isSelectable) {\n                this.$(\".primary-actions\").hide();\n            } else {\n                this.$(\".primary-actions\").show();\n            }\n        }, this);\n        return this;\n    },\n\n    // ........................................................................ rendering\n    /** In this override, call methods to build warnings, titlebar and primary actions */\n    _buildNewRender: function _buildNewRender() {\n        var $newRender = ExpandableView.prototype._buildNewRender.call(this);\n        $newRender.children(\".warnings\").replaceWith(this._renderWarnings());\n        $newRender.children(\".title-bar\").replaceWith(this._renderTitleBar());\n        $newRender.children(\".primary-actions\").append(this._renderPrimaryActions());\n        $newRender.find(\"> .title-bar .subtitle\").replaceWith(this._renderSubtitle());\n        return $newRender;\n    },\n\n    /** In this override, render the selector controls and set up dragging before the swap */\n    _swapNewRender: function _swapNewRender($newRender) {\n        ExpandableView.prototype._swapNewRender.call(this, $newRender);\n        if (this.selectable) {\n            this.showSelector(0);\n        }\n        if (this.draggable) {\n            this.draggableOn();\n        }\n        return this.$el;\n    },\n\n    /** Render any warnings the item may need to show (e.g. \"I'm deleted\") */\n    _renderWarnings: function _renderWarnings() {\n        var view = this;\n        var $warnings = $('<div class=\"warnings\"></div>');\n        var json = view.model.toJSON();\n        //TODO:! unordered (map)\n        _.each(view.templates.warnings, function (templateFn) {\n            $warnings.append($(templateFn(json, view)));\n        });\n        return $warnings;\n    },\n\n    /** Render the title bar (the main/exposed SUMMARY dom element) */\n    _renderTitleBar: function _renderTitleBar() {\n        return $(this.templates.titleBar(this.model.toJSON(), this));\n    },\n\n    /** Return an array of jQ objects containing common/easily-accessible item controls */\n    _renderPrimaryActions: function _renderPrimaryActions() {\n        // override this\n        return [];\n    },\n\n    /** Render the title bar (the main/exposed SUMMARY dom element) */\n    _renderSubtitle: function _renderSubtitle() {\n        return $(this.templates.subtitle(this.model.toJSON(), this));\n    },\n\n    // ......................................................................... events\n    /** event map */\n    events: {\n        // expand the body when the title is clicked or when in focus and space or enter is pressed\n        \"click .title-bar\": \"_clickTitleBar\",\n        \"keydown .title-bar\": \"_keyDownTitleBar\",\n        \"click .selector\": \"toggleSelect\"\n    },\n\n    /** expand when the title bar is clicked */\n    _clickTitleBar: function _clickTitleBar(event) {\n        event.stopPropagation();\n        if (event.altKey) {\n            this.toggleSelect(event);\n            if (!this.selectable) {\n                this.showSelector();\n            }\n        } else {\n            this.toggleExpanded();\n        }\n    },\n\n    /** expand when the title bar is in focus and enter or space is pressed */\n    _keyDownTitleBar: function _keyDownTitleBar(event) {\n        // bail (with propagation) if keydown and not space or enter\n        var KEYCODE_SPACE = 32;\n\n        var KEYCODE_RETURN = 13;\n        if (event && event.type === \"keydown\" && (event.keyCode === KEYCODE_SPACE || event.keyCode === KEYCODE_RETURN)) {\n            this.toggleExpanded();\n            event.stopPropagation();\n            return false;\n        }\n        return true;\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"ListItemView(\" + modelString + \")\";\n    }\n}));\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListItemView.prototype.templates = function () {\n    var elTemplato = _baseMvc2.default.wrapTemplate(['<div class=\"list-element\">',\n    // errors, messages, etc.\n    '<div class=\"warnings\"></div>',\n\n    // multi-select checkbox\n    '<div class=\"selector\">', '<span class=\"fa fa-2x fa-square-o\"></span>', \"</div>\",\n    // space for title bar buttons - gen. floated to the right\n    '<div class=\"primary-actions\"></div>', '<div class=\"title-bar\"></div>',\n\n    // expandable area for more details\n    '<div class=\"details\"></div>', \"</div>\"]);\n\n    var warnings = {};\n\n    var titleBarTemplate = _baseMvc2.default.wrapTemplate([\n    // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n    '<div class=\"title-bar clear\" tabindex=\"0\">',\n    //TODO: prob. belongs in dataset-list-item\n    '<span class=\"state-icon\"></span>', '<div class=\"title\">', '<span class=\"name\"><%- element.name %></span>', \"</div>\", '<div class=\"subtitle\"></div>', \"</div>\"], \"element\");\n\n    var subtitleTemplate = _baseMvc2.default.wrapTemplate([\n    // override this\n    '<div class=\"subtitle\"></div>']);\n\n    var detailsTemplate = _baseMvc2.default.wrapTemplate([\n    // override this\n    '<div class=\"details\"></div>']);\n\n    return {\n        el: elTemplato,\n        warnings: warnings,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate,\n        details: detailsTemplate\n    };\n}();\n\n//==============================================================================\n/** A view that is displayed in some larger list/grid/collection.\n *  *AND* can display some sub-list of it's own when expanded (e.g. dataset collections).\n *  This list will 'foldout' when the item is expanded depending on this.foldoutStyle:\n *      If 'foldout': will expand vertically to show the nested list\n *      If 'drilldown': will overlay the parent list\n *\n *  Inherits from ListItemView.\n *\n *  _renderDetails does the work of creating this.details: a sub-view that shows the nested list\n */\nvar FoldoutListItemView = ListItemView.extend({\n    /** If 'foldout': show the sub-panel inside the expanded item\n     *  If 'drilldown': only fire events and handle by pub-sub\n     *      (allow the panel containing this item to attach it, hide itself, etc.)\n     */\n    foldoutStyle: \"foldout\",\n    /** Panel view class to instantiate for the sub-panel */\n    foldoutPanelClass: null,\n\n    /** override to:\n     *      add attributes foldoutStyle and foldoutPanelClass for config poly\n     *      disrespect attributes.expanded if drilldown\n     */\n    initialize: function initialize(attributes) {\n        if (this.foldoutStyle === \"drilldown\") {\n            this.expanded = false;\n        }\n        this.foldoutStyle = attributes.foldoutStyle || this.foldoutStyle;\n        this.foldoutPanelClass = attributes.foldoutPanelClass || this.foldoutPanelClass;\n\n        ListItemView.prototype.initialize.call(this, attributes);\n        this.foldout = this._createFoldoutPanel();\n    },\n\n    /** in this override, attach the foldout panel when rendering details */\n    _renderDetails: function _renderDetails() {\n        if (this.foldoutStyle === \"drilldown\") {\n            return $();\n        }\n        var $newDetails = ListItemView.prototype._renderDetails.call(this);\n        return this._attachFoldout(this.foldout, $newDetails);\n    },\n\n    /** In this override, handle collection expansion. */\n    _createFoldoutPanel: function _createFoldoutPanel() {\n        var model = this.model;\n        var FoldoutClass = this._getFoldoutPanelClass(model);\n        var options = this._getFoldoutPanelOptions(model);\n\n        var foldout = new FoldoutClass(_.extend(options, {\n            model: model\n        }));\n\n        return foldout;\n    },\n\n    /** Stub to return proper foldout panel class */\n    _getFoldoutPanelClass: function _getFoldoutPanelClass() {\n        // override\n        return this.foldoutPanelClass;\n    },\n\n    /** Stub to return proper foldout panel options */\n    _getFoldoutPanelOptions: function _getFoldoutPanelOptions() {\n        return {\n            // propagate foldout style down\n            foldoutStyle: this.foldoutStyle,\n            fxSpeed: this.fxSpeed\n        };\n    },\n\n    /** Render the foldout panel inside the view, hiding controls */\n    _attachFoldout: function _attachFoldout(foldout, $whereTo) {\n        $whereTo = $whereTo || this.$(\"> .details\");\n        this.foldout = foldout.render(0);\n        foldout.$(\"> .controls\").hide();\n        return $whereTo.append(foldout.$el);\n    },\n\n    /** In this override, branch on foldoutStyle to show expanded */\n    expand: function expand() {\n        var view = this;\n        return view._fetchModelDetails().always(function () {\n            if (view.foldoutStyle === \"foldout\") {\n                view._expand();\n            } else if (view.foldoutStyle === \"drilldown\") {\n                view._expandByDrilldown();\n            }\n        });\n    },\n\n    /** For drilldown, set up close handler and fire expanded:drilldown\n     *      containing views can listen to this and handle other things\n     *      (like hiding themselves) by listening for expanded/collapsed:drilldown\n     */\n    _expandByDrilldown: function _expandByDrilldown() {\n        var view = this;\n        // attachment and rendering done by listener\n        view.listenTo(view.foldout, \"close\", function () {\n            view.trigger(\"collapsed:drilldown\", view, view.foldout);\n        });\n        view.trigger(\"expanded:drilldown\", view, view.foldout);\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nFoldoutListItemView.prototype.templates = function () {\n    var detailsTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"details\">',\n    // override with more info (that goes above the panel)\n    \"</div>\"], \"collection\");\n\n    return _.extend({}, ListItemView.prototype.templates, {\n        details: detailsTemplate\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    ExpandableView: ExpandableView,\n    ListItemView: ListItemView,\n    FoldoutListItemView: FoldoutListItemView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///65\n");

/***/ }),
/* 66 */
/*!**************************************************!*\
  !*** ./galaxy/scripts/mvc/dataset/dataset-li.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, jQuery, Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _listItem = __webpack_require__(/*! mvc/list/list-item */ 65);\n\nvar _listItem2 = _interopRequireDefault(_listItem);\n\nvar _states = __webpack_require__(/*! mvc/dataset/states */ 16);\n\nvar _states2 = _interopRequireDefault(_states);\n\nvar _faIconButton = __webpack_require__(/*! ui/fa-icon-button */ 21);\n\nvar _faIconButton2 = _interopRequireDefault(_faIconButton);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"dataset\";\n/*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\nvar _super = _listItem2.default.ListItemView;\n/** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\nvar DatasetListItemView = _super.extend(\n/** @lends DatasetListItemView.prototype */{\n    _logNamespace: logNamespace,\n\n    className: _super.prototype.className + \" dataset\",\n    //TODO:?? doesn't exactly match an hda's type_id\n    id: function id() {\n        return [\"dataset\", this.model.get(\"id\")].join(\"-\");\n    },\n\n    /** Set up: instance vars, options, and event handlers */\n    initialize: function initialize(attributes) {\n        if (attributes.logger) {\n            this.logger = this.model.logger = attributes.logger;\n        }\n        this.log(this + \".initialize:\", attributes);\n        _super.prototype.initialize.call(this, attributes);\n\n        /** where should pages from links be displayed? (default to new tab/window) */\n        this.linkTarget = attributes.linkTarget || \"_blank\";\n    },\n\n    /** event listeners */\n    _setUpListeners: function _setUpListeners() {\n        _super.prototype._setUpListeners.call(this);\n        var self = this;\n\n        // re-rendering on any model changes\n        return self.listenTo(self.model, {\n            change: function change(model) {\n                // if the model moved into the ready state and is expanded without details, fetch those details now\n                if (self.model.changedAttributes().state && self.model.inReadyState() && self.expanded && !self.model.hasDetails()) {\n                    // normally, will render automatically (due to fetch -> change),\n                    // but! setting_metadata sometimes doesn't cause any other changes besides state\n                    // so, not rendering causes it to seem frozen in setting_metadata state\n                    self.model.fetch({ silent: true }).done(function () {\n                        self.render();\n                    });\n                } else {\n                    if (_.has(model.changed, \"tags\") && _.keys(model.changed).length === 1) {\n                        // If only the tags have changed, rerender specifically\n                        // the titlebar region.  Otherwise default to the full\n                        // render.\n                        self.$(\".nametags\").html(self._renderNametags());\n                    } else {\n                        self.render();\n                    }\n                }\n            }\n        });\n    },\n\n    // ......................................................................... expandable\n    /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n    _fetchModelDetails: function _fetchModelDetails() {\n        var view = this;\n        if (view.model.inReadyState() && !view.model.hasDetails()) {\n            return view.model.fetch({ silent: true });\n        }\n        return jQuery.when();\n    },\n\n    // ......................................................................... removal\n    /** Remove this view's html from the DOM and remove all event listeners.\n     *  @param {Number or String} speed jq effect speed\n     *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n     */\n    remove: function remove(speed, callback) {\n        var view = this;\n        speed = speed || this.fxSpeed;\n        this.$el.fadeOut(speed, function () {\n            Backbone.View.prototype.remove.call(view);\n            if (callback) {\n                callback.call(view);\n            }\n        });\n    },\n\n    // ......................................................................... rendering\n    /* TODO:\n    dataset states are the issue primarily making dataset rendering complex\n        each state should have it's own way of displaying/set of details\n        often with different actions that can be applied\n    throw in deleted/purged/visible and things get complicated easily\n    I've considered (a couple of times) - creating a view for each state\n        - but recreating the view during an update...seems wrong\n    */\n    /** In this override, add the dataset state as a class for use with state-based CSS */\n    _swapNewRender: function _swapNewRender($newRender) {\n        _super.prototype._swapNewRender.call(this, $newRender);\n        if (this.model.has(\"state\")) {\n            this.$el.addClass(\"state-\" + this.model.get(\"state\"));\n        }\n        return this.$el;\n    },\n\n    // ................................................................................ titlebar\n    /** In this override, add the dataset display button. */\n    _renderPrimaryActions: function _renderPrimaryActions() {\n        // render just the display for read-only\n        return [this._renderDisplayButton()];\n    },\n\n    /** Render icon-button to display dataset data */\n    _renderDisplayButton: function _renderDisplayButton() {\n        // don't show display if not viewable or not accessible\n        var state = this.model.get(\"state\");\n        if (state === _states2.default.NOT_VIEWABLE || state === _states2.default.DISCARDED || !this.model.get(\"accessible\")) {\n            return null;\n        }\n\n        var displayBtnData = {\n            target: this.linkTarget,\n            classes: \"display-btn\"\n        };\n\n        // show a disabled display if the data's been purged\n        if (this.model.get(\"purged\")) {\n            displayBtnData.disabled = true;\n            displayBtnData.title = (0, _localization2.default)(\"Cannot display datasets removed from disk\");\n\n            // disable if still uploading\n        } else if (state === _states2.default.UPLOAD) {\n            displayBtnData.disabled = true;\n            displayBtnData.title = (0, _localization2.default)(\"This dataset must finish uploading before it can be viewed\");\n\n            // disable if still new\n        } else if (state === _states2.default.NEW) {\n            displayBtnData.disabled = true;\n            displayBtnData.title = (0, _localization2.default)(\"This dataset is not yet viewable\");\n        } else {\n            displayBtnData.title = (0, _localization2.default)(\"View data\");\n\n            // default link for dataset\n            displayBtnData.href = this.model.urls.display;\n\n            // add frame manager option onclick event\n            var self = this;\n            displayBtnData.onclick = function (ev) {\n                if (Galaxy.frame && Galaxy.frame.active) {\n                    // Add dataset to frames.\n                    Galaxy.frame.addDataset(self.model.get(\"id\"));\n                    ev.preventDefault();\n                }\n            };\n        }\n        displayBtnData.faIcon = \"fa-eye\";\n        return (0, _faIconButton2.default)(displayBtnData);\n    },\n\n    // ......................................................................... rendering details\n    /** Render the enclosing div of the hda body and, if expanded, the html in the body\n     *  @returns {jQuery} rendered DOM\n     */\n    _renderDetails: function _renderDetails() {\n        //TODO: generalize to be allow different details for each state\n\n        // no access - render nothing but a message\n        if (this.model.get(\"state\") === _states2.default.NOT_VIEWABLE) {\n            return $(this.templates.noAccess(this.model.toJSON(), this));\n        }\n\n        var $details = _super.prototype._renderDetails.call(this);\n        $details.find(\".actions .left\").empty().append(this._renderSecondaryActions());\n        $details.find(\".summary\").html(this._renderSummary()).prepend(this._renderDetailMessages());\n        $details.find(\".display-applications\").html(this._renderDisplayApplications());\n\n        this._setUpBehaviors($details);\n        return $details;\n    },\n\n    /** Defer to the appropo summary rendering fn based on state */\n    _renderSummary: function _renderSummary() {\n        var json = this.model.toJSON();\n        var summaryRenderFn = this.templates.summaries[json.state];\n        summaryRenderFn = summaryRenderFn || this.templates.summaries.unknown;\n        return summaryRenderFn(json, this);\n    },\n\n    /** Render messages to be displayed only when the details are shown */\n    _renderDetailMessages: function _renderDetailMessages() {\n        var view = this;\n        var $warnings = $('<div class=\"detail-messages\"></div>');\n        var json = view.model.toJSON();\n        //TODO:! unordered (map)\n        _.each(view.templates.detailMessages, function (templateFn) {\n            $warnings.append($(templateFn(json, view)));\n        });\n        return $warnings;\n    },\n\n    /** Render the external display application links */\n    _renderDisplayApplications: function _renderDisplayApplications() {\n        if (this.model.isDeletedOrPurged()) {\n            return \"\";\n        }\n        // render both old and new display apps using the same template\n        return [this.templates.displayApplications(this.model.get(\"display_apps\"), this), this.templates.displayApplications(this.model.get(\"display_types\"), this)].join(\"\");\n    },\n\n    // ......................................................................... secondary/details actions\n    /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n    _renderSecondaryActions: function _renderSecondaryActions() {\n        this.debug(\"_renderSecondaryActions\");\n        switch (this.model.get(\"state\")) {\n            case _states2.default.NOT_VIEWABLE:\n                return [];\n            case _states2.default.OK:\n            case _states2.default.FAILED_METADATA:\n            case _states2.default.ERROR:\n                return [this._renderDownloadButton(), this._renderShowParamsButton()];\n        }\n        return [this._renderShowParamsButton()];\n    },\n\n    /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n     *  @returns {jQuery} rendered DOM\n     */\n    _renderShowParamsButton: function _renderShowParamsButton() {\n        // gen. safe to show in all cases\n        return (0, _faIconButton2.default)({\n            title: (0, _localization2.default)(\"View details\"),\n            classes: \"params-btn\",\n            href: this.model.urls.show_params,\n            target: this.linkTarget,\n            faIcon: \"fa-info-circle\",\n            onclick: function onclick(ev) {\n                if (Galaxy.frame && Galaxy.frame.active) {\n                    Galaxy.frame.add({\n                        title: (0, _localization2.default)(\"Dataset details\"),\n                        url: this.href\n                    });\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        });\n    },\n\n    /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n     *  @returns {jQuery} rendered DOM\n     */\n    _renderDownloadButton: function _renderDownloadButton() {\n        // don't show anything if the data's been purged\n        if (this.model.get(\"purged\") || !this.model.hasData()) {\n            return null;\n        }\n\n        // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n        //  or a single download icon-button (if there are no meta files)\n        if (!_.isEmpty(this.model.get(\"meta_files\"))) {\n            return this._renderMetaFileDownloadButton();\n        }\n\n        return $(['<a class=\"download-btn icon-btn\" ', 'href=\"', this.model.urls.download, \"\\\" title=\\\"\" + (0, _localization2.default)(\"Download\") + \"\\\" download>\", '<span class=\"fa fa-floppy-o\"></span>', \"</a>\"].join(\"\"));\n    },\n\n    /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n    _renderMetaFileDownloadButton: function _renderMetaFileDownloadButton() {\n        var urls = this.model.urls;\n        return $(['<div class=\"metafile-dropdown dropdown\">', '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"', \" title=\\\"\" + (0, _localization2.default)(\"Download\") + \"\\\">\", '<span class=\"fa fa-floppy-o\"></span>', \"</a>\", '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">', \"<li><a href=\\\"\" + urls.download + \"\\\" download>\", (0, _localization2.default)(\"Download dataset\"), \"</a></li>\", _.map(this.model.get(\"meta_files\"), function (meta_file) {\n            return ['<li><a href=\"', urls.meta_download + meta_file.file_type, '\">', (0, _localization2.default)(\"Download\"), \" \", meta_file.file_type, \"</a></li>\"].join(\"\");\n        }).join(\"\\n\"), \"</ul>\", \"</div>\"].join(\"\\n\"));\n    },\n\n    _renderNametags: function _renderNametags() {\n        var tpl = _.template([\"<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>\", '<% if (tag.indexOf(\"name:\") == 0){ %>', '<span class=\"label label-info\"><%- tag.slice(5) %></span>', \"<% } %>\", \"<% }); %>\"].join(\"\"));\n        return tpl({ tags: this.model.get(\"tags\") });\n    },\n\n    // ......................................................................... misc\n    events: _.extend(_.clone(_super.prototype.events), {\n        \"click .display-btn\": function clickDisplayBtn(ev) {\n            this.trigger(\"display\", this, ev);\n        },\n        \"click .params-btn\": function clickParamsBtn(ev) {\n            this.trigger(\"params\", this, ev);\n        },\n        \"click .download-btn\": function clickDownloadBtn(ev) {\n            this.trigger(\"download\", this, ev);\n        }\n    }),\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"DatasetListItemView(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemView.prototype.templates = function () {\n    //TODO: move to require text! plugin\n\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: _baseMvc2.default.wrapTemplate([\n        // failed metadata is rendered as a warning on an otherwise ok dataset view\n        '<% if( model.state === \"failed_metadata\" ){ %>', '<div class=\"warningmessagesmall\">', (0, _localization2.default)(\"An error occurred setting the metadata for this dataset\"), \"</div>\", \"<% } %>\"]),\n        error: _baseMvc2.default.wrapTemplate([\n        // error during index fetch - show error on dataset\n        \"<% if( model.error ){ %>\", '<div class=\"errormessagesmall\">', (0, _localization2.default)(\"There was an error getting the data for this dataset\"), \": <%- model.error %>\", \"</div>\", \"<% } %>\"]),\n        purged: _baseMvc2.default.wrapTemplate([\"<% if( model.purged ){ %>\", '<div class=\"purged-msg warningmessagesmall\">', (0, _localization2.default)(\"This dataset has been deleted and removed from disk\"), \"</div>\", \"<% } %>\"]),\n        deleted: _baseMvc2.default.wrapTemplate([\n        // deleted not purged\n        \"<% if( model.deleted && !model.purged ){ %>\", '<div class=\"deleted-msg warningmessagesmall\">', (0, _localization2.default)(\"This dataset has been deleted\"), \"</div>\", \"<% } %>\"])\n\n        //NOTE: hidden warning is only needed for HDAs\n    });\n\n    var detailsTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"details\">', '<div class=\"summary\"></div>', '<div class=\"actions clear\">', '<div class=\"left\"></div>', '<div class=\"right\"></div>', \"</div>\",\n\n    // do not display tags, annotation, display apps, or peek when deleted\n    \"<% if( !dataset.deleted && !dataset.purged ){ %>\", '<div class=\"tags-display\"></div>', '<div class=\"annotation-display\"></div>', '<div class=\"display-applications\"></div>', \"<% if( dataset.peek ){ %>\", '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>', \"<% } %>\", \"<% } %>\", \"</div>\"], \"dataset\");\n\n    var noAccessTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"details\">', '<div class=\"summary\">', (0, _localization2.default)(\"You do not have permission to view this dataset\"), \"</div>\", \"</div>\"], \"dataset\");\n\n    //TODO: still toooooooooooooo complex - rework\n    var summaryTemplates = {};\n    summaryTemplates[_states2.default.OK] = summaryTemplates[_states2.default.FAILED_METADATA] = _baseMvc2.default.wrapTemplate([\"<% if( dataset.misc_blurb ){ %>\", '<div class=\"blurb\">', '<span class=\"value\"><%- dataset.misc_blurb %></span>', \"</div>\", \"<% } %>\", \"<% if( dataset.file_ext ){ %>\", '<div class=\"datatype\">', '<label class=\"prompt\">', (0, _localization2.default)(\"format\"), \"</label>\", '<span class=\"value\"><%- dataset.file_ext %></span>', \"</div>\", \"<% } %>\", \"<% if( dataset.metadata_dbkey ){ %>\", '<div class=\"dbkey\">', '<label class=\"prompt\">', (0, _localization2.default)(\"database\"), \"</label>\", '<span class=\"value\">', \"<%- dataset.metadata_dbkey %>\", \"</span>\", \"</div>\", \"<% } %>\", \"<% if( dataset.misc_info ){ %>\", '<div class=\"info\">', '<span class=\"value\"><%- dataset.misc_info %></span>', \"</div>\", \"<% } %>\"], \"dataset\");\n    summaryTemplates[_states2.default.NEW] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"This is a new dataset and not all of its data are available yet\"), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.NOT_VIEWABLE] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"You do not have permission to view this dataset\"), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.DISCARDED] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"The job creating this dataset was cancelled before completion\"), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.QUEUED] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"This job is waiting to run\"), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.RUNNING] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"This job is currently running\"), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.UPLOAD] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"This dataset is currently uploading\"), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.SETTING_METADATA] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"Metadata is being auto-detected\"), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.PAUSED] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)('This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume'), \"</div>\"], \"dataset\");\n    summaryTemplates[_states2.default.ERROR] = _baseMvc2.default.wrapTemplate([\"<% if( !dataset.purged ){ %>\", \"<div><%- dataset.misc_blurb %></div>\", \"<% } %>\", '<span class=\"help-text\">', (0, _localization2.default)(\"An error occurred with this dataset\"), \":</span>\", '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'], \"dataset\");\n    summaryTemplates[_states2.default.EMPTY] = _baseMvc2.default.wrapTemplate([\"<div>\", (0, _localization2.default)(\"No data\"), \": <i><%- dataset.misc_blurb %></i></div>\"], \"dataset\");\n    summaryTemplates.unknown = _baseMvc2.default.wrapTemplate(['<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'], \"dataset\");\n\n    // messages to be displayed only within the details section ('below the fold')\n    var detailMessageTemplates = {\n        resubmitted: _baseMvc2.default.wrapTemplate([\n        // deleted not purged\n        \"<% if( model.resubmitted ){ %>\", '<div class=\"resubmitted-msg infomessagesmall\">', (0, _localization2.default)(\"The job creating this dataset has been resubmitted\"), \"</div>\", \"<% } %>\"])\n    };\n\n    // this is applied to both old and new style display apps\n    var displayApplicationsTemplate = _baseMvc2.default.wrapTemplate([\"<% _.each( apps, function( app ){ %>\", '<div class=\"display-application\">', '<span class=\"display-application-location\"><%- app.label %></span> ', '<span class=\"display-application-links\">', \"<% _.each( app.links, function( link ){ %>\", '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">', \"<% print( _l( link.text ) ); %>\", \"</a> \", \"<% }); %>\", \"</span>\", \"</div>\", \"<% }); %>\"], \"apps\");\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        details: detailsTemplate,\n        noAccess: noAccessTemplate,\n        summaries: summaryTemplates,\n        detailMessages: detailMessageTemplates,\n        displayApplications: displayApplicationsTemplate\n    });\n}();\n\n// ============================================================================\nexports.default = {\n    DatasetListItemView: DatasetListItemView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///66\n");

/***/ }),
/* 67 */
/*!********************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/collection-li.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, $, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _listItem = __webpack_require__(/*! mvc/list/list-item */ 65);\n\nvar _listItem2 = _interopRequireDefault(_listItem);\n\nvar _datasetLi = __webpack_require__(/*! mvc/dataset/dataset-li */ 66);\n\nvar _datasetLi2 = _interopRequireDefault(_datasetLi);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar FoldoutListItemView = _listItem2.default.FoldoutListItemView;\n\nvar ListItemView = _listItem2.default.ListItemView;\n/** @class Read only view for DatasetCollection.\n */\nvar DCListItemView = FoldoutListItemView.extend(\n/** @lends DCListItemView.prototype */{\n    className: FoldoutListItemView.prototype.className + \" dataset-collection\",\n    id: function id() {\n        return [\"dataset_collection\", this.model.get(\"id\")].join(\"-\");\n    },\n\n    /** override to add linkTarget */\n    initialize: function initialize(attributes) {\n        this.linkTarget = attributes.linkTarget || \"_blank\";\n        this.hasUser = attributes.hasUser;\n        FoldoutListItemView.prototype.initialize.call(this, attributes);\n    },\n\n    /** event listeners */\n    _setUpListeners: function _setUpListeners() {\n        FoldoutListItemView.prototype._setUpListeners.call(this);\n        this.listenTo(this.model, \"change\", function (model, options) {\n            // if the model has changed deletion status render it entirely\n            if (_.has(model.changed, \"deleted\")) {\n                this.render();\n\n                // if the model has been decorated after the fact with the element count,\n                // render the subtitle where the count is displayed\n            } else if (_.has(model.changed, \"element_count\")) {\n                this.$(\"> .title-bar .subtitle\").replaceWith(this._renderSubtitle());\n            }\n        });\n    },\n\n    // ......................................................................... rendering\n    /** render a subtitle to show the user what sort of collection this is */\n    _renderSubtitle: function _renderSubtitle() {\n        return $(this.templates.subtitle(this.model.toJSON(), this));\n    },\n\n    // ......................................................................... foldout\n    /** override to add linktarget to sub-panel */\n    _getFoldoutPanelOptions: function _getFoldoutPanelOptions() {\n        var options = FoldoutListItemView.prototype._getFoldoutPanelOptions.call(this);\n        return _.extend(options, {\n            linkTarget: this.linkTarget,\n            hasUser: this.hasUser\n        });\n    },\n\n    /** override to not catch sub-panel selectors */\n    $selector: function $selector() {\n        return this.$(\"> .selector\");\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"DCListItemView(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCListItemView.prototype.templates = function () {\n    var warnings = _.extend({}, FoldoutListItemView.prototype.templates.warnings, {\n        error: _baseMvc2.default.wrapTemplate([\n        // error during index fetch - show error on dataset\n        \"<% if( model.error ){ %>\", '<div class=\"errormessagesmall\">', (0, _localization2.default)(\"There was an error getting the data for this collection\"), \": <%- model.error %>\", \"</div>\", \"<% } %>\"]),\n        purged: _baseMvc2.default.wrapTemplate([\"<% if( model.purged ){ %>\", '<div class=\"purged-msg warningmessagesmall\">', (0, _localization2.default)(\"This collection has been deleted and removed from disk\"), \"</div>\", \"<% } %>\"]),\n        deleted: _baseMvc2.default.wrapTemplate([\n        // deleted not purged\n        \"<% if( model.deleted && !model.purged ){ %>\", '<div class=\"deleted-msg warningmessagesmall\">', (0, _localization2.default)(\"This collection has been deleted\"), \"</div>\", \"<% } %>\"])\n    });\n\n    // use element identifier\n    var titleBarTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"title-bar clear\" tabindex=\"0\">', '<div class=\"title\">', '<span class=\"name\"><%- collection.element_identifier || collection.name %></span>', \"</div>\", '<div class=\"subtitle\"></div>', \"</div>\"], \"collection\");\n\n    // use element identifier\n    var subtitleTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"subtitle\">', '<% var countText = collection.element_count? ( collection.element_count + \" \" ) : \"\"; %>', '<%        if( collection.collection_type === \"list\" ){ %>', (0, _localization2.default)(\"a list of <%- countText %>datasets\"), '<% } else if( collection.collection_type === \"paired\" ){ %>', (0, _localization2.default)(\"a pair of datasets\"), '<% } else if( collection.collection_type === \"list:paired\" ){ %>', (0, _localization2.default)(\"a list of <%- countText %>dataset pairs\"), '<% } else if( collection.collection_type === \"list:list\" ){ %>', (0, _localization2.default)(\"a list of <%- countText %>dataset lists\"), \"<% } %>\", \"</div>\"], \"collection\");\n\n    return _.extend({}, FoldoutListItemView.prototype.templates, {\n        warnings: warnings,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate\n    });\n}();\n\n//==============================================================================\n/** @class Read only view for DatasetCollectionElement.\n */\nvar DCEListItemView = ListItemView.extend(\n/** @lends DCEListItemView.prototype */{\n    /** add the DCE class to the list item */\n    className: ListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** set up */\n    initialize: function initialize(attributes) {\n        if (attributes.logger) {\n            this.logger = this.model.logger = attributes.logger;\n        }\n        this.log(\"DCEListItemView.initialize:\", attributes);\n        ListItemView.prototype.initialize.call(this, attributes);\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"DCEListItemView(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCEListItemView.prototype.templates = function () {\n    // use the element identifier here - since that will persist and the user will need it\n    var titleBarTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"title-bar clear\" tabindex=\"0\">', '<div class=\"title\">', '<span class=\"name\"><%- element.element_identifier %></span>', \"</div>\", '<div class=\"subtitle\"></div>', \"</div>\"], \"element\");\n\n    return _.extend({}, ListItemView.prototype.templates, {\n        titleBar: titleBarTemplate\n    });\n}();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\nvar DatasetDCEListItemView = _datasetLi2.default.DatasetListItemView.extend(\n/** @lends DatasetDCEListItemView.prototype */{\n    className: _datasetLi2.default.DatasetListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** set up */\n    initialize: function initialize(attributes) {\n        if (attributes.logger) {\n            this.logger = this.model.logger = attributes.logger;\n        }\n        this.log(\"DatasetDCEListItemView.initialize:\", attributes);\n        _datasetLi2.default.DatasetListItemView.prototype.initialize.call(this, attributes);\n    },\n\n    /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n    _fetchModelDetails: function _fetchModelDetails() {\n        var view = this;\n        if (view.model.inReadyState() && !view.model.hasDetails()) {\n            return view.model.fetch({ silent: true });\n        }\n        return jQuery.when();\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"DatasetDCEListItemView(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetDCEListItemView.prototype.templates = function () {\n    // use the element identifier here and not the dataset name\n    //TODO:?? can we steal the DCE titlebar?\n    var titleBarTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"title-bar clear\" tabindex=\"0\">', '<span class=\"state-icon\"></span>', '<div class=\"title\">', '<span class=\"name\"><%- element.element_identifier %></span>', \"</div>\", \"</div>\"], \"element\");\n\n    return _.extend({}, _datasetLi2.default.DatasetListItemView.prototype.templates, {\n        titleBar: titleBarTemplate\n    });\n}();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\nvar NestedDCDCEListItemView = DCListItemView.extend(\n/** @lends NestedDCDCEListItemView.prototype */{\n    className: DCListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** In this override, add the state as a class for use with state-based CSS */\n    _swapNewRender: function _swapNewRender($newRender) {\n        DCListItemView.prototype._swapNewRender.call(this, $newRender);\n        var state = this.model.get(\"state\") || \"ok\";\n        this.$el.addClass(\"state-\" + state);\n        return this.$el;\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"NestedDCDCEListItemView(\" + modelString + \")\";\n    }\n});\n\n//==============================================================================\nexports.default = {\n    DCListItemView: DCListItemView,\n    DCEListItemView: DCEListItemView,\n    DatasetDCEListItemView: DatasetDCEListItemView,\n    NestedDCDCEListItemView: NestedDCDCEListItemView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///67\n");

/***/ }),
/* 68 */
/*!*************************************************!*\
  !*** ./galaxy/scripts/mvc/form/form-wrapper.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Generic form view */\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        this.model = new Backbone.Model(options);\n        this.url = this.model.get(\"url\");\n        this.redirect = this.model.get(\"redirect\");\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    render: function render() {\n        var self = this;\n        $.ajax({\n            url: Galaxy.root + this.url,\n            type: \"GET\"\n        }).done(function (response) {\n            var options = $.extend({}, self.model.attributes, response);\n            var form = new _formView2.default({\n                title: options.title,\n                message: options.message,\n                status: options.status || \"warning\",\n                icon: options.icon,\n                initial_errors: true,\n                errors: options.errors,\n                inputs: options.inputs,\n                buttons: {\n                    submit: new _uiMisc2.default.Button({\n                        tooltip: options.submit_tooltip,\n                        title: options.submit_title || \"Save\",\n                        icon: options.submit_icon || \"fa-save\",\n                        cls: \"btn btn-primary ui-clear-float\",\n                        onclick: function onclick() {\n                            self._submit(form);\n                        }\n                    })\n                }\n            });\n            self.$el.empty().append(form.$el);\n        }).fail(function (response) {\n            self.$el.empty().append(new _uiMisc2.default.Message({\n                message: \"Failed to load resource \" + self.url + \".\",\n                status: \"danger\",\n                persistent: true\n            }).$el);\n        });\n    },\n\n    _submit: function _submit(form) {\n        var self = this;\n        $.ajax({\n            url: Galaxy.root + self.url,\n            data: JSON.stringify(form.data.create()),\n            type: \"PUT\",\n            contentType: \"application/json\"\n        }).done(function (response) {\n            var params = {};\n            if (response.id) {\n                params.id = response.id;\n            } else {\n                params = {\n                    message: response.message,\n                    status: \"success\",\n                    persistent: false\n                };\n            }\n            if (self.redirect) {\n                window.location = Galaxy.root + self.redirect + \"?\" + $.param(params);\n            } else {\n                form.data.matchModel(response, function (input, input_id) {\n                    form.field_list[input_id].value(input.value);\n                });\n                self._showMessage(form, success_message);\n            }\n        }).fail(function (response) {\n            self._showMessage(form, {\n                message: response.responseJSON.err_msg,\n                status: \"danger\",\n                persistent: false\n            });\n        });\n    },\n\n    _showMessage: function _showMessage(form, options) {\n        var $panel = form.$el.parents().filter(function () {\n            return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n        }).first();\n        $panel.animate({ scrollTop: 0 }, 500);\n        form.message.update(options);\n    }\n});\n\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ2FsYXh5L3NjcmlwdHMvbXZjL2Zvcm0vZm9ybS13cmFwcGVyLmpzPzVmN2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEdlbmVyaWMgZm9ybSB2aWV3ICovXG5pbXBvcnQgRm9ybSBmcm9tIFwibXZjL2Zvcm0vZm9ybS12aWV3XCI7XG5pbXBvcnQgVWkgZnJvbSBcIm12Yy91aS91aS1taXNjXCI7XG52YXIgVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSBuZXcgQmFja2JvbmUuTW9kZWwob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudXJsID0gdGhpcy5tb2RlbC5nZXQoXCJ1cmxcIik7XG4gICAgICAgIHRoaXMucmVkaXJlY3QgPSB0aGlzLm1vZGVsLmdldChcInJlZGlyZWN0XCIpO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoXCI8ZGl2Lz5cIik7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogR2FsYXh5LnJvb3QgKyB0aGlzLnVybCxcbiAgICAgICAgICAgIHR5cGU6IFwiR0VUXCJcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5kb25lKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBzZWxmLm1vZGVsLmF0dHJpYnV0ZXMsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybSA9IG5ldyBGb3JtKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBvcHRpb25zLnN0YXR1cyB8fCBcIndhcm5pbmdcIixcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogb3B0aW9ucy5pY29uLFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsX2Vycm9yczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBvcHRpb25zLmVycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRzOiBvcHRpb25zLmlucHV0cyxcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0OiBuZXcgVWkuQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiBvcHRpb25zLnN1Ym1pdF90b29sdGlwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zLnN1Ym1pdF90aXRsZSB8fCBcIlNhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBvcHRpb25zLnN1Ym1pdF9pY29uIHx8IFwiZmEtc2F2ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsczogXCJidG4gYnRuLXByaW1hcnkgdWktY2xlYXItZmxvYXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc3VibWl0KGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWxmLiRlbC5lbXB0eSgpLmFwcGVuZChmb3JtLiRlbCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuJGVsLmVtcHR5KCkuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICBuZXcgVWkuTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgRmFpbGVkIHRvIGxvYWQgcmVzb3VyY2UgJHtzZWxmLnVybH0uYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJkYW5nZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlbnQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSkuJGVsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBfc3VibWl0OiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogR2FsYXh5LnJvb3QgKyBzZWxmLnVybCxcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGZvcm0uZGF0YS5jcmVhdGUoKSksXG4gICAgICAgICAgICB0eXBlOiBcIlBVVFwiLFxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZG9uZShyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuaWQgPSByZXNwb25zZS5pZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXNwb25zZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlbnQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGAke0dhbGF4eS5yb290ICsgc2VsZi5yZWRpcmVjdH0/JHskLnBhcmFtKHBhcmFtcyl9YDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3JtLmRhdGEubWF0Y2hNb2RlbChyZXNwb25zZSwgKGlucHV0LCBpbnB1dF9pZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5maWVsZF9saXN0W2lucHV0X2lkXS52YWx1ZShpbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zaG93TWVzc2FnZShmb3JtLCBzdWNjZXNzX21lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2hvd01lc3NhZ2UoZm9ybSwge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXNwb25zZS5yZXNwb25zZUpTT04uZXJyX21zZyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcImRhbmdlclwiLFxuICAgICAgICAgICAgICAgICAgICBwZXJzaXN0ZW50OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9zaG93TWVzc2FnZTogZnVuY3Rpb24oZm9ybSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgJHBhbmVsID0gZm9ybS4kZWxcbiAgICAgICAgICAgIC5wYXJlbnRzKClcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcImF1dG9cIiwgXCJzY3JvbGxcIl0uaW5kZXhPZigkKHRoaXMpLmNzcyhcIm92ZXJmbG93XCIpKSAhPSAtMTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmlyc3QoKTtcbiAgICAgICAgJHBhbmVsLmFuaW1hdGUoeyBzY3JvbGxUb3A6IDAgfSwgNTAwKTtcbiAgICAgICAgZm9ybS5tZXNzYWdlLnVwZGF0ZShvcHRpb25zKTtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIFZpZXc6IFZpZXdcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2Zvcm0vZm9ybS13cmFwcGVyLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUhBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFEQTtBQVJBO0FBb0JBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBaEdBO0FBQ0E7QUFrR0E7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///68\n");

/***/ }),
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/*!*****************************************************!*\
  !*** ./galaxy/scripts/mvc/dataset/dataset-model.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _states = __webpack_require__(/*! mvc/dataset/states */ 16);\n\nvar _states2 = _interopRequireDefault(_states);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"dataset\";\n//==============================================================================\nvar searchableMixin = _baseMvc2.default.SearchableModelMixin;\n/** @class base model for any DatasetAssociation (HDAs, LDDAs, DatasetCollectionDAs).\n *      No knowledge of what type (HDA/LDDA/DCDA) should be needed here.\n *  The DA's are made searchable (by attribute) by mixing in SearchableModelMixin.\n */\nvar DatasetAssociation = Backbone.Model.extend(_baseMvc2.default.LoggableMixin).extend(_baseMvc2.default.mixin(searchableMixin,\n/** @lends DatasetAssociation.prototype */{\n    _logNamespace: logNamespace,\n\n    /** default attributes for a model */\n    defaults: {\n        state: _states2.default.NEW,\n        deleted: false,\n        purged: false,\n        name: \"(unnamed dataset)\",\n        accessible: true,\n        // sniffed datatype (sam, tabular, bed, etc.)\n        data_type: \"\",\n        file_ext: \"\",\n        file_size: 0,\n\n        // array of associated file types (eg. [ 'bam_index', ... ])\n        meta_files: [],\n\n        misc_blurb: \"\",\n        misc_info: \"\",\n\n        tags: []\n        // do NOT default on annotation, as this default is valid and will be passed on 'save'\n        //  which is incorrect behavior when the model is only partially fetched (annos are not passed in summary data)\n        //annotation          : ''\n    },\n\n    /** instance vars and listeners */\n    initialize: function initialize(attributes, options) {\n        this.debug(this + \"(Dataset).initialize\", attributes, options);\n\n        //!! this state is not in trans.app.model.Dataset.states - set it here -\n        if (!this.get(\"accessible\")) {\n            this.set(\"state\", _states2.default.NOT_VIEWABLE);\n        }\n\n        /** Datasets rely/use some web controllers - have the model generate those URLs on startup */\n        this.urls = this._generateUrls();\n\n        this._setUpListeners();\n    },\n\n    /** returns misc. web urls for rendering things like re-run, display, etc. */\n    _generateUrls: function _generateUrls() {\n        var id = this.get(\"id\");\n        if (!id) {\n            return {};\n        }\n        var urls = {\n            purge: \"datasets/\" + id + \"/purge_async\",\n            display: \"datasets/\" + id + \"/display/?preview=True\",\n            edit: \"datasets/edit?dataset_id=\" + id,\n            download: \"datasets/\" + id + \"/display\" + this._downloadQueryParameters(),\n            report_error: \"dataset/errors?id=\" + id,\n            rerun: \"tool_runner/rerun?id=\" + id,\n            show_params: \"datasets/\" + id + \"/show_params\",\n            visualization: \"visualization\",\n            meta_download: \"dataset/get_metadata_file?hda_id=\" + id + \"&metadata_name=\"\n        };\n        _.each(urls, function (value, key) {\n            urls[key] = Galaxy.root + value;\n        });\n        this.urls = urls;\n        return urls;\n    },\n\n    _downloadQueryParameters: function _downloadQueryParameters() {\n        return \"?to_ext=\" + this.get(\"file_ext\");\n    },\n\n    /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n    _setUpListeners: function _setUpListeners() {\n        // if the state has changed and the new state is a ready state, fire an event\n        this.on(\"change:state\", function (currModel, newState) {\n            this.log(this + \" has changed state:\", currModel, newState);\n            if (this.inReadyState()) {\n                this.trigger(\"state:ready\", currModel, newState, this.previous(\"state\"));\n            }\n        });\n        // the download url (currently) relies on having a correct file extension\n        this.on(\"change:id change:file_ext\", function (currModel) {\n            this._generateUrls();\n        });\n    },\n\n    // ........................................................................ common queries\n    /** override to add urls */\n    toJSON: function toJSON() {\n        var json = Backbone.Model.prototype.toJSON.call(this);\n        //console.warn( 'returning json?' );\n        //return json;\n        return _.extend(json, {\n            urls: this.urls\n        });\n    },\n\n    /** Is this dataset deleted or purged? */\n    isDeletedOrPurged: function isDeletedOrPurged() {\n        return this.get(\"deleted\") || this.get(\"purged\");\n    },\n\n    /** Is this dataset in a 'ready' state; where 'Ready' states are states where no\n     *      processing (for the ds) is left to do on the server.\n     */\n    inReadyState: function inReadyState() {\n        var ready = _.contains(_states2.default.READY_STATES, this.get(\"state\"));\n        return this.isDeletedOrPurged() || ready;\n    },\n\n    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n    hasDetails: function hasDetails() {\n        // if it's inaccessible assume it has everything it needs\n        if (!this.get(\"accessible\")) {\n            return true;\n        }\n        return this.has(\"annotation\");\n    },\n\n    /** Convenience function to match dataset.has_data. */\n    hasData: function hasData() {\n        return this.get(\"file_size\") > 0;\n    },\n\n    // ........................................................................ ajax\n    fetch: function fetch(options) {\n        var dataset = this;\n        return Backbone.Model.prototype.fetch.call(this, options).always(function () {\n            dataset._generateUrls();\n        });\n    },\n\n    /** override to use actual Dates objects for create/update times */\n    parse: function parse(response, options) {\n        var parsed = Backbone.Model.prototype.parse.call(this, response, options);\n        if (parsed.create_time) {\n            parsed.create_time = new Date(parsed.create_time);\n        }\n        if (parsed.update_time) {\n            parsed.update_time = new Date(parsed.update_time);\n        }\n        return parsed;\n    },\n\n    /** override to wait by default */\n    save: function save(attrs, options) {\n        options = options || {};\n        options.wait = _.isUndefined(options.wait) ? true : options.wait;\n        return Backbone.Model.prototype.save.call(this, attrs, options);\n    },\n\n    //NOTE: subclasses of DA's will need to implement url and urlRoot in order to have these work properly\n    /** save this dataset, _Mark_ing it as deleted (just a flag) */\n    delete: function _delete(options) {\n        if (this.get(\"deleted\")) {\n            return jQuery.when();\n        }\n        return this.save({ deleted: true }, options);\n    },\n    /** save this dataset, _Mark_ing it as undeleted */\n    undelete: function undelete(options) {\n        if (!this.get(\"deleted\") || this.get(\"purged\")) {\n            return jQuery.when();\n        }\n        return this.save({ deleted: false }, options);\n    },\n\n    /** remove the file behind this dataset from the filesystem (if permitted) */\n    purge: function _purge(options) {\n        //TODO: use, override model.destroy, HDA.delete({ purge: true })\n        if (this.get(\"purged\")) {\n            return jQuery.when();\n        }\n        options = options || {};\n        options.url = this.urls.purge;\n\n        //TODO: ideally this would be a DELETE call to the api\n        //  using purge async for now\n        var hda = this;\n\n        var xhr = jQuery.ajax(options);\n        xhr.done(function (message, status, responseObj) {\n            hda.set({ deleted: true, purged: true });\n        });\n        xhr.fail(function (xhr, status, message) {\n            // Exception messages are hidden within error page including:  '...not allowed in this Galaxy instance.'\n            // unbury and re-add to xhr\n            var error = (0, _localization2.default)(\"Unable to purge dataset\");\n            var messageBuriedInUnfortunatelyFormattedError = \"Removal of datasets by users \" + \"is not allowed in this Galaxy instance\";\n            if (xhr.responseJSON && xhr.responseJSON.error) {\n                error = xhr.responseJSON.error;\n            } else if (xhr.responseText.indexOf(messageBuriedInUnfortunatelyFormattedError) !== -1) {\n                error = messageBuriedInUnfortunatelyFormattedError;\n            }\n            xhr.responseText = error;\n            hda.trigger(\"error\", hda, xhr, options, (0, _localization2.default)(error), {\n                error: error\n            });\n        });\n        return xhr;\n    },\n\n    // ........................................................................ searching\n    /** what attributes of an HDA will be used in a text search */\n    searchAttributes: [\"name\", \"file_ext\", \"genome_build\", \"misc_blurb\", \"misc_info\", \"annotation\", \"tags\"],\n\n    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n    searchAliases: {\n        title: \"name\",\n        format: \"file_ext\",\n        database: \"genome_build\",\n        blurb: \"misc_blurb\",\n        description: \"misc_blurb\",\n        info: \"misc_info\",\n        tag: \"tags\"\n    },\n\n    // ........................................................................ misc\n    /** String representation */\n    toString: function toString() {\n        var nameAndId = this.get(\"id\") || \"\";\n        if (this.get(\"name\")) {\n            nameAndId = \"\\\"\" + this.get(\"name\") + \"\\\",\" + nameAndId;\n        }\n        return \"Dataset(\" + nameAndId + \")\";\n    }\n}));\n\n//==============================================================================\n/** @class Backbone collection for dataset associations.\n */\nvar DatasetAssociationCollection = Backbone.Collection.extend(_baseMvc2.default.LoggableMixin).extend(\n/** @lends HistoryContents.prototype */{\n    _logNamespace: logNamespace,\n\n    model: DatasetAssociation,\n\n    /** root api url */\n    urlRoot: Galaxy.root + \"api/datasets\",\n\n    /** url fn */\n    url: function url() {\n        return this.urlRoot;\n    },\n\n    // ........................................................................ common queries\n    /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n    ids: function ids() {\n        return this.map(function (item) {\n            return item.get(\"id\");\n        });\n    },\n\n    /** Get contents that are not ready\n     *  @returns array of content models\n     */\n    notReady: function notReady() {\n        return this.filter(function (content) {\n            return !content.inReadyState();\n        });\n    },\n\n    /** return true if any datasets don't have details */\n    haveDetails: function haveDetails() {\n        return this.all(function (dataset) {\n            return dataset.hasDetails();\n        });\n    },\n\n    // ........................................................................ ajax\n    /** using a queue, perform ajaxFn on each of the models in this collection */\n    ajaxQueue: function ajaxQueue(ajaxFn, options) {\n        var deferred = jQuery.Deferred();\n        var startingLength = this.length;\n        var responses = [];\n\n        if (!startingLength) {\n            deferred.resolve([]);\n            return deferred;\n        }\n\n        // use reverse order (stylistic choice)\n        var ajaxFns = this.chain().reverse().map(function (dataset, i) {\n            return function () {\n                var xhr = ajaxFn.call(dataset, options);\n                // if successful, notify using the deferred to allow tracking progress\n                xhr.done(function (response) {\n                    deferred.notify({\n                        curr: i,\n                        total: startingLength,\n                        response: response,\n                        model: dataset\n                    });\n                });\n                // (regardless of previous error or success) if not last ajax call, shift and call the next\n                //  if last fn, resolve deferred\n                xhr.always(function (response) {\n                    responses.push(response);\n                    if (ajaxFns.length) {\n                        ajaxFns.shift()();\n                    } else {\n                        deferred.resolve(responses);\n                    }\n                });\n            };\n        }).value();\n        // start the queue\n        ajaxFns.shift()();\n\n        return deferred;\n    },\n\n    // ........................................................................ sorting/filtering\n    /** return a new collection of datasets whose attributes contain the substring matchesWhat */\n    matches: function matches(matchesWhat) {\n        return this.filter(function (dataset) {\n            return dataset.matches(matchesWhat);\n        });\n    },\n\n    /** String representation. */\n    toString: function toString() {\n        return [\"DatasetAssociationCollection(\", this.length, \")\"].join(\"\");\n    }\n});\n\n//==============================================================================\nexports.default = {\n    DatasetAssociation: DatasetAssociation,\n    DatasetAssociationCollection: DatasetAssociationCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9kYXRhc2V0L2RhdGFzZXQtbW9kZWwuanM/NGQ1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU1RBVEVTIGZyb20gXCJtdmMvZGF0YXNldC9zdGF0ZXNcIjtcbmltcG9ydCBCQVNFX01WQyBmcm9tIFwibXZjL2Jhc2UtbXZjXCI7XG5pbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuXG52YXIgbG9nTmFtZXNwYWNlID0gXCJkYXRhc2V0XCI7XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIHNlYXJjaGFibGVNaXhpbiA9IEJBU0VfTVZDLlNlYXJjaGFibGVNb2RlbE1peGluO1xuLyoqIEBjbGFzcyBiYXNlIG1vZGVsIGZvciBhbnkgRGF0YXNldEFzc29jaWF0aW9uIChIREFzLCBMRERBcywgRGF0YXNldENvbGxlY3Rpb25EQXMpLlxuICogICAgICBObyBrbm93bGVkZ2Ugb2Ygd2hhdCB0eXBlIChIREEvTEREQS9EQ0RBKSBzaG91bGQgYmUgbmVlZGVkIGhlcmUuXG4gKiAgVGhlIERBJ3MgYXJlIG1hZGUgc2VhcmNoYWJsZSAoYnkgYXR0cmlidXRlKSBieSBtaXhpbmcgaW4gU2VhcmNoYWJsZU1vZGVsTWl4aW4uXG4gKi9cbnZhciBEYXRhc2V0QXNzb2NpYXRpb24gPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoQkFTRV9NVkMuTG9nZ2FibGVNaXhpbikuZXh0ZW5kKFxuICAgIEJBU0VfTVZDLm1peGluKFxuICAgICAgICBzZWFyY2hhYmxlTWl4aW4sXG4gICAgICAgIC8qKiBAbGVuZHMgRGF0YXNldEFzc29jaWF0aW9uLnByb3RvdHlwZSAqLyB7XG4gICAgICAgICAgICBfbG9nTmFtZXNwYWNlOiBsb2dOYW1lc3BhY2UsXG5cbiAgICAgICAgICAgIC8qKiBkZWZhdWx0IGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgKi9cbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IFNUQVRFUy5ORVcsXG4gICAgICAgICAgICAgICAgZGVsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcHVyZ2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcIih1bm5hbWVkIGRhdGFzZXQpXCIsXG4gICAgICAgICAgICAgICAgYWNjZXNzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBzbmlmZmVkIGRhdGF0eXBlIChzYW0sIHRhYnVsYXIsIGJlZCwgZXRjLilcbiAgICAgICAgICAgICAgICBkYXRhX3R5cGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgZmlsZV9leHQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgZmlsZV9zaXplOiAwLFxuXG4gICAgICAgICAgICAgICAgLy8gYXJyYXkgb2YgYXNzb2NpYXRlZCBmaWxlIHR5cGVzIChlZy4gWyAnYmFtX2luZGV4JywgLi4uIF0pXG4gICAgICAgICAgICAgICAgbWV0YV9maWxlczogW10sXG5cbiAgICAgICAgICAgICAgICBtaXNjX2JsdXJiOiBcIlwiLFxuICAgICAgICAgICAgICAgIG1pc2NfaW5mbzogXCJcIixcblxuICAgICAgICAgICAgICAgIHRhZ3M6IFtdXG4gICAgICAgICAgICAgICAgLy8gZG8gTk9UIGRlZmF1bHQgb24gYW5ub3RhdGlvbiwgYXMgdGhpcyBkZWZhdWx0IGlzIHZhbGlkIGFuZCB3aWxsIGJlIHBhc3NlZCBvbiAnc2F2ZSdcbiAgICAgICAgICAgICAgICAvLyAgd2hpY2ggaXMgaW5jb3JyZWN0IGJlaGF2aW9yIHdoZW4gdGhlIG1vZGVsIGlzIG9ubHkgcGFydGlhbGx5IGZldGNoZWQgKGFubm9zIGFyZSBub3QgcGFzc2VkIGluIHN1bW1hcnkgZGF0YSlcbiAgICAgICAgICAgICAgICAvL2Fubm90YXRpb24gICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqIGluc3RhbmNlIHZhcnMgYW5kIGxpc3RlbmVycyAqL1xuICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWcoYCR7dGhpc30oRGF0YXNldCkuaW5pdGlhbGl6ZWAsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8hISB0aGlzIHN0YXRlIGlzIG5vdCBpbiB0cmFucy5hcHAubW9kZWwuRGF0YXNldC5zdGF0ZXMgLSBzZXQgaXQgaGVyZSAtXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmdldChcImFjY2Vzc2libGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJzdGF0ZVwiLCBTVEFURVMuTk9UX1ZJRVdBQkxFKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiogRGF0YXNldHMgcmVseS91c2Ugc29tZSB3ZWIgY29udHJvbGxlcnMgLSBoYXZlIHRoZSBtb2RlbCBnZW5lcmF0ZSB0aG9zZSBVUkxzIG9uIHN0YXJ0dXAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLnVybHMgPSB0aGlzLl9nZW5lcmF0ZVVybHMoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NldFVwTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKiogcmV0dXJucyBtaXNjLiB3ZWIgdXJscyBmb3IgcmVuZGVyaW5nIHRoaW5ncyBsaWtlIHJlLXJ1biwgZGlzcGxheSwgZXRjLiAqL1xuICAgICAgICAgICAgX2dlbmVyYXRlVXJsczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5nZXQoXCJpZFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHVybHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHB1cmdlOiBgZGF0YXNldHMvJHtpZH0vcHVyZ2VfYXN5bmNgLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgZGF0YXNldHMvJHtpZH0vZGlzcGxheS8/cHJldmlldz1UcnVlYCxcbiAgICAgICAgICAgICAgICAgICAgZWRpdDogYGRhdGFzZXRzL2VkaXQ/ZGF0YXNldF9pZD0ke2lkfWAsXG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiBgZGF0YXNldHMvJHtpZH0vZGlzcGxheSR7dGhpcy5fZG93bmxvYWRRdWVyeVBhcmFtZXRlcnMoKX1gLFxuICAgICAgICAgICAgICAgICAgICByZXBvcnRfZXJyb3I6IGBkYXRhc2V0L2Vycm9ycz9pZD0ke2lkfWAsXG4gICAgICAgICAgICAgICAgICAgIHJlcnVuOiBgdG9vbF9ydW5uZXIvcmVydW4/aWQ9JHtpZH1gLFxuICAgICAgICAgICAgICAgICAgICBzaG93X3BhcmFtczogYGRhdGFzZXRzLyR7aWR9L3Nob3dfcGFyYW1zYCxcbiAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbjogXCJ2aXN1YWxpemF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFfZG93bmxvYWQ6IGBkYXRhc2V0L2dldF9tZXRhZGF0YV9maWxlP2hkYV9pZD0ke2lkfSZtZXRhZGF0YV9uYW1lPWBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF8uZWFjaCh1cmxzLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1cmxzW2tleV0gPSBHYWxheHkucm9vdCArIHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMudXJscyA9IHVybHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybHM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfZG93bmxvYWRRdWVyeVBhcmFtZXRlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgP3RvX2V4dD0ke3RoaXMuZ2V0KFwiZmlsZV9leHRcIil9YDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKiBzZXQgdXAgYW55IGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgICogIGV2ZW50OiBzdGF0ZTpyZWFkeSAgZmlyZWQgd2hlbiB0aGlzIERBIG1vdmVzIGludG8vaXMgYWxyZWFkeSBpbiBhIHJlYWR5IHN0YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9zZXRVcExpc3RlbmVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN0YXRlIGhhcyBjaGFuZ2VkIGFuZCB0aGUgbmV3IHN0YXRlIGlzIGEgcmVhZHkgc3RhdGUsIGZpcmUgYW4gZXZlbnRcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2hhbmdlOnN0YXRlXCIsIGZ1bmN0aW9uKGN1cnJNb2RlbCwgbmV3U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2coYCR7dGhpc30gaGFzIGNoYW5nZWQgc3RhdGU6YCwgY3Vyck1vZGVsLCBuZXdTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluUmVhZHlTdGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJzdGF0ZTpyZWFkeVwiLCBjdXJyTW9kZWwsIG5ld1N0YXRlLCB0aGlzLnByZXZpb3VzKFwic3RhdGVcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gdGhlIGRvd25sb2FkIHVybCAoY3VycmVudGx5KSByZWxpZXMgb24gaGF2aW5nIGEgY29ycmVjdCBmaWxlIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6aWQgY2hhbmdlOmZpbGVfZXh0XCIsIGZ1bmN0aW9uKGN1cnJNb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW5lcmF0ZVVybHMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBjb21tb24gcXVlcmllc1xuICAgICAgICAgICAgLyoqIG92ZXJyaWRlIHRvIGFkZCB1cmxzICovXG4gICAgICAgICAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS53YXJuKCAncmV0dXJuaW5nIGpzb24/JyApO1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuIGpzb247XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKGpzb24sIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsczogdGhpcy51cmxzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKiogSXMgdGhpcyBkYXRhc2V0IGRlbGV0ZWQgb3IgcHVyZ2VkPyAqL1xuICAgICAgICAgICAgaXNEZWxldGVkT3JQdXJnZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChcImRlbGV0ZWRcIikgfHwgdGhpcy5nZXQoXCJwdXJnZWRcIik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKiogSXMgdGhpcyBkYXRhc2V0IGluIGEgJ3JlYWR5JyBzdGF0ZTsgd2hlcmUgJ1JlYWR5JyBzdGF0ZXMgYXJlIHN0YXRlcyB3aGVyZSBub1xuICAgICAgICAgICAgICogICAgICBwcm9jZXNzaW5nIChmb3IgdGhlIGRzKSBpcyBsZWZ0IHRvIGRvIG9uIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluUmVhZHlTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWR5ID0gXy5jb250YWlucyhTVEFURVMuUkVBRFlfU1RBVEVTLCB0aGlzLmdldChcInN0YXRlXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0RlbGV0ZWRPclB1cmdlZCgpIHx8IHJlYWR5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqIERvZXMgdGhpcyBtb2RlbCBhbHJlYWR5IGNvbnRhaW4gZGV0YWlsZWQgZGF0YSAoYXMgb3Bwb3NlZCB0byBqdXN0IHN1bW1hcnkgbGV2ZWwgZGF0YSk/ICovXG4gICAgICAgICAgICBoYXNEZXRhaWxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIGluYWNjZXNzaWJsZSBhc3N1bWUgaXQgaGFzIGV2ZXJ5dGhpbmcgaXQgbmVlZHNcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0KFwiYWNjZXNzaWJsZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzKFwiYW5ub3RhdGlvblwiKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBtYXRjaCBkYXRhc2V0Lmhhc19kYXRhLiAqL1xuICAgICAgICAgICAgaGFzRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwiZmlsZV9zaXplXCIpID4gMDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBhamF4XG4gICAgICAgICAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhc2V0ID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLmZldGNoLmNhbGwodGhpcywgb3B0aW9ucykuYWx3YXlzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldC5fZ2VuZXJhdGVVcmxzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKiogb3ZlcnJpZGUgdG8gdXNlIGFjdHVhbCBEYXRlcyBvYmplY3RzIGZvciBjcmVhdGUvdXBkYXRlIHRpbWVzICovXG4gICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24ocmVzcG9uc2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLnBhcnNlLmNhbGwodGhpcywgcmVzcG9uc2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQuY3JlYXRlX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkLmNyZWF0ZV90aW1lID0gbmV3IERhdGUocGFyc2VkLmNyZWF0ZV90aW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZC51cGRhdGVfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWQudXBkYXRlX3RpbWUgPSBuZXcgRGF0ZShwYXJzZWQudXBkYXRlX3RpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqIG92ZXJyaWRlIHRvIHdhaXQgYnkgZGVmYXVsdCAqL1xuICAgICAgICAgICAgc2F2ZTogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLndhaXQgPSBfLmlzVW5kZWZpbmVkKG9wdGlvbnMud2FpdCkgPyB0cnVlIDogb3B0aW9ucy53YWl0O1xuICAgICAgICAgICAgICAgIHJldHVybiBCYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuc2F2ZS5jYWxsKHRoaXMsIGF0dHJzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vTk9URTogc3ViY2xhc3NlcyBvZiBEQSdzIHdpbGwgbmVlZCB0byBpbXBsZW1lbnQgdXJsIGFuZCB1cmxSb290IGluIG9yZGVyIHRvIGhhdmUgdGhlc2Ugd29yayBwcm9wZXJseVxuICAgICAgICAgICAgLyoqIHNhdmUgdGhpcyBkYXRhc2V0LCBfTWFya19pbmcgaXQgYXMgZGVsZXRlZCAoanVzdCBhIGZsYWcpICovXG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXQoXCJkZWxldGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkud2hlbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zYXZlKHsgZGVsZXRlZDogdHJ1ZSB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKiogc2F2ZSB0aGlzIGRhdGFzZXQsIF9NYXJrX2luZyBpdCBhcyB1bmRlbGV0ZWQgKi9cbiAgICAgICAgICAgIHVuZGVsZXRlOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmdldChcImRlbGV0ZWRcIikgfHwgdGhpcy5nZXQoXCJwdXJnZWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS53aGVuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhdmUoeyBkZWxldGVkOiBmYWxzZSB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKiByZW1vdmUgdGhlIGZpbGUgYmVoaW5kIHRoaXMgZGF0YXNldCBmcm9tIHRoZSBmaWxlc3lzdGVtIChpZiBwZXJtaXR0ZWQpICovXG4gICAgICAgICAgICBwdXJnZTogZnVuY3Rpb24gX3B1cmdlKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvL1RPRE86IHVzZSwgb3ZlcnJpZGUgbW9kZWwuZGVzdHJveSwgSERBLmRlbGV0ZSh7IHB1cmdlOiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KFwicHVyZ2VkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkud2hlbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnVybCA9IHRoaXMudXJscy5wdXJnZTtcblxuICAgICAgICAgICAgICAgIC8vVE9ETzogaWRlYWxseSB0aGlzIHdvdWxkIGJlIGEgREVMRVRFIGNhbGwgdG8gdGhlIGFwaVxuICAgICAgICAgICAgICAgIC8vICB1c2luZyBwdXJnZSBhc3luYyBmb3Igbm93XG4gICAgICAgICAgICAgICAgdmFyIGhkYSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgeGhyID0galF1ZXJ5LmFqYXgob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgeGhyLmRvbmUoKG1lc3NhZ2UsIHN0YXR1cywgcmVzcG9uc2VPYmopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGRhLnNldCh7IGRlbGV0ZWQ6IHRydWUsIHB1cmdlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB4aHIuZmFpbCgoeGhyLCBzdGF0dXMsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhjZXB0aW9uIG1lc3NhZ2VzIGFyZSBoaWRkZW4gd2l0aGluIGVycm9yIHBhZ2UgaW5jbHVkaW5nOiAgJy4uLm5vdCBhbGxvd2VkIGluIHRoaXMgR2FsYXh5IGluc3RhbmNlLidcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5idXJ5IGFuZCByZS1hZGQgdG8geGhyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IF9sKFwiVW5hYmxlIHRvIHB1cmdlIGRhdGFzZXRcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlQnVyaWVkSW5VbmZvcnR1bmF0ZWx5Rm9ybWF0dGVkRXJyb3IgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXCJSZW1vdmFsIG9mIGRhdGFzZXRzIGJ5IHVzZXJzIFwiICsgXCJpcyBub3QgYWxsb3dlZCBpbiB0aGlzIEdhbGF4eSBpbnN0YW5jZVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlSlNPTiAmJiB4aHIucmVzcG9uc2VKU09OLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHhoci5yZXNwb25zZUpTT04uZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnJlc3BvbnNlVGV4dC5pbmRleE9mKG1lc3NhZ2VCdXJpZWRJblVuZm9ydHVuYXRlbHlGb3JtYXR0ZWRFcnJvcikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG1lc3NhZ2VCdXJpZWRJblVuZm9ydHVuYXRlbHlGb3JtYXR0ZWRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUZXh0ID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGhkYS50cmlnZ2VyKFwiZXJyb3JcIiwgaGRhLCB4aHIsIG9wdGlvbnMsIF9sKGVycm9yKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB4aHI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gc2VhcmNoaW5nXG4gICAgICAgICAgICAvKiogd2hhdCBhdHRyaWJ1dGVzIG9mIGFuIEhEQSB3aWxsIGJlIHVzZWQgaW4gYSB0ZXh0IHNlYXJjaCAqL1xuICAgICAgICAgICAgc2VhcmNoQXR0cmlidXRlczogW1wibmFtZVwiLCBcImZpbGVfZXh0XCIsIFwiZ2Vub21lX2J1aWxkXCIsIFwibWlzY19ibHVyYlwiLCBcIm1pc2NfaW5mb1wiLCBcImFubm90YXRpb25cIiwgXCJ0YWdzXCJdLFxuXG4gICAgICAgICAgICAvKiogb3VyIGF0dHIga2V5cyBkb24ndCBvZnRlbiBtYXRjaCB0aGUgbGFiZWxzIHdlIGRpc3BsYXkgdG8gdGhlIHVzZXIgLSBzbywgd2hlbiB1c2luZ1xuICAgICAgICAgICAgICogICAgICBhdHRyaWJ1dGUgc3BlY2lmaWVycyAoJ25hbWU9XCJibGVyXCInKSBpbiBhIHRlcm0sIGFsbG93IHBhc3NpbmcgaW4gYWxpYXNlcyBmb3IgdGhlXG4gICAgICAgICAgICAgKiAgICAgIGZvbGxvd2luZyBhdHRyIGtleXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNlYXJjaEFsaWFzZXM6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJuYW1lXCIsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImZpbGVfZXh0XCIsXG4gICAgICAgICAgICAgICAgZGF0YWJhc2U6IFwiZ2Vub21lX2J1aWxkXCIsXG4gICAgICAgICAgICAgICAgYmx1cmI6IFwibWlzY19ibHVyYlwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIm1pc2NfYmx1cmJcIixcbiAgICAgICAgICAgICAgICBpbmZvOiBcIm1pc2NfaW5mb1wiLFxuICAgICAgICAgICAgICAgIHRhZzogXCJ0YWdzXCJcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBtaXNjXG4gICAgICAgICAgICAvKiogU3RyaW5nIHJlcHJlc2VudGF0aW9uICovXG4gICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWVBbmRJZCA9IHRoaXMuZ2V0KFwiaWRcIikgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXQoXCJuYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVBbmRJZCA9IGBcIiR7dGhpcy5nZXQoXCJuYW1lXCIpfVwiLCR7bmFtZUFuZElkfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBgRGF0YXNldCgke25hbWVBbmRJZH0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIClcbik7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vKiogQGNsYXNzIEJhY2tib25lIGNvbGxlY3Rpb24gZm9yIGRhdGFzZXQgYXNzb2NpYXRpb25zLlxuICovXG52YXIgRGF0YXNldEFzc29jaWF0aW9uQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKEJBU0VfTVZDLkxvZ2dhYmxlTWl4aW4pLmV4dGVuZChcbiAgICAvKiogQGxlbmRzIEhpc3RvcnlDb250ZW50cy5wcm90b3R5cGUgKi8ge1xuICAgICAgICBfbG9nTmFtZXNwYWNlOiBsb2dOYW1lc3BhY2UsXG5cbiAgICAgICAgbW9kZWw6IERhdGFzZXRBc3NvY2lhdGlvbixcblxuICAgICAgICAvKiogcm9vdCBhcGkgdXJsICovXG4gICAgICAgIHVybFJvb3Q6IGAke0dhbGF4eS5yb290fWFwaS9kYXRhc2V0c2AsXG5cbiAgICAgICAgLyoqIHVybCBmbiAqL1xuICAgICAgICB1cmw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXJsUm9vdDtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gY29tbW9uIHF1ZXJpZXNcbiAgICAgICAgLyoqIEdldCB0aGUgaWRzIG9mIGV2ZXJ5IGl0ZW0gaW4gdGhpcyBjb2xsZWN0aW9uXG4gICAgICAgICAqICBAcmV0dXJucyBhcnJheSBvZiBlbmNvZGVkIGlkc1xuICAgICAgICAgKi9cbiAgICAgICAgaWRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChpdGVtID0+IGl0ZW0uZ2V0KFwiaWRcIikpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBHZXQgY29udGVudHMgdGhhdCBhcmUgbm90IHJlYWR5XG4gICAgICAgICAqICBAcmV0dXJucyBhcnJheSBvZiBjb250ZW50IG1vZGVsc1xuICAgICAgICAgKi9cbiAgICAgICAgbm90UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGNvbnRlbnQgPT4gIWNvbnRlbnQuaW5SZWFkeVN0YXRlKCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiByZXR1cm4gdHJ1ZSBpZiBhbnkgZGF0YXNldHMgZG9uJ3QgaGF2ZSBkZXRhaWxzICovXG4gICAgICAgIGhhdmVEZXRhaWxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbChkYXRhc2V0ID0+IGRhdGFzZXQuaGFzRGV0YWlscygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gYWpheFxuICAgICAgICAvKiogdXNpbmcgYSBxdWV1ZSwgcGVyZm9ybSBhamF4Rm4gb24gZWFjaCBvZiB0aGUgbW9kZWxzIGluIHRoaXMgY29sbGVjdGlvbiAqL1xuICAgICAgICBhamF4UXVldWU6IGZ1bmN0aW9uKGFqYXhGbiwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCk7XG4gICAgICAgICAgICB2YXIgc3RhcnRpbmdMZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciByZXNwb25zZXMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKCFzdGFydGluZ0xlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdXNlIHJldmVyc2Ugb3JkZXIgKHN0eWxpc3RpYyBjaG9pY2UpXG4gICAgICAgICAgICB2YXIgYWpheEZucyA9IHRoaXMuY2hhaW4oKVxuICAgICAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgICAgICAubWFwKChkYXRhc2V0LCBpKSA9PiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSBhamF4Rm4uY2FsbChkYXRhc2V0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgc3VjY2Vzc2Z1bCwgbm90aWZ5IHVzaW5nIHRoZSBkZWZlcnJlZCB0byBhbGxvdyB0cmFja2luZyBwcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgICB4aHIuZG9uZShyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5ub3RpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnI6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHN0YXJ0aW5nTGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogZGF0YXNldFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyAocmVnYXJkbGVzcyBvZiBwcmV2aW91cyBlcnJvciBvciBzdWNjZXNzKSBpZiBub3QgbGFzdCBhamF4IGNhbGwsIHNoaWZ0IGFuZCBjYWxsIHRoZSBuZXh0XG4gICAgICAgICAgICAgICAgICAgIC8vICBpZiBsYXN0IGZuLCByZXNvbHZlIGRlZmVycmVkXG4gICAgICAgICAgICAgICAgICAgIHhoci5hbHdheXMocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzLnB1c2gocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFqYXhGbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWpheEZucy5zaGlmdCgpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudmFsdWUoKTtcbiAgICAgICAgICAgIC8vIHN0YXJ0IHRoZSBxdWV1ZVxuICAgICAgICAgICAgYWpheEZucy5zaGlmdCgpKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gc29ydGluZy9maWx0ZXJpbmdcbiAgICAgICAgLyoqIHJldHVybiBhIG5ldyBjb2xsZWN0aW9uIG9mIGRhdGFzZXRzIHdob3NlIGF0dHJpYnV0ZXMgY29udGFpbiB0aGUgc3Vic3RyaW5nIG1hdGNoZXNXaGF0ICovXG4gICAgICAgIG1hdGNoZXM6IGZ1bmN0aW9uKG1hdGNoZXNXaGF0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZGF0YXNldCA9PiBkYXRhc2V0Lm1hdGNoZXMobWF0Y2hlc1doYXQpKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogU3RyaW5nIHJlcHJlc2VudGF0aW9uLiAqL1xuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gW1wiRGF0YXNldEFzc29jaWF0aW9uQ29sbGVjdGlvbihcIiwgdGhpcy5sZW5ndGgsIFwiKVwiXS5qb2luKFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBEYXRhc2V0QXNzb2NpYXRpb246IERhdGFzZXRBc3NvY2lhdGlvbixcbiAgICBEYXRhc2V0QXNzb2NpYXRpb25Db2xsZWN0aW9uOiBEYXRhc2V0QXNzb2NpYXRpb25Db2xsZWN0aW9uXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9kYXRhc2V0L2RhdGFzZXQtbW9kZWwuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBcEJBO0FBQ0E7QUFzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQUNBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdE9BO0FBQ0E7QUEwT0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckJBO0FBdUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRGQTtBQUNBO0FBeUZBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///107\n");

/***/ }),
/* 108 */
/*!*************************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-content-model.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _states = __webpack_require__(/*! mvc/dataset/states */ 16);\n\nvar _states2 = _interopRequireDefault(_states);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar collectionFuzzyCountDefault = 1000;\ntry {\n    collectionFuzzyCountDefault = localStorage.getItem(\"collectionFuzzyCountDefault\") || collectionFuzzyCountDefault;\n} catch (err) {}\n\n//==============================================================================\n/** @class Mixin for HistoryContents content (HDAs, HDCAs).\n */\nvar HistoryContentMixin = {\n    /** default attributes for a model */\n    defaults: {\n        /** parent (containing) history */\n        history_id: null,\n        /** some content_type (HistoryContents can contain mixed model classes) */\n        history_content_type: null,\n        /** indicating when/what order the content was generated in the context of the history */\n        hid: null,\n        /** whether the user wants the content shown (visible) */\n        visible: true\n    },\n\n    // ........................................................................ mixed content element\n    // In order to be part of a MIXED bbone collection, we can't rely on the id\n    //  (which may collide btwn models of different classes)\n    // Instead, use type_id which prefixes the history_content_type so the bbone collection can differentiate\n    idAttribute: \"type_id\",\n\n    // ........................................................................ common queries\n    /** the more common alias of visible */\n    hidden: function hidden() {\n        return !this.get(\"visible\");\n    },\n\n    //TODO: remove\n    /** based on includeDeleted, includeHidden (gen. from the container control),\n     *      would this ds show in the list of ds's?\n     *  @param {Boolean} includeDeleted are we showing deleted hdas?\n     *  @param {Boolean} includeHidden are we showing hidden hdas?\n     */\n    isVisible: function isVisible(includeDeleted, includeHidden) {\n        var isVisible = true;\n        if (!includeDeleted && (this.get(\"deleted\") || this.get(\"purged\"))) {\n            isVisible = false;\n        }\n        if (!includeHidden && !this.get(\"visible\")) {\n            isVisible = false;\n        }\n        return isVisible;\n    },\n\n    // ........................................................................ ajax\n    //TODO?: these are probably better done on the leaf classes\n    /** history content goes through the 'api/histories' API */\n    urlRoot: Galaxy.root + \"api/histories/\",\n\n    /** full url spec. for this content */\n    url: function url() {\n        var historyContentType = this.get(\"history_content_type\");\n        var historyId = this.get(\"history_id\");\n        var historyContentId = this.get(\"id\");\n        var url = \"\" + this.urlRoot + historyId + \"/contents/\" + historyContentType + \"s/\" + historyContentId;\n        if (historyContentType == \"dataset_collection\") {\n            // Don't fetch whole collection - just enought to render outline. Backbone will\n            // make a detailed request if any datasets are expanded beyond that point.\n            url = url + \"?view=element-reference&fuzzy_count=\" + collectionFuzzyCountDefault;\n        }\n        return url;\n    },\n\n    /** save this content as not visible */\n    hide: function hide(options) {\n        if (!this.get(\"visible\")) {\n            return jQuery.when();\n        }\n        return this.save({ visible: false }, options);\n    },\n    /** save this content as visible */\n    unhide: function unhide(options) {\n        if (this.get(\"visible\")) {\n            return jQuery.when();\n        }\n        return this.save({ visible: true }, options);\n    },\n\n    // ........................................................................ misc\n    toString: function toString() {\n        return [this.get(\"type_id\"), this.get(\"hid\"), this.get(\"name\")].join(\":\");\n    }\n};\n\n//==============================================================================\nexports.default = {\n    HistoryContentMixin: HistoryContentMixin\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hpc3RvcnktY29udGVudC1tb2RlbC5qcz84NTg5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTVEFURVMgZnJvbSBcIm12Yy9kYXRhc2V0L3N0YXRlc1wiO1xuaW1wb3J0IEJBU0VfTVZDIGZyb20gXCJtdmMvYmFzZS1tdmNcIjtcbmltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG5cbnZhciBjb2xsZWN0aW9uRnV6enlDb3VudERlZmF1bHQgPSAxMDAwO1xudHJ5IHtcbiAgICBjb2xsZWN0aW9uRnV6enlDb3VudERlZmF1bHQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNvbGxlY3Rpb25GdXp6eUNvdW50RGVmYXVsdFwiKSB8fCBjb2xsZWN0aW9uRnV6enlDb3VudERlZmF1bHQ7XG59IGNhdGNoIChlcnIpIHt9XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vKiogQGNsYXNzIE1peGluIGZvciBIaXN0b3J5Q29udGVudHMgY29udGVudCAoSERBcywgSERDQXMpLlxuICovXG52YXIgSGlzdG9yeUNvbnRlbnRNaXhpbiA9IHtcbiAgICAvKiogZGVmYXVsdCBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgLyoqIHBhcmVudCAoY29udGFpbmluZykgaGlzdG9yeSAqL1xuICAgICAgICBoaXN0b3J5X2lkOiBudWxsLFxuICAgICAgICAvKiogc29tZSBjb250ZW50X3R5cGUgKEhpc3RvcnlDb250ZW50cyBjYW4gY29udGFpbiBtaXhlZCBtb2RlbCBjbGFzc2VzKSAqL1xuICAgICAgICBoaXN0b3J5X2NvbnRlbnRfdHlwZTogbnVsbCxcbiAgICAgICAgLyoqIGluZGljYXRpbmcgd2hlbi93aGF0IG9yZGVyIHRoZSBjb250ZW50IHdhcyBnZW5lcmF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGhpc3RvcnkgKi9cbiAgICAgICAgaGlkOiBudWxsLFxuICAgICAgICAvKiogd2hldGhlciB0aGUgdXNlciB3YW50cyB0aGUgY29udGVudCBzaG93biAodmlzaWJsZSkgKi9cbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgIH0sXG5cbiAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gbWl4ZWQgY29udGVudCBlbGVtZW50XG4gICAgLy8gSW4gb3JkZXIgdG8gYmUgcGFydCBvZiBhIE1JWEVEIGJib25lIGNvbGxlY3Rpb24sIHdlIGNhbid0IHJlbHkgb24gdGhlIGlkXG4gICAgLy8gICh3aGljaCBtYXkgY29sbGlkZSBidHduIG1vZGVscyBvZiBkaWZmZXJlbnQgY2xhc3NlcylcbiAgICAvLyBJbnN0ZWFkLCB1c2UgdHlwZV9pZCB3aGljaCBwcmVmaXhlcyB0aGUgaGlzdG9yeV9jb250ZW50X3R5cGUgc28gdGhlIGJib25lIGNvbGxlY3Rpb24gY2FuIGRpZmZlcmVudGlhdGVcbiAgICBpZEF0dHJpYnV0ZTogXCJ0eXBlX2lkXCIsXG5cbiAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gY29tbW9uIHF1ZXJpZXNcbiAgICAvKiogdGhlIG1vcmUgY29tbW9uIGFsaWFzIG9mIHZpc2libGUgKi9cbiAgICBoaWRkZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuZ2V0KFwidmlzaWJsZVwiKTtcbiAgICB9LFxuXG4gICAgLy9UT0RPOiByZW1vdmVcbiAgICAvKiogYmFzZWQgb24gaW5jbHVkZURlbGV0ZWQsIGluY2x1ZGVIaWRkZW4gKGdlbi4gZnJvbSB0aGUgY29udGFpbmVyIGNvbnRyb2wpLFxuICAgICAqICAgICAgd291bGQgdGhpcyBkcyBzaG93IGluIHRoZSBsaXN0IG9mIGRzJ3M/XG4gICAgICogIEBwYXJhbSB7Qm9vbGVhbn0gaW5jbHVkZURlbGV0ZWQgYXJlIHdlIHNob3dpbmcgZGVsZXRlZCBoZGFzP1xuICAgICAqICBAcGFyYW0ge0Jvb2xlYW59IGluY2x1ZGVIaWRkZW4gYXJlIHdlIHNob3dpbmcgaGlkZGVuIGhkYXM/XG4gICAgICovXG4gICAgaXNWaXNpYmxlOiBmdW5jdGlvbihpbmNsdWRlRGVsZXRlZCwgaW5jbHVkZUhpZGRlbikge1xuICAgICAgICB2YXIgaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpbmNsdWRlRGVsZXRlZCAmJiAodGhpcy5nZXQoXCJkZWxldGVkXCIpIHx8IHRoaXMuZ2V0KFwicHVyZ2VkXCIpKSkge1xuICAgICAgICAgICAgaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbmNsdWRlSGlkZGVuICYmICF0aGlzLmdldChcInZpc2libGVcIikpIHtcbiAgICAgICAgICAgIGlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1Zpc2libGU7XG4gICAgfSxcblxuICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBhamF4XG4gICAgLy9UT0RPPzogdGhlc2UgYXJlIHByb2JhYmx5IGJldHRlciBkb25lIG9uIHRoZSBsZWFmIGNsYXNzZXNcbiAgICAvKiogaGlzdG9yeSBjb250ZW50IGdvZXMgdGhyb3VnaCB0aGUgJ2FwaS9oaXN0b3JpZXMnIEFQSSAqL1xuICAgIHVybFJvb3Q6IGAke0dhbGF4eS5yb290fWFwaS9oaXN0b3JpZXMvYCxcblxuICAgIC8qKiBmdWxsIHVybCBzcGVjLiBmb3IgdGhpcyBjb250ZW50ICovXG4gICAgdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhpc3RvcnlDb250ZW50VHlwZSA9IHRoaXMuZ2V0KFwiaGlzdG9yeV9jb250ZW50X3R5cGVcIik7XG4gICAgICAgIHZhciBoaXN0b3J5SWQgPSB0aGlzLmdldChcImhpc3RvcnlfaWRcIik7XG4gICAgICAgIHZhciBoaXN0b3J5Q29udGVudElkID0gdGhpcy5nZXQoXCJpZFwiKTtcbiAgICAgICAgdmFyIHVybCA9IGAke3RoaXMudXJsUm9vdH0ke2hpc3RvcnlJZH0vY29udGVudHMvJHtoaXN0b3J5Q29udGVudFR5cGV9cy8ke2hpc3RvcnlDb250ZW50SWR9YDtcbiAgICAgICAgaWYgKGhpc3RvcnlDb250ZW50VHlwZSA9PSBcImRhdGFzZXRfY29sbGVjdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBmZXRjaCB3aG9sZSBjb2xsZWN0aW9uIC0ganVzdCBlbm91Z2h0IHRvIHJlbmRlciBvdXRsaW5lLiBCYWNrYm9uZSB3aWxsXG4gICAgICAgICAgICAvLyBtYWtlIGEgZGV0YWlsZWQgcmVxdWVzdCBpZiBhbnkgZGF0YXNldHMgYXJlIGV4cGFuZGVkIGJleW9uZCB0aGF0IHBvaW50LlxuICAgICAgICAgICAgdXJsID0gYCR7dXJsfT92aWV3PWVsZW1lbnQtcmVmZXJlbmNlJmZ1enp5X2NvdW50PSR7Y29sbGVjdGlvbkZ1enp5Q291bnREZWZhdWx0fWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9LFxuXG4gICAgLyoqIHNhdmUgdGhpcyBjb250ZW50IGFzIG5vdCB2aXNpYmxlICovXG4gICAgaGlkZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuZ2V0KFwidmlzaWJsZVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS53aGVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZSh7IHZpc2libGU6IGZhbHNlIH0sIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgLyoqIHNhdmUgdGhpcyBjb250ZW50IGFzIHZpc2libGUgKi9cbiAgICB1bmhpZGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0KFwidmlzaWJsZVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS53aGVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZSh7IHZpc2libGU6IHRydWUgfSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBtaXNjXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuZ2V0KFwidHlwZV9pZFwiKSwgdGhpcy5nZXQoXCJoaWRcIiksIHRoaXMuZ2V0KFwibmFtZVwiKV0uam9pbihcIjpcIik7XG4gICAgfVxufTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBIaXN0b3J5Q29udGVudE1peGluOiBIaXN0b3J5Q29udGVudE1peGluXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hpc3RvcnktY29udGVudC1tb2RlbC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEvRUE7QUFDQTtBQWlGQTtBQUNBO0FBQ0E7QUFEQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///108\n");

/***/ }),
/* 109 */
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/base-creator.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/* For presentation-related functionality shared across collection creators.\n   Particularily overlapping functionality related to name processing and help.\n*/\nvar CollectionCreatorMixin = {\n    /** add (or clear if clear is truthy) a validation warning to the DOM element described in what */\n    _validationWarning: function _validationWarning(what, clear) {\n        var VALIDATION_CLASS = \"validation-warning\";\n        if (what === \"name\") {\n            what = this.$(\".collection-name\").add(this.$(\".collection-name-prompt\"));\n            this.$(\".collection-name\").focus().select();\n        }\n        if (clear) {\n            what = what || this.$(\".\" + VALIDATION_CLASS);\n            what.removeClass(VALIDATION_CLASS);\n        } else {\n            what.addClass(VALIDATION_CLASS);\n        }\n    },\n\n    _changeHideOriginals: function _changeHideOriginals(ev) {\n        this.hideOriginals = this.$(\".hide-originals\").prop(\"checked\");\n    },\n\n    // ........................................................................ footer\n    /** handle a collection name change */\n    _changeName: function _changeName(ev) {\n        this._validationWarning(\"name\", !!this._getName());\n    },\n\n    /** check for enter key press when in the collection name and submit */\n    _nameCheckForEnter: function _nameCheckForEnter(ev) {\n        if (ev.keyCode === 13 && !this.blocking) {\n            this._clickCreate();\n        }\n    },\n\n    /** get the current collection name */\n    _getName: function _getName() {\n        return _.escape(this.$(\".collection-name\").val());\n    },\n\n    // ........................................................................ header\n    /** expand help */\n    _clickMoreHelp: function _clickMoreHelp(ev) {\n        ev.stopPropagation();\n        this.$(\".main-help\").addClass(\"expanded\");\n        this.$(\".more-help\").hide();\n    },\n    /** collapse help */\n    _clickLessHelp: function _clickLessHelp(ev) {\n        ev.stopPropagation();\n        this.$(\".main-help\").removeClass(\"expanded\");\n        this.$(\".more-help\").show();\n    },\n    /** toggle help */\n    _toggleHelp: function _toggleHelp(ev) {\n        ev.stopPropagation();\n        this.$(\".main-help\").toggleClass(\"expanded\");\n        this.$(\".more-help\").toggle();\n    },\n\n    /** show an alert on the top of the interface containing message (alertClass is bootstrap's alert-*) */\n    _showAlert: function _showAlert(message, alertClass) {\n        alertClass = alertClass || \"alert-danger\";\n        this.$(\".main-help\").hide();\n        this.$(\".header .alert\").attr(\"class\", \"alert alert-dismissable\").addClass(alertClass).show().find(\".alert-message\").html(message);\n    },\n    /** hide the alerts at the top */\n    _hideAlert: function _hideAlert(message) {\n        this.$(\".main-help\").show();\n        this.$(\".header .alert\").hide();\n    },\n\n    _cancelCreate: function _cancelCreate(ev) {\n        if (typeof this.oncancel === \"function\") {\n            this.oncancel.call(this);\n        }\n    },\n\n    /** attempt to create the current collection */\n    _clickCreate: function _clickCreate(ev) {\n        var name = this._getName();\n        if (!name) {\n            this._validationWarning(\"name\");\n        } else if (!this.blocking) {\n            this.createList(name);\n        }\n    },\n\n    _setUpCommonSettings: function _setUpCommonSettings(attributes) {\n        this.hideOriginals = attributes.defaultHideSourceItems || false;\n    },\n\n    /** render the footer, completion controls, and cancel controls */\n    _renderFooter: function _renderFooter(speed, callback) {\n        var self = this;\n        var $footer = this.$(\".footer\").empty().html(this.templates.footer());\n        _.each(this.footerSettings, function (property, selector) {\n            self.$(selector).prop(\"checked\", self[property]);\n        });\n        if (typeof this.oncancel === \"function\") {\n            this.$(\".cancel-create.btn\").show();\n        }\n        return $footer;\n    },\n\n    _creatorTemplates: {\n        main: _.template(['<div class=\"header flex-row no-flex\"></div>', '<div class=\"middle flex-row flex-row-container\"></div>', '<div class=\"footer flex-row no-flex\"></div>'].join(\"\"))\n    }\n};\n\n//==============================================================================\nexports.default = {\n    CollectionCreatorMixin: CollectionCreatorMixin\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9jb2xsZWN0aW9uL2Jhc2UtY3JlYXRvci5qcz81MTM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIEZvciBwcmVzZW50YXRpb24tcmVsYXRlZCBmdW5jdGlvbmFsaXR5IHNoYXJlZCBhY3Jvc3MgY29sbGVjdGlvbiBjcmVhdG9ycy5cbiAgIFBhcnRpY3VsYXJpbHkgb3ZlcmxhcHBpbmcgZnVuY3Rpb25hbGl0eSByZWxhdGVkIHRvIG5hbWUgcHJvY2Vzc2luZyBhbmQgaGVscC5cbiovXG52YXIgQ29sbGVjdGlvbkNyZWF0b3JNaXhpbiA9IHtcbiAgICAvKiogYWRkIChvciBjbGVhciBpZiBjbGVhciBpcyB0cnV0aHkpIGEgdmFsaWRhdGlvbiB3YXJuaW5nIHRvIHRoZSBET00gZWxlbWVudCBkZXNjcmliZWQgaW4gd2hhdCAqL1xuICAgIF92YWxpZGF0aW9uV2FybmluZzogZnVuY3Rpb24od2hhdCwgY2xlYXIpIHtcbiAgICAgICAgdmFyIFZBTElEQVRJT05fQ0xBU1MgPSBcInZhbGlkYXRpb24td2FybmluZ1wiO1xuICAgICAgICBpZiAod2hhdCA9PT0gXCJuYW1lXCIpIHtcbiAgICAgICAgICAgIHdoYXQgPSB0aGlzLiQoXCIuY29sbGVjdGlvbi1uYW1lXCIpLmFkZCh0aGlzLiQoXCIuY29sbGVjdGlvbi1uYW1lLXByb21wdFwiKSk7XG4gICAgICAgICAgICB0aGlzLiQoXCIuY29sbGVjdGlvbi1uYW1lXCIpXG4gICAgICAgICAgICAgICAgLmZvY3VzKClcbiAgICAgICAgICAgICAgICAuc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFyKSB7XG4gICAgICAgICAgICB3aGF0ID0gd2hhdCB8fCB0aGlzLiQoYC4ke1ZBTElEQVRJT05fQ0xBU1N9YCk7XG4gICAgICAgICAgICB3aGF0LnJlbW92ZUNsYXNzKFZBTElEQVRJT05fQ0xBU1MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hhdC5hZGRDbGFzcyhWQUxJREFUSU9OX0NMQVNTKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfY2hhbmdlSGlkZU9yaWdpbmFsczogZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdGhpcy5oaWRlT3JpZ2luYWxzID0gdGhpcy4kKFwiLmhpZGUtb3JpZ2luYWxzXCIpLnByb3AoXCJjaGVja2VkXCIpO1xuICAgIH0sXG5cbiAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gZm9vdGVyXG4gICAgLyoqIGhhbmRsZSBhIGNvbGxlY3Rpb24gbmFtZSBjaGFuZ2UgKi9cbiAgICBfY2hhbmdlTmFtZTogZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGlvbldhcm5pbmcoXCJuYW1lXCIsICEhdGhpcy5fZ2V0TmFtZSgpKTtcbiAgICB9LFxuXG4gICAgLyoqIGNoZWNrIGZvciBlbnRlciBrZXkgcHJlc3Mgd2hlbiBpbiB0aGUgY29sbGVjdGlvbiBuYW1lIGFuZCBzdWJtaXQgKi9cbiAgICBfbmFtZUNoZWNrRm9yRW50ZXI6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmIChldi5rZXlDb2RlID09PSAxMyAmJiAhdGhpcy5ibG9ja2luZykge1xuICAgICAgICAgICAgdGhpcy5fY2xpY2tDcmVhdGUoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogZ2V0IHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gbmFtZSAqL1xuICAgIF9nZXROYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF8uZXNjYXBlKHRoaXMuJChcIi5jb2xsZWN0aW9uLW5hbWVcIikudmFsKCkpO1xuICAgIH0sXG5cbiAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gaGVhZGVyXG4gICAgLyoqIGV4cGFuZCBoZWxwICovXG4gICAgX2NsaWNrTW9yZUhlbHA6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLiQoXCIubWFpbi1oZWxwXCIpLmFkZENsYXNzKFwiZXhwYW5kZWRcIik7XG4gICAgICAgIHRoaXMuJChcIi5tb3JlLWhlbHBcIikuaGlkZSgpO1xuICAgIH0sXG4gICAgLyoqIGNvbGxhcHNlIGhlbHAgKi9cbiAgICBfY2xpY2tMZXNzSGVscDogZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuJChcIi5tYWluLWhlbHBcIikucmVtb3ZlQ2xhc3MoXCJleHBhbmRlZFwiKTtcbiAgICAgICAgdGhpcy4kKFwiLm1vcmUtaGVscFwiKS5zaG93KCk7XG4gICAgfSxcbiAgICAvKiogdG9nZ2xlIGhlbHAgKi9cbiAgICBfdG9nZ2xlSGVscDogZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuJChcIi5tYWluLWhlbHBcIikudG9nZ2xlQ2xhc3MoXCJleHBhbmRlZFwiKTtcbiAgICAgICAgdGhpcy4kKFwiLm1vcmUtaGVscFwiKS50b2dnbGUoKTtcbiAgICB9LFxuXG4gICAgLyoqIHNob3cgYW4gYWxlcnQgb24gdGhlIHRvcCBvZiB0aGUgaW50ZXJmYWNlIGNvbnRhaW5pbmcgbWVzc2FnZSAoYWxlcnRDbGFzcyBpcyBib290c3RyYXAncyBhbGVydC0qKSAqL1xuICAgIF9zaG93QWxlcnQ6IGZ1bmN0aW9uKG1lc3NhZ2UsIGFsZXJ0Q2xhc3MpIHtcbiAgICAgICAgYWxlcnRDbGFzcyA9IGFsZXJ0Q2xhc3MgfHwgXCJhbGVydC1kYW5nZXJcIjtcbiAgICAgICAgdGhpcy4kKFwiLm1haW4taGVscFwiKS5oaWRlKCk7XG4gICAgICAgIHRoaXMuJChcIi5oZWFkZXIgLmFsZXJ0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYWxlcnQgYWxlcnQtZGlzbWlzc2FibGVcIilcbiAgICAgICAgICAgIC5hZGRDbGFzcyhhbGVydENsYXNzKVxuICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgLmZpbmQoXCIuYWxlcnQtbWVzc2FnZVwiKVxuICAgICAgICAgICAgLmh0bWwobWVzc2FnZSk7XG4gICAgfSxcbiAgICAvKiogaGlkZSB0aGUgYWxlcnRzIGF0IHRoZSB0b3AgKi9cbiAgICBfaGlkZUFsZXJ0OiBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuJChcIi5tYWluLWhlbHBcIikuc2hvdygpO1xuICAgICAgICB0aGlzLiQoXCIuaGVhZGVyIC5hbGVydFwiKS5oaWRlKCk7XG4gICAgfSxcblxuICAgIF9jYW5jZWxDcmVhdGU6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNhbmNlbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLm9uY2FuY2VsLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqIGF0dGVtcHQgdG8gY3JlYXRlIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gKi9cbiAgICBfY2xpY2tDcmVhdGU6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5fZ2V0TmFtZSgpO1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRpb25XYXJuaW5nKFwibmFtZVwiKTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5ibG9ja2luZykge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVMaXN0KG5hbWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9zZXRVcENvbW1vblNldHRpbmdzOiBmdW5jdGlvbihhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHRoaXMuaGlkZU9yaWdpbmFscyA9IGF0dHJpYnV0ZXMuZGVmYXVsdEhpZGVTb3VyY2VJdGVtcyB8fCBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqIHJlbmRlciB0aGUgZm9vdGVyLCBjb21wbGV0aW9uIGNvbnRyb2xzLCBhbmQgY2FuY2VsIGNvbnRyb2xzICovXG4gICAgX3JlbmRlckZvb3RlcjogZnVuY3Rpb24oc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyICRmb290ZXIgPSB0aGlzLiQoXCIuZm9vdGVyXCIpXG4gICAgICAgICAgICAuZW1wdHkoKVxuICAgICAgICAgICAgLmh0bWwodGhpcy50ZW1wbGF0ZXMuZm9vdGVyKCkpO1xuICAgICAgICBfLmVhY2godGhpcy5mb290ZXJTZXR0aW5ncywgKHByb3BlcnR5LCBzZWxlY3RvcikgPT4ge1xuICAgICAgICAgICAgc2VsZi4kKHNlbGVjdG9yKS5wcm9wKFwiY2hlY2tlZFwiLCBzZWxmW3Byb3BlcnR5XSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jYW5jZWwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy4kKFwiLmNhbmNlbC1jcmVhdGUuYnRuXCIpLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJGZvb3RlcjtcbiAgICB9LFxuXG4gICAgX2NyZWF0b3JUZW1wbGF0ZXM6IHtcbiAgICAgICAgbWFpbjogXy50ZW1wbGF0ZShcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImhlYWRlciBmbGV4LXJvdyBuby1mbGV4XCI+PC9kaXY+JyxcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1pZGRsZSBmbGV4LXJvdyBmbGV4LXJvdy1jb250YWluZXJcIj48L2Rpdj4nLFxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZm9vdGVyIGZsZXgtcm93IG5vLWZsZXhcIj48L2Rpdj4nXG4gICAgICAgICAgICBdLmpvaW4oXCJcIilcbiAgICAgICAgKVxuICAgIH1cbn07XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgQ29sbGVjdGlvbkNyZWF0b3JNaXhpbjogQ29sbGVjdGlvbkNyZWF0b3JNaXhpblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvY29sbGVjdGlvbi9iYXNlLWNyZWF0b3IuanMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBaEhBO0FBQ0E7QUEwSEE7QUFDQTtBQUNBO0FBREE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///109\n");

/***/ }),
/* 110 */
/*!**********************************************!*\
  !*** ./galaxy/scripts/utils/natural-sort.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// Alphanumeric/natural sort fn\nfunction naturalSort(a, b) {\n    // setup temp-scope variables for comparison evauluation\n    var re = /(-?[0-9\\.]+)/g;\n\n    var x = a.toString().toLowerCase() || \"\";\n    var y = b.toString().toLowerCase() || \"\";\n    var nC = String.fromCharCode(0);\n    var xN = x.replace(re, nC + \"$1\" + nC).split(nC);\n    var yN = y.replace(re, nC + \"$1\" + nC).split(nC);\n    var xD = new Date(x).getTime();\n    var yD = xD ? new Date(y).getTime() : null;\n    // natural sorting of dates\n    if (yD) {\n        if (xD < yD) {\n            return -1;\n        } else if (xD > yD) {\n            return 1;\n        }\n    }\n\n    // natural sorting through split numeric strings and default strings\n    var oFxNcL;\n\n    var oFyNcL;\n    for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\n        oFxNcL = parseFloat(xN[cLoc]) || xN[cLoc];\n        oFyNcL = parseFloat(yN[cLoc]) || yN[cLoc];\n        if (oFxNcL < oFyNcL) {\n            return -1;\n        } else if (oFxNcL > oFyNcL) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nexports.default = naturalSort;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL3V0aWxzL25hdHVyYWwtc29ydC5qcz80MzJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFscGhhbnVtZXJpYy9uYXR1cmFsIHNvcnQgZm5cbmZ1bmN0aW9uIG5hdHVyYWxTb3J0KGEsIGIpIHtcbiAgICAvLyBzZXR1cCB0ZW1wLXNjb3BlIHZhcmlhYmxlcyBmb3IgY29tcGFyaXNvbiBldmF1bHVhdGlvblxuICAgIHZhciByZSA9IC8oLT9bMC05XFwuXSspL2c7XG5cbiAgICB2YXIgeCA9IGEudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpIHx8IFwiXCI7XG4gICAgdmFyIHkgPSBiLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSB8fCBcIlwiO1xuICAgIHZhciBuQyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7XG4gICAgdmFyIHhOID0geC5yZXBsYWNlKHJlLCBgJHtuQ30kMSR7bkN9YCkuc3BsaXQobkMpO1xuICAgIHZhciB5TiA9IHkucmVwbGFjZShyZSwgYCR7bkN9JDEke25DfWApLnNwbGl0KG5DKTtcbiAgICB2YXIgeEQgPSBuZXcgRGF0ZSh4KS5nZXRUaW1lKCk7XG4gICAgdmFyIHlEID0geEQgPyBuZXcgRGF0ZSh5KS5nZXRUaW1lKCkgOiBudWxsO1xuICAgIC8vIG5hdHVyYWwgc29ydGluZyBvZiBkYXRlc1xuICAgIGlmICh5RCkge1xuICAgICAgICBpZiAoeEQgPCB5RCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2UgaWYgKHhEID4geUQpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gbmF0dXJhbCBzb3J0aW5nIHRocm91Z2ggc3BsaXQgbnVtZXJpYyBzdHJpbmdzIGFuZCBkZWZhdWx0IHN0cmluZ3NcbiAgICB2YXIgb0Z4TmNMO1xuXG4gICAgdmFyIG9GeU5jTDtcbiAgICBmb3IgKHZhciBjTG9jID0gMCwgbnVtUyA9IE1hdGgubWF4KHhOLmxlbmd0aCwgeU4ubGVuZ3RoKTsgY0xvYyA8IG51bVM7IGNMb2MrKykge1xuICAgICAgICBvRnhOY0wgPSBwYXJzZUZsb2F0KHhOW2NMb2NdKSB8fCB4TltjTG9jXTtcbiAgICAgICAgb0Z5TmNMID0gcGFyc2VGbG9hdCh5TltjTG9jXSkgfHwgeU5bY0xvY107XG4gICAgICAgIGlmIChvRnhOY0wgPCBvRnlOY0wpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChvRnhOY0wgPiBvRnlOY0wpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBuYXR1cmFsU29ydDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy91dGlscy9uYXR1cmFsLXNvcnQuanMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///110\n");

/***/ }),
/* 111 */
/*!*********************************************!*\
  !*** ./galaxy/scripts/ui/hoverhighlight.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _jquery = __webpack_require__(/*! jquery */ 0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\"use_strict\";\n\nvar $ = _jquery2.default;\n//=============================================================================\n\n_jquery2.default.fn.extend({\n    hoverhighlight: function $hoverhighlight(scope, color) {\n        scope = scope || \"body\";\n        if (!this.length) {\n            return this;\n        }\n\n        $(this).each(function () {\n            var $this = $(this);\n            var targetSelector = $this.data(\"target\");\n\n            if (targetSelector) {\n                $this.mouseover(function (ev) {\n                    $(targetSelector, scope).css({\n                        background: color\n                    });\n                }).mouseout(function (ev) {\n                    $(targetSelector).css({\n                        background: \"\"\n                    });\n                });\n            }\n        });\n        return this;\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL3VpL2hvdmVyaGlnaGxpZ2h0LmpzPzFiODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpRdWVyeSBmcm9tIFwianF1ZXJ5XCI7XG4oXCJ1c2Vfc3RyaWN0XCIpO1xuXG52YXIgJCA9IGpRdWVyeTtcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gICAgaG92ZXJoaWdobGlnaHQ6IGZ1bmN0aW9uICRob3ZlcmhpZ2hsaWdodChzY29wZSwgY29sb3IpIHtcbiAgICAgICAgc2NvcGUgPSBzY29wZSB8fCBcImJvZHlcIjtcbiAgICAgICAgaWYgKCF0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgICAgdmFyIHRhcmdldFNlbGVjdG9yID0gJHRoaXMuZGF0YShcInRhcmdldFwiKTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgJHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLm1vdXNlb3ZlcihldiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRhcmdldFNlbGVjdG9yLCBzY29wZSkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5tb3VzZW91dChldiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRhcmdldFNlbGVjdG9yKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL3VpL2hvdmVyaGlnaGxpZ2h0LmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQURBO0FBR0E7QUFFQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMUJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///111\n");

/***/ }),
/* 112 */
/*!********************************************************!*\
  !*** ./galaxy/scripts/mvc/tool/tool-form-composite.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _deferred = __webpack_require__(/*! utils/deferred */ 87);\n\nvar _deferred2 = _interopRequireDefault(_deferred);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nvar _formData = __webpack_require__(/*! mvc/form/form-data */ 90);\n\nvar _formData2 = _interopRequireDefault(_formData);\n\nvar _toolFormBase = __webpack_require__(/*! mvc/tool/tool-form-base */ 45);\n\nvar _toolFormBase2 = _interopRequireDefault(_toolFormBase);\n\nvar _uiModal = __webpack_require__(/*! mvc/ui/ui-modal */ 8);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _webhooks = __webpack_require__(/*! mvc/webhooks */ 34);\n\nvar _webhooks2 = _interopRequireDefault(_webhooks);\n\nvar _workflowIcons = __webpack_require__(/*! mvc/workflow/workflow-icons */ 61);\n\nvar _workflowIcons2 = _interopRequireDefault(_workflowIcons);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new _uiModal2.default.View();\n        this.model = options && options.model || new Backbone.Model(options);\n        this.deferred = new _deferred2.default();\n        this.setElement($(\"<div/>\").addClass(\"ui-form-composite\").append(this.$message = $(\"<div/>\")).append(this.$header = $(\"<div/>\")).append(this.$steps = $(\"<div/>\")));\n        $(\"body\").append(this.$el);\n        this._configure();\n        this.render();\n        $(window).resize(function () {\n            self._refresh();\n        });\n    },\n\n    /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n    _refresh: function _refresh(step_index) {\n        var margin = _.reduce(this.$el.children(), function (memo, child) {\n            return memo + $(child).outerHeight();\n        }, 0) - this.$steps.height() + 90;\n        this.$steps.css(\"height\", $(window).height() - margin);\n    },\n\n    /** Configures form/step options for each workflow step */\n    _configure: function _configure() {\n        var self = this;\n        this.forms = [];\n        this.steps = [];\n        this.links = [];\n        this.parms = [];\n        _.each(this.model.get(\"steps\"), function (step, i) {\n            Galaxy.emit.debug(\"tool-form-composite::initialize()\", i + \" : Preparing workflow step.\");\n            var icon = _workflowIcons2.default[step.step_type];\n            var title = parseInt(i + 1) + \": \" + (step.step_label || step.step_name);\n            if (step.annotation) {\n                title += \" - \" + step.annotation;\n            }\n            if (step.step_version) {\n                title += \" (Galaxy Version \" + step.step_version + \")\";\n            }\n            step = _utils2.default.merge({\n                index: i,\n                fixed_title: _.escape(title),\n                icon: icon || \"\",\n                help: null,\n                citations: null,\n                collapsible: true,\n                collapsed: i > 0 && !self._isDataStep(step),\n                sustain_version: true,\n                sustain_repeats: true,\n                sustain_conditionals: true,\n                narrow: true,\n                text_enable: \"Edit\",\n                text_disable: \"Undo\",\n                cls_enable: \"fa fa-edit\",\n                cls_disable: \"fa fa-undo\",\n                errors: step.messages,\n                initial_errors: true,\n                cls: \"ui-portlet-narrow\",\n                hide_operations: true,\n                needs_refresh: false,\n                always_refresh: step.step_type != \"tool\"\n            }, step);\n            self.steps[i] = step;\n            self.links[i] = [];\n            self.parms[i] = {};\n        });\n\n        // build linear index of step input pairs\n        _.each(this.steps, function (step, i) {\n            _formData2.default.visitInputs(step.inputs, function (input, name) {\n                self.parms[i][name] = input;\n            });\n        });\n\n        // iterate through data input modules and collect linked sub steps\n        _.each(this.steps, function (step, i) {\n            _.each(step.output_connections, function (output_connection) {\n                _.each(self.steps, function (sub_step, j) {\n                    sub_step.step_index === output_connection.input_step_index && self.links[i].push(sub_step);\n                });\n            });\n        });\n\n        // convert all connected data inputs to hidden fields with proper labels,\n        // and track the linked source step\n        _.each(this.steps, function (step, i) {\n            _.each(self.steps, function (sub_step, j) {\n                var connections_by_name = {};\n                _.each(step.output_connections, function (connection) {\n                    sub_step.step_index === connection.input_step_index && (connections_by_name[connection.input_name] = connection);\n                });\n                _.each(self.parms[j], function (input, name) {\n                    var connection = connections_by_name[name];\n                    if (connection) {\n                        input.type = \"hidden\";\n                        input.help = input.step_linked ? input.help + \", \" : \"\";\n                        input.help += \"Output dataset '\" + connection.output_name + \"' from step \" + (parseInt(i) + 1);\n                        input.step_linked = input.step_linked || [];\n                        input.step_linked.push(step);\n                    }\n                });\n            });\n        });\n\n        // identify and configure workflow parameters\n        var wp_count = 0;\n        this.wp_inputs = {};\n        function _handleWorkflowParameter(value, callback) {\n            var re = /\\$\\{(.+?)\\}/g;\n            var match;\n            while (match = re.exec(String(value))) {\n                var wp_name = match[1];\n                callback(self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                    label: wp_name,\n                    name: wp_name,\n                    type: \"text\",\n                    color: \"hsl( \" + ++wp_count * 100 + \", 70%, 30% )\",\n                    style: \"ui-form-wp-source\",\n                    links: []\n                });\n            }\n        }\n        _.each(this.steps, function (step, i) {\n            _.each(self.parms[i], function (input, name) {\n                _handleWorkflowParameter(input.value, function (wp_input) {\n                    wp_input.links.push(step);\n                    input.wp_linked = true;\n                    input.type = \"text\";\n                    input.backdrop = true;\n                    input.style = \"ui-form-wp-target\";\n                });\n            });\n            _.each(step.post_job_actions, function (pja) {\n                _.each(pja.action_arguments, function (arg) {\n                    _handleWorkflowParameter(arg, function () {});\n                });\n            });\n        });\n\n        // select fields are shown for dynamic fields if all putative data inputs are available,\n        // or if an explicit reference is specified as data_ref and available\n        _.each(this.steps, function (step, i) {\n            if (step.step_type == \"tool\") {\n                var data_resolved = true;\n                _formData2.default.visitInputs(step.inputs, function (input, name, context) {\n                    var is_runtime_value = input.value && input.value.__class__ == \"RuntimeValue\";\n                    var is_data_input = [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                    var data_ref = context[input.data_ref];\n                    input.step_linked && !self._isDataStep(input.step_linked) && (data_resolved = false);\n                    input.options && (input.options.length == 0 && !data_resolved || input.wp_linked) && (input.is_workflow = true);\n                    data_ref && (input.is_workflow = data_ref.step_linked && !self._isDataStep(data_ref.step_linked) || input.wp_linked);\n                    (is_data_input || input.value && input.value.__class__ == \"RuntimeValue\" && !input.step_linked) && (step.collapsed = false);\n                    is_runtime_value && (input.value = input.default_value);\n                    input.flavor = \"workflow\";\n                    if (!is_runtime_value && !is_data_input && input.type !== \"hidden\" && !input.wp_linked) {\n                        if (input.optional || !_utils2.default.isEmpty(input.value) && input.value !== \"\") {\n                            input.collapsible_value = input.value;\n                            input.collapsible_preview = true;\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    render: function render() {\n        var self = this;\n        this.deferred.reset();\n        this._renderHeader();\n        this._renderMessage();\n        this._renderParameters();\n        this._renderHistory();\n        this._renderResourceParameters();\n        _.each(this.steps, function (step) {\n            self._renderStep(step);\n        });\n    },\n\n    /** Render header */\n    _renderHeader: function _renderHeader() {\n        var self = this;\n        this.execute_btn = new _uiMisc2.default.Button({\n            icon: \"fa-check\",\n            title: (0, _localization2.default)(\"Run workflow\"),\n            cls: \"btn btn-primary\",\n            onclick: function onclick() {\n                self._execute();\n            }\n        });\n        this.$header.addClass(\"ui-form-header\").empty().append(new _uiMisc2.default.Label({\n            title: \"Workflow: \" + this.model.get(\"name\")\n        }).$el).append(this.execute_btn.$el);\n    },\n\n    /** Render message */\n    _renderMessage: function _renderMessage() {\n        this.$message.empty();\n        if (this.model.get(\"has_upgrade_messages\")) {\n            this.$message.append(new _uiMisc2.default.Message({\n                message: \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                status: \"warning\",\n                persistent: true,\n                fade: false\n            }).$el);\n        }\n        var step_version_changes = this.model.get(\"step_version_changes\");\n        if (step_version_changes && step_version_changes.length > 0) {\n            this.$message.append(new _uiMisc2.default.Message({\n                message: \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                status: \"warning\",\n                persistent: true,\n                fade: false\n            }).$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderParameters: function _renderParameters() {\n        var self = this;\n        this.wp_form = null;\n        if (!_.isEmpty(this.wp_inputs)) {\n            this.wp_form = new _formView2.default({\n                title: \"<b>Workflow Parameters</b>\",\n                inputs: this.wp_inputs,\n                cls: \"ui-portlet-narrow\",\n                onchange: function onchange() {\n                    _.each(self.wp_form.input_list, function (input_def, i) {\n                        _.each(input_def.links, function (step) {\n                            self._refreshStep(step);\n                        });\n                    });\n                }\n            });\n            this._append(this.$steps.empty(), this.wp_form.$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderHistory: function _renderHistory() {\n        this.history_form = new _formView2.default({\n            cls: \"ui-portlet-narrow\",\n            title: \"<b>History Options</b>\",\n            inputs: [{\n                type: \"conditional\",\n                name: \"new_history\",\n                test_param: {\n                    name: \"check\",\n                    label: \"Send results to a new history\",\n                    type: \"boolean\",\n                    value: \"false\",\n                    help: \"\"\n                },\n                cases: [{\n                    value: \"true\",\n                    inputs: [{\n                        name: \"name\",\n                        label: \"History name\",\n                        type: \"text\",\n                        value: this.model.get(\"name\")\n                    }]\n                }]\n            }]\n        });\n        this._append(this.$steps, this.history_form.$el);\n    },\n\n    /** Render Workflow Options */\n    _renderResourceParameters: function _renderResourceParameters() {\n        this.workflow_resource_parameters_form = null;\n        if (!_.isEmpty(this.model.get('workflow_resource_parameters'))) {\n            this.workflow_resource_parameters_form = new _formView2.default({\n                cls: 'ui-portlet-narrow',\n                title: '<b>Workflow Resource Options</b>',\n                inputs: this.model.get('workflow_resource_parameters')\n            });\n            this._append(this.$steps, this.workflow_resource_parameters_form.$el);\n        }\n    },\n\n    /** Render step */\n    _renderStep: function _renderStep(step) {\n        var self = this;\n        var form = null;\n        this.deferred.execute(function (promise) {\n            self.$steps.addClass(\"ui-steps\");\n            if (step.step_type == \"tool\") {\n                step.postchange = function (process, form) {\n                    var self = this;\n                    var current_state = {\n                        tool_id: step.id,\n                        tool_version: step.version,\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    form.wait(true);\n                    Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Sending current state.\", current_state);\n                    _utils2.default.request({\n                        type: \"POST\",\n                        url: Galaxy.root + \"api/tools/\" + step.id + \"/build\",\n                        data: current_state,\n                        success: function success(data) {\n                            form.update(data);\n                            form.wait(false);\n                            Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Received new model.\", data);\n                            process.resolve();\n                        },\n                        error: function error(response) {\n                            Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Refresh request failed.\", response);\n                            process.reject();\n                        }\n                    });\n                };\n                form = new _toolFormBase2.default(step);\n                if (step.post_job_actions && step.post_job_actions.length) {\n                    form.portlet.append($(\"<div/>\").addClass(\"ui-form-element-disabled\").append($(\"<div/>\").addClass(\"ui-form-title\").html(\"<b>Job Post Actions</b>\")).append($(\"<div/>\").addClass(\"ui-form-preview\").html(_.reduce(step.post_job_actions, function (memo, value) {\n                        return memo + \" \" + value.short_str;\n                    }, \"\"))));\n                }\n            } else {\n                var is_simple_input = [\"data_input\", \"data_collection_input\"].indexOf(step.step_type) != -1;\n                _.each(step.inputs, function (input) {\n                    input.flavor = \"module\";\n                    input.hide_label = is_simple_input;\n                });\n                form = new _formView2.default(_utils2.default.merge({\n                    title: step.fixed_title,\n                    onchange: function onchange() {\n                        _.each(self.links[step.index], function (link) {\n                            self._refreshStep(link);\n                        });\n                    },\n                    inputs: step.inputs && step.inputs.length > 0 ? step.inputs : [{\n                        type: \"hidden\",\n                        name: \"No options available.\",\n                        ignore: null\n                    }]\n                }, step));\n            }\n            self.forms[step.index] = form;\n            self._append(self.$steps, form.$el);\n            self._refresh();\n            step.needs_refresh && self._refreshStep(step);\n            form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n            self.show_progress && self.execute_btn.model.set({\n                wait: true,\n                wait_text: \"Preparing...\",\n                percentage: (step.index + 1) * 100.0 / self.steps.length\n            });\n            Galaxy.emit.debug(\"tool-form-composite::initialize()\", step.index + \" : Workflow step state ready.\", step);\n            setTimeout(function () {\n                promise.resolve();\n            }, 0);\n        });\n    },\n\n    /** Refreshes step values from source step values */\n    _refreshStep: function _refreshStep(step) {\n        var self = this;\n        var form = this.forms[step.index];\n        if (form) {\n            _.each(self.parms[step.index], function (input, name) {\n                if (input.step_linked || input.wp_linked) {\n                    var field = form.field_list[form.data.match(name)];\n                    if (field) {\n                        var new_value = undefined;\n                        if (input.step_linked) {\n                            new_value = { values: [] };\n                            _.each(input.step_linked, function (source_step) {\n                                if (self._isDataStep(source_step)) {\n                                    var value = self.forms[source_step.index].data.create().input;\n                                    value && _.each(value.values, function (v) {\n                                        new_value.values.push(v);\n                                    });\n                                }\n                            });\n                            if (!input.multiple && new_value.values.length > 0) {\n                                new_value = {\n                                    values: [new_value.values[0]]\n                                };\n                            }\n                        } else if (input.wp_linked) {\n                            new_value = input.value;\n                            var re = /\\$\\{(.+?)\\}/g;\n                            var match;\n                            while (match = re.exec(input.value)) {\n                                var wp_field = self.wp_form.field_list[self.wp_form.data.match(match[1])];\n                                var wp_value = wp_field && wp_field.value();\n                                if (wp_value) {\n                                    new_value = new_value.split(match[0]).join(wp_value);\n                                }\n                            }\n                        }\n                        if (new_value !== undefined) {\n                            field.value(new_value);\n                        }\n                    }\n                }\n            });\n            form.trigger(\"change\");\n        } else {\n            step.needs_refresh = true;\n        }\n    },\n\n    /** Refresh the history after job submission while form is shown */\n    _refreshHistory: function _refreshHistory() {\n        var self = this;\n        var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n        this._refresh_history && clearTimeout(this._refresh_history);\n        if (history) {\n            history.refresh().success(function () {\n                if (history.numOfUnfinishedShownContents() === 0) {\n                    self._refresh_history = setTimeout(function () {\n                        self._refreshHistory();\n                    }, history.UPDATE_DELAY);\n                }\n            });\n        }\n    },\n\n    /** Build remaining steps */\n    _execute: function _execute() {\n        var self = this;\n        this.show_progress = true;\n        this._enabled(false);\n        this.deferred.execute(function (promise) {\n            setTimeout(function () {\n                promise.resolve();\n                self._submit();\n            }, 0);\n        });\n    },\n\n    /** Validate and submit workflow */\n    _submit: function _submit() {\n        var self = this;\n        var history_form_data = this.history_form.data.create();\n        var job_def = {\n            new_history_name: history_form_data[\"new_history|name\"] ? history_form_data[\"new_history|name\"] : null,\n            history_id: !history_form_data[\"new_history|name\"] ? this.model.get(\"history_id\") : null,\n            resource_params: this.workflow_resource_parameters_form ? this.workflow_resource_parameters_form.data.create() : {},\n            replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n            parameters: {},\n            // Tool form will submit flat maps for each parameter\n            // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n            // data structures).\n            parameters_normalized: true,\n            // Tool form always wants a list of invocations back\n            // so that inputs can be batched.\n            batch: true\n        };\n        var validated = true;\n        for (var i in this.forms) {\n            var form = this.forms[i];\n            var job_inputs = form.data.create();\n            var step = self.steps[i];\n            var step_index = step.step_index;\n            form.trigger(\"reset\");\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = form.data.match(job_input_id);\n                var input_field = form.field_list[input_id];\n                var input_def = form.input_list[input_id];\n                if (!input_def.step_linked) {\n                    if (this._isDataStep(step)) {\n                        validated = input_value && input_value.values && input_value.values.length > 0;\n                    } else {\n                        validated = input_def.optional || input_def.is_workflow && input_value !== \"\" || !input_def.is_workflow && input_value !== null;\n                    }\n                    if (!validated) {\n                        form.highlight(input_id);\n                        break;\n                    }\n                    job_def.parameters[step_index] = job_def.parameters[step_index] || {};\n                    job_def.parameters[step_index][job_input_id] = job_inputs[job_input_id];\n                }\n            }\n            if (!validated) {\n                break;\n            }\n        }\n        if (!validated) {\n            self._enabled(true);\n            Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation failed.\", job_def);\n        } else {\n            Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation complete.\", job_def);\n            _utils2.default.request({\n                type: \"POST\",\n                url: Galaxy.root + \"api/workflows/\" + this.model.id + \"/invocations\",\n                data: job_def,\n                success: function success(response) {\n                    Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission successful.\", response);\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n\n                    // Show Webhook if job is running\n                    if ($.isArray(response) && response.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new _webhooks2.default.WebhookView({\n                            urlRoot: Galaxy.root + \"api/webhooks/workflow\",\n                            toolId: job_def.tool_id,\n                            toolVersion: job_def.tool_version\n                        });\n                    }\n\n                    self._refreshHistory();\n                },\n                error: function error(response) {\n                    Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission failed.\", response);\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        for (var i in self.forms) {\n                            var form = self.forms[i];\n                            var step_related_errors = response.err_data[form.model.get(\"step_index\")];\n                            if (step_related_errors) {\n                                var error_messages = form.data.matchResponse(step_related_errors);\n                                for (var input_id in error_messages) {\n                                    form.highlight(input_id, error_messages[input_id]);\n                                    input_found = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: (0, _localization2.default)(\"Workflow submission failed\"),\n                            body: self._templateError(job_def, response && response.err_msg),\n                            buttons: {\n                                Close: function Close() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                },\n                complete: function complete() {\n                    self._enabled(true);\n                }\n            });\n        }\n    },\n\n    /** Append new dom to body */\n    _append: function _append($container, $el) {\n        $container.append(\"<p/>\").append($el);\n    },\n\n    /** Set enabled/disabled state */\n    _enabled: function _enabled(enabled) {\n        this.execute_btn.model.set({\n            wait: !enabled,\n            wait_text: \"Sending...\",\n            percentage: -1\n        });\n        this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        this.history_form && this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        _.each(this.forms, function (form) {\n            form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n        });\n    },\n\n    /** Is data input module/step */\n    _isDataStep: function _isDataStep(steps) {\n        var lst = $.isArray(steps) ? steps : [steps];\n        for (var i = 0; i < lst.length; i++) {\n            var step = lst[i];\n            if (!step || !step.step_type || !step.step_type.startsWith(\"data\")) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /** Templates */\n    _templateSuccess: function _templateSuccess(response) {\n        if ($.isArray(response) && response.length > 0) {\n            return $(\"<div/>\").addClass(\"donemessagelarge\").append($(\"<p/>\").html(\"Successfully invoked workflow <b>\" + _utils2.default.sanitize(this.model.get(\"name\")) + \"</b>\" + (response.length > 1 ? \" <b>\" + response.length + \" times</b>\" : \"\") + \".\")).append($(\"<p/>\").append(\"<b/>\").text(\"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"));\n        } else {\n            return this._templateError(response, \"Invalid success response. No invocations found.\");\n        }\n    },\n\n    _templateError: function _templateError(response, err_msg) {\n        return $(\"<div/>\").addClass(\"errormessagelarge\").append($(\"<p/>\").text(\"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" + (JSON.stringify(err_msg) || \"\"))).append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\n/** This is the run workflow tool form view. */\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///112\n");

/***/ }),
/* 113 */
/*!***************************************************!*\
  !*** ./galaxy/scripts/mvc/history/copy-dialog.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, jQuery, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _uiModal = __webpack_require__(/*! mvc/ui/ui-modal */ 8);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _errorModal = __webpack_require__(/*! mvc/ui/error-modal */ 114);\n\nvar _errorModal2 = _interopRequireDefault(_errorModal);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\n/**\n * A dialog/modal that allows copying a user history or 'importing' from user\n * another. Generally called via historyCopyDialog below.\n * @type {Object}\n */\nvar CopyDialog = {\n    // language related strings/fns\n    defaultName: _.template(\"Copy of '<%- name %>'\"),\n    title: _.template((0, _localization2.default)(\"Copying history\") + \" \\\"<%- name %>\\\"\"),\n    submitLabel: (0, _localization2.default)(\"Copy\"),\n    errorMessage: (0, _localization2.default)(\"History could not be copied.\"),\n    progressive: (0, _localization2.default)(\"Copying history\"),\n    activeLabel: (0, _localization2.default)(\"Copy only the active, non-deleted datasets\"),\n    allLabel: (0, _localization2.default)(\"Copy all datasets including deleted ones\"),\n    anonWarning: (0, _localization2.default)(\"As an anonymous user, unless you login or register, you will lose your current history \") + (0, _localization2.default)(\"after copying this history. \"),\n\n    // template for modal body\n    _template: _.template([\n    //TODO: remove inline styles\n    // show a warning message for losing current to anon users\n    \"<% if( isAnon ){ %>\", '<div class=\"warningmessage\">', \"<%- anonWarning %>\", (0, _localization2.default)(\"You can\"), ' <a href=\"/user/login\">', (0, _localization2.default)(\"login here\"), \"</a> \", (0, _localization2.default)(\"or\"), \" \", ' <a href=\"/user/create\">', (0, _localization2.default)(\"register here\"), \"</a>.\", \"</div>\", \"<% } %>\", \"<form>\", '<label for=\"copy-modal-title\">', (0, _localization2.default)(\"Enter a title for the new history\"), \":\", \"</label><br />\",\n    // TODO: could use required here and the form validators\n    // NOTE: use unescaped here if escaped in the modal function below\n    '<input id=\"copy-modal-title\" class=\"form-control\" style=\"width: 100%\" value=\"<%= name %>\" />', '<p class=\"invalid-title bg-danger\" style=\"color: red; margin: 8px 0px 8px 0px; display: none\">', (0, _localization2.default)(\"Please enter a valid history title\"), \"</p>\",\n    // if allowAll, add the option to copy deleted datasets, too\n    \"<% if( allowAll ){ %>\", \"<br />\", \"<p>\", (0, _localization2.default)(\"Choose which datasets from the original history to include:\"), \"</p>\",\n    // copy non-deleted is the default\n    '<input name=\"copy-what\" type=\"radio\" id=\"copy-non-deleted\" value=\"copy-non-deleted\" ', '<% if( copyWhat === \"copy-non-deleted\" ){ print( \"checked\" ); } %>/>', '<label for=\"copy-non-deleted\"> <%- activeLabel %></label>', \"<br />\", '<input name=\"copy-what\" type=\"radio\" id=\"copy-all\" value=\"copy-all\" ', '<% if( copyWhat === \"copy-all\" ){ print( \"checked\" ); } %>/>', '<label for=\"copy-all\"> <%- allLabel %></label>', \"<% } %>\", \"</form>\"].join(\"\")),\n\n    // empty modal body and let the user know the copy is happening\n    _showAjaxIndicator: function _showAjaxIndicator() {\n        var indicator = \"<p><span class=\\\"fa fa-spinner fa-spin\\\"></span> \" + this.progressive + \"...</p>\";\n        this.modal.$(\".modal-body\").empty().append(indicator).css({ \"margin-top\": \"8px\" });\n    },\n\n    // (sorta) public interface - display the modal, render the form, and potentially copy the history\n    // returns a jQuery.Deferred done->history copied, fail->user cancelled\n    dialog: function _dialog(modal, history, options) {\n        options = options || {};\n\n        var dialog = this;\n        var deferred = jQuery.Deferred();\n\n        var // TODO: getting a little byzantine here\n        defaultCopyNameFn = options.nameFn || this.defaultName;\n\n        var defaultCopyName = defaultCopyNameFn({\n            name: history.get(\"name\")\n        });\n\n        var // TODO: these two might be simpler as one 3 state option (all,active,no-choice)\n        defaultCopyWhat = options.allDatasets ? \"copy-all\" : \"copy-non-deleted\";\n\n        var allowAll = !_.isUndefined(options.allowAll) ? options.allowAll : true;\n\n        var autoClose = !_.isUndefined(options.autoClose) ? options.autoClose : true;\n\n        this.modal = modal;\n\n        // validate the name and copy if good\n        function checkNameAndCopy() {\n            var name = modal.$(\"#copy-modal-title\").val();\n            if (!name) {\n                modal.$(\".invalid-title\").show();\n                return;\n            }\n            // get further settings, shut down and indicate the ajax call, then hide and resolve/reject\n            var copyAllDatasets = modal.$('input[name=\"copy-what\"]:checked').val() === \"copy-all\";\n            modal.$(\"button\").prop(\"disabled\", true);\n            dialog._showAjaxIndicator();\n            history.copy(true, name, copyAllDatasets).done(function (response) {\n                deferred.resolve(response);\n            }).fail(function (xhr, status, message) {\n                var options = {\n                    name: name,\n                    copyAllDatasets: copyAllDatasets\n                };\n                _errorModal2.default.ajaxErrorModal(history, xhr, options, dialog.errorMessage);\n                deferred.rejectWith(deferred, arguments);\n            }).done(function () {\n                if (autoClose) {\n                    modal.hide();\n                }\n            });\n        }\n\n        var originalClosingCallback = options.closing_callback;\n        modal.show(_.extend(options, {\n            title: this.title({ name: history.get(\"name\") }),\n            body: $(dialog._template({\n                name: defaultCopyName,\n                isAnon: Galaxy.user.isAnonymous(),\n                allowAll: allowAll,\n                copyWhat: defaultCopyWhat,\n                activeLabel: this.activeLabel,\n                allLabel: this.allLabel,\n                anonWarning: this.anonWarning\n            })),\n            buttons: _.object([[(0, _localization2.default)(\"Cancel\"), function () {\n                modal.hide();\n            }], [this.submitLabel, checkNameAndCopy]]),\n            height: \"auto\",\n            closing_events: true,\n            closing_callback: function _historyCopyClose(cancelled) {\n                if (cancelled) {\n                    deferred.reject({ cancelled: true });\n                }\n                if (originalClosingCallback) {\n                    originalClosingCallback(cancelled);\n                }\n            }\n        }));\n\n        // set the default dataset copy, autofocus the title, and set up for a simple return\n        modal.$(\"#copy-modal-title\").focus().select();\n        modal.$(\"#copy-modal-title\").on(\"keydown\", function (ev) {\n            if (ev.keyCode === 13) {\n                ev.preventDefault();\n                checkNameAndCopy();\n            }\n        });\n\n        return deferred;\n    }\n};\n\n//==============================================================================\n// maintain the (slight) distinction between copy and import\n/**\n * Subclass CopyDialog to use the import language.\n */\nvar ImportDialog = _.extend({}, CopyDialog, {\n    defaultName: _.template(\"imported: <%- name %>\"),\n    title: _.template((0, _localization2.default)(\"Importing history\") + \" \\\"<%- name %>\\\"\"),\n    submitLabel: (0, _localization2.default)(\"Import\"),\n    errorMessage: (0, _localization2.default)(\"History could not be imported.\"),\n    progressive: (0, _localization2.default)(\"Importing history\"),\n    activeLabel: (0, _localization2.default)(\"Import only the active, non-deleted datasets\"),\n    allLabel: (0, _localization2.default)(\"Import all datasets including deleted ones\"),\n    anonWarning: (0, _localization2.default)(\"As an anonymous user, unless you login or register, you will lose your current history \") + (0, _localization2.default)(\"after importing this history. \")\n});\n\n//==============================================================================\n/**\n * Main interface for both history import and history copy dialogs.\n * @param  {Backbone.Model} history     the history to copy\n * @param  {Object}         options     a hash\n * @return {jQuery.Deferred}            promise that fails on close and succeeds on copy\n *\n * options:\n *     (this object is also passed to the modal used to display the dialog and accepts modal options)\n *     {Function} nameFn    if defined, use this to build the default name shown to the user\n *                          (the fn is passed: {name: <original history's name>})\n *     {bool} useImport     if true, use the 'import' language (instead of Copy)\n *     {bool} allowAll      if true, allow the user to choose between copying all datasets and\n *                          only non-deleted datasets\n *     {String} allDatasets default initial checked radio button: 'copy-all' or 'copy-non-deleted',\n */\nvar historyCopyDialog = function historyCopyDialog(history, options) {\n    options = options || {};\n    // create our own modal if Galaxy doesn't have one (mako tab without use_panels)\n    var modal = window.parent.Galaxy.modal || new _uiModal2.default.View({});\n    return options.useImport ? ImportDialog.dialog(modal, history, options) : CopyDialog.dialog(modal, history, options);\n};\n\n//==============================================================================\nexports.default = historyCopyDialog;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///113\n");

/***/ }),
/* 114 */
/*!**********************************************!*\
  !*** ./galaxy/scripts/mvc/ui/error-modal.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO: toastr is another possibility - I didn't see where I might add details, tho\n\n/* ============================================================================\nError modals meant to replace the o-so-easy alerts.\n\nThese are currently styled as errormessages but use the Galaxy.modal\ninfrastructure to be shown/closed. They're capable of showing details in a\ntogglable dropdown and the details are formatted in a pre.\n\nExample:\n    errorModal( 'Heres a message', 'A Title', { some_details: 'here' });\n    errorModal( 'Heres a message' ); // no details, title is 'Error'\n\nThere are three specialized forms:\n    offlineErrorModal       a canned response for when there's no connection\n    badGatewayErrorModal    canned response for when Galaxy is restarting\n    ajaxErrorModal          plugable into any Backbone class as an\n        error event handler by accepting the error args: model, xhr, options\n\nExamples:\n    if( navigator.offLine ){ offlineErrorModal(); }\n    if( xhr.status === 502 ){ badGatewayErrorModal(); }\n    this.listenTo( this.model, 'error', ajaxErrorModal );\n\n============================================================================ */\n\nvar CONTACT_MSG = (0, _localization2.default)(\"Please contact a Galaxy administrator if the problem persists.\");\nvar DEFAULT_AJAX_ERR_MSG = (0, _localization2.default)(\"An error occurred while updating information with the server.\");\nvar DETAILS_MSG = (0, _localization2.default)(\"The following information can assist the developers in finding the source of the error:\");\n\n/** private helper that builds the modal and handles adding details */\nfunction _errorModal(message, title, details) {\n    // create and return the modal, adding details button only if needed\n    Galaxy.modal.show({\n        title: title,\n        body: message,\n        closing_events: true,\n        buttons: {\n            Ok: function Ok() {\n                Galaxy.modal.hide();\n            }\n        }\n    });\n    Galaxy.modal.$el.addClass(\"error-modal\");\n\n    if (details) {\n        Galaxy.modal.$(\".error-details\").add(Galaxy.modal.$('button:contains(\"Details\")')).remove();\n        $(\"<div/>\").addClass(\"error-details\").hide().appendTo(Galaxy.modal.$(\".modal-content\")).append([$(\"<p/>\").text(DETAILS_MSG), $(\"<pre/>\").text(JSON.stringify(details, null, \"  \"))]);\n\n        $(\"<button id=\\\"button-1\\\" class=\\\"pull-left\\\">\" + (0, _localization2.default)(\"Details\") + \"</button>\").appendTo(Galaxy.modal.$(\".buttons\")).click(function () {\n            Galaxy.modal.$(\".error-details\").toggle();\n        });\n    }\n    return Galaxy.modal;\n}\n\n/** Display a modal showing an error message but fallback to alert if there's no modal */\nfunction errorModal(message, title, details) {\n    if (!message) {\n        return;\n    }\n\n    message = (0, _localization2.default)(message);\n    title = (0, _localization2.default)(title) || (0, _localization2.default)(\"Error:\");\n    if (window.Galaxy && Galaxy.modal) {\n        return _errorModal(message, title, details);\n    }\n\n    alert(title + \"\\n\\n\" + message);\n    console.log(\"error details:\", JSON.stringify(details));\n}\n\n// ----------------------------------------------------------------------------\n/** display a modal when the user may be offline */\nfunction offlineErrorModal() {\n    return errorModal((0, _localization2.default)(\"You appear to be offline. Please check your connection and try again.\"), (0, _localization2.default)(\"Offline?\"));\n}\n\n// ----------------------------------------------------------------------------\n/** 502 messages that should be displayed when galaxy is restarting */\nfunction badGatewayErrorModal() {\n    return errorModal((0, _localization2.default)(\"Galaxy is currently unreachable. Please try again in a few minutes.\") + \" \" + CONTACT_MSG, (0, _localization2.default)(\"Cannot connect to Galaxy\"));\n}\n\n// ----------------------------------------------------------------------------\n/** display a modal (with details) about a failed Backbone ajax operation */\nfunction ajaxErrorModal(model, xhr, options, message, title) {\n    message = message || DEFAULT_AJAX_ERR_MSG;\n    message += \" \" + CONTACT_MSG;\n    title = title || (0, _localization2.default)(\"An error occurred\");\n    var details = _ajaxDetails(model, xhr, options);\n    return errorModal(message, title, details);\n}\n\n/** build details which may help debugging the ajax call */\nfunction _ajaxDetails(model, xhr, options) {\n    return {\n        //TODO: still can't manage Raven id\n        raven: _.result(window.Raven, \"lastEventId\"),\n        userAgent: navigator.userAgent,\n        onLine: navigator.onLine,\n        version: _.result(Galaxy.config, \"version_major\"),\n        xhr: _.omit(xhr, _.functions(xhr)),\n        options: _.omit(options, \"xhr\"),\n        // add ajax data from Galaxy object cache\n        url: _.result(Galaxy.lastAjax, \"url\"),\n        data: _.result(Galaxy.lastAjax, \"data\"),\n        // backbone stuff (auto-redacting email for user)\n        model: _.result(model, \"toJSON\", \"\" + model),\n        user: _.omit(_.result(Galaxy.user, \"toJSON\"), \"email\")\n    };\n}\n\n//=============================================================================\nexports.default = {\n    errorModal: errorModal,\n    offlineErrorModal: offlineErrorModal,\n    badGatewayErrorModal: badGatewayErrorModal,\n    ajaxErrorModal: ajaxErrorModal\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///114\n");

/***/ }),
/* 115 */
/*!****************************************************************!*\
  !*** ./galaxy/scripts/mvc/base/controlled-fetch-collection.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _underscore = __webpack_require__(/*! libs/underscore */ 1);\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _backbone = __webpack_require__(/*! libs/backbone */ 2);\n\nvar Backbone = _interopRequireWildcard(_backbone);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n//=============================================================================\n/**\n * A Collection that can be limited/offset/re-ordered/filtered.\n * @type {Backbone.Collection}\n */\nvar ControlledFetchCollection = Backbone.Collection.extend({\n    /** call setOrder on initialization to build the comparator based on options */\n    initialize: function initialize(models, options) {\n        Backbone.Collection.prototype.initialize.call(this, models, options);\n        this.setOrder(options.order || this.order, { silent: true });\n    },\n\n    /** set up to track order changes and re-sort when changed */\n    _setUpListeners: function _setUpListeners() {\n        return this.on({\n            \"changed-order\": this.sort\n        });\n    },\n\n    /** override to provide order and offsets based on instance vars, set limit if passed,\n     *  and set allFetched/fire 'all-fetched' when xhr returns\n     */\n    fetch: function fetch(options) {\n        options = this._buildFetchOptions(options);\n        Galaxy.debug(\"fetch options:\", options);\n        return Backbone.Collection.prototype.fetch.call(this, options);\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function _buildFetchOptions(options) {\n        // note: we normally want options passed in to override the defaults built here\n        // so most of these fns will generate defaults\n        options = _.clone(options) || {};\n        var self = this;\n\n        // jquery ajax option; allows multiple q/qv for filters (instead of 'q[]')\n        options.traditional = true;\n\n        // options.data\n        // we keep limit, offset, etc. in options *as well as move it into data* because:\n        // - it makes fetch calling convenient to add it to a single options map (instead of as mult. args)\n        // - it allows the std. event handlers (for fetch, etc.) to have access\n        //   to the pagination options too\n        //      (i.e. this.on( 'sync', function( options ){ if( options.limit ){ ... } }))\n        // however, when we send to xhr/jquery we copy them to data also so that they become API query params\n        options.data = options.data || self._buildFetchData(options);\n        Galaxy.debug(\"data:\", options.data);\n\n        // options.data.filters --> options.data.q, options.data.qv\n        var filters = this._buildFetchFilters(options);\n        Galaxy.debug(\"filters:\", filters);\n        if (!_.isEmpty(filters)) {\n            _.extend(options.data, this._fetchFiltersToAjaxData(filters));\n        }\n        Galaxy.debug(\"data:\", options.data);\n        return options;\n    },\n\n    /** Build the dictionary to send to fetch's XHR as data */\n    _buildFetchData: function _buildFetchData(options) {\n        var defaults = {};\n        if (this.order) {\n            defaults.order = this.order;\n        }\n        return _.defaults(_.pick(options, this._fetchParams), defaults);\n    },\n\n    /** These attribute keys are valid params to fetch/API-index */\n    _fetchParams: [\n    /** model dependent string to control the order of models returned */\n    \"order\",\n    /** limit the number of models returned from a fetch */\n    \"limit\",\n    /** skip this number of models when fetching */\n    \"offset\",\n    /** what series of attributes to return (model dependent) */\n    \"view\",\n    /** individual keys to return for the models (see api/histories.index) */\n    \"keys\"],\n\n    /** add any needed filters here based on collection state */\n    _buildFetchFilters: function _buildFetchFilters(options) {\n        // override\n        return _.clone(options.filters || {});\n    },\n\n    /** Convert dictionary filters to qqv style arrays */\n    _fetchFiltersToAjaxData: function _fetchFiltersToAjaxData(filters) {\n        // return as a map so ajax.data can extend from it\n        var filterMap = {\n            q: [],\n            qv: []\n        };\n        _.each(filters, function (v, k) {\n            // don't send if filter value is empty\n            if (v === undefined || v === \"\") {\n                return;\n            }\n            // json to python\n            if (v === true) {\n                v = \"True\";\n            }\n            if (v === false) {\n                v = \"False\";\n            }\n            if (v === null) {\n                v = \"None\";\n            }\n            // map to k/v arrays (q/qv)\n            filterMap.q.push(k);\n            filterMap.qv.push(v);\n        });\n        return filterMap;\n    },\n\n    /** override to reset allFetched flag to false */\n    reset: function reset(models, options) {\n        this.allFetched = false;\n        return Backbone.Collection.prototype.reset.call(this, models, options);\n    },\n\n    // ........................................................................ order\n    order: null,\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: {\n        update_time: _baseMvc2.default.buildComparator(\"update_time\", {\n            ascending: false\n        }),\n        \"update_time-asc\": _baseMvc2.default.buildComparator(\"update_time\", {\n            ascending: true\n        }),\n        create_time: _baseMvc2.default.buildComparator(\"create_time\", {\n            ascending: false\n        }),\n        \"create_time-asc\": _baseMvc2.default.buildComparator(\"create_time\", {\n            ascending: true\n        })\n    },\n\n    /** set the order and comparator for this collection then sort with the new order\n     *  @event 'changed-order' passed the new order and the collection\n     */\n    setOrder: function setOrder(order, options) {\n        options = options || {};\n        var collection = this;\n        var comparator = collection.comparators[order];\n        if (_.isUndefined(comparator)) {\n            throw new Error(\"unknown order: \" + order);\n        }\n        // if( _.isUndefined( comparator ) ){ return; }\n        if (comparator === collection.comparator) {\n            return;\n        }\n\n        collection.order = order;\n        collection.comparator = comparator;\n\n        if (!options.silent) {\n            collection.trigger(\"changed-order\", options);\n        }\n        return collection;\n    }\n});\n\n//=============================================================================\n/**\n *\n */\nvar PaginatedCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for each page's fetch */\n    limitPerPage: 500,\n\n    initialize: function initialize(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(this, models, options);\n        this.currentPage = options.currentPage || 0;\n    },\n\n    getTotalItemCount: function getTotalItemCount() {\n        return this.length;\n    },\n\n    shouldPaginate: function shouldPaginate() {\n        return this.getTotalItemCount() >= this.limitPerPage;\n    },\n\n    getLastPage: function getLastPage() {\n        return Math.floor(this.getTotalItemCount() / this.limitPerPage);\n    },\n\n    getPageCount: function getPageCount() {\n        return this.getLastPage() + 1;\n    },\n\n    getPageLimitOffset: function getPageLimitOffset(pageNum) {\n        pageNum = this.constrainPageNum(pageNum);\n        return {\n            limit: this.limitPerPage,\n            offset: pageNum * this.limitPerPage\n        };\n    },\n\n    constrainPageNum: function constrainPageNum(pageNum) {\n        return Math.max(0, Math.min(pageNum, this.getLastPage()));\n    },\n\n    /** fetch the next page of data */\n    fetchPage: function fetchPage(pageNum, options) {\n        var self = this;\n        pageNum = self.constrainPageNum(pageNum);\n        self.currentPage = pageNum;\n        options = _.defaults(options || {}, self.getPageLimitOffset(pageNum));\n\n        self.trigger(\"fetching-more\");\n        return self.fetch(options).always(function () {\n            self.trigger(\"fetching-more-done\");\n        });\n    },\n\n    fetchCurrentPage: function fetchCurrentPage(options) {\n        return this.fetchPage(this.currentPage, options);\n    },\n\n    fetchPrevPage: function fetchPrevPage(options) {\n        return this.fetchPage(this.currentPage - 1, options);\n    },\n\n    fetchNextPage: function fetchNextPage(options) {\n        return this.fetchPage(this.currentPage + 1, options);\n    }\n});\n\n//=============================================================================\n/**\n * A Collection that will load more elements without reseting.\n */\nvar InfinitelyScrollingCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch: null,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch: 100,\n\n    initialize: function initialize(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(this, models, options);\n        /** @type {Integer} number of contents to return from the first fetch */\n        this.limitOnFirstFetch = options.limitOnFirstFetch || this.limitOnFirstFetch;\n        /** @type {Integer} limit for every fetch after the first */\n        this.limitPerFetch = options.limitPerFetch || this.limitPerFetch;\n        /** @type {Boolean} are all contents fetched? */\n        this.allFetched = false;\n        /** @type {Integer} what was the offset of the last content returned */\n        this.lastFetched = options.lastFetched || 0;\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function _buildFetchOptions(options) {\n        // options (options for backbone.fetch and jquery.ajax generally)\n        // backbone option; false here to make fetching an addititive process\n        options.remove = options.remove || false;\n        return ControlledFetchCollection.prototype._buildFetchOptions.call(this, options);\n    },\n\n    /** fetch the first 'page' of data */\n    fetchFirst: function fetchFirst(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchFirst:\", options);\n        options = options ? _.clone(options) : {};\n        this.allFetched = false;\n        this.lastFetched = 0;\n        return this.fetchMore(_.defaults(options, {\n            reset: true,\n            limit: this.limitOnFirstFetch\n        }));\n    },\n\n    /** fetch the next page of data */\n    fetchMore: function fetchMore(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchMore:\", options);\n        options = _.clone(options || {});\n        var collection = this;\n\n        Galaxy.debug(\"fetchMore, options.reset:\", options.reset);\n        if (!options.reset && collection.allFetched) {\n            return jQuery.when();\n        }\n\n        // TODO: this fails in the edge case where\n        //  the first fetch offset === limit (limit 4, offset 4, collection.length 4)\n        if (options.reset) {\n            options.offset = 0;\n        } else if (options.offset === undefined) {\n            options.offset = collection.lastFetched;\n        }\n        var limit = options.limit = options.limit || collection.limitPerFetch || null;\n        Galaxy.debug(\"fetchMore, limit:\", limit, \"offset:\", options.offset);\n\n        collection.trigger(\"fetching-more\");\n        return collection.fetch(options).always(function () {\n            collection.trigger(\"fetching-more-done\");\n        })\n        // maintain allFetched flag and trigger if all were fetched this time\n        .done(function _postFetchMore(fetchedData) {\n            var numFetched = _.isArray(fetchedData) ? fetchedData.length : 0;\n            collection.lastFetched += numFetched;\n            Galaxy.debug(\"fetchMore, lastFetched:\", collection.lastFetched);\n            // anything less than a full page means we got all there is to get\n            if (!limit || numFetched < limit) {\n                collection.allFetched = true;\n                collection.trigger(\"all-fetched\", this);\n            }\n        });\n    },\n\n    /** fetch all the collection */\n    fetchAll: function fetchAll(options) {\n        // whitelist options to prevent allowing limit/offset/filters\n        // (use vanilla fetch instead)\n        options = options || {};\n        var self = this;\n        options = _.pick(options, \"silent\");\n        options.filters = {};\n        return self.fetch(options).done(function () {\n            self.allFetched = true;\n            self.trigger(\"all-fetched\", self);\n        });\n    }\n});\n\n//==============================================================================\nexports.default = {\n    ControlledFetchCollection: ControlledFetchCollection,\n    PaginatedCollection: PaginatedCollection,\n    InfinitelyScrollingCollection: InfinitelyScrollingCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///115\n");

/***/ }),
/* 116 */
/*!*************************************************!*\
  !*** ./galaxy/scripts/mvc/history/hda-model.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _datasetModel = __webpack_require__(/*! mvc/dataset/dataset-model */ 107);\n\nvar _datasetModel2 = _interopRequireDefault(_datasetModel);\n\nvar _historyContentModel = __webpack_require__(/*! mvc/history/history-content-model */ 108);\n\nvar _historyContentModel2 = _interopRequireDefault(_historyContentModel);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar _super = _datasetModel2.default.DatasetAssociation;\n\nvar hcontentMixin = _historyContentModel2.default.HistoryContentMixin;\n/** @class (HDA) model for a Galaxy dataset contained in and related to a history.\n */\nvar HistoryDatasetAssociation = _super.extend(_baseMvc2.default.mixin(hcontentMixin,\n/** @lends HistoryDatasetAssociation.prototype */{\n    /** default attributes for a model */\n    defaults: _.extend({}, _super.prototype.defaults, hcontentMixin.defaults, {\n        history_content_type: \"dataset\",\n        model_class: \"HistoryDatasetAssociation\"\n    })\n}));\n\n//==============================================================================\nexports.default = {\n    HistoryDatasetAssociation: HistoryDatasetAssociation\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hkYS1tb2RlbC5qcz80NmU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEQVRBU0VUIGZyb20gXCJtdmMvZGF0YXNldC9kYXRhc2V0LW1vZGVsXCI7XG5pbXBvcnQgSElTVE9SWV9DT05URU5UIGZyb20gXCJtdmMvaGlzdG9yeS9oaXN0b3J5LWNvbnRlbnQtbW9kZWxcIjtcbmltcG9ydCBCQVNFX01WQyBmcm9tIFwibXZjL2Jhc2UtbXZjXCI7XG5pbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIF9zdXBlciA9IERBVEFTRVQuRGF0YXNldEFzc29jaWF0aW9uO1xuXG52YXIgaGNvbnRlbnRNaXhpbiA9IEhJU1RPUllfQ09OVEVOVC5IaXN0b3J5Q29udGVudE1peGluO1xuLyoqIEBjbGFzcyAoSERBKSBtb2RlbCBmb3IgYSBHYWxheHkgZGF0YXNldCBjb250YWluZWQgaW4gYW5kIHJlbGF0ZWQgdG8gYSBoaXN0b3J5LlxuICovXG52YXIgSGlzdG9yeURhdGFzZXRBc3NvY2lhdGlvbiA9IF9zdXBlci5leHRlbmQoXG4gICAgQkFTRV9NVkMubWl4aW4oXG4gICAgICAgIGhjb250ZW50TWl4aW4sXG4gICAgICAgIC8qKiBAbGVuZHMgSGlzdG9yeURhdGFzZXRBc3NvY2lhdGlvbi5wcm90b3R5cGUgKi8ge1xuICAgICAgICAgICAgLyoqIGRlZmF1bHQgYXR0cmlidXRlcyBmb3IgYSBtb2RlbCAqL1xuICAgICAgICAgICAgZGVmYXVsdHM6IF8uZXh0ZW5kKHt9LCBfc3VwZXIucHJvdG90eXBlLmRlZmF1bHRzLCBoY29udGVudE1peGluLmRlZmF1bHRzLCB7XG4gICAgICAgICAgICAgICAgaGlzdG9yeV9jb250ZW50X3R5cGU6IFwiZGF0YXNldFwiLFxuICAgICAgICAgICAgICAgIG1vZGVsX2NsYXNzOiBcIkhpc3RvcnlEYXRhc2V0QXNzb2NpYXRpb25cIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIClcbik7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgSGlzdG9yeURhdGFzZXRBc3NvY2lhdGlvbjogSGlzdG9yeURhdGFzZXRBc3NvY2lhdGlvblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvaGlzdG9yeS9oZGEtbW9kZWwuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUZBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFEQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///116\n");

/***/ }),
/* 117 */
/*!********************************************!*\
  !*** ./galaxy/scripts/utils/ajax-queue.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//ASSUMES: jquery\n//=============================================================================\n/** @class AjaxQueue\n *  Class that allows queueing functions that return jQuery promises (such\n *  as ajax calls). Each function waits for the previous to complete before\n *  being called\n *\n *  @constructor accepts a list of functions and automatically begins\n *      processing them\n */\nvar AjaxQueue = function () {\n    function AjaxQueue(initialFunctions) {\n        _classCallCheck(this, AjaxQueue);\n\n        /** the main deferred for the entire queue - note: also sends notifications of progress */\n        this.deferred = jQuery.Deferred();\n        /** the queue array of functions */\n        this.queue = [];\n        /** cache the response from each deferred call - error or success */\n        this.responses = [];\n        /** total number of fn's to process */\n        this.numToProcess = 0;\n        /** is the queue processing/waiting for any calls to return? */\n        this.running = false;\n\n        this.init(initialFunctions || []);\n        this.start();\n    }\n\n    /** add all fns in initialFunctions (if any) to the queue */\n\n\n    _createClass(AjaxQueue, [{\n        key: \"init\",\n        value: function init(initialFunctions) {\n            var _this = this;\n\n            initialFunctions.forEach(function (fn) {\n                _this.add(fn);\n            });\n        }\n    }, {\n        key: \"add\",\n        value: function add(fn) {\n            var _this2 = this;\n\n            var index = this.queue.length;\n            this.numToProcess += 1;\n\n            this.queue.push(function () {\n                var fnIndex = index;\n                var xhr = fn();\n                // if successful, notify using the deferred to allow tracking progress\n                xhr.done(function (response) {\n                    _this2.deferred.notify({\n                        curr: fnIndex,\n                        total: _this2.numToProcess,\n                        response: response\n                    });\n                });\n                // (regardless of previous error or success) if not last ajax call, shift and call the next\n                //  if last fn, resolve deferred\n                xhr.always(function (response) {\n                    _this2.responses.push(response);\n                    if (_this2.queue.length) {\n                        _this2.queue.shift()();\n                    } else {\n                        _this2.stop();\n                    }\n                });\n            });\n            return this;\n        }\n    }, {\n        key: \"start\",\n        value: function start() {\n            if (this.queue.length) {\n                this.running = true;\n                this.queue.shift()();\n            }\n            return this;\n        }\n\n        /** stop the queue\n         *  @param {boolean} causeFail  cause an error/fail on the main deferred\n         *  @param {String} msg         message to send when rejecting the main deferred\n         */\n\n    }, {\n        key: \"stop\",\n        value: function stop(causeFail, msg) {\n            //TODO: doesn't abort current call\n            this.running = false;\n            this.queue = [];\n            if (causeFail) {\n                //TODO: spliced args instead\n                this.deferred.reject(msg);\n            } else {\n                this.deferred.resolve(this.responses);\n            }\n            this.numToProcess = 0;\n            this.deferred = jQuery.Deferred();\n            return this;\n        }\n\n        // only a handful of the deferred interface for now - possible YAGNI\n        /** implement done from the jq deferred interface */\n\n    }, {\n        key: \"done\",\n        value: function done(fn) {\n            return this.deferred.done(fn);\n        }\n\n        /** implement fail from the jq deferred interface */\n\n    }, {\n        key: \"fail\",\n        value: function fail(fn) {\n            return this.deferred.fail(fn);\n        }\n\n        /** implement always from the jq deferred interface */\n\n    }, {\n        key: \"always\",\n        value: function always(fn) {\n            return this.deferred.always(fn);\n        }\n\n        /** implement progress from the jq deferred interface */\n\n    }, {\n        key: \"progress\",\n        value: function progress(fn) {\n            return this.deferred.progress(fn);\n        }\n\n        /** shortcut constructor / fire and forget\n         *  @returns {Deferred} the queue's main deferred\n         */\n\n    }], [{\n        key: \"create\",\n        value: function create(initialFunctions) {\n            return new AjaxQueue(initialFunctions).deferred;\n        }\n    }]);\n\n    return AjaxQueue;\n}();\n\n//=============================================================================\n/** @class NamedAjaxQueue\n *  @augments AjaxQueue\n *  Allows associating a name with a deferring fn and prevents adding deferring\n *  fns if the name has already been used. Useful to prevent build up of duplicate\n *  async calls.\n *  Both the array initialFunctions sent to constructor and any added later with\n *  add() should be objects (NOT functions) of the form:\n *  { name: some unique id,\n *    fn:   the deferring fn or ajax call }\n */\n\n\nvar NamedAjaxQueue = function (_AjaxQueue) {\n    _inherits(NamedAjaxQueue, _AjaxQueue);\n\n    function NamedAjaxQueue(initialFunctions) {\n        _classCallCheck(this, NamedAjaxQueue);\n\n        var _this3 = _possibleConstructorReturn(this, (NamedAjaxQueue.__proto__ || Object.getPrototypeOf(NamedAjaxQueue)).call(this, initialFunctions));\n\n        _this3.names = {};\n        return _this3;\n    }\n\n    /** add the obj.fn to the queue if obj.name hasn't been used before */\n\n\n    _createClass(NamedAjaxQueue, [{\n        key: \"add\",\n        value: function add(obj) {\n            if (!(obj.hasOwnProperty(\"name\") && obj.hasOwnProperty(\"fn\"))) {\n                throw new Error(\"NamedAjaxQueue.add requires an object with both \\\"name\\\" and \\\"fn\\\": \" + JSON.stringify(obj));\n            }\n            if (this.names.hasOwnProperty(obj.name)) {\n                //console.warn( 'name has been used:', obj.name );\n                return;\n            }\n            this.names[obj.name] = true;\n            return _get(NamedAjaxQueue.prototype.__proto__ || Object.getPrototypeOf(NamedAjaxQueue.prototype), \"add\", this).call(this, obj.fn);\n        }\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this.names = {};\n            return this;\n        }\n\n        /** shortcut constructor / fire and forget\n         *  @returns {Deferred} the queue's main deferred\n         */\n\n    }], [{\n        key: \"create\",\n        value: function create(initialFunctions) {\n            return new NamedAjaxQueue(initialFunctions).deferred;\n        }\n    }]);\n\n    return NamedAjaxQueue;\n}(AjaxQueue);\n\n//=============================================================================\n\n\nexports.default = {\n    AjaxQueue: AjaxQueue,\n    NamedAjaxQueue: NamedAjaxQueue\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///117\n");

/***/ }),
/* 118 */
/*!**********************************************!*\
  !*** ./galaxy/scripts/mvc/list/list-view.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _listItem = __webpack_require__(/*! mvc/list/list-item */ 65);\n\nvar _listItem2 = _interopRequireDefault(_listItem);\n\nvar _loadingIndicator = __webpack_require__(/*! ui/loading-indicator */ 256);\n\nvar _loadingIndicator2 = _interopRequireDefault(_loadingIndicator);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\n__webpack_require__(/*! ui/search-input */ 119);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"list\";\n/* ============================================================================\nTODO:\n\n============================================================================ */\n/** @class View for a list/collection of models and the sub-views of those models.\n *      Sub-views must (at least have the interface if not) inherit from ListItemView.\n *      (For a list panel that also includes some 'container' model (History->HistoryContents)\n *      use ModelWithListPanel)\n *\n *  Allows for:\n *      searching collection/sub-views\n *      selecting/multi-selecting sub-views\n *\n *  Currently used:\n *      for dataset/dataset-choice\n *      as superclass of ModelListPanel\n */\nvar ListPanel = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend(\n/** @lends ListPanel.prototype */{\n    _logNamespace: logNamespace,\n\n    /** class to use for constructing the sub-views */\n    viewClass: _listItem2.default.ListItemView,\n    /** class to used for constructing collection of sub-view models */\n    collectionClass: Backbone.Collection,\n\n    tagName: \"div\",\n    className: \"list-panel\",\n\n    /** (in ms) that jquery effects will use */\n    fxSpeed: \"fast\",\n\n    /** string to display when the collection has no contents */\n    emptyMsg: (0, _localization2.default)(\"This list is empty\"),\n    /** displayed when no items match the search terms */\n    noneFoundMsg: (0, _localization2.default)(\"No matching items found\"),\n    /** string used for search placeholder */\n    searchPlaceholder: (0, _localization2.default)(\"search\"),\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the list\n     */\n    initialize: function initialize(attributes, options) {\n        attributes = attributes || {};\n        // set the logger if requested\n        if (attributes.logger) {\n            this.logger = attributes.logger;\n        }\n        this.log(this + \".initialize:\", attributes);\n\n        // ---- instance vars\n        /** how quickly should jquery fx run? */\n        this.fxSpeed = _.has(attributes, \"fxSpeed\") ? attributes.fxSpeed : this.fxSpeed;\n\n        /** filters for displaying subviews */\n        this.filters = [];\n        /** current search terms */\n        this.searchFor = attributes.searchFor || \"\";\n\n        /** loading indicator */\n        // this.indicator = new LoadingIndicator( this.$el );\n\n        /** currently showing selectors on items? */\n        this.selecting = attributes.selecting !== undefined ? attributes.selecting : true;\n        //this.selecting = false;\n\n        /** cached selected item.model.ids to persist btwn renders */\n        this.selected = attributes.selected || [];\n        /** the last selected item.model.id */\n        this.lastSelected = null;\n\n        /** are sub-views draggable */\n        this.dragItems = attributes.dragItems || false;\n\n        /** list item view class (when passed models) */\n        this.viewClass = attributes.viewClass || this.viewClass;\n\n        /** list item views */\n        this.views = [];\n        /** list item models */\n        this.collection = attributes.collection || this._createDefaultCollection();\n\n        /** filter fns run over collection items to see if they should show in the list */\n        this.filters = attributes.filters || [];\n\n        /** override $scrollContainer fn via attributes - fn should return jq for elem to call scrollTo on */\n        this.$scrollContainer = attributes.$scrollContainer || this.$scrollContainer;\n\n        /** @type {String} generic title */\n        this.title = attributes.title || \"\";\n        /** @type {String} generic subtitle */\n        this.subtitle = attributes.subtitle || \"\";\n\n        this._setUpListeners();\n    },\n\n    // ------------------------------------------------------------------------ listeners\n    /** create any event listeners for the list */\n    _setUpListeners: function _setUpListeners() {\n        this.off();\n\n        //TODO: move errorHandler down into list-view from history-view or\n        //  pass to global error handler (Galaxy)\n        this.on({\n            error: function error(model, xhr, options, msg, details) {\n                //this.errorHandler( model, xhr, options, msg, details );\n                console.error(model, xhr, options, msg, details);\n            },\n            // show hide the loading indicator\n            loading: function loading() {\n                this._showLoadingIndicator(\"loading...\", 40);\n            },\n            \"loading-done\": function loadingDone() {\n                this._hideLoadingIndicator(40);\n            }\n        });\n\n        // throw the first render up as a diff namespace using once (for outside consumption)\n        this.once(\"rendered\", function () {\n            this.trigger(\"rendered:initial\", this);\n        });\n\n        this._setUpCollectionListeners();\n        this._setUpViewListeners();\n        return this;\n    },\n\n    /** create and return a collection for when none is initially passed */\n    _createDefaultCollection: function _createDefaultCollection() {\n        // override\n        return new this.collectionClass([]);\n    },\n\n    /** listening for collection events */\n    _setUpCollectionListeners: function _setUpCollectionListeners() {\n        this.log(this + \"._setUpCollectionListeners\", this.collection);\n        this.stopListening(this.collection);\n\n        // bubble up error events\n        this.listenTo(this.collection, {\n            error: function error(model, xhr, options, msg, details) {\n                this.trigger(\"error\", model, xhr, options, msg, details);\n            },\n            update: function update(collection, options) {\n                var changes = options.changes;\n                // console.info( collection + ', update:', changes, '\\noptions:', options );\n                // more than one: render everything\n                if (options.renderAll || changes.added.length + changes.removed.length > 1) {\n                    return this.renderItems();\n                }\n                // otherwise, let the single add/remove handlers do it\n                if (changes.added.length === 1) {\n                    return this.addItemView(_.first(changes.added), collection, options);\n                }\n                if (changes.removed.length === 1) {\n                    return this.removeItemView(_.first(changes.removed), collection, options);\n                }\n            }\n        });\n        return this;\n    },\n\n    /** listening for sub-view events that bubble up with the 'view:' prefix */\n    _setUpViewListeners: function _setUpViewListeners() {\n        this.log(this + \"._setUpViewListeners\");\n\n        // shift to select a range\n        this.on({\n            \"view:selected\": function viewSelected(view, ev) {\n                if (ev && ev.shiftKey && this.lastSelected) {\n                    var lastSelectedView = this.viewFromModelId(this.lastSelected);\n                    if (lastSelectedView) {\n                        this.selectRange(view, lastSelectedView);\n                    }\n                } else if (ev && ev.altKey && !this.selecting) {\n                    this.showSelectors();\n                }\n                this.selected.push(view.model.id);\n                this.lastSelected = view.model.id;\n            },\n\n            \"view:de-selected\": function viewDeSelected(view, ev) {\n                this.selected = _.without(this.selected, view.model.id);\n            }\n        });\n    },\n\n    // ------------------------------------------------------------------------ rendering\n    /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n    render: function render(speed) {\n        this.log(this + \".render\", speed);\n        var $newRender = this._buildNewRender();\n        this._setUpBehaviors($newRender);\n        this._queueNewRender($newRender, speed);\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el. */\n    _buildNewRender: function _buildNewRender() {\n        this.debug(this + \"(ListPanel)._buildNewRender\");\n        var $newRender = $(this.templates.el({}, this));\n        this._renderControls($newRender);\n        this._renderTitle($newRender);\n        this._renderSubtitle($newRender);\n        this._renderSearch($newRender);\n        this.renderItems($newRender);\n        return $newRender;\n    },\n\n    /** Build a temp div containing the new children for the view's $el. */\n    _renderControls: function _renderControls($newRender) {\n        this.debug(this + \"(ListPanel)._renderControls\");\n        var $controls = $(this.templates.controls({}, this));\n        $newRender.find(\".controls\").replaceWith($controls);\n        return $controls;\n    },\n\n    /** return a jQuery object containing the title DOM */\n    _renderTitle: function _renderTitle($where) {\n        //$where = $where || this.$el;\n        //$where.find( '.title' ).replaceWith( ... )\n    },\n\n    /** return a jQuery object containing the subtitle DOM (if any) */\n    _renderSubtitle: function _renderSubtitle($where) {\n        //$where = $where || this.$el;\n        //$where.find( '.title' ).replaceWith( ... )\n    },\n\n    /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n    _queueNewRender: function _queueNewRender($newRender, speed) {\n        speed = speed === undefined ? this.fxSpeed : speed;\n        var panel = this;\n        panel.log(\"_queueNewRender:\", $newRender, speed);\n\n        $(panel).queue(\"fx\", [function (next) {\n            panel.$el.fadeOut(speed, next);\n        }, function (next) {\n            panel._swapNewRender($newRender);\n            next();\n        }, function (next) {\n            panel.$el.fadeIn(speed, next);\n        }, function (next) {\n            panel.trigger(\"rendered\", panel);\n            next();\n        }]);\n    },\n\n    /** empty out the current el, move the $newRender's children in */\n    _swapNewRender: function _swapNewRender($newRender) {\n        this.$el.empty().attr(\"class\", this.className).append($newRender.children());\n        if (this.selecting) {\n            this.showSelectors(0);\n        }\n        return this;\n    },\n\n    /** Set up any behaviors, handlers (ep. plugins) that need to be called when the entire view has been built but\n     *  not attached to the page yet.\n     */\n    _setUpBehaviors: function _setUpBehaviors($where) {\n        $where = $where || this.$el;\n        this.$controls($where).find(\"[title]\").tooltip();\n        // set up the pupup for actions available when multi selecting\n        this._renderMultiselectActionMenu($where);\n        return this;\n    },\n\n    /** render a menu containing the actions available to sets of selected items */\n    _renderMultiselectActionMenu: function _renderMultiselectActionMenu($where) {\n        $where = $where || this.$el;\n        var $menu = $where.find(\".list-action-menu\");\n        var actions = this.multiselectActions();\n        if (!actions.length) {\n            return $menu.empty();\n        }\n\n        var $newMenu = $(['<div class=\"list-action-menu btn-group\">', '<button class=\"list-action-menu-btn btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">', (0, _localization2.default)(\"For all selected\"), \"...\", \"</button>\", '<ul class=\"dropdown-menu pull-right\" role=\"menu\">', \"</ul>\", \"</div>\"].join(\"\"));\n        var $actions = actions.map(function (action) {\n            var html = ['<li><a href=\"javascript:void(0);\">', action.html, \"</a></li>\"].join(\"\");\n            return $(html).click(function (ev) {\n                ev.preventDefault();\n                return action.func(ev);\n            });\n        });\n        $newMenu.find(\"ul\").append($actions);\n        $menu.replaceWith($newMenu);\n        return $newMenu;\n    },\n\n    /** return a list of plain objects used to render multiselect actions menu. Each object should have:\n     *      html: an html string used as the anchor contents\n     *      func: a function called when the anchor is clicked (passed the click event)\n     */\n    multiselectActions: function multiselectActions() {\n        return [];\n    },\n\n    // ------------------------------------------------------------------------ sub-$element shortcuts\n    /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n    $scrollContainer: function $scrollContainer($where) {\n        // override or set via attributes.$scrollContainer\n        return ($where || this.$el).parent().parent();\n    },\n    /** convenience selector for the section that displays the list controls */\n    $controls: function $controls($where) {\n        return ($where || this.$el).find(\"> .controls\");\n    },\n    /** list-items: where the subviews are contained in the view's dom */\n    $list: function $list($where) {\n        return ($where || this.$el).find(\"> .list-items\");\n    },\n    /** container where list messages are attached */\n    $messages: function $messages($where) {\n        //TODO: controls isn't really correct here (only for ModelListPanel)\n        return ($where || this.$el).find(\"> .controls .messages\");\n    },\n    /** the message displayed when no views can be shown (no views, none matching search) */\n    $emptyMessage: function $emptyMessage($where) {\n        return ($where || this.$el).find(\"> .empty-message\");\n    },\n\n    // ------------------------------------------------------------------------ hda sub-views\n    /** render the subviews for the list's collection */\n    renderItems: function renderItems($whereTo) {\n        $whereTo = $whereTo || this.$el;\n        var panel = this;\n        panel.log(this + \".renderItems\", $whereTo);\n\n        var $list = panel.$list($whereTo);\n        panel.freeViews();\n        // console.log( 'views freed' );\n        //TODO:? cache and re-use views?\n        var shownModels = panel._filterCollection();\n        // console.log( 'models filtered:', shownModels );\n\n        panel.views = shownModels.map(function (itemModel) {\n            var view = panel._createItemView(itemModel);\n            return view;\n        });\n\n        $list.empty();\n        // console.log( 'list emptied' );\n        if (panel.views.length) {\n            panel._attachItems($whereTo);\n            // console.log( 'items attached' );\n        }\n        panel._renderEmptyMessage($whereTo).toggle(!panel.views.length);\n        panel.trigger(\"views:ready\", panel.views);\n\n        // console.log( '------------------------------------------- rendering items' );\n        return panel.views;\n    },\n\n    /** Filter the collection to only those models that should be currently viewed */\n    _filterCollection: function _filterCollection() {\n        // override this\n        var panel = this;\n        return panel.collection.filter(_.bind(panel._filterItem, panel));\n    },\n\n    /** Should the model be viewable in the current state?\n     *     Checks against this.filters and this.searchFor\n     */\n    _filterItem: function _filterItem(model) {\n        // override this\n        var panel = this;\n        return _.every(panel.filters.map(function (fn) {\n            return fn.call(model);\n        })) && (!panel.searchFor || model.matchesAll(panel.searchFor));\n    },\n\n    /** Create a view for a model and set up it's listeners */\n    _createItemView: function _createItemView(model) {\n        var ViewClass = this._getItemViewClass(model);\n        var options = _.extend(this._getItemViewOptions(model), {\n            model: model\n        });\n        var view = new ViewClass(options);\n        this._setUpItemViewListeners(view);\n        return view;\n    },\n\n    /** Free a view for a model. Note: does not remove it from the DOM */\n    _destroyItemView: function _destroyItemView(view) {\n        this.stopListening(view);\n        this.views = _.without(this.views, view);\n    },\n\n    _destroyItemViews: function _destroyItemViews(view) {\n        var self = this;\n        self.views.forEach(function (v) {\n            self.stopListening(v);\n        });\n        self.views = [];\n        return self;\n    },\n\n    /** free any sub-views the list has */\n    freeViews: function freeViews() {\n        return this._destroyItemViews();\n    },\n\n    /** Get the bbone view class based on the model */\n    _getItemViewClass: function _getItemViewClass(model) {\n        // override this\n        return this.viewClass;\n    },\n\n    /** Get the options passed to the new view based on the model */\n    _getItemViewOptions: function _getItemViewOptions(model) {\n        // override this\n        return {\n            //logger      : this.logger,\n            fxSpeed: this.fxSpeed,\n            expanded: false,\n            selectable: this.selecting,\n            selected: _.contains(this.selected, model.id),\n            draggable: this.dragItems\n        };\n    },\n\n    /** Set up listeners for new models */\n    _setUpItemViewListeners: function _setUpItemViewListeners(view) {\n        var panel = this;\n        // send all events to the panel, re-namspaceing them with the view prefix\n        this.listenTo(view, \"all\", function () {\n            var args = Array.prototype.slice.call(arguments, 0);\n            args[0] = \"view:\" + args[0];\n            panel.trigger.apply(panel, args);\n        });\n\n        // drag multiple - hijack ev.setData to add all selected items\n        this.listenTo(view, \"draggable:dragstart\", function (ev, v) {\n            //TODO: set multiple drag data here\n            var json = {};\n\n            var selected = this.getSelectedModels();\n            if (selected.length) {\n                json = selected.toJSON();\n            } else {\n                json = [v.model.toJSON()];\n            }\n            ev.dataTransfer.setData(\"text\", JSON.stringify(json));\n            //ev.dataTransfer.setDragImage( v.el, 60, 60 );\n        }, this);\n\n        return panel;\n    },\n\n    /** Attach views in this.views to the model based on $whereTo */\n    _attachItems: function _attachItems($whereTo) {\n        var self = this;\n        // console.log( '_attachItems:', $whereTo, this.$list( $whereTo ) );\n        //ASSUMES: $list has been emptied\n        this.$list($whereTo).append(this.views.map(function (view) {\n            return self._renderItemView$el(view);\n        }));\n        return this;\n    },\n\n    /** get a given subview's $el (or whatever may wrap it) and return it */\n    _renderItemView$el: function _renderItemView$el(view) {\n        // useful to wrap and override\n        return view.render(0).$el;\n    },\n\n    /** render the empty/none-found message */\n    _renderEmptyMessage: function _renderEmptyMessage($whereTo) {\n        this.debug(\"_renderEmptyMessage\", $whereTo, this.searchFor);\n        var text = this.searchFor ? this.noneFoundMsg : this.emptyMsg;\n        return this.$emptyMessage($whereTo).text(text);\n    },\n\n    /** expand all item views */\n    expandAll: function expandAll() {\n        _.each(this.views, function (view) {\n            view.expand();\n        });\n    },\n\n    /** collapse all item views */\n    collapseAll: function collapseAll() {\n        _.each(this.views, function (view) {\n            view.collapse();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection/views syncing\n    /** Add a view (if the model should be viewable) to the panel */\n    addItemView: function addItemView(model, collection, options) {\n        // console.log( this + '.addItemView:', model );\n        var panel = this;\n        // get the index of the model in the list of filtered models shown by this list\n        // in order to insert the view in the proper place\n        //TODO:? potentially expensive\n        var modelIndex = panel._filterCollection().indexOf(model);\n        if (modelIndex === -1) {\n            return undefined;\n        }\n        var view = panel._createItemView(model);\n        // console.log( 'adding and rendering:', modelIndex, view.toString() );\n\n        $(view).queue(\"fx\", [function (next) {\n            // hide the empty message first if only view\n            if (panel.$emptyMessage().is(\":visible\")) {\n                panel.$emptyMessage().fadeOut(panel.fxSpeed, next);\n            } else {\n                next();\n            }\n        }, function (next) {\n            panel._attachView(view, modelIndex);\n            next();\n        }]);\n        return view;\n    },\n\n    /** internal fn to add view (to both panel.views and panel.$list) */\n    _attachView: function _attachView(view, modelIndex, useFx) {\n        // console.log( this + '._attachView:', view, modelIndex, useFx );\n        useFx = _.isUndefined(useFx) ? true : useFx;\n        modelIndex = modelIndex || 0;\n        var panel = this;\n\n        // use the modelIndex to splice into views and insert at the proper index in the DOM\n        panel.views.splice(modelIndex, 0, view);\n        panel._insertIntoListAt(modelIndex, panel._renderItemView$el(view).hide());\n\n        panel.trigger(\"view:attached\", view);\n        if (useFx) {\n            view.$el.slideDown(panel.fxSpeed, function () {\n                panel.trigger(\"view:attached:rendered\");\n            });\n        } else {\n            view.$el.show();\n            panel.trigger(\"view:attached:rendered\");\n        }\n        return view;\n    },\n\n    /** insert a jq object as a child of list-items at the specified *DOM index* */\n    _insertIntoListAt: function _insertIntoListAt(index, $what) {\n        // console.log( this + '._insertIntoListAt:', index, $what );\n        var $list = this.$list();\n        if (index === 0) {\n            $list.prepend($what);\n        } else {\n            $list.children().eq(index - 1).after($what);\n        }\n        return $what;\n    },\n\n    /** Remove a view from the panel (if found) */\n    removeItemView: function removeItemView(model, collection, options) {\n        var panel = this;\n        var view = _.find(panel.views, function (v) {\n            return v.model === model;\n        });\n        if (!view) {\n            return undefined;\n        }\n        panel.views = _.without(panel.views, view);\n        panel.trigger(\"view:removed\", view);\n\n        // potentially show the empty message if no views left\n        // use anonymous queue here - since remove can happen multiple times\n        $({}).queue(\"fx\", [function (next) {\n            view.$el.fadeOut(panel.fxSpeed, next);\n        }, function (next) {\n            view.remove();\n            panel.trigger(\"view:removed:rendered\");\n            if (!panel.views.length) {\n                panel._renderEmptyMessage().fadeIn(panel.fxSpeed, next);\n            } else {\n                next();\n            }\n        }]);\n        return view;\n    },\n\n    /** get views based on model.id */\n    viewFromModelId: function viewFromModelId(id) {\n        return _.find(this.views, function (v) {\n            return v.model.id === id;\n        });\n    },\n\n    /** get views based on model */\n    viewFromModel: function viewFromModel(model) {\n        return model ? this.viewFromModelId(model.id) : undefined;\n    },\n\n    /** get views based on model properties */\n    viewsWhereModel: function viewsWhereModel(properties) {\n        return this.views.filter(function (view) {\n            return _.isMatch(view.model.attributes, properties);\n        });\n    },\n\n    /** A range of views between (and including) viewA and viewB */\n    viewRange: function viewRange(viewA, viewB) {\n        if (viewA === viewB) {\n            return viewA ? [viewA] : [];\n        }\n\n        var indexA = this.views.indexOf(viewA);\n        var indexB = this.views.indexOf(viewB);\n\n        // handle not found\n        if (indexA === -1 || indexB === -1) {\n            if (indexA === indexB) {\n                return [];\n            }\n            return indexA === -1 ? [viewB] : [viewA];\n        }\n        // reverse if indeces are\n        //note: end inclusive\n        return indexA < indexB ? this.views.slice(indexA, indexB + 1) : this.views.slice(indexB, indexA + 1);\n    },\n\n    // ------------------------------------------------------------------------ searching\n    /** render a search input for filtering datasets shown\n     *      (see SearchableMixin in base-mvc for implementation of the actual searching)\n     *      return will start the search\n     *      esc will clear the search\n     *      clicking the clear button will clear the search\n     *      uses searchInput in ui.js\n     */\n    _renderSearch: function _renderSearch($where) {\n        $where.find(\".controls .search-input\").searchInput({\n            placeholder: this.searchPlaceholder,\n            initialVal: this.searchFor,\n            onfirstsearch: _.bind(this._firstSearch, this),\n            onsearch: _.bind(this.searchItems, this),\n            onclear: _.bind(this.clearSearch, this)\n        });\n        return $where;\n    },\n\n    /** What to do on the first search entered */\n    _firstSearch: function _firstSearch(searchFor) {\n        // override to load model details if necc.\n        this.log(\"onFirstSearch\", searchFor);\n        return this.searchItems(searchFor);\n    },\n\n    /** filter view list to those that contain the searchFor terms */\n    searchItems: function searchItems(searchFor, force) {\n        this.log(\"searchItems\", searchFor, this.searchFor, force);\n        if (!force && this.searchFor === searchFor) {\n            return this;\n        }\n        this.searchFor = searchFor;\n        this.renderItems();\n        this.trigger(\"search:searching\", searchFor, this);\n        var $search = this.$(\"> .controls .search-query\");\n        if ($search.val() !== searchFor) {\n            $search.val(searchFor);\n        }\n        return this;\n    },\n\n    /** clear the search filters and show all views that are normally shown */\n    clearSearch: function clearSearch(searchFor) {\n        //this.log( 'onSearchClear', this );\n        this.searchFor = \"\";\n        this.trigger(\"search:clear\", this);\n        this.$(\"> .controls .search-query\").val(\"\");\n        this.renderItems();\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ selection\n    /** @type Integer when the number of list item views is >= to this, don't animate selectors */\n    THROTTLE_SELECTOR_FX_AT: 20,\n\n    /** show selectors on all visible itemViews and associated controls */\n    showSelectors: function showSelectors(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        this.selecting = true;\n        this.$(\".list-actions\").slideDown(speed);\n        speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n        _.each(this.views, function (view) {\n            view.showSelector(speed);\n        });\n        //this.selected = [];\n        //this.lastSelected = null;\n    },\n\n    /** hide selectors on all visible itemViews and associated controls */\n    hideSelectors: function hideSelectors(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        this.selecting = false;\n        this.$(\".list-actions\").slideUp(speed);\n        speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n        _.each(this.views, function (view) {\n            view.hideSelector(speed);\n        });\n        this.selected = [];\n        this.lastSelected = null;\n    },\n\n    /** show or hide selectors on all visible itemViews and associated controls */\n    toggleSelectors: function toggleSelectors() {\n        if (!this.selecting) {\n            this.showSelectors();\n        } else {\n            this.hideSelectors();\n        }\n    },\n\n    /** select all visible items */\n    selectAll: function selectAll(event) {\n        _.each(this.views, function (view) {\n            view.select(event);\n        });\n    },\n\n    /** deselect all visible items */\n    deselectAll: function deselectAll(event) {\n        this.lastSelected = null;\n        _.each(this.views, function (view) {\n            view.deselect(event);\n        });\n    },\n\n    /** select a range of datasets between A and B */\n    selectRange: function selectRange(viewA, viewB) {\n        var range = this.viewRange(viewA, viewB);\n        _.each(range, function (view) {\n            view.select();\n        });\n        return range;\n    },\n\n    /** return an array of all currently selected itemViews */\n    getSelectedViews: function getSelectedViews() {\n        return _.filter(this.views, function (v) {\n            return v.selected;\n        });\n    },\n\n    /** return a collection of the models of all currenly selected items */\n    getSelectedModels: function getSelectedModels() {\n        // console.log( '(getSelectedModels)' );\n        return new this.collection.constructor(_.map(this.getSelectedViews(), function (view) {\n            return view.model;\n        }));\n    },\n\n    // ------------------------------------------------------------------------ loading indicator\n    /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n    _showLoadingIndicator: function _showLoadingIndicator(msg, speed, callback) {\n        this.debug(\"_showLoadingIndicator\", this.indicator, msg, speed, callback);\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        if (!this.indicator) {\n            this.indicator = new _loadingIndicator2.default(this.$el);\n            this.debug(\"\\t created\", this.indicator);\n        }\n        if (!this.$el.is(\":visible\")) {\n            this.indicator.show(0, callback);\n        } else {\n            this.$el.fadeOut(speed);\n            this.indicator.show(msg, speed, callback);\n        }\n    },\n\n    /** hide the loading indicator */\n    _hideLoadingIndicator: function _hideLoadingIndicator(speed, callback) {\n        this.debug(\"_hideLoadingIndicator\", this.indicator, speed, callback);\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        if (this.indicator) {\n            this.indicator.hide(speed, callback);\n        }\n    },\n\n    // ------------------------------------------------------------------------ scrolling\n    /** get the current scroll position of the panel in its parent */\n    scrollPosition: function scrollPosition() {\n        return this.$scrollContainer().scrollTop();\n    },\n\n    /** set the current scroll position of the panel in its parent */\n    scrollTo: function scrollTo(pos, speed) {\n        speed = speed || 0;\n        this.$scrollContainer().animate({ scrollTop: pos }, speed);\n        return this;\n    },\n\n    /** Scrolls the panel to the top. */\n    scrollToTop: function scrollToTop(speed) {\n        return this.scrollTo(0, speed);\n    },\n\n    /** scroll to the given view in list-items */\n    scrollToItem: function scrollToItem(view, speed) {\n        if (!view) {\n            return this;\n        }\n        return this;\n    },\n\n    /** Scrolls the panel to show the content with the given id. */\n    scrollToId: function scrollToId(id, speed) {\n        return this.scrollToItem(this.viewFromModelId(id), speed);\n    },\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events: {\n        \"click .select-all\": \"selectAll\",\n        \"click .deselect-all\": \"deselectAll\"\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** Return a string rep of the panel */\n    toString: function toString() {\n        return \"ListPanel(\" + this.collection + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListPanel.prototype.templates = function () {\n    var elTemplate = _baseMvc2.default.wrapTemplate([\n    // temp container\n    \"<div>\", '<div class=\"controls\"></div>', '<div class=\"list-items\"></div>', '<div class=\"empty-message infomessagesmall\"></div>', \"</div>\"]);\n\n    var controlsTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"controls\">', '<div class=\"title\">', '<div class=\"name\"><%- view.title %></div>', \"</div>\", '<div class=\"subtitle\"><%- view.subtitle %></div>',\n    // buttons, controls go here\n    '<div class=\"actions\"></div>',\n    // deleted msg, etc.\n    '<div class=\"messages\"></div>', '<div class=\"search\">', '<div class=\"search-input\"></div>', \"</div>\",\n\n    // show when selectors are shown\n    '<div class=\"list-actions\">', '<div class=\"btn-group\">', '<button class=\"select-all btn btn-default\"', 'data-mode=\"select\">', (0, _localization2.default)(\"All\"), \"</button>\", '<button class=\"deselect-all btn btn-default\"', 'data-mode=\"select\">', (0, _localization2.default)(\"None\"), \"</button>\", \"</div>\", '<div class=\"list-action-menu btn-group\">', \"</div>\", \"</div>\", \"</div>\"]);\n\n    return {\n        el: elTemplate,\n        controls: controlsTemplate\n    };\n}();\n\n//=============================================================================\n/** View for a model that has a sub-collection (e.g. History, DatasetCollection)\n *  Allows:\n *      the model to be reset\n *      auto assign panel.collection to panel.model[ panel.modelCollectionKey ]\n *\n */\nvar ModelListPanel = ListPanel.extend({\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey: \"contents\",\n\n    initialize: function initialize(attributes) {\n        ListPanel.prototype.initialize.call(this, attributes);\n        this.selecting = attributes.selecting !== undefined ? attributes.selecting : false;\n\n        this.setModel(this.model, attributes);\n    },\n\n    /** release/free/shutdown old models and set up panel for new models\n     *  @fires new-model with the panel as parameter\n     */\n    setModel: function setModel(model, attributes) {\n        attributes = attributes || {};\n        this.debug(this + \".setModel:\", model, attributes);\n\n        this.freeModel();\n        this.freeViews();\n\n        if (model) {\n            var oldModelId = this.model ? this.model.get(\"id\") : null;\n\n            // set up the new model with user, logger, storage, events\n            this.model = model;\n            if (this.logger) {\n                this.model.logger = this.logger;\n            }\n            this._setUpModelListeners();\n\n            //TODO: relation btwn model, collection becoming tangled here\n            // free the collection, and assign the new collection to either\n            //  the model[ modelCollectionKey ], attributes.collection, or an empty vanilla collection\n            this.stopListening(this.collection);\n            this.collection = this.model[this.modelCollectionKey] || attributes.collection || this._createDefaultCollection();\n            this._setUpCollectionListeners();\n\n            if (oldModelId && model.get(\"id\") !== oldModelId) {\n                this.trigger(\"new-model\", this);\n            }\n        }\n        return this;\n    },\n\n    /** free the current model and all listeners for it, free any views for the model */\n    freeModel: function freeModel() {\n        // stop/release the previous model, and clear cache to sub-views\n        if (this.model) {\n            this.stopListening(this.model);\n            //TODO: see base-mvc\n            //this.model.free();\n            //this.model = null;\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ listening\n    /** listening for model events */\n    _setUpModelListeners: function _setUpModelListeners() {\n        // override\n        this.log(this + \"._setUpModelListeners\", this.model);\n        // bounce model errors up to the panel\n        this.listenTo(this.model, \"error\", function () {\n            var args = Array.prototype.slice.call(arguments, 0);\n            //args.unshift( 'model:error' );\n            args.unshift(\"error\");\n            this.trigger.apply(this, args);\n        }, this);\n\n        // debugging\n        if (this.logger) {\n            this.listenTo(this.model, \"all\", function (event) {\n                this.info(this + \"(model)\", event, arguments);\n            });\n        }\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     */\n    _renderControls: function _renderControls($newRender) {\n        this.debug(this + \"(ModelListPanel)._renderControls\");\n        var json = this.model ? this.model.toJSON() : {};\n        var $controls = $(this.templates.controls(json, this));\n        $newRender.find(\".controls\").replaceWith($controls);\n        return $controls;\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** Return a string rep of the panel */\n    toString: function toString() {\n        return \"ModelListPanel(\" + this.model + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nModelListPanel.prototype.templates = function () {\n    var controlsTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"controls\">', '<div class=\"title\">',\n    //TODO: this is really the only difference - consider factoring titlebar out\n    '<div class=\"name\"><%- model.name %></div>', \"</div>\", '<div class=\"subtitle\"><%- view.subtitle %></div>', '<div class=\"actions\"></div>', '<div class=\"messages\"></div>', '<div class=\"search\">', '<div class=\"search-input\"></div>', \"</div>\", '<div class=\"list-actions\">', '<div class=\"btn-group\">', '<button class=\"select-all btn btn-default\"', 'data-mode=\"select\">', (0, _localization2.default)(\"All\"), \"</button>\", '<button class=\"deselect-all btn btn-default\"', 'data-mode=\"select\">', (0, _localization2.default)(\"None\"), \"</button>\", \"</div>\", '<div class=\"list-action-menu btn-group\">', \"</div>\", \"</div>\", \"</div>\"]);\n\n    return _.extend(_.clone(ListPanel.prototype.templates), {\n        controls: controlsTemplate\n    });\n}();\n\n//=============================================================================\nexports.default = {\n    ListPanel: ListPanel,\n    ModelListPanel: ModelListPanel\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///118\n");

/***/ }),
/* 119 */
/*!*******************************************!*\
  !*** ./galaxy/scripts/ui/search-input.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _jquery = __webpack_require__(/*! jquery */ 0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\"use_strict\";\n\nvar $ = _jquery2.default;\nvar _l = window._l || function (s) {\n    return s;\n};\n\n//TODO: consolidate with tool menu functionality, use there\n\n/** searchInput: (jQuery plugin)\n *      Creates a search input, a clear button, and loading indicator\n *      within the selected node.\n *\n *      When the user either presses return or enters some minimal number\n *      of characters, a callback is called. Pressing ESC when the input\n *      is focused will clear the input and call a separate callback.\n */\nfunction searchInput(parentNode, options) {\n    var KEYCODE_ESC = 27;\n    var KEYCODE_RETURN = 13;\n    var $parentNode = $(parentNode);\n    var firstSearch = true;\n\n    var defaults = {\n        initialVal: \"\",\n        name: \"search\",\n        placeholder: \"search\",\n        classes: \"\",\n        onclear: function onclear() {},\n        onfirstsearch: null,\n        onsearch: function onsearch(inputVal) {},\n        minSearchLen: 0,\n        escWillClear: true,\n        oninit: function oninit() {}\n    };\n\n    // .................................................................... input rendering and events\n    // visually clear the search, trigger an event, and call the callback\n    function clearSearchInput(event) {\n        var $input = $(this).parent().children(\"input\");\n        $input.val(\"\").trigger(\"searchInput.clear\").blur();\n        options.onclear();\n    }\n\n    // search for searchTerms, trigger an event, call the appropo callback (based on whether this is the first)\n    function search(event, searchTerms) {\n        if (!searchTerms) {\n            return clearSearchInput();\n        }\n        $(this).trigger(\"search.search\", searchTerms);\n        if (typeof options.onfirstsearch === \"function\" && firstSearch) {\n            firstSearch = false;\n            options.onfirstsearch(searchTerms);\n        } else {\n            options.onsearch(searchTerms);\n        }\n    }\n\n    // .................................................................... input rendering and events\n    function inputTemplate() {\n        // class search-query is bootstrap 2.3 style that now lives in base.less\n        return ['<input type=\"text\" name=\"', options.name, '\" placeholder=\"', options.placeholder, '\" ', 'class=\"search-query ', options.classes, '\" ', \"/>\"].join(\"\");\n    }\n\n    // the search input that responds to keyboard events and displays the search value\n    function $input() {\n        return $(inputTemplate())\n        // select all text on a focus\n        .focus(function (event) {\n            $(this).select();\n        })\n        // attach behaviors to esc, return if desired, search on some min len string\n        .keyup(function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            // esc key will clear if desired\n            if (event.which === KEYCODE_ESC && options.escWillClear) {\n                clearSearchInput.call(this, event);\n            } else {\n                var searchTerms = $(this).val();\n                // return key or the search string len > minSearchLen (if not 0) triggers search\n                if (event.which === KEYCODE_RETURN || options.minSearchLen && searchTerms.length >= options.minSearchLen) {\n                    search.call(this, event, searchTerms);\n                }\n            }\n        }).val(options.initialVal);\n    }\n\n    // .................................................................... clear button rendering and events\n    // a button for clearing the search bar, placed on the right hand side\n    function $clearBtn() {\n        return $(['<span class=\"search-clear fa fa-times-circle\" ', 'title=\"', _l(\"clear search (esc)\"), '\"></span>'].join(\"\")).tooltip({ placement: \"bottom\" }).click(function (event) {\n            clearSearchInput.call(this, event);\n        });\n    }\n\n    // .................................................................... loadingIndicator rendering\n    // a button for clearing the search bar, placed on the right hand side\n    function $loadingIndicator() {\n        return $(['<span class=\"search-loading fa fa-spinner fa-spin\" ', 'title=\"', _l(\"loading...\"), '\"></span>'].join(\"\")).hide().tooltip({ placement: \"bottom\" });\n    }\n\n    // .................................................................... commands\n    // visually swap the load, clear buttons\n    function toggleLoadingIndicator() {\n        $parentNode.find(\".search-loading\").toggle();\n        $parentNode.find(\".search-clear\").toggle();\n    }\n\n    // .................................................................... init\n    // string command (not constructor)\n    if (_jquery2.default.type(options) === \"string\") {\n        if (options === \"toggle-loading\") {\n            toggleLoadingIndicator();\n        }\n        return $parentNode;\n    }\n\n    // initial render\n    if (_jquery2.default.type(options) === \"object\") {\n        options = _jquery2.default.extend(true, {}, defaults, options);\n    }\n    //NOTE: prepended\n    return $parentNode.addClass(\"search-input\").prepend([$input(), $clearBtn(), $loadingIndicator()]);\n}\n\n// as jq plugin\n_jquery2.default.fn.extend({\n    searchInput: function $searchInput(options) {\n        return this.each(function () {\n            return searchInput(this, options);\n        });\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///119\n");

/***/ }),
/* 120 */
/*!**********************************************!*\
  !*** ./galaxy/scripts/mvc/history/hda-li.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _datasetLi = __webpack_require__(/*! mvc/dataset/dataset-li */ 66);\n\nvar _datasetLi2 = _interopRequireDefault(_datasetLi);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _historyItemLi = __webpack_require__(/*! mvc/history/history-item-li */ 121);\n\nvar _historyItemLi2 = _interopRequireDefault(_historyItemLi);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar _super = _datasetLi2.default.DatasetListItemView;\n/** @class Read only view for HistoryDatasetAssociation.\n *      Since there are no controls on the HDAView to hide the dataset,\n *      the primary thing this class does (currently) is override templates\n *      to render the HID.\n */\nvar HDAListItemView = _super.extend(\n/** @lends HDAListItemView.prototype */{\n    className: _super.prototype.className + \" history-content\",\n\n    initialize: function initialize(attributes, options) {\n        _super.prototype.initialize.call(this, attributes, options);\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"HDAListItemView(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nHDAListItemView.prototype.templates = function () {\n    var titleBarTemplate = function titleBarTemplate(dataset) {\n        return \"\\n        <div class=\\\"title-bar clear\\\" tabindex=\\\"0\\\">\\n            <span class=\\\"state-icon\\\"></span>\\n            <div class=\\\"title\\\">\\n                <span class=\\\"hid\\\">\" + dataset.hid + \"</span>\\n                <span class=\\\"name\\\">\" + _.escape(dataset.name) + \"</span>\\n            </div>\\n            </br>\\n            \" + _historyItemLi2.default.nametagTemplate(dataset) + \"\\n        </div>\\n    \";\n    };\n\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        hidden: _baseMvc2.default.wrapTemplate([\n        // add a warning when hidden\n        \"<% if( !dataset.visible ){ %>\", '<div class=\"hidden-msg warningmessagesmall\">', (0, _localization2.default)(\"This dataset has been hidden\"), \"</div>\", \"<% } %>\"], \"dataset\")\n    });\n\n    return _.extend({}, _super.prototype.templates, {\n        titleBar: titleBarTemplate,\n        warnings: warnings\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    HDAListItemView: HDAListItemView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hkYS1saS5qcz8zOWQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEQVRBU0VUX0xJIGZyb20gXCJtdmMvZGF0YXNldC9kYXRhc2V0LWxpXCI7XG5pbXBvcnQgQkFTRV9NVkMgZnJvbSBcIm12Yy9iYXNlLW12Y1wiO1xuaW1wb3J0IEhJU1RPUllfSVRFTV9MSSBmcm9tIFwibXZjL2hpc3RvcnkvaGlzdG9yeS1pdGVtLWxpXCI7XG5pbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIF9zdXBlciA9IERBVEFTRVRfTEkuRGF0YXNldExpc3RJdGVtVmlldztcbi8qKiBAY2xhc3MgUmVhZCBvbmx5IHZpZXcgZm9yIEhpc3RvcnlEYXRhc2V0QXNzb2NpYXRpb24uXG4gKiAgICAgIFNpbmNlIHRoZXJlIGFyZSBubyBjb250cm9scyBvbiB0aGUgSERBVmlldyB0byBoaWRlIHRoZSBkYXRhc2V0LFxuICogICAgICB0aGUgcHJpbWFyeSB0aGluZyB0aGlzIGNsYXNzIGRvZXMgKGN1cnJlbnRseSkgaXMgb3ZlcnJpZGUgdGVtcGxhdGVzXG4gKiAgICAgIHRvIHJlbmRlciB0aGUgSElELlxuICovXG52YXIgSERBTGlzdEl0ZW1WaWV3ID0gX3N1cGVyLmV4dGVuZChcbiAgICAvKiogQGxlbmRzIEhEQUxpc3RJdGVtVmlldy5wcm90b3R5cGUgKi8ge1xuICAgICAgICBjbGFzc05hbWU6IGAke19zdXBlci5wcm90b3R5cGUuY2xhc3NOYW1lfSBoaXN0b3J5LWNvbnRlbnRgLFxuXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gbWlzY1xuICAgICAgICAvKiogU3RyaW5nIHJlcHJlc2VudGF0aW9uICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbFN0cmluZyA9IHRoaXMubW9kZWwgPyBgJHt0aGlzLm1vZGVsfWAgOiBcIihubyBtb2RlbClcIjtcbiAgICAgICAgICAgIHJldHVybiBgSERBTGlzdEl0ZW1WaWV3KCR7bW9kZWxTdHJpbmd9KWA7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIFRFTVBMQVRFU1xuLyoqIHVuZGVyc2NvcmUgdGVtcGxhdGVzICovXG5IREFMaXN0SXRlbVZpZXcucHJvdG90eXBlLnRlbXBsYXRlcyA9ICgoKSA9PiB7XG4gICAgdmFyIHRpdGxlQmFyVGVtcGxhdGUgPSBkYXRhc2V0ID0+IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlLWJhciBjbGVhclwiIHRhYmluZGV4PVwiMFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0ZS1pY29uXCI+PC9zcGFuPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJoaWRcIj4ke2RhdGFzZXQuaGlkfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5hbWVcIj4ke18uZXNjYXBlKGRhdGFzZXQubmFtZSl9PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2JyPlxuICAgICAgICAgICAgJHtISVNUT1JZX0lURU1fTEkubmFtZXRhZ1RlbXBsYXRlKGRhdGFzZXQpfVxuICAgICAgICA8L2Rpdj5cbiAgICBgO1xuXG4gICAgdmFyIHdhcm5pbmdzID0gXy5leHRlbmQoe30sIF9zdXBlci5wcm90b3R5cGUudGVtcGxhdGVzLndhcm5pbmdzLCB7XG4gICAgICAgIGhpZGRlbjogQkFTRV9NVkMud3JhcFRlbXBsYXRlKFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC8vIGFkZCBhIHdhcm5pbmcgd2hlbiBoaWRkZW5cbiAgICAgICAgICAgICAgICBcIjwlIGlmKCAhZGF0YXNldC52aXNpYmxlICl7ICU+XCIsXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJoaWRkZW4tbXNnIHdhcm5pbmdtZXNzYWdlc21hbGxcIj4nLFxuICAgICAgICAgICAgICAgIF9sKFwiVGhpcyBkYXRhc2V0IGhhcyBiZWVuIGhpZGRlblwiKSxcbiAgICAgICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgICAgIFwiPCUgfSAlPlwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkYXRhc2V0XCJcbiAgICAgICAgKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBfc3VwZXIucHJvdG90eXBlLnRlbXBsYXRlcywge1xuICAgICAgICB0aXRsZUJhcjogdGl0bGVCYXJUZW1wbGF0ZSxcbiAgICAgICAgd2FybmluZ3M6IHdhcm5pbmdzXG4gICAgfSk7XG59KSgpO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEhEQUxpc3RJdGVtVmlldzogSERBTGlzdEl0ZW1WaWV3XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hkYS1saS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0FBQ0E7QUFlQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQVdBO0FBQ0E7QUFFQTtBQUNBO0FBSkE7QUFDQTtBQWFBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///120\n");

/***/ }),
/* 121 */
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-item-li.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _labelIfName(tag) {\n    if (tag.indexOf(\"name:\") == 0) {\n        return \"<span class=\\\"label label-info\\\">\" + _.escape(tag.slice(5)) + \"</span>\";\n    } else {\n        return \"\";\n    }\n}\n\nfunction nametagTemplate(historyItem) {\n    return \"<span class=\\\"nametags\\\">\" + _.sortBy(_.uniq(historyItem.tags)).map(_labelIfName).join(\"\") + \"</span>\";\n}\n\nexports.default = {\n    nametagTemplate: nametagTemplate\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hpc3RvcnktaXRlbS1saS5qcz85ZGJkIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9sYWJlbElmTmFtZSh0YWcpIHtcbiAgICBpZiAodGFnLmluZGV4T2YoXCJuYW1lOlwiKSA9PSAwKSB7XG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+JHtfLmVzY2FwZSh0YWcuc2xpY2UoNSkpfTwvc3Bhbj5gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbmFtZXRhZ1RlbXBsYXRlKGhpc3RvcnlJdGVtKSB7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cIm5hbWV0YWdzXCI+JHtfLnNvcnRCeShfLnVuaXEoaGlzdG9yeUl0ZW0udGFncykpXG4gICAgICAgIC5tYXAoX2xhYmVsSWZOYW1lKVxuICAgICAgICAuam9pbihcIlwiKX08L3NwYW4+YDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWV0YWdUZW1wbGF0ZTogbmFtZXRhZ1RlbXBsYXRlXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hpc3RvcnktaXRlbS1saS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///121\n");

/***/ }),
/* 122 */
/*!***********************************************!*\
  !*** ./galaxy/scripts/mvc/history/hdca-li.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _states = __webpack_require__(/*! mvc/dataset/states */ 16);\n\nvar _states2 = _interopRequireDefault(_states);\n\nvar _collectionLi = __webpack_require__(/*! mvc/collection/collection-li */ 67);\n\nvar _collectionLi2 = _interopRequireDefault(_collectionLi);\n\nvar _collectionView = __webpack_require__(/*! mvc/collection/collection-view */ 123);\n\nvar _collectionView2 = _interopRequireDefault(_collectionView);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _historyItemLi = __webpack_require__(/*! mvc/history/history-item-li */ 121);\n\nvar _historyItemLi2 = _interopRequireDefault(_historyItemLi);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar _super = _collectionLi2.default.DCListItemView;\n/** @class Read only view for HistoryDatasetCollectionAssociation (a dataset collection inside a history).\n */\nvar HDCAListItemView = _super.extend(\n/** @lends HDCAListItemView.prototype */{\n    className: _super.prototype.className + \" history-content\",\n\n    /** event listeners */\n    _setUpListeners: function _setUpListeners() {\n        var _this = this;\n\n        _super.prototype._setUpListeners.call(this);\n        var renderListen = function renderListen(model, options) {\n            _this.render();\n        };\n        if (this.model.jobStatesSummary) {\n            this.listenTo(this.model.jobStatesSummary, \"change\", renderListen);\n        }\n        this.listenTo(this.model, {\n            \"change:tags change:visible change:state\": renderListen\n        });\n    },\n\n    /** Override to provide the proper collections panels as the foldout */\n    _getFoldoutPanelClass: function _getFoldoutPanelClass() {\n        return _collectionView2.default.CollectionView;\n    },\n\n    /** In this override, add the state as a class for use with state-based CSS */\n    _swapNewRender: function _swapNewRender($newRender) {\n        _super.prototype._swapNewRender.call(this, $newRender);\n        //TODO: model currently has no state\n        var state;\n        var jobStatesSummary = this.model.jobStatesSummary;\n        if (jobStatesSummary) {\n            if (jobStatesSummary.new()) {\n                state = \"loading\";\n            } else if (jobStatesSummary.errored()) {\n                state = \"error\";\n            } else if (jobStatesSummary.terminal()) {\n                state = \"ok\";\n            } else if (jobStatesSummary.running()) {\n                state = \"running\";\n            } else {\n                state = \"queued\";\n            }\n        } else if (this.model.get(\"job_source_id\")) {\n            // Initial rendering - polling will fill in more details in a bit.\n            state = \"loading\";\n        } else {\n            state = this.model.get(\"populated_state\") ? _states2.default.OK : _states2.default.RUNNING;\n        }\n        this.$el.addClass(\"state-\" + state);\n        var stateDescription = this.stateDescription();\n        this.$(\".state-description\").html(stateDescription);\n        return this.$el;\n    },\n\n    stateDescription: function stateDescription() {\n        var collection = this.model;\n        var elementCount = collection.get(\"element_count\");\n        var jobStateSource = collection.get(\"job_source_type\");\n        var collectionType = this.model.get(\"collection_type\");\n        var collectionTypeDescription = _collectionView2.default.collectionTypeDescription(collection);\n        var simpleDescription = _collectionView2.default.collectionDescription(collection);\n        var jobStatesSummary = collection.jobStatesSummary;\n        if (!jobStateSource || jobStateSource == \"Job\") {\n            return simpleDescription;\n        } else if (!jobStatesSummary || !jobStatesSummary.hasDetails()) {\n            return \"\\n                    <div class=\\\"progress state-progress\\\">\\n                        <span class=\\\"note\\\">Loading job data for \" + collectionTypeDescription + \".<span class=\\\"blinking\\\">..</span></span>\\n                        <div class=\\\"progress-bar info\\\" style=\\\"width:100%\\\">\\n                    </div>\";\n        } else {\n            var isNew = jobStatesSummary.new();\n            var jobCount = isNew ? null : jobStatesSummary.jobCount();\n            if (isNew) {\n                return \"\\n                        <div class=\\\"progress state-progress\\\">\\n                            <span class=\\\"note\\\">Creating jobs.<span class=\\\"blinking\\\">..</span></span>\\n                            <div class=\\\"progress-bar info\\\" style=\\\"width:100%\\\">\\n                        </div>\";\n            } else if (jobStatesSummary.errored()) {\n                var errorCount = jobStatesSummary.numInError();\n                return \"a \" + collectionTypeDescription + \" with \" + errorCount + \" / \" + jobCount + \" jobs in error\";\n            } else if (jobStatesSummary.terminal()) {\n                return simpleDescription;\n            } else {\n                var running = jobStatesSummary.states()[\"running\"] || 0;\n                var ok = jobStatesSummary.states()[\"ok\"] || 0;\n                var okPercent = ok / (jobCount * 1.0);\n                var runningPercent = running / (jobCount * 1.0);\n                var otherPercent = 1.0 - okPercent - runningPercent;\n                var jobsStr = jobCount && jobCount > 1 ? jobCount + \" jobs\" : \"a job\";\n                return \"\\n                        <div class=\\\"progress state-progress\\\">\\n                            <span class=\\\"note\\\">\" + jobsStr + \" generating a \" + collectionTypeDescription + \"</span>\\n                            <div class=\\\"progress-bar ok\\\" style=\\\"width:\" + okPercent * 100.0 + \"%\\\"></div>\\n                            <div class=\\\"progress-bar running\\\" style=\\\"width:\" + runningPercent * 100.0 + \"%\\\"></div>\\n                            <div class=\\\"progress-bar new\\\" style=\\\"width:\" + otherPercent * 100.0 + \"%\\\">\\n                        </div>\";\n            }\n        }\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"HDCAListItemView(\" + modelString + \")\";\n    }\n});\n\n/** underscore templates */\nHDCAListItemView.prototype.templates = function () {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        hidden: function hidden(collection) {\n            collection.visible ? \"\" : \"<div class=\\\"hidden-msg warningmessagesmall\\\">\" + (0, _localization2.default)(\"This collection has been hidden\") + \"</div>\";\n        }\n    });\n\n    var titleBarTemplate = function titleBarTemplate(collection) {\n        return \"\\n        <div class=\\\"title-bar clear\\\" tabindex=\\\"0\\\">\\n            <span class=\\\"state-icon\\\"></span>\\n            <div class=\\\"title\\\">\\n                <span class=\\\"hid\\\">\" + collection.hid + \"</span>\\n                <span class=\\\"name\\\">\" + _.escape(collection.name) + \"</span>\\n            </div>\\n            <div class=\\\"state-description\\\">\\n            </div>\\n            \" + _historyItemLi2.default.nametagTemplate(collection) + \"\\n        </div>\\n    \";\n    };\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        titleBar: titleBarTemplate\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    HDCAListItemView: HDCAListItemView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///122\n");

/***/ }),
/* 123 */
/*!**********************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/collection-view.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _listView = __webpack_require__(/*! mvc/list/list-view */ 118);\n\nvar _listView2 = _interopRequireDefault(_listView);\n\nvar _collectionModel = __webpack_require__(/*! mvc/collection/collection-model */ 60);\n\nvar _collectionModel2 = _interopRequireDefault(_collectionModel);\n\nvar _collectionLi = __webpack_require__(/*! mvc/collection/collection-li */ 67);\n\nvar _collectionLi2 = _interopRequireDefault(_collectionLi);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"collections\";\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class non-editable, read-only View/Controller for a dataset collection.\n */\nvar _super = _listView2.default.ModelListPanel;\nvar CollectionView = _super.extend(\n/** @lends CollectionView.prototype */{\n    //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n    _logNamespace: logNamespace,\n\n    className: _super.prototype.className + \" dataset-collection-panel\",\n\n    /** sub view class used for datasets */\n    DatasetDCEViewClass: _collectionLi2.default.DatasetDCEListItemView,\n\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey: \"elements\",\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize: function initialize(attributes) {\n        _super.prototype.initialize.call(this, attributes);\n        this.linkTarget = attributes.linkTarget || \"_blank\";\n\n        this.hasUser = attributes.hasUser;\n        /** A stack of panels that currently cover or hide this panel */\n        this.panelStack = [];\n        /** The text of the link to go back to the panel containing this one */\n        this.parentName = attributes.parentName;\n        /** foldout or drilldown */\n        this.foldoutStyle = attributes.foldoutStyle || \"foldout\";\n        this.downloadUrl = Galaxy.root + \"api/dataset_collections/\" + this.model.attributes.id + \"/download\";\n    },\n\n    getNestedDCDCEViewClass: function getNestedDCDCEViewClass() {\n        return _collectionLi2.default.NestedDCDCEListItemView.extend({\n            foldoutPanelClass: CollectionView\n        });\n    },\n\n    _queueNewRender: function _queueNewRender($newRender, speed) {\n        speed = speed === undefined ? this.fxSpeed : speed;\n        var panel = this;\n        this.handleWarning($newRender);\n        panel.log(\"_queueNewRender:\", $newRender, speed);\n\n        // TODO: jquery@1.12 doesn't change display when the elem has display: flex\n        // this causes display: block for those elems after the use of show/hide animations\n        // animations are removed from this view for now until fixed\n        panel._swapNewRender($newRender);\n        panel.trigger(\"rendered\", panel);\n    },\n\n    handleWarning: function handleWarning($newRender) {\n        var viewLength = this.views.length;\n        var elementCount = this.model.get(\"element_count\");\n        if (elementCount && elementCount !== viewLength) {\n            var warning = (0, _localization2.default)(\"displaying only \" + viewLength + \" of \" + elementCount + \" items\");\n            var $warns = $newRender.find(\".elements-warning\");\n            $warns.html(\"<div class=\\\"warningmessagesmall\\\">\" + warning + \"</div>\");\n        }\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** In this override, use model.getVisibleContents */\n    _filterCollection: function _filterCollection() {\n        //TODO: should *not* be model.getVisibleContents - visibility is not model related\n        return this.model.getVisibleContents();\n    },\n\n    /** override to return proper view class based on element_type */\n    _getItemViewClass: function _getItemViewClass(model) {\n        //this.debug( this + '._getItemViewClass:', model );\n        //TODO: subclasses use DCEViewClass - but are currently unused - decide\n        switch (model.get(\"element_type\")) {\n            case \"hda\":\n                return this.DatasetDCEViewClass;\n            case \"dataset_collection\":\n                return this.getNestedDCDCEViewClass();\n        }\n        throw new TypeError(\"Unknown element type:\", model.get(\"element_type\"));\n    },\n\n    /** override to add link target and anon */\n    _getItemViewOptions: function _getItemViewOptions(model) {\n        var options = _super.prototype._getItemViewOptions.call(this, model);\n        return _.extend(options, {\n            linkTarget: this.linkTarget,\n            hasUser: this.hasUser,\n            //TODO: could move to only nested: list:paired\n            foldoutStyle: this.foldoutStyle\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection sub-views\n    /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n    _setUpItemViewListeners: function _setUpItemViewListeners(view) {\n        var panel = this;\n        _super.prototype._setUpItemViewListeners.call(panel, view);\n\n        // use pub-sub to: handle drilldown expansion and collapse\n        panel.listenTo(view, {\n            \"expanded:drilldown\": function expandedDrilldown(v, drilldown) {\n                this._expandDrilldownPanel(drilldown);\n            },\n            \"collapsed:drilldown\": function collapsedDrilldown(v, drilldown) {\n                this._collapseDrilldownPanel(drilldown);\n            }\n        });\n        return this;\n    },\n\n    /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n    _expandDrilldownPanel: function _expandDrilldownPanel(drilldown) {\n        this.panelStack.push(drilldown);\n        // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n        this.$(\"> .controls\").add(this.$list()).hide();\n        drilldown.parentName = this.model.get(\"name\");\n        this.$el.append(drilldown.render().$el);\n    },\n\n    /** Handle drilldown close by freeing the panel and re-rendering this panel */\n    _collapseDrilldownPanel: function _collapseDrilldownPanel(drilldown) {\n        this.panelStack.pop();\n        this.render();\n    },\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events: {\n        \"click .navigation .back\": \"close\"\n    },\n\n    /** close/remove this collection panel */\n    close: function close(event) {\n        this.remove();\n        this.trigger(\"close\");\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString: function toString() {\n        return \"CollectionView(\" + (this.model ? this.model.get(\"name\") : \"\") + \")\";\n    }\n});\n\n//------------------------------------------------------------------------------ TEMPLATES\nCollectionView.prototype.templates = function () {\n    var controlsTemplate = function controlsTemplate(collection, view) {\n        var subtitle = collectionDescription(view.model);\n        return \"\\n        <div class=\\\"controls\\\">\\n            <div class=\\\"navigation\\\">\\n            <a class=\\\"back\\\" href=\\\"javascript:void(0)\\\">\\n                <span class=\\\"fa fa-icon fa-angle-left\\\"></span>\\n                \" + (0, _localization2.default)(\"Back to \") + \"\\n                \" + _.escape(view.parentName) + \"\\n            </a>\\n            </div>\\n            <div class=\\\"title\\\">\\n                <div class=\\\"name\\\">\" + (_.escape(collection.name) || _.escape(collection.element_identifier)) + \"</div>\\n                <div class=\\\"subtitle\\\">\\n                    \" + subtitle + \"\\n                </div>\\n            </div>\\n            <div class=\\\"elements-warning\\\">\\n            </div>\\n            <div class=\\\"tags-display\\\"></div>\\n            <div class=\\\"actions\\\">\\n                <a class=\\\"download-btn icon-btn\\\" href=\\\"\" + view.downloadUrl + \"\\\"\\n                   title=\\\"\\\" download=\\\"\\\" data-original-title=\\\"Download Collection\\\">\\n                   <span class=\\\"fa fa-floppy-o\\\"></span>\\n                </a>\\n            </div>\\n        </div>\";\n    };\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        controls: controlsTemplate\n    });\n}();\n\nfunction collectionTypeDescription(collection) {\n    var collectionType = collection.get(\"collection_type\");\n    var collectionTypeDescription;\n    if (collectionType == \"list\") {\n        collectionTypeDescription = (0, _localization2.default)(\"list\");\n    } else if (collectionType == \"paired\") {\n        collectionTypeDescription = (0, _localization2.default)(\"dataset pair\");\n    } else if (collectionType == \"list:paired\") {\n        collectionTypeDescription = (0, _localization2.default)(\"list of pairs\");\n    } else {\n        collectionTypeDescription = (0, _localization2.default)(\"nested list\");\n    }\n    return collectionTypeDescription;\n}\n\nfunction collectionDescription(collection) {\n    var elementCount = collection.get(\"element_count\");\n\n    var itemsDescription = \"a \" + collectionTypeDescription(collection);\n    if (elementCount) {\n        var countDescription;\n        if (elementCount == 1) {\n            countDescription = \"with 1 item\";\n        } else if (elementCount) {\n            countDescription = \"with \" + elementCount + \" items\";\n        }\n        itemsDescription = itemsDescription + \" \" + (0, _localization2.default)(countDescription);\n    }\n    return itemsDescription;\n}\n\n//==============================================================================\nexports.default = {\n    collectionTypeDescription: collectionTypeDescription,\n    collectionDescription: collectionDescription,\n    CollectionView: CollectionView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///123\n");

/***/ }),
/* 124 */
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/dataset/dataset-li-edit.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _states = __webpack_require__(/*! mvc/dataset/states */ 16);\n\nvar _states2 = _interopRequireDefault(_states);\n\nvar _datasetLi = __webpack_require__(/*! mvc/dataset/dataset-li */ 66);\n\nvar _datasetLi2 = _interopRequireDefault(_datasetLi);\n\nvar _tag = __webpack_require__(/*! mvc/tag */ 39);\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _annotation = __webpack_require__(/*! mvc/annotation */ 125);\n\nvar _annotation2 = _interopRequireDefault(_annotation);\n\nvar _faIconButton = __webpack_require__(/*! ui/fa-icon-button */ 21);\n\nvar _faIconButton2 = _interopRequireDefault(_faIconButton);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar _super = _datasetLi2.default.DatasetListItemView;\n/** @class Editing view for DatasetAssociation.\n */\nvar DatasetListItemEdit = _super.extend(\n/** @lends DatasetListItemEdit.prototype */{\n    /** set up: options */\n    initialize: function initialize(attributes) {\n        _super.prototype.initialize.call(this, attributes);\n        this.hasUser = attributes.hasUser;\n\n        /** allow user purge of dataset files? */\n        this.purgeAllowed = attributes.purgeAllowed || false;\n\n        //TODO: move to HiddenUntilActivatedViewMixin\n        /** should the tags editor be shown or hidden initially? */\n        this.tagsEditorShown = attributes.tagsEditorShown || false;\n        /** should the tags editor be shown or hidden initially? */\n        this.annotationEditorShown = attributes.annotationEditorShown || false;\n    },\n\n    // ......................................................................... titlebar actions\n    /** In this override, add the other two primary actions: edit and delete */\n    _renderPrimaryActions: function _renderPrimaryActions() {\n        var actions = _super.prototype._renderPrimaryActions.call(this);\n        if (this.model.get(\"state\") === _states2.default.NOT_VIEWABLE) {\n            return actions;\n        }\n        // render the display, edit attr and delete icon-buttons\n        return _super.prototype._renderPrimaryActions.call(this).concat([this._renderEditButton(), this._renderDeleteButton()]);\n    },\n\n    //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n    /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n    _renderEditButton: function _renderEditButton() {\n        var self = this;\n        // don't show edit while uploading, in-accessible\n        // DO show if in error (ala previous history panel)\n        if (this.model.get(\"state\") === _states2.default.DISCARDED || !this.model.get(\"accessible\")) {\n            return null;\n        }\n        var purged = this.model.get(\"purged\");\n        var deleted = this.model.get(\"deleted\");\n\n        var editBtnData = {\n            title: (0, _localization2.default)(\"Edit attributes\"),\n            href: Galaxy.root + \"datasets/edit?dataset_id=\" + this.model.attributes.id,\n            faIcon: \"fa-pencil\",\n            classes: \"edit-btn\",\n            onclick: function onclick(ev) {\n                if (Galaxy.router) {\n                    ev.preventDefault();\n                    Galaxy.router.push(\"datasets/edit\", {\n                        dataset_id: self.model.attributes.id\n                    });\n                }\n            }\n        };\n\n        // disable if purged or deleted and explain why in the tooltip\n        if (deleted || purged) {\n            editBtnData.disabled = true;\n            if (purged) {\n                editBtnData.title = (0, _localization2.default)(\"Cannot edit attributes of datasets removed from disk\");\n            } else if (deleted) {\n                editBtnData.title = (0, _localization2.default)(\"Undelete dataset to edit attributes\");\n            }\n\n            // disable if still uploading or new\n        } else if (_.contains([_states2.default.UPLOAD, _states2.default.NEW], this.model.get(\"state\"))) {\n            editBtnData.disabled = true;\n            editBtnData.title = (0, _localization2.default)(\"This dataset is not yet editable\");\n        }\n        return (0, _faIconButton2.default)(editBtnData);\n    },\n\n    /** Render icon-button to delete this hda. */\n    _renderDeleteButton: function _renderDeleteButton() {\n        // don't show delete if...\n        if (!this.model.get(\"accessible\")) {\n            return null;\n        }\n\n        var self = this;\n        var deletedAlready = this.model.isDeletedOrPurged();\n        return (0, _faIconButton2.default)({\n            title: !deletedAlready ? (0, _localization2.default)(\"Delete\") : (0, _localization2.default)(\"Dataset is already deleted\"),\n            disabled: deletedAlready,\n            faIcon: \"fa-times\",\n            classes: \"delete-btn\",\n            onclick: function onclick() {\n                // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                self.$el.find(\".icon-btn.delete-btn\").trigger(\"mouseout\");\n                self.model[\"delete\"]();\n            }\n        });\n    },\n\n    // ......................................................................... details\n    /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n    _renderDetails: function _renderDetails() {\n        //TODO: generalize to be allow different details for each state\n        var $details = _super.prototype._renderDetails.call(this);\n\n        var state = this.model.get(\"state\");\n\n        if (!this.model.isDeletedOrPurged() && _.contains([_states2.default.OK, _states2.default.FAILED_METADATA], state)) {\n            this._renderTags($details);\n            this._renderAnnotation($details);\n            this._makeDbkeyEditLink($details);\n        }\n\n        this._setUpBehaviors($details);\n        return $details;\n    },\n\n    /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n    _renderToolHelpButton: function _renderToolHelpButton() {\n        var datasetID = this.model.attributes.dataset_id;\n        var jobID = this.model.attributes.creating_job;\n        var self = this;\n\n        var parseToolBuild = function parseToolBuild(data) {\n            var helpString = \"<div id=\\\"thdiv-\" + datasetID + \"\\\" class=\\\"toolhelp\\\">\";\n            if (data.name && data.help) {\n                helpString += \"<strong>Tool help for \" + data.name + \"</strong><hr/>\";\n                helpString += data.help;\n            } else {\n                helpString += \"<strong>Tool help is unavailable for this dataset.</strong><hr/>\";\n            }\n            helpString += \"</div>\";\n            self.$el.find(\".details\").append($.parseHTML(helpString));\n        };\n        var parseToolID = function parseToolID(data) {\n            $.ajax({\n                url: Galaxy.root + \"api/tools/\" + data.tool_id + \"/build\"\n            }).done(function (data) {\n                parseToolBuild(data);\n            }).fail(function () {\n                parseToolBuild({});\n            });\n        };\n        if (Galaxy.user.id === null) {\n            return null;\n        }\n        return (0, _faIconButton2.default)({\n            title: (0, _localization2.default)(\"Tool Help\"),\n            classes: \"icon-btn\",\n            href: \"#\",\n            faIcon: \"fa-question\",\n            onclick: function onclick() {\n                var divString = \"thdiv-\" + datasetID;\n                if (self.$el.find(\".toolhelp\").length > 0) {\n                    self.$el.find(\".toolhelp\").toggle();\n                } else {\n                    $.ajax({\n                        url: Galaxy.root + \"api/jobs/\" + jobID\n                    }).done(function (data) {\n                        parseToolID(data);\n                    }).fail(function () {\n                        console.log(\"Failed at recovering job information from the  Galaxy API for job id \\\"\" + jobID + \"\\\".\");\n                    });\n                }\n            }\n        });\n    },\n    //*************************************************************************\n\n    /** Add less commonly used actions in the details section based on state */\n    _renderSecondaryActions: function _renderSecondaryActions() {\n        var actions = _super.prototype._renderSecondaryActions.call(this);\n        switch (this.model.get(\"state\")) {\n            case _states2.default.UPLOAD:\n            case _states2.default.NOT_VIEWABLE:\n                return actions;\n            case _states2.default.ERROR:\n                // error button comes first\n                actions.unshift(this._renderErrButton());\n                return actions.concat([this._renderRerunButton(), this._renderToolHelpButton()]);\n            case _states2.default.OK:\n            case _states2.default.FAILED_METADATA:\n                return actions.concat([this._renderRerunButton(), this._renderVisualizationsButton(), this._renderToolHelpButton()]);\n        }\n        return actions.concat([this._renderRerunButton(), this._renderToolHelpButton()]);\n    },\n\n    /** Render icon-button to report an error on this dataset to the galaxy admin. */\n    _renderErrButton: function _renderErrButton() {\n        var self = this;\n        return (0, _faIconButton2.default)({\n            title: (0, _localization2.default)(\"View or report this error\"),\n            href: Galaxy.root + \"datasets/error?dataset_id=\" + this.model.attributes.id,\n            classes: \"report-error-btn\",\n            faIcon: \"fa-bug\",\n            onclick: function onclick(ev) {\n                if (Galaxy.router) {\n                    ev.preventDefault();\n                    Galaxy.router.push(\"datasets/error\", {\n                        dataset_id: self.model.attributes.id\n                    });\n                }\n            }\n        });\n    },\n\n    /** Render icon-button to re-run the job that created this dataset. */\n    _renderRerunButton: function _renderRerunButton() {\n        var creating_job = this.model.get(\"creating_job\");\n        if (this.model.get(\"rerunnable\")) {\n            return (0, _faIconButton2.default)({\n                title: (0, _localization2.default)(\"Run this job again\"),\n                href: this.model.urls.rerun,\n                classes: \"rerun-btn\",\n                target: this.linkTarget,\n                faIcon: \"fa-refresh\",\n                onclick: function onclick(ev) {\n                    if (Galaxy.router) {\n                        ev.preventDefault();\n                        Galaxy.router.push(\"/\", {\n                            job_id: creating_job\n                        });\n                    }\n                }\n            });\n        }\n    },\n\n    /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n    _renderVisualizationsButton: function _renderVisualizationsButton() {\n        //TODO: someday - lazyload visualizations\n        var visualizations = this.model.get(\"visualizations\");\n        if (this.model.isDeletedOrPurged() || !this.hasUser || !this.model.hasData() || _.isEmpty(visualizations)) {\n            return null;\n        }\n        if (!_.isObject(visualizations[0])) {\n            this.warn(\"Visualizations have been switched off\");\n            return null;\n        }\n\n        var $visualizations = $(this.templates.visualizations(visualizations, this));\n        //HACK: need to re-write those directed at galaxy_main with linkTarget\n        $visualizations.find('[target=\"galaxy_main\"]').attr(\"target\", this.linkTarget);\n        // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n        this._addScratchBookFn($visualizations.find(\".visualization-link\").addBack(\".visualization-link\"));\n        return $visualizations;\n    },\n\n    /** add scratchbook functionality to visualization links */\n    _addScratchBookFn: function _addScratchBookFn($links) {\n        var li = this;\n        $links.click(function (ev) {\n            if (Galaxy.frame && Galaxy.frame.active) {\n                Galaxy.frame.add({\n                    title: (0, _localization2.default)(\"Visualization\"),\n                    url: $(this).attr(\"href\")\n                });\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n        });\n    },\n\n    //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n    /** Render the tags list/control */\n    _renderTags: function _renderTags($where) {\n        if (!this.hasUser) {\n            return;\n        }\n        var view = this;\n        this.tagsEditor = new _tag2.default.TagsEditor({\n            model: this.model,\n            el: $where.find(\".tags-display\"),\n            onshowFirstTime: function onshowFirstTime() {\n                this.render();\n            },\n            // persist state on the hda view (and not the editor) since these are currently re-created each time\n            onshow: function onshow() {\n                view.tagsEditorShown = true;\n            },\n            onhide: function onhide() {\n                view.tagsEditorShown = false;\n            },\n            $activator: (0, _faIconButton2.default)({\n                title: (0, _localization2.default)(\"Edit dataset tags\"),\n                classes: \"tag-btn\",\n                faIcon: \"fa-tags\"\n            }).appendTo($where.find(\".actions .right\"))\n        });\n        if (this.tagsEditorShown) {\n            this.tagsEditor.toggle(true);\n        }\n    },\n\n    /** Render the annotation display/control */\n    _renderAnnotation: function _renderAnnotation($where) {\n        if (!this.hasUser) {\n            return;\n        }\n        var view = this;\n        this.annotationEditor = new _annotation2.default.AnnotationEditor({\n            model: this.model,\n            el: $where.find(\".annotation-display\"),\n            onshowFirstTime: function onshowFirstTime() {\n                this.render();\n            },\n            // persist state on the hda view (and not the editor) since these are currently re-created each time\n            onshow: function onshow() {\n                view.annotationEditorShown = true;\n            },\n            onhide: function onhide() {\n                view.annotationEditorShown = false;\n            },\n            $activator: (0, _faIconButton2.default)({\n                title: (0, _localization2.default)(\"Edit dataset annotation\"),\n                classes: \"annotate-btn\",\n                faIcon: \"fa-comment\"\n            }).appendTo($where.find(\".actions .right\"))\n        });\n        if (this.annotationEditorShown) {\n            this.annotationEditor.toggle(true);\n        }\n    },\n\n    /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n    _makeDbkeyEditLink: function _makeDbkeyEditLink($details) {\n        // make the dbkey a link to editing\n        if (this.model.get(\"metadata_dbkey\") === \"?\" && !this.model.isDeletedOrPurged()) {\n            var editableDbkey = $('<a class=\"value\">?</a>').attr(\"href\", this.model.urls.edit).attr(\"target\", \"_top\");\n            $details.find(\".dbkey .value\").replaceWith(editableDbkey);\n        }\n    },\n\n    // ......................................................................... events\n    /** event map */\n    events: _.extend(_.clone(_super.prototype.events), {\n        \"click .undelete-link\": \"_clickUndeleteLink\",\n        \"click .purge-link\": \"_clickPurgeLink\",\n\n        \"click .edit-btn\": function clickEditBtn(ev) {\n            this.trigger(\"edit\", this, ev);\n        },\n        \"click .delete-btn\": function clickDeleteBtn(ev) {\n            this.trigger(\"delete\", this, ev);\n        },\n        \"click .rerun-btn\": function clickRerunBtn(ev) {\n            this.trigger(\"rerun\", this, ev);\n        },\n        \"click .report-err-btn\": function clickReportErrBtn(ev) {\n            this.trigger(\"report-err\", this, ev);\n        },\n        \"click .visualization-btn\": function clickVisualizationBtn(ev) {\n            this.trigger(\"visualize\", this, ev);\n        },\n        \"click .dbkey a\": function clickDbkeyA(ev) {\n            this.trigger(\"edit\", this, ev);\n        }\n    }),\n\n    /** listener for item undelete (in the messages section) */\n    _clickUndeleteLink: function _clickUndeleteLink(ev) {\n        this.model.undelete();\n        return false;\n    },\n\n    /** listener for item purge (in the messages section) */\n    _clickPurgeLink: function _clickPurgeLink(ev) {\n        if (confirm((0, _localization2.default)(\"This will permanently remove the data in your dataset. Are you sure?\"))) {\n            this.model.purge();\n        }\n        return false;\n    },\n\n    // ......................................................................... misc\n    /** string rep */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"HDAEditView(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemEdit.prototype.templates = function () {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: _baseMvc2.default.wrapTemplate([\n        // in this override, provide a link to the edit page\n        '<% if( dataset.state === \"failed_metadata\" ){ %>', '<div class=\"failed_metadata-warning warningmessagesmall\">', (0, _localization2.default)(\"An error occurred setting the metadata for this dataset\"), '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"_top\">', (0, _localization2.default)(\"Set it manually or retry auto-detection\"), \"</a>\", \"</div>\", \"<% } %>\"], \"dataset\"),\n\n        deleted: _baseMvc2.default.wrapTemplate([\n        // in this override, provide links to undelete or purge the dataset\n        \"<% if( dataset.deleted && !dataset.purged ){ %>\",\n        // deleted not purged\n        '<div class=\"deleted-msg warningmessagesmall\">', (0, _localization2.default)(\"This dataset has been deleted\"), '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"Undelete it\"), \"</a>\", \"<% if( view.purgeAllowed ){ %>\", '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"Permanently remove it from disk\"), \"</a>\", \"<% } %>\", \"</div>\", \"<% } %>\"], \"dataset\")\n    });\n\n    var visualizationsTemplate = _baseMvc2.default.wrapTemplate([\"<% if( visualizations.length === 1 ){ %>\", '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"', ' target=\"<%- visualizations[0].target %>\" title=\"', (0, _localization2.default)(\"Visualize in\"), ' <%- visualizations[0].html %>\">', '<span class=\"fa fa-bar-chart-o\"></span>', \"</a>\", \"<% } else { %>\", '<div class=\"visualizations-dropdown dropdown icon-btn\">', '<a data-toggle=\"dropdown\" title=\"', (0, _localization2.default)(\"Visualize\"), '\">', '<span class=\"fa fa-bar-chart-o\"></span>', \"</a>\", '<ul class=\"dropdown-menu\" role=\"menu\">', \"<% _.each( visualizations, function( visualization ){ %>\", '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"', ' target=\"<%- visualization.target %>\">', \"<%- visualization.html %>\", \"</a></li>\", \"<% }); %>\", \"</ul>\", \"</div>\", \"<% } %>\"], \"visualizations\");\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        visualizations: visualizationsTemplate\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    DatasetListItemEdit: DatasetListItemEdit\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///124\n");

/***/ }),
/* 125 */
/*!******************************************!*\
  !*** ./galaxy/scripts/mvc/annotation.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\n__webpack_require__(/*! ui/editable-text */ 20);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// =============================================================================\n/** A view on any model that has a 'annotation' attribute\n */\nvar AnnotationEditor = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend(_baseMvc2.default.HiddenUntilActivatedViewMixin).extend({\n    tagName: \"div\",\n    className: \"annotation-display\",\n\n    /** Set up listeners, parse options */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.tooltipConfig = options.tooltipConfig || {\n            placement: \"bottom\"\n        };\n        //console.debug( this, options );\n        // only listen to the model only for changes to annotations\n        this.listenTo(this.model, \"change:annotation\", function () {\n            this.render();\n        });\n        this.hiddenUntilActivated(options.$activator, options);\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render: function render() {\n        var view = this;\n        this.$el.html(this._template());\n\n        //TODO: handle empties better\n        this.$annotation().make_text_editable({\n            use_textarea: true,\n            on_finish: function on_finish(newAnnotation) {\n                view.$annotation().text(newAnnotation);\n                view.model.save({ annotation: newAnnotation }, { silent: true }).fail(function () {\n                    view.$annotation().text(view.model.previous(\"annotation\"));\n                });\n            }\n        });\n        return this;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _template: function _template() {\n        var annotation = this.model.get(\"annotation\");\n        return [\n        //TODO: make prompt optional\n        '<label class=\"prompt\">', (0, _localization2.default)(\"Annotation\"), \"</label>\",\n        // set up initial tags by adding as CSV to input vals (necc. to init select2)\n        '<div class=\"annotation\">', _.escape(annotation), \"</div>\"].join(\"\");\n    },\n\n    /** @returns {jQuery} the main element for this view */\n    $annotation: function $annotation() {\n        return this.$el.find(\".annotation\");\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove: function remove() {\n        this.$annotation.off();\n        this.stopListening(this.model);\n        Backbone.View.prototype.remove.call(this);\n    },\n\n    /** string rep */\n    toString: function toString() {\n        return [\"AnnotationEditor(\", \"\" + this.model, \")\"].join(\"\");\n    }\n});\n// =============================================================================\nexports.default = {\n    AnnotationEditor: AnnotationEditor\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9hbm5vdGF0aW9uLmpzP2NkNDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJhc2VNVkMgZnJvbSBcIm12Yy9iYXNlLW12Y1wiO1xuaW1wb3J0IF9sIGZyb20gXCJ1dGlscy9sb2NhbGl6YXRpb25cIjtcbmltcG9ydCBcInVpL2VkaXRhYmxlLXRleHRcIjtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vKiogQSB2aWV3IG9uIGFueSBtb2RlbCB0aGF0IGhhcyBhICdhbm5vdGF0aW9uJyBhdHRyaWJ1dGVcbiAqL1xudmFyIEFubm90YXRpb25FZGl0b3IgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZChiYXNlTVZDLkxvZ2dhYmxlTWl4aW4pXG4gICAgLmV4dGVuZChiYXNlTVZDLkhpZGRlblVudGlsQWN0aXZhdGVkVmlld01peGluKVxuICAgIC5leHRlbmQoe1xuICAgICAgICB0YWdOYW1lOiBcImRpdlwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiYW5ub3RhdGlvbi1kaXNwbGF5XCIsXG5cbiAgICAgICAgLyoqIFNldCB1cCBsaXN0ZW5lcnMsIHBhcnNlIG9wdGlvbnMgKi9cbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBDb25maWcgPSBvcHRpb25zLnRvb2x0aXBDb25maWcgfHwge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudDogXCJib3R0b21cIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZyggdGhpcywgb3B0aW9ucyApO1xuICAgICAgICAgICAgLy8gb25seSBsaXN0ZW4gdG8gdGhlIG1vZGVsIG9ubHkgZm9yIGNoYW5nZXMgdG8gYW5ub3RhdGlvbnNcbiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjaGFuZ2U6YW5ub3RhdGlvblwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmhpZGRlblVudGlsQWN0aXZhdGVkKG9wdGlvbnMuJGFjdGl2YXRvciwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIEJ1aWxkIHRoZSBET00gZWxlbWVudHMsIGNhbGwgc2VsZWN0IHRvIG9uIHRoZSBjcmVhdGVkIGlucHV0LCBhbmQgc2V0IHVwIGJlaGF2aW9ycyAqL1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLl90ZW1wbGF0ZSgpKTtcblxuICAgICAgICAgICAgLy9UT0RPOiBoYW5kbGUgZW1wdGllcyBiZXR0ZXJcbiAgICAgICAgICAgIHRoaXMuJGFubm90YXRpb24oKS5tYWtlX3RleHRfZWRpdGFibGUoe1xuICAgICAgICAgICAgICAgIHVzZV90ZXh0YXJlYTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvbl9maW5pc2g6IGZ1bmN0aW9uKG5ld0Fubm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy4kYW5ub3RhdGlvbigpLnRleHQobmV3QW5ub3RhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcubW9kZWwuc2F2ZSh7IGFubm90YXRpb246IG5ld0Fubm90YXRpb24gfSwgeyBzaWxlbnQ6IHRydWUgfSkuZmFpbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LiRhbm5vdGF0aW9uKCkudGV4dCh2aWV3Lm1vZGVsLnByZXZpb3VzKFwiYW5ub3RhdGlvblwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBodG1sIHRleHQgdXNlZCB0byBidWlsZCB0aGUgdmlldydzIERPTSAqL1xuICAgICAgICBfdGVtcGxhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFubm90YXRpb24gPSB0aGlzLm1vZGVsLmdldChcImFubm90YXRpb25cIik7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vVE9ETzogbWFrZSBwcm9tcHQgb3B0aW9uYWxcbiAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwicHJvbXB0XCI+JyxcbiAgICAgICAgICAgICAgICBfbChcIkFubm90YXRpb25cIiksXG4gICAgICAgICAgICAgICAgXCI8L2xhYmVsPlwiLFxuICAgICAgICAgICAgICAgIC8vIHNldCB1cCBpbml0aWFsIHRhZ3MgYnkgYWRkaW5nIGFzIENTViB0byBpbnB1dCB2YWxzIChuZWNjLiB0byBpbml0IHNlbGVjdDIpXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhbm5vdGF0aW9uXCI+JyxcbiAgICAgICAgICAgICAgICBfLmVzY2FwZShhbm5vdGF0aW9uKSxcbiAgICAgICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgICAgICBdLmpvaW4oXCJcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIEByZXR1cm5zIHtqUXVlcnl9IHRoZSBtYWluIGVsZW1lbnQgZm9yIHRoaXMgdmlldyAqL1xuICAgICAgICAkYW5ub3RhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5hbm5vdGF0aW9uXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBzaHV0IGRvd24gZXZlbnQgbGlzdGVuZXJzIGFuZCByZW1vdmUgdGhpcyB2aWV3J3MgRE9NICovXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRhbm5vdGF0aW9uLm9mZigpO1xuICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMubW9kZWwpO1xuICAgICAgICAgICAgQmFja2JvbmUuVmlldy5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIHN0cmluZyByZXAgKi9cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcIkFubm90YXRpb25FZGl0b3IoXCIsIGAke3RoaXMubW9kZWx9YCwgXCIpXCJdLmpvaW4oXCJcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgQW5ub3RhdGlvbkVkaXRvcjogQW5ub3RhdGlvbkVkaXRvclxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvYW5ub3RhdGlvbi5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbEVBO0FBb0VBO0FBQ0E7QUFDQTtBQURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///125\n");

/***/ }),
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */
/*!*****************************************!*\
  !*** ./galaxy/scripts/apps/analysis.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_) {\n\nvar _jquery = __webpack_require__(/*! jquery */ 0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _galaxy = __webpack_require__(/*! galaxy */ 23);\n\nvar _galaxy2 = _interopRequireDefault(_galaxy);\n\nvar _router = __webpack_require__(/*! layout/router */ 53);\n\nvar _router2 = _interopRequireDefault(_router);\n\nvar _toolPanel = __webpack_require__(/*! ./panels/tool-panel */ 240);\n\nvar _toolPanel2 = _interopRequireDefault(_toolPanel);\n\nvar _historyPanel = __webpack_require__(/*! ./panels/history-panel */ 250);\n\nvar _historyPanel2 = _interopRequireDefault(_historyPanel);\n\nvar _page = __webpack_require__(/*! layout/page */ 26);\n\nvar _page2 = _interopRequireDefault(_page);\n\nvar _toolForm = __webpack_require__(/*! mvc/tool/tool-form */ 86);\n\nvar _toolForm2 = _interopRequireDefault(_toolForm);\n\nvar _formWrapper = __webpack_require__(/*! mvc/form/form-wrapper */ 68);\n\nvar _formWrapper2 = _interopRequireDefault(_formWrapper);\n\nvar _userPreferences = __webpack_require__(/*! mvc/user/user-preferences */ 264);\n\nvar _userPreferences2 = _interopRequireDefault(_userPreferences);\n\nvar _userCustomBuilds = __webpack_require__(/*! mvc/user/user-custom-builds */ 265);\n\nvar _userCustomBuilds2 = _interopRequireDefault(_userCustomBuilds);\n\nvar _tours = __webpack_require__(/*! mvc/tours */ 80);\n\nvar _tours2 = _interopRequireDefault(_tours);\n\nvar _gridView = __webpack_require__(/*! mvc/grid/grid-view */ 19);\n\nvar _gridView2 = _interopRequireDefault(_gridView);\n\nvar _gridShared = __webpack_require__(/*! mvc/grid/grid-shared */ 266);\n\nvar _gridShared2 = _interopRequireDefault(_gridShared);\n\nvar _workflow = __webpack_require__(/*! mvc/workflow/workflow */ 267);\n\nvar _workflow2 = _interopRequireDefault(_workflow);\n\nvar _HistoryImport = __webpack_require__(/*! components/HistoryImport.vue */ 269);\n\nvar _HistoryImport2 = _interopRequireDefault(_HistoryImport);\n\nvar _historyList = __webpack_require__(/*! mvc/history/history-list */ 274);\n\nvar _historyList2 = _interopRequireDefault(_historyList);\n\nvar _toolFormComposite = __webpack_require__(/*! mvc/tool/tool-form-composite */ 112);\n\nvar _toolFormComposite2 = _interopRequireDefault(_toolFormComposite);\n\nvar _queryStringParsing = __webpack_require__(/*! utils/query-string-parsing */ 14);\n\nvar _queryStringParsing2 = _interopRequireDefault(_queryStringParsing);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _datasetError = __webpack_require__(/*! mvc/dataset/dataset-error */ 275);\n\nvar _datasetError2 = _interopRequireDefault(_datasetError);\n\nvar _datasetEditAttributes = __webpack_require__(/*! mvc/dataset/dataset-edit-attributes */ 276);\n\nvar _datasetEditAttributes2 = _interopRequireDefault(_datasetEditAttributes);\n\nvar _Citations = __webpack_require__(/*! components/Citations.vue */ 91);\n\nvar _Citations2 = _interopRequireDefault(_Citations);\n\nvar _vue = __webpack_require__(/*! libs/vue */ 31);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar $ = _jquery2.default;\n\n\n/** define the 'Analyze Data'/analysis/main/home page for Galaxy\n *  * has a masthead\n *  * a left tool menu to allow the user to load tools in the center panel\n *  * a right history menu that shows the user's current data\n *  * a center panel\n *  Both panels (generally) persist while the center panel shows any\n *  UI needed for the current step of an analysis, like:\n *      * tool forms to set tool parameters,\n *      * tables showing the contents of datasets\n *      * etc.\n */\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new _galaxy2.default.GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"analysis app\");\n\n    /** Routes */\n    var AnalysisRouter = _router2.default.extend({\n        routes: {\n            \"(/)\": \"home\",\n            \"(/)root*\": \"home\",\n            \"(/)tours(/)(:tour_id)\": \"show_tours\",\n            \"(/)user(/)\": \"show_user\",\n            \"(/)user(/)(:form_id)\": \"show_user_form\",\n            \"(/)pages(/)create(/)\": \"show_pages_create\",\n            \"(/)pages(/)edit(/)\": \"show_pages_edit\",\n            \"(/)pages(/)(:action_id)\": \"show_pages\",\n            \"(/)visualizations(/)edit(/)\": \"show_visualizations_edit\",\n            \"(/)visualizations/(:action_id)\": \"show_visualizations\",\n            \"(/)workflows/import_workflow\": \"show_import_workflow\",\n            \"(/)workflows/run(/)\": \"show_run\",\n            \"(/)workflows(/)list\": \"show_workflows\",\n            \"(/)workflows/list_published(/)\": \"show_workflows_published\",\n            \"(/)workflows/create(/)\": \"show_workflows_create\",\n            \"(/)histories(/)citations(/)\": \"show_history_citations\",\n            \"(/)histories(/)rename(/)\": \"show_histories_rename\",\n            \"(/)histories(/)import(/)\": \"show_histories_import\",\n            \"(/)histories(/)permissions(/)\": \"show_histories_permissions\",\n            \"(/)histories(/)(:action_id)\": \"show_histories\",\n            \"(/)datasets(/)list(/)\": \"show_datasets\",\n            \"(/)custom_builds\": \"show_custom_builds\",\n            \"(/)datasets/edit\": \"show_dataset_edit_attributes\",\n            \"(/)datasets/error\": \"show_dataset_error\"\n        },\n\n        require_login: [\"show_user\", \"show_user_form\", \"show_workflows\"],\n\n        authenticate: function authenticate(args, name) {\n            return Galaxy.user && Galaxy.user.id || this.require_login.indexOf(name) == -1;\n        },\n\n        show_tours: function show_tours(tour_id) {\n            if (tour_id) {\n                _tours2.default.giveTourById(tour_id);\n            } else {\n                this.page.display(new _tours2.default.ToursView());\n            }\n        },\n\n        show_user: function show_user() {\n            this.page.display(new _userPreferences2.default.View());\n        },\n\n        show_user_form: function show_user_form(form_id) {\n            var model = new _userPreferences2.default.Model({\n                user_id: Galaxy.params.id\n            });\n            this.page.display(new _formWrapper2.default.View(model.get(form_id)));\n        },\n\n        show_visualizations: function show_visualizations(action_id) {\n            this.page.display(new _gridShared2.default.View({\n                action_id: action_id,\n                plural: \"Visualizations\",\n                item: \"visualization\"\n            }));\n        },\n\n        show_visualizations_edit: function show_visualizations_edit() {\n            this.page.display(new _formWrapper2.default.View({\n                url: \"visualization/edit?id=\" + _queryStringParsing2.default.get(\"id\"),\n                redirect: \"visualizations/list\"\n            }));\n        },\n\n        show_workflows_published: function show_workflows_published() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"workflow/list_published\",\n                dict_format: true\n            }));\n        },\n\n        show_histories: function show_histories(action_id) {\n            this.page.display(new _historyList2.default.View({ action_id: action_id }));\n        },\n\n        show_history_citations: function show_history_citations() {\n            var citationInstance = _vue2.default.extend(_Citations2.default);\n            var vm = document.createElement(\"div\");\n            this.page.display(vm);\n            new citationInstance({ propsData: { id: _queryStringParsing2.default.get(\"id\"), source: \"histories\" } }).$mount(vm);\n        },\n\n        show_histories_rename: function show_histories_rename() {\n            this.page.display(new _formWrapper2.default.View({\n                url: \"history/rename?id=\" + _queryStringParsing2.default.get(\"id\"),\n                redirect: \"histories/list\"\n            }));\n        },\n\n        show_histories_import: function show_histories_import() {\n            var historyImportInstance = _vue2.default.extend(_HistoryImport2.default);\n            var vm = document.createElement(\"div\");\n            this.page.display(vm);\n            new historyImportInstance().$mount(vm);\n        },\n\n        show_histories_permissions: function show_histories_permissions() {\n            this.page.display(new _formWrapper2.default.View({\n                url: \"history/permissions?id=\" + _queryStringParsing2.default.get(\"id\"),\n                redirect: \"histories/list\"\n            }));\n        },\n\n        show_datasets: function show_datasets() {\n            this.page.display(new _gridView2.default({\n                url_base: Galaxy.root + \"dataset/list\",\n                dict_format: true\n            }));\n        },\n\n        show_pages: function show_pages(action_id) {\n            this.page.display(new _gridShared2.default.View({\n                action_id: action_id,\n                plural: \"Pages\",\n                item: \"page\"\n            }));\n        },\n\n        show_pages_create: function show_pages_create() {\n            this.page.display(new _formWrapper2.default.View({\n                url: \"page/create\",\n                redirect: \"pages/list\"\n            }));\n        },\n\n        show_pages_edit: function show_pages_edit() {\n            this.page.display(new _formWrapper2.default.View({\n                url: \"page/edit?id=\" + _queryStringParsing2.default.get(\"id\"),\n                redirect: \"pages/list\"\n            }));\n        },\n\n        show_workflows: function show_workflows() {\n            this.page.display(new _workflow2.default.View());\n        },\n\n        show_workflows_create: function show_workflows_create() {\n            this.page.display(new _formWrapper2.default.View({\n                url: \"workflow/create\",\n                redirect: \"workflow/editor\"\n            }));\n        },\n\n        show_run: function show_run() {\n            this._loadWorkflow();\n        },\n\n        show_import_workflow: function show_import_workflow() {\n            this.page.display(new _workflow2.default.ImportWorkflowView());\n        },\n\n        show_custom_builds: function show_custom_builds() {\n            var _this = this;\n\n            var historyPanel = this.page.historyPanel.historyView;\n            if (!historyPanel || !historyPanel.model || !historyPanel.model.id) {\n                window.setTimeout(function () {\n                    _this.show_custom_builds();\n                }, 500);\n                return;\n            }\n            this.page.display(new _userCustomBuilds2.default.View());\n        },\n\n        show_dataset_edit_attributes: function show_dataset_edit_attributes() {\n            this.page.display(new _datasetEditAttributes2.default.View());\n        },\n\n        show_dataset_error: function show_dataset_error() {\n            this.page.display(new _datasetError2.default.View());\n        },\n\n        /**  */\n        home: function home(params) {\n            // TODO: to router, remove Globals\n            // load a tool by id (tool_id) or rerun a previous tool execution (job_id)\n            if (params.tool_id || params.job_id) {\n                if (params.tool_id === \"upload1\") {\n                    this.page.toolPanel.upload.show();\n                    this._loadCenterIframe(\"welcome\");\n                } else {\n                    this._loadToolForm(params);\n                }\n            } else {\n                // show the workflow run form\n                if (params.workflow_id) {\n                    this._loadWorkflow();\n                    // load the center iframe with controller.action: galaxy.org/?m_c=history&m_a=list -> history/list\n                } else if (params.m_c) {\n                    this._loadCenterIframe(params.m_c + \"/\" + params.m_a);\n                    // show the workflow run form\n                } else {\n                    this._loadCenterIframe(\"welcome\");\n                }\n            }\n        },\n\n        /** load the center panel with a tool form described by the given params obj */\n        _loadToolForm: function _loadToolForm(params) {\n            //TODO: load tool form code async\n            params.id = decodeURIComponent(params.tool_id);\n            this.page.display(new _toolForm2.default.View(params));\n        },\n\n        /** load the center panel iframe using the given url */\n        _loadCenterIframe: function _loadCenterIframe(url, root) {\n            root = root || Galaxy.root;\n            url = root + url;\n            this.page.$(\"#galaxy_main\").prop(\"src\", url);\n        },\n\n        /** load workflow by its url in run mode */\n        _loadWorkflow: function _loadWorkflow() {\n            var _this2 = this;\n\n            _utils2.default.get({\n                url: Galaxy.root + \"api/workflows/\" + _utils2.default.getQueryString(\"id\") + \"/download?style=run\",\n                success: function success(response) {\n                    _this2.page.display(new _toolFormComposite2.default.View(response));\n                },\n                error: function error(response) {\n                    var error_msg = response.err_msg || \"Error occurred while loading the resource.\";\n                    var options = {\n                        message: error_msg,\n                        status: \"danger\",\n                        persistent: true\n                    };\n                    _this2.page.display(new _uiMisc2.default.Message(options));\n                }\n            });\n        }\n    });\n\n    // render and start the router\n    $(function () {\n        Galaxy.page = new _page2.default.View(_.extend(options, {\n            Left: _toolPanel2.default,\n            Right: _historyPanel2.default,\n            Router: AnalysisRouter\n        }));\n    });\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///239\n");

/***/ }),
/* 240 */
/*!**************************************************!*\
  !*** ./galaxy/scripts/apps/panels/tool-panel.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _tools = __webpack_require__(/*! mvc/tool/tools */ 85);\n\nvar _tools2 = _interopRequireDefault(_tools);\n\nvar _uploadView = __webpack_require__(/*! mvc/upload/upload-view */ 241);\n\nvar _uploadView2 = _interopRequireDefault(_uploadView);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _toolFormComposite = __webpack_require__(/*! mvc/tool/tool-form-composite */ 112);\n\nvar _toolFormComposite2 = _interopRequireDefault(_toolFormComposite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ToolPanel = Backbone.View.extend({\n    initialize: function initialize(page, options) {\n        // access configuration options\n        var config = options.config;\n        this.root = options.root;\n\n        /** @type {Object[]} descriptions of user's workflows to be shown in the tool menu */\n        this.stored_workflow_menu_entries = config.stored_workflow_menu_entries || [];\n\n        // create tool search, tool panel, and tool panel view.\n        var tool_search = new _tools2.default.ToolSearch({\n            hidden: false\n        });\n        var tools = new _tools2.default.ToolCollection(config.toolbox);\n        this.tool_panel = new _tools2.default.ToolPanel({\n            tool_search: tool_search,\n            tools: tools,\n            layout: config.toolbox_in_panel\n        });\n        this.tool_panel_view = new _tools2.default.ToolPanelView({\n            model: this.tool_panel\n        });\n\n        // add upload modal\n        this.upload_button = new _uploadView2.default({\n            nginx_upload_path: config.nginx_upload_path,\n            ftp_upload_site: config.ftp_upload_site,\n            default_genome: config.default_genome,\n            default_extension: config.default_extension\n        });\n\n        // add uploader button to Galaxy object\n        Galaxy.upload = this.upload_button;\n\n        // components for panel definition\n        this.model = new Backbone.Model({\n            title: (0, _localization2.default)(\"Tools\"),\n            buttons: [this.upload_button]\n        });\n\n        // build body template\n        this.setElement(this._template());\n    },\n\n    render: function render() {\n        // if there are tools, render panel and display everything\n        var self = this;\n        if (this.tool_panel.get(\"layout\").size() > 0) {\n            this.$el.prepend(this.tool_panel_view.$el);\n            this.tool_panel_view.render();\n        }\n        // build the dom for the workflow portion of the tool menu\n        // add internal workflow list\n        self.$(\"#internal-workflows\").append(self._templateAllWorkflow({\n            title: (0, _localization2.default)(\"All workflows\"),\n            href: \"workflows/list\"\n        }));\n        _.each(this.stored_workflow_menu_entries, function (menu_entry) {\n            self.$(\"#internal-workflows\").append(self._templateWorkflowLink({\n                title: menu_entry.stored_workflow.name,\n                href: \"workflows/run?id=\" + menu_entry.encoded_stored_workflow_id\n            }));\n        });\n    },\n\n    /** build a link to one tool */\n    _templateTool: function _templateTool(tool) {\n        return ['<div class=\"toolTitle\">', '<a href=\"', this.root, tool.href, '\" target=\"galaxy_main\">', tool.title, \"</a>\", \"</div>\"].join(\"\");\n    },\n\n    /** build a link to 'All Workflows' */\n    _templateAllWorkflow: function _templateAllWorkflow(tool) {\n        return ['<div class=\"toolTitle\">',\n        // global\n        '<a href=\"', Galaxy.root, tool.href, '\">', tool.title, \"</a>\", \"</div>\"].join(\"\");\n    },\n\n    /** build links to workflows in toolpanel */\n    _templateWorkflowLink: function _templateWorkflowLink(wf) {\n        return ['<div class=\"toolTitle\">', \"<a class=\\\"\" + wf.cls + \" \\\" href=\\\"\", Galaxy.root, wf.href, '\">', wf.title, \"</a>\", \"</div>\"].join(\"\");\n    },\n\n    /** override to include inital menu dom and workflow section */\n    _template: function _template() {\n        return ['<div class=\"toolMenuContainer\">', '<div class=\"toolMenu\" style=\"display: none\">', '<div id=\"search-no-results\" style=\"display: none; padding-top: 5px\">', \"<em><strong>\", (0, _localization2.default)(\"Search did not match any tools.\"), \"</strong></em>\", \"</div>\", \"</div>\", '<div class=\"toolSectionPad\"/>', '<div class=\"toolSectionPad\"/>', '<div class=\"toolSectionTitle\" id=\"title_XXinternalXXworkflow\">', \"<span>\", (0, _localization2.default)(\"Workflows\"), \"</span>\", \"</div>\", '<div id=\"internal-workflows\" class=\"toolSectionBody\">', '<div class=\"toolSectionBg\"/>', \"</div>\", \"</div>\"].join(\"\");\n    },\n\n    toString: function toString() {\n        return \"toolPanel\";\n    }\n});\n\nexports.default = ToolPanel;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL2FwcHMvcGFuZWxzL3Rvb2wtcGFuZWwuanM/NjQ0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG9vbHMgZnJvbSBcIm12Yy90b29sL3Rvb2xzXCI7XG5pbXBvcnQgVXBsb2FkIGZyb20gXCJtdmMvdXBsb2FkL3VwbG9hZC12aWV3XCI7XG5pbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuaW1wb3J0IFRvb2xGb3JtIGZyb20gXCJtdmMvdG9vbC90b29sLWZvcm0tY29tcG9zaXRlXCI7XG5cbnZhciBUb29sUGFuZWwgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGFnZSwgb3B0aW9ucykge1xuICAgICAgICAvLyBhY2Nlc3MgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAgICAgIHZhciBjb25maWcgPSBvcHRpb25zLmNvbmZpZztcbiAgICAgICAgdGhpcy5yb290ID0gb3B0aW9ucy5yb290O1xuXG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0W119IGRlc2NyaXB0aW9ucyBvZiB1c2VyJ3Mgd29ya2Zsb3dzIHRvIGJlIHNob3duIGluIHRoZSB0b29sIG1lbnUgKi9cbiAgICAgICAgdGhpcy5zdG9yZWRfd29ya2Zsb3dfbWVudV9lbnRyaWVzID0gY29uZmlnLnN0b3JlZF93b3JrZmxvd19tZW51X2VudHJpZXMgfHwgW107XG5cbiAgICAgICAgLy8gY3JlYXRlIHRvb2wgc2VhcmNoLCB0b29sIHBhbmVsLCBhbmQgdG9vbCBwYW5lbCB2aWV3LlxuICAgICAgICB2YXIgdG9vbF9zZWFyY2ggPSBuZXcgVG9vbHMuVG9vbFNlYXJjaCh7XG4gICAgICAgICAgICBoaWRkZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdG9vbHMgPSBuZXcgVG9vbHMuVG9vbENvbGxlY3Rpb24oY29uZmlnLnRvb2xib3gpO1xuICAgICAgICB0aGlzLnRvb2xfcGFuZWwgPSBuZXcgVG9vbHMuVG9vbFBhbmVsKHtcbiAgICAgICAgICAgIHRvb2xfc2VhcmNoOiB0b29sX3NlYXJjaCxcbiAgICAgICAgICAgIHRvb2xzOiB0b29scyxcbiAgICAgICAgICAgIGxheW91dDogY29uZmlnLnRvb2xib3hfaW5fcGFuZWxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9vbF9wYW5lbF92aWV3ID0gbmV3IFRvb2xzLlRvb2xQYW5lbFZpZXcoe1xuICAgICAgICAgICAgbW9kZWw6IHRoaXMudG9vbF9wYW5lbFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgdXBsb2FkIG1vZGFsXG4gICAgICAgIHRoaXMudXBsb2FkX2J1dHRvbiA9IG5ldyBVcGxvYWQoe1xuICAgICAgICAgICAgbmdpbnhfdXBsb2FkX3BhdGg6IGNvbmZpZy5uZ2lueF91cGxvYWRfcGF0aCxcbiAgICAgICAgICAgIGZ0cF91cGxvYWRfc2l0ZTogY29uZmlnLmZ0cF91cGxvYWRfc2l0ZSxcbiAgICAgICAgICAgIGRlZmF1bHRfZ2Vub21lOiBjb25maWcuZGVmYXVsdF9nZW5vbWUsXG4gICAgICAgICAgICBkZWZhdWx0X2V4dGVuc2lvbjogY29uZmlnLmRlZmF1bHRfZXh0ZW5zaW9uXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFkZCB1cGxvYWRlciBidXR0b24gdG8gR2FsYXh5IG9iamVjdFxuICAgICAgICBHYWxheHkudXBsb2FkID0gdGhpcy51cGxvYWRfYnV0dG9uO1xuXG4gICAgICAgIC8vIGNvbXBvbmVudHMgZm9yIHBhbmVsIGRlZmluaXRpb25cbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyBCYWNrYm9uZS5Nb2RlbCh7XG4gICAgICAgICAgICB0aXRsZTogX2woXCJUb29sc1wiKSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IFt0aGlzLnVwbG9hZF9idXR0b25dXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGJ1aWxkIGJvZHkgdGVtcGxhdGVcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KHRoaXMuX3RlbXBsYXRlKCkpO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBpZiB0aGVyZSBhcmUgdG9vbHMsIHJlbmRlciBwYW5lbCBhbmQgZGlzcGxheSBldmVyeXRoaW5nXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMudG9vbF9wYW5lbC5nZXQoXCJsYXlvdXRcIikuc2l6ZSgpID4gMCkge1xuICAgICAgICAgICAgdGhpcy4kZWwucHJlcGVuZCh0aGlzLnRvb2xfcGFuZWxfdmlldy4kZWwpO1xuICAgICAgICAgICAgdGhpcy50b29sX3BhbmVsX3ZpZXcucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYnVpbGQgdGhlIGRvbSBmb3IgdGhlIHdvcmtmbG93IHBvcnRpb24gb2YgdGhlIHRvb2wgbWVudVxuICAgICAgICAvLyBhZGQgaW50ZXJuYWwgd29ya2Zsb3cgbGlzdFxuICAgICAgICBzZWxmLiQoXCIjaW50ZXJuYWwtd29ya2Zsb3dzXCIpLmFwcGVuZChcbiAgICAgICAgICAgIHNlbGYuX3RlbXBsYXRlQWxsV29ya2Zsb3coe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBfbChcIkFsbCB3b3JrZmxvd3NcIiksXG4gICAgICAgICAgICAgICAgaHJlZjogXCJ3b3JrZmxvd3MvbGlzdFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICBfLmVhY2godGhpcy5zdG9yZWRfd29ya2Zsb3dfbWVudV9lbnRyaWVzLCBtZW51X2VudHJ5ID0+IHtcbiAgICAgICAgICAgIHNlbGYuJChcIiNpbnRlcm5hbC13b3JrZmxvd3NcIikuYXBwZW5kKFxuICAgICAgICAgICAgICAgIHNlbGYuX3RlbXBsYXRlV29ya2Zsb3dMaW5rKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG1lbnVfZW50cnkuc3RvcmVkX3dvcmtmbG93Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGB3b3JrZmxvd3MvcnVuP2lkPSR7bWVudV9lbnRyeS5lbmNvZGVkX3N0b3JlZF93b3JrZmxvd19pZH1gXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKiogYnVpbGQgYSBsaW5rIHRvIG9uZSB0b29sICovXG4gICAgX3RlbXBsYXRlVG9vbDogZnVuY3Rpb24odG9vbCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0b29sVGl0bGVcIj4nLFxuICAgICAgICAgICAgJzxhIGhyZWY9XCInLFxuICAgICAgICAgICAgdGhpcy5yb290LFxuICAgICAgICAgICAgdG9vbC5ocmVmLFxuICAgICAgICAgICAgJ1wiIHRhcmdldD1cImdhbGF4eV9tYWluXCI+JyxcbiAgICAgICAgICAgIHRvb2wudGl0bGUsXG4gICAgICAgICAgICBcIjwvYT5cIixcbiAgICAgICAgICAgIFwiPC9kaXY+XCJcbiAgICAgICAgXS5qb2luKFwiXCIpO1xuICAgIH0sXG5cbiAgICAvKiogYnVpbGQgYSBsaW5rIHRvICdBbGwgV29ya2Zsb3dzJyAqL1xuICAgIF90ZW1wbGF0ZUFsbFdvcmtmbG93OiBmdW5jdGlvbih0b29sKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2xUaXRsZVwiPicsXG4gICAgICAgICAgICAvLyBnbG9iYWxcbiAgICAgICAgICAgICc8YSBocmVmPVwiJyxcbiAgICAgICAgICAgIEdhbGF4eS5yb290LFxuICAgICAgICAgICAgdG9vbC5ocmVmLFxuICAgICAgICAgICAgJ1wiPicsXG4gICAgICAgICAgICB0b29sLnRpdGxlLFxuICAgICAgICAgICAgXCI8L2E+XCIsXG4gICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgIF0uam9pbihcIlwiKTtcbiAgICB9LFxuXG4gICAgLyoqIGJ1aWxkIGxpbmtzIHRvIHdvcmtmbG93cyBpbiB0b29scGFuZWwgKi9cbiAgICBfdGVtcGxhdGVXb3JrZmxvd0xpbms6IGZ1bmN0aW9uKHdmKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2xUaXRsZVwiPicsXG4gICAgICAgICAgICBgPGEgY2xhc3M9XCIke3dmLmNsc30gXCIgaHJlZj1cImAsXG4gICAgICAgICAgICBHYWxheHkucm9vdCxcbiAgICAgICAgICAgIHdmLmhyZWYsXG4gICAgICAgICAgICAnXCI+JyxcbiAgICAgICAgICAgIHdmLnRpdGxlLFxuICAgICAgICAgICAgXCI8L2E+XCIsXG4gICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgIF0uam9pbihcIlwiKTtcbiAgICB9LFxuXG4gICAgLyoqIG92ZXJyaWRlIHRvIGluY2x1ZGUgaW5pdGFsIG1lbnUgZG9tIGFuZCB3b3JrZmxvdyBzZWN0aW9uICovXG4gICAgX3RlbXBsYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidG9vbE1lbnVDb250YWluZXJcIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0b29sTWVudVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPicsXG4gICAgICAgICAgICAnPGRpdiBpZD1cInNlYXJjaC1uby1yZXN1bHRzXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lOyBwYWRkaW5nLXRvcDogNXB4XCI+JyxcbiAgICAgICAgICAgIFwiPGVtPjxzdHJvbmc+XCIsXG4gICAgICAgICAgICBfbChcIlNlYXJjaCBkaWQgbm90IG1hdGNoIGFueSB0b29scy5cIiksXG4gICAgICAgICAgICBcIjwvc3Ryb25nPjwvZW0+XCIsXG4gICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidG9vbFNlY3Rpb25QYWRcIi8+JyxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidG9vbFNlY3Rpb25QYWRcIi8+JyxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidG9vbFNlY3Rpb25UaXRsZVwiIGlkPVwidGl0bGVfWFhpbnRlcm5hbFhYd29ya2Zsb3dcIj4nLFxuICAgICAgICAgICAgXCI8c3Bhbj5cIixcbiAgICAgICAgICAgIF9sKFwiV29ya2Zsb3dzXCIpLFxuICAgICAgICAgICAgXCI8L3NwYW4+XCIsXG4gICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgJzxkaXYgaWQ9XCJpbnRlcm5hbC13b3JrZmxvd3NcIiBjbGFzcz1cInRvb2xTZWN0aW9uQm9keVwiPicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2xTZWN0aW9uQmdcIi8+JyxcbiAgICAgICAgICAgIFwiPC9kaXY+XCIsXG4gICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgIF0uam9pbihcIlwiKTtcbiAgICB9LFxuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJ0b29sUGFuZWxcIjtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgVG9vbFBhbmVsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL2FwcHMvcGFuZWxzL3Rvb2wtcGFuZWwuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTNJQTtBQUNBO0FBNklBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///240\n");

/***/ }),
/* 241 */
/*!**************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/upload-view.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiModal = __webpack_require__(/*! mvc/ui/ui-modal */ 8);\n\nvar _uiModal2 = _interopRequireDefault(_uiModal);\n\nvar _uiTabs = __webpack_require__(/*! mvc/ui/ui-tabs */ 43);\n\nvar _uiTabs2 = _interopRequireDefault(_uiTabs);\n\nvar _uploadButton = __webpack_require__(/*! mvc/upload/upload-button */ 242);\n\nvar _uploadButton2 = _interopRequireDefault(_uploadButton);\n\nvar _defaultView = __webpack_require__(/*! mvc/upload/default/default-view */ 243);\n\nvar _defaultView2 = _interopRequireDefault(_defaultView);\n\nvar _compositeView = __webpack_require__(/*! mvc/upload/composite/composite-view */ 246);\n\nvar _compositeView2 = _interopRequireDefault(_compositeView);\n\nvar _collectionView = __webpack_require__(/*! mvc/upload/collection/collection-view */ 248);\n\nvar _collectionView2 = _interopRequireDefault(_collectionView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    options: {\n        nginx_upload_path: \"\",\n        ftp_upload_site: \"n/a\",\n        default_genome: \"?\",\n        default_extension: \"auto\",\n        height: 500,\n        width: 900,\n        auto: {\n            id: \"auto\",\n            text: \"Auto-detect\",\n            description: \"This system will try to detect the file type automatically. If your file is not detected properly as one of the known formats, it most likely means that it has some format problems (e.g., different number of columns on different rows). You can still coerce the system to set your data to the format you think it should be.  You can also upload compressed files, which will automatically be decompressed.\"\n        }\n    },\n\n    // contains all available dataset extensions/types\n    list_extensions: [],\n\n    // contains all available genomes\n    list_genomes: [],\n\n    initialize: function initialize(options) {\n        var self = this;\n        this.options = _utils2.default.merge(options, this.options);\n\n        // create view for upload/progress button\n        this.ui_button = new _uploadButton2.default.View({\n            onclick: function onclick(e) {\n                e.preventDefault();\n                self.show();\n            },\n            onunload: function onunload() {\n                var percentage = self.ui_button.model.get(\"percentage\", 0);\n                if (percentage > 0 && percentage < 100) {\n                    return \"Several uploads are queued.\";\n                }\n            }\n        });\n\n        // set element to button view\n        this.setElement(this.ui_button.$el);\n\n        // load extensions\n        var self = this;\n        _utils2.default.get({\n            url: Galaxy.root + \"api/datatypes?extension_only=False\",\n            success: function success(datatypes) {\n                for (var key in datatypes) {\n                    self.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url,\n                        composite_files: datatypes[key].composite_files\n                    });\n                }\n                self.list_extensions.sort(function (a, b) {\n                    var a_text = a.text && a.text.toLowerCase();\n                    var b_text = b.text && b.text.toLowerCase();\n                    return a_text > b_text ? 1 : a_text < b_text ? -1 : 0;\n                });\n                if (!self.options.datatypes_disable_auto) {\n                    self.list_extensions.unshift(self.options.auto);\n                }\n            }\n        });\n\n        // load genomes\n        _utils2.default.get({\n            url: Galaxy.root + \"api/genomes\",\n            success: function success(genomes) {\n                for (var key in genomes) {\n                    self.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                self.list_genomes.sort(function (a, b) {\n                    if (a.id == self.options.default_genome) {\n                        return -1;\n                    }\n                    if (b.id == self.options.default_genome) {\n                        return 1;\n                    }\n                    return a.text > b.text ? 1 : a.text < b.text ? -1 : 0;\n                });\n            }\n        });\n    },\n\n    /** Show/hide upload dialog */\n    show: function show() {\n        var self = this;\n        if (!Galaxy.currHistoryPanel || !Galaxy.currHistoryPanel.model) {\n            window.setTimeout(function () {\n                self.show();\n            }, 500);\n            return;\n        }\n        this.current_user = Galaxy.user.id;\n        if (!this.modal) {\n            this.tabs = new _uiTabs2.default.View();\n            this.default_view = new _defaultView2.default(this);\n            this.tabs.add({\n                id: \"regular\",\n                title: (0, _localization2.default)(\"Regular\"),\n                $el: this.default_view.$el\n            });\n            this.composite_view = new _compositeView2.default(this);\n            this.tabs.add({\n                id: \"composite\",\n                title: (0, _localization2.default)(\"Composite\"),\n                $el: this.composite_view.$el\n            });\n            this.collection_view = new _collectionView2.default(this);\n            this.tabs.add({\n                id: \"collection\",\n                title: (0, _localization2.default)(\"Collection\"),\n                $el: this.collection_view.$el\n            });\n            this.modal = new _uiModal2.default.View({\n                title: (0, _localization2.default)(\"Download from web or upload from disk\"),\n                body: this.tabs.$el,\n                height: this.options.height,\n                width: this.options.width,\n                closing_events: true,\n                title_separator: false\n            });\n        }\n        this.modal.show();\n    },\n\n    /** Refresh user and current history */\n    currentHistory: function currentHistory() {\n        return this.current_user && Galaxy.currHistoryPanel.model.get(\"id\");\n    },\n\n    /** Get ftp configuration */\n    currentFtp: function currentFtp() {\n        return this.current_user && this.options.ftp_upload_site;\n    },\n\n    /**\n     * Package API data from array of models\n     * @param{Array} items - Upload items/rows filtered from a collection\n     */\n    toData: function toData(items, history_id) {\n        // create dictionary for data submission\n        var data = {\n            payload: {\n                tool_id: \"upload1\",\n                history_id: history_id || this.currentHistory(),\n                inputs: {}\n            },\n            files: [],\n            error_message: null\n        };\n        // add upload tools input data\n        if (items && items.length > 0) {\n            var inputs = {\n                file_count: items.length,\n                dbkey: items[0].get(\"genome\", \"?\"),\n                file_type: items[0].get(\"extension\", \"auto\")\n            };\n            for (var index in items) {\n                var it = items[index];\n                it.set(\"status\", \"running\");\n                if (it.get(\"file_size\") > 0) {\n                    var prefix = \"files_\" + index + \"|\";\n                    inputs[prefix + \"type\"] = \"upload_dataset\";\n                    inputs[prefix + \"space_to_tab\"] = it.get(\"space_to_tab\") && \"Yes\" || null;\n                    inputs[prefix + \"to_posix_lines\"] = it.get(\"to_posix_lines\") && \"Yes\" || null;\n                    inputs[prefix + \"dbkey\"] = it.get(\"genome\", null);\n                    inputs[prefix + \"file_type\"] = it.get(\"extension\", null);\n                    switch (it.get(\"file_mode\")) {\n                        case \"new\":\n                            inputs[prefix + \"url_paste\"] = it.get(\"url_paste\");\n                            break;\n                        case \"ftp\":\n                            inputs[prefix + \"ftp_files\"] = it.get(\"file_path\");\n                            break;\n                        case \"local\":\n                            data.files.push({\n                                name: prefix + \"file_data\",\n                                file: it.get(\"file_data\")\n                            });\n                    }\n                } else {\n                    data.error_message = \"Upload content incomplete.\";\n                    it.set(\"status\", \"error\");\n                    it.set(\"info\", data.error_message);\n                    break;\n                }\n            }\n            data.payload.inputs = JSON.stringify(inputs);\n        }\n        return data;\n    }\n});\n/** Upload app contains the upload progress button and upload modal, compiles model data for API request **/\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///241\n");

/***/ }),
/* 242 */
/*!****************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/upload-button.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** View for upload/progress bar button */\n\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            icon: \"fa-upload\",\n            tooltip: (0, _localization2.default)(\"Download from URL or upload files from disk\"),\n            label: \"Load Data\",\n            percentage: 0,\n            status: \"\",\n            onunload: function onunload() {},\n            onclick: function onclick() {}\n        }).set(options);\n        this.setElement(this._template());\n        this.$progress = this.$(\".progress-bar\");\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n        $(window).on(\"beforeunload\", function () {\n            return self.model.get(\"onunload\")();\n        });\n    },\n\n    render: function render() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el.off(\"click\").on(\"click\", function (e) {\n            options.onclick(e);\n        }).tooltip({\n            title: this.model.get(\"tooltip\"),\n            placement: \"bottom\"\n        });\n        this.$progress.removeClass().addClass(\"progress-bar\").addClass(\"progress-bar-notransition\").addClass(options.status != \"\" && \"progress-bar-\" + options.status).css({ width: options.percentage + \"%\" });\n    },\n\n    /** Template */\n    _template: function _template() {\n        return '<div class=\"upload-button\">' + '<div class=\"progress\">' + '<div class=\"progress-bar\"/>' + '<a class=\"panel-header-button\" href=\"javascript:void(0)\" id=\"tool-panel-upload-button\">' + '<span class=\"fa fa-upload\"/>' + \"</a>\" + \"</div>\" + \"</div>\";\n    }\n});\nexports.default = { View: View };\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy91cGxvYWQvdXBsb2FkLWJ1dHRvbi5qcz9hNDdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG4vKiogVmlldyBmb3IgdXBsb2FkL3Byb2dyZXNzIGJhciBidXR0b24gKi9cblxudmFyIFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMubW9kZWwgPVxuICAgICAgICAgICAgKG9wdGlvbnMgJiYgb3B0aW9ucy5tb2RlbCkgfHxcbiAgICAgICAgICAgIG5ldyBCYWNrYm9uZS5Nb2RlbCh7XG4gICAgICAgICAgICAgICAgaWNvbjogXCJmYS11cGxvYWRcIixcbiAgICAgICAgICAgICAgICB0b29sdGlwOiBfbChcIkRvd25sb2FkIGZyb20gVVJMIG9yIHVwbG9hZCBmaWxlcyBmcm9tIGRpc2tcIiksXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTG9hZCBEYXRhXCIsXG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZTogMCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IFwiXCIsXG4gICAgICAgICAgICAgICAgb251bmxvYWQ6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgb25jbGljazogZnVuY3Rpb24oKSB7fVxuICAgICAgICAgICAgfSkuc2V0KG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQodGhpcy5fdGVtcGxhdGUoKSk7XG4gICAgICAgIHRoaXMuJHByb2dyZXNzID0gdGhpcy4kKFwiLnByb2dyZXNzLWJhclwiKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNoYW5nZVwiLCB0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICQod2luZG93KS5vbihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiBzZWxmLm1vZGVsLmdldChcIm9udW5sb2FkXCIpKCkpO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzO1xuICAgICAgICB0aGlzLiRlbFxuICAgICAgICAgICAgLm9mZihcImNsaWNrXCIpXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCBlID0+IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm9uY2xpY2soZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRvb2x0aXAoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLm1vZGVsLmdldChcInRvb2x0aXBcIiksXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiBcImJvdHRvbVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4kcHJvZ3Jlc3NcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJwcm9ncmVzcy1iYXJcIilcbiAgICAgICAgICAgIC5hZGRDbGFzcyhcInByb2dyZXNzLWJhci1ub3RyYW5zaXRpb25cIilcbiAgICAgICAgICAgIC5hZGRDbGFzcyhvcHRpb25zLnN0YXR1cyAhPSBcIlwiICYmIGBwcm9ncmVzcy1iYXItJHtvcHRpb25zLnN0YXR1c31gKVxuICAgICAgICAgICAgLmNzcyh7IHdpZHRoOiBgJHtvcHRpb25zLnBlcmNlbnRhZ2V9JWAgfSk7XG4gICAgfSxcblxuICAgIC8qKiBUZW1wbGF0ZSAqL1xuICAgIF90ZW1wbGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVwbG9hZC1idXR0b25cIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCIvPicgK1xuICAgICAgICAgICAgJzxhIGNsYXNzPVwicGFuZWwtaGVhZGVyLWJ1dHRvblwiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBpZD1cInRvb2wtcGFuZWwtdXBsb2FkLWJ1dHRvblwiPicgK1xuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmEgZmEtdXBsb2FkXCIvPicgK1xuICAgICAgICAgICAgXCI8L2E+XCIgK1xuICAgICAgICAgICAgXCI8L2Rpdj5cIiArXG4gICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgICk7XG4gICAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCB7IFZpZXc6IFZpZXcgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvdXBsb2FkL3VwbG9hZC1idXR0b24uanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUlBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBckRBO0FBdURBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///242\n");

/***/ }),
/* 243 */
/*!***********************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/default/default-view.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uploadModel = __webpack_require__(/*! mvc/upload/upload-model */ 29);\n\nvar _uploadModel2 = _interopRequireDefault(_uploadModel);\n\nvar _defaultRow = __webpack_require__(/*! mvc/upload/default/default-row */ 244);\n\nvar _defaultRow2 = _interopRequireDefault(_defaultRow);\n\nvar _uploadFtp2 = __webpack_require__(/*! mvc/upload/upload-ftp */ 55);\n\nvar _uploadFtp3 = _interopRequireDefault(_uploadFtp2);\n\nvar _uploadExtension = __webpack_require__(/*! mvc/upload/upload-extension */ 56);\n\nvar _uploadExtension2 = _interopRequireDefault(_uploadExtension);\n\nvar _uiPopover = __webpack_require__(/*! mvc/ui/ui-popover */ 15);\n\nvar _uiPopover2 = _interopRequireDefault(_uiPopover);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _lazyLimited = __webpack_require__(/*! mvc/lazy/lazy-limited */ 245);\n\nvar _lazyLimited2 = _interopRequireDefault(_lazyLimited);\n\n__webpack_require__(/*! utils/uploadbox */ 57);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Renders contents of the default uploader */\nexports.default = Backbone.View.extend({\n    // current upload size in bytes\n    upload_size: 0,\n\n    // contains upload row models\n    collection: new _uploadModel2.default.Collection(),\n\n    // keeps track of the current uploader state\n    counter: {\n        announce: 0,\n        success: 0,\n        error: 0,\n        running: 0,\n        reset: function reset() {\n            this.announce = this.success = this.error = this.running = 0;\n        }\n    },\n\n    initialize: function initialize(app) {\n        var self = this;\n        this.app = app;\n        this.options = app.options;\n        this.list_extensions = app.list_extensions;\n        this.list_genomes = app.list_genomes;\n        this.ui_button = app.ui_button;\n        this.ftp_upload_site = app.currentFtp();\n\n        // build template\n        this.setElement(this._template());\n        this.$uploadbox = this.$(\".upload-box\");\n        this.$uploadtable = this.$(\".upload-table\");\n\n        // append buttons to dom\n        this.btnLocal = new _uiMisc2.default.Button({\n            id: \"btn-local\",\n            title: (0, _localization2.default)(\"Choose local file\"),\n            onclick: function onclick() {\n                self.uploadbox.select();\n            },\n            icon: \"fa fa-laptop\"\n        });\n        this.btnFtp = new _uiMisc2.default.Button({\n            id: \"btn-ftp\",\n            title: (0, _localization2.default)(\"Choose FTP file\"),\n            onclick: function onclick() {\n                self._eventFtp();\n            },\n            icon: \"fa fa-folder-open-o\"\n        });\n        this.btnCreate = new _uiMisc2.default.Button({\n            id: \"btn-new\",\n            title: \"Paste/Fetch data\",\n            onclick: function onclick() {\n                self._eventCreate();\n            },\n            icon: \"fa fa-edit\"\n        });\n        this.btnStart = new _uiMisc2.default.Button({\n            id: \"btn-start\",\n            title: (0, _localization2.default)(\"Start\"),\n            onclick: function onclick() {\n                self._eventStart();\n            }\n        });\n        this.btnStop = new _uiMisc2.default.Button({\n            id: \"btn-stop\",\n            title: (0, _localization2.default)(\"Pause\"),\n            onclick: function onclick() {\n                self._eventStop();\n            }\n        });\n        this.btnReset = new _uiMisc2.default.Button({\n            id: \"btn-reset\",\n            title: (0, _localization2.default)(\"Reset\"),\n            onclick: function onclick() {\n                self._eventReset();\n            }\n        });\n        this.btnClose = new _uiMisc2.default.Button({\n            id: \"btn-close\",\n            title: (0, _localization2.default)(\"Close\"),\n            onclick: function onclick() {\n                self.app.modal.hide();\n            }\n        });\n        _.each([this.btnLocal, this.btnFtp, this.btnCreate, this.btnStop, this.btnReset, this.btnStart, this.btnClose], function (button) {\n            self.$(\".upload-buttons\").prepend(button.$el);\n        });\n\n        // file upload\n        this.uploadbox = this.$uploadbox.uploadbox({\n            url: this.app.options.nginx_upload_path,\n            announce: function announce(index, file) {\n                self._eventAnnounce(index, file);\n            },\n            initialize: function initialize(index) {\n                return self.app.toData([self.collection.get(index)], self.history_id);\n            },\n            progress: function progress(index, percentage) {\n                self._eventProgress(index, percentage);\n            },\n            success: function success(index, message) {\n                self._eventSuccess(index, message);\n            },\n            error: function error(index, message) {\n                self._eventError(index, message);\n            },\n            complete: function complete() {\n                self._eventComplete();\n            },\n            ondragover: function ondragover() {\n                self.$uploadbox.addClass(\"highlight\");\n            },\n            ondragleave: function ondragleave() {\n                self.$uploadbox.removeClass(\"highlight\");\n            }\n        });\n\n        // add ftp file viewer\n        this.ftp = new _uiPopover2.default.View({\n            title: (0, _localization2.default)(\"FTP files\"),\n            container: this.btnFtp.$el\n        });\n\n        // select extension\n        this.select_extension = new _uiSelect2.default.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-extension\"),\n            data: _.filter(this.list_extensions, function (ext) {\n                return !ext.composite_files;\n            }),\n            value: this.options.default_extension,\n            onchange: function onchange(extension) {\n                self._changeExtension(extension);\n            }\n        });\n\n        // handle extension info popover\n        this.$(\".upload-footer-extension-info\").on(\"click\", function (e) {\n            new _uploadExtension2.default({\n                $el: $(e.target),\n                title: self.select_extension.text(),\n                extension: self.select_extension.value(),\n                list: self.list_extensions,\n                placement: \"top\"\n            });\n        }).on(\"mousedown\", function (e) {\n            e.preventDefault();\n        });\n\n        // genome extension\n        this.select_genome = new _uiSelect2.default.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-genome\"),\n            data: this.list_genomes,\n            value: this.options.default_genome,\n            onchange: function onchange(genome) {\n                self._changeGenome(genome);\n            }\n        });\n\n        // Lazy load helper\n        this.loader = new _lazyLimited2.default({\n            $container: this.$uploadbox,\n            collection: this.collection,\n            new_content: function new_content(model) {\n                var upload_row = new _defaultRow2.default(self, { model: model });\n                self.$uploadtable.find(\"> tbody:first\").append(upload_row.$el);\n                upload_row.render();\n                return upload_row;\n            }\n        });\n\n        // events\n        this.collection.on(\"remove\", function (model) {\n            self._eventRemove(model);\n        });\n        this.render();\n    },\n\n    render: function render() {\n        var message = \"\";\n        if (this.counter.announce == 0) {\n            if (this.uploadbox.compatible()) {\n                message = \"&nbsp;\";\n            } else {\n                message = \"Browser does not support Drag & Drop. Try Firefox 4+, Chrome 7+, IE 10+, Opera 12+ or Safari 6+.\";\n            }\n        } else {\n            if (this.counter.running == 0) {\n                message = \"You added \" + this.counter.announce + \" file(s) to the queue. Add more files or click 'Start' to proceed.\";\n            } else {\n                message = \"Please wait...\" + this.counter.announce + \" out of \" + this.counter.running + \" remaining.\";\n            }\n        }\n        this.$(\".upload-top-info\").html(message);\n        var enable_reset = this.counter.running == 0 && this.counter.announce + this.counter.success + this.counter.error > 0;\n        var enable_start = this.counter.running == 0 && this.counter.announce > 0;\n        var enable_sources = this.counter.running == 0;\n        var show_table = this.counter.announce + this.counter.success + this.counter.error > 0;\n        this.btnReset[enable_reset ? \"enable\" : \"disable\"]();\n        this.btnStart[enable_start ? \"enable\" : \"disable\"]();\n        this.btnStart.$el[enable_start ? \"addClass\" : \"removeClass\"](\"btn-primary\");\n        this.btnStop[this.counter.running > 0 ? \"enable\" : \"disable\"]();\n        this.btnLocal[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnCreate[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp.$el[this.ftp_upload_site ? \"show\" : \"hide\"]();\n        this.$(\".upload-table\")[show_table ? \"show\" : \"hide\"]();\n        this.$(\".upload-helper\")[show_table ? \"hide\" : \"show\"]();\n    },\n\n    /** A new file has been dropped/selected through the uploadbox plugin */\n    _eventAnnounce: function _eventAnnounce(index, file) {\n        this.counter.announce++;\n        var new_model = new _uploadModel2.default.Model({\n            id: index,\n            file_name: file.name,\n            file_size: file.size,\n            file_mode: file.mode || \"local\",\n            file_path: file.path,\n            file_data: file\n        });\n        this.render();\n        this.collection.add(new_model);\n    },\n\n    /** Progress */\n    _eventProgress: function _eventProgress(index, percentage) {\n        var it = this.collection.get(index);\n        it.set(\"percentage\", percentage);\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(percentage, it.get(\"file_size\")));\n    },\n\n    /** Success */\n    _eventSuccess: function _eventSuccess(index, message) {\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"success\" });\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(100, it.get(\"file_size\")));\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.success++;\n        this.render();\n        Galaxy.currHistoryPanel.refreshContents();\n    },\n\n    /** Error */\n    _eventError: function _eventError(index, message) {\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"error\", info: message });\n        this.ui_button.model.set({\n            percentage: this._uploadPercentage(100, it.get(\"file_size\")),\n            status: \"danger\"\n        });\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.error++;\n        this.render();\n    },\n\n    /** Queue is done */\n    _eventComplete: function _eventComplete() {\n        this.collection.each(function (model) {\n            model.get(\"status\") == \"queued\" && model.set(\"status\", \"init\");\n        });\n        this.counter.running = 0;\n        this.render();\n    },\n\n    /** Remove model from upload list */\n    _eventRemove: function _eventRemove(model) {\n        var status = model.get(\"status\");\n        if (status == \"success\") {\n            this.counter.success--;\n        } else if (status == \"error\") {\n            this.counter.error--;\n        } else {\n            this.counter.announce--;\n        }\n        this.uploadbox.remove(model.id);\n        this.render();\n    },\n\n    //\n    // events triggered by this view\n    //\n\n    /** Show/hide ftp popup */\n    _eventFtp: function _eventFtp() {\n        if (!this.ftp.visible) {\n            this.ftp.empty();\n            var self = this;\n            this.ftp.append(new _uploadFtp3.default({\n                collection: this.collection,\n                ftp_upload_site: this.ftp_upload_site,\n                onadd: function onadd(ftp_file) {\n                    return self.uploadbox.add([{\n                        mode: \"ftp\",\n                        name: ftp_file.path,\n                        size: ftp_file.size,\n                        path: ftp_file.path\n                    }]);\n                },\n                onremove: function onremove(model_index) {\n                    self.collection.remove(model_index);\n                }\n            }).$el);\n            this.ftp.show();\n        } else {\n            this.ftp.hide();\n        }\n    },\n\n    /** Create a new file */\n    _eventCreate: function _eventCreate() {\n        this.uploadbox.add([{ name: \"New File\", size: 0, mode: \"new\" }]);\n    },\n\n    /** Start upload process */\n    _eventStart: function _eventStart() {\n        if (this.counter.announce != 0 && this.counter.running == 0) {\n            // prepare upload process\n            var self = this;\n            this.upload_size = 0;\n            this.upload_completed = 0;\n            this.collection.each(function (model) {\n                if (model.get(\"status\") == \"init\") {\n                    model.set(\"status\", \"queued\");\n                    self.upload_size += model.get(\"file_size\");\n                }\n            });\n            this.ui_button.model.set({\n                percentage: 0,\n                status: \"success\"\n            });\n            this.counter.running = this.counter.announce;\n            this.history_id = this.app.currentHistory();\n\n            // package ftp files separately, and remove them from queue\n            this._uploadFtp();\n\n            // queue remaining files\n            this.uploadbox.start();\n            this.render();\n        }\n    },\n\n    /** Pause upload process */\n    _eventStop: function _eventStop() {\n        if (this.counter.running > 0) {\n            this.ui_button.model.set(\"status\", \"info\");\n            $(\".upload-top-info\").html(\"Queue will pause after completing the current file...\");\n            this.uploadbox.stop();\n        }\n    },\n\n    /** Remove all */\n    _eventReset: function _eventReset() {\n        if (this.counter.running == 0) {\n            var self = this;\n            this.collection.reset();\n            this.counter.reset();\n            this.uploadbox.reset();\n            this.select_extension.value(this.options.default_extension);\n            this.select_genome.value(this.options.default_genome);\n            this.ui_button.model.set(\"percentage\", 0);\n            this.render();\n        }\n    },\n\n    /** Update extension for all models */\n    _changeExtension: function _changeExtension(extension, defaults_only) {\n        var self = this;\n        this.collection.each(function (model) {\n            if (model.get(\"status\") == \"init\" && (model.get(\"extension\") == self.options.default_extension || !defaults_only)) {\n                model.set(\"extension\", extension);\n            }\n        });\n    },\n\n    /** Update genome for all models */\n    _changeGenome: function _changeGenome(genome, defaults_only) {\n        var self = this;\n        this.collection.each(function (model) {\n            if (model.get(\"status\") == \"init\" && (model.get(\"genome\") == self.options.default_genome || !defaults_only)) {\n                model.set(\"genome\", genome);\n            }\n        });\n    },\n\n    /** Package and upload ftp files in a single request */\n    _uploadFtp: function _uploadFtp() {\n        var self = this;\n        var list = [];\n        this.collection.each(function (model) {\n            if (model.get(\"status\") == \"queued\" && model.get(\"file_mode\") == \"ftp\") {\n                self.uploadbox.remove(model.id);\n                list.push(model);\n            }\n        });\n        if (list.length > 0) {\n            $.uploadpost({\n                data: this.app.toData(list),\n                url: this.app.options.nginx_upload_path,\n                success: function success(message) {\n                    _.each(list, function (model) {\n                        self._eventSuccess(model.id);\n                    });\n                },\n                error: function error(message) {\n                    _.each(list, function (model) {\n                        self._eventError(model.id, message);\n                    });\n                }\n            });\n        }\n    },\n\n    /** Calculate percentage of all queued uploads */\n    _uploadPercentage: function _uploadPercentage(percentage, size) {\n        return (this.upload_completed + percentage * size) / this.upload_size;\n    },\n\n    /** Template */\n    _template: function _template() {\n        return '<div class=\"upload-view-default\">' + '<div class=\"upload-top\">' + '<h6 class=\"upload-top-info\"/>' + \"</div>\" + '<div class=\"upload-box\">' + '<div class=\"upload-helper\"><i class=\"fa fa-files-o\"/>Drop files here</div>' + '<table class=\"upload-table ui-table-striped\" style=\"display: none;\">' + \"<thead>\" + \"<tr>\" + \"<th>Name</th>\" + \"<th>Size</th>\" + \"<th>Type</th>\" + \"<th>Genome</th>\" + \"<th>Settings</th>\" + \"<th>Status</th>\" + \"<th/>\" + \"</tr>\" + \"</thead>\" + \"<tbody/>\" + \"</table>\" + \"</div>\" + '<div class=\"upload-footer\">' + '<span class=\"upload-footer-title\">Type (set all):</span>' + '<span class=\"upload-footer-extension\"/>' + '<span class=\"upload-footer-extension-info upload-icon-button fa fa-search\"/> ' + '<span class=\"upload-footer-title\">Genome (set all):</span>' + '<span class=\"upload-footer-genome\"/>' + \"</div>\" + '<div class=\"upload-buttons\"/>' + \"</div>\";\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///243\n");

/***/ }),
/* 244 */
/*!**********************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/default/default-row.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uploadModel = __webpack_require__(/*! mvc/upload/upload-model */ 29);\n\nvar _uploadModel2 = _interopRequireDefault(_uploadModel);\n\nvar _uploadSettings = __webpack_require__(/*! mvc/upload/upload-settings */ 54);\n\nvar _uploadSettings2 = _interopRequireDefault(_uploadSettings);\n\nvar _uiPopover = __webpack_require__(/*! mvc/ui/ui-popover */ 15);\n\nvar _uiPopover2 = _interopRequireDefault(_uiPopover);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    /** Dictionary of upload states and associated icons */\n    status_classes: {\n        init: \"upload-icon-button fa fa-trash-o\",\n        queued: \"upload-icon fa fa-spinner fa-spin\",\n        running: \"upload-icon fa fa-spinner fa-spin\",\n        success: \"upload-icon-button fa fa-check\",\n        error: \"upload-icon-button fa fa-exclamation-triangle\"\n    },\n\n    initialize: function initialize(app, options) {\n        var self = this;\n        this.app = app;\n        this.model = options.model;\n        this.setElement(this._template(options.model));\n        this.$mode = this.$(\".upload-mode\");\n        this.$title = this.$(\".upload-title\");\n        this.$text = this.$(\".upload-text\");\n        this.$size = this.$(\".upload-size\");\n        this.$info_text = this.$(\".upload-info-text\");\n        this.$info_progress = this.$(\".upload-info-progress\");\n        this.$text_content = this.$(\".upload-text-content\");\n        this.$settings = this.$(\".upload-settings\");\n        this.$symbol = this.$(\".upload-symbol\");\n        this.$progress_bar = this.$(\".upload-progress-bar\");\n        this.$percentage = this.$(\".upload-percentage\");\n\n        // append popup to settings icon\n        this.settings = new _uiPopover2.default.View({\n            title: (0, _localization2.default)(\"Upload configuration\"),\n            container: this.$(\".upload-settings\"),\n            placement: \"bottom\"\n        });\n\n        // identify default genome and extension values\n        var default_genome = this.app.select_genome.value();\n        var default_extension = this.app.select_extension.value();\n\n        // create select genomes\n        this.select_genome = new _uiSelect2.default.View({\n            css: \"upload-genome\",\n            data: self.app.list_genomes,\n            container: this.$(\".upload-genome\"),\n            value: default_genome,\n            onchange: function onchange(genome) {\n                self.model.set(\"genome\", genome);\n            }\n        });\n\n        // create select extension\n        this.select_extension = new _uiSelect2.default.View({\n            css: \"upload-extension\",\n            data: self.app.list_extensions,\n            container: this.$(\".upload-extension\"),\n            value: default_extension,\n            onchange: function onchange(extension) {\n                self.model.set(\"extension\", extension);\n            }\n        });\n\n        // initialize genome and extension values\n        this.model.set({\n            genome: default_genome,\n            extension: default_extension\n        });\n\n        // handle click event\n        this.$symbol.on(\"click\", function () {\n            self._removeRow();\n        });\n\n        // handle extension info popover\n        this.$(\".upload-extension-info\").on(\"click\", function (e) {\n            self.app.showExtensionInfo({\n                $el: $(e.target),\n                title: self.select_extension.text(),\n                extension: self.select_extension.value()\n            });\n        }).on(\"mousedown\", function (e) {\n            e.preventDefault();\n        });\n\n        // handle settings popover\n        this.$settings.on(\"click\", function (e) {\n            self._showSettings();\n        }).on(\"mousedown\", function (e) {\n            e.preventDefault();\n        });\n\n        // handle text editing event\n        this.$text_content.on(\"change input\", function (e) {\n            self.model.set({\n                url_paste: $(e.target).val(),\n                file_size: $(e.target).val().length\n            });\n        });\n\n        // model events\n        this.listenTo(this.model, \"change:percentage\", function () {\n            self._refreshPercentage();\n        });\n        this.listenTo(this.model, \"change:status\", function () {\n            self._refreshStatus();\n        });\n        this.listenTo(this.model, \"change:info\", function () {\n            self._refreshInfo();\n        });\n        this.listenTo(this.model, \"change:genome\", function () {\n            self._refreshGenome();\n        });\n        this.listenTo(this.model, \"change:extension\", function () {\n            self._refreshExtension();\n        });\n        this.listenTo(this.model, \"change:file_size\", function () {\n            self._refreshFileSize();\n        });\n    },\n\n    render: function render() {\n        this._refreshType();\n        this._refreshPercentage();\n        this._refreshStatus();\n        this._refreshInfo();\n        this._refreshGenome();\n        this._refreshExtension();\n        this._refreshFileSize();\n    },\n\n    /** Remove view */\n    remove: function remove() {\n        this.select_genome.remove();\n        this.select_extension.remove();\n        Backbone.View.prototype.remove.apply(this);\n    },\n\n    /** Render type */\n    _refreshType: function _refreshType() {\n        var options = this.model.attributes;\n        this.$title.html(_.escape(options.file_name));\n        this.$size.html(_utils2.default.bytesToString(options.file_size));\n        this.$mode.removeClass().addClass(\"upload-mode\").addClass(\"text-primary\");\n        if (options.file_mode == \"new\") {\n            this.$text.css({\n                width: this.$el.width() - 16 + \"px\",\n                top: this.$el.height() - 8 + \"px\"\n            }).show();\n            this.$el.height(this.$el.height() - 8 + this.$text.height() + 16);\n            this.$mode.addClass(\"fa fa-edit\");\n        } else if (options.file_mode == \"local\") {\n            this.$mode.addClass(\"fa fa-laptop\");\n        } else if (options.file_mode == \"ftp\") {\n            this.$mode.addClass(\"fa fa-folder-open-o\");\n        }\n    },\n\n    /** Update extension */\n    _refreshExtension: function _refreshExtension() {\n        this.select_extension.value(this.model.get(\"extension\"));\n    },\n\n    /** Update genome */\n    _refreshGenome: function _refreshGenome() {\n        this.select_genome.value(this.model.get(\"genome\"));\n    },\n\n    /** Refresh info text */\n    _refreshInfo: function _refreshInfo() {\n        var info = this.model.get(\"info\");\n        if (info) {\n            this.$info_text.html(\"<strong>Failed: </strong>\" + info).show();\n        } else {\n            this.$info_text.hide();\n        }\n    },\n\n    /** Refresh percentage status */\n    _refreshPercentage: function _refreshPercentage() {\n        var percentage = parseInt(this.model.get(\"percentage\"));\n        this.$progress_bar.css({ width: percentage + \"%\" });\n        this.$percentage.html(percentage != 100 ? percentage + \"%\" : \"Adding to history...\");\n    },\n\n    /** Refresh status */\n    _refreshStatus: function _refreshStatus() {\n        var status = this.model.get(\"status\");\n        this.$symbol.removeClass().addClass(\"upload-symbol\").addClass(this.status_classes[status]);\n        this.model.set(\"enabled\", status == \"init\");\n        var enabled = this.model.get(\"enabled\");\n        this.$text_content.attr(\"disabled\", !enabled);\n        if (enabled) {\n            this.select_genome.enable();\n            this.select_extension.enable();\n        } else {\n            this.select_genome.disable();\n            this.select_extension.disable();\n        }\n        if (status == \"success\") {\n            this.$el.addClass(\"success\");\n            this.$percentage.html(\"100%\");\n        }\n        if (status == \"error\") {\n            this.$el.addClass(\"danger\");\n            this.$info_progress.hide();\n        }\n    },\n\n    /** Refresh file size */\n    _refreshFileSize: function _refreshFileSize() {\n        this.$size.html(_utils2.default.bytesToString(this.model.get(\"file_size\")));\n    },\n\n    /** Remove row */\n    _removeRow: function _removeRow() {\n        if ([\"init\", \"success\", \"error\"].indexOf(this.model.get(\"status\")) !== -1) {\n            this.app.collection.remove(this.model);\n        }\n    },\n\n    /** Attach file info popup */\n    _showSettings: function _showSettings() {\n        if (!this.settings.visible) {\n            this.settings.empty();\n            this.settings.append(new _uploadSettings2.default(this).$el);\n            this.settings.show();\n        } else {\n            this.settings.hide();\n        }\n    },\n\n    /** View template */\n    _template: function _template(options) {\n        return \"<tr id=\\\"upload-row-\" + options.id + \"\\\" class=\\\"upload-row\\\"><td><div class=\\\"upload-text-column\\\"><div class=\\\"upload-mode\\\"/><div class=\\\"upload-title\\\"/><div class=\\\"upload-text\\\"><div class=\\\"upload-text-info\\\">You can tell Galaxy to download data from web by entering URL in this box (one per line). You can also directly paste the contents of a file.</div><textarea class=\\\"upload-text-content form-control\\\"/></div></div></td><td><div class=\\\"upload-size\\\"/></td><td><div class=\\\"upload-extension\\\" style=\\\"float: left;\\\"/>&nbsp;&nbsp<div class=\\\"upload-extension-info upload-icon-button fa fa-search\\\"/></td><td><div class=\\\"upload-genome\\\"/></td><td><div class=\\\"upload-settings upload-icon-button fa fa-gear\\\"/></td><td><div class=\\\"upload-info\\\"><div class=\\\"upload-info-text\\\"/><div class=\\\"upload-info-progress progress\\\"><div class=\\\"upload-progress-bar progress-bar progress-bar-success\\\"/><div class=\\\"upload-percentage\\\">0%</div></div></div></td><td><div class=\\\"upload-symbol \" + this.status_classes.init + \"\\\"/></td></tr>\";\n    }\n});\n/** Renders the default uploader rows */\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///244\n");

/***/ }),
/* 245 */
/*!*************************************************!*\
  !*** ./galaxy/scripts/mvc/lazy/lazy-limited.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/** Contains helpers to limit/lazy load views for backbone views */\n\nexports.default = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.$container = options.$container;\n        this.collection = options.collection;\n        this.new_content = options.new_content;\n        this.max = options.max || 50;\n        this.content_list = {};\n        this.$message = $(\"<div/>\").addClass(\"ui-limitloader\").append(\"...only the first \" + this.max + \" entries are visible.\");\n        this.$container.append(this.$message);\n        this.listenTo(this.collection, \"reset\", this._reset, this);\n        this.listenTo(this.collection, \"add\", this._refresh, this);\n        this.listenTo(this.collection, \"remove\", this._remove, this);\n    },\n\n    /** Checks if the limit has been reached */\n    _done: function _done() {\n        var done = _.size(this.content_list) > this.max;\n        this.$message[done ? \"show\" : \"hide\"]();\n        return done;\n    },\n\n    /** Remove all content */\n    _reset: function _reset() {\n        _.each(this.content_list, function (content) {\n            content.remove();\n        });\n        this.content_list = {};\n        this.$message.hide();\n    },\n\n    /** Remove content */\n    _remove: function _remove(model) {\n        var model_id = model.id;\n        var content = this.content_list[model_id];\n        if (content) {\n            content.remove();\n            delete this.content_list[model_id];\n        }\n        this._refresh();\n    },\n\n    /** Refreshes container content by adding new views if visible */\n    _refresh: function _refresh() {\n        if (!this._done()) {\n            for (var i in this.collection.models) {\n                var model = this.collection.models[i];\n                var view = this.content_list[model.id];\n                if (!this.content_list[model.id]) {\n                    var content = this.new_content(model);\n                    this.content_list[model.id] = content;\n                    if (this._done()) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9sYXp5L2xhenktbGltaXRlZC5qcz8yN2VjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb250YWlucyBoZWxwZXJzIHRvIGxpbWl0L2xhenkgbG9hZCB2aWV3cyBmb3IgYmFja2JvbmUgdmlld3MgKi9cblxuZXhwb3J0IGRlZmF1bHQgQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLiRjb250YWluZXIgPSBvcHRpb25zLiRjb250YWluZXI7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IG9wdGlvbnMuY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uZXdfY29udGVudCA9IG9wdGlvbnMubmV3X2NvbnRlbnQ7XG4gICAgICAgIHRoaXMubWF4ID0gb3B0aW9ucy5tYXggfHwgNTA7XG4gICAgICAgIHRoaXMuY29udGVudF9saXN0ID0ge307XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UgPSAkKFwiPGRpdi8+XCIpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJ1aS1saW1pdGxvYWRlclwiKVxuICAgICAgICAgICAgLmFwcGVuZChgLi4ub25seSB0aGUgZmlyc3QgJHt0aGlzLm1heH0gZW50cmllcyBhcmUgdmlzaWJsZS5gKTtcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLmFwcGVuZCh0aGlzLiRtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmNvbGxlY3Rpb24sIFwicmVzZXRcIiwgdGhpcy5fcmVzZXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuY29sbGVjdGlvbiwgXCJhZGRcIiwgdGhpcy5fcmVmcmVzaCwgdGhpcyk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5jb2xsZWN0aW9uLCBcInJlbW92ZVwiLCB0aGlzLl9yZW1vdmUsIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKiogQ2hlY2tzIGlmIHRoZSBsaW1pdCBoYXMgYmVlbiByZWFjaGVkICovXG4gICAgX2RvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZG9uZSA9IF8uc2l6ZSh0aGlzLmNvbnRlbnRfbGlzdCkgPiB0aGlzLm1heDtcbiAgICAgICAgdGhpcy4kbWVzc2FnZVtkb25lID8gXCJzaG93XCIgOiBcImhpZGVcIl0oKTtcbiAgICAgICAgcmV0dXJuIGRvbmU7XG4gICAgfSxcblxuICAgIC8qKiBSZW1vdmUgYWxsIGNvbnRlbnQgKi9cbiAgICBfcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBfLmVhY2godGhpcy5jb250ZW50X2xpc3QsIGNvbnRlbnQgPT4ge1xuICAgICAgICAgICAgY29udGVudC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29udGVudF9saXN0ID0ge307XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuaGlkZSgpO1xuICAgIH0sXG5cbiAgICAvKiogUmVtb3ZlIGNvbnRlbnQgKi9cbiAgICBfcmVtb3ZlOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICB2YXIgbW9kZWxfaWQgPSBtb2RlbC5pZDtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmNvbnRlbnRfbGlzdFttb2RlbF9pZF07XG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICBjb250ZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29udGVudF9saXN0W21vZGVsX2lkXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgfSxcblxuICAgIC8qKiBSZWZyZXNoZXMgY29udGFpbmVyIGNvbnRlbnQgYnkgYWRkaW5nIG5ldyB2aWV3cyBpZiB2aXNpYmxlICovXG4gICAgX3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RvbmUoKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmNvbGxlY3Rpb24ubW9kZWxzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5jb2xsZWN0aW9uLm1vZGVsc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuY29udGVudF9saXN0W21vZGVsLmlkXTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudF9saXN0W21vZGVsLmlkXSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHRoaXMubmV3X2NvbnRlbnQobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRfbGlzdFttb2RlbC5pZF0gPSBjb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZG9uZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9sYXp5L2xhenktbGltaXRlZC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzREE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///245\n");

/***/ }),
/* 246 */
/*!***************************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/composite/composite-view.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uploadModel = __webpack_require__(/*! mvc/upload/upload-model */ 29);\n\nvar _uploadModel2 = _interopRequireDefault(_uploadModel);\n\nvar _compositeRow = __webpack_require__(/*! mvc/upload/composite/composite-row */ 247);\n\nvar _compositeRow2 = _interopRequireDefault(_compositeRow);\n\nvar _uploadExtension = __webpack_require__(/*! mvc/upload/upload-extension */ 56);\n\nvar _uploadExtension2 = _interopRequireDefault(_uploadExtension);\n\nvar _uiPopover = __webpack_require__(/*! mvc/ui/ui-popover */ 15);\n\nvar _uiPopover2 = _interopRequireDefault(_uiPopover);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    collection: new _uploadModel2.default.Collection(),\n    initialize: function initialize(app) {\n        var self = this;\n        this.app = app;\n        this.options = app.options;\n        this.list_extensions = app.list_extensions;\n        this.list_genomes = app.list_genomes;\n        this.ftp_upload_site = app.currentFtp();\n        this.setElement(this._template());\n\n        // create button section\n        this.btnStart = new _uiMisc2.default.Button({\n            title: (0, _localization2.default)(\"Start\"),\n            onclick: function onclick() {\n                self._eventStart();\n            }\n        });\n        this.btnClose = new _uiMisc2.default.Button({\n            title: (0, _localization2.default)(\"Close\"),\n            onclick: function onclick() {\n                self.app.modal.hide();\n            }\n        });\n\n        // append buttons to dom\n        _.each([this.btnStart, this.btnClose], function (button) {\n            self.$(\".upload-buttons\").prepend(button.$el);\n        });\n\n        // select extension\n        this.select_extension = new _uiSelect2.default.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-extension\"),\n            data: _.filter(this.list_extensions, function (ext) {\n                return ext.composite_files;\n            }),\n            onchange: function onchange(extension) {\n                self.collection.reset();\n                var details = _.findWhere(self.list_extensions, {\n                    id: extension\n                });\n                if (details && details.composite_files) {\n                    _.each(details.composite_files, function (item) {\n                        self.collection.add({\n                            id: self.collection.size(),\n                            file_desc: item.description || item.name\n                        });\n                    });\n                }\n            }\n        });\n\n        // handle extension info popover\n        this.$(\".upload-footer-extension-info\").on(\"click\", function (e) {\n            new _uploadExtension2.default({\n                $el: $(e.target),\n                title: self.select_extension.text(),\n                extension: self.select_extension.value(),\n                list: self.list_extensions,\n                placement: \"top\"\n            });\n        }).on(\"mousedown\", function (e) {\n            e.preventDefault();\n        });\n\n        // genome extension\n        this.select_genome = new _uiSelect2.default.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-genome\"),\n            data: this.list_genomes,\n            value: this.options.default_genome\n        });\n\n        // listener for collection triggers on change in composite datatype and extension selection\n        this.listenTo(this.collection, \"add\", function (model) {\n            self._eventAnnounce(model);\n        });\n        this.listenTo(this.collection, \"change add\", function () {\n            self.render();\n        });\n        this.select_extension.options.onchange(this.select_extension.value());\n        this.render();\n    },\n\n    render: function render() {\n        var model = this.collection.first();\n        if (model && model.get(\"status\") == \"running\") {\n            this.select_genome.disable();\n            this.select_extension.disable();\n        } else {\n            this.select_genome.enable();\n            this.select_extension.enable();\n        }\n        if (this.collection.where({ status: \"ready\" }).length == this.collection.length && this.collection.length > 0) {\n            this.btnStart.enable();\n            this.btnStart.$el.addClass(\"btn-primary\");\n        } else {\n            this.btnStart.disable();\n            this.btnStart.$el.removeClass(\"btn-primary\");\n        }\n        this.$(\".upload-table\")[this.collection.length > 0 ? \"show\" : \"hide\"]();\n    },\n\n    //\n    // upload events / process pipeline\n    //\n\n    /** Builds the basic ui with placeholder rows for each composite data type file */\n    _eventAnnounce: function _eventAnnounce(model) {\n        var upload_row = new _compositeRow2.default(this, { model: model });\n        this.$(\".upload-table > tbody:first\").append(upload_row.$el);\n        this.$(\".upload-table\")[this.collection.length > 0 ? \"show\" : \"hide\"]();\n        upload_row.render();\n    },\n\n    /** Start upload process */\n    _eventStart: function _eventStart() {\n        var self = this;\n        this.collection.each(function (model) {\n            model.set({\n                genome: self.select_genome.value(),\n                extension: self.select_extension.value()\n            });\n        });\n        $.uploadpost({\n            url: this.app.options.nginx_upload_path,\n            data: this.app.toData(this.collection.filter()),\n            success: function success(message) {\n                self._eventSuccess(message);\n            },\n            error: function error(message) {\n                self._eventError(message);\n            },\n            progress: function progress(percentage) {\n                self._eventProgress(percentage);\n            }\n        });\n    },\n\n    /** Refresh progress state */\n    _eventProgress: function _eventProgress(percentage) {\n        this.collection.each(function (it) {\n            it.set(\"percentage\", percentage);\n        });\n    },\n\n    /** Refresh success state */\n    _eventSuccess: function _eventSuccess(message) {\n        this.collection.each(function (it) {\n            it.set(\"status\", \"success\");\n        });\n        Galaxy.currHistoryPanel.refreshContents();\n    },\n\n    /** Refresh error state */\n    _eventError: function _eventError(message) {\n        this.collection.each(function (it) {\n            it.set({ status: \"error\", info: message });\n        });\n    },\n\n    /** Load html template */\n    _template: function _template() {\n        return '<div class=\"upload-view-composite\">' + '<div class=\"upload-top\">' + '<h6 class=\"upload-top-info\"/>' + \"</div>\" + '<div class=\"upload-box\">' + '<table class=\"upload-table ui-table-striped\" style=\"display: none;\">' + \"<thead>\" + \"<tr>\" + \"<th/>\" + \"<th/>\" + \"<th>Description</th>\" + \"<th>Name</th>\" + \"<th>Size</th>\" + \"<th>Settings</th>\" + \"<th>Status</th>\" + \"</tr>\" + \"</thead>\" + \"<tbody/>\" + \"</table>\" + \"</div>\" + '<div class=\"upload-footer\">' + '<span class=\"upload-footer-title\">Composite Type:</span>' + '<span class=\"upload-footer-extension\"/>' + '<span class=\"upload-footer-extension-info upload-icon-button fa fa-search\"/> ' + '<span class=\"upload-footer-title\">Genome/Build:</span>' + '<span class=\"upload-footer-genome\"/>' + \"</div>\" + '<div class=\"upload-buttons\"/>' + \"</div>\";\n    }\n});\n/** Renders contents of the composite uploader */\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///246\n");

/***/ }),
/* 247 */
/*!**************************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/composite/composite-row.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uploadSettings = __webpack_require__(/*! mvc/upload/upload-settings */ 54);\n\nvar _uploadSettings2 = _interopRequireDefault(_uploadSettings);\n\nvar _uploadFtp = __webpack_require__(/*! mvc/upload/upload-ftp */ 55);\n\nvar _uploadFtp2 = _interopRequireDefault(_uploadFtp);\n\nvar _uiPopover = __webpack_require__(/*! mvc/ui/ui-popover */ 15);\n\nvar _uiPopover2 = _interopRequireDefault(_uiPopover);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\n__webpack_require__(/*! utils/uploadbox */ 57);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    /** Dictionary of upload states and associated icons */\n    status_classes: {\n        init: \"upload-mode fa fa-exclamation text-primary\",\n        ready: \"upload-mode fa fa-check text-success\",\n        running: \"upload-mode fa fa-spinner fa-spin\",\n        success: \"upload-mode fa fa-check\",\n        error: \"upload-mode fa fa-exclamation-triangle\"\n    },\n\n    initialize: function initialize(app, options) {\n        var self = this;\n        this.app = app;\n        this.model = options.model;\n        this.setElement(this._template());\n        this.$source = this.$(\".upload-source\");\n        this.$settings = this.$(\".upload-settings\");\n        this.$status = this.$(\".upload-status\");\n        this.$text = this.$(\".upload-text\");\n        this.$text_content = this.$(\".upload-text-content\");\n        this.$info_text = this.$(\".upload-info-text\");\n        this.$info_progress = this.$(\".upload-info-progress\");\n        this.$file_name = this.$(\".upload-file-name\");\n        this.$file_desc = this.$(\".upload-file-desc\");\n        this.$file_size = this.$(\".upload-file-size\");\n        this.$progress_bar = this.$(\".upload-progress-bar\");\n        this.$percentage = this.$(\".upload-percentage\");\n\n        // build upload functions\n        this.uploadinput = this.$el.uploadinput({\n            ondragover: function ondragover() {\n                self.model.get(\"enabled\") && self.$el.addClass(\"warning\");\n            },\n            ondragleave: function ondragleave() {\n                self.$el.removeClass(\"warning\");\n            },\n            onchange: function onchange(files) {\n                if (self.model.get(\"status\") != \"running\" && files && files.length > 0) {\n                    self.model.reset({\n                        file_data: files[0],\n                        file_name: files[0].name,\n                        file_size: files[0].size,\n                        file_mode: files[0].mode || \"local\"\n                    });\n                    self._refreshReady();\n                }\n            }\n        });\n\n        // source selection popup\n        this.button_menu = new _uiMisc2.default.ButtonMenu({\n            icon: \"fa-caret-down\",\n            title: (0, _localization2.default)(\"Select\"),\n            pull: \"left\"\n        });\n        this.$source.append(this.button_menu.$el);\n        this.button_menu.addMenu({\n            icon: \"fa-laptop\",\n            title: (0, _localization2.default)(\"Choose local file\"),\n            onclick: function onclick() {\n                self.uploadinput.dialog();\n            }\n        });\n        if (this.app.ftp_upload_site) {\n            this.button_menu.addMenu({\n                icon: \"fa-folder-open-o\",\n                title: (0, _localization2.default)(\"Choose FTP file\"),\n                onclick: function onclick() {\n                    self._showFtp();\n                }\n            });\n        }\n        this.button_menu.addMenu({\n            icon: \"fa-edit\",\n            title: \"Paste/Fetch data\",\n            onclick: function onclick() {\n                self.model.reset({\n                    file_mode: \"new\",\n                    file_name: \"New File\"\n                });\n            }\n        });\n\n        // add ftp file viewer\n        this.ftp = new _uiPopover2.default.View({\n            title: \"Choose FTP file:\",\n            container: this.$source.find(\".ui-button-menu\"),\n            placement: \"right\"\n        });\n\n        // append popup to settings icon\n        this.settings = new _uiPopover2.default.View({\n            title: (0, _localization2.default)(\"Upload configuration\"),\n            container: this.$settings,\n            placement: \"bottom\"\n        });\n\n        // handle text editing event\n        this.$text_content.on(\"change input\", function (e) {\n            self.model.set({\n                url_paste: $(e.target).val(),\n                file_size: $(e.target).val().length\n            });\n            self._refreshReady();\n        });\n\n        // handle settings popover\n        this.$settings.on(\"click\", function (e) {\n            self._showSettings();\n        }).on(\"mousedown\", function (e) {\n            e.preventDefault();\n        });\n\n        // model events\n        this.listenTo(this.model, \"change:percentage\", function () {\n            self._refreshPercentage();\n        });\n        this.listenTo(this.model, \"change:status\", function () {\n            self._refreshStatus();\n        });\n        this.listenTo(this.model, \"change:info\", function () {\n            self._refreshInfo();\n        });\n        this.listenTo(this.model, \"change:file_name\", function () {\n            self._refreshFileName();\n        });\n        this.listenTo(this.model, \"change:file_mode\", function () {\n            self._refreshMode();\n        });\n        this.listenTo(this.model, \"change:file_size\", function () {\n            self._refreshFileSize();\n        });\n        this.listenTo(this.model, \"remove\", function () {\n            self.remove();\n        });\n        this.app.collection.on(\"reset\", function () {\n            self.remove();\n        });\n    },\n\n    render: function render() {\n        this.$el.attr(\"id\", \"upload-row-\" + this.model.id);\n        this.$file_name.html(_.escape(this.model.get(\"file_name\") || \"-\"));\n        this.$file_desc.html(this.model.get(\"file_desc\") || \"Unavailable\");\n        this.$file_size.html(_utils2.default.bytesToString(this.model.get(\"file_size\")));\n        this.$status.removeClass().addClass(this.status_classes.init);\n    },\n\n    /** Remove view */\n    remove: function remove() {\n        // call the base class remove method\n        Backbone.View.prototype.remove.apply(this);\n    },\n\n    //\n    // handle model events\n    //\n\n    /** Refresh ready or not states */\n    _refreshReady: function _refreshReady() {\n        this.app.collection.each(function (model) {\n            model.set(\"status\", model.get(\"file_size\") > 0 && \"ready\" || \"init\");\n        });\n    },\n\n    /** Refresh mode and e.g. show/hide textarea field */\n    _refreshMode: function _refreshMode() {\n        var file_mode = this.model.get(\"file_mode\");\n        if (file_mode == \"new\") {\n            this.height = this.$el.height();\n            this.$text.css({\n                width: this.$el.width() - 16 + \"px\",\n                top: this.$el.height() - 8 + \"px\"\n            }).show();\n            this.$el.height(this.$el.height() - 8 + this.$text.height() + 16);\n            this.$text_content.val(\"\").trigger(\"keyup\");\n        } else {\n            this.$el.height(this.height);\n            this.$text.hide();\n        }\n    },\n\n    /** Refresh information */\n    _refreshInfo: function _refreshInfo() {\n        var info = this.model.get(\"info\");\n        if (info) {\n            this.$info_text.html(\"<strong>Failed: </strong>\" + info).show();\n        } else {\n            this.$info_text.hide();\n        }\n    },\n\n    /** Refresh percentage */\n    _refreshPercentage: function _refreshPercentage() {\n        var percentage = parseInt(this.model.get(\"percentage\"));\n        if (percentage != 0) {\n            this.$progress_bar.css({ width: percentage + \"%\" });\n        } else {\n            this.$progress_bar.addClass(\"no-transition\");\n            this.$progress_bar.css({ width: \"0%\" });\n            this.$progress_bar[0].offsetHeight;\n            this.$progress_bar.removeClass(\"no-transition\");\n        }\n        this.$percentage.html(percentage != 100 ? percentage + \"%\" : \"Adding to history...\");\n    },\n\n    /** Refresh status */\n    _refreshStatus: function _refreshStatus() {\n        var status = this.model.get(\"status\");\n        this.$status.removeClass().addClass(this.status_classes[status]);\n        this.model.set(\"enabled\", status != \"running\");\n        this.$text_content.attr(\"disabled\", !this.model.get(\"enabled\"));\n        this.$el.removeClass(\"success danger warning\");\n        if (status == \"running\" || status == \"ready\") {\n            this.model.set(\"percentage\", 0);\n        }\n        this.$source.find(\".button\")[status == \"running\" ? \"addClass\" : \"removeClass\"](\"disabled\");\n        if (status == \"success\") {\n            this.$el.addClass(\"success\");\n            this.model.set(\"percentage\", 100);\n            this.$percentage.html(\"100%\");\n        }\n        if (status == \"error\") {\n            this.$el.addClass(\"danger\");\n            this.model.set(\"percentage\", 0);\n            this.$info_progress.hide();\n            this.$info_text.show();\n        } else {\n            this.$info_progress.show();\n            this.$info_text.hide();\n        }\n    },\n\n    /** File name */\n    _refreshFileName: function _refreshFileName() {\n        this.$file_name.html(this.model.get(\"file_name\") || \"-\");\n    },\n\n    /** File size */\n    _refreshFileSize: function _refreshFileSize() {\n        this.$file_size.html(_utils2.default.bytesToString(this.model.get(\"file_size\")));\n    },\n\n    /** Show/hide ftp popup */\n    _showFtp: function _showFtp() {\n        if (!this.ftp.visible) {\n            var self = this;\n            this.ftp.empty();\n            this.ftp.append(new _uploadFtp2.default({\n                ftp_upload_site: this.app.ftp_upload_site,\n                onchange: function onchange(ftp_file) {\n                    self.ftp.hide();\n                    if (self.model.get(\"status\") != \"running\" && ftp_file) {\n                        self.model.reset({\n                            file_mode: \"ftp\",\n                            file_name: ftp_file.path,\n                            file_size: ftp_file.size,\n                            file_path: ftp_file.path\n                        });\n                        self._refreshReady();\n                    }\n                }\n            }).$el);\n            this.ftp.show();\n        } else {\n            this.ftp.hide();\n        }\n    },\n\n    /** Show/hide settings popup */\n    _showSettings: function _showSettings() {\n        if (!this.settings.visible) {\n            this.settings.empty();\n            this.settings.append(new _uploadSettings2.default(this).$el);\n            this.settings.show();\n        } else {\n            this.settings.hide();\n        }\n    },\n\n    /** Template */\n    _template: function _template() {\n        return '<tr class=\"upload-row\">' + \"<td>\" + '<div class=\"upload-source\"/>' + '<div class=\"upload-text-column\">' + '<div class=\"upload-text\">' + '<div class=\"upload-text-info\">You can tell Galaxy to download data from web by entering URL in this box (one per line). You can also directly paste the contents of a file.</div>' + '<textarea class=\"upload-text-content form-control\"/>' + \"</div>\" + \"</div>\" + \"</td>\" + \"<td>\" + '<div class=\"upload-status\"/>' + \"</td>\" + \"<td>\" + '<div class=\"upload-file-desc upload-title\"/>' + \"</td>\" + \"<td>\" + '<div class=\"upload-file-name upload-title\"/>' + \"</td>\" + \"<td>\" + '<div class=\"upload-file-size upload-size\"/>' + \"</td>\" + '<td><div class=\"upload-settings upload-icon-button fa fa-gear\"/></td>' + \"<td>\" + '<div class=\"upload-info\">' + '<div class=\"upload-info-text\"/>' + '<div class=\"upload-info-progress progress\">' + '<div class=\"upload-progress-bar progress-bar progress-bar-success\"/>' + '<div class=\"upload-percentage\">0%</div>' + \"</div>\" + \"</div>\" + \"</td>\" + \"</tr>\";\n    }\n});\n/** Renders the composite upload row view */\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///247\n");

/***/ }),
/* 248 */
/*!*****************************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/collection/collection-view.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uploadModel = __webpack_require__(/*! mvc/upload/upload-model */ 29);\n\nvar _uploadModel2 = _interopRequireDefault(_uploadModel);\n\nvar _collectionRow = __webpack_require__(/*! mvc/upload/collection/collection-row */ 249);\n\nvar _collectionRow2 = _interopRequireDefault(_collectionRow);\n\nvar _uploadFtp = __webpack_require__(/*! mvc/upload/upload-ftp */ 55);\n\nvar _uploadFtp2 = _interopRequireDefault(_uploadFtp);\n\nvar _uploadExtension = __webpack_require__(/*! mvc/upload/upload-extension */ 56);\n\nvar _uploadExtension2 = _interopRequireDefault(_uploadExtension);\n\nvar _uiPopover = __webpack_require__(/*! mvc/ui/ui-popover */ 15);\n\nvar _uiPopover2 = _interopRequireDefault(_uiPopover);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _listCollectionCreator = __webpack_require__(/*! mvc/collection/list-collection-creator */ 58);\n\nvar _listCollectionCreator2 = _interopRequireDefault(_listCollectionCreator);\n\n__webpack_require__(/*! utils/uploadbox */ 57);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Renders contents of the collection uploader */\nexports.default = Backbone.View.extend({\n    // current upload size in bytes\n    upload_size: 0,\n\n    // contains upload row models\n    collection: new _uploadModel2.default.Collection(),\n\n    // keeps track of the current uploader state\n    counter: {\n        announce: 0,\n        success: 0,\n        error: 0,\n        running: 0,\n        reset: function reset() {\n            this.announce = this.success = this.error = this.running = 0;\n        }\n    },\n\n    initialize: function initialize(app) {\n        var self = this;\n        this.app = app;\n        this.options = app.options;\n        this.list_extensions = app.list_extensions;\n        this.list_genomes = app.list_genomes;\n        this.ui_button = app.ui_button;\n        this.ftp_upload_site = app.currentFtp();\n        this.setElement(this._template());\n\n        // append buttons to dom\n        this.btnLocal = new _uiMisc2.default.Button({\n            id: \"btn-local\",\n            title: (0, _localization2.default)(\"Choose local files\"),\n            onclick: function onclick() {\n                self.uploadbox.select();\n            },\n            icon: \"fa fa-laptop\"\n        });\n        this.btnFtp = new _uiMisc2.default.Button({\n            id: \"btn-ftp\",\n            title: (0, _localization2.default)(\"Choose FTP files\"),\n            onclick: function onclick() {\n                self._eventFtp();\n            },\n            icon: \"fa fa-folder-open-o\"\n        });\n        this.btnCreate = new _uiMisc2.default.Button({\n            id: \"btn-new\",\n            title: \"Paste/Fetch data\",\n            onclick: function onclick() {\n                self._eventCreate();\n            },\n            icon: \"fa fa-edit\"\n        });\n        this.btnStart = new _uiMisc2.default.Button({\n            id: \"btn-start\",\n            title: (0, _localization2.default)(\"Start\"),\n            onclick: function onclick() {\n                self._eventStart();\n            }\n        });\n        this.btnBuild = new _uiMisc2.default.Button({\n            id: \"btn-build\",\n            title: (0, _localization2.default)(\"Build\"),\n            onclick: function onclick() {\n                self._eventBuild();\n            }\n        });\n        this.btnStop = new _uiMisc2.default.Button({\n            id: \"btn-stop\",\n            title: (0, _localization2.default)(\"Pause\"),\n            onclick: function onclick() {\n                self._eventStop();\n            }\n        });\n        this.btnReset = new _uiMisc2.default.Button({\n            id: \"btn-reset\",\n            title: (0, _localization2.default)(\"Reset\"),\n            onclick: function onclick() {\n                self._eventReset();\n            }\n        });\n        this.btnClose = new _uiMisc2.default.Button({\n            id: \"btn-close\",\n            title: (0, _localization2.default)(\"Close\"),\n            onclick: function onclick() {\n                self.app.modal.hide();\n            }\n        });\n        _.each([this.btnLocal, this.btnFtp, this.btnCreate, this.btnStop, this.btnReset, this.btnStart, this.btnBuild, this.btnClose], function (button) {\n            self.$(\".upload-buttons\").prepend(button.$el);\n        });\n\n        // file upload\n        this.uploadbox = this.$(\".upload-box\").uploadbox({\n            url: this.app.options.nginx_upload_path,\n            announce: function announce(index, file) {\n                self._eventAnnounce(index, file);\n            },\n            initialize: function initialize(index) {\n                return self.app.toData([self.collection.get(index)], self.history_id);\n            },\n            progress: function progress(index, percentage) {\n                self._eventProgress(index, percentage);\n            },\n            success: function success(index, message) {\n                self._eventSuccess(index, message);\n            },\n            error: function error(index, message) {\n                self._eventError(index, message);\n            },\n            complete: function complete() {\n                self._eventComplete();\n            },\n            ondragover: function ondragover() {\n                self.$(\".upload-box\").addClass(\"highlight\");\n            },\n            ondragleave: function ondragleave() {\n                self.$(\".upload-box\").removeClass(\"highlight\");\n            }\n        });\n\n        // add ftp file viewer\n        this.ftp = new _uiPopover2.default.View({\n            title: (0, _localization2.default)(\"FTP files\"),\n            container: this.btnFtp.$el\n        });\n\n        // select extension\n        this.select_extension = new _uiSelect2.default.View({\n            css: \"upload-footer-selection-compressed\",\n            container: this.$(\".upload-footer-extension\"),\n            data: _.filter(this.list_extensions, function (ext) {\n                return !ext.composite_files;\n            }),\n            value: this.options.default_extension,\n            onchange: function onchange(extension) {\n                self.updateExtension(extension);\n            }\n        });\n\n        this.collectionType = \"list\";\n        this.select_collection = new _uiSelect2.default.View({\n            css: \"upload-footer-selection-compressed\",\n            container: this.$(\".upload-footer-collection-type\"),\n            data: [{ id: \"list\", text: \"List\" }, { id: \"paired\", text: \"Paired\" }, { id: \"list:paired\", text: \"List of Pairs\" }],\n            value: \"list\",\n            onchange: function onchange(collectionType) {\n                self.updateCollectionType(collectionType);\n            }\n        });\n\n        // handle extension info popover\n        this.$(\".upload-footer-extension-info\").on(\"click\", function (e) {\n            new _uploadExtension2.default({\n                $el: $(e.target),\n                title: self.select_extension.text(),\n                extension: self.select_extension.value(),\n                list: self.list_extensions,\n                placement: \"top\"\n            });\n        }).on(\"mousedown\", function (e) {\n            e.preventDefault();\n        });\n\n        // genome extension\n        this.select_genome = new _uiSelect2.default.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-genome\"),\n            data: this.list_genomes,\n            value: this.options.default_genome,\n            onchange: function onchange(genome) {\n                self.updateGenome(genome);\n            }\n        });\n\n        // events\n        this.collection.on(\"remove\", function (model) {\n            self._eventRemove(model);\n        });\n        this._updateScreen();\n    },\n\n    /** A new file has been dropped/selected through the uploadbox plugin */\n    _eventAnnounce: function _eventAnnounce(index, file) {\n        this.counter.announce++;\n        var new_model = new _uploadModel2.default.Model({\n            id: index,\n            file_name: file.name,\n            file_size: file.size,\n            file_mode: file.mode || \"local\",\n            file_path: file.path,\n            file_data: file,\n            extension: this.select_extension.value(),\n            genome: this.select_genome.value()\n        });\n        this.collection.add(new_model);\n        var upload_row = new _collectionRow2.default(this, { model: new_model });\n        this.$(\".upload-table > tbody:first\").append(upload_row.$el);\n        this._updateScreen();\n        upload_row.render();\n    },\n\n    /** Progress */\n    _eventProgress: function _eventProgress(index, percentage) {\n        var it = this.collection.get(index);\n        it.set(\"percentage\", percentage);\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(percentage, it.get(\"file_size\")));\n    },\n\n    /** Success */\n    _eventSuccess: function _eventSuccess(index, message) {\n        // var hdaId = message[\"outputs\"][0][\"id\"];\n        var hids = _.pluck(message[\"outputs\"], \"hid\");\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"success\", hids: hids });\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(100, it.get(\"file_size\")));\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.success++;\n        this._updateScreen();\n        Galaxy.currHistoryPanel.refreshContents();\n    },\n\n    /** Error */\n    _eventError: function _eventError(index, message) {\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"error\", info: message });\n        this.ui_button.model.set({\n            percentage: this._uploadPercentage(100, it.get(\"file_size\")),\n            status: \"danger\"\n        });\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.error++;\n        this._updateScreen();\n    },\n\n    /** Queue is done */\n    _eventComplete: function _eventComplete() {\n        this.collection.each(function (model) {\n            model.get(\"status\") == \"queued\" && model.set(\"status\", \"init\");\n        });\n        this.counter.running = 0;\n        this._updateScreen();\n    },\n\n    _eventBuild: function _eventBuild() {\n        var allHids = [];\n        _.forEach(this.collection.models, function (upload) {\n            allHids.push.apply(allHids, upload.get(\"hids\"));\n        });\n        var models = _.map(allHids, function (hid) {\n            return Galaxy.currHistoryPanel.collection.getByHid(hid);\n        });\n        var selection = new Galaxy.currHistoryPanel.collection.constructor(models);\n        // I'm building the selection wrong because I need to set this historyId directly.\n        selection.historyId = Galaxy.currHistoryPanel.collection.historyId;\n        Galaxy.currHistoryPanel.buildCollection(this.collectionType, selection, true);\n        this.counter.running = 0;\n        this._updateScreen();\n        this._eventReset();\n        this.app.modal.hide();\n    },\n\n    /** Remove model from upload list */\n    _eventRemove: function _eventRemove(model) {\n        var status = model.get(\"status\");\n        if (status == \"success\") {\n            this.counter.success--;\n        } else if (status == \"error\") {\n            this.counter.error--;\n        } else {\n            this.counter.announce--;\n        }\n        this.uploadbox.remove(model.id);\n        this._updateScreen();\n    },\n\n    //\n    // events triggered by this view\n    //\n\n    /** Show/hide ftp popup */\n    _eventFtp: function _eventFtp() {\n        if (!this.ftp.visible) {\n            this.ftp.empty();\n            var self = this;\n            this.ftp.append(new _uploadFtp2.default({\n                collection: this.collection,\n                ftp_upload_site: this.ftp_upload_site,\n                onadd: function onadd(ftp_file) {\n                    return self.uploadbox.add([{\n                        mode: \"ftp\",\n                        name: ftp_file.path,\n                        size: ftp_file.size,\n                        path: ftp_file.path\n                    }]);\n                },\n                onremove: function onremove(model_index) {\n                    self.collection.remove(model_index);\n                }\n            }).$el);\n            this.ftp.show();\n        } else {\n            this.ftp.hide();\n        }\n    },\n\n    /** Create a new file */\n    _eventCreate: function _eventCreate() {\n        this.uploadbox.add([{ name: \"New File\", size: 0, mode: \"new\" }]);\n    },\n\n    /** Start upload process */\n    _eventStart: function _eventStart() {\n        if (this.counter.announce == 0 || this.counter.running > 0) {\n            return;\n        }\n        var self = this;\n        this.upload_size = 0;\n        this.upload_completed = 0;\n        this.collection.each(function (model) {\n            if (model.get(\"status\") == \"init\") {\n                model.set(\"status\", \"queued\");\n                self.upload_size += model.get(\"file_size\");\n            }\n        });\n        this.ui_button.model.set({ percentage: 0, status: \"success\" });\n        this.counter.running = this.counter.announce;\n        this.history_id = this.app.currentHistory();\n        this.uploadbox.start();\n        this._updateScreen();\n    },\n\n    /** Pause upload process */\n    _eventStop: function _eventStop() {\n        if (this.counter.running > 0) {\n            this.ui_button.model.set(\"status\", \"info\");\n            $(\".upload-top-info\").html(\"Queue will pause after completing the current file...\");\n            this.uploadbox.stop();\n        }\n    },\n\n    /** Remove all */\n    _eventReset: function _eventReset() {\n        if (this.counter.running == 0) {\n            this.collection.reset();\n            this.counter.reset();\n            this.uploadbox.reset();\n            this.select_extension.value(this.options.default_extension);\n            this.select_genome.value(this.options.default_genome);\n            this.ui_button.model.set(\"percentage\", 0);\n            this._updateScreen();\n        }\n    },\n\n    /** Update extension for all models */\n    updateExtension: function updateExtension(extension, defaults_only) {\n        var self = this;\n        this.collection.each(function (model) {\n            if (model.get(\"status\") == \"init\" && (model.get(\"extension\") == self.options.default_extension || !defaults_only)) {\n                model.set(\"extension\", extension);\n            }\n        });\n    },\n\n    /** Update collection type */\n    updateCollectionType: function updateCollectionType(collectionType) {\n        var self = this;\n        this.collectionType = collectionType;\n    },\n\n    /** Update genome for all models */\n    updateGenome: function updateGenome(genome, defaults_only) {\n        var self = this;\n        this.collection.each(function (model) {\n            if (model.get(\"status\") == \"init\" && (model.get(\"genome\") == self.options.default_genome || !defaults_only)) {\n                model.set(\"genome\", genome);\n            }\n        });\n    },\n\n    /** Set screen */\n    _updateScreen: function _updateScreen() {\n        var message = \"\";\n        if (this.counter.announce == 0) {\n            if (this.uploadbox.compatible()) {\n                message = \"&nbsp;\";\n            } else {\n                message = \"Browser does not support Drag & Drop. Try Firefox 4+, Chrome 7+, IE 10+, Opera 12+ or Safari 6+.\";\n            }\n        } else {\n            if (this.counter.running == 0) {\n                message = \"You added \" + this.counter.announce + \" file(s) to the queue. Add more files or click 'Start' to proceed.\";\n            } else {\n                message = \"Please wait...\" + this.counter.announce + \" out of \" + this.counter.running + \" remaining.\";\n            }\n        }\n        this.$(\".upload-top-info\").html(message);\n        var enable_reset = this.counter.running == 0 && this.counter.announce + this.counter.success + this.counter.error > 0;\n        var enable_start = this.counter.running == 0 && this.counter.announce > 0;\n        var enable_build = this.counter.running == 0 && this.counter.announce == 0 && this.counter.success > 0 && this.counter.error == 0;\n        var enable_sources = this.counter.running == 0;\n        var show_table = this.counter.announce + this.counter.success + this.counter.error > 0;\n        this.btnReset[enable_reset ? \"enable\" : \"disable\"]();\n        this.btnStart[enable_start ? \"enable\" : \"disable\"]();\n        this.btnStart.$el[enable_start ? \"addClass\" : \"removeClass\"](\"btn-primary\");\n        this.btnBuild[enable_build ? \"enable\" : \"disable\"]();\n        this.btnBuild.$el[enable_build ? \"addClass\" : \"removeClass\"](\"btn-primary\");\n        this.btnStop[this.counter.running > 0 ? \"enable\" : \"disable\"]();\n        this.btnLocal[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnCreate[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp.$el[this.ftp_upload_site ? \"show\" : \"hide\"]();\n        this.$(\".upload-table\")[show_table ? \"show\" : \"hide\"]();\n        this.$(\".upload-helper\")[show_table ? \"hide\" : \"show\"]();\n    },\n\n    /** Calculate percentage of all queued uploads */\n    _uploadPercentage: function _uploadPercentage(percentage, size) {\n        return (this.upload_completed + percentage * size) / this.upload_size;\n    },\n\n    /** Template */\n    _template: function _template() {\n        return '<div class=\"upload-view-default\">' + '<div class=\"upload-top\">' + '<h6 class=\"upload-top-info\"/>' + \"</div>\" + '<div class=\"upload-box\">' + '<div class=\"upload-helper\"><i class=\"fa fa-files-o\"/>Drop files here</div>' + '<table class=\"upload-table ui-table-striped\" style=\"display: none;\">' + \"<thead>\" + \"<tr>\" + \"<th>Name</th>\" + \"<th>Size</th>\" + \"<th>Status</th>\" + \"<th/>\" + \"</tr>\" + \"</thead>\" + \"<tbody/>\" + \"</table>\" + \"</div>\" + '<div class=\"upload-footer\">' + '<span class=\"upload-footer-title-compressed\">Collection Type:</span>' + '<span class=\"upload-footer-collection-type\"/>' + '<span class=\"upload-footer-title-compressed\">File Type:</span>' + '<span class=\"upload-footer-extension\"/>' + '<span class=\"upload-footer-extension-info upload-icon-button fa fa-search\"/> ' + '<span class=\"upload-footer-title-compressed\">Genome (set all):</span>' + '<span class=\"upload-footer-genome\"/>' + \"</div>\" + '<div class=\"upload-buttons\"/>' + \"</div>\";\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///248\n");

/***/ }),
/* 249 */
/*!****************************************************************!*\
  !*** ./galaxy/scripts/mvc/upload/collection/collection-row.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uploadModel = __webpack_require__(/*! mvc/upload/upload-model */ 29);\n\nvar _uploadModel2 = _interopRequireDefault(_uploadModel);\n\nvar _uploadSettings = __webpack_require__(/*! mvc/upload/upload-settings */ 54);\n\nvar _uploadSettings2 = _interopRequireDefault(_uploadSettings);\n\nvar _uiPopover = __webpack_require__(/*! mvc/ui/ui-popover */ 15);\n\nvar _uiPopover2 = _interopRequireDefault(_uiPopover);\n\nvar _uiSelect = __webpack_require__(/*! mvc/ui/ui-select */ 10);\n\nvar _uiSelect2 = _interopRequireDefault(_uiSelect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = Backbone.View.extend({\n    /** Dictionary of upload states and associated icons */\n    status_classes: {\n        init: \"upload-icon-button fa fa-trash-o\",\n        queued: \"upload-icon fa fa-spinner fa-spin\",\n        running: \"upload-icon fa fa-spinner fa-spin\",\n        success: \"upload-icon-button fa fa-check\",\n        error: \"upload-icon-button fa fa-exclamation-triangle\"\n    },\n\n    initialize: function initialize(app, options) {\n        var self = this;\n        this.app = app;\n        this.model = options.model;\n        this.setElement(this._template(options.model));\n        this.$mode = this.$(\".upload-mode\");\n        this.$title = this.$(\".upload-title-extended\");\n        this.$text = this.$(\".upload-text\");\n        this.$size = this.$(\".upload-size\");\n        this.$info_text = this.$(\".upload-info-text\");\n        this.$info_progress = this.$(\".upload-info-progress\");\n        this.$text_content = this.$(\".upload-text-content\");\n        this.$symbol = this.$(\".upload-symbol\");\n        this.$progress_bar = this.$(\".upload-progress-bar\");\n        this.$percentage = this.$(\".upload-percentage\");\n\n        // append popup to settings icon\n        this.settings = new _uiPopover2.default.View({\n            title: (0, _localization2.default)(\"Upload configuration\"),\n            container: this.$(\".upload-settings\"),\n            placement: \"bottom\"\n        });\n\n        // identify default genome and extension values\n        var default_genome = this.app.select_genome.value();\n        var default_extension = this.app.select_extension.value();\n\n        // handle click event\n        this.$symbol.on(\"click\", function () {\n            self._removeRow();\n        });\n\n        // handle text editing event\n        this.$text_content.on(\"change input\", function (e) {\n            self.model.set({\n                url_paste: $(e.target).val(),\n                file_size: $(e.target).val().length\n            });\n        });\n\n        // model events\n        this.listenTo(this.model, \"change:percentage\", function () {\n            self._refreshPercentage();\n        });\n        this.listenTo(this.model, \"change:status\", function () {\n            self._refreshStatus();\n        });\n        this.listenTo(this.model, \"change:info\", function () {\n            self._refreshInfo();\n        });\n        this.listenTo(this.model, \"change:file_size\", function () {\n            self._refreshFileSize();\n        });\n        this.listenTo(this.model, \"remove\", function () {\n            self.remove();\n        });\n        this.app.collection.on(\"reset\", function () {\n            self.remove();\n        });\n    },\n\n    render: function render() {\n        var options = this.model.attributes;\n        this.$title.html(_.escape(options.file_name));\n        this.$size.html(_utils2.default.bytesToString(options.file_size));\n        this.$mode.removeClass().addClass(\"upload-mode\").addClass(\"text-primary\");\n        if (options.file_mode == \"new\") {\n            this.$text.css({\n                width: this.$el.width() - 16 + \"px\",\n                top: this.$el.height() - 8 + \"px\"\n            }).show();\n            this.$el.height(this.$el.height() - 8 + this.$text.height() + 16);\n            this.$mode.addClass(\"fa fa-edit\");\n        } else if (options.file_mode == \"local\") {\n            this.$mode.addClass(\"fa fa-laptop\");\n        } else if (options.file_mode == \"ftp\") {\n            this.$mode.addClass(\"fa fa-folder-open-o\");\n        }\n    },\n\n    /** Refresh info text */\n    _refreshInfo: function _refreshInfo() {\n        var info = this.model.get(\"info\");\n        if (info) {\n            this.$info_text.html(\"<strong>Failed: </strong>\" + info).show();\n        } else {\n            this.$info_text.hide();\n        }\n    },\n\n    /** Refresh percentage status */\n    _refreshPercentage: function _refreshPercentage() {\n        var percentage = parseInt(this.model.get(\"percentage\"));\n        this.$progress_bar.css({ width: percentage + \"%\" });\n        this.$percentage.html(percentage != 100 ? percentage + \"%\" : \"Adding to history...\");\n    },\n\n    /** Refresh status */\n    _refreshStatus: function _refreshStatus() {\n        var status = this.model.get(\"status\");\n        this.$symbol.removeClass().addClass(\"upload-symbol\").addClass(this.status_classes[status]);\n        this.model.set(\"enabled\", status == \"init\");\n        var enabled = this.model.get(\"enabled\");\n        this.$text_content.attr(\"disabled\", !enabled);\n        if (status == \"success\") {\n            this.$el.addClass(\"success\");\n            this.$percentage.html(\"100%\");\n        }\n        if (status == \"error\") {\n            this.$el.addClass(\"danger\");\n            this.$info_progress.hide();\n        }\n    },\n\n    /** Refresh file size */\n    _refreshFileSize: function _refreshFileSize() {\n        this.$size.html(_utils2.default.bytesToString(this.model.get(\"file_size\")));\n    },\n\n    /** Remove row */\n    _removeRow: function _removeRow() {\n        if ([\"init\", \"success\", \"error\"].indexOf(this.model.get(\"status\")) !== -1) {\n            this.app.collection.remove(this.model);\n        }\n    },\n\n    /** Attach file info popup */\n    _showSettings: function _showSettings() {\n        if (!this.settings.visible) {\n            this.settings.empty();\n            this.settings.append(new _uploadSettings2.default(this).$el);\n            this.settings.show();\n        } else {\n            this.settings.hide();\n        }\n    },\n\n    /** View template */\n    _template: function _template(options) {\n        return \"<tr id=\\\"upload-row-\" + options.id + \"\\\" class=\\\"upload-row\\\"><td><div class=\\\"upload-text-column\\\"><div class=\\\"upload-mode\\\"/><div class=\\\"upload-title-extended\\\"/><div class=\\\"upload-text\\\"><div class=\\\"upload-text-info\\\">You can tell Galaxy to download data from web by entering URL in this box (one per line). You can also directly paste the contents of a file.</div><textarea class=\\\"upload-text-content form-control\\\"/></div></div></td><td><div class=\\\"upload-size\\\"/></td><td><div class=\\\"upload-info\\\"><div class=\\\"upload-info-text\\\"/><div class=\\\"upload-info-progress progress\\\"><div class=\\\"upload-progress-bar progress-bar progress-bar-success\\\"/><div class=\\\"upload-percentage\\\">0%</div></div></div></td><td><div class=\\\"upload-symbol \" + this.status_classes.init + \"\\\"/></td></tr>\";\n    }\n});\n/** Renders the collection uploader rows */\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///249\n");

/***/ }),
/* 250 */
/*!*****************************************************!*\
  !*** ./galaxy/scripts/apps/panels/history-panel.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _optionsMenu = __webpack_require__(/*! mvc/history/options-menu */ 251);\n\nvar _optionsMenu2 = _interopRequireDefault(_optionsMenu);\n\nvar _historyViewEditCurrent = __webpack_require__(/*! mvc/history/history-view-edit-current */ 252);\n\nvar _historyViewEditCurrent2 = _interopRequireDefault(_historyViewEditCurrent);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** the right hand panel in the analysis page that shows the current history */\nvar HistoryPanel = Backbone.View.extend({\n    initialize: function initialize(page, options) {\n        var self = this;\n        this.userIsAnonymous = Galaxy.user.isAnonymous();\n        this.allow_user_dataset_purge = options.config.allow_user_dataset_purge;\n        this.root = options.root;\n\n        // view of the current history\n        this.historyView = new _historyViewEditCurrent2.default.CurrentHistoryView({\n            className: _historyViewEditCurrent2.default.CurrentHistoryView.prototype.className + \" middle\",\n            purgeAllowed: this.allow_user_dataset_purge,\n            linkTarget: \"galaxy_main\"\n        });\n\n        // add history panel to Galaxy object\n        Galaxy.currHistoryPanel = this.historyView;\n        Galaxy.currHistoryPanel.listenToGalaxy(Galaxy);\n\n        // build buttons\n        this.buttonRefresh = new _uiMisc2.default.ButtonLink({\n            id: \"history-refresh-button\",\n            title: (0, _localization2.default)(\"Refresh history\"),\n            cls: \"panel-header-button\",\n            icon: \"fa fa-refresh\",\n            onclick: function onclick() {\n                self.historyView.loadCurrentHistory();\n            }\n        });\n        this.buttonOptions = new _uiMisc2.default.ButtonLink({\n            id: \"history-options-button\",\n            title: (0, _localization2.default)(\"History options\"),\n            cls: \"panel-header-button\",\n            target: \"galaxy_main\",\n            icon: \"fa fa-cog\",\n            href: this.root + \"root/history_options\"\n        });\n        this.buttonViewMulti = new _uiMisc2.default.ButtonLink({\n            id: \"history-view-multi-button\",\n            title: (0, _localization2.default)(\"View all histories\"),\n            cls: \"panel-header-button\",\n            icon: \"fa fa-columns\",\n            href: this.root + \"history/view_multiple\"\n        });\n\n        // define components\n        this.model = new Backbone.Model({\n            cls: \"history-right-panel\",\n            title: (0, _localization2.default)(\"History\"),\n            buttons: [this.buttonRefresh, this.buttonOptions, this.buttonViewMulti]\n        });\n\n        // build body template and connect history view\n        this.setElement(this._template());\n        this.historyView.setElement(this.$el);\n        this.historyView.connectToQuotaMeter(Galaxy.quotaMeter);\n        this.historyView.loadCurrentHistory();\n\n        // fetch to update the quota meter adding 'current' for any anon-user's id\n        Galaxy.listenTo(this.historyView, \"history-size-change\", function () {\n            Galaxy.user.fetch({\n                url: Galaxy.user.urlRoot() + \"/\" + (Galaxy.user.id || \"current\")\n            });\n        });\n    },\n\n    render: function render() {\n        this.optionsMenu = (0, _optionsMenu2.default)(this.buttonOptions.$el, {\n            anonymous: this.userIsAnonymous,\n            purgeAllowed: this.allow_user_dataset_purge,\n            root: this.root\n        });\n        this.buttonViewMulti.$el[!this.userIsAnonymous ? \"show\" : \"hide\"]();\n    },\n\n    /** add history view div */\n    _template: function _template(data) {\n        return ['<div id=\"current-history-panel\" class=\"history-panel middle\"/>'].join(\"\");\n    },\n\n    toString: function toString() {\n        return \"historyPanel\";\n    }\n});\n\nexports.default = HistoryPanel;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL2FwcHMvcGFuZWxzL2hpc3RvcnktcGFuZWwuanM/ZDY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVWkgZnJvbSBcIm12Yy91aS91aS1taXNjXCI7XG5pbXBvcnQgaGlzdG9yeU9wdGlvbnNNZW51IGZyb20gXCJtdmMvaGlzdG9yeS9vcHRpb25zLW1lbnVcIjtcbmltcG9ydCBDdXJyZW50SGlzdG9yeVZpZXcgZnJvbSBcIm12Yy9oaXN0b3J5L2hpc3Rvcnktdmlldy1lZGl0LWN1cnJlbnRcIjtcbmltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG5cbi8qKiB0aGUgcmlnaHQgaGFuZCBwYW5lbCBpbiB0aGUgYW5hbHlzaXMgcGFnZSB0aGF0IHNob3dzIHRoZSBjdXJyZW50IGhpc3RvcnkgKi9cbnZhciBIaXN0b3J5UGFuZWwgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGFnZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMudXNlcklzQW5vbnltb3VzID0gR2FsYXh5LnVzZXIuaXNBbm9ueW1vdXMoKTtcbiAgICAgICAgdGhpcy5hbGxvd191c2VyX2RhdGFzZXRfcHVyZ2UgPSBvcHRpb25zLmNvbmZpZy5hbGxvd191c2VyX2RhdGFzZXRfcHVyZ2U7XG4gICAgICAgIHRoaXMucm9vdCA9IG9wdGlvbnMucm9vdDtcblxuICAgICAgICAvLyB2aWV3IG9mIHRoZSBjdXJyZW50IGhpc3RvcnlcbiAgICAgICAgdGhpcy5oaXN0b3J5VmlldyA9IG5ldyBDdXJyZW50SGlzdG9yeVZpZXcuQ3VycmVudEhpc3RvcnlWaWV3KHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogYCR7Q3VycmVudEhpc3RvcnlWaWV3LkN1cnJlbnRIaXN0b3J5Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lfSBtaWRkbGVgLFxuICAgICAgICAgICAgcHVyZ2VBbGxvd2VkOiB0aGlzLmFsbG93X3VzZXJfZGF0YXNldF9wdXJnZSxcbiAgICAgICAgICAgIGxpbmtUYXJnZXQ6IFwiZ2FsYXh5X21haW5cIlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgaGlzdG9yeSBwYW5lbCB0byBHYWxheHkgb2JqZWN0XG4gICAgICAgIEdhbGF4eS5jdXJySGlzdG9yeVBhbmVsID0gdGhpcy5oaXN0b3J5VmlldztcbiAgICAgICAgR2FsYXh5LmN1cnJIaXN0b3J5UGFuZWwubGlzdGVuVG9HYWxheHkoR2FsYXh5KTtcblxuICAgICAgICAvLyBidWlsZCBidXR0b25zXG4gICAgICAgIHRoaXMuYnV0dG9uUmVmcmVzaCA9IG5ldyBVaS5CdXR0b25MaW5rKHtcbiAgICAgICAgICAgIGlkOiBcImhpc3RvcnktcmVmcmVzaC1idXR0b25cIixcbiAgICAgICAgICAgIHRpdGxlOiBfbChcIlJlZnJlc2ggaGlzdG9yeVwiKSxcbiAgICAgICAgICAgIGNsczogXCJwYW5lbC1oZWFkZXItYnV0dG9uXCIsXG4gICAgICAgICAgICBpY29uOiBcImZhIGZhLXJlZnJlc2hcIixcbiAgICAgICAgICAgIG9uY2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuaGlzdG9yeVZpZXcubG9hZEN1cnJlbnRIaXN0b3J5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJ1dHRvbk9wdGlvbnMgPSBuZXcgVWkuQnV0dG9uTGluayh7XG4gICAgICAgICAgICBpZDogXCJoaXN0b3J5LW9wdGlvbnMtYnV0dG9uXCIsXG4gICAgICAgICAgICB0aXRsZTogX2woXCJIaXN0b3J5IG9wdGlvbnNcIiksXG4gICAgICAgICAgICBjbHM6IFwicGFuZWwtaGVhZGVyLWJ1dHRvblwiLFxuICAgICAgICAgICAgdGFyZ2V0OiBcImdhbGF4eV9tYWluXCIsXG4gICAgICAgICAgICBpY29uOiBcImZhIGZhLWNvZ1wiLFxuICAgICAgICAgICAgaHJlZjogYCR7dGhpcy5yb290fXJvb3QvaGlzdG9yeV9vcHRpb25zYFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5idXR0b25WaWV3TXVsdGkgPSBuZXcgVWkuQnV0dG9uTGluayh7XG4gICAgICAgICAgICBpZDogXCJoaXN0b3J5LXZpZXctbXVsdGktYnV0dG9uXCIsXG4gICAgICAgICAgICB0aXRsZTogX2woXCJWaWV3IGFsbCBoaXN0b3JpZXNcIiksXG4gICAgICAgICAgICBjbHM6IFwicGFuZWwtaGVhZGVyLWJ1dHRvblwiLFxuICAgICAgICAgICAgaWNvbjogXCJmYSBmYS1jb2x1bW5zXCIsXG4gICAgICAgICAgICBocmVmOiBgJHt0aGlzLnJvb3R9aGlzdG9yeS92aWV3X211bHRpcGxlYFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBkZWZpbmUgY29tcG9uZW50c1xuICAgICAgICB0aGlzLm1vZGVsID0gbmV3IEJhY2tib25lLk1vZGVsKHtcbiAgICAgICAgICAgIGNsczogXCJoaXN0b3J5LXJpZ2h0LXBhbmVsXCIsXG4gICAgICAgICAgICB0aXRsZTogX2woXCJIaXN0b3J5XCIpLFxuICAgICAgICAgICAgYnV0dG9uczogW3RoaXMuYnV0dG9uUmVmcmVzaCwgdGhpcy5idXR0b25PcHRpb25zLCB0aGlzLmJ1dHRvblZpZXdNdWx0aV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYnVpbGQgYm9keSB0ZW1wbGF0ZSBhbmQgY29ubmVjdCBoaXN0b3J5IHZpZXdcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KHRoaXMuX3RlbXBsYXRlKCkpO1xuICAgICAgICB0aGlzLmhpc3RvcnlWaWV3LnNldEVsZW1lbnQodGhpcy4kZWwpO1xuICAgICAgICB0aGlzLmhpc3RvcnlWaWV3LmNvbm5lY3RUb1F1b3RhTWV0ZXIoR2FsYXh5LnF1b3RhTWV0ZXIpO1xuICAgICAgICB0aGlzLmhpc3RvcnlWaWV3LmxvYWRDdXJyZW50SGlzdG9yeSgpO1xuXG4gICAgICAgIC8vIGZldGNoIHRvIHVwZGF0ZSB0aGUgcXVvdGEgbWV0ZXIgYWRkaW5nICdjdXJyZW50JyBmb3IgYW55IGFub24tdXNlcidzIGlkXG4gICAgICAgIEdhbGF4eS5saXN0ZW5Ubyh0aGlzLmhpc3RvcnlWaWV3LCBcImhpc3Rvcnktc2l6ZS1jaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgICAgICAgR2FsYXh5LnVzZXIuZmV0Y2goe1xuICAgICAgICAgICAgICAgIHVybDogYCR7R2FsYXh5LnVzZXIudXJsUm9vdCgpfS8ke0dhbGF4eS51c2VyLmlkIHx8IFwiY3VycmVudFwifWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zTWVudSA9IGhpc3RvcnlPcHRpb25zTWVudSh0aGlzLmJ1dHRvbk9wdGlvbnMuJGVsLCB7XG4gICAgICAgICAgICBhbm9ueW1vdXM6IHRoaXMudXNlcklzQW5vbnltb3VzLFxuICAgICAgICAgICAgcHVyZ2VBbGxvd2VkOiB0aGlzLmFsbG93X3VzZXJfZGF0YXNldF9wdXJnZSxcbiAgICAgICAgICAgIHJvb3Q6IHRoaXMucm9vdFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5idXR0b25WaWV3TXVsdGkuJGVsWyF0aGlzLnVzZXJJc0Fub255bW91cyA/IFwic2hvd1wiIDogXCJoaWRlXCJdKCk7XG4gICAgfSxcblxuICAgIC8qKiBhZGQgaGlzdG9yeSB2aWV3IGRpdiAqL1xuICAgIF90ZW1wbGF0ZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICByZXR1cm4gWyc8ZGl2IGlkPVwiY3VycmVudC1oaXN0b3J5LXBhbmVsXCIgY2xhc3M9XCJoaXN0b3J5LXBhbmVsIG1pZGRsZVwiLz4nXS5qb2luKFwiXCIpO1xuICAgIH0sXG5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcImhpc3RvcnlQYW5lbFwiO1xuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIaXN0b3J5UGFuZWw7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvYXBwcy9wYW5lbHMvaGlzdG9yeS1wYW5lbC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBakZBO0FBQ0E7QUFtRkE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///250\n");

/***/ }),
/* 251 */
/*!****************************************************!*\
  !*** ./galaxy/scripts/mvc/history/options-menu.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _popupMenu = __webpack_require__(/*! mvc/ui/popup-menu */ 42);\n\nvar _popupMenu2 = _interopRequireDefault(_popupMenu);\n\nvar _copyDialog = __webpack_require__(/*! mvc/history/copy-dialog */ 113);\n\nvar _copyDialog2 = _interopRequireDefault(_copyDialog);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _webhooks = __webpack_require__(/*! mvc/webhooks */ 34);\n\nvar _webhooks2 = _interopRequireDefault(_webhooks);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ============================================================================\nvar menu = [{\n    html: (0, _localization2.default)(\"History Lists\"),\n    header: true\n}, {\n    html: (0, _localization2.default)(\"Saved Histories\"),\n    href: \"histories/list\",\n    target: \"_top\"\n}, {\n    html: (0, _localization2.default)(\"Histories Shared with Me\"),\n    href: \"histories/list_shared\",\n    target: \"_top\"\n}, {\n    html: (0, _localization2.default)(\"Current History\"),\n    header: true,\n    anon: true\n}, {\n    html: (0, _localization2.default)(\"Create New\"),\n    func: function func() {\n        if (Galaxy && Galaxy.currHistoryPanel) {\n            Galaxy.currHistoryPanel.createNewHistory();\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Copy History\"),\n    func: function func() {\n        (0, _copyDialog2.default)(Galaxy.currHistoryPanel.model).done(function () {\n            Galaxy.currHistoryPanel.loadCurrentHistory();\n        });\n    }\n}, {\n    html: (0, _localization2.default)(\"Share or Publish\"),\n    href: \"history/sharing\"\n}, {\n    html: (0, _localization2.default)(\"Show Structure\"),\n    href: \"history/display_structured\",\n    anon: true\n}, {\n    html: (0, _localization2.default)(\"Extract Workflow\"),\n    href: \"workflow/build_from_current_history\"\n}, {\n    html: (0, _localization2.default)(\"Delete\"),\n    anon: true,\n    func: function func() {\n        if (Galaxy && Galaxy.currHistoryPanel && confirm((0, _localization2.default)(\"Really delete the current history?\"))) {\n            Galaxy.currHistoryPanel.model._delete().done(function () {\n                Galaxy.currHistoryPanel.loadCurrentHistory();\n            });\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Delete Permanently\"),\n    purge: true,\n    anon: true,\n    func: function func() {\n        if (Galaxy && Galaxy.currHistoryPanel && confirm((0, _localization2.default)(\"Really delete the current history permanently? This cannot be undone.\"))) {\n            Galaxy.currHistoryPanel.model.purge().done(function () {\n                Galaxy.currHistoryPanel.loadCurrentHistory();\n            });\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Dataset Actions\"),\n    header: true,\n    anon: true\n}, {\n    html: (0, _localization2.default)(\"Copy Datasets\"),\n    href: \"dataset/copy_datasets\"\n}, {\n    html: (0, _localization2.default)(\"Dataset Security\"),\n    func: function func() {\n        if (Galaxy && Galaxy.currHistoryPanel && Galaxy.router) {\n            Galaxy.router.push(\"/histories/permissions?id=\" + Galaxy.currHistoryPanel.model.id);\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Resume Paused Jobs\"),\n    href: \"history/resume_paused_jobs?current=True\",\n    anon: true\n}, {\n    html: (0, _localization2.default)(\"Collapse Expanded Datasets\"),\n    func: function func() {\n        if (Galaxy && Galaxy.currHistoryPanel) {\n            Galaxy.currHistoryPanel.collapseAll();\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Unhide Hidden Datasets\"),\n    anon: true,\n    func: function func() {\n        // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n        if (Galaxy && Galaxy.currHistoryPanel && confirm((0, _localization2.default)(\"Really unhide all hidden datasets?\"))) {\n            $.post(Galaxy.root + \"history/adjust_hidden\", { user_action: \"unhide\" }, function () {\n                Galaxy.currHistoryPanel.loadCurrentHistory();\n            });\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Delete Hidden Datasets\"),\n    anon: true,\n    func: function func() {\n        // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n        if (Galaxy && Galaxy.currHistoryPanel && confirm((0, _localization2.default)(\"Really delete all hidden datasets?\"))) {\n            $.post(Galaxy.root + \"history/adjust_hidden\", { user_action: \"delete\" }, function () {\n                Galaxy.currHistoryPanel.loadCurrentHistory();\n            });\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Purge Deleted Datasets\"),\n    confirm: (0, _localization2.default)(\"Really delete all deleted datasets permanently? This cannot be undone.\"),\n    href: \"history/purge_deleted_datasets\",\n    purge: true,\n    anon: true\n}, {\n    html: (0, _localization2.default)(\"Downloads\"),\n    header: true\n}, {\n    html: (0, _localization2.default)(\"Export Tool Citations\"),\n    anon: true,\n    func: function func() {\n        if (Galaxy && Galaxy.currHistoryPanel && Galaxy.router) {\n            Galaxy.router.push(\"/histories/citations?id=\" + Galaxy.currHistoryPanel.model.id);\n        }\n    }\n}, {\n    html: (0, _localization2.default)(\"Export History to File\"),\n    href: \"history/export_archive?preview=True\",\n    anon: true\n}, {\n    html: (0, _localization2.default)(\"Other Actions\"),\n    header: true\n}, {\n    html: (0, _localization2.default)(\"Import from File\"),\n    href: \"histories/import\",\n    target: \"_top\"\n}];\n\n// Webhooks\n_webhooks2.default.add({\n    url: \"api/webhooks/history-menu/all\",\n    async: false, // (hypothetically) slows down the performance\n    callback: function callback(webhooks) {\n        var webhooks_menu = [];\n\n        $.each(webhooks.models, function (index, model) {\n            var webhook = model.toJSON();\n            if (webhook.activate) {\n                webhooks_menu.push({\n                    html: (0, _localization2.default)(webhook.config.title),\n                    // func: function() {},\n                    anon: true\n                });\n            }\n        });\n\n        if (webhooks_menu.length > 0) {\n            webhooks_menu.unshift({\n                html: (0, _localization2.default)(\"Webhooks\"),\n                header: true\n            });\n            $.merge(menu, webhooks_menu);\n        }\n    }\n});\n\nfunction buildMenu(isAnon, purgeAllowed, urlRoot) {\n    return _.clone(menu).filter(function (menuOption) {\n        if (isAnon && !menuOption.anon) {\n            return false;\n        }\n        if (!purgeAllowed && menuOption.purge) {\n            return false;\n        }\n\n        //TODO:?? hard-coded galaxy_main\n        if (menuOption.href) {\n            menuOption.href = urlRoot + menuOption.href;\n            menuOption.target = menuOption.target || \"galaxy_main\";\n        }\n\n        if (menuOption.confirm) {\n            menuOption.func = function () {\n                if (confirm(menuOption.confirm)) {\n                    galaxy_main.location = menuOption.href;\n                }\n            };\n        }\n        return true;\n    });\n}\n\nvar create = function create($button, options) {\n    options = options || {};\n    var isAnon = options.anonymous === undefined ? true : options.anonymous;\n    var purgeAllowed = options.purgeAllowed || false;\n    var menu = buildMenu(isAnon, purgeAllowed, Galaxy.root);\n    //console.debug( 'menu:', menu );\n    return new _popupMenu2.default($button, menu);\n};\n\n// ============================================================================\nexports.default = create;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///251\n");

/***/ }),
/* 252 */
/*!*****************************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-view-edit-current.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, $, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _historyModel = __webpack_require__(/*! mvc/history/history-model */ 62);\n\nvar _historyModel2 = _interopRequireDefault(_historyModel);\n\nvar _historyViewEdit = __webpack_require__(/*! mvc/history/history-view-edit */ 254);\n\nvar _historyViewEdit2 = _interopRequireDefault(_historyViewEdit);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ============================================================================\n/** session storage for history panel preferences (and to maintain state)\n */\nvar HistoryViewPrefs = _baseMvc2.default.SessionStorageModel.extend(\n/** @lends HistoryViewPrefs.prototype */{\n    defaults: {\n        /** should the tags editor be shown or hidden initially? */\n        tagsEditorShown: false,\n        /** should the annotation editor be shown or hidden initially? */\n        annotationEditorShown: false,\n        ///** what is the currently focused content (dataset or collection) in the current history?\n        // *      (the history panel will highlight and scroll to the focused content view)\n        // */\n        //focusedContentId : null\n        /** Current scroll position */\n        scrollPosition: 0\n    },\n    toString: function toString() {\n        return \"HistoryViewPrefs(\" + JSON.stringify(this.toJSON()) + \")\";\n    }\n});\n\n/** key string to store panel prefs (made accessible on class so you can access sessionStorage directly) */\nHistoryViewPrefs.storageKey = function storageKey() {\n    return \"history-panel\";\n};\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\nvar _super = _historyViewEdit2.default.HistoryViewEdit;\n// used in root/index.mako\n/** @class View/Controller for the user's current history model as used in the history\n *      panel (current right hand panel) of the analysis page.\n *\n *  The only history panel that:\n *      will poll for updates.\n *      displays datasets in reverse hid order.\n */\nvar CurrentHistoryView = _super.extend(\n/** @lends CurrentHistoryView.prototype */{\n    className: _super.prototype.className + \" current-history-panel\",\n\n    /** override to use drilldown (and not foldout) for how collections are displayed */\n    HDCAViewClass: _super.prototype.HDCAViewClass.extend({\n        foldoutStyle: \"drilldown\"\n    }),\n\n    emptyMsg: [(0, _localization2.default)(\"This history is empty\"), \". \", (0, _localization2.default)(\"You can \"), '<a class=\"uploader-link\" href=\"javascript:void(0)\">', (0, _localization2.default)(\"load your own data\"), \"</a>\", (0, _localization2.default)(\" or \"), '<a class=\"get-data-link\" href=\"javascript:void(0)\">', (0, _localization2.default)(\"get data from an external source\"), \"</a>\"].join(\"\"),\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events */\n    initialize: function initialize(attributes) {\n        attributes = attributes || {};\n\n        // ---- persistent preferences\n        /** maintain state / preferences over page loads */\n        this.preferences = new HistoryViewPrefs(_.extend({\n            id: HistoryViewPrefs.storageKey()\n        }, _.pick(attributes, _.keys(HistoryViewPrefs.prototype.defaults))));\n\n        _super.prototype.initialize.call(this, attributes);\n\n        /** sub-views that will overlay this panel (collections) */\n        this.panelStack = [];\n\n        /** id of currently focused content */\n        this.currentContentId = attributes.currentContentId || null;\n        //NOTE: purposely not sent to localstorage since panel recreation roughly lines up with a reset of this value\n    },\n\n    /** Override to cache the current scroll position with a listener */\n    _setUpListeners: function _setUpListeners() {\n        _super.prototype._setUpListeners.call(this);\n\n        var panel = this;\n        // reset scroll position when there's a new history\n        this.on(\"new-model\", function () {\n            panel.preferences.set(\"scrollPosition\", 0);\n        });\n    },\n\n    // ------------------------------------------------------------------------ loading history/item models\n    // TODO: next three more appropriate moved to the app level\n    /** (re-)loads the user's current history & contents w/ details */\n    loadCurrentHistory: function loadCurrentHistory() {\n        return this.loadHistory(null, {\n            url: Galaxy.root + \"history/current_history_json\"\n        });\n    },\n\n    /** loads a history & contents w/ details and makes them the current history */\n    switchToHistory: function switchToHistory(historyId, attributes) {\n        if (Galaxy.user.isAnonymous()) {\n            this.trigger(\"error\", (0, _localization2.default)(\"You must be logged in to switch histories\"), (0, _localization2.default)(\"Anonymous user\"));\n            return $.when();\n        }\n        return this.loadHistory(historyId, {\n            url: Galaxy.root + \"history/set_as_current?id=\" + historyId\n        });\n    },\n\n    /** creates a new history on the server and sets it as the user's current history */\n    createNewHistory: function createNewHistory(attributes) {\n        if (Galaxy.user.isAnonymous()) {\n            this.trigger(\"error\", (0, _localization2.default)(\"You must be logged in to create histories\"), (0, _localization2.default)(\"Anonymous user\"));\n            return $.when();\n        }\n        return this.loadHistory(null, {\n            url: Galaxy.root + \"history/create_new_current\"\n        });\n    },\n\n    /** release/free/shutdown old models and set up panel for new models */\n    setModel: function setModel(model, attributes, render) {\n        _super.prototype.setModel.call(this, model, attributes, render);\n        if (this.model && this.model.id) {\n            this.log(\"checking for updates\");\n            this.model.checkForUpdates();\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ history/content event listening\n    /** listening for history events */\n    _setUpModelListeners: function _setUpModelListeners() {\n        _super.prototype._setUpModelListeners.call(this);\n        // re-broadcast any model change events so that listeners don't have to re-bind to each history\n        return this.listenTo(this.model, {\n            \"change:nice_size change:size\": function changeNice_sizeChangeSize() {\n                this.trigger(\"history-size-change\", this, this.model, arguments);\n            },\n            \"change:id\": function changeId() {\n                this.once(\"loading-done\", function () {\n                    this.model.checkForUpdates();\n                });\n            }\n        });\n    },\n\n    /** listening for collection events */\n    _setUpCollectionListeners: function _setUpCollectionListeners() {\n        _super.prototype._setUpCollectionListeners.call(this);\n        // if a hidden item is created (gen. by a workflow), moves thru the updater to the ready state,\n        //  then: remove it from the collection if the panel is set to NOT show hidden datasets\n        this.listenTo(this.collection, \"state:ready\", function (model, newState, oldState) {\n            if (!model.get(\"visible\") && !this.collection.storage.includeHidden()) {\n                this.removeItemView(model);\n            }\n        });\n    },\n\n    // ------------------------------------------------------------------------ panel rendering\n    /** override to add a handler to capture the scroll position when the parent scrolls */\n    _setUpBehaviors: function _setUpBehaviors($where) {\n        $where = $where || this.$el;\n        // console.log( '_setUpBehaviors', this.$scrollContainer( $where ).get(0), this.$list( $where ) );\n        // we need to call this in _setUpBehaviors which is called after render since the $el\n        // may not be attached to $el.parent and $scrollContainer() may not work\n        var panel = this;\n        _super.prototype._setUpBehaviors.call(panel, $where);\n\n        // cache the handler to remove and re-add so we don't pile up the handlers\n        if (!this._debouncedScrollCaptureHandler) {\n            this._debouncedScrollCaptureHandler = _.debounce(function scrollCapture() {\n                // cache the scroll position (only if visible)\n                if (panel.$el.is(\":visible\")) {\n                    panel.preferences.set(\"scrollPosition\", $(this).scrollTop());\n                }\n            }, 40);\n        }\n\n        panel.$scrollContainer($where).off(\"scroll\", this._debouncedScrollCaptureHandler).on(\"scroll\", this._debouncedScrollCaptureHandler);\n        return panel;\n    },\n\n    /** In this override, handle null models and move the search input to the top */\n    _buildNewRender: function _buildNewRender() {\n        if (!this.model) {\n            return $();\n        }\n        var $newRender = _super.prototype._buildNewRender.call(this);\n        $newRender.find(\".search\").prependTo($newRender.find(\"> .controls\"));\n        this._renderQuotaMessage($newRender);\n        return $newRender;\n    },\n\n    /** render the message displayed when a user is over quota and can't run jobs */\n    _renderQuotaMessage: function _renderQuotaMessage($whereTo) {\n        $whereTo = $whereTo || this.$el;\n        return $(this.templates.quotaMsg({}, this)).prependTo($whereTo.find(\".messages\"));\n    },\n\n    /** In this override, get and set current panel preferences when editor is used */\n    _renderTags: function _renderTags($where) {\n        var panel = this;\n        // render tags and show/hide based on preferences\n        _super.prototype._renderTags.call(panel, $where);\n        if (panel.preferences.get(\"tagsEditorShown\")) {\n            panel.tagsEditor.toggle(true);\n        }\n        // store preference when shown or hidden\n        panel.listenTo(panel.tagsEditor, \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\", function (tagsEditor) {\n            panel.preferences.set(\"tagsEditorShown\", tagsEditor.hidden);\n        });\n    },\n\n    /** In this override, get and set current panel preferences when editor is used */\n    _renderAnnotation: function _renderAnnotation($where) {\n        var panel = this;\n        // render annotation and show/hide based on preferences\n        _super.prototype._renderAnnotation.call(panel, $where);\n        if (panel.preferences.get(\"annotationEditorShown\")) {\n            panel.annotationEditor.toggle(true);\n        }\n        // store preference when shown or hidden\n        panel.listenTo(panel.annotationEditor, \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\", function (annotationEditor) {\n            panel.preferences.set(\"annotationEditorShown\", annotationEditor.hidden);\n        });\n    },\n\n    /** Override to scroll to cached position (in prefs) after swapping */\n    _swapNewRender: function _swapNewRender($newRender) {\n        _super.prototype._swapNewRender.call(this, $newRender);\n        var panel = this;\n        _.delay(function () {\n            var pos = panel.preferences.get(\"scrollPosition\");\n            if (pos) {\n                panel.scrollTo(pos, 0);\n            }\n        }, 10);\n        //TODO: is this enough of a delay on larger histories?\n\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** Override to add the current-content highlight class to currentContentId's view */\n    _attachItems: function _attachItems($whereTo) {\n        _super.prototype._attachItems.call(this, $whereTo);\n        var panel = this;\n        if (panel.currentContentId) {\n            panel._setCurrentContentById(panel.currentContentId);\n        }\n        return this;\n    },\n\n    /** Override to remove any drill down panels */\n    addItemView: function addItemView(model, collection, options) {\n        var view = _super.prototype.addItemView.call(this, model, collection, options);\n        if (!view) {\n            return view;\n        }\n        if (this.panelStack.length) {\n            return this._collapseDrilldownPanel();\n        }\n        return view;\n    },\n\n    // ------------------------------------------------------------------------ collection sub-views\n    /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n    _setUpItemViewListeners: function _setUpItemViewListeners(view) {\n        var panel = this;\n        _super.prototype._setUpItemViewListeners.call(panel, view);\n        // use pub-sub to: handle drilldown expansion and collapse\n        return panel.listenTo(view, {\n            \"expanded:drilldown\": function expandedDrilldown(v, drilldown) {\n                this._expandDrilldownPanel(drilldown);\n            },\n            \"collapsed:drilldown\": function collapsedDrilldown(v, drilldown) {\n                this._collapseDrilldownPanel(drilldown);\n            }\n        });\n    },\n\n    /** display 'current content': add a visible highlight and store the id of a content item */\n    setCurrentContent: function setCurrentContent(view) {\n        this.$(\".history-content.current-content\").removeClass(\"current-content\");\n        if (view) {\n            view.$el.addClass(\"current-content\");\n            this.currentContentId = view.model.id;\n        } else {\n            this.currentContentId = null;\n        }\n    },\n\n    /** find the view with the id and then call setCurrentContent on it */\n    _setCurrentContentById: function _setCurrentContentById(id) {\n        var view = this.viewFromModelId(id) || null;\n        this.setCurrentContent(view);\n    },\n\n    /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n    _expandDrilldownPanel: function _expandDrilldownPanel(drilldown) {\n        this.panelStack.push(drilldown);\n        // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n        this.$controls().add(this.$list()).hide();\n        drilldown.parentName = this.model.get(\"name\");\n        drilldown.delegateEvents().render().$el.appendTo(this.$el);\n    },\n\n    /** Handle drilldown close by freeing the panel and re-rendering this panel */\n    _collapseDrilldownPanel: function _collapseDrilldownPanel(drilldown) {\n        this.panelStack.pop();\n        //TODO: MEM: free the panel\n        this.$controls().add(this.$list()).show();\n    },\n\n    // ........................................................................ panel events\n    /** event map */\n    events: _.extend(_.clone(_super.prototype.events), {\n        // the two links in the empty message\n        \"click .uploader-link\": function clickUploaderLink(ev) {\n            Galaxy.upload.show(ev);\n        },\n        \"click .get-data-link\": function clickGetDataLink(ev) {\n            var $toolMenu = $(\".toolMenuContainer\");\n            $toolMenu.parent().scrollTop(0);\n            $toolMenu.find('span:contains(\"Get Data\")').click();\n        }\n    }),\n\n    // ........................................................................ external objects/MVC\n    listenToGalaxy: function listenToGalaxy(galaxy) {\n        this.listenTo(galaxy, {\n            // when the galaxy_main iframe is loaded with a new page,\n            // compare the url to the following list and if there's a match\n            // pull the id from url and indicate in the history view that\n            // the dataset with that id is the 'current'ly active dataset\n            \"center-frame:load\": function centerFrameLoad(data) {\n                var pathToMatch = data.fullpath;\n                var hdaId = null;\n                var useToURLRegexMap = {\n                    display: /datasets\\/([a-f0-9]+)\\/display/,\n                    edit: /datasets\\/([a-f0-9]+)\\/edit/,\n                    report_error: /dataset\\/errors\\?id=([a-f0-9]+)/,\n                    rerun: /tool_runner\\/rerun\\?id=([a-f0-9]+)/,\n                    show_params: /datasets\\/([a-f0-9]+)\\/show_params/\n                    // no great way to do this here? (leave it in the dataset event handlers above?)\n                    // 'visualization' : 'visualization',\n                };\n                _.find(useToURLRegexMap, function (regex, use) {\n                    // grab the more specific match result (1), save, and use it as the find flag\n                    hdaId = _.result(pathToMatch.match(regex), 1);\n                    return hdaId;\n                });\n                // need to type mangle to go from web route to history contents\n                this._setCurrentContentById(hdaId ? \"dataset-\" + hdaId : null);\n            },\n            // when the center panel is given a new view, clear the current indicator\n            \"center-panel:load\": function centerPanelLoad(view) {\n                this._setCurrentContentById();\n            }\n        });\n    },\n\n    //TODO: remove quota meter from panel and remove this\n    /** add listeners to an external quota meter (mvc/user/user-quotameter.js) */\n    connectToQuotaMeter: function connectToQuotaMeter(quotaMeter) {\n        if (!quotaMeter) {\n            return this;\n        }\n        // show/hide the 'over quota message' in the history when the meter tells it to\n        this.listenTo(quotaMeter, \"quota:over\", this.showQuotaMessage);\n        this.listenTo(quotaMeter, \"quota:under\", this.hideQuotaMessage);\n\n        // having to add this to handle re-render of hview while overquota (the above do not fire)\n        this.on(\"rendered rendered:initial\", function () {\n            if (quotaMeter && quotaMeter.isOverQuota()) {\n                this.showQuotaMessage();\n            }\n        });\n        return this;\n    },\n\n    /** Override to preserve the quota message */\n    clearMessages: function clearMessages(ev) {\n        var $target = !_.isUndefined(ev) ? $(ev.currentTarget) : this.$messages().children('[class$=\"message\"]');\n        $target = $target.not(\".quota-message\");\n        $target.fadeOut(this.fxSpeed, function () {\n            $(this).remove();\n        });\n        return this;\n    },\n\n    /** Show the over quota message (which happens to be in the history panel).\n     */\n    showQuotaMessage: function showQuotaMessage() {\n        var $msg = this.$(\".quota-message\");\n        if ($msg.is(\":hidden\")) {\n            $msg.slideDown(this.fxSpeed);\n        }\n    },\n\n    /** Hide the over quota message (which happens to be in the history panel).\n     */\n    hideQuotaMessage: function hideQuotaMessage() {\n        var $msg = this.$(\".quota-message\");\n        if (!$msg.is(\":hidden\")) {\n            $msg.slideUp(this.fxSpeed);\n        }\n    },\n\n    // ........................................................................ options menu\n    //TODO: remove to batch\n    /** unhide any hidden datasets */\n    unhideHidden: function unhideHidden() {\n        var self = this;\n        if (confirm((0, _localization2.default)(\"Really unhide all hidden datasets?\"))) {\n            // get all hidden, regardless of deleted/purged\n            return self.model.contents._filterAndUpdate({ visible: false, deleted: \"\", purged: \"\" }, { visible: true }).done(function () {\n                // TODO: would be better to render these as they're unhidden instead of all at once\n                if (!self.model.contents.includeHidden) {\n                    self.renderItems();\n                }\n            });\n        }\n        return jQuery.when();\n    },\n\n    /** delete any hidden datasets */\n    deleteHidden: function deleteHidden() {\n        var self = this;\n        if (confirm((0, _localization2.default)(\"Really delete all hidden datasets?\"))) {\n            return self.model.contents._filterAndUpdate(\n            // get all hidden, regardless of deleted/purged\n            { visible: false, deleted: \"\", purged: \"\" },\n            // both delete *and* unhide them\n            { deleted: true, visible: true });\n        }\n        return jQuery.when();\n    },\n\n    /** Return a string rep of the history */\n    toString: function toString() {\n        return \"CurrentHistoryView(\" + (this.model ? this.model.get(\"name\") : \"\") + \")\";\n    }\n});\n\n//------------------------------------------------------------------------------ TEMPLATES\nCurrentHistoryView.prototype.templates = function () {\n    var quotaMsgTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"quota-message errormessage\">', (0, _localization2.default)(\"You are over your disk quota\"), \". \", (0, _localization2.default)(\"Tool execution is on hold until your disk usage drops below your allocated quota\"), \".\", \"</div>\"], \"history\");\n    return _.extend(_.clone(_super.prototype.templates), {\n        quotaMsg: quotaMsgTemplate\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    CurrentHistoryView: CurrentHistoryView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///252\n");

/***/ }),
/* 253 */
/*!********************************************************!*\
  !*** ./galaxy/scripts/mvc/history/job-states-model.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _backbone = __webpack_require__(/*! libs/backbone */ 2);\n\nvar Backbone = _interopRequireWildcard(_backbone);\n\nvar _ajaxQueue = __webpack_require__(/*! utils/ajax-queue */ 117);\n\nvar _ajaxQueue2 = _interopRequireDefault(_ajaxQueue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/** ms between fetches when checking running jobs/datasets for updates */\nvar UPDATE_DELAY = 2000;\nvar NON_TERMINAL_STATES = [\"new\", \"queued\", \"running\"];\nvar ERROR_STATES = [\"error\", \"deleted\"];\n/** Fetch state on add or just wait for polling to start. */\nvar FETCH_STATE_ON_ADD = false;\nvar BATCH_FETCH_STATE = true;\n\nvar JobStatesSummary = Backbone.Model.extend({\n    url: function url() {\n        return Galaxy.root + \"api/histories/\" + this.attributes.history_id + \"/contents/dataset_collections/\" + this.attributes.collection_id + \"/jobs_summary\";\n    },\n\n    hasDetails: function hasDetails() {\n        return this.has(\"populated_state\");\n    },\n\n    new: function _new() {\n        return !this.hasDetails() || this.get(\"populated_state\") == \"new\";\n    },\n\n    errored: function errored() {\n        return this.get(\"populated_state\") === \"error\" || this.anyWithStates(ERROR_STATES);\n    },\n\n    states: function states() {\n        return this.get(\"states\") || {};\n    },\n\n    anyWithState: function anyWithState(queryState) {\n        return (this.states()[queryState] || 0) > 0;\n    },\n\n    anyWithStates: function anyWithStates(queryStates) {\n        var states = this.states();\n        for (var index in queryStates) {\n            if ((states[queryStates[index]] || 0) > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    numWithStates: function numWithStates(queryStates) {\n        var states = this.states();\n        var count = 0;\n        for (var index in queryStates) {\n            count += states[queryStates[index]] || 0;\n        }\n        return count;\n    },\n\n    numInError: function numInError() {\n        return this.numWithStates(ERROR_STATES);\n    },\n\n    running: function running() {\n        return this.anyWithState(\"running\");\n    },\n\n    terminal: function terminal() {\n        if (this.new()) {\n            return false;\n        } else {\n            var anyNonTerminal = this.anyWithStates(NON_TERMINAL_STATES);\n            return !anyNonTerminal;\n        }\n    },\n\n    jobCount: function jobCount() {\n        var states = this.states();\n        var count = 0;\n        for (var index in states) {\n            count += states[index];\n        }\n        return count;\n    },\n\n    toString: function toString() {\n        return \"JobStatesSummary(id=\" + this.get(\"id\") + \")\";\n    }\n});\n\nvar JobStatesSummaryCollection = Backbone.Collection.extend({\n    model: JobStatesSummary,\n\n    initialize: function initialize() {\n        if (FETCH_STATE_ON_ADD) {\n            this.on({\n                add: function add(model) {\n                    return model.fetch();\n                }\n            });\n        }\n\n        /** cached timeout id for the dataset updater */\n        this.updateTimeoutId = null;\n        // this.checkForUpdates();\n        this.active = true;\n    },\n\n    url: function url() {\n        var nonTerminalModels = this.models.filter(function (model) {\n            return !model.terminal();\n        });\n        var ids = nonTerminalModels.map(function (summary) {\n            return summary.get(\"id\");\n        }).join(\",\");\n        var types = nonTerminalModels.map(function (summary) {\n            return summary.get(\"model\");\n        }).join(\",\");\n        return Galaxy.root + \"api/histories/\" + this.historyId + \"/jobs_summary?ids=\" + ids + \"&types=\" + types;\n    },\n\n    monitor: function monitor() {\n        var _this = this;\n\n        this.clearUpdateTimeout();\n        if (!this.active) {\n            return;\n        }\n\n        var _delayThenMonitorAgain = function _delayThenMonitorAgain() {\n            _this.updateTimeoutId = setTimeout(function () {\n                _this.monitor();\n            }, UPDATE_DELAY);\n        };\n\n        var nonTerminalModels = this.models.filter(function (model) {\n            return !model.terminal();\n        });\n\n        if (nonTerminalModels.length > 0 && !BATCH_FETCH_STATE) {\n            // Allow models to fetch their own details.\n            var updateFunctions = nonTerminalModels.map(function (summary) {\n                return function () {\n                    return summary.fetch();\n                };\n            });\n\n            return new _ajaxQueue2.default.AjaxQueue(updateFunctions).done(_delayThenMonitorAgain);\n        } else if (nonTerminalModels.length > 0) {\n            // Batch fetch updated state...\n            this.fetch({ remove: false }).done(_delayThenMonitorAgain);\n        } else {\n            _delayThenMonitorAgain();\n        }\n    },\n\n    /** clear the timeout and the cached timeout id */\n    clearUpdateTimeout: function clearUpdateTimeout() {\n        if (this.updateTimeoutId) {\n            clearTimeout(this.updateTimeoutId);\n            this.updateTimeoutId = null;\n        }\n    },\n\n    toString: function toString() {\n        return \"JobStatesSummaryCollection()\";\n    }\n});\n\nexports.default = { JobStatesSummary: JobStatesSummary, JobStatesSummaryCollection: JobStatesSummaryCollection, FETCH_STATE_ON_ADD: FETCH_STATE_ON_ADD };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2pvYi1zdGF0ZXMtbW9kZWwuanM/NjMzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBCYWNrYm9uZSBmcm9tIFwibGlicy9iYWNrYm9uZVwiO1xuaW1wb3J0IEFKQVhfUVVFVUUgZnJvbSBcInV0aWxzL2FqYXgtcXVldWVcIjtcblxuLyoqIG1zIGJldHdlZW4gZmV0Y2hlcyB3aGVuIGNoZWNraW5nIHJ1bm5pbmcgam9icy9kYXRhc2V0cyBmb3IgdXBkYXRlcyAqL1xudmFyIFVQREFURV9ERUxBWSA9IDIwMDA7XG52YXIgTk9OX1RFUk1JTkFMX1NUQVRFUyA9IFtcIm5ld1wiLCBcInF1ZXVlZFwiLCBcInJ1bm5pbmdcIl07XG52YXIgRVJST1JfU1RBVEVTID0gW1wiZXJyb3JcIiwgXCJkZWxldGVkXCJdO1xuLyoqIEZldGNoIHN0YXRlIG9uIGFkZCBvciBqdXN0IHdhaXQgZm9yIHBvbGxpbmcgdG8gc3RhcnQuICovXG52YXIgRkVUQ0hfU1RBVEVfT05fQUREID0gZmFsc2U7XG52YXIgQkFUQ0hfRkVUQ0hfU1RBVEUgPSB0cnVlO1xuXG52YXIgSm9iU3RhdGVzU3VtbWFyeSA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGAke0dhbGF4eS5yb290fWFwaS9oaXN0b3JpZXMvJHt0aGlzLmF0dHJpYnV0ZXMuaGlzdG9yeV9pZH0vY29udGVudHMvZGF0YXNldF9jb2xsZWN0aW9ucy8ke1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmNvbGxlY3Rpb25faWRcbiAgICAgICAgfS9qb2JzX3N1bW1hcnlgO1xuICAgIH0sXG5cbiAgICBoYXNEZXRhaWxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzKFwicG9wdWxhdGVkX3N0YXRlXCIpO1xuICAgIH0sXG5cbiAgICBuZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGFzRGV0YWlscygpIHx8IHRoaXMuZ2V0KFwicG9wdWxhdGVkX3N0YXRlXCIpID09IFwibmV3XCI7XG4gICAgfSxcblxuICAgIGVycm9yZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoXCJwb3B1bGF0ZWRfc3RhdGVcIikgPT09IFwiZXJyb3JcIiB8fCB0aGlzLmFueVdpdGhTdGF0ZXMoRVJST1JfU1RBVEVTKTtcbiAgICB9LFxuXG4gICAgc3RhdGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwic3RhdGVzXCIpIHx8IHt9O1xuICAgIH0sXG5cbiAgICBhbnlXaXRoU3RhdGU6IGZ1bmN0aW9uKHF1ZXJ5U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnN0YXRlcygpW3F1ZXJ5U3RhdGVdIHx8IDApID4gMDtcbiAgICB9LFxuXG4gICAgYW55V2l0aFN0YXRlczogZnVuY3Rpb24ocXVlcnlTdGF0ZXMpIHtcbiAgICAgICAgdmFyIHN0YXRlcyA9IHRoaXMuc3RhdGVzKCk7XG4gICAgICAgIGZvciAodmFyIGluZGV4IGluIHF1ZXJ5U3RhdGVzKSB7XG4gICAgICAgICAgICBpZiAoKHN0YXRlc1txdWVyeVN0YXRlc1tpbmRleF1dIHx8IDApID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgbnVtV2l0aFN0YXRlczogZnVuY3Rpb24ocXVlcnlTdGF0ZXMpIHtcbiAgICAgICAgdmFyIHN0YXRlcyA9IHRoaXMuc3RhdGVzKCk7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGZvciAodmFyIGluZGV4IGluIHF1ZXJ5U3RhdGVzKSB7XG4gICAgICAgICAgICBjb3VudCArPSBzdGF0ZXNbcXVlcnlTdGF0ZXNbaW5kZXhdXSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9LFxuXG4gICAgbnVtSW5FcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bVdpdGhTdGF0ZXMoRVJST1JfU1RBVEVTKTtcbiAgICB9LFxuXG4gICAgcnVubmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFueVdpdGhTdGF0ZShcInJ1bm5pbmdcIik7XG4gICAgfSxcblxuICAgIHRlcm1pbmFsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubmV3KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhbnlOb25UZXJtaW5hbCA9IHRoaXMuYW55V2l0aFN0YXRlcyhOT05fVEVSTUlOQUxfU1RBVEVTKTtcbiAgICAgICAgICAgIHJldHVybiAhYW55Tm9uVGVybWluYWw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgam9iQ291bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhdGVzID0gdGhpcy5zdGF0ZXMoKTtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gc3RhdGVzKSB7XG4gICAgICAgICAgICBjb3VudCArPSBzdGF0ZXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9LFxuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYEpvYlN0YXRlc1N1bW1hcnkoaWQ9JHt0aGlzLmdldChcImlkXCIpfSlgO1xuICAgIH1cbn0pO1xuXG52YXIgSm9iU3RhdGVzU3VtbWFyeUNvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gICAgbW9kZWw6IEpvYlN0YXRlc1N1bW1hcnksXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKEZFVENIX1NUQVRFX09OX0FERCkge1xuICAgICAgICAgICAgdGhpcy5vbih7XG4gICAgICAgICAgICAgICAgYWRkOiBtb2RlbCA9PiBtb2RlbC5mZXRjaCgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBjYWNoZWQgdGltZW91dCBpZCBmb3IgdGhlIGRhdGFzZXQgdXBkYXRlciAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIC8vIHRoaXMuY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5vblRlcm1pbmFsTW9kZWxzID0gdGhpcy5tb2RlbHMuZmlsdGVyKG1vZGVsID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhbW9kZWwudGVybWluYWwoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpZHMgPSBub25UZXJtaW5hbE1vZGVsc1xuICAgICAgICAgICAgLm1hcChzdW1tYXJ5ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VtbWFyeS5nZXQoXCJpZFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihcIixcIik7XG4gICAgICAgIHZhciB0eXBlcyA9IG5vblRlcm1pbmFsTW9kZWxzXG4gICAgICAgICAgICAubWFwKHN1bW1hcnkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdW1tYXJ5LmdldChcIm1vZGVsXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKFwiLFwiKTtcbiAgICAgICAgcmV0dXJuIGAke0dhbGF4eS5yb290fWFwaS9oaXN0b3JpZXMvJHt0aGlzLmhpc3RvcnlJZH0vam9ic19zdW1tYXJ5P2lkcz0ke2lkc30mdHlwZXM9JHt0eXBlc31gO1xuICAgIH0sXG5cbiAgICBtb25pdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jbGVhclVwZGF0ZVRpbWVvdXQoKTtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9kZWxheVRoZW5Nb25pdG9yQWdhaW4gPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW9uaXRvcigpO1xuICAgICAgICAgICAgfSwgVVBEQVRFX0RFTEFZKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbm9uVGVybWluYWxNb2RlbHMgPSB0aGlzLm1vZGVscy5maWx0ZXIobW9kZWwgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFtb2RlbC50ZXJtaW5hbCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobm9uVGVybWluYWxNb2RlbHMubGVuZ3RoID4gMCAmJiAhQkFUQ0hfRkVUQ0hfU1RBVEUpIHtcbiAgICAgICAgICAgIC8vIEFsbG93IG1vZGVscyB0byBmZXRjaCB0aGVpciBvd24gZGV0YWlscy5cbiAgICAgICAgICAgIHZhciB1cGRhdGVGdW5jdGlvbnMgPSBub25UZXJtaW5hbE1vZGVscy5tYXAoc3VtbWFyeSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1bW1hcnkuZmV0Y2goKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgQUpBWF9RVUVVRS5BamF4UXVldWUodXBkYXRlRnVuY3Rpb25zKS5kb25lKF9kZWxheVRoZW5Nb25pdG9yQWdhaW4pO1xuICAgICAgICB9IGVsc2UgaWYgKG5vblRlcm1pbmFsTW9kZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIEJhdGNoIGZldGNoIHVwZGF0ZWQgc3RhdGUuLi5cbiAgICAgICAgICAgIHRoaXMuZmV0Y2goeyByZW1vdmU6IGZhbHNlIH0pLmRvbmUoX2RlbGF5VGhlbk1vbml0b3JBZ2Fpbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZGVsYXlUaGVuTW9uaXRvckFnYWluKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqIGNsZWFyIHRoZSB0aW1lb3V0IGFuZCB0aGUgY2FjaGVkIHRpbWVvdXQgaWQgKi9cbiAgICBjbGVhclVwZGF0ZVRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy51cGRhdGVUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnVwZGF0ZVRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYEpvYlN0YXRlc1N1bW1hcnlDb2xsZWN0aW9uKClgO1xuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7IEpvYlN0YXRlc1N1bW1hcnksIEpvYlN0YXRlc1N1bW1hcnlDb2xsZWN0aW9uLCBGRVRDSF9TVEFURV9PTl9BREQgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvaGlzdG9yeS9qb2Itc3RhdGVzLW1vZGVsLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExRUE7QUFDQTtBQTRFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBNUVBO0FBQ0E7QUE4RUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///253\n");

/***/ }),
/* 254 */
/*!*********************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-view-edit.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _historyView = __webpack_require__(/*! mvc/history/history-view */ 255);\n\nvar _historyView2 = _interopRequireDefault(_historyView);\n\nvar _historyContents = __webpack_require__(/*! mvc/history/history-contents */ 63);\n\nvar _historyContents2 = _interopRequireDefault(_historyContents);\n\nvar _states = __webpack_require__(/*! mvc/dataset/states */ 16);\n\nvar _states2 = _interopRequireDefault(_states);\n\nvar _hdaModel = __webpack_require__(/*! mvc/history/hda-model */ 116);\n\nvar _hdaModel2 = _interopRequireDefault(_hdaModel);\n\nvar _hdaLiEdit = __webpack_require__(/*! mvc/history/hda-li-edit */ 257);\n\nvar _hdaLiEdit2 = _interopRequireDefault(_hdaLiEdit);\n\nvar _hdcaLiEdit = __webpack_require__(/*! mvc/history/hdca-li-edit */ 258);\n\nvar _hdcaLiEdit2 = _interopRequireDefault(_hdcaLiEdit);\n\nvar _tag = __webpack_require__(/*! mvc/tag */ 39);\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _annotation = __webpack_require__(/*! mvc/annotation */ 125);\n\nvar _annotation2 = _interopRequireDefault(_annotation);\n\nvar _listCollectionCreator = __webpack_require__(/*! mvc/collection/list-collection-creator */ 58);\n\nvar _listCollectionCreator2 = _interopRequireDefault(_listCollectionCreator);\n\nvar _pairCollectionCreator = __webpack_require__(/*! mvc/collection/pair-collection-creator */ 261);\n\nvar _pairCollectionCreator2 = _interopRequireDefault(_pairCollectionCreator);\n\nvar _listOfPairsCollectionCreator = __webpack_require__(/*! mvc/collection/list-of-pairs-collection-creator */ 262);\n\nvar _listOfPairsCollectionCreator2 = _interopRequireDefault(_listOfPairsCollectionCreator);\n\nvar _faIconButton = __webpack_require__(/*! ui/fa-icon-button */ 21);\n\nvar _faIconButton2 = _interopRequireDefault(_faIconButton);\n\nvar _popupMenu = __webpack_require__(/*! mvc/ui/popup-menu */ 42);\n\nvar _popupMenu2 = _interopRequireDefault(_popupMenu);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\n__webpack_require__(/*! ui/editable-text */ 20);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\nvar _super = _historyView2.default.HistoryView;\n// base class for history-view-edit-current and used as-is in history/view.mako\n/** @class Editable View/Controller for the history model.\n *\n *  Allows:\n *      (everything HistoryView allows)\n *      changing the name\n *      displaying and editing tags and annotations\n *      multi-selection and operations on mulitple content items\n */\nvar HistoryViewEdit = _super.extend(\n/** @lends HistoryViewEdit.prototype */{\n    /** class to use for constructing the HistoryDatasetAssociation views */\n    HDAViewClass: _hdaLiEdit2.default.HDAListItemEdit,\n    /** class to use for constructing the HistoryDatasetCollectionAssociation views */\n    HDCAViewClass: _hdcaLiEdit2.default.HDCAListItemEdit,\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes\n     */\n    initialize: function initialize(attributes) {\n        attributes = attributes || {};\n        _super.prototype.initialize.call(this, attributes);\n\n        // ---- set up instance vars\n        /** editor for tags - sub-view */\n        this.tagsEditor = null;\n\n        /** enable drag and drop - sub-view */\n        this.dragItems = true;\n\n        /** editor for annotations - sub-view */\n        this.annotationEditor = null;\n\n        /** allow user purge of dataset files? */\n        this.purgeAllowed = attributes.purgeAllowed || false;\n\n        // states/modes the panel can be in\n        /** is the panel currently showing the dataset selection controls? */\n        this.annotationEditorShown = attributes.annotationEditorShown || false;\n        this.tagsEditorShown = attributes.tagsEditorShown || false;\n    },\n\n    /** Override to handle history as drag-drop target */\n    _setUpListeners: function _setUpListeners() {\n        _super.prototype._setUpListeners.call(this);\n        return this.on({\n            \"droptarget:drop\": function droptargetDrop(ev, data) {\n                // process whatever was dropped and re-hide the drop target\n                this.dataDropped(data);\n                this.dropTargetOff();\n            },\n            \"view:attached view:removed\": function viewAttachedViewRemoved() {\n                this._renderCounts();\n            },\n            \"search:loading-progress\": this._renderSearchProgress,\n            \"search:searching\": this._renderSearchFindings\n        });\n    },\n\n    // ------------------------------------------------------------------------ listeners\n    /** listening for history and HDA events */\n    _setUpModelListeners: function _setUpModelListeners() {\n        _super.prototype._setUpModelListeners.call(this);\n        this.listenTo(this.model, \"change:size\", this.updateHistoryDiskSize);\n        return this;\n    },\n\n    /** listening for collection events */\n    _setUpCollectionListeners: function _setUpCollectionListeners() {\n        _super.prototype._setUpCollectionListeners.call(this);\n        this.listenTo(this.collection, {\n            \"change:deleted\": this._handleItemDeletedChange,\n            \"change:visible\": this._handleItemVisibleChange,\n            \"change:purged\": function changePurged(model) {\n                // hafta get the new nice-size w/o the purged model\n                this.model.fetch();\n            },\n            // loading indicators for deleted/hidden\n            \"fetching-deleted\": function fetchingDeleted(collection) {\n                this.$(\"> .controls .deleted-count\").html(\"<i>\" + (0, _localization2.default)(\"loading...\") + \"</i>\");\n            },\n            \"fetching-hidden\": function fetchingHidden(collection) {\n                this.$(\"> .controls .hidden-count\").html(\"<i>\" + (0, _localization2.default)(\"loading...\") + \"</i>\");\n            },\n            \"fetching-deleted-done fetching-hidden-done\": this._renderCounts\n        });\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ panel rendering\n    /** In this override, add tag and annotation editors and a btn to toggle the selectors */\n    _buildNewRender: function _buildNewRender() {\n        // create a new render using a skeleton template, render title buttons, render body, and set up events, etc.\n        var $newRender = _super.prototype._buildNewRender.call(this);\n        if (!this.model) {\n            return $newRender;\n        }\n\n        if (Galaxy && Galaxy.user && Galaxy.user.id && Galaxy.user.id === this.model.get(\"user_id\")) {\n            this._renderTags($newRender);\n            this._renderAnnotation($newRender);\n        }\n        return $newRender;\n    },\n\n    /** Update the history size display (curr. upper right of panel). */\n    updateHistoryDiskSize: function updateHistoryDiskSize() {\n        this.$(\".history-size\").text(this.model.get(\"nice_size\"));\n    },\n\n    /** override to render counts when the items are rendered */\n    renderItems: function renderItems($whereTo) {\n        var views = _super.prototype.renderItems.call(this, $whereTo);\n        if (!this.searchFor) {\n            this._renderCounts($whereTo);\n        } else {\n            this._renderSearchFindings($whereTo);\n        }\n        return views;\n    },\n\n    /** override to show counts, what's deleted/hidden, and links to toggle those */\n    _renderCounts: function _renderCounts($whereTo) {\n        $whereTo = $whereTo instanceof jQuery ? $whereTo : this.$el;\n        var html = this.templates.counts(this.model.toJSON(), this);\n        return $whereTo.find(\"> .controls .subtitle\").html(html);\n    },\n\n    /** render the tags sub-view controller */\n    _renderTags: function _renderTags($where) {\n        var panel = this;\n        this.tagsEditor = new _tag2.default.TagsEditor({\n            model: this.model,\n            el: $where.find(\".controls .tags-display\"),\n            onshowFirstTime: function onshowFirstTime() {\n                this.render();\n            },\n            // show hide sub-view tag editors when this is shown/hidden\n            onshow: function onshow() {\n                panel.toggleHDATagEditors(true, panel.fxSpeed);\n            },\n            onhide: function onhide() {\n                panel.toggleHDATagEditors(false, panel.fxSpeed);\n            },\n            $activator: (0, _faIconButton2.default)({\n                title: (0, _localization2.default)(\"Edit history tags\"),\n                classes: \"history-tag-btn\",\n                faIcon: \"fa-tags\"\n            }).appendTo($where.find(\".controls .actions\"))\n        });\n    },\n    /** render the annotation sub-view controller */\n    _renderAnnotation: function _renderAnnotation($where) {\n        var panel = this;\n        this.annotationEditor = new _annotation2.default.AnnotationEditor({\n            model: this.model,\n            el: $where.find(\".controls .annotation-display\"),\n            onshowFirstTime: function onshowFirstTime() {\n                this.render();\n            },\n            // show hide sub-view view annotation editors when this is shown/hidden\n            onshow: function onshow() {\n                panel.toggleHDAAnnotationEditors(true, panel.fxSpeed);\n            },\n            onhide: function onhide() {\n                panel.toggleHDAAnnotationEditors(false, panel.fxSpeed);\n            },\n            $activator: (0, _faIconButton2.default)({\n                title: (0, _localization2.default)(\"Edit history annotation\"),\n                classes: \"history-annotate-btn\",\n                faIcon: \"fa-comment\"\n            }).appendTo($where.find(\".controls .actions\"))\n        });\n    },\n\n    /** Set up HistoryViewEdit js/widget behaviours\n     *  In this override, make the name editable\n     */\n    _setUpBehaviors: function _setUpBehaviors($where) {\n        $where = $where || this.$el;\n        _super.prototype._setUpBehaviors.call(this, $where);\n        if (!this.model) {\n            return;\n        }\n\n        // anon users shouldn't have access to any of the following\n        if (!Galaxy.user || Galaxy.user.isAnonymous() || Galaxy.user.id !== this.model.get(\"user_id\")) {\n            return;\n        }\n\n        var panel = this;\n        var nameSelector = \"> .controls .name\";\n        $where.find(nameSelector).attr(\"title\", (0, _localization2.default)(\"Click to rename history\")).tooltip({ placement: \"bottom\" }).make_text_editable({\n            on_finish: function on_finish(newName) {\n                var previousName = panel.model.get(\"name\");\n                if (newName && newName !== previousName) {\n                    panel.$el.find(nameSelector).text(newName);\n                    panel.model.save({ name: newName }).fail(function () {\n                        panel.$el.find(nameSelector).text(panel.model.previous(\"name\"));\n                    });\n                } else {\n                    panel.$el.find(nameSelector).text(previousName);\n                }\n            }\n        });\n    },\n\n    /** return a new popup menu for choosing a multi selection action\n     *  ajax calls made for multiple datasets are queued\n     */\n    multiselectActions: function multiselectActions() {\n        var panel = this;\n\n        var actions = [{\n            html: (0, _localization2.default)(\"Hide datasets\"),\n            func: function func() {\n                var action = _hdaModel2.default.HistoryDatasetAssociation.prototype.hide;\n                panel.getSelectedModels().ajaxQueue(action);\n            }\n        }, {\n            html: (0, _localization2.default)(\"Unhide datasets\"),\n            func: function func() {\n                var action = _hdaModel2.default.HistoryDatasetAssociation.prototype.unhide;\n                panel.getSelectedModels().ajaxQueue(action);\n            }\n        }, {\n            html: (0, _localization2.default)(\"Delete datasets\"),\n            func: function func() {\n                var action = _hdaModel2.default.HistoryDatasetAssociation.prototype[\"delete\"];\n                panel.getSelectedModels().ajaxQueue(action);\n            }\n        }, {\n            html: (0, _localization2.default)(\"Undelete datasets\"),\n            func: function func() {\n                var action = _hdaModel2.default.HistoryDatasetAssociation.prototype.undelete;\n                panel.getSelectedModels().ajaxQueue(action);\n            }\n        }];\n\n        if (panel.purgeAllowed) {\n            actions.push({\n                html: (0, _localization2.default)(\"Permanently delete datasets\"),\n                func: function func() {\n                    if (confirm((0, _localization2.default)(\"This will permanently remove the data in your datasets. Are you sure?\"))) {\n                        var action = _hdaModel2.default.HistoryDatasetAssociation.prototype.purge;\n                        panel.getSelectedModels().ajaxQueue(action);\n                    }\n                }\n            });\n        }\n        actions = actions.concat(panel._collectionActions());\n        return actions;\n    },\n\n    /**   */\n    _collectionActions: function _collectionActions() {\n        var panel = this;\n        return [{\n            html: (0, _localization2.default)(\"Build Dataset List\"),\n            func: function func() {\n                panel.buildCollection(\"list\");\n            }\n        },\n        // TODO: Only show quick pair if two things selected.\n        {\n            html: (0, _localization2.default)(\"Build Dataset Pair\"),\n            func: function func() {\n                panel.buildCollection(\"paired\");\n            }\n        }, {\n            html: (0, _localization2.default)(\"Build List of Dataset Pairs\"),\n            func: function func() {\n                panel.buildCollection(\"list:paired\");\n            }\n        }];\n    },\n\n    buildCollection: function buildCollection(collectionType, selection, hideSourceItems) {\n        var panel = this;\n        var selection = selection || panel.getSelectedModels();\n        var hideSourceItems = hideSourceItems || false;\n        var createFunc;\n        if (collectionType == \"list\") {\n            createFunc = _listCollectionCreator2.default.createListCollection;\n        } else if (collectionType == \"paired\") {\n            createFunc = _pairCollectionCreator2.default.createPairCollection;\n        } else if (collectionType == \"list:paired\") {\n            createFunc = _listOfPairsCollectionCreator2.default.createListOfPairsCollection;\n        } else {\n            console.warn(\"Unknown collectionType encountered \" + collectionType);\n        }\n        createFunc(selection, hideSourceItems).done(function () {\n            panel.model.refresh();\n        });\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** In this override, add purgeAllowed and whether tags/annotation editors should be shown */\n    _getItemViewOptions: function _getItemViewOptions(model) {\n        var options = _super.prototype._getItemViewOptions.call(this, model);\n        _.extend(options, {\n            purgeAllowed: this.purgeAllowed,\n            tagsEditorShown: this.tagsEditor && !this.tagsEditor.hidden,\n            annotationEditorShown: this.annotationEditor && !this.annotationEditor.hidden\n        });\n        return options;\n    },\n\n    /** If this item is deleted and we're not showing deleted items, remove the view\n     *  @param {Model} the item model to check\n     */\n    _handleItemDeletedChange: function _handleItemDeletedChange(itemModel) {\n        if (itemModel.get(\"deleted\")) {\n            this._handleItemDeletion(itemModel);\n        } else {\n            this._handleItemUndeletion(itemModel);\n        }\n        this._renderCounts();\n    },\n\n    _handleItemDeletion: function _handleItemDeletion(itemModel) {\n        var contentsShown = this.model.get(\"contents_active\");\n        contentsShown.deleted += 1;\n        contentsShown.active -= 1;\n        if (!this.model.contents.includeDeleted) {\n            this.removeItemView(itemModel);\n        }\n        this.model.set(\"contents_active\", contentsShown);\n    },\n\n    _handleItemUndeletion: function _handleItemUndeletion(itemModel) {\n        var contentsShown = this.model.get(\"contents_active\");\n        contentsShown.deleted -= 1;\n        if (!this.model.contents.includeDeleted) {\n            contentsShown.active -= 1;\n        }\n        this.model.set(\"contents_active\", contentsShown);\n    },\n\n    /** If this item is hidden and we're not showing hidden items, remove the view\n     *  @param {Model} the item model to check\n     */\n    _handleItemVisibleChange: function _handleItemVisibleChange(itemModel) {\n        if (itemModel.hidden()) {\n            this._handleItemHidden(itemModel);\n        } else {\n            this._handleItemUnhidden(itemModel);\n        }\n        this._renderCounts();\n    },\n\n    _handleItemHidden: function _handleItemHidden(itemModel) {\n        var contentsShown = this.model.get(\"contents_active\");\n        contentsShown.hidden += 1;\n        contentsShown.active -= 1;\n        if (!this.model.contents.includeHidden) {\n            this.removeItemView(itemModel);\n        }\n        this.model.set(\"contents_active\", contentsShown);\n    },\n\n    _handleItemUnhidden: function _handleItemUnhidden(itemModel) {\n        var contentsShown = this.model.get(\"contents_active\");\n        contentsShown.hidden -= 1;\n        if (!this.model.contents.includeHidden) {\n            contentsShown.active -= 1;\n        }\n        this.model.set(\"contents_active\", contentsShown);\n    },\n\n    /** toggle the visibility of each content's tagsEditor applying all the args sent to this function */\n    toggleHDATagEditors: function toggleHDATagEditors(showOrHide, speed) {\n        _.each(this.views, function (view) {\n            if (view.tagsEditor) {\n                view.tagsEditor.toggle(showOrHide, speed);\n            }\n        });\n    },\n\n    /** toggle the visibility of each content's annotationEditor applying all the args sent to this function */\n    toggleHDAAnnotationEditors: function toggleHDAAnnotationEditors(showOrHide, speed) {\n        _.each(this.views, function (view) {\n            if (view.annotationEditor) {\n                view.annotationEditor.toggle(showOrHide, speed);\n            }\n        });\n    },\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events: _.extend(_.clone(_super.prototype.events), {\n        \"click .show-selectors-btn\": \"toggleSelectors\",\n        \"click .toggle-deleted-link\": function clickToggleDeletedLink(ev) {\n            this.toggleShowDeleted();\n        },\n        \"click .toggle-hidden-link\": function clickToggleHiddenLink(ev) {\n            this.toggleShowHidden();\n        }\n    }),\n\n    // ------------------------------------------------------------------------ search\n    _renderSearchProgress: function _renderSearchProgress(limit, offset) {\n        var stop = limit + offset;\n        return this.$(\"> .controls .subtitle\").html([\"<i>\", (0, _localization2.default)(\"Searching \"), stop, \"/\", this.model.contentsShown(), \"</i>\"].join(\"\"));\n    },\n\n    /** override to display number found in subtitle */\n    _renderSearchFindings: function _renderSearchFindings($whereTo) {\n        $whereTo = $whereTo instanceof jQuery ? $whereTo : this.$el;\n        var html = this.templates.found(this.model.toJSON(), this);\n        $whereTo.find(\"> .controls .subtitle\").html(html);\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ as drop target\n    /** turn all the drag and drop handlers on and add some help text above the drop area */\n    dropTargetOn: function dropTargetOn() {\n        if (this.dropTarget) {\n            return this;\n        }\n        this.dropTarget = true;\n\n        //TODO: to init\n        var dropHandlers = {\n            dragenter: _.bind(this.dragenter, this),\n            dragover: _.bind(this.dragover, this),\n            dragleave: _.bind(this.dragleave, this),\n            drop: _.bind(this.drop, this)\n        };\n\n        var $dropTarget = this._renderDropTarget();\n        this.$list().before([this._renderDropTargetHelp(), $dropTarget]);\n        for (var evName in dropHandlers) {\n            if (dropHandlers.hasOwnProperty(evName)) {\n                //console.debug( evName, dropHandlers[ evName ] );\n                $dropTarget.on(evName, dropHandlers[evName]);\n            }\n        }\n        return this;\n    },\n\n    /** render a box to serve as a 'drop here' area on the history */\n    _renderDropTarget: function _renderDropTarget() {\n        this.$(\".history-drop-target\").remove();\n        return $(\"<div/>\").addClass(\"history-drop-target\");\n    },\n\n    /** tell the user how it works  */\n    _renderDropTargetHelp: function _renderDropTargetHelp() {\n        this.$(\".history-drop-target-help\").remove();\n        return $(\"<div/>\").addClass(\"history-drop-target-help\").text((0, _localization2.default)(\"Drag datasets here to copy them to the current history\"));\n    },\n\n    /** shut down drag and drop event handlers and remove drop target */\n    dropTargetOff: function dropTargetOff() {\n        if (!this.dropTarget) {\n            return this;\n        }\n        //this.log( 'dropTargetOff' );\n        this.dropTarget = false;\n        var dropTarget = this.$(\".history-drop-target\").get(0);\n        for (var evName in this._dropHandlers) {\n            if (this._dropHandlers.hasOwnProperty(evName)) {\n                dropTarget.off(evName, this._dropHandlers[evName]);\n            }\n        }\n        this.$(\".history-drop-target\").remove();\n        this.$(\".history-drop-target-help\").remove();\n        return this;\n    },\n    /** toggle the target on/off */\n    dropTargetToggle: function dropTargetToggle() {\n        if (this.dropTarget) {\n            this.dropTargetOff();\n        } else {\n            this.dropTargetOn();\n        }\n        return this;\n    },\n\n    dragenter: function dragenter(ev) {\n        //console.debug( 'dragenter:', this, ev );\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.$(\".history-drop-target\").css(\"border\", \"2px solid black\");\n    },\n    dragover: function dragover(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n    },\n    dragleave: function dragleave(ev) {\n        //console.debug( 'dragleave:', this, ev );\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.$(\".history-drop-target\").css(\"border\", \"1px dashed black\");\n    },\n    /** when (text) is dropped try to parse as json and trigger an event */\n    drop: function drop(ev) {\n        ev.preventDefault();\n        //ev.stopPropagation();\n\n        var self = this;\n        var dataTransfer = ev.originalEvent.dataTransfer;\n        var data = dataTransfer.getData(\"text\");\n\n        dataTransfer.dropEffect = \"move\";\n        try {\n            data = JSON.parse(data);\n        } catch (err) {\n            self.warn(\"error parsing JSON from drop:\", data);\n        }\n\n        self.trigger(\"droptarget:drop\", ev, data, self);\n        return false;\n    },\n\n    /** handler that copies data into the contents */\n    dataDropped: function dataDropped(data) {\n        var self = this;\n        // HDA: dropping will copy it to the history\n        if (_.isObject(data) && data.model_class === \"HistoryDatasetAssociation\" && data.id) {\n            if (self.contents.currentPage !== 0) {\n                return self.contents.fetchPage(0).then(function () {\n                    return self.model.contents.copy(data.id);\n                });\n            }\n            return self.model.contents.copy(data.id);\n        }\n        return jQuery.when();\n    },\n\n    // ........................................................................ misc\n    /** Return a string rep of the history */\n    toString: function toString() {\n        return \"HistoryViewEdit(\" + (this.model ? this.model.get(\"name\") : \"\") + \")\";\n    }\n});\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryViewEdit.prototype.templates = function () {\n    var countsTemplate = _baseMvc2.default.wrapTemplate([\"<% var shown = Math.max( view.views.length, history.contents_active.active ) %>\", \"<% if( shown ){ %>\", '<span class=\"shown-count\">', \"<%- shown %> \", (0, _localization2.default)(\"shown\"), \"</span>\", \"<% } %>\", \"<% if( history.contents_active.deleted ){ %>\", '<span class=\"deleted-count\">', \"<% if( view.model.contents.includeDeleted ){ %>\", '<a class=\"toggle-deleted-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"hide deleted\"), \"</a>\", \"<% } else { %>\", \"<%- history.contents_active.deleted %> \", '<a class=\"toggle-deleted-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"deleted\"), \"</a>\", \"<% } %>\", \"</span>\", \"<% } %>\", \"<% if( history.contents_active.hidden ){ %>\", '<span class=\"hidden-count\">', \"<% if( view.model.contents.includeHidden ){ %>\", '<a class=\"toggle-hidden-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"hide hidden\"), \"</a>\", \"<% } else { %>\", \"<%- history.contents_active.hidden %> \", '<a class=\"toggle-hidden-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"hidden\"), \"</a>\", \"<% } %>\", \"</span>\", \"<% } %>\"], \"history\");\n\n    var foundTemplate = _baseMvc2.default.wrapTemplate([(0, _localization2.default)(\"Found\"), \" <%- view.views.length %>, \", \"<% if( history.contents_active.deleted ){ %>\", \"<% if( view.model.contents.includeDeleted ){ %>\", '<a class=\"toggle-deleted-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"hide deleted\"), \"</a>, \", \"<% } else { %>\", '<a class=\"toggle-deleted-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"show deleted\"), \"</a>, \", \"<% } %>\", \"<% } %>\", \"<% if( history.contents_active.hidden ){ %>\", \"<% if( view.model.contents.includeHidden ){ %>\", '<a class=\"toggle-hidden-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"hide hidden\"), \"</a>\", \"<% } else { %>\", '<a class=\"toggle-hidden-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"show hidden\"), \"</a>\", \"<% } %>\", \"<% } %>\"], \"history\");\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        counts: countsTemplate,\n        found: foundTemplate\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    HistoryViewEdit: HistoryViewEdit\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///254\n");

/***/ }),
/* 255 */
/*!****************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-view.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(_, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _listView = __webpack_require__(/*! mvc/list/list-view */ 118);\n\nvar _listView2 = _interopRequireDefault(_listView);\n\nvar _historyModel = __webpack_require__(/*! mvc/history/history-model */ 62);\n\nvar _historyModel2 = _interopRequireDefault(_historyModel);\n\nvar _historyContents = __webpack_require__(/*! mvc/history/history-contents */ 63);\n\nvar _historyContents2 = _interopRequireDefault(_historyContents);\n\nvar _historyPreferences = __webpack_require__(/*! mvc/history/history-preferences */ 64);\n\nvar _historyPreferences2 = _interopRequireDefault(_historyPreferences);\n\nvar _hdaLi = __webpack_require__(/*! mvc/history/hda-li */ 120);\n\nvar _hdaLi2 = _interopRequireDefault(_hdaLi);\n\nvar _hdcaLi = __webpack_require__(/*! mvc/history/hdca-li */ 122);\n\nvar _hdcaLi2 = _interopRequireDefault(_hdcaLi);\n\nvar _userModel = __webpack_require__(/*! mvc/user/user-model */ 24);\n\nvar _userModel2 = _interopRequireDefault(_userModel);\n\nvar _errorModal = __webpack_require__(/*! mvc/ui/error-modal */ 114);\n\nvar _errorModal2 = _interopRequireDefault(_errorModal);\n\nvar _faIconButton = __webpack_require__(/*! ui/fa-icon-button */ 21);\n\nvar _faIconButton2 = _interopRequireDefault(_faIconButton);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\n__webpack_require__(/*! ui/search-input */ 119);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\nvar _super = _listView2.default.ModelListPanel;\nvar HistoryView = _super.extend(\n/** @lends HistoryView.prototype */{\n    _logNamespace: \"history\",\n\n    /** class to use for constructing the HDA views */\n    HDAViewClass: _hdaLi2.default.HDAListItemView,\n    /** class to use for constructing the HDCA views */\n    HDCAViewClass: _hdcaLi2.default.HDCAListItemView,\n    /** class to used for constructing collection of sub-view models */\n    collectionClass: _historyContents2.default.HistoryContents,\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey: \"contents\",\n\n    tagName: \"div\",\n    className: _super.prototype.className + \" history-panel\",\n\n    /** string to display when the collection is empty */\n    emptyMsg: (0, _localization2.default)(\"This history is empty\"),\n    /** displayed when no items match the search terms */\n    noneFoundMsg: (0, _localization2.default)(\"No matching datasets found\"),\n    /** string used for search placeholder */\n    searchPlaceholder: (0, _localization2.default)(\"search datasets\"),\n\n    // ......................................................................... SET UP\n    /** Set up the view, bind listeners.\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize: function initialize(attributes) {\n        _super.prototype.initialize.call(this, attributes);\n        // ---- instance vars\n        // control contents/behavior based on where (and in what context) the panel is being used\n        /** where should pages from links be displayed? (default to new tab/window) */\n        this.linkTarget = attributes.linkTarget || \"_blank\";\n    },\n\n    /** create and return a collection for when none is initially passed */\n    _createDefaultCollection: function _createDefaultCollection() {\n        // override\n        return new this.collectionClass([], {\n            history: this.model\n        });\n    },\n\n    /** In this override, clear the update timer on the model */\n    freeModel: function freeModel() {\n        _super.prototype.freeModel.call(this);\n        if (this.model) {\n            this.model.stopPolling();\n        }\n        return this;\n    },\n\n    /** create any event listeners for the panel\n     *  @fires: rendered:initial    on the first render\n     *  @fires: empty-history       when switching to a history with no contents or creating a new history\n     */\n    _setUpListeners: function _setUpListeners() {\n        _super.prototype._setUpListeners.call(this);\n        this.on({\n            error: function error(model, xhr, options, msg, details) {\n                this.errorHandler(model, xhr, options, msg, details);\n            },\n            \"views:ready view:attached view:removed\": function viewsReadyViewAttachedViewRemoved(view) {\n                this._renderSelectButton();\n            },\n            \"view:attached\": function viewAttached(view) {\n                this.scrollTo(0);\n            }\n        });\n        // this.on( 'all', function(){ console.debug( arguments ); });\n    },\n\n    // ------------------------------------------------------------------------ loading history/hda models\n    /** load the history with the given id then it's contents, sending ajax options to both */\n    loadHistory: function loadHistory(historyId, options, contentsOptions) {\n        var _this = this;\n\n        contentsOptions = _.extend(contentsOptions || { silent: true });\n        this.info(\"loadHistory:\", historyId, options, contentsOptions);\n        this.setModel(new _historyModel2.default.History({ id: historyId }));\n\n        contentsOptions.silent = true;\n        this.trigger(\"loading\");\n        return this.model.fetchWithContents(options, contentsOptions).always(function () {\n            _this.render();\n            _this.trigger(\"loading-done\");\n        });\n    },\n\n    /** convenience alias to the model. Updates the item list only (not the history) */\n    refreshContents: function refreshContents(options) {\n        if (this.model) {\n            return this.model.refresh(options);\n        }\n        // may have callbacks - so return an empty promise\n        return $.when();\n    },\n\n    /** Override to reset web storage when the id changes (since it needs the id) */\n    _setUpCollectionListeners: function _setUpCollectionListeners() {\n        _super.prototype._setUpCollectionListeners.call(this);\n        return this.listenTo(this.collection, {\n            // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n            \"fetching-more\": function fetchingMore() {\n                this._toggleContentsLoadingIndicator(true);\n                this.$emptyMessage().hide();\n            },\n            \"fetching-more-done\": function fetchingMoreDone() {\n                this._toggleContentsLoadingIndicator(false);\n            }\n        });\n    },\n\n    // ------------------------------------------------------------------------ panel rendering\n    /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n    _showLoadingIndicator: function _showLoadingIndicator(msg, speed, callback) {\n        var $indicator = $('<div class=\"loading-indicator\"/>');\n        this.$el.html($indicator.text(msg).slideDown(!_.isUndefined(speed) ? speed : this.fxSpeed));\n    },\n\n    /** hide the loading indicator */\n    _hideLoadingIndicator: function _hideLoadingIndicator(speed) {\n        // make speed a bit slower to compensate for slow rendering of up to 500 contents\n        this.$(\".loading-indicator\").slideUp(!_.isUndefined(speed) ? speed : this.fxSpeed + 200, function () {\n            $(this).remove();\n        });\n    },\n\n    /** In this override, add a btn to toggle the selectors */\n    _buildNewRender: function _buildNewRender() {\n        var $newRender = _super.prototype._buildNewRender.call(this);\n        this._renderSelectButton($newRender);\n        return $newRender;\n    },\n\n    /** button for starting select mode */\n    _renderSelectButton: function _renderSelectButton($where) {\n        $where = $where || this.$el;\n        // do not render selector option if no actions\n        if (!this.multiselectActions().length) {\n            return null;\n        }\n        // do not render (and remove even) if nothing to select\n        if (!this.views.length) {\n            this.hideSelectors();\n            $where.find(\".controls .actions .show-selectors-btn\").remove();\n            return null;\n        }\n        // don't bother rendering if there's one already\n        var $existing = $where.find(\".controls .actions .show-selectors-btn\");\n        if ($existing.length) {\n            return $existing;\n        }\n\n        return (0, _faIconButton2.default)({\n            title: (0, _localization2.default)(\"Operations on multiple datasets\"),\n            classes: \"show-selectors-btn\",\n            faIcon: \"fa-check-square-o\"\n        }).prependTo($where.find(\".controls .actions\"));\n    },\n\n    /** override to avoid showing intial empty message using contents_active */\n    _renderEmptyMessage: function _renderEmptyMessage($whereTo) {\n        var $emptyMsg = this.$emptyMessage($whereTo);\n        var empty = this.model.get(\"contents_active\").active <= 0;\n        if (empty) {\n            return $emptyMsg.empty().append(this.emptyMsg).show();\n        } else if (this.searchFor && this.model.contents.haveSearchDetails() && !this.views.length) {\n            return $emptyMsg.empty().append(this.noneFoundMsg).show();\n        }\n        $emptyMsg.hide();\n        return $();\n    },\n\n    /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n    $scrollContainer: function $scrollContainer($where) {\n        // override or set via attributes.$scrollContainer\n        return this.$list($where);\n    },\n\n    // ------------------------------------------------------------------------ subviews\n    _toggleContentsLoadingIndicator: function _toggleContentsLoadingIndicator(show) {\n        if (!show) {\n            this.$list().find(\".contents-loading-indicator\").remove();\n        } else {\n            this.$list().html('<div class=\"contents-loading-indicator\">' + '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>');\n        }\n    },\n\n    /** override to render pagination also */\n    renderItems: function renderItems($whereTo) {\n        // console.log( this + '.renderItems-----------------', new Date() );\n        $whereTo = $whereTo || this.$el;\n        var $list = this.$list($whereTo);\n\n        // TODO: bootstrap hack to remove orphaned tooltips\n        $(\".tooltip\").remove();\n\n        $list.empty();\n        this.views = [];\n\n        var models = this._filterCollection();\n        if (models.length) {\n            this._renderPagination($whereTo);\n            this.views = this._renderSomeItems(models, $list);\n        } else {\n            // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n            $whereTo.find(\"> .controls .list-pagination\").empty();\n        }\n        this._renderEmptyMessage($whereTo).toggle(!models.length);\n\n        this.trigger(\"views:ready\", this.views);\n        return this.views;\n    },\n\n    /** render pagination controls if not searching and contents says we're paginating */\n    _renderPagination: function _renderPagination($whereTo) {\n        var $paginationControls = $whereTo.find(\"> .controls .list-pagination\");\n        if (this.searchFor || !this.model.contents.shouldPaginate()) return $paginationControls.empty();\n\n        $paginationControls.html(this.templates.pagination({\n            // pagination is 1-based for the user\n            current: this.model.contents.currentPage + 1,\n            last: this.model.contents.getLastPage() + 1\n        }, this));\n        $paginationControls.find(\"select.pages\").tooltip();\n        return $paginationControls;\n    },\n\n    /** render a subset of the entire collection (client-side pagination) */\n    _renderSomeItems: function _renderSomeItems(models, $list) {\n        var _this2 = this;\n\n        var views = [];\n        $list.append(models.map(function (m) {\n            var view = _this2._createItemView(m);\n            views.push(view);\n            return _this2._renderItemView$el(view);\n        }));\n        return views;\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** in this override, check if the contents would also display based on includeDeleted/hidden */\n    _filterItem: function _filterItem(model) {\n        var contents = this.model.contents;\n        return (contents.includeHidden || !model.hidden()) && (contents.includeDeleted || !model.isDeletedOrPurged()) && _super.prototype._filterItem.call(this, model);\n    },\n\n    /** In this override, since history contents are mixed,\n     *      get the appropo view class based on history_content_type\n     */\n    _getItemViewClass: function _getItemViewClass(model) {\n        var contentType = model.get(\"history_content_type\");\n        switch (contentType) {\n            case \"dataset\":\n                return this.HDAViewClass;\n            case \"dataset_collection\":\n                return this.HDCAViewClass;\n        }\n        throw new TypeError(\"Unknown history_content_type: \" + contentType);\n    },\n\n    /** in this override, add a linktarget, and expand if id is in web storage */\n    _getItemViewOptions: function _getItemViewOptions(model) {\n        var options = _super.prototype._getItemViewOptions.call(this, model);\n        return _.extend(options, {\n            linkTarget: this.linkTarget,\n            expanded: this.model.contents.storage.isExpanded(model.id),\n            hasUser: this.model.ownedByCurrUser()\n        });\n    },\n\n    /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n    _setUpItemViewListeners: function _setUpItemViewListeners(view) {\n        var panel = this;\n        _super.prototype._setUpItemViewListeners.call(panel, view);\n        //TODO: send from content view: this.model.collection.storage.addExpanded\n        // maintain a list of items whose bodies are expanded\n        return panel.listenTo(view, {\n            expanded: function expanded(v) {\n                panel.model.contents.storage.addExpanded(v.model);\n            },\n            collapsed: function collapsed(v) {\n                panel.model.contents.storage.removeExpanded(v.model);\n            }\n        });\n    },\n\n    /** override to remove expandedIds from webstorage */\n    collapseAll: function collapseAll() {\n        this.model.contents.storage.clearExpanded();\n        _super.prototype.collapseAll.call(this);\n    },\n\n    // ------------------------------------------------------------------------ selection\n    /** Override to correctly set the historyId of the new collection */\n    getSelectedModels: function getSelectedModels() {\n        var collection = _super.prototype.getSelectedModels.call(this);\n        collection.historyId = this.collection.historyId;\n        return collection;\n    },\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events: _.extend(_.clone(_super.prototype.events), {\n        \"click .show-selectors-btn\": \"toggleSelectors\",\n        \"click > .controls .prev\": \"_clickPrevPage\",\n        \"click > .controls .next\": \"_clickNextPage\",\n        \"change > .controls .pages\": \"_changePageSelect\",\n        // allow (error) messages to be clicked away\n        \"click .messages [class$=message]\": \"clearMessages\"\n    }),\n\n    _clickPrevPage: function _clickPrevPage(ev) {\n        this.model.stopPolling();\n        this.model.contents.fetchPrevPage();\n    },\n\n    _clickNextPage: function _clickNextPage(ev) {\n        this.model.stopPolling();\n        this.model.contents.fetchNextPage();\n    },\n\n    _changePageSelect: function _changePageSelect(ev) {\n        this.model.stopPolling();\n        var page = $(ev.currentTarget).val();\n        this.model.contents.fetchPage(page);\n    },\n\n    /** Toggle and store the deleted visibility and re-render items\n     * @returns {Boolean} new setting\n     */\n    toggleShowDeleted: function toggleShowDeleted(show, options) {\n        show = show !== undefined ? show : !this.model.contents.includeDeleted;\n        var contents = this.model.contents;\n        contents.setIncludeDeleted(show, options);\n        this.trigger(\"show-deleted\", show);\n\n        contents.fetchCurrentPage({ renderAll: true });\n        return show;\n    },\n\n    /** Toggle and store whether to render explicity hidden contents\n     * @returns {Boolean} new setting\n     */\n    toggleShowHidden: function toggleShowHidden(show, store, options) {\n        // console.log( 'toggleShowHidden', show, store );\n        show = show !== undefined ? show : !this.model.contents.includeHidden;\n        var contents = this.model.contents;\n        contents.setIncludeHidden(show, options);\n        this.trigger(\"show-hidden\", show);\n\n        contents.fetchCurrentPage({ renderAll: true });\n        return show;\n    },\n\n    /** On the first search, if there are no details - load them, then search */\n    _firstSearch: function _firstSearch(searchFor) {\n        var _this3 = this;\n\n        var inputSelector = \"> .controls .search-input\";\n        this.log(\"onFirstSearch\", searchFor);\n\n        // if the contents already have enough details to search, search and return now\n        if (this.model.contents.haveSearchDetails()) {\n            this.searchItems(searchFor);\n            return;\n        }\n\n        // otherwise, load the details progressively here\n        this.$(inputSelector).searchInput(\"toggle-loading\");\n        // set this now so that only results will show during progress\n        this.searchFor = searchFor;\n        var xhr = this.model.contents.progressivelyFetchDetails({ silent: true }).progress(function (response, limit, offset) {\n            _this3.renderItems();\n            _this3.trigger(\"search:loading-progress\", limit, offset);\n        }).always(function () {\n            _this3.$el.find(inputSelector).searchInput(\"toggle-loading\");\n        }).done(function () {\n            _this3.searchItems(searchFor, \"force\");\n        });\n    },\n\n    /** clear the search filters and show all views that are normally shown */\n    clearSearch: function clearSearch(searchFor) {\n        var _this4 = this;\n\n        if (!this.searchFor) return this;\n        //this.log( 'onSearchClear', this );\n        this.searchFor = \"\";\n        this.trigger(\"search:clear\", this);\n        this.$(\"> .controls .search-query\").val(\"\");\n        // NOTE: silent + render prevents collection update event with merge only\n        // - which causes an empty page due to event handler above\n        this.model.contents.fetchCurrentPage({ silent: true }).done(function () {\n            _this4.renderItems();\n        });\n        return this;\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the panel, the history, or the history's contents)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler: function errorHandler(model, xhr, options) {\n        //TODO: to mixin or base model\n        // interrupted ajax or no connection\n        if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error(model, xhr, options);\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if (_.isString(model) && _.isString(xhr)) {\n            var message = model;\n            var title = xhr;\n            return _errorModal2.default.errorModal(message, title, options);\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if (xhr && xhr.status === 502) {\n            return _errorModal2.default.badGatewayErrorModal();\n        }\n        return _errorModal2.default.ajaxErrorModal(model, xhr, options);\n    },\n\n    /** Remove all messages from the panel. */\n    clearMessages: function clearMessages(ev) {\n        var $target = !_.isUndefined(ev) ? $(ev.currentTarget) : this.$messages().children('[class$=\"message\"]');\n        $target.fadeOut(this.fxSpeed, function () {\n            $(this).remove();\n        });\n        return this;\n    },\n\n    // ........................................................................ scrolling\n    /** Scrolls the panel to show the content sub-view with the given hid.\n     *  @param {Integer} hid    the hid of item to scroll into view\n     *  @returns {HistoryView} the panel\n     */\n    scrollToHid: function scrollToHid(hid) {\n        return this.scrollToItem(_.first(this.viewsWhereModel({ hid: hid })));\n    },\n\n    // ........................................................................ misc\n    /** utility for adding -st, -nd, -rd, -th to numbers */\n    ordinalIndicator: function ordinalIndicator(number) {\n        var numStr = \"\" + number;\n        switch (numStr.charAt(numStr.length - 1)) {\n            case \"1\":\n                return numStr + \"st\";\n            case \"2\":\n                return numStr + \"nd\";\n            case \"3\":\n                return numStr + \"rd\";\n            default:\n                return numStr + \"th\";\n        }\n    },\n\n    /** Return a string rep of the history */\n    toString: function toString() {\n        return \"HistoryView(\" + (this.model ? this.model.get(\"name\") : \"\") + \")\";\n    }\n});\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryView.prototype.templates = function () {\n    var mainTemplate = function mainTemplate() {\n        return \"<div>\\n            <div class=\\\"controls\\\"></div>\\n            <ul class=\\\"list-items\\\"></ul>\\n            <div class=\\\"empty-message infomessagesmall\\\"></div>',\\n        </div>\";\n    };\n\n    var controlsTemplate = _baseMvc2.default.wrapTemplate(['<div class=\"controls\">', '<div class=\"title\">', '<div class=\"name\"><%- history.name %></div>', \"</div>\", '<div class=\"subtitle\"></div>', '<div class=\"history-size\"><%- history.nice_size %></div>', '<div class=\"actions\"></div>', '<div class=\"messages\">', \"<% if( history.deleted && history.purged ){ %>\", '<div class=\"deleted-msg warningmessagesmall\">', (0, _localization2.default)(\"This history has been purged and deleted\"), \"</div>\", \"<% } else if( history.deleted ){ %>\", '<div class=\"deleted-msg warningmessagesmall\">', (0, _localization2.default)(\"This history has been deleted\"), \"</div>\", \"<% } else if( history.purged ){ %>\", '<div class=\"deleted-msg warningmessagesmall\">', (0, _localization2.default)(\"This history has been purged\"), \"</div>\", \"<% } %>\", \"<% if( history.message ){ %>\",\n    // should already be localized\n    '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">', \"<%= history.message.text %>\", \"</div>\", \"<% } %>\", \"</div>\",\n\n    // add tags and annotations\n    '<div class=\"tags-display\"></div>', '<div class=\"annotation-display\"></div>', '<div class=\"search\">', '<div class=\"search-input\"></div>', \"</div>\", '<div class=\"list-actions\">', '<div class=\"btn-group\">', '<button class=\"select-all btn btn-default\"', 'data-mode=\"select\">', (0, _localization2.default)(\"All\"), \"</button>\", '<button class=\"deselect-all btn btn-default\"', 'data-mode=\"select\">', (0, _localization2.default)(\"None\"), \"</button>\", \"</div>\", '<div class=\"list-action-menu btn-group\">', \"</div>\", \"</div>\", '<div class=\"list-pagination form-inline\"></div>', \"</div>\"], \"history\");\n\n    var paginationTemplate = _baseMvc2.default.wrapTemplate(['<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>', '<select class=\"pages form-control\" ', 'title=\"', (0, _localization2.default)(\"Click to open and select a page. Begin typing a page number to select it\"), '\">', \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\", '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>', \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\", \"</option>\", \"<% }); %>\", \"</select>\", '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'], \"pages\");\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        el: mainTemplate,\n        controls: controlsTemplate,\n        pagination: paginationTemplate\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    HistoryView: HistoryView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///255\n");

/***/ }),
/* 256 */
/*!************************************************!*\
  !*** ./galaxy/scripts/ui/loading-indicator.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _jquery = __webpack_require__(/*! jquery */ 0);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\"use_strict\";\n\nvar $ = _jquery2.default;\n//TODO: too specific to history panel\nfunction LoadingIndicator($where, options) {\n    var self = this;\n    // defaults\n    options = _jquery2.default.extend({\n        cover: false\n    }, options || {});\n\n    function render() {\n        var html = ['<div class=\"loading-indicator\">', '<div class=\"loading-indicator-text\">', '<span class=\"fa fa-spinner fa-spin fa-lg\"></span>', '<span class=\"loading-indicator-message\">loading...</span>', \"</div>\", \"</div>\"].join(\"\\n\");\n\n        var $indicator = $(html).hide().css(options.css || {\n            position: \"fixed\"\n        });\n\n        var $text = $indicator.children(\".loading-indicator-text\");\n\n        if (options.cover) {\n            $indicator.css({\n                \"z-index\": 2,\n                top: $where.css(\"top\"),\n                bottom: $where.css(\"bottom\"),\n                left: $where.css(\"left\"),\n                right: $where.css(\"right\"),\n                opacity: 0.5,\n                \"background-color\": \"white\",\n                \"text-align\": \"center\"\n            });\n            $text = $indicator.children(\".loading-indicator-text\").css({\n                \"margin-top\": \"20px\"\n            });\n        } else {\n            $text = $indicator.children(\".loading-indicator-text\").css({\n                margin: \"12px 0px 0px 10px\",\n                opacity: \"0.85\",\n                color: \"grey\"\n            });\n            $text.children(\".loading-indicator-message\").css({\n                margin: \"0px 8px 0px 0px\",\n                \"font-style\": \"italic\"\n            });\n        }\n        return $indicator;\n    }\n\n    self.show = function (msg, speed, callback) {\n        msg = msg || \"loading...\";\n        speed = speed || \"fast\";\n        // remove previous\n        $where.parent().find(\".loading-indicator\").remove();\n        // since position is fixed - we insert as sibling\n        self.$indicator = render().insertBefore($where);\n        self.message(msg);\n        self.$indicator.fadeIn(speed, callback);\n        return self;\n    };\n\n    self.message = function (msg) {\n        self.$indicator.find(\"i\").text(msg);\n    };\n\n    self.hide = function (speed, callback) {\n        speed = speed || \"fast\";\n        if (self.$indicator && self.$indicator.length) {\n            self.$indicator.fadeOut(speed, function () {\n                self.$indicator.remove();\n                if (callback) {\n                    callback();\n                }\n            });\n        } else {\n            if (callback) {\n                callback();\n            }\n        }\n        return self;\n    };\n    return self;\n}\n\n//============================================================================\nexports.default = LoadingIndicator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL3VpL2xvYWRpbmctaW5kaWNhdG9yLmpzP2VjMTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpRdWVyeSBmcm9tIFwianF1ZXJ5XCI7XG4oXCJ1c2Vfc3RyaWN0XCIpO1xuXG52YXIgJCA9IGpRdWVyeTtcbi8vVE9ETzogdG9vIHNwZWNpZmljIHRvIGhpc3RvcnkgcGFuZWxcbmZ1bmN0aW9uIExvYWRpbmdJbmRpY2F0b3IoJHdoZXJlLCBvcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vIGRlZmF1bHRzXG4gICAgb3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvdmVyOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zIHx8IHt9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBbXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImxvYWRpbmctaW5kaWNhdG9yXCI+JyxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibG9hZGluZy1pbmRpY2F0b3ItdGV4dFwiPicsXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYSBmYS1zcGlubmVyIGZhLXNwaW4gZmEtbGdcIj48L3NwYW4+JyxcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImxvYWRpbmctaW5kaWNhdG9yLW1lc3NhZ2VcIj5sb2FkaW5nLi4uPC9zcGFuPicsXG4gICAgICAgICAgICBcIjwvZGl2PlwiLFxuICAgICAgICAgICAgXCI8L2Rpdj5cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIik7XG5cbiAgICAgICAgdmFyICRpbmRpY2F0b3IgPSAkKGh0bWwpXG4gICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAuY3NzKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY3NzIHx8IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgdmFyICR0ZXh0ID0gJGluZGljYXRvci5jaGlsZHJlbihcIi5sb2FkaW5nLWluZGljYXRvci10ZXh0XCIpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNvdmVyKSB7XG4gICAgICAgICAgICAkaW5kaWNhdG9yLmNzcyh7XG4gICAgICAgICAgICAgICAgXCJ6LWluZGV4XCI6IDIsXG4gICAgICAgICAgICAgICAgdG9wOiAkd2hlcmUuY3NzKFwidG9wXCIpLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogJHdoZXJlLmNzcyhcImJvdHRvbVwiKSxcbiAgICAgICAgICAgICAgICBsZWZ0OiAkd2hlcmUuY3NzKFwibGVmdFwiKSxcbiAgICAgICAgICAgICAgICByaWdodDogJHdoZXJlLmNzcyhcInJpZ2h0XCIpLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNSxcbiAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgICAgICAgICAgICAgIFwidGV4dC1hbGlnblwiOiBcImNlbnRlclwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICR0ZXh0ID0gJGluZGljYXRvci5jaGlsZHJlbihcIi5sb2FkaW5nLWluZGljYXRvci10ZXh0XCIpLmNzcyh7XG4gICAgICAgICAgICAgICAgXCJtYXJnaW4tdG9wXCI6IFwiMjBweFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICR0ZXh0ID0gJGluZGljYXRvci5jaGlsZHJlbihcIi5sb2FkaW5nLWluZGljYXRvci10ZXh0XCIpLmNzcyh7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiBcIjEycHggMHB4IDBweCAxMHB4XCIsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogXCIwLjg1XCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiZ3JleVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICR0ZXh0LmNoaWxkcmVuKFwiLmxvYWRpbmctaW5kaWNhdG9yLW1lc3NhZ2VcIikuY3NzKHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IFwiMHB4IDhweCAwcHggMHB4XCIsXG4gICAgICAgICAgICAgICAgXCJmb250LXN0eWxlXCI6IFwiaXRhbGljXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkaW5kaWNhdG9yO1xuICAgIH1cblxuICAgIHNlbGYuc2hvdyA9IChtc2csIHNwZWVkLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBtc2cgPSBtc2cgfHwgXCJsb2FkaW5nLi4uXCI7XG4gICAgICAgIHNwZWVkID0gc3BlZWQgfHwgXCJmYXN0XCI7XG4gICAgICAgIC8vIHJlbW92ZSBwcmV2aW91c1xuICAgICAgICAkd2hlcmVcbiAgICAgICAgICAgIC5wYXJlbnQoKVxuICAgICAgICAgICAgLmZpbmQoXCIubG9hZGluZy1pbmRpY2F0b3JcIilcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgLy8gc2luY2UgcG9zaXRpb24gaXMgZml4ZWQgLSB3ZSBpbnNlcnQgYXMgc2libGluZ1xuICAgICAgICBzZWxmLiRpbmRpY2F0b3IgPSByZW5kZXIoKS5pbnNlcnRCZWZvcmUoJHdoZXJlKTtcbiAgICAgICAgc2VsZi5tZXNzYWdlKG1zZyk7XG4gICAgICAgIHNlbGYuJGluZGljYXRvci5mYWRlSW4oc3BlZWQsIGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIHNlbGYubWVzc2FnZSA9IG1zZyA9PiB7XG4gICAgICAgIHNlbGYuJGluZGljYXRvci5maW5kKFwiaVwiKS50ZXh0KG1zZyk7XG4gICAgfTtcblxuICAgIHNlbGYuaGlkZSA9IChzcGVlZCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgc3BlZWQgPSBzcGVlZCB8fCBcImZhc3RcIjtcbiAgICAgICAgaWYgKHNlbGYuJGluZGljYXRvciAmJiBzZWxmLiRpbmRpY2F0b3IubGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWxmLiRpbmRpY2F0b3IuZmFkZU91dChzcGVlZCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuJGluZGljYXRvci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCBMb2FkaW5nSW5kaWNhdG9yO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL3VpL2xvYWRpbmctaW5kaWNhdG9yLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQURBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFRQTtBQUlBO0FBREE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBVUE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///256\n");

/***/ }),
/* 257 */
/*!***************************************************!*\
  !*** ./galaxy/scripts/mvc/history/hda-li-edit.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _datasetLiEdit = __webpack_require__(/*! mvc/dataset/dataset-li-edit */ 124);\n\nvar _datasetLiEdit2 = _interopRequireDefault(_datasetLiEdit);\n\nvar _hdaLi = __webpack_require__(/*! mvc/history/hda-li */ 120);\n\nvar _hdaLi2 = _interopRequireDefault(_hdaLi);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar _super = _datasetLiEdit2.default.DatasetListItemEdit;\n/** @class Editing view for HistoryDatasetAssociation.\n */\nvar HDAListItemEdit = _super.extend(\n/** @lends HDAListItemEdit.prototype */{\n    className: _super.prototype.className + \" history-content\",\n\n    /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n    _fetchModelDetails: function _fetchModelDetails() {\n        var view = this;\n        if (view.model.inReadyState() && !view.model.hasDetails()) {\n            return view.model.fetch({ silent: true });\n\n            // special case the need for the rerunnable and creating_job attributes\n            // needed for rendering re-run button on queued, running datasets\n        } else if (!view.model.has(\"rerunnable\")) {\n            return view.model.fetch({\n                silent: true,\n                data: {\n                    // only fetch rerunnable and creating_job to keep overhead down\n                    keys: [\"rerunnable\", \"creating_job\"].join(\",\")\n                }\n            });\n        }\n        return jQuery.when();\n    },\n\n    /** event map */\n    events: _.extend(_.clone(_super.prototype.events), {\n        \"click .unhide-link\": function clickUnhideLink(ev) {\n            this.model.unhide();\n            return false;\n        }\n    }),\n\n    /** string rep */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"HDAListItemEdit(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nHDAListItemEdit.prototype.templates = function () {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        hidden: _baseMvc2.default.wrapTemplate([\"<% if( !dataset.visible ){ %>\",\n        // add a link to unhide a dataset\n        '<div class=\"hidden-msg warningmessagesmall\">', (0, _localization2.default)(\"This dataset has been hidden\"), '<br /><a class=\"unhide-link\" a href=\"javascript:void(0);\">', (0, _localization2.default)(\"Unhide it\"), \"</a>\", \"</div>\", \"<% } %>\"], \"dataset\")\n    });\n\n    return _.extend({}, _super.prototype.templates, {\n        //NOTE: *steal* the HDAListItemView titleBar\n        titleBar: _hdaLi2.default.HDAListItemView.prototype.templates.titleBar,\n        warnings: warnings\n    });\n}();\n\n//==============================================================================\nexports.default = {\n    HDAListItemEdit: HDAListItemEdit\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hkYS1saS1lZGl0LmpzP2ZiYzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERBVEFTRVRfTElfRURJVCBmcm9tIFwibXZjL2RhdGFzZXQvZGF0YXNldC1saS1lZGl0XCI7XG5pbXBvcnQgSERBX0xJIGZyb20gXCJtdmMvaGlzdG9yeS9oZGEtbGlcIjtcbmltcG9ydCBCQVNFX01WQyBmcm9tIFwibXZjL2Jhc2UtbXZjXCI7XG5pbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIF9zdXBlciA9IERBVEFTRVRfTElfRURJVC5EYXRhc2V0TGlzdEl0ZW1FZGl0O1xuLyoqIEBjbGFzcyBFZGl0aW5nIHZpZXcgZm9yIEhpc3RvcnlEYXRhc2V0QXNzb2NpYXRpb24uXG4gKi9cbnZhciBIREFMaXN0SXRlbUVkaXQgPSBfc3VwZXIuZXh0ZW5kKFxuICAgIC8qKiBAbGVuZHMgSERBTGlzdEl0ZW1FZGl0LnByb3RvdHlwZSAqLyB7XG4gICAgICAgIGNsYXNzTmFtZTogYCR7X3N1cGVyLnByb3RvdHlwZS5jbGFzc05hbWV9IGhpc3RvcnktY29udGVudGAsXG5cbiAgICAgICAgLyoqIEluIHRoaXMgb3ZlcnJpZGUsIG9ubHkgZ2V0IGRldGFpbHMgaWYgaW4gdGhlIHJlYWR5IHN0YXRlLCBnZXQgcmVydW5uYWJsZSBpZiBpbiBvdGhlciBzdGF0ZXMuXG4gICAgICAgICAqICBOb3RlOiBmZXRjaCB3aXRoIG5vICdjaGFuZ2UnIGV2ZW50IHRyaWdnZXJpbmcgdG8gcHJldmVudCBhdXRvbWF0aWMgcmVuZGVyaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgX2ZldGNoTW9kZWxEZXRhaWxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcztcbiAgICAgICAgICAgIGlmICh2aWV3Lm1vZGVsLmluUmVhZHlTdGF0ZSgpICYmICF2aWV3Lm1vZGVsLmhhc0RldGFpbHMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3Lm1vZGVsLmZldGNoKHsgc2lsZW50OiB0cnVlIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIHRoZSBuZWVkIGZvciB0aGUgcmVydW5uYWJsZSBhbmQgY3JlYXRpbmdfam9iIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAvLyBuZWVkZWQgZm9yIHJlbmRlcmluZyByZS1ydW4gYnV0dG9uIG9uIHF1ZXVlZCwgcnVubmluZyBkYXRhc2V0c1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdmlldy5tb2RlbC5oYXMoXCJyZXJ1bm5hYmxlXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXcubW9kZWwuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgZmV0Y2ggcmVydW5uYWJsZSBhbmQgY3JlYXRpbmdfam9iIHRvIGtlZXAgb3ZlcmhlYWQgZG93blxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogW1wicmVydW5uYWJsZVwiLCBcImNyZWF0aW5nX2pvYlwiXS5qb2luKFwiLFwiKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5LndoZW4oKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogZXZlbnQgbWFwICovXG4gICAgICAgIGV2ZW50czogXy5leHRlbmQoXy5jbG9uZShfc3VwZXIucHJvdG90eXBlLmV2ZW50cyksIHtcbiAgICAgICAgICAgIFwiY2xpY2sgLnVuaGlkZS1saW5rXCI6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC51bmhpZGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8qKiBzdHJpbmcgcmVwICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbFN0cmluZyA9IHRoaXMubW9kZWwgPyBgJHt0aGlzLm1vZGVsfWAgOiBcIihubyBtb2RlbClcIjtcbiAgICAgICAgICAgIHJldHVybiBgSERBTGlzdEl0ZW1FZGl0KCR7bW9kZWxTdHJpbmd9KWA7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIFRFTVBMQVRFU1xuLyoqIHVuZGVyc2NvcmUgdGVtcGxhdGVzICovXG5IREFMaXN0SXRlbUVkaXQucHJvdG90eXBlLnRlbXBsYXRlcyA9ICgoKSA9PiB7XG4gICAgdmFyIHdhcm5pbmdzID0gXy5leHRlbmQoe30sIF9zdXBlci5wcm90b3R5cGUudGVtcGxhdGVzLndhcm5pbmdzLCB7XG4gICAgICAgIGhpZGRlbjogQkFTRV9NVkMud3JhcFRlbXBsYXRlKFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIFwiPCUgaWYoICFkYXRhc2V0LnZpc2libGUgKXsgJT5cIixcbiAgICAgICAgICAgICAgICAvLyBhZGQgYSBsaW5rIHRvIHVuaGlkZSBhIGRhdGFzZXRcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImhpZGRlbi1tc2cgd2FybmluZ21lc3NhZ2VzbWFsbFwiPicsXG4gICAgICAgICAgICAgICAgX2woXCJUaGlzIGRhdGFzZXQgaGFzIGJlZW4gaGlkZGVuXCIpLFxuICAgICAgICAgICAgICAgICc8YnIgLz48YSBjbGFzcz1cInVuaGlkZS1saW5rXCIgYSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiPicsXG4gICAgICAgICAgICAgICAgX2woXCJVbmhpZGUgaXRcIiksXG4gICAgICAgICAgICAgICAgXCI8L2E+XCIsXG4gICAgICAgICAgICAgICAgXCI8L2Rpdj5cIixcbiAgICAgICAgICAgICAgICBcIjwlIH0gJT5cIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGF0YXNldFwiXG4gICAgICAgIClcbiAgICB9KTtcblxuICAgIHJldHVybiBfLmV4dGVuZCh7fSwgX3N1cGVyLnByb3RvdHlwZS50ZW1wbGF0ZXMsIHtcbiAgICAgICAgLy9OT1RFOiAqc3RlYWwqIHRoZSBIREFMaXN0SXRlbVZpZXcgdGl0bGVCYXJcbiAgICAgICAgdGl0bGVCYXI6IEhEQV9MSS5IREFMaXN0SXRlbVZpZXcucHJvdG90eXBlLnRlbXBsYXRlcy50aXRsZUJhcixcbiAgICAgICAgd2FybmluZ3M6IHdhcm5pbmdzXG4gICAgfSk7XG59KSgpO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEhEQUxpc3RJdGVtRWRpdDogSERBTGlzdEl0ZW1FZGl0XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hkYS1saS1lZGl0LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBRkE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckNBO0FBQ0E7QUF3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFMQTtBQUNBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///257\n");

/***/ }),
/* 258 */
/*!****************************************************!*\
  !*** ./galaxy/scripts/mvc/history/hdca-li-edit.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _hdcaLi = __webpack_require__(/*! mvc/history/hdca-li */ 122);\n\nvar _hdcaLi2 = _interopRequireDefault(_hdcaLi);\n\nvar _collectionViewEdit = __webpack_require__(/*! mvc/collection/collection-view-edit */ 259);\n\nvar _collectionViewEdit2 = _interopRequireDefault(_collectionViewEdit);\n\nvar _faIconButton = __webpack_require__(/*! ui/fa-icon-button */ 21);\n\nvar _faIconButton2 = _interopRequireDefault(_faIconButton);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar _super = _hdcaLi2.default.HDCAListItemView;\n/** @class Editing view for HistoryDatasetCollectionAssociation.\n */\nvar HDCAListItemEdit = _super.extend(\n/** @lends HDCAListItemEdit.prototype */{\n    /** logger used to record this.log messages, commonly set to console */\n    //logger              : console,\n\n    /** Override to return editable versions of the collection panels */\n    _getFoldoutPanelClass: function _getFoldoutPanelClass() {\n        return _collectionViewEdit2.default.CollectionViewEdit;\n    },\n\n    // ......................................................................... delete\n    /** In this override, add the delete button. */\n    _renderPrimaryActions: function _renderPrimaryActions() {\n        this.log(this + \"._renderPrimaryActions\");\n        // render the display, edit attr and delete icon-buttons\n        return _super.prototype._renderPrimaryActions.call(this).concat([this._renderDeleteButton()]);\n    },\n\n    /** Render icon-button to delete this collection. */\n    _renderDeleteButton: function _renderDeleteButton() {\n        var _this = this;\n\n        var deleted = this.model.get(\"deleted\");\n        return (0, _faIconButton2.default)({\n            title: deleted ? (0, _localization2.default)(\"Dataset collection is already deleted\") : (0, _localization2.default)(\"Delete\"),\n            classes: \"delete-btn\",\n            faIcon: \"fa-times\",\n            disabled: deleted,\n            onclick: function onclick() {\n                // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                _this.$el.find(\".icon-btn.delete-btn\").trigger(\"mouseout\");\n                _this.model[\"delete\"]();\n            }\n        });\n    },\n\n    // ......................................................................... misc\n    /** string rep */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"HDCAListItemEdit(\" + modelString + \")\";\n    }\n});\n\n//==============================================================================\nexports.default = {\n    HDCAListItemEdit: HDCAListItemEdit\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hkY2EtbGktZWRpdC5qcz85YmJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIRENBX0xJIGZyb20gXCJtdmMvaGlzdG9yeS9oZGNhLWxpXCI7XG5pbXBvcnQgRENfVklFV19FRElUIGZyb20gXCJtdmMvY29sbGVjdGlvbi9jb2xsZWN0aW9uLXZpZXctZWRpdFwiO1xuaW1wb3J0IGZhSWNvbkJ1dHRvbiBmcm9tIFwidWkvZmEtaWNvbi1idXR0b25cIjtcbmltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG52YXIgX3N1cGVyID0gSERDQV9MSS5IRENBTGlzdEl0ZW1WaWV3O1xuLyoqIEBjbGFzcyBFZGl0aW5nIHZpZXcgZm9yIEhpc3RvcnlEYXRhc2V0Q29sbGVjdGlvbkFzc29jaWF0aW9uLlxuICovXG52YXIgSERDQUxpc3RJdGVtRWRpdCA9IF9zdXBlci5leHRlbmQoXG4gICAgLyoqIEBsZW5kcyBIRENBTGlzdEl0ZW1FZGl0LnByb3RvdHlwZSAqLyB7XG4gICAgICAgIC8qKiBsb2dnZXIgdXNlZCB0byByZWNvcmQgdGhpcy5sb2cgbWVzc2FnZXMsIGNvbW1vbmx5IHNldCB0byBjb25zb2xlICovXG4gICAgICAgIC8vbG9nZ2VyICAgICAgICAgICAgICA6IGNvbnNvbGUsXG5cbiAgICAgICAgLyoqIE92ZXJyaWRlIHRvIHJldHVybiBlZGl0YWJsZSB2ZXJzaW9ucyBvZiB0aGUgY29sbGVjdGlvbiBwYW5lbHMgKi9cbiAgICAgICAgX2dldEZvbGRvdXRQYW5lbENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBEQ19WSUVXX0VESVQuQ29sbGVjdGlvblZpZXdFZGl0O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gZGVsZXRlXG4gICAgICAgIC8qKiBJbiB0aGlzIG92ZXJyaWRlLCBhZGQgdGhlIGRlbGV0ZSBidXR0b24uICovXG4gICAgICAgIF9yZW5kZXJQcmltYXJ5QWN0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmxvZyhgJHt0aGlzfS5fcmVuZGVyUHJpbWFyeUFjdGlvbnNgKTtcbiAgICAgICAgICAgIC8vIHJlbmRlciB0aGUgZGlzcGxheSwgZWRpdCBhdHRyIGFuZCBkZWxldGUgaWNvbi1idXR0b25zXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fcmVuZGVyUHJpbWFyeUFjdGlvbnMuY2FsbCh0aGlzKS5jb25jYXQoW3RoaXMuX3JlbmRlckRlbGV0ZUJ1dHRvbigpXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIFJlbmRlciBpY29uLWJ1dHRvbiB0byBkZWxldGUgdGhpcyBjb2xsZWN0aW9uLiAqL1xuICAgICAgICBfcmVuZGVyRGVsZXRlQnV0dG9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkZWxldGVkID0gdGhpcy5tb2RlbC5nZXQoXCJkZWxldGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhSWNvbkJ1dHRvbih7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGRlbGV0ZWQgPyBfbChcIkRhdGFzZXQgY29sbGVjdGlvbiBpcyBhbHJlYWR5IGRlbGV0ZWRcIikgOiBfbChcIkRlbGV0ZVwiKSxcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBcImRlbGV0ZS1idG5cIixcbiAgICAgICAgICAgICAgICBmYUljb246IFwiZmEtdGltZXNcIixcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogZGVsZXRlZCxcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIC4uLmJsZXIuLi4gdG9vbHRpcHMgYmVpbmcgbGVmdCBiZWhpbmQgaW4gRE9NIChob3ZlciBvdXQgbmV2ZXIgY2FsbGVkIG9uIGRlbGV0aW9uKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKFwiLmljb24tYnRuLmRlbGV0ZS1idG5cIikudHJpZ2dlcihcIm1vdXNlb3V0XCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsW1wiZGVsZXRlXCJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBtaXNjXG4gICAgICAgIC8qKiBzdHJpbmcgcmVwICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbFN0cmluZyA9IHRoaXMubW9kZWwgPyBgJHt0aGlzLm1vZGVsfWAgOiBcIihubyBtb2RlbClcIjtcbiAgICAgICAgICAgIHJldHVybiBgSERDQUxpc3RJdGVtRWRpdCgke21vZGVsU3RyaW5nfSlgO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBIRENBTGlzdEl0ZW1FZGl0OiBIRENBTGlzdEl0ZW1FZGl0XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hkY2EtbGktZWRpdC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdENBO0FBQ0E7QUF5Q0E7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///258\n");

/***/ }),
/* 259 */
/*!***************************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/collection-view-edit.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _collectionView = __webpack_require__(/*! mvc/collection/collection-view */ 123);\n\nvar _collectionView2 = _interopRequireDefault(_collectionView);\n\nvar _collectionModel = __webpack_require__(/*! mvc/collection/collection-model */ 60);\n\nvar _collectionModel2 = _interopRequireDefault(_collectionModel);\n\nvar _collectionLiEdit = __webpack_require__(/*! mvc/collection/collection-li-edit */ 260);\n\nvar _collectionLiEdit2 = _interopRequireDefault(_collectionLiEdit);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _tag = __webpack_require__(/*! mvc/tag */ 39);\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _faIconButton = __webpack_require__(/*! ui/fa-icon-button */ 21);\n\nvar _faIconButton2 = _interopRequireDefault(_faIconButton);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\n__webpack_require__(/*! ui/editable-text */ 20);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class editable View/Controller for a dataset collection.\n */\nvar _super = _collectionView2.default.CollectionView;\nvar CollectionViewEdit = _super.extend(\n/** @lends CollectionView.prototype */{\n    //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n    /** logger used to record this.log messages, commonly set to console */\n    //logger              : console,\n\n    /** sub view class used for datasets */\n    DatasetDCEViewClass: _collectionLiEdit2.default.DatasetDCEListItemEdit,\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass: _collectionLiEdit2.default.NestedDCDCEListItemEdit,\n\n    getNestedDCDCEViewClass: function getNestedDCDCEViewClass() {\n        return _collectionLiEdit2.default.NestedDCDCEListItemEdit.extend({\n            foldoutPanelClass: CollectionViewEdit\n        });\n    },\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize: function initialize(attributes) {\n        _super.prototype.initialize.call(this, attributes);\n    },\n\n    /** In this override, make the collection name editable\n     */\n    _setUpBehaviors: function _setUpBehaviors($where) {\n        $where = $where || this.$el;\n        _super.prototype._setUpBehaviors.call(this, $where);\n        if (!this.model) {\n            return;\n        }\n\n        // anon users shouldn't have access to any of the following\n        if (!Galaxy.user || Galaxy.user.isAnonymous()) {\n            return;\n        }\n\n        this.tagsEditorShown = true;\n\n        //TODO: extract\n        var panel = this;\n\n        var nameSelector = \"> .controls .name\";\n        $where.find(nameSelector).attr(\"title\", (0, _localization2.default)(\"Click to rename collection\")).tooltip({ placement: \"bottom\" }).make_text_editable({\n            on_finish: function on_finish(newName) {\n                var previousName = panel.model.get(\"name\");\n                if (newName && newName !== previousName) {\n                    panel.$el.find(nameSelector).text(newName);\n                    panel.model.save({ name: newName }).fail(function () {\n                        panel.$el.find(nameSelector).text(panel.model.previous(\"name\"));\n                    });\n                } else {\n                    panel.$el.find(nameSelector).text(previousName);\n                }\n            }\n        });\n        this.tagsEditor = new _tag2.default.TagsEditor({\n            model: this.model,\n            el: $where.find(\".tags-display\"),\n            onshowFirstTime: function onshowFirstTime() {\n                this.render();\n            },\n            usePrompt: false\n        });\n        this.tagsEditor.toggle(true);\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString: function toString() {\n        return \"CollectionViewEdit(\" + (this.model ? this.model.get(\"name\") : \"\") + \")\";\n    }\n});\n\n//==============================================================================\nexports.default = {\n    CollectionViewEdit: CollectionViewEdit\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9jb2xsZWN0aW9uL2NvbGxlY3Rpb24tdmlldy1lZGl0LmpzPzkwYzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERDX1ZJRVcgZnJvbSBcIm12Yy9jb2xsZWN0aW9uL2NvbGxlY3Rpb24tdmlld1wiO1xuaW1wb3J0IERDX01PREVMIGZyb20gXCJtdmMvY29sbGVjdGlvbi9jb2xsZWN0aW9uLW1vZGVsXCI7XG5pbXBvcnQgRENfRURJVCBmcm9tIFwibXZjL2NvbGxlY3Rpb24vY29sbGVjdGlvbi1saS1lZGl0XCI7XG5pbXBvcnQgQkFTRV9NVkMgZnJvbSBcIm12Yy9iYXNlLW12Y1wiO1xuaW1wb3J0IFRBR1MgZnJvbSBcIm12Yy90YWdcIjtcbmltcG9ydCBmYUljb25CdXR0b24gZnJvbSBcInVpL2ZhLWljb24tYnV0dG9uXCI7XG5pbXBvcnQgX2wgZnJvbSBcInV0aWxzL2xvY2FsaXphdGlvblwiO1xuaW1wb3J0IFwidWkvZWRpdGFibGUtdGV4dFwiO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuVE9ETzpcblxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKiBAY2xhc3MgZWRpdGFibGUgVmlldy9Db250cm9sbGVyIGZvciBhIGRhdGFzZXQgY29sbGVjdGlvbi5cbiAqL1xudmFyIF9zdXBlciA9IERDX1ZJRVcuQ29sbGVjdGlvblZpZXc7XG52YXIgQ29sbGVjdGlvblZpZXdFZGl0ID0gX3N1cGVyLmV4dGVuZChcbiAgICAvKiogQGxlbmRzIENvbGxlY3Rpb25WaWV3LnByb3RvdHlwZSAqLyB7XG4gICAgICAgIC8vTU9ERUwgaXMgZWl0aGVyIGEgRGF0YXNldENvbGxlY3Rpb24gKG9yIHN1YmNsYXNzKSBvciBhIERhdGFzZXRDb2xsZWN0aW9uRWxlbWVudCAobGlzdCBvZiBwYWlycylcblxuICAgICAgICAvKiogbG9nZ2VyIHVzZWQgdG8gcmVjb3JkIHRoaXMubG9nIG1lc3NhZ2VzLCBjb21tb25seSBzZXQgdG8gY29uc29sZSAqL1xuICAgICAgICAvL2xvZ2dlciAgICAgICAgICAgICAgOiBjb25zb2xlLFxuXG4gICAgICAgIC8qKiBzdWIgdmlldyBjbGFzcyB1c2VkIGZvciBkYXRhc2V0cyAqL1xuICAgICAgICBEYXRhc2V0RENFVmlld0NsYXNzOiBEQ19FRElULkRhdGFzZXREQ0VMaXN0SXRlbUVkaXQsXG4gICAgICAgIC8qKiBzdWIgdmlldyBjbGFzcyB1c2VkIGZvciBuZXN0ZWQgY29sbGVjdGlvbnMgKi9cbiAgICAgICAgTmVzdGVkRENEQ0VWaWV3Q2xhc3M6IERDX0VESVQuTmVzdGVkRENEQ0VMaXN0SXRlbUVkaXQsXG5cbiAgICAgICAgZ2V0TmVzdGVkRENEQ0VWaWV3Q2xhc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIERDX0VESVQuTmVzdGVkRENEQ0VMaXN0SXRlbUVkaXQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBmb2xkb3V0UGFuZWxDbGFzczogQ29sbGVjdGlvblZpZXdFZGl0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIFNFVCBVUFxuICAgICAgICAvKiogU2V0IHVwIHRoZSB2aWV3LCBzZXQgdXAgc3RvcmFnZSwgYmluZCBsaXN0ZW5lcnMgdG8gSGlzdG9yeUNvbnRlbnRzIGV2ZW50c1xuICAgICAgICAgKiAgQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXMgb3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBwYW5lbFxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcykge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgYXR0cmlidXRlcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIEluIHRoaXMgb3ZlcnJpZGUsIG1ha2UgdGhlIGNvbGxlY3Rpb24gbmFtZSBlZGl0YWJsZVxuICAgICAgICAgKi9cbiAgICAgICAgX3NldFVwQmVoYXZpb3JzOiBmdW5jdGlvbigkd2hlcmUpIHtcbiAgICAgICAgICAgICR3aGVyZSA9ICR3aGVyZSB8fCB0aGlzLiRlbDtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX3NldFVwQmVoYXZpb3JzLmNhbGwodGhpcywgJHdoZXJlKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5tb2RlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYW5vbiB1c2VycyBzaG91bGRuJ3QgaGF2ZSBhY2Nlc3MgdG8gYW55IG9mIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgIGlmICghR2FsYXh5LnVzZXIgfHwgR2FsYXh5LnVzZXIuaXNBbm9ueW1vdXMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50YWdzRWRpdG9yU2hvd24gPSB0cnVlO1xuXG4gICAgICAgICAgICAvL1RPRE86IGV4dHJhY3RcbiAgICAgICAgICAgIHZhciBwYW5lbCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBuYW1lU2VsZWN0b3IgPSBcIj4gLmNvbnRyb2xzIC5uYW1lXCI7XG4gICAgICAgICAgICAkd2hlcmVcbiAgICAgICAgICAgICAgICAuZmluZChuYW1lU2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0aXRsZVwiLCBfbChcIkNsaWNrIHRvIHJlbmFtZSBjb2xsZWN0aW9uXCIpKVxuICAgICAgICAgICAgICAgIC50b29sdGlwKHsgcGxhY2VtZW50OiBcImJvdHRvbVwiIH0pXG4gICAgICAgICAgICAgICAgLm1ha2VfdGV4dF9lZGl0YWJsZSh7XG4gICAgICAgICAgICAgICAgICAgIG9uX2ZpbmlzaDogZnVuY3Rpb24obmV3TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzTmFtZSA9IHBhbmVsLm1vZGVsLmdldChcIm5hbWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3TmFtZSAmJiBuZXdOYW1lICE9PSBwcmV2aW91c05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5lbC4kZWwuZmluZChuYW1lU2VsZWN0b3IpLnRleHQobmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWwubW9kZWwuc2F2ZSh7IG5hbWU6IG5ld05hbWUgfSkuZmFpbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsLiRlbC5maW5kKG5hbWVTZWxlY3RvcikudGV4dChwYW5lbC5tb2RlbC5wcmV2aW91cyhcIm5hbWVcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5lbC4kZWwuZmluZChuYW1lU2VsZWN0b3IpLnRleHQocHJldmlvdXNOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50YWdzRWRpdG9yID0gbmV3IFRBR1MuVGFnc0VkaXRvcih7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICAgICAgICAgICAgZWw6ICR3aGVyZS5maW5kKFwiLnRhZ3MtZGlzcGxheVwiKSxcbiAgICAgICAgICAgICAgICBvbnNob3dGaXJzdFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXNlUHJvbXB0OiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnRhZ3NFZGl0b3IudG9nZ2xlKHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBtaXNjXG4gICAgICAgIC8qKiBzdHJpbmcgcmVwICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBgQ29sbGVjdGlvblZpZXdFZGl0KCR7dGhpcy5tb2RlbCA/IHRoaXMubW9kZWwuZ2V0KFwibmFtZVwiKSA6IFwiXCJ9KWA7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIENvbGxlY3Rpb25WaWV3RWRpdDogQ29sbGVjdGlvblZpZXdFZGl0XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy9jb2xsZWN0aW9uL2NvbGxlY3Rpb24tdmlldy1lZGl0LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFDQTs7OztBQUlBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBN0VBO0FBQ0E7QUFnRkE7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///259\n");

/***/ }),
/* 260 */
/*!*************************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/collection-li-edit.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _collectionLi = __webpack_require__(/*! mvc/collection/collection-li */ 67);\n\nvar _collectionLi2 = _interopRequireDefault(_collectionLi);\n\nvar _datasetLiEdit = __webpack_require__(/*! mvc/dataset/dataset-li-edit */ 124);\n\nvar _datasetLiEdit2 = _interopRequireDefault(_datasetLiEdit);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//==============================================================================\nvar DCListItemView = _collectionLi2.default.DCListItemView;\n/** @class Edit view for DatasetCollection.\n */\nvar DCListItemEdit = DCListItemView.extend(\n/** @lends DCListItemEdit.prototype */{\n    /** override to add linkTarget */\n    initialize: function initialize(attributes) {\n        DCListItemView.prototype.initialize.call(this, attributes);\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"DCListItemEdit(\" + modelString + \")\";\n    }\n});\n\n//==============================================================================\nvar DCEListItemView = _collectionLi2.default.DCEListItemView;\n/** @class Read only view for DatasetCollectionElement.\n */\nvar DCEListItemEdit = DCEListItemView.extend(\n/** @lends DCEListItemEdit.prototype */{\n    //TODO: this might be expendable - compacted with HDAListItemView\n\n    /** set up */\n    initialize: function initialize(attributes) {\n        DCEListItemView.prototype.initialize.call(this, attributes);\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"DCEListItemEdit(\" + modelString + \")\";\n    }\n});\n\n//==============================================================================\n// NOTE: this does not inherit from DatasetDCEListItemView as you would expect\n//TODO: but should - if we can find something simpler than using diamond\n/** @class Editable view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\nvar DatasetDCEListItemEdit = _datasetLiEdit2.default.DatasetListItemEdit.extend(\n/** @lends DatasetDCEListItemEdit.prototype */{\n    /** set up */\n    initialize: function initialize(attributes) {\n        _datasetLiEdit2.default.DatasetListItemEdit.prototype.initialize.call(this, attributes);\n    },\n\n    // NOTE: this does not inherit from DatasetDCEListItemView - so we duplicate this here\n    //TODO: fix\n    /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n    _fetchModelDetails: function _fetchModelDetails() {\n        var view = this;\n        if (view.model.inReadyState() && !view.model.hasDetails()) {\n            return view.model.fetch({ silent: true });\n        }\n        return jQuery.when();\n    },\n\n    /** Override to remove delete button */\n    _renderDeleteButton: function _renderDeleteButton() {\n        return null;\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"DatasetDCEListItemEdit(\" + modelString + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetDCEListItemEdit.prototype.templates = function () {\n    return _.extend({}, _datasetLiEdit2.default.DatasetListItemEdit.prototype.templates, {\n        titleBar: _collectionLi2.default.DatasetDCEListItemView.prototype.templates.titleBar\n    });\n}();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\nvar NestedDCDCEListItemEdit = _collectionLi2.default.NestedDCDCEListItemView.extend(\n/** @lends NestedDCDCEListItemEdit.prototype */{\n    /** String representation */\n    toString: function toString() {\n        var modelString = this.model ? \"\" + this.model : \"(no model)\";\n        return \"NestedDCDCEListItemEdit(\" + modelString + \")\";\n    }\n});\n\n//==============================================================================\nexports.default = {\n    DCListItemEdit: DCListItemEdit,\n    DCEListItemEdit: DCEListItemEdit,\n    DatasetDCEListItemEdit: DatasetDCEListItemEdit,\n    NestedDCDCEListItemEdit: NestedDCDCEListItemEdit\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9jb2xsZWN0aW9uL2NvbGxlY3Rpb24tbGktZWRpdC5qcz83ZmQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEQ19MSSBmcm9tIFwibXZjL2NvbGxlY3Rpb24vY29sbGVjdGlvbi1saVwiO1xuaW1wb3J0IERBVEFTRVRfTElfRURJVCBmcm9tIFwibXZjL2RhdGFzZXQvZGF0YXNldC1saS1lZGl0XCI7XG5pbXBvcnQgQkFTRV9NVkMgZnJvbSBcIm12Yy9iYXNlLW12Y1wiO1xuaW1wb3J0IF9sIGZyb20gXCJ1dGlscy9sb2NhbGl6YXRpb25cIjtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbnZhciBEQ0xpc3RJdGVtVmlldyA9IERDX0xJLkRDTGlzdEl0ZW1WaWV3O1xuLyoqIEBjbGFzcyBFZGl0IHZpZXcgZm9yIERhdGFzZXRDb2xsZWN0aW9uLlxuICovXG52YXIgRENMaXN0SXRlbUVkaXQgPSBEQ0xpc3RJdGVtVmlldy5leHRlbmQoXG4gICAgLyoqIEBsZW5kcyBEQ0xpc3RJdGVtRWRpdC5wcm90b3R5cGUgKi8ge1xuICAgICAgICAvKiogb3ZlcnJpZGUgdG8gYWRkIGxpbmtUYXJnZXQgKi9cbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cmlidXRlcykge1xuICAgICAgICAgICAgRENMaXN0SXRlbVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUuY2FsbCh0aGlzLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIG1pc2NcbiAgICAgICAgLyoqIFN0cmluZyByZXByZXNlbnRhdGlvbiAqL1xuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbW9kZWxTdHJpbmcgPSB0aGlzLm1vZGVsID8gYCR7dGhpcy5tb2RlbH1gIDogXCIobm8gbW9kZWwpXCI7XG4gICAgICAgICAgICByZXR1cm4gYERDTGlzdEl0ZW1FZGl0KCR7bW9kZWxTdHJpbmd9KWA7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIERDRUxpc3RJdGVtVmlldyA9IERDX0xJLkRDRUxpc3RJdGVtVmlldztcbi8qKiBAY2xhc3MgUmVhZCBvbmx5IHZpZXcgZm9yIERhdGFzZXRDb2xsZWN0aW9uRWxlbWVudC5cbiAqL1xudmFyIERDRUxpc3RJdGVtRWRpdCA9IERDRUxpc3RJdGVtVmlldy5leHRlbmQoXG4gICAgLyoqIEBsZW5kcyBEQ0VMaXN0SXRlbUVkaXQucHJvdG90eXBlICovIHtcbiAgICAgICAgLy9UT0RPOiB0aGlzIG1pZ2h0IGJlIGV4cGVuZGFibGUgLSBjb21wYWN0ZWQgd2l0aCBIREFMaXN0SXRlbVZpZXdcblxuICAgICAgICAvKiogc2V0IHVwICovXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIERDRUxpc3RJdGVtVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIGF0dHJpYnV0ZXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gbWlzY1xuICAgICAgICAvKiogU3RyaW5nIHJlcHJlc2VudGF0aW9uICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbFN0cmluZyA9IHRoaXMubW9kZWwgPyBgJHt0aGlzLm1vZGVsfWAgOiBcIihubyBtb2RlbClcIjtcbiAgICAgICAgICAgIHJldHVybiBgRENFTGlzdEl0ZW1FZGl0KCR7bW9kZWxTdHJpbmd9KWA7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTk9URTogdGhpcyBkb2VzIG5vdCBpbmhlcml0IGZyb20gRGF0YXNldERDRUxpc3RJdGVtVmlldyBhcyB5b3Ugd291bGQgZXhwZWN0XG4vL1RPRE86IGJ1dCBzaG91bGQgLSBpZiB3ZSBjYW4gZmluZCBzb21ldGhpbmcgc2ltcGxlciB0aGFuIHVzaW5nIGRpYW1vbmRcbi8qKiBAY2xhc3MgRWRpdGFibGUgdmlldyBmb3IgYSBEYXRhc2V0Q29sbGVjdGlvbkVsZW1lbnQgdGhhdCBpcyBhbHNvIGFuIERhdGFzZXRBc3NvY2lhdGlvblxuICogICAgICAoYSBkYXRhc2V0IGNvbnRhaW5lZCBpbiBhIGRhdGFzZXQgY29sbGVjdGlvbikuXG4gKi9cbnZhciBEYXRhc2V0RENFTGlzdEl0ZW1FZGl0ID0gREFUQVNFVF9MSV9FRElULkRhdGFzZXRMaXN0SXRlbUVkaXQuZXh0ZW5kKFxuICAgIC8qKiBAbGVuZHMgRGF0YXNldERDRUxpc3RJdGVtRWRpdC5wcm90b3R5cGUgKi8ge1xuICAgICAgICAvKiogc2V0IHVwICovXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIERBVEFTRVRfTElfRURJVC5EYXRhc2V0TGlzdEl0ZW1FZGl0LnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgYXR0cmlidXRlcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gTk9URTogdGhpcyBkb2VzIG5vdCBpbmhlcml0IGZyb20gRGF0YXNldERDRUxpc3RJdGVtVmlldyAtIHNvIHdlIGR1cGxpY2F0ZSB0aGlzIGhlcmVcbiAgICAgICAgLy9UT0RPOiBmaXhcbiAgICAgICAgLyoqIEluIHRoaXMgb3ZlcnJpZGUsIG9ubHkgZ2V0IGRldGFpbHMgaWYgaW4gdGhlIHJlYWR5IHN0YXRlLlxuICAgICAgICAgKiAgTm90ZTogZmV0Y2ggd2l0aCBubyAnY2hhbmdlJyBldmVudCB0cmlnZ2VyaW5nIHRvIHByZXZlbnQgYXV0b21hdGljIHJlbmRlcmluZy5cbiAgICAgICAgICovXG4gICAgICAgIF9mZXRjaE1vZGVsRGV0YWlsczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodmlldy5tb2RlbC5pblJlYWR5U3RhdGUoKSAmJiAhdmlldy5tb2RlbC5oYXNEZXRhaWxzKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlldy5tb2RlbC5mZXRjaCh7IHNpbGVudDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqUXVlcnkud2hlbigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBPdmVycmlkZSB0byByZW1vdmUgZGVsZXRlIGJ1dHRvbiAqL1xuICAgICAgICBfcmVuZGVyRGVsZXRlQnV0dG9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gbWlzY1xuICAgICAgICAvKiogU3RyaW5nIHJlcHJlc2VudGF0aW9uICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbFN0cmluZyA9IHRoaXMubW9kZWwgPyBgJHt0aGlzLm1vZGVsfWAgOiBcIihubyBtb2RlbClcIjtcbiAgICAgICAgICAgIHJldHVybiBgRGF0YXNldERDRUxpc3RJdGVtRWRpdCgke21vZGVsU3RyaW5nfSlgO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuLy8gLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBURU1QTEFURVNcbi8qKiB1bmRlcnNjb3JlIHRlbXBsYXRlcyAqL1xuRGF0YXNldERDRUxpc3RJdGVtRWRpdC5wcm90b3R5cGUudGVtcGxhdGVzID0gKCgpID0+XG4gICAgXy5leHRlbmQoe30sIERBVEFTRVRfTElfRURJVC5EYXRhc2V0TGlzdEl0ZW1FZGl0LnByb3RvdHlwZS50ZW1wbGF0ZXMsIHtcbiAgICAgICAgdGl0bGVCYXI6IERDX0xJLkRhdGFzZXREQ0VMaXN0SXRlbVZpZXcucHJvdG90eXBlLnRlbXBsYXRlcy50aXRsZUJhclxuICAgIH0pKSgpO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqIEBjbGFzcyBSZWFkIG9ubHkgdmlldyBmb3IgYSBEYXRhc2V0Q29sbGVjdGlvbkVsZW1lbnQgdGhhdCBpcyBhbHNvIGEgRGF0YXNldENvbGxlY3Rpb25cbiAqICAgICAgKGEgbmVzdGVkIERDKS5cbiAqL1xudmFyIE5lc3RlZERDRENFTGlzdEl0ZW1FZGl0ID0gRENfTEkuTmVzdGVkRENEQ0VMaXN0SXRlbVZpZXcuZXh0ZW5kKFxuICAgIC8qKiBAbGVuZHMgTmVzdGVkRENEQ0VMaXN0SXRlbUVkaXQucHJvdG90eXBlICovIHtcbiAgICAgICAgLyoqIFN0cmluZyByZXByZXNlbnRhdGlvbiAqL1xuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbW9kZWxTdHJpbmcgPSB0aGlzLm1vZGVsID8gYCR7dGhpcy5tb2RlbH1gIDogXCIobm8gbW9kZWwpXCI7XG4gICAgICAgICAgICByZXR1cm4gYE5lc3RlZERDRENFTGlzdEl0ZW1FZGl0KCR7bW9kZWxTdHJpbmd9KWA7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZXhwb3J0IGRlZmF1bHQge1xuICAgIERDTGlzdEl0ZW1FZGl0OiBEQ0xpc3RJdGVtRWRpdCxcbiAgICBEQ0VMaXN0SXRlbUVkaXQ6IERDRUxpc3RJdGVtRWRpdCxcbiAgICBEYXRhc2V0RENFTGlzdEl0ZW1FZGl0OiBEYXRhc2V0RENFTGlzdEl0ZW1FZGl0LFxuICAgIE5lc3RlZERDRENFTGlzdEl0ZW1FZGl0OiBOZXN0ZWREQ0RDRUxpc3RJdGVtRWRpdFxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBnYWxheHkvc2NyaXB0cy9tdmMvY29sbGVjdGlvbi9jb2xsZWN0aW9uLWxpLWVkaXQuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFDQTtBQWNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQTtBQUNBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE3QkE7QUFDQTtBQWdDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBREE7QUFEQTtBQUNBO0FBSUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///260\n");

/***/ }),
/* 261 */
/*!******************************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/pair-collection-creator.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, jQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _listCollectionCreator = __webpack_require__(/*! mvc/collection/list-collection-creator */ 58);\n\nvar _listCollectionCreator2 = _interopRequireDefault(_listCollectionCreator);\n\nvar _hdcaModel = __webpack_require__(/*! mvc/history/hdca-model */ 59);\n\nvar _hdcaModel2 = _interopRequireDefault(_hdcaModel);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"collections\";\n/*==============================================================================\nTODO:\n    the paired creator doesn't really mesh with the list creator as parent\n        it may be better to make an abstract super class for both\n    composites may inherit from this (or vis-versa)\n    PairedDatasetCollectionElementView doesn't make a lot of sense\n\n==============================================================================*/\n/**  */\nvar PairedDatasetCollectionElementView = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    //TODO: use proper class (DatasetDCE or NestedDCDCE (or the union of both))\n    tagName: \"li\",\n    className: \"collection-element\",\n\n    initialize: function initialize(attributes) {\n        this.element = attributes.element || {};\n        this.identifier = attributes.identifier;\n    },\n\n    render: function render() {\n        this.$el.attr(\"data-element-id\", this.element.id).html(this.template({\n            identifier: this.identifier,\n            element: this.element\n        }));\n        return this;\n    },\n\n    //TODO: lots of unused space in the element - possibly load details and display them horiz.\n    template: _.template(['<span class=\"identifier\"><%- identifier %></span>', '<span class=\"name\"><%- element.name %></span>'].join(\"\")),\n\n    /** remove the DOM and any listeners */\n    destroy: function destroy() {\n        this.off();\n        this.$el.remove();\n    },\n\n    /** string rep */\n    toString: function toString() {\n        return \"DatasetCollectionElementView()\";\n    }\n});\n\n// ============================================================================\nvar _super = _listCollectionCreator2.default.ListCollectionCreator;\n\n/** An interface for building collections.\n */\nvar PairCollectionCreator = _super.extend({\n    /** the class used to display individual elements */\n    elementViewClass: PairedDatasetCollectionElementView,\n    /** the class this creator will create and save */\n    collectionClass: _hdcaModel2.default.HistoryDatasetCollection,\n    className: \"pair-collection-creator collection-creator flex-row-container\",\n\n    /** override to no-op */\n    _mangleDuplicateNames: function _mangleDuplicateNames() {},\n\n    // TODO: this whole pattern sucks. There needs to be two classes of problem area:\n    //      bad inital choices and\n    //      when the user has painted his/her self into a corner during creation/use-of-the-creator\n    /** render the entire interface */\n    render: function render(speed, callback) {\n        if (this.workingElements.length === 2) {\n            return _super.prototype.render.call(this, speed, callback);\n        }\n        return this._renderInvalid(speed, callback);\n    },\n\n    // ------------------------------------------------------------------------ rendering elements\n    /** render forward/reverse */\n    _renderList: function _renderList(speed, callback) {\n        //this.debug( '-- _renderList' );\n        //precondition: there are two valid elements in workingElements\n        var creator = this;\n\n        var $tmp = jQuery(\"<div/>\");\n        var $list = creator.$list();\n\n        // lose the original views, create the new, append all at once, then call their renders\n        _.each(this.elementViews, function (view) {\n            view.destroy();\n            creator.removeElementView(view);\n        });\n        $tmp.append(creator._createForwardElementView().$el);\n        $tmp.append(creator._createReverseElementView().$el);\n        $list.empty().append($tmp.children());\n        _.invoke(creator.elementViews, \"render\");\n    },\n\n    /** create the forward element view */\n    _createForwardElementView: function _createForwardElementView() {\n        return this._createElementView(this.workingElements[0], {\n            identifier: \"forward\"\n        });\n    },\n\n    /** create the forward element view */\n    _createReverseElementView: function _createReverseElementView() {\n        return this._createElementView(this.workingElements[1], {\n            identifier: \"reverse\"\n        });\n    },\n\n    /** create an element view, cache in elementViews, and return */\n    _createElementView: function _createElementView(element, options) {\n        var elementView = new this.elementViewClass(_.extend(options, {\n            element: element\n        }));\n        this.elementViews.push(elementView);\n        return elementView;\n    },\n\n    /** swap the forward, reverse elements and re-render */\n    swap: function swap() {\n        this.workingElements = [this.workingElements[1], this.workingElements[0]];\n        this._renderList();\n    },\n\n    events: _.extend(_.clone(_super.prototype.events), {\n        \"click .swap\": \"swap\"\n    }),\n\n    // ------------------------------------------------------------------------ templates\n    //TODO: move to require text plugin and load these as text\n    //TODO: underscore currently unnecc. bc no vars are used\n    //TODO: better way of localizing text-nodes in long strings\n    /** underscore template fns attached to class */\n    templates: _.extend(_.clone(_super.prototype.templates), {\n        /** the middle: element list */\n        middle: _.template(['<div class=\"collection-elements-controls\">', '<a class=\"swap\" href=\"javascript:void(0);\" title=\"', (0, _localization2.default)(\"Swap forward and reverse datasets\"), '\">', (0, _localization2.default)(\"Swap\"), \"</a>\", \"</div>\", '<div class=\"collection-elements scroll-container flex-row\">', \"</div>\"].join(\"\")),\n\n        /** help content */\n        helpContent: _.template([\"<p>\", (0, _localization2.default)([\"Pair collections are permanent collections containing two datasets: one forward and one reverse. \", \"Often these are forward and reverse reads. The pair collections can be passed to tools and \", \"workflows in order to have analyses done on both datasets. This interface allows \", \"you to create a pair, name it, and swap which is forward and which reverse.\"].join(\"\")), \"</p>\", \"<ul>\", \"<li>\", (0, _localization2.default)(['Click the <i data-target=\".swap\">\"Swap\"</i> link to make your forward dataset the reverse ', \"and the reverse dataset forward.\"].join(\"\")), \"</li>\", \"<li>\", (0, _localization2.default)(['Click the <i data-target=\".cancel-create\">\"Cancel\"</i> button to exit the interface.'].join(\"\")), \"</li>\", \"</ul><br />\", \"<p>\", (0, _localization2.default)(['Once your collection is complete, enter a <i data-target=\".collection-name\">name</i> and ', 'click <i data-target=\".create-collection\">\"Create list\"</i>.'].join(\"\")), \"</p>\"].join(\"\")),\n\n        /** a simplified page communicating what went wrong and why the user needs to reselect something else */\n        invalidInitial: _.template(['<div class=\"header flex-row no-flex\">', '<div class=\"alert alert-warning\" style=\"display: block\">', '<span class=\"alert-message\">', \"<% if( _.size( problems ) ){ %>\", (0, _localization2.default)(\"The following selections could not be included due to problems\"), \"<ul><% _.each( problems, function( problem ){ %>\", \"<li><b><%- problem.element.name %></b>: <%- problem.text %></li>\", \"<% }); %></ul>\", \"<% } else if( _.size( elements ) === 0 ){ %>\", (0, _localization2.default)(\"No datasets were selected\"), \".\", \"<% } else if( _.size( elements ) === 1 ){ %>\", (0, _localization2.default)(\"Only one dataset was selected\"), \": <%- elements[0].name %>\", \"<% } else if( _.size( elements ) > 2 ){ %>\", (0, _localization2.default)(\"Too many datasets were selected\"), ': <%- _.pluck( elements, \"name\" ).join( \", \") %>', \"<% } %>\", \"<br />\", (0, _localization2.default)(\"Two (and only two) elements are needed for the pair\"), \". \", (0, _localization2.default)(\"You may need to \"), '<a class=\"cancel-create\" href=\"javascript:void(0)\">', (0, _localization2.default)(\"cancel\"), \"</a> \", (0, _localization2.default)(\"and reselect new elements\"), \".\", \"</span>\", \"</div>\", \"</div>\", '<div class=\"footer flex-row no-flex\">', '<div class=\"actions clear vertically-spaced\">', '<div class=\"other-options pull-left\">', '<button class=\"cancel-create btn\" tabindex=\"-1\">', (0, _localization2.default)(\"Cancel\"), \"</button>\",\n        // _l( 'Create a different kind of collection' ),\n        \"</div>\", \"</div>\", \"</div>\"].join(\"\"))\n    }),\n\n    // ------------------------------------------------------------------------ misc\n    /** string rep */\n    toString: function toString() {\n        return \"PairCollectionCreator\";\n    }\n});\n\n//==============================================================================\n/** List collection flavor of collectionCreatorModal. */\nvar pairCollectionCreatorModal = function _pairCollectionCreatorModal(elements, options) {\n    options = options || {};\n    options.title = (0, _localization2.default)(\"Create a collection from a pair of datasets\");\n    return _listCollectionCreator2.default.collectionCreatorModal(elements, options, PairCollectionCreator);\n};\n\n//==============================================================================\n/** Use a modal to create a pair collection, then add it to the given history contents.\n *  @returns {Deferred} resolved when the collection is added to the history.\n */\nfunction createPairCollection(contents, defaultHideSourceItems) {\n    var elements = contents.toJSON();\n\n    var promise = pairCollectionCreatorModal(elements, {\n        defaultHideSourceItems: defaultHideSourceItems,\n        creationFn: function creationFn(elements, name, hideSourceItems) {\n            elements = [{ name: \"forward\", src: \"hda\", id: elements[0].id }, { name: \"reverse\", src: \"hda\", id: elements[1].id }];\n            return contents.createHDCA(elements, \"paired\", name, hideSourceItems);\n        }\n    });\n\n    return promise;\n}\n\n//==============================================================================\nexports.default = {\n    PairCollectionCreator: PairCollectionCreator,\n    pairCollectionCreatorModal: pairCollectionCreatorModal,\n    createPairCollection: createPairCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///261\n");

/***/ }),
/* 262 */
/*!***************************************************************************!*\
  !*** ./galaxy/scripts/mvc/collection/list-of-pairs-collection-creator.js ***!
  \***************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, jQuery, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _levenshtein = __webpack_require__(/*! utils/levenshtein */ 263);\n\nvar _levenshtein2 = _interopRequireDefault(_levenshtein);\n\nvar _naturalSort = __webpack_require__(/*! utils/natural-sort */ 110);\n\nvar _naturalSort2 = _interopRequireDefault(_naturalSort);\n\nvar _baseCreator = __webpack_require__(/*! mvc/collection/base-creator */ 109);\n\nvar _baseCreator2 = _interopRequireDefault(_baseCreator);\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\n__webpack_require__(/*! ui/hoverhighlight */ 111);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logNamespace = \"collections\";\n/* ============================================================================\nTODO:\n\n\nPROGRAMMATICALLY:\ncurrPanel.once( 'rendered', function(){\n    currPanel.showSelectors();\n    currPanel.selectAll();\n    _.last( currPanel.actionsPopup.options ).func();\n});\n\n============================================================================ */\n/** A view for paired datasets in the collections creator.\n */\nvar PairView = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    tagName: \"li\",\n    className: \"dataset paired\",\n\n    initialize: function initialize(attributes) {\n        this.pair = attributes.pair || {};\n    },\n\n    template: _.template(['<span class=\"forward-dataset-name flex-column\"><%- pair.forward.name %></span>', '<span class=\"pair-name-column flex-column\">', '<span class=\"pair-name\"><%- pair.name %></span>', \"</span>\", '<span class=\"reverse-dataset-name flex-column\"><%- pair.reverse.name %></span>'].join(\"\")),\n\n    render: function render() {\n        this.dragStartHandler = _.bind(this._dragstart, this);\n        this.dragEndHandler = _.bind(this._dragend, this);\n        var handle = this.$el.attr(\"draggable\", true).data(\"pair\", this.pair).html(this.template({ pair: this.pair })).addClass(\"flex-column-container\").get(0);\n        handle.addEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.addEventListener(\"dragend\", this.dragEndHandler, false);\n        return this;\n    },\n\n    events: {\n        dragover: \"_sendToParent\",\n        drop: \"_sendToParent\"\n    },\n\n    /** dragging pairs for re-ordering */\n    _dragstart: function _dragstart(ev) {\n        ev.currentTarget.style.opacity = \"0.4\";\n        if (ev.originalEvent) {\n            ev = ev.originalEvent;\n        }\n\n        ev.dataTransfer.effectAllowed = \"move\";\n        ev.dataTransfer.setData(\"text/plain\", JSON.stringify(this.pair));\n\n        this.$el.parent().trigger(\"pair.dragstart\", [this]);\n    },\n\n    /** dragging pairs for re-ordering */\n    _dragend: function _dragend(ev) {\n        ev.currentTarget.style.opacity = \"1.0\";\n        this.$el.parent().trigger(\"pair.dragend\", [this]);\n    },\n\n    /** manually bubble up an event to the parent/container */\n    _sendToParent: function _sendToParent(ev) {\n        this.$el.parent().trigger(ev);\n    },\n\n    /** string rep */\n    toString: function toString() {\n        return \"PairView(\" + this.pair.name + \")\";\n    }\n});\n\n// ============================================================================\n/** returns an autopair function that uses the provided options.match function */\nfunction autoPairFnBuilder(options) {\n    options = options || {};\n    options.createPair = options.createPair || function _defaultCreatePair(params) {\n        params = params || {};\n        var a = params.listA.splice(params.indexA, 1)[0];\n        var b = params.listB.splice(params.indexB, 1)[0];\n        var aInBIndex = params.listB.indexOf(a);\n        var bInAIndex = params.listA.indexOf(b);\n        if (aInBIndex !== -1) {\n            params.listB.splice(aInBIndex, 1);\n        }\n        if (bInAIndex !== -1) {\n            params.listA.splice(bInAIndex, 1);\n        }\n        return this._pair(a, b, { silent: true });\n    };\n    // compile these here outside of the loop\n    var _regexps = [];\n    function getRegExps() {\n        if (!_regexps.length) {\n            _regexps = [new RegExp(this.filters[0]), new RegExp(this.filters[1])];\n        }\n        return _regexps;\n    }\n    // mangle params as needed\n    options.preprocessMatch = options.preprocessMatch || function _defaultPreprocessMatch(params) {\n        var regexps = getRegExps.call(this);\n        return _.extend(params, {\n            matchTo: params.matchTo.name.replace(regexps[0], \"\"),\n            possible: params.possible.name.replace(regexps[1], \"\")\n        });\n    };\n\n    return function _strategy(params) {\n        this.debug(\"autopair _strategy ---------------------------\");\n        params = params || {};\n        var listA = params.listA;\n        var listB = params.listB;\n        var indexA = 0;\n        var indexB;\n\n        var bestMatch = {\n            score: 0.0,\n            index: null\n        };\n\n        var paired = [];\n        //console.debug( 'params:', JSON.stringify( params, null, '  ' ) );\n        this.debug(\"starting list lens:\", listA.length, listB.length);\n        this.debug(\"bestMatch (starting):\", JSON.stringify(bestMatch, null, \"  \"));\n\n        while (indexA < listA.length) {\n            var matchTo = listA[indexA];\n            bestMatch.score = 0.0;\n\n            for (indexB = 0; indexB < listB.length; indexB++) {\n                var possible = listB[indexB];\n                this.debug(indexA + \":\" + matchTo.name);\n                this.debug(indexB + \":\" + possible.name);\n\n                // no matching with self\n                if (listA[indexA] !== listB[indexB]) {\n                    bestMatch = options.match.call(this, options.preprocessMatch.call(this, {\n                        matchTo: matchTo,\n                        possible: possible,\n                        index: indexB,\n                        bestMatch: bestMatch\n                    }));\n                    this.debug(\"bestMatch:\", JSON.stringify(bestMatch, null, \"  \"));\n                    if (bestMatch.score === 1.0) {\n                        this.debug(\"breaking early due to perfect match\");\n                        break;\n                    }\n                }\n            }\n            var scoreThreshold = options.scoreThreshold.call(this);\n            this.debug(\"scoreThreshold:\", scoreThreshold);\n            this.debug(\"bestMatch.score:\", bestMatch.score);\n\n            if (bestMatch.score >= scoreThreshold) {\n                //console.debug( 'autoPairFnBuilder.strategy', listA[ indexA ].name, listB[ bestMatch.index ].name );\n                paired.push(options.createPair.call(this, {\n                    listA: listA,\n                    indexA: indexA,\n                    listB: listB,\n                    indexB: bestMatch.index\n                }));\n                //console.debug( 'list lens now:', listA.length, listB.length );\n            } else {\n                indexA += 1;\n            }\n            if (!listA.length || !listB.length) {\n                return paired;\n            }\n        }\n        this.debug(\"paired:\", JSON.stringify(paired, null, \"  \"));\n        this.debug(\"autopair _strategy ---------------------------\");\n        return paired;\n    };\n}\n\n// ============================================================================\n/** An interface for building collections of paired datasets.\n */\nvar PairedCollectionCreator = Backbone.View.extend(_baseMvc2.default.LoggableMixin).extend(_baseCreator2.default.CollectionCreatorMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"list-of-pairs-collection-creator collection-creator flex-row-container\",\n\n    /** set up initial options, instance vars, behaviors, and autopair (if set to do so) */\n    initialize: function initialize(attributes) {\n        this.metric(\"PairedCollectionCreator.initialize\", attributes);\n        //this.debug( '-- PairedCollectionCreator:', attributes );\n\n        attributes = _.defaults(attributes, {\n            datasets: [],\n            filters: this.DEFAULT_FILTERS,\n            automaticallyPair: true,\n            strategy: \"lcs\",\n            matchPercentage: 0.9,\n            twoPassAutopairing: true\n        });\n\n        /** unordered, original list */\n        this.initialList = attributes.datasets;\n\n        /** is this from a history? if so, what's its id? */\n        this.historyId = attributes.historyId;\n\n        /** which filters should be used initially? (String[2] or name in commonFilters) */\n        this.filters = this.commonFilters[attributes.filters] || this.commonFilters[this.DEFAULT_FILTERS];\n        if (_.isArray(attributes.filters)) {\n            this.filters = attributes.filters;\n        }\n\n        /** try to auto pair the unpaired datasets on load? */\n        this.automaticallyPair = attributes.automaticallyPair;\n\n        /** what method to use for auto pairing (will be passed aggression level) */\n        this.strategy = this.strategies[attributes.strategy] || this.strategies[this.DEFAULT_STRATEGY];\n        if (_.isFunction(attributes.strategy)) {\n            this.strategy = attributes.strategy;\n        }\n\n        /** distance/mismatch level allowed for autopairing */\n        this.matchPercentage = attributes.matchPercentage;\n\n        /** try to autopair using simple first, then this.strategy on the remainder */\n        this.twoPassAutopairing = attributes.twoPassAutopairing;\n\n        /** remove file extensions (\\.*) from created pair names? */\n        this.removeExtensions = true;\n        //this.removeExtensions = false;\n\n        /** fn to call when the cancel button is clicked (scoped to this) - if falsy, no btn is displayed */\n        this.oncancel = attributes.oncancel;\n        /** fn to call when the collection is created (scoped to this) */\n        this.oncreate = attributes.oncreate;\n\n        /** fn to call when the cancel button is clicked (scoped to this) - if falsy, no btn is displayed */\n        this.autoscrollDist = attributes.autoscrollDist || 24;\n\n        /** is the unpaired panel shown? */\n        this.unpairedPanelHidden = false;\n        /** is the paired panel shown? */\n        this.pairedPanelHidden = false;\n\n        /** DOM elements currently being dragged */\n        this.$dragging = null;\n\n        /** Used for blocking UI events during ajax/operations (don't post twice) */\n        this.blocking = false;\n\n        this._setUpCommonSettings(attributes);\n        this._setUpBehaviors();\n        this._dataSetUp();\n    },\n\n    /** map of common filter pairs by name */\n    commonFilters: {\n        illumina: [\"_1\", \"_2\"],\n        Rs: [\"_R1\", \"_R2\"]\n    },\n    /** which commonFilter to use by default */\n    DEFAULT_FILTERS: \"illumina\",\n\n    /** map of name->fn for autopairing */\n    strategies: {\n        simple: \"autopairSimple\",\n        lcs: \"autopairLCS\",\n        levenshtein: \"autopairLevenshtein\"\n    },\n    /** default autopair strategy name */\n    DEFAULT_STRATEGY: \"lcs\",\n\n    // ------------------------------------------------------------------------ process raw list\n    /** set up main data: cache initialList, sort, and autopair */\n    _dataSetUp: function _dataSetUp() {\n        //this.debug( '-- _dataSetUp' );\n\n        this.paired = [];\n        this.unpaired = [];\n\n        this.selectedIds = [];\n\n        // sort initial list, add ids if needed, and save new working copy to unpaired\n        this._sortInitialList();\n        this._ensureIds();\n        this.unpaired = this.initialList.slice(0);\n\n        if (this.automaticallyPair) {\n            this.autoPair();\n            this.once(\"rendered:initial\", function () {\n                this.trigger(\"autopair\");\n            });\n        }\n    },\n\n    /** sort initial list */\n    _sortInitialList: function _sortInitialList() {\n        //this.debug( '-- _sortInitialList' );\n        this._sortDatasetList(this.initialList);\n    },\n\n    /** sort a list of datasets */\n    _sortDatasetList: function _sortDatasetList(list) {\n        // currently only natural sort by name\n        list.sort(function (a, b) {\n            return (0, _naturalSort2.default)(a.name, b.name);\n        });\n        return list;\n    },\n\n    /** add ids to dataset objs in initial list if none */\n    _ensureIds: function _ensureIds() {\n        this.initialList.forEach(function (dataset) {\n            if (!dataset.hasOwnProperty(\"id\")) {\n                dataset.id = _.uniqueId();\n            }\n        });\n        return this.initialList;\n    },\n\n    /** split initial list into two lists, those that pass forward filters & those passing reverse */\n    _splitByFilters: function _splitByFilters() {\n        var regexFilters = this.filters.map(function (stringFilter) {\n            return new RegExp(stringFilter);\n        });\n\n        var split = [[], []];\n\n        function _filter(unpaired, filter) {\n            return filter.test(unpaired.name);\n            //return dataset.name.indexOf( filter ) >= 0;\n        }\n        this.unpaired.forEach(function _filterEach(unpaired) {\n            // 90% of the time this seems to work, but:\n            //TODO: this treats *all* strings as regex which may confuse people - possibly check for // surrounding?\n            //  would need explanation in help as well\n            regexFilters.forEach(function (filter, i) {\n                if (_filter(unpaired, filter)) {\n                    split[i].push(unpaired);\n                }\n            });\n        });\n        return split;\n    },\n\n    /** add a dataset to the unpaired list in it's proper order */\n    _addToUnpaired: function _addToUnpaired(dataset) {\n        var _this = this;\n\n        // currently, unpaired is natural sorted by name, use binary search to find insertion point\n        var binSearchSortedIndex = function binSearchSortedIndex(low, hi) {\n            if (low === hi) {\n                return low;\n            }\n\n            var mid = Math.floor((hi - low) / 2) + low;\n\n            var compared = (0, _naturalSort2.default)(dataset.name, _this.unpaired[mid].name);\n\n            if (compared < 0) {\n                return binSearchSortedIndex(low, mid);\n            } else if (compared > 0) {\n                return binSearchSortedIndex(mid + 1, hi);\n            }\n            // walk the equal to find the last\n            while (_this.unpaired[mid] && _this.unpaired[mid].name === dataset.name) {\n                mid++;\n            }\n            return mid;\n        };\n\n        this.unpaired.splice(binSearchSortedIndex(0, this.unpaired.length), 0, dataset);\n    },\n\n    // ------------------------------------------------------------------------ auto pairing\n    /** two passes to automatically create pairs:\n     *  use both simpleAutoPair, then the fn mentioned in strategy\n     */\n    autoPair: function autoPair(strategy) {\n        // split first using exact matching\n        var split = this._splitByFilters();\n\n        var paired = [];\n        if (this.twoPassAutopairing) {\n            paired = this.autopairSimple({\n                listA: split[0],\n                listB: split[1]\n            });\n            split = this._splitByFilters();\n        }\n\n        // uncomment to see printlns while running tests\n        //this.debug = function(){ console.log.apply( console, arguments ); };\n\n        // then try the remainder with something less strict\n        strategy = strategy || this.strategy;\n        split = this._splitByFilters();\n        paired = paired.concat(this[strategy].call(this, {\n            listA: split[0],\n            listB: split[1]\n        }));\n        return paired;\n    },\n\n    /** autopair by exact match */\n    autopairSimple: autoPairFnBuilder({\n        scoreThreshold: function scoreThreshold() {\n            return 0.6;\n        },\n        match: function _match(params) {\n            params = params || {};\n            if (params.matchTo === params.possible) {\n                return {\n                    index: params.index,\n                    score: 1.0\n                };\n            }\n            return params.bestMatch;\n        }\n    }),\n\n    /** autopair by levenshtein edit distance scoring */\n    autopairLevenshtein: autoPairFnBuilder({\n        scoreThreshold: function scoreThreshold() {\n            return this.matchPercentage;\n        },\n        match: function _matches(params) {\n            params = params || {};\n\n            var distance = (0, _levenshtein2.default)(params.matchTo, params.possible);\n\n            var score = 1.0 - distance / Math.max(params.matchTo.length, params.possible.length);\n\n            if (score > params.bestMatch.score) {\n                return {\n                    index: params.index,\n                    score: score\n                };\n            }\n            return params.bestMatch;\n        }\n    }),\n\n    /** autopair by longest common substrings scoring */\n    autopairLCS: autoPairFnBuilder({\n        scoreThreshold: function scoreThreshold() {\n            return this.matchPercentage;\n        },\n        match: function _matches(params) {\n            params = params || {};\n\n            var match = this._naiveStartingAndEndingLCS(params.matchTo, params.possible).length;\n\n            var score = match / Math.max(params.matchTo.length, params.possible.length);\n\n            if (score > params.bestMatch.score) {\n                return {\n                    index: params.index,\n                    score: score\n                };\n            }\n            return params.bestMatch;\n        }\n    }),\n\n    /** return the concat'd longest common prefix and suffix from two strings */\n    _naiveStartingAndEndingLCS: function _naiveStartingAndEndingLCS(s1, s2) {\n        var fwdLCS = \"\";\n        var revLCS = \"\";\n        var i = 0;\n        var j = 0;\n        while (i < s1.length && i < s2.length) {\n            if (s1[i] !== s2[i]) {\n                break;\n            }\n            fwdLCS += s1[i];\n            i += 1;\n        }\n        if (i === s1.length) {\n            return s1;\n        }\n        if (i === s2.length) {\n            return s2;\n        }\n\n        i = s1.length - 1;\n        j = s2.length - 1;\n        while (i >= 0 && j >= 0) {\n            if (s1[i] !== s2[j]) {\n                break;\n            }\n            revLCS = [s1[i], revLCS].join(\"\");\n            i -= 1;\n            j -= 1;\n        }\n        return fwdLCS + revLCS;\n    },\n\n    // ------------------------------------------------------------------------ pairing / unpairing\n    /** create a pair from fwd and rev, removing them from unpaired, and placing the new pair in paired */\n    _pair: function _pair(fwd, rev, options) {\n        options = options || {};\n        this.debug(\"_pair:\", fwd, rev);\n        var pair = this._createPair(fwd, rev, options.name);\n        this.paired.push(pair);\n        this.unpaired = _.without(this.unpaired, fwd, rev);\n        if (!options.silent) {\n            this.trigger(\"pair:new\", pair);\n        }\n        return pair;\n    },\n\n    /** create a pair Object from fwd and rev, adding the name attribute (will guess if not given) */\n    _createPair: function _createPair(fwd, rev, name) {\n        // ensure existance and don't pair something with itself\n        if (!(fwd && rev) || fwd === rev) {\n            throw new Error(\"Bad pairing: \" + [JSON.stringify(fwd), JSON.stringify(rev)]);\n        }\n        name = name || this._guessNameForPair(fwd, rev);\n        return { forward: fwd, name: name, reverse: rev };\n    },\n\n    /** try to find a good pair name for the given fwd and rev datasets */\n    _guessNameForPair: function _guessNameForPair(fwd, rev, removeExtensions) {\n        removeExtensions = removeExtensions !== undefined ? removeExtensions : this.removeExtensions;\n        var fwdName = fwd.name;\n        var revName = rev.name;\n\n        var lcs = this._naiveStartingAndEndingLCS(fwdName.replace(new RegExp(this.filters[0]), \"\"), revName.replace(new RegExp(this.filters[1]), \"\"));\n\n        if (removeExtensions) {\n            var lastDotIndex = lcs.lastIndexOf(\".\");\n            if (lastDotIndex > 0) {\n                var extension = lcs.slice(lastDotIndex, lcs.length);\n                lcs = lcs.replace(extension, \"\");\n                fwdName = fwdName.replace(extension, \"\");\n                revName = revName.replace(extension, \"\");\n            }\n        }\n        return lcs || fwdName + \" & \" + revName;\n    },\n\n    /** unpair a pair, removing it from paired, and adding the fwd,rev datasets back into unpaired */\n    _unpair: function _unpair(pair, options) {\n        options = options || {};\n        if (!pair) {\n            throw new Error(\"Bad pair: \" + JSON.stringify(pair));\n        }\n        this.paired = _.without(this.paired, pair);\n        this._addToUnpaired(pair.forward);\n        this._addToUnpaired(pair.reverse);\n\n        if (!options.silent) {\n            this.trigger(\"pair:unpair\", [pair]);\n        }\n        return pair;\n    },\n\n    /** unpair all paired datasets */\n    unpairAll: function unpairAll() {\n        var pairs = [];\n        while (this.paired.length) {\n            pairs.push(this._unpair(this.paired[0], { silent: true }));\n        }\n        this.trigger(\"pair:unpair\", pairs);\n    },\n\n    // ------------------------------------------------------------------------ API\n    /** convert a pair into JSON compatible with the collections API */\n    _pairToJSON: function _pairToJSON(pair, src) {\n        src = src || \"hda\";\n        //TODO: consider making this the pair structure when created instead\n        return {\n            collection_type: \"paired\",\n            src: \"new_collection\",\n            name: pair.name,\n            element_identifiers: [{\n                name: \"forward\",\n                id: pair.forward.id,\n                src: src\n            }, {\n                name: \"reverse\",\n                id: pair.reverse.id,\n                src: src\n            }]\n        };\n    },\n\n    /** create the collection via the API\n     *  @returns {jQuery.xhr Object}    the jquery ajax request\n     */\n    createList: function createList(name) {\n        var self = this;\n\n        var url = Galaxy.root + \"api/histories/\" + this.historyId + \"/contents/dataset_collections\";\n\n        var ajaxData = {\n            type: \"dataset_collection\",\n            collection_type: \"list:paired\",\n            hide_source_items: self.hideOriginals || false,\n            name: _.escape(name || self.$(\".collection-name\").val()),\n            element_identifiers: self.paired.map(function (pair) {\n                return self._pairToJSON(pair);\n            })\n        };\n        //this.debug( JSON.stringify( ajaxData ) );\n        self.blocking = true;\n        return jQuery.ajax(url, {\n            type: \"POST\",\n            contentType: \"application/json\",\n            dataType: \"json\",\n            data: JSON.stringify(ajaxData)\n        }).always(function () {\n            self.blocking = false;\n        }).fail(function (xhr, status, message) {\n            self._ajaxErrHandler(xhr, status, message);\n        }).done(function (response, message, xhr) {\n            //this.info( 'ok', response, message, xhr );\n            self.trigger(\"collection:created\", response, message, xhr);\n            self.metric(\"collection:created\", response);\n            if (typeof self.oncreate === \"function\") {\n                self.oncreate.call(this, response, message, xhr);\n            }\n        });\n    },\n\n    /** handle ajax errors with feedback and details to the user (if available) */\n    _ajaxErrHandler: function _ajaxErrHandler(xhr, status, message) {\n        this.error(xhr, status, message);\n        var self = this;\n        var content = (0, _localization2.default)(\"An error occurred while creating this collection\");\n        if (xhr) {\n            if (xhr.readyState === 0 && xhr.status === 0) {\n                content += \": \" + (0, _localization2.default)(\"Galaxy could not be reached and may be updating.\") + (0, _localization2.default)(\" Try again in a few minutes.\");\n            } else if (xhr.responseJSON) {\n                content += \"<br /><pre>\" + JSON.stringify(xhr.responseJSON) + \"</pre>\";\n            } else {\n                content += \": \" + message;\n            }\n        }\n        self._showAlert(content, \"alert-danger\");\n    },\n\n    // ------------------------------------------------------------------------ rendering\n    /** render the entire interface */\n    render: function render(speed, callback) {\n        //this.debug( '-- _render' );\n        //this.$el.empty().html( this.templates.main() );\n        this.$el.empty().html(this.templates.main());\n        this._renderHeader(speed);\n        this._renderMiddle(speed);\n        this._renderFooter(speed);\n        this._addPluginComponents();\n        this.trigger(\"rendered\", this);\n        return this;\n    },\n\n    /** render the header section */\n    _renderHeader: function _renderHeader(speed, callback) {\n        //this.debug( '-- _renderHeader' );\n        var $header = this.$(\".header\").empty().html(this.templates.header()).find(\".help-content\").prepend($(this.templates.helpContent()));\n\n        this._renderFilters();\n        return $header;\n    },\n    /** fill the filter inputs with the filter values */\n    _renderFilters: function _renderFilters() {\n        return this.$(\".forward-column .column-header input\").val(this.filters[0]).add(this.$(\".reverse-column .column-header input\").val(this.filters[1]));\n    },\n\n    /** render the middle including unpaired and paired sections (which may be hidden) */\n    _renderMiddle: function _renderMiddle(speed, callback) {\n        var $middle = this.$(\".middle\").empty().html(this.templates.middle());\n\n        // (re-) hide the un/paired panels based on instance vars\n        if (this.unpairedPanelHidden) {\n            this.$(\".unpaired-columns\").hide();\n        } else if (this.pairedPanelHidden) {\n            this.$(\".paired-columns\").hide();\n        }\n\n        this._renderUnpaired();\n        this._renderPaired();\n        return $middle;\n    },\n    /** render the unpaired section, showing datasets accrd. to filters, update the unpaired counts */\n    _renderUnpaired: function _renderUnpaired(speed, callback) {\n        //this.debug( '-- _renderUnpaired' );\n        var self = this;\n\n        var $fwd;\n        var $rev;\n        var $prd = [];\n        var split = this._splitByFilters();\n        // update unpaired counts\n        this.$(\".forward-column .title\").text([split[0].length, (0, _localization2.default)(\"unpaired forward\")].join(\" \"));\n        this.$(\".forward-column .unpaired-info\").text(this._renderUnpairedDisplayStr(this.unpaired.length - split[0].length));\n        this.$(\".reverse-column .title\").text([split[1].length, (0, _localization2.default)(\"unpaired reverse\")].join(\" \"));\n        this.$(\".reverse-column .unpaired-info\").text(this._renderUnpairedDisplayStr(this.unpaired.length - split[1].length));\n\n        this.$(\".unpaired-columns .column-datasets\").empty();\n\n        // show/hide the auto pair button if any unpaired are left\n        this.$(\".autopair-link\").toggle(this.unpaired.length !== 0);\n        if (this.unpaired.length === 0) {\n            this._renderUnpairedEmpty();\n            return;\n        }\n\n        // create the dataset dom arrays\n        $rev = split[1].map(function (dataset, i) {\n            // if there'll be a fwd dataset across the way, add a button to pair the row\n            if (split[0][i] !== undefined && split[0][i] !== dataset) {\n                $prd.push(self._renderPairButton());\n            }\n            return self._renderUnpairedDataset(dataset);\n        });\n        $fwd = split[0].map(function (dataset) {\n            return self._renderUnpairedDataset(dataset);\n        });\n\n        if (!$fwd.length && !$rev.length) {\n            this._renderUnpairedNotShown();\n            return;\n        }\n        // add to appropo cols\n        //TODO: not the best way to render - consider rendering the entire unpaired-columns section in a fragment\n        //  and swapping out that\n        this.$(\".unpaired-columns .forward-column .column-datasets\").append($fwd).add(this.$(\".unpaired-columns .paired-column .column-datasets\").append($prd)).add(this.$(\".unpaired-columns .reverse-column .column-datasets\").append($rev));\n        this._adjUnpairedOnScrollbar();\n    },\n    /** return a string to display the count of filtered out datasets */\n    _renderUnpairedDisplayStr: function _renderUnpairedDisplayStr(numFiltered) {\n        return [\"(\", numFiltered, \" \", (0, _localization2.default)(\"filtered out\"), \")\"].join(\"\");\n    },\n    /** return an unattached jQuery DOM element to represent an unpaired dataset */\n    _renderUnpairedDataset: function _renderUnpairedDataset(dataset) {\n        //TODO: to underscore template\n        return $(\"<li/>\").attr(\"id\", \"dataset-\" + dataset.id).addClass(\"dataset unpaired\").attr(\"draggable\", true).addClass(dataset.selected ? \"selected\" : \"\").append($(\"<span/>\").addClass(\"dataset-name\").text(dataset.name))\n        //??\n        .data(\"dataset\", dataset);\n    },\n    /** render the button that may go between unpaired datasets, allowing the user to pair a row */\n    _renderPairButton: function _renderPairButton() {\n        //TODO: *not* a dataset - don't pretend like it is\n        return $(\"<li/>\").addClass(\"dataset unpaired\").append($(\"<span/>\").addClass(\"dataset-name\").text((0, _localization2.default)(\"Pair these datasets\")));\n    },\n    /** a message to display when no unpaired left */\n    _renderUnpairedEmpty: function _renderUnpairedEmpty() {\n        //this.debug( '-- renderUnpairedEmpty' );\n        var $msg = $('<div class=\"empty-message\"></div>').text(\"(\" + (0, _localization2.default)(\"no remaining unpaired datasets\") + \")\");\n        this.$(\".unpaired-columns .paired-column .column-datasets\").empty().prepend($msg);\n        return $msg;\n    },\n    /** a message to display when no unpaired can be shown with the current filters */\n    _renderUnpairedNotShown: function _renderUnpairedNotShown() {\n        //this.debug( '-- renderUnpairedEmpty' );\n        var $msg = $('<div class=\"empty-message\"></div>').text(\"(\" + (0, _localization2.default)(\"no datasets were found matching the current filters\") + \")\");\n        this.$(\".unpaired-columns .paired-column .column-datasets\").empty().prepend($msg);\n        return $msg;\n    },\n    /** try to detect if the unpaired section has a scrollbar and adjust left column for better centering of all */\n    _adjUnpairedOnScrollbar: function _adjUnpairedOnScrollbar() {\n        var $unpairedColumns = this.$(\".unpaired-columns\").last();\n\n        var $firstDataset = this.$(\".unpaired-columns .reverse-column .dataset\").first();\n\n        if (!$firstDataset.length) {\n            return;\n        }\n\n        var ucRight = $unpairedColumns.offset().left + $unpairedColumns.outerWidth();\n\n        var dsRight = $firstDataset.offset().left + $firstDataset.outerWidth();\n\n        var rightDiff = Math.floor(ucRight) - Math.floor(dsRight);\n        //this.debug( 'rightDiff:', ucRight, '-', dsRight, '=', rightDiff );\n        this.$(\".unpaired-columns .forward-column\").css(\"margin-left\", rightDiff > 0 ? rightDiff : 0);\n    },\n\n    /** render the paired section and update counts of paired datasets */\n    _renderPaired: function _renderPaired(speed, callback) {\n        //this.debug( '-- _renderPaired' );\n        this.$(\".paired-column-title .title\").text([this.paired.length, (0, _localization2.default)(\"paired\")].join(\" \"));\n        // show/hide the unpair all link\n        this.$(\".unpair-all-link\").toggle(this.paired.length !== 0);\n        if (this.paired.length === 0) {\n            this._renderPairedEmpty();\n            return;\n            //TODO: would be best to return here (the $columns)\n        } else {\n            // show/hide 'remove extensions link' when any paired and they seem to have extensions\n            this.$(\".remove-extensions-link\").show();\n        }\n\n        this.$(\".paired-columns .column-datasets\").empty();\n        var self = this;\n        this.paired.forEach(function (pair, i) {\n            //TODO: cache these?\n            var pairView = new PairView({ pair: pair });\n            self.$(\".paired-columns .column-datasets\").append(pairView.render().$el).append(['<button class=\"unpair-btn\">', '<span class=\"fa fa-unlink\" title=\"', (0, _localization2.default)(\"Unpair\"), '\"></span>', \"</button>\"].join(\"\"));\n        });\n    },\n    /** a message to display when none paired */\n    _renderPairedEmpty: function _renderPairedEmpty() {\n        var $msg = $('<div class=\"empty-message\"></div>').text(\"(\" + (0, _localization2.default)(\"no paired datasets yet\") + \")\");\n        this.$(\".paired-columns .column-datasets\").empty().prepend($msg);\n        return $msg;\n    },\n\n    footerSettings: {\n        \".hide-originals\": \"hideOriginals\",\n        \".remove-extensions\": \"removeExtensions\"\n    },\n\n    /** add any jQuery/bootstrap/custom plugins to elements rendered */\n    _addPluginComponents: function _addPluginComponents() {\n        this._chooseFiltersPopover(\".choose-filters-link\");\n        this.$(\".help-content i\").hoverhighlight(\".collection-creator\", \"rgba( 64, 255, 255, 1.0 )\");\n    },\n\n    /** build a filter selection popover allowing selection of common filter pairs */\n    _chooseFiltersPopover: function _chooseFiltersPopover(selector) {\n        function filterChoice(val1, val2) {\n            return ['<button class=\"filter-choice btn\" ', 'data-forward=\"', val1, '\" data-reverse=\"', val2, '\">', (0, _localization2.default)(\"Forward\"), \": \", val1, \", \", (0, _localization2.default)(\"Reverse\"), \": \", val2, \"</button>\"].join(\"\");\n        }\n        var $popoverContent = $(_.template(['<div class=\"choose-filters\">', '<div class=\"help\">', (0, _localization2.default)(\"Choose from the following filters to change which unpaired reads are shown in the display\"), \":</div>\", _.values(this.commonFilters).map(function (filterSet) {\n            return filterChoice(filterSet[0], filterSet[1]);\n        }).join(\"\"), \"</div>\"].join(\"\"))({}));\n\n        return this.$(selector).popover({\n            container: \".collection-creator\",\n            placement: \"bottom\",\n            html: true,\n            //animation   : false,\n            content: $popoverContent\n        });\n    },\n\n    /** add (or clear if clear is truthy) a validation warning to what */\n    _validationWarning: function _validationWarning(what, clear) {\n        var VALIDATION_CLASS = \"validation-warning\";\n        if (what === \"name\") {\n            what = this.$(\".collection-name\").add(this.$(\".collection-name-prompt\"));\n            this.$(\".collection-name\").focus().select();\n        }\n        if (clear) {\n            what = what || this.$(\".\" + VALIDATION_CLASS);\n            what.removeClass(VALIDATION_CLASS);\n        } else {\n            what.addClass(VALIDATION_CLASS);\n        }\n    },\n\n    // ------------------------------------------------------------------------ events\n    /** set up event handlers on self */\n    _setUpBehaviors: function _setUpBehaviors() {\n        this.once(\"rendered\", function () {\n            this.trigger(\"rendered:initial\", this);\n        });\n\n        this.on(\"pair:new\", function () {\n            //TODO: ideally only re-render the columns (or even elements) involved\n            this._renderUnpaired();\n            this._renderPaired();\n\n            // scroll to bottom where new pairs are added\n            //TODO: this doesn't seem to work - innerHeight sticks at 133...\n            //  may have to do with improper flex columns\n            //var $pairedView = this.$( '.paired-columns' );\n            //$pairedView.scrollTop( $pairedView.innerHeight() );\n            //this.debug( $pairedView.height() )\n            this.$(\".paired-columns\").scrollTop(8000000);\n        });\n        this.on(\"pair:unpair\", function (pairs) {\n            //TODO: ideally only re-render the columns (or even elements) involved\n            this._renderUnpaired();\n            this._renderPaired();\n            this.splitView();\n        });\n\n        this.on(\"filter-change\", function () {\n            this.filters = [this.$(\".forward-unpaired-filter input\").val(), this.$(\".reverse-unpaired-filter input\").val()];\n            this.metric(\"filter-change\", this.filters);\n            this._renderFilters();\n            this._renderUnpaired();\n        });\n\n        this.on(\"autopair\", function () {\n            this._renderUnpaired();\n            this._renderPaired();\n\n            var message;\n            var msgClass = null;\n            if (this.paired.length) {\n                msgClass = \"alert-success\";\n                message = this.paired.length + \" \" + (0, _localization2.default)(\"pairs created\");\n                if (!this.unpaired.length) {\n                    message += \": \" + (0, _localization2.default)(\"all datasets have been successfully paired\");\n                    this.hideUnpaired();\n                    this.$(\".collection-name\").focus();\n                }\n            } else {\n                message = (0, _localization2.default)([\"Could not automatically create any pairs from the given dataset names.\", \"You may want to choose or enter different filters and try auto-pairing again.\", \"Close this message using the X on the right to view more help.\"].join(\" \"));\n            }\n            this._showAlert(message, msgClass);\n        });\n\n        //this.on( 'all', function(){\n        //    this.info( arguments );\n        //});\n        return this;\n    },\n\n    events: {\n        // header\n        \"click .more-help\": \"_clickMoreHelp\",\n        \"click .less-help\": \"_clickLessHelp\",\n        \"click .main-help\": \"_toggleHelp\",\n        \"click .header .alert button\": \"_hideAlert\",\n        \"click .forward-column .column-title\": \"_clickShowOnlyUnpaired\",\n        \"click .reverse-column .column-title\": \"_clickShowOnlyUnpaired\",\n        \"click .unpair-all-link\": \"_clickUnpairAll\",\n        //TODO: this seems kinda backasswards - re-sending jq event as a backbone event, can we listen directly?\n        \"change .forward-unpaired-filter input\": function changeForwardUnpairedFilterInput(ev) {\n            this.trigger(\"filter-change\");\n        },\n        \"focus .forward-unpaired-filter input\": function focusForwardUnpairedFilterInput(ev) {\n            $(ev.currentTarget).select();\n        },\n        \"click .autopair-link\": \"_clickAutopair\",\n        \"click .choose-filters .filter-choice\": \"_clickFilterChoice\",\n        \"click .clear-filters-link\": \"_clearFilters\",\n        \"change .reverse-unpaired-filter input\": function changeReverseUnpairedFilterInput(ev) {\n            this.trigger(\"filter-change\");\n        },\n        \"focus .reverse-unpaired-filter input\": function focusReverseUnpairedFilterInput(ev) {\n            $(ev.currentTarget).select();\n        },\n        // unpaired\n        \"click .forward-column .dataset.unpaired\": \"_clickUnpairedDataset\",\n        \"click .reverse-column .dataset.unpaired\": \"_clickUnpairedDataset\",\n        \"click .paired-column .dataset.unpaired\": \"_clickPairRow\",\n        \"click .unpaired-columns\": \"clearSelectedUnpaired\",\n        \"mousedown .unpaired-columns .dataset\": \"_mousedownUnpaired\",\n        // divider\n        \"click .paired-column-title\": \"_clickShowOnlyPaired\",\n        \"mousedown .flexible-partition-drag\": \"_startPartitionDrag\",\n        // paired\n        \"click .paired-columns .dataset.paired\": \"selectPair\",\n        \"click .paired-columns\": \"clearSelectedPaired\",\n        \"click .paired-columns .pair-name\": \"_clickPairName\",\n        \"click .unpair-btn\": \"_clickUnpair\",\n        // paired - drop target\n        //'dragenter .paired-columns'                 : '_dragenterPairedColumns',\n        //'dragleave .paired-columns .column-datasets': '_dragleavePairedColumns',\n        \"dragover .paired-columns .column-datasets\": \"_dragoverPairedColumns\",\n        \"drop .paired-columns .column-datasets\": \"_dropPairedColumns\",\n\n        \"pair.dragstart .paired-columns .column-datasets\": \"_pairDragstart\",\n        \"pair.dragend   .paired-columns .column-datasets\": \"_pairDragend\",\n\n        // footer\n        \"change .remove-extensions\": function changeRemoveExtensions(ev) {\n            this.toggleExtensions();\n        },\n        \"change .collection-name\": \"_changeName\",\n        \"keydown .collection-name\": \"_nameCheckForEnter\",\n        \"change .hide-originals\": \"_changeHideOriginals\",\n        \"click .cancel-create\": \"_cancelCreate\",\n        \"click .create-collection\": \"_clickCreate\" //,\n    },\n\n    /** toggle between showing only unpaired and split view */\n    _clickShowOnlyUnpaired: function _clickShowOnlyUnpaired(ev) {\n        //this.debug( 'click unpaired', ev.currentTarget );\n        if (this.$(\".paired-columns\").is(\":visible\")) {\n            this.hidePaired();\n        } else {\n            this.splitView();\n        }\n    },\n    /** toggle between showing only paired and split view */\n    _clickShowOnlyPaired: function _clickShowOnlyPaired(ev) {\n        //this.debug( 'click paired' );\n        if (this.$(\".unpaired-columns\").is(\":visible\")) {\n            this.hideUnpaired();\n        } else {\n            this.splitView();\n        }\n    },\n\n    /** hide unpaired, show paired */\n    hideUnpaired: function hideUnpaired(speed, callback) {\n        this.unpairedPanelHidden = true;\n        this.pairedPanelHidden = false;\n        this._renderMiddle(speed, callback);\n    },\n    /** hide paired, show unpaired */\n    hidePaired: function hidePaired(speed, callback) {\n        this.unpairedPanelHidden = false;\n        this.pairedPanelHidden = true;\n        this._renderMiddle(speed, callback);\n    },\n    /** show both paired and unpaired (splitting evenly) */\n    splitView: function splitView(speed, callback) {\n        this.unpairedPanelHidden = this.pairedPanelHidden = false;\n        this._renderMiddle(speed, callback);\n        return this;\n    },\n\n    /** unpair all paired and do other super neat stuff which I'm not really sure about yet... */\n    _clickUnpairAll: function _clickUnpairAll(ev) {\n        this.metric(\"unpairAll\");\n        this.unpairAll();\n    },\n\n    /** attempt to autopair */\n    _clickAutopair: function _clickAutopair(ev) {\n        var paired = this.autoPair();\n        this.metric(\"autopair\", paired.length, this.unpaired.length);\n        this.trigger(\"autopair\");\n    },\n\n    /** set the filters based on the data attributes of the button click target */\n    _clickFilterChoice: function _clickFilterChoice(ev) {\n        var $selected = $(ev.currentTarget);\n        this.$(\".forward-unpaired-filter input\").val($selected.data(\"forward\"));\n        this.$(\".reverse-unpaired-filter input\").val($selected.data(\"reverse\"));\n        this._hideChooseFilters();\n        this.trigger(\"filter-change\");\n    },\n\n    /** hide the choose filters popover */\n    _hideChooseFilters: function _hideChooseFilters() {\n        //TODO: update bootstrap and remove the following hack\n        //  see also: https://github.com/twbs/bootstrap/issues/10260\n        this.$(\".choose-filters-link\").popover(\"hide\");\n        this.$(\".popover\").css(\"display\", \"none\");\n    },\n\n    /** clear both filters */\n    _clearFilters: function _clearFilters(ev) {\n        this.$(\".forward-unpaired-filter input\").val(\"\");\n        this.$(\".reverse-unpaired-filter input\").val(\"\");\n        this.trigger(\"filter-change\");\n    },\n\n    // ........................................................................ unpaired\n    /** select an unpaired dataset */\n    _clickUnpairedDataset: function _clickUnpairedDataset(ev) {\n        ev.stopPropagation();\n        return this.toggleSelectUnpaired($(ev.currentTarget));\n    },\n\n    /** Toggle the selection of an unpaired dataset representation.\n     *  @param [jQuery] $dataset        the unpaired dataset dom rep to select\n     *  @param [Boolean] options.force  if defined, force selection based on T/F; otherwise, toggle\n     */\n    toggleSelectUnpaired: function toggleSelectUnpaired($dataset, options) {\n        options = options || {};\n        var dataset = $dataset.data(\"dataset\");\n\n        var select = options.force !== undefined ? options.force : !$dataset.hasClass(\"selected\");\n\n        //this.debug( id, options.force, $dataset, dataset );\n        if (!$dataset.length || dataset === undefined) {\n            return $dataset;\n        }\n\n        if (select) {\n            $dataset.addClass(\"selected\");\n            if (!options.waitToPair) {\n                this.pairAllSelected();\n            }\n        } else {\n            $dataset.removeClass(\"selected\");\n            //delete dataset.selected;\n        }\n        return $dataset;\n    },\n\n    /** pair all the currently selected unpaired datasets */\n    pairAllSelected: function pairAllSelected(options) {\n        options = options || {};\n        var self = this;\n        var fwds = [];\n        var revs = [];\n        var pairs = [];\n        self.$(\".unpaired-columns .forward-column .dataset.selected\").each(function () {\n            fwds.push($(this).data(\"dataset\"));\n        });\n        self.$(\".unpaired-columns .reverse-column .dataset.selected\").each(function () {\n            revs.push($(this).data(\"dataset\"));\n        });\n        fwds.length = revs.length = Math.min(fwds.length, revs.length);\n        //this.debug( fwds );\n        //this.debug( revs );\n        fwds.forEach(function (fwd, i) {\n            try {\n                pairs.push(self._pair(fwd, revs[i], { silent: true }));\n            } catch (err) {\n                //TODO: preserve selected state of those that couldn't be paired\n                //TODO: warn that some could not be paired\n                self.error(err);\n            }\n        });\n        if (pairs.length && !options.silent) {\n            this.trigger(\"pair:new\", pairs);\n        }\n        return pairs;\n    },\n\n    /** clear the selection on all unpaired datasets */\n    clearSelectedUnpaired: function clearSelectedUnpaired() {\n        this.$(\".unpaired-columns .dataset.selected\").removeClass(\"selected\");\n    },\n\n    /** when holding down the shift key on a click, 'paint' the moused over datasets as selected */\n    _mousedownUnpaired: function _mousedownUnpaired(ev) {\n        if (ev.shiftKey) {\n            var self = this;\n            var $startTarget = $(ev.target).addClass(\"selected\");\n\n            var moveListener = function moveListener(ev) {\n                self.$(ev.target).filter(\".dataset\").addClass(\"selected\");\n            };\n\n            $startTarget.parent().on(\"mousemove\", moveListener);\n\n            // on any mouseup, stop listening to the move and try to pair any selected\n            $(document).one(\"mouseup\", function (ev) {\n                $startTarget.parent().off(\"mousemove\", moveListener);\n                self.pairAllSelected();\n            });\n        }\n    },\n\n    /** attempt to pair two datasets directly across from one another */\n    _clickPairRow: function _clickPairRow(ev) {\n        //if( !ev.currentTarget ){ return true; }\n        var rowIndex = $(ev.currentTarget).index();\n\n        var fwd = $(\".unpaired-columns .forward-column .dataset\").eq(rowIndex).data(\"dataset\");\n\n        var rev = $(\".unpaired-columns .reverse-column .dataset\").eq(rowIndex).data(\"dataset\");\n\n        //this.debug( 'row:', rowIndex, fwd, rev );\n        this._pair(fwd, rev);\n    },\n\n    // ........................................................................ divider/partition\n    /** start dragging the visible divider/partition between unpaired and paired panes */\n    _startPartitionDrag: function _startPartitionDrag(ev) {\n        var self = this;\n        var startingY = ev.pageY;\n        //this.debug( 'partition drag START:', ev );\n        $(\"body\").css(\"cursor\", \"ns-resize\");\n        self.$(\".flexible-partition-drag\").css(\"color\", \"black\");\n\n        function endDrag(ev) {\n            self.$(\".flexible-partition-drag\").css(\"color\", \"\");\n            $(\"body\").css(\"cursor\", \"\").unbind(\"mousemove\", trackMouse);\n        }\n        function trackMouse(ev) {\n            var offset = ev.pageY - startingY;\n            if (!self.adjPartition(offset)) {\n                $(\"body\").trigger(\"mouseup\");\n            }\n            self._adjUnpairedOnScrollbar();\n            startingY += offset;\n        }\n        $(\"body\").mousemove(trackMouse);\n        $(\"body\").one(\"mouseup\", endDrag);\n    },\n\n    /** adjust the parition up/down +/-adj pixels */\n    adjPartition: function adjPartition(adj) {\n        var $unpaired = this.$(\".unpaired-columns\");\n        var $paired = this.$(\".paired-columns\");\n        var unpairedHi = parseInt($unpaired.css(\"height\"), 10);\n        var pairedHi = parseInt($paired.css(\"height\"), 10);\n        //this.debug( adj, 'hi\\'s:', unpairedHi, pairedHi, unpairedHi + adj, pairedHi - adj );\n\n        unpairedHi = Math.max(10, unpairedHi + adj);\n        pairedHi = pairedHi - adj;\n\n        var movingUpwards = adj < 0;\n        // when the divider gets close to the top - lock into hiding the unpaired section\n        if (movingUpwards) {\n            if (this.unpairedPanelHidden) {\n                return false;\n            } else if (unpairedHi <= 10) {\n                this.hideUnpaired();\n                return false;\n            }\n        } else {\n            if (this.unpairedPanelHidden) {\n                $unpaired.show();\n                this.unpairedPanelHidden = false;\n            }\n        }\n\n        // when the divider gets close to the bottom - lock into hiding the paired section\n        if (!movingUpwards) {\n            if (this.pairedPanelHidden) {\n                return false;\n            } else if (pairedHi <= 15) {\n                this.hidePaired();\n                return false;\n            }\n        } else {\n            if (this.pairedPanelHidden) {\n                $paired.show();\n                this.pairedPanelHidden = false;\n            }\n        }\n\n        $unpaired.css({\n            height: unpairedHi + \"px\",\n            flex: \"0 0 auto\"\n        });\n        return true;\n    },\n\n    // ........................................................................ paired\n    /** select a pair when clicked */\n    selectPair: function selectPair(ev) {\n        ev.stopPropagation();\n        $(ev.currentTarget).toggleClass(\"selected\");\n    },\n\n    /** deselect all pairs */\n    clearSelectedPaired: function clearSelectedPaired(ev) {\n        this.$(\".paired-columns .dataset.selected\").removeClass(\"selected\");\n    },\n\n    /** rename a pair when the pair name is clicked */\n    _clickPairName: function _clickPairName(ev) {\n        ev.stopPropagation();\n        var $name = $(ev.currentTarget);\n        var $pair = $name.parent().parent();\n        var index = $pair.index(\".dataset.paired\");\n        var pair = this.paired[index];\n        var response = prompt(\"Enter a new name for the pair:\", pair.name);\n        if (response) {\n            pair.name = response;\n            // set a flag (which won't be passed in json creation) for manual naming so we don't overwrite these\n            //  when adding/removing extensions\n            //hackish\n            pair.customizedName = true;\n            $name.text(pair.name);\n        }\n    },\n\n    /** unpair this pair */\n    _clickUnpair: function _clickUnpair(ev) {\n        //if( !ev.currentTarget ){ return true; }\n        var pairIndex = Math.floor($(ev.currentTarget).index(\".unpair-btn\"));\n        //this.debug( 'pair:', pairIndex );\n        this._unpair(this.paired[pairIndex]);\n    },\n\n    // ........................................................................ paired - drag and drop re-ordering\n    //_dragenterPairedColumns : function( ev ){\n    //    this.debug( '_dragenterPairedColumns:', ev );\n    //},\n    //_dragleavePairedColumns : function( ev ){\n    //    //this.debug( '_dragleavePairedColumns:', ev );\n    //},\n    /** track the mouse drag over the paired list adding a placeholder to show where the drop would occur */\n    _dragoverPairedColumns: function _dragoverPairedColumns(ev) {\n        //this.debug( '_dragoverPairedColumns:', ev );\n        ev.preventDefault();\n\n        var $list = this.$(\".paired-columns .column-datasets\");\n        this._checkForAutoscroll($list, ev.originalEvent.clientY);\n        //this.debug( ev.originalEvent.clientX, ev.originalEvent.clientY );\n        var $nearest = this._getNearestPairedDatasetLi(ev.originalEvent.clientY);\n\n        $(\".element-drop-placeholder\").remove();\n        var $placeholder = $('<div class=\"element-drop-placeholder\"></div>');\n        if (!$nearest.length) {\n            $list.append($placeholder);\n        } else {\n            $nearest.before($placeholder);\n        }\n    },\n\n    /** If the mouse is near enough to the list's top or bottom, scroll the list */\n    _checkForAutoscroll: function _checkForAutoscroll($element, y) {\n        var AUTOSCROLL_SPEED = 2;\n        var offset = $element.offset();\n        var scrollTop = $element.scrollTop();\n        var upperDist = y - offset.top;\n        var lowerDist = offset.top + $element.outerHeight() - y;\n        //this.debug( '_checkForAutoscroll:', scrollTop, upperDist, lowerDist );\n        if (upperDist >= 0 && upperDist < this.autoscrollDist) {\n            $element.scrollTop(scrollTop - AUTOSCROLL_SPEED);\n        } else if (lowerDist >= 0 && lowerDist < this.autoscrollDist) {\n            $element.scrollTop(scrollTop + AUTOSCROLL_SPEED);\n        }\n    },\n\n    /** get the nearest *previous* paired dataset PairView based on the mouse's Y coordinate.\n     *      If the y is at the end of the list, return an empty jQuery object.\n     */\n    _getNearestPairedDatasetLi: function _getNearestPairedDatasetLi(y) {\n        var WIGGLE = 4;\n        var lis = this.$(\".paired-columns .column-datasets li\").toArray();\n        for (var i = 0; i < lis.length; i++) {\n            var $li = $(lis[i]);\n            var top = $li.offset().top;\n            var halfHeight = Math.floor($li.outerHeight() / 2) + WIGGLE;\n            if (top + halfHeight > y && top - halfHeight < y) {\n                //this.debug( y, top + halfHeight, top - halfHeight )\n                return $li;\n            }\n        }\n        return $();\n    },\n    /** drop (dragged/selected PairViews) onto the list, re-ordering both the DOM and the internal array of pairs */\n    _dropPairedColumns: function _dropPairedColumns(ev) {\n        // both required for firefox\n        ev.preventDefault();\n        ev.dataTransfer.dropEffect = \"move\";\n\n        var $nearest = this._getNearestPairedDatasetLi(ev.originalEvent.clientY);\n        if ($nearest.length) {\n            this.$dragging.insertBefore($nearest);\n        } else {\n            // no nearest before - insert after last element (unpair button)\n            this.$dragging.insertAfter(this.$(\".paired-columns .unpair-btn\").last());\n        }\n        // resync the creator's list of paired based on the new DOM order\n        this._syncPairsToDom();\n        return false;\n    },\n    /** resync the creator's list of paired based on the DOM order of pairs */\n    _syncPairsToDom: function _syncPairsToDom() {\n        var newPaired = [];\n        //TODO: doesn't seem wise to use the dom to store these - can't we sync another way?\n        this.$(\".paired-columns .dataset.paired\").each(function () {\n            newPaired.push($(this).data(\"pair\"));\n        });\n        //this.debug( newPaired );\n        this.paired = newPaired;\n        this._renderPaired();\n    },\n    /** drag communication with pair sub-views: dragstart */\n    _pairDragstart: function _pairDragstart(ev, pair) {\n        //this.debug( '_pairDragstart', ev, pair )\n        // auto select the pair causing the event and move all selected\n        pair.$el.addClass(\"selected\");\n        var $selected = this.$(\".paired-columns .dataset.selected\");\n        this.$dragging = $selected;\n    },\n    /** drag communication with pair sub-views: dragend - remove the placeholder */\n    _pairDragend: function _pairDragend(ev, pair) {\n        //this.debug( '_pairDragend', ev, pair )\n        $(\".element-drop-placeholder\").remove();\n        this.$dragging = null;\n    },\n\n    // ........................................................................ footer\n    toggleExtensions: function toggleExtensions(force) {\n        var self = this;\n        self.removeExtensions = force !== undefined ? force : !self.removeExtensions;\n\n        _.each(self.paired, function (pair) {\n            // don't overwrite custom names\n            if (pair.customizedName) {\n                return;\n            }\n            pair.name = self._guessNameForPair(pair.forward, pair.reverse);\n        });\n\n        self._renderPaired();\n        self._renderFooter();\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** debug a dataset list */\n    _printList: function _printList(list) {\n        var self = this;\n        _.each(list, function (e) {\n            if (list === self.paired) {\n                self._printPair(e);\n            } else {\n                self.debug(e);\n            }\n        });\n    },\n\n    /** print a pair Object */\n    _printPair: function _printPair(pair) {\n        this.debug(pair.forward.name, pair.reverse.name, \": ->\", pair.name);\n    },\n\n    /** string rep */\n    toString: function toString() {\n        return \"PairedCollectionCreator\";\n    },\n\n    templates: _.extend({}, _baseCreator2.default.CollectionCreatorMixin._creatorTemplates, {\n        /** the header (not including help text) */\n        header: _.template(['<div class=\"main-help well clear\">', '<a class=\"more-help\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"More help\"), \"</a>\", '<div class=\"help-content\">', '<a class=\"less-help\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"Less\"), \"</a>\", \"</div>\", \"</div>\", '<div class=\"alert alert-dismissable\">', '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>', '<span class=\"alert-message\"></span>', \"</div>\", '<div class=\"column-headers vertically-spaced flex-column-container\">', '<div class=\"forward-column flex-column column\">', '<div class=\"column-header\">', '<div class=\"column-title\">', '<span class=\"title\">', (0, _localization2.default)(\"Unpaired forward\"), \"</span>\", '<span class=\"title-info unpaired-info\"></span>', \"</div>\", '<div class=\"unpaired-filter forward-unpaired-filter pull-left\">', '<input class=\"search-query\" placeholder=\"', (0, _localization2.default)(\"Filter this list\"), '\" />', \"</div>\", \"</div>\", \"</div>\", '<div class=\"paired-column flex-column no-flex column\">', '<div class=\"column-header\">', '<a class=\"choose-filters-link\" href=\"javascript:void(0)\">', (0, _localization2.default)(\"Choose filters\"), \"</a>\", '<a class=\"clear-filters-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"Clear filters\"), \"</a><br />\", '<a class=\"autopair-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"Auto-pair\"), \"</a>\", \"</div>\", \"</div>\", '<div class=\"reverse-column flex-column column\">', '<div class=\"column-header\">', '<div class=\"column-title\">', '<span class=\"title\">', (0, _localization2.default)(\"Unpaired reverse\"), \"</span>\", '<span class=\"title-info unpaired-info\"></span>', \"</div>\", '<div class=\"unpaired-filter reverse-unpaired-filter pull-left\">', '<input class=\"search-query\" placeholder=\"', (0, _localization2.default)(\"Filter this list\"), '\" />', \"</div>\", \"</div>\", \"</div>\", \"</div>\"].join(\"\")),\n\n        /** the middle: unpaired, divider, and paired */\n        middle: _.template([\n        // contains two flex rows (rows that fill available space) and a divider btwn\n        '<div class=\"unpaired-columns flex-column-container scroll-container flex-row\">', '<div class=\"forward-column flex-column column\">', '<ol class=\"column-datasets\"></ol>', \"</div>\", '<div class=\"paired-column flex-column no-flex column\">', '<ol class=\"column-datasets\"></ol>', \"</div>\", '<div class=\"reverse-column flex-column column\">', '<ol class=\"column-datasets\"></ol>', \"</div>\", \"</div>\", '<div class=\"flexible-partition\">', '<div class=\"flexible-partition-drag\" title=\"', (0, _localization2.default)(\"Drag to change\"), '\"></div>', '<div class=\"column-header\">', '<div class=\"column-title paired-column-title\">', '<span class=\"title\"></span>', \"</div>\", '<a class=\"unpair-all-link\" href=\"javascript:void(0);\">', (0, _localization2.default)(\"Unpair all\"), \"</a>\", \"</div>\", \"</div>\", '<div class=\"paired-columns flex-column-container scroll-container flex-row\">', '<ol class=\"column-datasets\"></ol>', \"</div>\"].join(\"\")),\n\n        /** creation and cancel controls */\n        footer: _.template(['<div class=\"attributes clear\">', '<div class=\"clear\">', '<label class=\"setting-prompt pull-right\">', (0, _localization2.default)(\"Hide original elements\"), \"?\", '<input class=\"hide-originals pull-right\" type=\"checkbox\" />', \"</label>\", '<label class=\"setting-prompt pull-right\">', (0, _localization2.default)(\"Remove file extensions from pair names\"), \"?\", '<input class=\"remove-extensions pull-right\" type=\"checkbox\" />', \"</label>\", \"</div>\", '<div class=\"clear\">', '<input class=\"collection-name form-control pull-right\" ', 'placeholder=\"', (0, _localization2.default)(\"Enter a name for your new list\"), '\" />', '<div class=\"collection-name-prompt pull-right\">', (0, _localization2.default)(\"Name\"), \":</div>\", \"</div>\", \"</div>\", '<div class=\"actions clear vertically-spaced\">', '<div class=\"other-options pull-left\">', '<button class=\"cancel-create btn\" tabindex=\"-1\">', (0, _localization2.default)(\"Cancel\"), \"</button>\", '<div class=\"create-other btn-group dropup\">', '<button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">', (0, _localization2.default)(\"Create a different kind of collection\"), ' <span class=\"caret\"></span>', \"</button>\", '<ul class=\"dropdown-menu\" role=\"menu\">', '<li><a href=\"#\">', (0, _localization2.default)(\"Create a <i>single</i> pair\"), \"</a></li>\", '<li><a href=\"#\">', (0, _localization2.default)(\"Create a list of <i>unpaired</i> datasets\"), \"</a></li>\", \"</ul>\", \"</div>\", \"</div>\", '<div class=\"main-options pull-right\">', '<button class=\"create-collection btn btn-primary\">', (0, _localization2.default)(\"Create list\"), \"</button>\", \"</div>\", \"</div>\"].join(\"\")),\n\n        /** help content */\n        helpContent: _.template([\"<p>\", (0, _localization2.default)([\"Collections of paired datasets are ordered lists of dataset pairs (often forward and reverse reads). \", \"These collections can be passed to tools and workflows in order to have analyses done on each member of \", \"the entire group. This interface allows you to create a collection, choose which datasets are paired, \", \"and re-order the final collection.\"].join(\"\")), \"</p>\", \"<p>\", (0, _localization2.default)(['Unpaired datasets are shown in the <i data-target=\".unpaired-columns\">unpaired section</i> ', \"(hover over the underlined words to highlight below). \", 'Paired datasets are shown in the <i data-target=\".paired-columns\">paired section</i>.', \"<ul>To pair datasets, you can:\", \"<li>Click a dataset in the \", '<i data-target=\".unpaired-columns .forward-column .column-datasets,', '.unpaired-columns .forward-column\">forward column</i> ', \"to select it then click a dataset in the \", '<i data-target=\".unpaired-columns .reverse-column .column-datasets,', '.unpaired-columns .reverse-column\">reverse column</i>.', \"</li>\", '<li>Click one of the \"Pair these datasets\" buttons in the ', '<i data-target=\".unpaired-columns .paired-column .column-datasets,', '.unpaired-columns .paired-column\">middle column</i> ', \"to pair the datasets in a particular row.\", \"</li>\", '<li>Click <i data-target=\".autopair-link\">\"Auto-pair\"</i> ', \"to have your datasets automatically paired based on name.\", \"</li>\", \"</ul>\"].join(\"\")), \"</p>\", \"<p>\", (0, _localization2.default)([\"<ul>You can filter what is shown in the unpaired sections by:\", \"<li>Entering partial dataset names in either the \", '<i data-target=\".forward-unpaired-filter input\">forward filter</i> or ', '<i data-target=\".reverse-unpaired-filter input\">reverse filter</i>.', \"</li>\", \"<li>Choosing from a list of preset filters by clicking the \", '<i data-target=\".choose-filters-link\">\"Choose filters\" link</i>.', \"</li>\", \"<li>Entering regular expressions to match dataset names. See: \", '<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"', ' target=\"_blank\">MDN\\'s JavaScript Regular Expression Tutorial</a>. ', \"Note: forward slashes (\\\\) are not needed.\", \"</li>\", \"<li>Clearing the filters by clicking the \", '<i data-target=\".clear-filters-link\">\"Clear filters\" link</i>.', \"</li>\", \"</ul>\"].join(\"\")), \"</p>\", \"<p>\", (0, _localization2.default)([\"To unpair individual dataset pairs, click the \", '<i data-target=\".unpair-btn\">unpair buttons ( <span class=\"fa fa-unlink\"></span> )</i>. ', 'Click the <i data-target=\".unpair-all-link\">\"Unpair all\" link</i> to unpair all pairs.'].join(\"\")), \"</p>\", \"<p>\", (0, _localization2.default)(['You can include or remove the file extensions (e.g. \".fastq\") from your pair names by toggling the ', '<i data-target=\".remove-extensions-prompt\">\"Remove file extensions from pair names?\"</i> control.'].join(\"\")), \"</p>\", \"<p>\", (0, _localization2.default)(['Once your collection is complete, enter a <i data-target=\".collection-name\">name</i> and ', 'click <i data-target=\".create-collection\">\"Create list\"</i>. ', \"(Note: you do not have to pair all unpaired datasets to finish.)\"].join(\"\")), \"</p>\"].join(\"\"))\n    })\n});\n\n//=============================================================================\n/** a modal version of the paired collection creator */\nvar pairedCollectionCreatorModal = function _pairedCollectionCreatorModal(datasets, options) {\n    var deferred = jQuery.Deferred();\n    var creator;\n\n    options = _.defaults(options || {}, {\n        datasets: datasets,\n        oncancel: function oncancel() {\n            Galaxy.modal.hide();\n            deferred.reject(\"cancelled\");\n        },\n        oncreate: function oncreate(creator, response) {\n            Galaxy.modal.hide();\n            deferred.resolve(response);\n        }\n    });\n\n    if (!window.Galaxy || !Galaxy.modal) {\n        throw new Error(\"Galaxy or Galaxy.modal not found\");\n    }\n\n    creator = new PairedCollectionCreator(options);\n    Galaxy.modal.show({\n        title: (0, _localization2.default)(\"Create a collection of paired datasets\"),\n        body: creator.$el,\n        width: \"80%\",\n        height: \"800px\",\n        closing_events: true\n    });\n    creator.render();\n    window.creator = creator;\n\n    //TODO: remove modal header\n    return deferred;\n};\n\n//=============================================================================\nfunction createListOfPairsCollection(collection, defaultHideSourceItems) {\n    var elements = collection.toJSON();\n    //TODO: validate elements\n    return pairedCollectionCreatorModal(elements, {\n        historyId: collection.historyId,\n        defaultHideSourceItems: defaultHideSourceItems\n    });\n}\n\n//=============================================================================\nexports.default = {\n    PairedCollectionCreator: PairedCollectionCreator,\n    pairedCollectionCreatorModal: pairedCollectionCreatorModal,\n    createListOfPairsCollection: createListOfPairsCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///262\n");

/***/ }),
/* 263 */
/*!*********************************************!*\
  !*** ./galaxy/scripts/utils/levenshtein.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//=============================================================================\n/**\n(Imported for edit distance algorith. From: https://gist.github.com/andrei-m/982927)\nCopyright (c) 2011 Andrei Mackenzie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n// Compute the edit distance between the two given strings\n//exports.getEditDistance = function(a, b){\nfunction levenshteinDistance(a, b) {\n    if (a.length === 0) {\n        return b.length;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n\n    var matrix = [];\n\n    // increment along the first column of each row\n    var i;\n    for (i = 0; i <= b.length; i++) {\n        matrix[i] = [i];\n    }\n\n    // increment each column in the first row\n    var j;\n    for (j = 0; j <= a.length; j++) {\n        matrix[0][j] = j;\n    }\n\n    // Fill in the rest of the matrix\n    for (i = 1; i <= b.length; i++) {\n        for (j = 1; j <= a.length; j++) {\n            if (b.charAt(i - 1) === a.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            } else {\n                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                Math.min(matrix[i][j - 1] + 1, // insertion\n                matrix[i - 1][j] + 1)); // deletion\n            }\n        }\n    }\n\n    //console.debug( '\\t\\t levenshteinDistance', a, b, matrix[b.length][a.length] );\n    return matrix[b.length][a.length];\n}\n\n//=============================================================================\nexports.default = levenshteinDistance;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL3V0aWxzL2xldmVuc2h0ZWluLmpzP2Q5MjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqXG4oSW1wb3J0ZWQgZm9yIGVkaXQgZGlzdGFuY2UgYWxnb3JpdGguIEZyb206IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2FuZHJlaS1tLzk4MjkyNylcbkNvcHlyaWdodCAoYykgMjAxMSBBbmRyZWkgTWFja2VuemllXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZFxuZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG5yaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5wZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlXG5Tb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRVxuV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG5DT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG5PVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xuLy8gQ29tcHV0ZSB0aGUgZWRpdCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gc3RyaW5nc1xuLy9leHBvcnRzLmdldEVkaXREaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpe1xuZnVuY3Rpb24gbGV2ZW5zaHRlaW5EaXN0YW5jZShhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBiLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgbWF0cml4ID0gW107XG5cbiAgICAvLyBpbmNyZW1lbnQgYWxvbmcgdGhlIGZpcnN0IGNvbHVtbiBvZiBlYWNoIHJvd1xuICAgIHZhciBpO1xuICAgIGZvciAoaSA9IDA7IGkgPD0gYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBtYXRyaXhbaV0gPSBbaV07XG4gICAgfVxuXG4gICAgLy8gaW5jcmVtZW50IGVhY2ggY29sdW1uIGluIHRoZSBmaXJzdCByb3dcbiAgICB2YXIgajtcbiAgICBmb3IgKGogPSAwOyBqIDw9IGEubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbWF0cml4WzBdW2pdID0gajtcbiAgICB9XG5cbiAgICAvLyBGaWxsIGluIHRoZSByZXN0IG9mIHRoZSBtYXRyaXhcbiAgICBmb3IgKGkgPSAxOyBpIDw9IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChqID0gMTsgaiA8PSBhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoYi5jaGFyQXQoaSAtIDEpID09PSBhLmNoYXJBdChqIC0gMSkpIHtcbiAgICAgICAgICAgICAgICBtYXRyaXhbaV1bal0gPSBtYXRyaXhbaSAtIDFdW2ogLSAxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF0cml4W2ldW2pdID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeFtpIC0gMV1baiAtIDFdICsgMSwgLy8gc3Vic3RpdHV0aW9uXG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4W2ldW2ogLSAxXSArIDEsIC8vIGluc2VydGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4W2kgLSAxXVtqXSArIDFcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7IC8vIGRlbGV0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL2NvbnNvbGUuZGVidWcoICdcXHRcXHQgbGV2ZW5zaHRlaW5EaXN0YW5jZScsIGEsIGIsIG1hdHJpeFtiLmxlbmd0aF1bYS5sZW5ndGhdICk7XG4gICAgcmV0dXJuIG1hdHJpeFtiLmxlbmd0aF1bYS5sZW5ndGhdO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCBsZXZlbnNodGVpbkRpc3RhbmNlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL3V0aWxzL2xldmVuc2h0ZWluLmpzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///263\n");

/***/ }),
/* 264 */
/*!*****************************************************!*\
  !*** ./galaxy/scripts/mvc/user/user-preferences.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _queryStringParsing = __webpack_require__(/*! utils/query-string-parsing */ 14);\n\nvar _queryStringParsing2 = _interopRequireDefault(_queryStringParsing);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Contains descriptive dictionaries describing user forms */\nvar Model = Backbone.Model.extend({\n    initialize: function initialize(options) {\n        options = options || {};\n        options.user_id = options.user_id || Galaxy.user.id;\n        this.set({\n            user_id: options.user_id,\n            information: {\n                title: (0, _localization2.default)(\"Manage information\"),\n                description: \"Edit your email, addresses and custom parameters or change your username.\",\n                url: \"api/users/\" + options.user_id + \"/information/inputs\",\n                icon: \"fa-user\",\n                redirect: \"user\"\n            },\n            password: {\n                title: (0, _localization2.default)(\"Change password\"),\n                description: (0, _localization2.default)(\"Allows you to change your login credentials.\"),\n                icon: \"fa-unlock-alt\",\n                url: \"api/users/\" + options.user_id + \"/password/inputs\",\n                submit_title: \"Save password\",\n                redirect: \"user\"\n            },\n            communication: {\n                title: (0, _localization2.default)(\"Change communication settings\"),\n                description: (0, _localization2.default)(\"Enable or disable the communication feature to chat with other users.\"),\n                url: \"api/users/\" + options.user_id + \"/communication/inputs\",\n                icon: \"fa-comments-o\",\n                redirect: \"user\"\n            },\n            permissions: {\n                title: (0, _localization2.default)(\"Set dataset permissions for new histories\"),\n                description: \"Grant others default access to newly created histories. Changes made here will only affect histories created after these settings have been stored.\",\n                url: \"api/users/\" + options.user_id + \"/permissions/inputs\",\n                icon: \"fa-users\",\n                submit_title: \"Save permissions\",\n                redirect: \"user\"\n            },\n            api_key: {\n                title: (0, _localization2.default)(\"Manage API key\"),\n                description: (0, _localization2.default)(\"Access your current API key or create a new one.\"),\n                url: \"api/users/\" + options.user_id + \"/api_key/inputs\",\n                icon: \"fa-key\",\n                submit_title: \"Create a new key\",\n                submit_icon: \"fa-check\"\n            },\n            toolbox_filters: {\n                title: (0, _localization2.default)(\"Manage Toolbox filters\"),\n                description: (0, _localization2.default)(\"Customize your Toolbox by displaying or omitting sets of Tools.\"),\n                url: \"api/users/\" + options.user_id + \"/toolbox_filters/inputs\",\n                icon: \"fa-filter\",\n                submit_title: \"Save filters\",\n                redirect: \"user\"\n            },\n            openids: {\n                title: (0, _localization2.default)(\"Manage OpenIDs\"),\n                description: (0, _localization2.default)(\"Associate OpenIDs with your account.\"),\n                icon: \"fa-openid\",\n                onclick: function onclick() {\n                    window.location.href = Galaxy.root + \"user/openid_manage?cntrller=user&use_panels=True\";\n                }\n            },\n            custom_builds: {\n                title: (0, _localization2.default)(\"Manage custom builds\"),\n                description: (0, _localization2.default)(\"Add or remove custom builds using history datasets.\"),\n                icon: \"fa-cubes\",\n                onclick: function onclick() {\n                    window.location.href = Galaxy.root + \"custom_builds\";\n                }\n            },\n            logout: {\n                title: (0, _localization2.default)(\"Sign out\"),\n                description: (0, _localization2.default)(\"Click here to sign out of all sessions.\"),\n                icon: \"fa-sign-out\",\n                onclick: function onclick() {\n                    Galaxy.modal.show({\n                        title: (0, _localization2.default)(\"Sign out\"),\n                        body: \"Do you want to continue and sign out of all active sessions?\",\n                        buttons: {\n                            Cancel: function Cancel() {\n                                Galaxy.modal.hide();\n                            },\n                            \"Sign out\": function SignOut() {\n                                window.location.href = Galaxy.root + \"user/logout?session_csrf_token=\" + Galaxy.session_csrf_token;\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    }\n});\n\n/** View of the main user preference panel with links to individual user forms */\n\n/** User Preferences view */\nvar View = Backbone.View.extend({\n    title: (0, _localization2.default)(\"User Preferences\"),\n    initialize: function initialize() {\n        this.model = new Model();\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    render: function render() {\n        var self = this;\n        var config = Galaxy.config;\n        $.getJSON(Galaxy.root + \"api/users/\" + Galaxy.user.id, function (data) {\n            self.$preferences = $(\"<div/>\").addClass(\"ui-panel\").append($(\"<h2/>\").append(\"User preferences\")).append($(\"<p/>\").append(\"You are logged in as <strong>\" + _.escape(data.email) + \"</strong>.\")).append(self.$table = $(\"<table/>\").addClass(\"ui-panel-table\"));\n            var message = _queryStringParsing2.default.get(\"message\");\n            var status = _queryStringParsing2.default.get(\"status\");\n            if (message && status) {\n                self.$preferences.prepend(new _uiMisc2.default.Message({ message: message, status: status }).$el);\n            }\n            if (!config.use_remote_user) {\n                self._addLink(\"information\");\n                self._addLink(\"password\");\n            }\n            if (config.enable_communication_server) {\n                self._addLink(\"communication\");\n            }\n            self._addLink(\"custom_builds\");\n            self._addLink(\"permissions\");\n            self._addLink(\"api_key\");\n            if (config.has_user_tool_filters) {\n                self._addLink(\"toolbox_filters\");\n            }\n            if (config.enable_openid && !config.use_remote_user) {\n                self._addLink(\"openids\");\n            }\n            if (Galaxy.session_csrf_token) {\n                self._addLink(\"logout\");\n            }\n            self.$preferences.append(self._templateFooter(data));\n            self.$el.empty().append(self.$preferences);\n        });\n    },\n\n    _addLink: function _addLink(action) {\n        var options = this.model.get(action);\n        var $row = $(this._templateLink(options));\n        var $a = $row.find(\"a\");\n        if (options.onclick) {\n            $a.on(\"click\", function () {\n                options.onclick();\n            });\n        } else {\n            $a.attr(\"href\", Galaxy.root + \"user/\" + action);\n        }\n        this.$table.append($row);\n    },\n\n    _templateLink: function _templateLink(options) {\n        return \"<tr><td><div class=\\\"ui-panel-icon fa \" + options.icon + \"\\\"></td><td><a class=\\\"ui-panel-anchor\\\" href=\\\"javascript:void(0)\\\">\" + options.title + \"</a><div class=\\\"ui-form-info\\\">\" + options.description + \"</div></td></tr>\";\n    },\n\n    _templateFooter: function _templateFooter(options) {\n        return \"<p class=\\\"ui-panel-footer\\\">You are using <strong>\" + options.nice_total_disk_usage + \"</strong> of disk space in this Galaxy instance. \" + (Galaxy.config.enable_quotas ? \"Your disk quota is: <strong>\" + options.quota + \"</strong>. \" : \"\") + \"Is your usage more than expected? See the <a href=\\\"https://galaxyproject.org/learn/managing-datasets/\\\" target=\\\"_blank\\\">documentation</a> for tips on how to find all of the data in your account.</p>\";\n    }\n});\n\nexports.default = {\n    View: View,\n    Model: Model\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///264\n");

/***/ }),
/* 265 */
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/user/user-custom-builds.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nvar _uiTable = __webpack_require__(/*! mvc/ui/ui-table */ 88);\n\nvar _uiTable2 = _interopRequireDefault(_uiTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** This class renders the chart configuration form. */\nvar Collection = Backbone.Collection.extend({\n    comparator: function comparator(a, b) {\n        a = a.get(\"name\");\n        b = b.get(\"name\");\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n});\n\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        var history_id = Galaxy.currHistoryPanel && Galaxy.currHistoryPanel.model.id;\n        this.model = new Backbone.Model();\n        this.model.url = Galaxy.root + \"api/histories/\" + history_id + \"/custom_builds_metadata\";\n        this.collection = new Collection();\n        this.collection.url = Galaxy.root + \"api/users/\" + Galaxy.user.id + \"/custom_builds\";\n        this.message = new _uiMisc2.default.Message({});\n        this.installed_builds = new _uiMisc2.default.Select.View({\n            optional: true,\n            onchange: function onchange() {\n                self.installed_builds.value(null);\n            },\n            empty_text: \"List of available builds:\",\n            error_text: \"No system installed builds available.\"\n        });\n        this.table = new _uiTable2.default.View({ cls: \"grid\", selectable: false });\n        this.table.addHeader(\"Name\");\n        this.table.addHeader(\"Key\");\n        this.table.addHeader(\"Number of chroms/contigs\");\n        this.table.addHeader(\"\");\n        this.table.appendHeader();\n        this.setElement($(\"<div/>\").append($(\"<h4/>\").text(\"Current Custom Builds\")).append(this.table.$el).append(this.$installed = $(\"<div/>\").append($(\"<h4/>\").text(\"System Installed Builds\").addClass(\"ui-margin-top\")).append(this.installed_builds.$el)).append($(\"<h4/>\").text(\"Add a Custom Build\").addClass(\"ui-margin-top\")).append($(\"<span/>\").addClass(\"ui-column\").append($(\"<div/>\").addClass(\"ui-column-left\").append(this.message.$el).append(this.$form = $(\"<div/>\").addClass(\"ui-margin-top\"))).append(this.$help = $(\"<div/>\").addClass(\"ui-column-right\"))));\n        this.listenTo(this.collection, \"add remove reset\", function () {\n            self._renderTable();\n        });\n        this.listenTo(this.model, \"change\", function () {\n            self._renderForm();\n        });\n        this.collection.fetch();\n        this.model.fetch();\n    },\n\n    render: function render() {\n        this._renderTable();\n        this._renderForm();\n    },\n\n    _renderTable: function _renderTable() {\n        var self = this;\n        this.table.delAll();\n        this.collection.sort();\n        this.collection.each(function (model) {\n            self.table.add(model.get(\"name\"));\n            self.table.add(model.id);\n            self.table.add(model.get(\"count\") !== undefined ? model.get(\"count\") : \"Processing...\");\n            self.table.add(new _uiMisc2.default.ButtonIcon({\n                icon: \"fa-trash-o\",\n                cls: \"ui-button-icon-plain\",\n                tooltip: (0, _localization2.default)(\"Delete custom build.\"),\n                onclick: function onclick() {\n                    model.destroy();\n                }\n            }).$el);\n            self.table.append(model.id);\n        });\n    },\n\n    _renderForm: function _renderForm() {\n        var self = this;\n        var initial_type = \"fasta\";\n        var form = new _formView2.default({\n            inputs: [{\n                type: \"text\",\n                name: \"name\",\n                label: \"Name\",\n                help: \"Specify a build name e.g. Hamster.\"\n            }, {\n                type: \"text\",\n                name: \"id\",\n                label: \"Key\",\n                help: \"Specify a build key e.g. hamster_v1.\"\n            }, {\n                name: \"len\",\n                type: \"conditional\",\n                test_param: {\n                    name: \"type\",\n                    label: \"Definition\",\n                    help: (0, _localization2.default)(\"Provide the data source.\"),\n                    type: \"select\",\n                    value: initial_type,\n                    data: [{\n                        value: \"fasta\",\n                        label: \"FASTA-file from history\"\n                    }, {\n                        value: \"file\",\n                        label: \"Len-file from disk\"\n                    }, {\n                        value: \"text\",\n                        label: \"Len-file by copy/paste\"\n                    }]\n                },\n                cases: [{\n                    value: \"fasta\",\n                    inputs: [{\n                        type: \"select\",\n                        name: \"value\",\n                        label: \"FASTA-file\",\n                        data: this.model.get(\"fasta_hdas\")\n                    }]\n                }, {\n                    value: \"file\",\n                    inputs: [{\n                        type: \"upload\",\n                        name: \"value\",\n                        label: \"Len-file\",\n                        data: this.model.get(\"len_hdas\")\n                    }]\n                }, {\n                    value: \"text\",\n                    inputs: [{\n                        type: \"text\",\n                        area: true,\n                        name: \"value\",\n                        label: \"Edit/Paste\"\n                    }]\n                }]\n            }],\n            buttons: {\n                save: new _uiMisc2.default.Button({\n                    icon: \"fa-save\",\n                    tooltip: (0, _localization2.default)(\"Create new Build\"),\n                    title: (0, _localization2.default)(\"Save\"),\n                    cls: \"btn btn-primary ui-clear-float\",\n                    onclick: function onclick() {\n                        var data = form.data.create();\n                        if (!data.id || !data.name) {\n                            self.message.update({\n                                message: \"All inputs are required.\",\n                                status: \"danger\"\n                            });\n                        } else {\n                            self.collection.create(data, {\n                                wait: true,\n                                success: function success(response) {\n                                    if (response.get(\"message\")) {\n                                        self.message.update({\n                                            message: response.get(\"message\"),\n                                            status: \"warning\"\n                                        });\n                                    } else {\n                                        self.message.update({\n                                            message: \"Successfully added a new custom build.\",\n                                            status: \"success\"\n                                        });\n                                    }\n                                },\n                                error: function error(response, err) {\n                                    var message = err && err.responseJSON && err.responseJSON.err_msg;\n                                    self.message.update({\n                                        message: message || \"Failed to create custom build.\",\n                                        status: \"danger\"\n                                    });\n                                }\n                            });\n                        }\n                    }\n                })\n            },\n            onchange: function onchange() {\n                var input_id = form.data.match(\"len|type\");\n                if (input_id) {\n                    var input_field = form.field_list[input_id];\n                    self._renderHelp(input_field.value());\n                }\n            }\n        });\n        this.$form.empty().append(form.$el);\n        var installed_builds = this.model.get(\"installed_builds\");\n        if (installed_builds && installed_builds.length) {\n            this.$installed.show();\n            this.installed_builds.update(this.model.get(\"installed_builds\"));\n        } else {\n            this.$installed.hide();\n        }\n        this._renderHelp(initial_type);\n    },\n\n    _renderHelp: function _renderHelp(len_type) {\n        this.$help.empty().addClass(\"alert alert-info\").html(len_type == \"fasta\" ? this._templateFasta() : this._templateLen());\n    },\n\n    _templateLen: function _templateLen() {\n        return \"<h4>Length Format</h4>\" + \"<p>\" + \"The length format is two-column, separated by whitespace, of the form:\" + \"<pre>chrom/contig   length of chrom/contig</pre>\" + \"</p>\" + \"<p>\" + \"For example, the first few entries of <em>mm9.len</em> are as follows:\" + \"<pre>\" + \"chr1    197195432\\n\" + \"chr2    181748087\\n\" + \"chr3    159599783\\n\" + \"chr4    155630120\\n\" + \"chr5    152537259\" + \"</pre>\" + \"</p>\" + \"<p>Trackster uses this information to populate the select box for chrom/contig, and\" + \"to set the maximum basepair of the track browser. You may either upload a .len file\" + \"of this format (Len File option), or directly enter the information into the box \" + \"(Len Entry option).</p>\";\n    },\n\n    _templateFasta: function _templateFasta() {\n        return \"<h4>FASTA format</h4>\" + \"<p>\" + \"This is a multi-fasta file from your current history that provides the genome\" + \"sequences for each chromosome/contig in your build.\" + \"</p>\" + \"<p>\" + \"Here is a snippet from an example multi-fasta file:\" + \"<pre>\" + \">chr1\\n\" + \"ATTATATATAAGACCACAGAGAGAATATTTTGCCCGG...\\n\\n\" + \">chr2\\n\" + \"GGCGGCCGCGGCGATATAGAACTACTCATTATATATA...\\n\\n\" + \"...\" + \"</pre>\" + \"</p>\";\n    }\n});\n\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///265\n");

/***/ }),
/* 266 */
/*!************************************************!*\
  !*** ./galaxy/scripts/mvc/grid/grid-shared.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _gridView = __webpack_require__(/*! mvc/grid/grid-view */ 19);\n\nvar _gridView2 = _interopRequireDefault(_gridView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar View = Backbone.View.extend({\n    initialize: function initialize(options) {\n        var self = this;\n        this.setElement($(\"<div/>\"));\n        this.model = new Backbone.Model(options);\n        this.item = this.model.get(\"item\");\n        this.title = this.model.get(\"plural\");\n        $.ajax({\n            url: Galaxy.root + this.item + \"/\" + this.model.get(\"action_id\") + \"?\" + $.param(Galaxy.params),\n            success: function success(response) {\n                response[\"dict_format\"] = true;\n                self.model.set(response);\n                self.render();\n            }\n        });\n    },\n\n    render: function render() {\n        var grid = new _gridView2.default(this.model.attributes);\n        this.$el.empty().append(grid.$el);\n        this.$el.append(this._templateShared());\n    },\n\n    _templateShared: function _templateShared() {\n        var self = this;\n        var $tmpl = $(\"<div><h2>\" + this.model.get(\"plural\") + \" shared with you by others</h2></div>\");\n        var options = this.model.attributes;\n        if (options.shared_by_others && options.shared_by_others.length > 0) {\n            var $table = $('<table class=\"colored\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"100%\">' + '<tr class=\"header\">' + \"<th>Title</th>\" + \"<th>Owner</th>\" + \"</tr>\" + \"</table>\");\n            _.each(options.shared_by_others, function (it, index) {\n                var display_url = Galaxy.root + self.item + \"/display_by_username_and_slug?username=\" + it.username + \"&slug=\" + it.slug;\n                $table.append(\"<tr><td><a href=\\\"\" + display_url + \"\\\">\" + _.escape(it.title) + \"</a></td><td>\" + _.escape(it.username) + \"</td></tr>\");\n            });\n            $tmpl.append($table);\n        } else {\n            $tmpl.append(\"No \" + this.model.get(\"plural\").toLowerCase() + \" have been shared with you.\");\n        }\n        return $tmpl;\n    }\n}); /** This class renders the grid list with shared section. */\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9ncmlkL2dyaWQtc2hhcmVkLmpzP2VlOTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFRoaXMgY2xhc3MgcmVuZGVycyB0aGUgZ3JpZCBsaXN0IHdpdGggc2hhcmVkIHNlY3Rpb24uICovXG5pbXBvcnQgR3JpZFZpZXcgZnJvbSBcIm12Yy9ncmlkL2dyaWQtdmlld1wiO1xudmFyIFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudCgkKFwiPGRpdi8+XCIpKTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyBCYWNrYm9uZS5Nb2RlbChvcHRpb25zKTtcbiAgICAgICAgdGhpcy5pdGVtID0gdGhpcy5tb2RlbC5nZXQoXCJpdGVtXCIpO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5tb2RlbC5nZXQoXCJwbHVyYWxcIik7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IGAke0dhbGF4eS5yb290ICsgdGhpcy5pdGVtfS8ke3RoaXMubW9kZWwuZ2V0KFwiYWN0aW9uX2lkXCIpfT8keyQucGFyYW0oR2FsYXh5LnBhcmFtcyl9YCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VbXCJkaWN0X2Zvcm1hdFwiXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2VsZi5tb2RlbC5zZXQocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ3JpZCA9IG5ldyBHcmlkVmlldyh0aGlzLm1vZGVsLmF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLiRlbC5lbXB0eSgpLmFwcGVuZChncmlkLiRlbCk7XG4gICAgICAgIHRoaXMuJGVsLmFwcGVuZCh0aGlzLl90ZW1wbGF0ZVNoYXJlZCgpKTtcbiAgICB9LFxuXG4gICAgX3RlbXBsYXRlU2hhcmVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgJHRtcGwgPSAkKGA8ZGl2PjxoMj4ke3RoaXMubW9kZWwuZ2V0KFwicGx1cmFsXCIpfSBzaGFyZWQgd2l0aCB5b3UgYnkgb3RoZXJzPC9oMj48L2Rpdj5gKTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm1vZGVsLmF0dHJpYnV0ZXM7XG4gICAgICAgIGlmIChvcHRpb25zLnNoYXJlZF9ieV9vdGhlcnMgJiYgb3B0aW9ucy5zaGFyZWRfYnlfb3RoZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciAkdGFibGUgPSAkKFxuICAgICAgICAgICAgICAgICc8dGFibGUgY2xhc3M9XCJjb2xvcmVkXCIgYm9yZGVyPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiIHdpZHRoPVwiMTAwJVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRyIGNsYXNzPVwiaGVhZGVyXCI+JyArXG4gICAgICAgICAgICAgICAgICAgIFwiPHRoPlRpdGxlPC90aD5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiPHRoPk93bmVyPC90aD5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiPC90cj5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiPC90YWJsZT5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIF8uZWFjaChvcHRpb25zLnNoYXJlZF9ieV9vdGhlcnMsIChpdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheV91cmwgPSBgJHtHYWxheHkucm9vdCArIHNlbGYuaXRlbX0vZGlzcGxheV9ieV91c2VybmFtZV9hbmRfc2x1Zz91c2VybmFtZT0ke1xuICAgICAgICAgICAgICAgICAgICBpdC51c2VybmFtZVxuICAgICAgICAgICAgICAgIH0mc2x1Zz0ke2l0LnNsdWd9YDtcbiAgICAgICAgICAgICAgICAkdGFibGUuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICBgPHRyPjx0ZD48YSBocmVmPVwiJHtkaXNwbGF5X3VybH1cIj4ke18uZXNjYXBlKGl0LnRpdGxlKX08L2E+PC90ZD48dGQ+JHtfLmVzY2FwZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnVzZXJuYW1lXG4gICAgICAgICAgICAgICAgICAgICl9PC90ZD48L3RyPmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkdG1wbC5hcHBlbmQoJHRhYmxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICR0bXBsLmFwcGVuZChgTm8gJHt0aGlzLm1vZGVsLmdldChcInBsdXJhbFwiKS50b0xvd2VyQ2FzZSgpfSBoYXZlIGJlZW4gc2hhcmVkIHdpdGggeW91LmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkdG1wbDtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIFZpZXc6IFZpZXdcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2dyaWQvZ3JpZC1zaGFyZWQuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFHQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkRBO0FBc0RBO0FBQ0E7QUFEQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///266\n");

/***/ }),
/* 267 */
/*!*************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toastr = __webpack_require__(/*! libs/toastr */ 7);\n\nvar mod_toastr = _interopRequireWildcard(_toastr);\n\nvar _tag = __webpack_require__(/*! mvc/tag */ 39);\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _workflowModel = __webpack_require__(/*! mvc/workflow/workflow-model */ 268);\n\nvar _workflowModel2 = _interopRequireDefault(_workflowModel);\n\nvar _queryStringParsing = __webpack_require__(/*! utils/query-string-parsing */ 14);\n\nvar _queryStringParsing2 = _interopRequireDefault(_queryStringParsing);\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/** View of the individual workflows */\nvar WorkflowItemView = Backbone.View.extend({\n    tagName: \"tr\", // name of (orphan) root tag in this.el\n    initialize: function initialize() {\n        _.bindAll(this, \"render\", \"_rowTemplate\", \"renderTagEditor\", \"_templateActions\", \"removeWorkflow\", \"copyWorkflow\"); // every function that uses 'this' as the current object should be in here\n        mod_toastr.options.timeOut = 1500;\n    },\n\n    events: {\n        \"click #show-in-tool-panel\": \"showInToolPanel\",\n        \"click #delete-workflow\": \"removeWorkflow\",\n        \"click #rename-workflow\": \"renameWorkflow\",\n        \"click #copy-workflow\": \"copyWorkflow\"\n    },\n\n    render: function render() {\n        $(this.el).html(this._rowTemplate());\n        return this;\n    },\n\n    showInToolPanel: function showInToolPanel() {\n        this.model.set(\"show_in_tool_panel\", !this.model.get(\"show_in_tool_panel\"));\n        this.model.save();\n        // This reloads the whole page, so that the workflow appears in the tool panel.\n        // Ideally we would notify only the tool panel of a change\n        window.location = Galaxy.root + \"workflows/list\";\n    },\n\n    removeWorkflow: function removeWorkflow() {\n        var wfName = this.model.get(\"name\");\n        if (window.confirm(\"Are you sure you want to delete workflow '\" + wfName + \"'?\")) {\n            this.model.destroy({\n                success: function success() {\n                    mod_toastr.success(\"Successfully deleted workflow '\" + wfName + \"'\");\n                }\n            });\n            this.remove();\n        }\n    },\n\n    renameWorkflow: function renameWorkflow() {\n        var oldName = this.model.get(\"name\");\n        var newName = window.prompt(\"Enter a new Name for workflow '\" + oldName + \"'\", oldName);\n        if (newName) {\n            this.model.save({ name: newName }, {\n                success: function success() {\n                    mod_toastr.success(\"Successfully renamed workflow '\" + oldName + \"' to '\" + newName + \"'\");\n                }\n            });\n            this.render();\n        }\n    },\n\n    copyWorkflow: function copyWorkflow() {\n        var self = this;\n        var oldName = this.model.get(\"name\");\n        $.getJSON(this.model.urlRoot + \"/\" + this.model.id + \"/download\", function (wfJson) {\n            var newName = \"Copy of \" + oldName;\n            var currentOwner = self.model.get(\"owner\");\n            if (currentOwner != Galaxy.user.attributes.username) {\n                newName += \" shared by user \" + currentOwner;\n            }\n            wfJson.name = newName;\n            self.collection.create(wfJson, {\n                at: 0,\n                wait: true,\n                success: function success() {\n                    mod_toastr.success(\"Successfully copied workflow '\" + oldName + \"' to '\" + newName + \"'\");\n                },\n                error: function error(model, resp, options) {\n                    // signature seems to have changed over the course of backbone dev\n                    // see https://github.com/jashkenas/backbone/issues/2606#issuecomment-19289483\n                    mod_toastr.error(options.errorThrown);\n                }\n            });\n        }).error(function (jqXHR, textStatus, errorThrown) {\n            mod_toastr.error(jqXHR.responseJSON.err_msg);\n        });\n    },\n\n    _rowTemplate: function _rowTemplate() {\n        var show = this.model.get(\"show_in_tool_panel\");\n        var wfId = this.model.id;\n        var checkboxHtml = \"<input id=\\\"show-in-tool-panel\\\" type=\\\"checkbox\\\" class=\\\"show-in-tool-panel\\\" \" + (show ? \"checked=\\\"\" + show + \"\\\"\" : \"\") + \" value=\\\"\" + wfId + \"\\\">\";\n        var trHtml = \"<td><div class=\\\"dropdown\\\"><button class=\\\"menubutton\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\">\" + _.escape(this.model.get(\"name\")) + \"<span class=\\\"caret\\\"></span></button>\" + this._templateActions() + \"</div></td><td><span><div class=\\\"\" + wfId + \" tags-display\\\"></div></td><td>\" + (this.model.get(\"owner\") === Galaxy.user.attributes.username ? \"You\" : this.model.get(\"owner\")) + \"</span></td><td>\" + this.model.get(\"number_of_steps\") + \"</td><td>\" + (this.model.get(\"published\") ? \"Yes\" : \"No\") + \"</td><td>\" + checkboxHtml + \"</td>\";\n        return trHtml;\n    },\n\n    renderTagEditor: function renderTagEditor() {\n        var TagEditor = new _tag2.default.TagsEditor({\n            model: this.model,\n            el: $.find(\".\" + this.model.id + \".tags-display\"),\n            workflow_mode: true\n        });\n        TagEditor.toggle(true);\n        TagEditor.render();\n    },\n\n    /** Template for user actions for workflows */\n    _templateActions: function _templateActions() {\n        if (this.model.get(\"owner\") === Galaxy.user.attributes.username) {\n            return \"<ul class=\\\"dropdown-menu action-dpd\\\"><li><a href=\\\"\" + Galaxy.root + \"workflow/editor?id=\" + this.model.id + \"\\\">Edit</a></li><li><a href=\\\"\" + Galaxy.root + \"workflows/run?id=\" + this.model.id + \"\\\">Run</a></li><li><a href=\\\"\" + Galaxy.root + \"workflow/sharing?id=\" + this.model.id + \"\\\">Share</a></li><li><a href=\\\"\" + Galaxy.root + \"api/workflows/\" + this.model.id + \"/download?format=json-download\\\">Download</a></li><li><a id=\\\"copy-workflow\\\" style=\\\"cursor: pointer;\\\">Copy</a></li><li><a id=\\\"rename-workflow\\\" style=\\\"cursor: pointer;\\\">Rename</a></li><li><a href=\\\"\" + Galaxy.root + \"workflow/display_by_id?id=\" + this.model.id + \"\\\">View</a></li><li><a id=\\\"delete-workflow\\\" style=\\\"cursor: pointer;\\\">Delete</a></li></ul>\";\n        } else {\n            return \"<ul class=\\\"dropdown-menu action-dpd\\\"><li><a href=\\\"\" + Galaxy.root + \"workflow/display_by_username_and_slug?username=\" + this.model.get(\"owner\") + \"&slug=\" + this.model.get(\"slug\") + \"\\\">View</a></li><li><a href=\\\"\" + Galaxy.root + \"workflows/run?id=\" + this.model.id + \"\\\">Run</a></li><li><a id=\\\"copy-workflow\\\" style=\\\"cursor: pointer;\\\">Copy</a></li><li><a class=\\\"link-confirm-shared-\" + this.model.id + \"\\\" href=\\\"\" + Galaxy.root + \"workflow/sharing?unshare_me=True&id=\" + this.model.id + \"\\\">Remove</a></li></ul>\";\n        }\n    }\n});\n\n/** View of the main workflow list page */\n/** Workflow view */\nvar WorkflowListView = Backbone.View.extend({\n    title: (0, _localization2.default)(\"Workflows\"),\n    initialize: function initialize() {\n        this.setElement(\"<div/>\");\n        _.bindAll(this, \"adjustActiondropdown\");\n        this.collection = new _workflowModel2.default.WorkflowCollection();\n        this.collection.fetch().done(this.render());\n        this.collection.bind(\"add\", this.appendItem);\n        this.collection.on(\"sync\", this.render, this);\n    },\n\n    events: {\n        dragleave: \"unhighlightDropZone\",\n        drop: \"drop\",\n        dragover: function dragover(ev) {\n            $(\".hidden_description_layer\").addClass(\"dragover\");\n            $(\".menubutton\").addClass(\"background-none\");\n            ev.preventDefault();\n        }\n    },\n\n    unhighlightDropZone: function unhighlightDropZone() {\n        $(\".hidden_description_layer\").removeClass(\"dragover\");\n        $(\".menubutton\").removeClass(\"background-none\");\n    },\n\n    drop: function drop(e) {\n        // TODO: check that file is valid galaxy workflow\n        this.unhighlightDropZone();\n        e.preventDefault();\n        var files = e.dataTransfer.files;\n        var self = this;\n        for (var i = 0, f; f = files[i]; i++) {\n            self.readWorkflowFiles(f);\n        }\n    },\n\n    readWorkflowFiles: function readWorkflowFiles(f) {\n        var self = this;\n        var reader = new FileReader();\n        reader.onload = function (theFile) {\n            var wf_json;\n            try {\n                wf_json = JSON.parse(reader.result);\n            } catch (e) {\n                mod_toastr.error(\"Could not read file '\" + f.name + \"'. Verify it is a valid Galaxy workflow\");\n                wf_json = null;\n            }\n            if (wf_json) {\n                self.collection.create(wf_json, {\n                    at: 0,\n                    wait: true,\n                    success: function success() {\n                        mod_toastr.success(\"Successfully imported workflow '\" + wf_json.name + \"'\");\n                    },\n                    error: function error(model, resp, options) {\n                        mod_toastr.error(options.errorThrown);\n                    }\n                });\n            }\n        };\n        reader.readAsText(f, \"utf-8\");\n    },\n\n    _showArgErrors: _.once(function () {\n        // Parse args out of params, display if there's a message.\n        var msg_text = _queryStringParsing2.default.get(\"message\");\n        var msg_status = _queryStringParsing2.default.get(\"status\");\n        if (msg_status === \"error\") {\n            mod_toastr.error(_.escape(msg_text || \"Unknown Error, please report this to an administrator.\"));\n        } else if (msg_text) {\n            mod_toastr.info(_.escape(msg_text));\n        }\n    }),\n\n    render: function render() {\n        // Add workflow header\n        var header = this._templateHeader();\n        // Add the actions buttons\n        var templateActions = this._templateActionButtons();\n        var tableTemplate = this._templateWorkflowTable();\n        this.$el.html(header + templateActions + tableTemplate);\n        var self = this;\n        _(this.collection.models).each(function (item) {\n            // in case collection is not empty\n            self.appendItem(item);\n            self.confirmDelete(item);\n        }, this);\n        var minQueryLength = 3;\n        this.searchWorkflow(this.$(\".search-wf\"), this.$(\".workflow-search tr\"), minQueryLength);\n        this.adjustActiondropdown();\n        this._showArgErrors();\n        return this;\n    },\n\n    appendItem: function appendItem(item) {\n        var workflowItemView = new WorkflowItemView({\n            model: item,\n            collection: this.collection\n        });\n        $(\".workflow-search\").append(workflowItemView.render().el);\n        workflowItemView.renderTagEditor();\n    },\n\n    /** Add confirm box before removing/unsharing workflow */\n    confirmDelete: function confirmDelete(workflow) {\n        var $el_shared_wf_link = this.$(\".link-confirm-shared-\" + workflow.id);\n        $el_shared_wf_link.click(function () {\n            return window.confirm(\"Are you sure you want to remove the shared workflow '\" + workflow.attributes.name + \"'?\");\n        });\n    },\n\n    /** Implement client side workflow search/filtering */\n    searchWorkflow: function searchWorkflow($el_searchinput, $el_tabletr, min_querylen) {\n        $el_searchinput.on(\"keyup\", function () {\n            var query = $(this).val();\n            // Filter when query is at least 3 characters\n            // otherwise show all rows\n            if (query.length >= min_querylen) {\n                // Ignore the query's case using 'i'\n                var regular_expression = new RegExp(query, \"i\");\n                $el_tabletr.hide();\n                $el_tabletr.filter(function () {\n                    // Apply regular expression on each row's text\n                    // and show when there is a match\n                    return regular_expression.test($(this).text());\n                }).show();\n            } else {\n                $el_tabletr.show();\n            }\n        });\n    },\n\n    /** Ajust the position of dropdown with respect to table */\n    adjustActiondropdown: function adjustActiondropdown() {\n        $(this.el).on(\"show.bs.dropdown\", function () {\n            $(this.el).css(\"overflow\", \"inherit\");\n        });\n        $(this.el).on(\"hide.bs.dropdown\", function () {\n            $(this.el).css(\"overflow\", \"auto\");\n        });\n    },\n\n    /** Template for no workflow */\n    _templateNoWorkflow: function _templateNoWorkflow() {\n        return '<div class=\"wf-nodata\"> You have no workflows. </div>';\n    },\n\n    /** Template for actions buttons */\n    _templateActionButtons: function _templateActionButtons() {\n        return \"<ul class=\\\"manage-table-actions\\\"><li><input class=\\\"search-wf form-control\\\" type=\\\"text\\\" autocomplete=\\\"off\\\" placeholder=\\\"search for workflow...\\\"></li><li><a class=\\\"action-button fa fa-plus wf-action\\\" id=\\\"new-workflow\\\" title=\\\"Create new workflow\\\" href=\\\"\" + Galaxy.root + \"workflows/create\\\"></a></li><li><a class=\\\"action-button fa fa-upload wf-action\\\" id=\\\"import-workflow\\\" title=\\\"Upload or import workflow\\\" href=\\\"\" + Galaxy.root + \"workflows/import_workflow\\\"></a></li></ul>\";\n    },\n\n    /** Template for workflow table */\n    _templateWorkflowTable: function _templateWorkflowTable() {\n        var tableHtml = '<table class=\"table colored\"><thead>' + '<tr class=\"header\">' + \"<th>Name</th>\" + \"<th>Tags</th>\" + \"<th>Owner</th>\" + \"<th># of Steps</th>\" + \"<th>Published</th>\" + \"<th>Show in tools panel</th>\" + \"</tr></thead>\";\n        return tableHtml + \"<tbody class=\\\"workflow-search \\\"><div class=\\\"hidden_description_layer\\\"><p>Drop workflow files here to import</p></tbody></table></div>\";\n    },\n\n    /** Main template */\n    _templateHeader: function _templateHeader() {\n        return '<div class=\"page-container\">' + '<div class=\"user-workflows wf\">' + '<div class=\"response-message\"></div>' + \"<h2>\" + (0, _localization2.default)(\"Your workflows\") + \"</h2>\" + \"</div>\" + \"</div>\";\n    }\n});\n\nvar ImportWorkflowView = Backbone.View.extend({\n    initialize: function initialize() {\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Open page to import workflow */\n    render: function render() {\n        var self = this;\n        $.getJSON(Galaxy.root + \"workflow/upload_import_workflow\", function (options) {\n            self.$el.empty().append(self._mainTemplate(options));\n        });\n    },\n\n    /** Template for the import workflow page */\n    _mainTemplate: function _mainTemplate(options) {\n        return \"<div class='toolForm'><div class='toolFormTitle'>Import Galaxy workflow</div><div class='toolFormBody'><form name='import_workflow' id='import_workflow' action='\" + Galaxy.root + \"workflow/upload_import_workflow' enctype='multipart/form-data' method='POST'><div class='form-row'><label>Galaxy workflow URL:</label><input type='text' name='url' class='input-url' value='\" + options.url + \"' size='40'><div class='toolParamHelp' style='clear: both;'>If the workflow is accessible via a URL, enter the URL above and click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><label>Galaxy workflow file:</label><div class='form-row-input'><input type='file' name='file_data' class='input-file'/></div><div class='toolParamHelp' style='clear: both;'>If the workflow is in a file on your computer, choose it and then click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><input type='submit' class='primary-button wf-import' name='import_button' value='Import'></div></form><hr/><div class='form-row'><label>Import a Galaxy workflow from myExperiment:</label><div class='form-row-input'><a href='\" + options.myexperiment_target_url + \"'> Visit myExperiment</a></div><div class='toolParamHelp' style='clear: both;'>Click the link above to visit myExperiment and browse for Galaxy workflows.</div><div style='clear: both'></div></div></div></div>\";\n    }\n});\n\nexports.default = {\n    View: WorkflowListView,\n    ImportWorkflowView: ImportWorkflowView\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! underscore */ 1), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy93b3JrZmxvdy93b3JrZmxvdy5qcz82ODE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBXb3JrZmxvdyB2aWV3ICovXG5pbXBvcnQgKiBhcyBtb2RfdG9hc3RyIGZyb20gXCJsaWJzL3RvYXN0clwiO1xuaW1wb3J0IFRBR1MgZnJvbSBcIm12Yy90YWdcIjtcbmltcG9ydCBXT1JLRkxPV1MgZnJvbSBcIm12Yy93b3JrZmxvdy93b3JrZmxvdy1tb2RlbFwiO1xuaW1wb3J0IFF1ZXJ5U3RyaW5nUGFyc2luZyBmcm9tIFwidXRpbHMvcXVlcnktc3RyaW5nLXBhcnNpbmdcIjtcbmltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG4vKiogVmlldyBvZiB0aGUgaW5kaXZpZHVhbCB3b3JrZmxvd3MgKi9cbnZhciBXb3JrZmxvd0l0ZW1WaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIHRhZ05hbWU6IFwidHJcIiwgLy8gbmFtZSBvZiAob3JwaGFuKSByb290IHRhZyBpbiB0aGlzLmVsXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIF8uYmluZEFsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBcInJlbmRlclwiLFxuICAgICAgICAgICAgXCJfcm93VGVtcGxhdGVcIixcbiAgICAgICAgICAgIFwicmVuZGVyVGFnRWRpdG9yXCIsXG4gICAgICAgICAgICBcIl90ZW1wbGF0ZUFjdGlvbnNcIixcbiAgICAgICAgICAgIFwicmVtb3ZlV29ya2Zsb3dcIixcbiAgICAgICAgICAgIFwiY29weVdvcmtmbG93XCJcbiAgICAgICAgKTsgLy8gZXZlcnkgZnVuY3Rpb24gdGhhdCB1c2VzICd0aGlzJyBhcyB0aGUgY3VycmVudCBvYmplY3Qgc2hvdWxkIGJlIGluIGhlcmVcbiAgICAgICAgbW9kX3RvYXN0ci5vcHRpb25zLnRpbWVPdXQgPSAxNTAwO1xuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgXCJjbGljayAjc2hvdy1pbi10b29sLXBhbmVsXCI6IFwic2hvd0luVG9vbFBhbmVsXCIsXG4gICAgICAgIFwiY2xpY2sgI2RlbGV0ZS13b3JrZmxvd1wiOiBcInJlbW92ZVdvcmtmbG93XCIsXG4gICAgICAgIFwiY2xpY2sgI3JlbmFtZS13b3JrZmxvd1wiOiBcInJlbmFtZVdvcmtmbG93XCIsXG4gICAgICAgIFwiY2xpY2sgI2NvcHktd29ya2Zsb3dcIjogXCJjb3B5V29ya2Zsb3dcIlxuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMuZWwpLmh0bWwodGhpcy5fcm93VGVtcGxhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBzaG93SW5Ub29sUGFuZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm1vZGVsLnNldChcInNob3dfaW5fdG9vbF9wYW5lbFwiLCAhdGhpcy5tb2RlbC5nZXQoXCJzaG93X2luX3Rvb2xfcGFuZWxcIikpO1xuICAgICAgICB0aGlzLm1vZGVsLnNhdmUoKTtcbiAgICAgICAgLy8gVGhpcyByZWxvYWRzIHRoZSB3aG9sZSBwYWdlLCBzbyB0aGF0IHRoZSB3b3JrZmxvdyBhcHBlYXJzIGluIHRoZSB0b29sIHBhbmVsLlxuICAgICAgICAvLyBJZGVhbGx5IHdlIHdvdWxkIG5vdGlmeSBvbmx5IHRoZSB0b29sIHBhbmVsIG9mIGEgY2hhbmdlXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGAke0dhbGF4eS5yb290fXdvcmtmbG93cy9saXN0YDtcbiAgICB9LFxuXG4gICAgcmVtb3ZlV29ya2Zsb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgd2ZOYW1lID0gdGhpcy5tb2RlbC5nZXQoXCJuYW1lXCIpO1xuICAgICAgICBpZiAod2luZG93LmNvbmZpcm0oYEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgd29ya2Zsb3cgJyR7d2ZOYW1lfSc/YCkpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZGVzdHJveSh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZF90b2FzdHIuc3VjY2VzcyhgU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgd29ya2Zsb3cgJyR7d2ZOYW1lfSdgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuYW1lV29ya2Zsb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb2xkTmFtZSA9IHRoaXMubW9kZWwuZ2V0KFwibmFtZVwiKTtcbiAgICAgICAgdmFyIG5ld05hbWUgPSB3aW5kb3cucHJvbXB0KGBFbnRlciBhIG5ldyBOYW1lIGZvciB3b3JrZmxvdyAnJHtvbGROYW1lfSdgLCBvbGROYW1lKTtcbiAgICAgICAgaWYgKG5ld05hbWUpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuc2F2ZShcbiAgICAgICAgICAgICAgICB7IG5hbWU6IG5ld05hbWUgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kX3RvYXN0ci5zdWNjZXNzKGBTdWNjZXNzZnVsbHkgcmVuYW1lZCB3b3JrZmxvdyAnJHtvbGROYW1lfScgdG8gJyR7bmV3TmFtZX0nYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb3B5V29ya2Zsb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBvbGROYW1lID0gdGhpcy5tb2RlbC5nZXQoXCJuYW1lXCIpO1xuICAgICAgICAkLmdldEpTT04oYCR7dGhpcy5tb2RlbC51cmxSb290fS8ke3RoaXMubW9kZWwuaWR9L2Rvd25sb2FkYCwgd2ZKc29uID0+IHtcbiAgICAgICAgICAgIHZhciBuZXdOYW1lID0gYENvcHkgb2YgJHtvbGROYW1lfWA7XG4gICAgICAgICAgICB2YXIgY3VycmVudE93bmVyID0gc2VsZi5tb2RlbC5nZXQoXCJvd25lclwiKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50T3duZXIgIT0gR2FsYXh5LnVzZXIuYXR0cmlidXRlcy51c2VybmFtZSkge1xuICAgICAgICAgICAgICAgIG5ld05hbWUgKz0gYCBzaGFyZWQgYnkgdXNlciAke2N1cnJlbnRPd25lcn1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2ZKc29uLm5hbWUgPSBuZXdOYW1lO1xuICAgICAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmNyZWF0ZSh3Zkpzb24sIHtcbiAgICAgICAgICAgICAgICBhdDogMCxcbiAgICAgICAgICAgICAgICB3YWl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBtb2RfdG9hc3RyLnN1Y2Nlc3MoYFN1Y2Nlc3NmdWxseSBjb3BpZWQgd29ya2Zsb3cgJyR7b2xkTmFtZX0nIHRvICcke25ld05hbWV9J2ApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKG1vZGVsLCByZXNwLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNpZ25hdHVyZSBzZWVtcyB0byBoYXZlIGNoYW5nZWQgb3ZlciB0aGUgY291cnNlIG9mIGJhY2tib25lIGRldlxuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy9iYWNrYm9uZS9pc3N1ZXMvMjYwNiNpc3N1ZWNvbW1lbnQtMTkyODk0ODNcbiAgICAgICAgICAgICAgICAgICAgbW9kX3RvYXN0ci5lcnJvcihvcHRpb25zLmVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkuZXJyb3IoKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgPT4ge1xuICAgICAgICAgICAgbW9kX3RvYXN0ci5lcnJvcihqcVhIUi5yZXNwb25zZUpTT04uZXJyX21zZyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBfcm93VGVtcGxhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2hvdyA9IHRoaXMubW9kZWwuZ2V0KFwic2hvd19pbl90b29sX3BhbmVsXCIpO1xuICAgICAgICB2YXIgd2ZJZCA9IHRoaXMubW9kZWwuaWQ7XG4gICAgICAgIHZhciBjaGVja2JveEh0bWwgPSBgPGlucHV0IGlkPVwic2hvdy1pbi10b29sLXBhbmVsXCIgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJzaG93LWluLXRvb2wtcGFuZWxcIiAke1xuICAgICAgICAgICAgc2hvdyA/IGBjaGVja2VkPVwiJHtzaG93fVwiYCA6IFwiXCJcbiAgICAgICAgfSB2YWx1ZT1cIiR7d2ZJZH1cIj5gO1xuICAgICAgICB2YXIgdHJIdG1sID0gYDx0ZD48ZGl2IGNsYXNzPVwiZHJvcGRvd25cIj48YnV0dG9uIGNsYXNzPVwibWVudWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+JHtfLmVzY2FwZShcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZ2V0KFwibmFtZVwiKVxuICAgICAgICApfTxzcGFuIGNsYXNzPVwiY2FyZXRcIj48L3NwYW4+PC9idXR0b24+JHt0aGlzLl90ZW1wbGF0ZUFjdGlvbnMoKX08L2Rpdj48L3RkPjx0ZD48c3Bhbj48ZGl2IGNsYXNzPVwiJHtcbiAgICAgICAgICAgIHdmSWRcbiAgICAgICAgfSB0YWdzLWRpc3BsYXlcIj48L2Rpdj48L3RkPjx0ZD4ke1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoXCJvd25lclwiKSA9PT0gR2FsYXh5LnVzZXIuYXR0cmlidXRlcy51c2VybmFtZSA/IFwiWW91XCIgOiB0aGlzLm1vZGVsLmdldChcIm93bmVyXCIpXG4gICAgICAgIH08L3NwYW4+PC90ZD48dGQ+JHt0aGlzLm1vZGVsLmdldChcIm51bWJlcl9vZl9zdGVwc1wiKX08L3RkPjx0ZD4ke1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoXCJwdWJsaXNoZWRcIikgPyBcIlllc1wiIDogXCJOb1wiXG4gICAgICAgIH08L3RkPjx0ZD4ke2NoZWNrYm94SHRtbH08L3RkPmA7XG4gICAgICAgIHJldHVybiB0ckh0bWw7XG4gICAgfSxcblxuICAgIHJlbmRlclRhZ0VkaXRvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBUYWdFZGl0b3IgPSBuZXcgVEFHUy5UYWdzRWRpdG9yKHtcbiAgICAgICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgICAgICAgZWw6ICQuZmluZChgLiR7dGhpcy5tb2RlbC5pZH0udGFncy1kaXNwbGF5YCksXG4gICAgICAgICAgICB3b3JrZmxvd19tb2RlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBUYWdFZGl0b3IudG9nZ2xlKHRydWUpO1xuICAgICAgICBUYWdFZGl0b3IucmVuZGVyKCk7XG4gICAgfSxcblxuICAgIC8qKiBUZW1wbGF0ZSBmb3IgdXNlciBhY3Rpb25zIGZvciB3b3JrZmxvd3MgKi9cbiAgICBfdGVtcGxhdGVBY3Rpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwuZ2V0KFwib3duZXJcIikgPT09IEdhbGF4eS51c2VyLmF0dHJpYnV0ZXMudXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBhY3Rpb24tZHBkXCI+PGxpPjxhIGhyZWY9XCIke0dhbGF4eS5yb290fXdvcmtmbG93L2VkaXRvcj9pZD0ke1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuaWRcbiAgICAgICAgICAgIH1cIj5FZGl0PC9hPjwvbGk+PGxpPjxhIGhyZWY9XCIke0dhbGF4eS5yb290fXdvcmtmbG93cy9ydW4/aWQ9JHt0aGlzLm1vZGVsLmlkfVwiPlJ1bjwvYT48L2xpPjxsaT48YSBocmVmPVwiJHtcbiAgICAgICAgICAgICAgICBHYWxheHkucm9vdFxuICAgICAgICAgICAgfXdvcmtmbG93L3NoYXJpbmc/aWQ9JHt0aGlzLm1vZGVsLmlkfVwiPlNoYXJlPC9hPjwvbGk+PGxpPjxhIGhyZWY9XCIke0dhbGF4eS5yb290fWFwaS93b3JrZmxvd3MvJHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmlkXG4gICAgICAgICAgICB9L2Rvd25sb2FkP2Zvcm1hdD1qc29uLWRvd25sb2FkXCI+RG93bmxvYWQ8L2E+PC9saT48bGk+PGEgaWQ9XCJjb3B5LXdvcmtmbG93XCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+Q29weTwvYT48L2xpPjxsaT48YSBpZD1cInJlbmFtZS13b3JrZmxvd1wiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPlJlbmFtZTwvYT48L2xpPjxsaT48YSBocmVmPVwiJHtcbiAgICAgICAgICAgICAgICBHYWxheHkucm9vdFxuICAgICAgICAgICAgfXdvcmtmbG93L2Rpc3BsYXlfYnlfaWQ/aWQ9JHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmlkXG4gICAgICAgICAgICB9XCI+VmlldzwvYT48L2xpPjxsaT48YSBpZD1cImRlbGV0ZS13b3JrZmxvd1wiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPkRlbGV0ZTwvYT48L2xpPjwvdWw+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBhY3Rpb24tZHBkXCI+PGxpPjxhIGhyZWY9XCIke1xuICAgICAgICAgICAgICAgIEdhbGF4eS5yb290XG4gICAgICAgICAgICB9d29ya2Zsb3cvZGlzcGxheV9ieV91c2VybmFtZV9hbmRfc2x1Zz91c2VybmFtZT0ke3RoaXMubW9kZWwuZ2V0KFwib3duZXJcIil9JnNsdWc9JHt0aGlzLm1vZGVsLmdldChcbiAgICAgICAgICAgICAgICBcInNsdWdcIlxuICAgICAgICAgICAgKX1cIj5WaWV3PC9hPjwvbGk+PGxpPjxhIGhyZWY9XCIke0dhbGF4eS5yb290fXdvcmtmbG93cy9ydW4/aWQ9JHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmlkXG4gICAgICAgICAgICB9XCI+UnVuPC9hPjwvbGk+PGxpPjxhIGlkPVwiY29weS13b3JrZmxvd1wiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPkNvcHk8L2E+PC9saT48bGk+PGEgY2xhc3M9XCJsaW5rLWNvbmZpcm0tc2hhcmVkLSR7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5pZFxuICAgICAgICAgICAgfVwiIGhyZWY9XCIke0dhbGF4eS5yb290fXdvcmtmbG93L3NoYXJpbmc/dW5zaGFyZV9tZT1UcnVlJmlkPSR7dGhpcy5tb2RlbC5pZH1cIj5SZW1vdmU8L2E+PC9saT48L3VsPmA7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqIFZpZXcgb2YgdGhlIG1haW4gd29ya2Zsb3cgbGlzdCBwYWdlICovXG52YXIgV29ya2Zsb3dMaXN0VmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICB0aXRsZTogX2woXCJXb3JrZmxvd3NcIiksXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudChcIjxkaXYvPlwiKTtcbiAgICAgICAgXy5iaW5kQWxsKHRoaXMsIFwiYWRqdXN0QWN0aW9uZHJvcGRvd25cIik7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IG5ldyBXT1JLRkxPV1MuV29ya2Zsb3dDb2xsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5mZXRjaCgpLmRvbmUodGhpcy5yZW5kZXIoKSk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5iaW5kKFwiYWRkXCIsIHRoaXMuYXBwZW5kSXRlbSk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5vbihcInN5bmNcIiwgdGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgZHJhZ2xlYXZlOiBcInVuaGlnaGxpZ2h0RHJvcFpvbmVcIixcbiAgICAgICAgZHJvcDogXCJkcm9wXCIsXG4gICAgICAgIGRyYWdvdmVyOiBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgJChcIi5oaWRkZW5fZGVzY3JpcHRpb25fbGF5ZXJcIikuYWRkQ2xhc3MoXCJkcmFnb3ZlclwiKTtcbiAgICAgICAgICAgICQoXCIubWVudWJ1dHRvblwiKS5hZGRDbGFzcyhcImJhY2tncm91bmQtbm9uZVwiKTtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5oaWdobGlnaHREcm9wWm9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICQoXCIuaGlkZGVuX2Rlc2NyaXB0aW9uX2xheWVyXCIpLnJlbW92ZUNsYXNzKFwiZHJhZ292ZXJcIik7XG4gICAgICAgICQoXCIubWVudWJ1dHRvblwiKS5yZW1vdmVDbGFzcyhcImJhY2tncm91bmQtbm9uZVwiKTtcbiAgICB9LFxuXG4gICAgZHJvcDogZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyBUT0RPOiBjaGVjayB0aGF0IGZpbGUgaXMgdmFsaWQgZ2FsYXh5IHdvcmtmbG93XG4gICAgICAgIHRoaXMudW5oaWdobGlnaHREcm9wWm9uZSgpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBmaWxlcyA9IGUuZGF0YVRyYW5zZmVyLmZpbGVzO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBmOyAoZiA9IGZpbGVzW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICBzZWxmLnJlYWRXb3JrZmxvd0ZpbGVzKGYpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWRXb3JrZmxvd0ZpbGVzOiBmdW5jdGlvbihmKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSB0aGVGaWxlID0+IHtcbiAgICAgICAgICAgIHZhciB3Zl9qc29uO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3Zl9qc29uID0gSlNPTi5wYXJzZShyZWFkZXIucmVzdWx0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBtb2RfdG9hc3RyLmVycm9yKGBDb3VsZCBub3QgcmVhZCBmaWxlICcke2YubmFtZX0nLiBWZXJpZnkgaXQgaXMgYSB2YWxpZCBHYWxheHkgd29ya2Zsb3dgKTtcbiAgICAgICAgICAgICAgICB3Zl9qc29uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3Zl9qc29uKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmNyZWF0ZSh3Zl9qc29uLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0OiAwLFxuICAgICAgICAgICAgICAgICAgICB3YWl0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZF90b2FzdHIuc3VjY2VzcyhgU3VjY2Vzc2Z1bGx5IGltcG9ydGVkIHdvcmtmbG93ICcke3dmX2pzb24ubmFtZX0nYCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihtb2RlbCwgcmVzcCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kX3RvYXN0ci5lcnJvcihvcHRpb25zLmVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmLCBcInV0Zi04XCIpO1xuICAgIH0sXG5cbiAgICBfc2hvd0FyZ0Vycm9yczogXy5vbmNlKCgpID0+IHtcbiAgICAgICAgLy8gUGFyc2UgYXJncyBvdXQgb2YgcGFyYW1zLCBkaXNwbGF5IGlmIHRoZXJlJ3MgYSBtZXNzYWdlLlxuICAgICAgICB2YXIgbXNnX3RleHQgPSBRdWVyeVN0cmluZ1BhcnNpbmcuZ2V0KFwibWVzc2FnZVwiKTtcbiAgICAgICAgdmFyIG1zZ19zdGF0dXMgPSBRdWVyeVN0cmluZ1BhcnNpbmcuZ2V0KFwic3RhdHVzXCIpO1xuICAgICAgICBpZiAobXNnX3N0YXR1cyA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBtb2RfdG9hc3RyLmVycm9yKF8uZXNjYXBlKG1zZ190ZXh0IHx8IFwiVW5rbm93biBFcnJvciwgcGxlYXNlIHJlcG9ydCB0aGlzIHRvIGFuIGFkbWluaXN0cmF0b3IuXCIpKTtcbiAgICAgICAgfSBlbHNlIGlmIChtc2dfdGV4dCkge1xuICAgICAgICAgICAgbW9kX3RvYXN0ci5pbmZvKF8uZXNjYXBlKG1zZ190ZXh0KSk7XG4gICAgICAgIH1cbiAgICB9KSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEFkZCB3b3JrZmxvdyBoZWFkZXJcbiAgICAgICAgdmFyIGhlYWRlciA9IHRoaXMuX3RlbXBsYXRlSGVhZGVyKCk7XG4gICAgICAgIC8vIEFkZCB0aGUgYWN0aW9ucyBidXR0b25zXG4gICAgICAgIHZhciB0ZW1wbGF0ZUFjdGlvbnMgPSB0aGlzLl90ZW1wbGF0ZUFjdGlvbkJ1dHRvbnMoKTtcbiAgICAgICAgdmFyIHRhYmxlVGVtcGxhdGUgPSB0aGlzLl90ZW1wbGF0ZVdvcmtmbG93VGFibGUoKTtcbiAgICAgICAgdGhpcy4kZWwuaHRtbChoZWFkZXIgKyB0ZW1wbGF0ZUFjdGlvbnMgKyB0YWJsZVRlbXBsYXRlKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBfKHRoaXMuY29sbGVjdGlvbi5tb2RlbHMpLmVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAvLyBpbiBjYXNlIGNvbGxlY3Rpb24gaXMgbm90IGVtcHR5XG4gICAgICAgICAgICBzZWxmLmFwcGVuZEl0ZW0oaXRlbSk7XG4gICAgICAgICAgICBzZWxmLmNvbmZpcm1EZWxldGUoaXRlbSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB2YXIgbWluUXVlcnlMZW5ndGggPSAzO1xuICAgICAgICB0aGlzLnNlYXJjaFdvcmtmbG93KHRoaXMuJChcIi5zZWFyY2gtd2ZcIiksIHRoaXMuJChcIi53b3JrZmxvdy1zZWFyY2ggdHJcIiksIG1pblF1ZXJ5TGVuZ3RoKTtcbiAgICAgICAgdGhpcy5hZGp1c3RBY3Rpb25kcm9wZG93bigpO1xuICAgICAgICB0aGlzLl9zaG93QXJnRXJyb3JzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBhcHBlbmRJdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciB3b3JrZmxvd0l0ZW1WaWV3ID0gbmV3IFdvcmtmbG93SXRlbVZpZXcoe1xuICAgICAgICAgICAgbW9kZWw6IGl0ZW0sXG4gICAgICAgICAgICBjb2xsZWN0aW9uOiB0aGlzLmNvbGxlY3Rpb25cbiAgICAgICAgfSk7XG4gICAgICAgICQoXCIud29ya2Zsb3ctc2VhcmNoXCIpLmFwcGVuZCh3b3JrZmxvd0l0ZW1WaWV3LnJlbmRlcigpLmVsKTtcbiAgICAgICAgd29ya2Zsb3dJdGVtVmlldy5yZW5kZXJUYWdFZGl0b3IoKTtcbiAgICB9LFxuXG4gICAgLyoqIEFkZCBjb25maXJtIGJveCBiZWZvcmUgcmVtb3ZpbmcvdW5zaGFyaW5nIHdvcmtmbG93ICovXG4gICAgY29uZmlybURlbGV0ZTogZnVuY3Rpb24od29ya2Zsb3cpIHtcbiAgICAgICAgdmFyICRlbF9zaGFyZWRfd2ZfbGluayA9IHRoaXMuJChgLmxpbmstY29uZmlybS1zaGFyZWQtJHt3b3JrZmxvdy5pZH1gKTtcbiAgICAgICAgJGVsX3NoYXJlZF93Zl9saW5rLmNsaWNrKCgpID0+XG4gICAgICAgICAgICB3aW5kb3cuY29uZmlybShgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGUgc2hhcmVkIHdvcmtmbG93ICcke3dvcmtmbG93LmF0dHJpYnV0ZXMubmFtZX0nP2ApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKiBJbXBsZW1lbnQgY2xpZW50IHNpZGUgd29ya2Zsb3cgc2VhcmNoL2ZpbHRlcmluZyAqL1xuICAgIHNlYXJjaFdvcmtmbG93OiBmdW5jdGlvbigkZWxfc2VhcmNoaW5wdXQsICRlbF90YWJsZXRyLCBtaW5fcXVlcnlsZW4pIHtcbiAgICAgICAgJGVsX3NlYXJjaGlucHV0Lm9uKFwia2V5dXBcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcXVlcnkgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICAgICAgLy8gRmlsdGVyIHdoZW4gcXVlcnkgaXMgYXQgbGVhc3QgMyBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugc2hvdyBhbGwgcm93c1xuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA+PSBtaW5fcXVlcnlsZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgdGhlIHF1ZXJ5J3MgY2FzZSB1c2luZyAnaSdcbiAgICAgICAgICAgICAgICB2YXIgcmVndWxhcl9leHByZXNzaW9uID0gbmV3IFJlZ0V4cChxdWVyeSwgXCJpXCIpO1xuICAgICAgICAgICAgICAgICRlbF90YWJsZXRyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkZWxfdGFibGV0clxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgcmVndWxhciBleHByZXNzaW9uIG9uIGVhY2ggcm93J3MgdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHNob3cgd2hlbiB0aGVyZSBpcyBhIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVndWxhcl9leHByZXNzaW9uLnRlc3QoJCh0aGlzKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkZWxfdGFibGV0ci5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKiogQWp1c3QgdGhlIHBvc2l0aW9uIG9mIGRyb3Bkb3duIHdpdGggcmVzcGVjdCB0byB0YWJsZSAqL1xuICAgIGFkanVzdEFjdGlvbmRyb3Bkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzLmVsKS5vbihcInNob3cuYnMuZHJvcGRvd25cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMuZWwpLmNzcyhcIm92ZXJmbG93XCIsIFwiaW5oZXJpdFwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5lbCkub24oXCJoaWRlLmJzLmRyb3Bkb3duXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzLmVsKS5jc3MoXCJvdmVyZmxvd1wiLCBcImF1dG9cIik7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKiogVGVtcGxhdGUgZm9yIG5vIHdvcmtmbG93ICovXG4gICAgX3RlbXBsYXRlTm9Xb3JrZmxvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cIndmLW5vZGF0YVwiPiBZb3UgaGF2ZSBubyB3b3JrZmxvd3MuIDwvZGl2Pic7XG4gICAgfSxcblxuICAgIC8qKiBUZW1wbGF0ZSBmb3IgYWN0aW9ucyBidXR0b25zICovXG4gICAgX3RlbXBsYXRlQWN0aW9uQnV0dG9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBgPHVsIGNsYXNzPVwibWFuYWdlLXRhYmxlLWFjdGlvbnNcIj48bGk+PGlucHV0IGNsYXNzPVwic2VhcmNoLXdmIGZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcGxhY2Vob2xkZXI9XCJzZWFyY2ggZm9yIHdvcmtmbG93Li4uXCI+PC9saT48bGk+PGEgY2xhc3M9XCJhY3Rpb24tYnV0dG9uIGZhIGZhLXBsdXMgd2YtYWN0aW9uXCIgaWQ9XCJuZXctd29ya2Zsb3dcIiB0aXRsZT1cIkNyZWF0ZSBuZXcgd29ya2Zsb3dcIiBocmVmPVwiJHtcbiAgICAgICAgICAgIEdhbGF4eS5yb290XG4gICAgICAgIH13b3JrZmxvd3MvY3JlYXRlXCI+PC9hPjwvbGk+PGxpPjxhIGNsYXNzPVwiYWN0aW9uLWJ1dHRvbiBmYSBmYS11cGxvYWQgd2YtYWN0aW9uXCIgaWQ9XCJpbXBvcnQtd29ya2Zsb3dcIiB0aXRsZT1cIlVwbG9hZCBvciBpbXBvcnQgd29ya2Zsb3dcIiBocmVmPVwiJHtcbiAgICAgICAgICAgIEdhbGF4eS5yb290XG4gICAgICAgIH13b3JrZmxvd3MvaW1wb3J0X3dvcmtmbG93XCI+PC9hPjwvbGk+PC91bD5gO1xuICAgIH0sXG5cbiAgICAvKiogVGVtcGxhdGUgZm9yIHdvcmtmbG93IHRhYmxlICovXG4gICAgX3RlbXBsYXRlV29ya2Zsb3dUYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0YWJsZUh0bWwgPVxuICAgICAgICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlIGNvbG9yZWRcIj48dGhlYWQ+JyArXG4gICAgICAgICAgICAnPHRyIGNsYXNzPVwiaGVhZGVyXCI+JyArXG4gICAgICAgICAgICBcIjx0aD5OYW1lPC90aD5cIiArXG4gICAgICAgICAgICBcIjx0aD5UYWdzPC90aD5cIiArXG4gICAgICAgICAgICBcIjx0aD5Pd25lcjwvdGg+XCIgK1xuICAgICAgICAgICAgXCI8dGg+IyBvZiBTdGVwczwvdGg+XCIgK1xuICAgICAgICAgICAgXCI8dGg+UHVibGlzaGVkPC90aD5cIiArXG4gICAgICAgICAgICBcIjx0aD5TaG93IGluIHRvb2xzIHBhbmVsPC90aD5cIiArXG4gICAgICAgICAgICBcIjwvdHI+PC90aGVhZD5cIjtcbiAgICAgICAgcmV0dXJuIGAke1xuICAgICAgICAgICAgdGFibGVIdG1sXG4gICAgICAgIH08dGJvZHkgY2xhc3M9XCJ3b3JrZmxvdy1zZWFyY2ggXCI+PGRpdiBjbGFzcz1cImhpZGRlbl9kZXNjcmlwdGlvbl9sYXllclwiPjxwPkRyb3Agd29ya2Zsb3cgZmlsZXMgaGVyZSB0byBpbXBvcnQ8L3A+PC90Ym9keT48L3RhYmxlPjwvZGl2PmA7XG4gICAgfSxcblxuICAgIC8qKiBNYWluIHRlbXBsYXRlICovXG4gICAgX3RlbXBsYXRlSGVhZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicGFnZS1jb250YWluZXJcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidXNlci13b3JrZmxvd3Mgd2ZcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicmVzcG9uc2UtbWVzc2FnZVwiPjwvZGl2PicgK1xuICAgICAgICAgICAgXCI8aDI+XCIgK1xuICAgICAgICAgICAgX2woXCJZb3VyIHdvcmtmbG93c1wiKSArXG4gICAgICAgICAgICBcIjwvaDI+XCIgK1xuICAgICAgICAgICAgXCI8L2Rpdj5cIiArXG4gICAgICAgICAgICBcIjwvZGl2PlwiXG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbnZhciBJbXBvcnRXb3JrZmxvd1ZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudChcIjxkaXYvPlwiKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqIE9wZW4gcGFnZSB0byBpbXBvcnQgd29ya2Zsb3cgKi9cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICQuZ2V0SlNPTihgJHtHYWxheHkucm9vdH13b3JrZmxvdy91cGxvYWRfaW1wb3J0X3dvcmtmbG93YCwgb3B0aW9ucyA9PiB7XG4gICAgICAgICAgICBzZWxmLiRlbC5lbXB0eSgpLmFwcGVuZChzZWxmLl9tYWluVGVtcGxhdGUob3B0aW9ucykpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIFRlbXBsYXRlIGZvciB0aGUgaW1wb3J0IHdvcmtmbG93IHBhZ2UgKi9cbiAgICBfbWFpblRlbXBsYXRlOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz0ndG9vbEZvcm0nPjxkaXYgY2xhc3M9J3Rvb2xGb3JtVGl0bGUnPkltcG9ydCBHYWxheHkgd29ya2Zsb3c8L2Rpdj48ZGl2IGNsYXNzPSd0b29sRm9ybUJvZHknPjxmb3JtIG5hbWU9J2ltcG9ydF93b3JrZmxvdycgaWQ9J2ltcG9ydF93b3JrZmxvdycgYWN0aW9uPScke1xuICAgICAgICAgICAgR2FsYXh5LnJvb3RcbiAgICAgICAgfXdvcmtmbG93L3VwbG9hZF9pbXBvcnRfd29ya2Zsb3cnIGVuY3R5cGU9J211bHRpcGFydC9mb3JtLWRhdGEnIG1ldGhvZD0nUE9TVCc+PGRpdiBjbGFzcz0nZm9ybS1yb3cnPjxsYWJlbD5HYWxheHkgd29ya2Zsb3cgVVJMOjwvbGFiZWw+PGlucHV0IHR5cGU9J3RleHQnIG5hbWU9J3VybCcgY2xhc3M9J2lucHV0LXVybCcgdmFsdWU9JyR7XG4gICAgICAgICAgICBvcHRpb25zLnVybFxuICAgICAgICB9JyBzaXplPSc0MCc+PGRpdiBjbGFzcz0ndG9vbFBhcmFtSGVscCcgc3R5bGU9J2NsZWFyOiBib3RoOyc+SWYgdGhlIHdvcmtmbG93IGlzIGFjY2Vzc2libGUgdmlhIGEgVVJMLCBlbnRlciB0aGUgVVJMIGFib3ZlIGFuZCBjbGljayA8Yj5JbXBvcnQ8L2I+LjwvZGl2PjxkaXYgc3R5bGU9J2NsZWFyOiBib3RoJz48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSdmb3JtLXJvdyc+PGxhYmVsPkdhbGF4eSB3b3JrZmxvdyBmaWxlOjwvbGFiZWw+PGRpdiBjbGFzcz0nZm9ybS1yb3ctaW5wdXQnPjxpbnB1dCB0eXBlPSdmaWxlJyBuYW1lPSdmaWxlX2RhdGEnIGNsYXNzPSdpbnB1dC1maWxlJy8+PC9kaXY+PGRpdiBjbGFzcz0ndG9vbFBhcmFtSGVscCcgc3R5bGU9J2NsZWFyOiBib3RoOyc+SWYgdGhlIHdvcmtmbG93IGlzIGluIGEgZmlsZSBvbiB5b3VyIGNvbXB1dGVyLCBjaG9vc2UgaXQgYW5kIHRoZW4gY2xpY2sgPGI+SW1wb3J0PC9iPi48L2Rpdj48ZGl2IHN0eWxlPSdjbGVhcjogYm90aCc+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0nZm9ybS1yb3cnPjxpbnB1dCB0eXBlPSdzdWJtaXQnIGNsYXNzPSdwcmltYXJ5LWJ1dHRvbiB3Zi1pbXBvcnQnIG5hbWU9J2ltcG9ydF9idXR0b24nIHZhbHVlPSdJbXBvcnQnPjwvZGl2PjwvZm9ybT48aHIvPjxkaXYgY2xhc3M9J2Zvcm0tcm93Jz48bGFiZWw+SW1wb3J0IGEgR2FsYXh5IHdvcmtmbG93IGZyb20gbXlFeHBlcmltZW50OjwvbGFiZWw+PGRpdiBjbGFzcz0nZm9ybS1yb3ctaW5wdXQnPjxhIGhyZWY9JyR7XG4gICAgICAgICAgICBvcHRpb25zLm15ZXhwZXJpbWVudF90YXJnZXRfdXJsXG4gICAgICAgIH0nPiBWaXNpdCBteUV4cGVyaW1lbnQ8L2E+PC9kaXY+PGRpdiBjbGFzcz0ndG9vbFBhcmFtSGVscCcgc3R5bGU9J2NsZWFyOiBib3RoOyc+Q2xpY2sgdGhlIGxpbmsgYWJvdmUgdG8gdmlzaXQgbXlFeHBlcmltZW50IGFuZCBicm93c2UgZm9yIEdhbGF4eSB3b3JrZmxvd3MuPC9kaXY+PGRpdiBzdHlsZT0nY2xlYXI6IGJvdGgnPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PmA7XG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBWaWV3OiBXb3JrZmxvd0xpc3RWaWV3LFxuICAgIEltcG9ydFdvcmtmbG93VmlldzogSW1wb3J0V29ya2Zsb3dWaWV3XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGdhbGF4eS9zY3JpcHRzL212Yy93b3JrZmxvdy93b3JrZmxvdy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFDQTtBQVNBO0FBQ0E7QUEvSUE7QUFDQTtBQWlKQTtBQXpKQTtBQTBKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQTVMQTtBQUNBO0FBOExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQXZCQTtBQUNBO0FBeUJBO0FBQ0E7QUFDQTtBQUZBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///267\n");

/***/ }),
/* 268 */
/*!*******************************************************!*\
  !*** ./galaxy/scripts/mvc/workflow/workflow-model.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _baseMvc = __webpack_require__(/*! mvc/base-mvc */ 5);\n\nvar _baseMvc2 = _interopRequireDefault(_baseMvc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* global Backbone */\n// workflow model\n\nvar logNamespace = \"workflow\";\n//==============================================================================\n/** @class model for a single workflow.\n *  @name WorkflowItem\n *  @augments Backbone.Model\n */\nvar WorkflowItem = Backbone.Model.extend(_baseMvc2.default.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    urlRoot: Galaxy.root + \"api/workflows\",\n\n    toJSON: function toJSON() {\n        // need to overwrite this as endpoint expects the 'workflow' key in payload\n        return { workflow: this.attributes };\n    }\n});\n\n//==============================================================================\n/** @class collection for workflows.\n *  @name WorkflowCollection\n *  @augments Backbone.Collection\n */\nvar WorkflowCollection = Backbone.Collection.extend({\n    model: WorkflowItem,\n    url: Galaxy.root + \"api/workflows\"\n});\n\n//==============================================================================\n\nexports.default = {\n    WorkflowItem: WorkflowItem,\n    WorkflowCollection: WorkflowCollection\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy93b3JrZmxvdy93b3JrZmxvdy1tb2RlbC5qcz80NTllIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlTVZDIGZyb20gXCJtdmMvYmFzZS1tdmNcIjtcbi8qIGdsb2JhbCBCYWNrYm9uZSAqL1xuLy8gd29ya2Zsb3cgbW9kZWxcblxudmFyIGxvZ05hbWVzcGFjZSA9IFwid29ya2Zsb3dcIjtcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vKiogQGNsYXNzIG1vZGVsIGZvciBhIHNpbmdsZSB3b3JrZmxvdy5cbiAqICBAbmFtZSBXb3JrZmxvd0l0ZW1cbiAqICBAYXVnbWVudHMgQmFja2JvbmUuTW9kZWxcbiAqL1xudmFyIFdvcmtmbG93SXRlbSA9IEJhY2tib25lLk1vZGVsLmV4dGVuZChiYXNlTVZDLkxvZ2dhYmxlTWl4aW4pLmV4dGVuZCh7XG4gICAgX2xvZ05hbWVzcGFjZTogbG9nTmFtZXNwYWNlLFxuXG4gICAgdXJsUm9vdDogYCR7R2FsYXh5LnJvb3R9YXBpL3dvcmtmbG93c2AsXG5cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBuZWVkIHRvIG92ZXJ3cml0ZSB0aGlzIGFzIGVuZHBvaW50IGV4cGVjdHMgdGhlICd3b3JrZmxvdycga2V5IGluIHBheWxvYWRcbiAgICAgICAgcmV0dXJuIHsgd29ya2Zsb3c6IHRoaXMuYXR0cmlidXRlcyB9O1xuICAgIH1cbn0pO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLyoqIEBjbGFzcyBjb2xsZWN0aW9uIGZvciB3b3JrZmxvd3MuXG4gKiAgQG5hbWUgV29ya2Zsb3dDb2xsZWN0aW9uXG4gKiAgQGF1Z21lbnRzIEJhY2tib25lLkNvbGxlY3Rpb25cbiAqL1xudmFyIFdvcmtmbG93Q29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICBtb2RlbDogV29ya2Zsb3dJdGVtLFxuICAgIHVybDogYCR7R2FsYXh5LnJvb3R9YXBpL3dvcmtmbG93c2Bcbn0pO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgV29ya2Zsb3dJdGVtOiBXb3JrZmxvd0l0ZW0sXG4gICAgV29ya2Zsb3dDb2xsZWN0aW9uOiBXb3JrZmxvd0NvbGxlY3Rpb25cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL3dvcmtmbG93L3dvcmtmbG93LW1vZGVsLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQ0E7QUFVQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///268\n");

/***/ }),
/* 269 */
/*!*****************************************************!*\
  !*** ./galaxy/scripts/components/HistoryImport.vue ***!
  \*****************************************************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_bustCache_HistoryImport_vue__ = __webpack_require__(/*! !babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0&bustCache!./HistoryImport.vue */ 272);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_bustCache_HistoryImport_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_bustCache_HistoryImport_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_23742a28_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_HistoryImport_vue__ = __webpack_require__(/*! !../../../node_modules/vue-loader/lib/template-compiler/index?{\"id\":\"data-v-23742a28\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0&bustCache!./HistoryImport.vue */ 273);\nvar disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!../../../node_modules/vue-loader/lib/style-compiler/index?{\"vue\":true,\"id\":\"data-v-23742a28\",\"scoped\":false,\"hasInlineConfig\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0&bustCache!./HistoryImport.vue */ 270)\n}\nvar normalizeComponent = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/component-normalizer */ 48)\n/* script */\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_bustCache_HistoryImport_vue___default.a,\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_23742a28_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_bustCache_HistoryImport_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"galaxy/scripts/components/HistoryImport.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {  return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {  console.error(\"named exports are not supported in *.vue files.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-23742a28\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-23742a28\", Component.options)\n' + '  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vZ2FsYXh5L3NjcmlwdHMvY29tcG9uZW50cy9IaXN0b3J5SW1wb3J0LnZ1ZT81ZGU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjM3NDJhMjhcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCZidXN0Q2FjaGUhLi9IaXN0b3J5SW1wb3J0LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAmYnVzdENhY2hlIS4vSGlzdG9yeUltcG9ydC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTIzNzQyYTI4XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wJmJ1c3RDYWNoZSEuL0hpc3RvcnlJbXBvcnQudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImdhbGF4eS9zY3JpcHRzL2NvbXBvbmVudHMvSGlzdG9yeUltcG9ydC52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkgeyAgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHsgIGNvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTIzNzQyYTI4XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMjM3NDJhMjhcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4nICsgJyAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2dhbGF4eS9zY3JpcHRzL2NvbXBvbmVudHMvSGlzdG9yeUltcG9ydC52dWVcbi8vIG1vZHVsZSBpZCA9IDI2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///269\n");

/***/ }),
/* 270 */
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-style-loader!./node_modules/css-loader?sourceMap!./node_modules/vue-loader/lib/style-compiler?{"vue":true,"id":"data-v-23742a28","scoped":false,"hasInlineConfig":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./galaxy/scripts/components/HistoryImport.vue ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader?sourceMap!../../../node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-23742a28\",\"scoped\":false,\"hasInlineConfig\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./HistoryImport.vue */ 271);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(/*! ../../../node_modules/vue-style-loader/lib/addStylesClient.js */ 47)(\"7cbbda9e\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/css-loader/index.js?sourceMap!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-23742a28\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./HistoryImport.vue\", function() {\n     var newContent = require(\"!!../../../node_modules/css-loader/index.js?sourceMap!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-23742a28\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./HistoryImport.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vZ2FsYXh5L3NjcmlwdHMvY29tcG9uZW50cy9IaXN0b3J5SW1wb3J0LnZ1ZT85MjE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0yMzc0MmEyOFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wJmJ1c3RDYWNoZSEuL0hpc3RvcnlJbXBvcnQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI3Y2JiZGE5ZVwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0yMzc0MmEyOFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wJmJ1c3RDYWNoZSEuL0hpc3RvcnlJbXBvcnQudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTIzNzQyYTI4XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vSGlzdG9yeUltcG9ydC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMjM3NDJhMjhcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vZ2FsYXh5L3NjcmlwdHMvY29tcG9uZW50cy9IaXN0b3J5SW1wb3J0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///270\n");

/***/ }),
/* 271 */
/*!*****************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader?sourceMap!./node_modules/vue-loader/lib/style-compiler?{"vue":true,"id":"data-v-23742a28","scoped":false,"hasInlineConfig":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./galaxy/scripts/components/HistoryImport.vue ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ 46)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.ui-message {\\n    display: block;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/home/jeffthiessen/Documents/Git/galaxy_dev/galaxy/client/galaxy/scripts/components/galaxy/scripts/components/HistoryImport.vue?3a2ed384\"],\"names\":[],\"mappings\":\";AA2DA;IACA,eAAA;CACA\",\"file\":\"HistoryImport.vue\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"ui-portlet-limited\\\">\\n        <div class=\\\"portlet-header\\\">\\n            <div class=\\\"portlet-title\\\">\\n                <i class=\\\"portlet-title-icon fa fa-upload\\\"></i>\\n                <span class=\\\"portlet-title-text\\\"><b>Import a History from an Archive</b></span>\\n            </div>\\n        </div>\\n        <div class=\\\"portlet-content\\\">\\n            <div v-if=\\\"errormessage\\\" class=\\\"ui-message alert alert-danger\\\">\\n                {{ errormessage }}\\n            </div>\\n            <div class=\\\"portlet-body\\\">\\n                <form ref=\\\"form\\\">\\n                    <div class=\\\"ui-form-element\\\">\\n                        <div class=\\\"ui-form-title\\\">Archived History URL</div>\\n                        <input class=\\\"ui-input\\\" type=\\\"text\\\" name=\\\"archive_source\\\"/>\\n                    </div>\\n                    <div class=\\\"ui-form-element\\\">\\n                        <div class=\\\"ui-form-title\\\">Archived History file</div>\\n                        <input type=\\\"file\\\" name=\\\"archive_file\\\"/>\\n                    </div>\\n                </form>\\n            </div>\\n            <div class=\\\"portlet-buttons\\\">\\n                <input class=\\\"btn btn-primary\\\" type=\\\"button\\\" value=\\\"Import History\\\" @click=\\\"submit\\\"/>\\n            </div>\\n        </div>\\n    </div>\\n</template>\\n<script>\\nexport default {\\n    data() {\\n        return {\\n            errormessage: null\\n        }\\n    },\\n    methods: {\\n        submit: function() {\\n            $.ajax({\\n                url: `${Galaxy.root}api/histories`,\\n                data: new FormData(this.$refs.form),\\n                cache: false,\\n                contentType: false,\\n                processData: false,\\n                method: \\\"POST\\\"\\n            })\\n            .done(response => {\\n                window.location = `${Galaxy.root}histories/list?message=${response.message}&status=success`\\n            })\\n            .fail(response => {\\n                let message = response.responseJSON && response.responseJSON.err_msg;\\n                this.errormessage = message || \\\"Import failed for unkown reason.\\\";\\n            });\\n        }\\n    }\\n};\\n</script>\\n<style>\\n.ui-message {\\n    display: block;\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vZ2FsYXh5L3NjcmlwdHMvY29tcG9uZW50cy9IaXN0b3J5SW1wb3J0LnZ1ZT83NDdjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4udWktbWVzc2FnZSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvamVmZnRoaWVzc2VuL0RvY3VtZW50cy9HaXQvZ2FsYXh5X2Rldi9nYWxheHkvY2xpZW50L2dhbGF4eS9zY3JpcHRzL2NvbXBvbmVudHMvZ2FsYXh5L3NjcmlwdHMvY29tcG9uZW50cy9IaXN0b3J5SW1wb3J0LnZ1ZT8zYTJlZDM4NFwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBMkRBO0lBQ0EsZUFBQTtDQUNBXCIsXCJmaWxlXCI6XCJIaXN0b3J5SW1wb3J0LnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxkaXYgY2xhc3M9XFxcInVpLXBvcnRsZXQtbGltaXRlZFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwb3J0bGV0LWhlYWRlclxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9ydGxldC10aXRsZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJwb3J0bGV0LXRpdGxlLWljb24gZmEgZmEtdXBsb2FkXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJwb3J0bGV0LXRpdGxlLXRleHRcXFwiPjxiPkltcG9ydCBhIEhpc3RvcnkgZnJvbSBhbiBBcmNoaXZlPC9iPjwvc3Bhbj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9ydGxldC1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IHYtaWY9XFxcImVycm9ybWVzc2FnZVxcXCIgY2xhc3M9XFxcInVpLW1lc3NhZ2UgYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIj5cXG4gICAgICAgICAgICAgICAge3sgZXJyb3JtZXNzYWdlIH19XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9ydGxldC1ib2R5XFxcIj5cXG4gICAgICAgICAgICAgICAgPGZvcm0gcmVmPVxcXCJmb3JtXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWZvcm0tZWxlbWVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidWktZm9ybS10aXRsZVxcXCI+QXJjaGl2ZWQgSGlzdG9yeSBVUkw8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcInVpLWlucHV0XFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJhcmNoaXZlX3NvdXJjZVxcXCIvPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1aS1mb3JtLWVsZW1lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWZvcm0tdGl0bGVcXFwiPkFyY2hpdmVkIEhpc3RvcnkgZmlsZTwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBuYW1lPVxcXCJhcmNoaXZlX2ZpbGVcXFwiLz5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9ydGxldC1idXR0b25zXFxcIj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgdmFsdWU9XFxcIkltcG9ydCBIaXN0b3J5XFxcIiBAY2xpY2s9XFxcInN1Ym1pdFxcXCIvPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuPHNjcmlwdD5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIGRhdGEoKSB7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIGVycm9ybWVzc2FnZTogbnVsbFxcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICBtZXRob2RzOiB7XFxuICAgICAgICBzdWJtaXQ6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICAgICQuYWpheCh7XFxuICAgICAgICAgICAgICAgIHVybDogYCR7R2FsYXh5LnJvb3R9YXBpL2hpc3Rvcmllc2AsXFxuICAgICAgICAgICAgICAgIGRhdGE6IG5ldyBGb3JtRGF0YSh0aGlzLiRyZWZzLmZvcm0pLFxcbiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFxcXCJQT1NUXFxcIlxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgLmRvbmUocmVzcG9uc2UgPT4ge1xcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgJHtHYWxheHkucm9vdH1oaXN0b3JpZXMvbGlzdD9tZXNzYWdlPSR7cmVzcG9uc2UubWVzc2FnZX0mc3RhdHVzPXN1Y2Nlc3NgXFxuICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAuZmFpbChyZXNwb25zZSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gcmVzcG9uc2UucmVzcG9uc2VKU09OICYmIHJlc3BvbnNlLnJlc3BvbnNlSlNPTi5lcnJfbXNnO1xcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ybWVzc2FnZSA9IG1lc3NhZ2UgfHwgXFxcIkltcG9ydCBmYWlsZWQgZm9yIHVua293biByZWFzb24uXFxcIjtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn07XFxuPC9zY3JpcHQ+XFxuPHN0eWxlPlxcbi51aS1tZXNzYWdlIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcbjwvc3R5bGU+XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTIzNzQyYTI4XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wJmJ1c3RDYWNoZSEuL2dhbGF4eS9zY3JpcHRzL2NvbXBvbmVudHMvSGlzdG9yeUltcG9ydC52dWVcbi8vIG1vZHVsZSBpZCA9IDI3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///271\n");

/***/ }),
/* 272 */
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0&bustCache!./galaxy/scripts/components/HistoryImport.vue ***!
  \*************************************************************************************************************************************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexports.default = {\n    data: function data() {\n        return {\n            errormessage: null\n        };\n    },\n\n    methods: {\n        submit: function submit() {\n            var _this = this;\n\n            $.ajax({\n                url: Galaxy.root + \"api/histories\",\n                data: new FormData(this.$refs.form),\n                cache: false,\n                contentType: false,\n                processData: false,\n                method: \"POST\"\n            }).done(function (response) {\n                window.location = Galaxy.root + \"histories/list?message=\" + response.message + \"&status=success\";\n            }).fail(function (response) {\n                var message = response.responseJSON && response.responseJSON.err_msg;\n                _this.errormessage = message || \"Import failed for unkown reason.\";\n            });\n        }\n    }\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL0hpc3RvcnlJbXBvcnQudnVlPzMwYzYiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJ1aS1wb3J0bGV0LWxpbWl0ZWRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInBvcnRsZXQtaGVhZGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9ydGxldC10aXRsZVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwicG9ydGxldC10aXRsZS1pY29uIGZhIGZhLXVwbG9hZFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBvcnRsZXQtdGl0bGUtdGV4dFwiPjxiPkltcG9ydCBhIEhpc3RvcnkgZnJvbSBhbiBBcmNoaXZlPC9iPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInBvcnRsZXQtY29udGVudFwiPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwiZXJyb3JtZXNzYWdlXCIgY2xhc3M9XCJ1aS1tZXNzYWdlIGFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICAgICAgICAgICAgICAgIHt7IGVycm9ybWVzc2FnZSB9fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9ydGxldC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgPGZvcm0gcmVmPVwiZm9ybVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidWktZm9ybS1lbGVtZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidWktZm9ybS10aXRsZVwiPkFyY2hpdmVkIEhpc3RvcnkgVVJMPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJ1aS1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImFyY2hpdmVfc291cmNlXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVpLWZvcm0tZWxlbWVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVpLWZvcm0tdGl0bGVcIj5BcmNoaXZlZCBIaXN0b3J5IGZpbGU8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIG5hbWU9XCJhcmNoaXZlX2ZpbGVcIi8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvcnRsZXQtYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIkltcG9ydCBIaXN0b3J5XCIgQGNsaWNrPVwic3VibWl0XCIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9ybWVzc2FnZTogbnVsbFxuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHN1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogYCR7R2FsYXh5LnJvb3R9YXBpL2hpc3Rvcmllc2AsXG4gICAgICAgICAgICAgICAgZGF0YTogbmV3IEZvcm1EYXRhKHRoaXMuJHJlZnMuZm9ybSksXG4gICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5kb25lKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgJHtHYWxheHkucm9vdH1oaXN0b3JpZXMvbGlzdD9tZXNzYWdlPSR7cmVzcG9uc2UubWVzc2FnZX0mc3RhdHVzPXN1Y2Nlc3NgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gcmVzcG9uc2UucmVzcG9uc2VKU09OICYmIHJlc3BvbnNlLnJlc3BvbnNlSlNPTi5lcnJfbXNnO1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JtZXNzYWdlID0gbWVzc2FnZSB8fCBcIkltcG9ydCBmYWlsZWQgZm9yIHVua293biByZWFzb24uXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG48L3NjcmlwdD5cbjxzdHlsZT5cbi51aS1tZXNzYWdlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbn1cbjwvc3R5bGU+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEhpc3RvcnlJbXBvcnQudnVlPzNhMmVkMzg0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0JBO0FBQ0E7O0FBQ0E7O0FBRUE7QUFEQTtBQUdBO0FBQ0E7OztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFTQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFqQkE7QUFOQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///272\n");

/***/ }),
/* 273 */
/*!****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-23742a28","hasScoped":false,"buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0&bustCache!./galaxy/scripts/components/HistoryImport.vue ***!
  \****************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"ui-portlet-limited\" }, [\n    _vm._m(0),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"portlet-content\" }, [\n      _vm.errormessage\n        ? _c(\"div\", { staticClass: \"ui-message alert alert-danger\" }, [\n            _vm._v(\"\\n            \" + _vm._s(_vm.errormessage) + \"\\n        \")\n          ])\n        : _vm._e(),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"portlet-body\" }, [\n        _c(\"form\", { ref: \"form\" }, [_vm._m(1), _vm._v(\" \"), _vm._m(2)])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"portlet-buttons\" }, [\n        _c(\"input\", {\n          staticClass: \"btn btn-primary\",\n          attrs: { type: \"button\", value: \"Import History\" },\n          on: { click: _vm.submit }\n        })\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"portlet-header\" }, [\n      _c(\"div\", { staticClass: \"portlet-title\" }, [\n        _c(\"i\", { staticClass: \"portlet-title-icon fa fa-upload\" }),\n        _vm._v(\" \"),\n        _c(\"span\", { staticClass: \"portlet-title-text\" }, [\n          _c(\"b\", [_vm._v(\"Import a History from an Archive\")])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"ui-form-element\" }, [\n      _c(\"div\", { staticClass: \"ui-form-title\" }, [\n        _vm._v(\"Archived History URL\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"input\", {\n        staticClass: \"ui-input\",\n        attrs: { type: \"text\", name: \"archive_source\" }\n      })\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"ui-form-element\" }, [\n      _c(\"div\", { staticClass: \"ui-form-title\" }, [\n        _vm._v(\"Archived History file\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"input\", { attrs: { type: \"file\", name: \"archive_file\" } })\n    ])\n  }\n]\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-23742a28\", esExports)\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vZ2FsYXh5L3NjcmlwdHMvY29tcG9uZW50cy9IaXN0b3J5SW1wb3J0LnZ1ZT9iOGRkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ1aS1wb3J0bGV0LWxpbWl0ZWRcIiB9LCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJwb3J0bGV0LWNvbnRlbnRcIiB9LCBbXG4gICAgICBfdm0uZXJyb3JtZXNzYWdlXG4gICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ1aS1tZXNzYWdlIGFsZXJ0IGFsZXJ0LWRhbmdlclwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgICAgIFwiICsgX3ZtLl9zKF92bS5lcnJvcm1lc3NhZ2UpICsgXCJcXG4gICAgICAgIFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJwb3J0bGV0LWJvZHlcIiB9LCBbXG4gICAgICAgIF9jKFwiZm9ybVwiLCB7IHJlZjogXCJmb3JtXCIgfSwgW192bS5fbSgxKSwgX3ZtLl92KFwiIFwiKSwgX3ZtLl9tKDIpXSlcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicG9ydGxldC1idXR0b25zXCIgfSwgW1xuICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLXByaW1hcnlcIixcbiAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiLCB2YWx1ZTogXCJJbXBvcnQgSGlzdG9yeVwiIH0sXG4gICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zdWJtaXQgfVxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJwb3J0bGV0LWhlYWRlclwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicG9ydGxldC10aXRsZVwiIH0sIFtcbiAgICAgICAgX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwicG9ydGxldC10aXRsZS1pY29uIGZhIGZhLXVwbG9hZFwiIH0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJwb3J0bGV0LXRpdGxlLXRleHRcIiB9LCBbXG4gICAgICAgICAgX2MoXCJiXCIsIFtfdm0uX3YoXCJJbXBvcnQgYSBIaXN0b3J5IGZyb20gYW4gQXJjaGl2ZVwiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKVxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidWktZm9ybS1lbGVtZW50XCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ1aS1mb3JtLXRpdGxlXCIgfSwgW1xuICAgICAgICBfdm0uX3YoXCJBcmNoaXZlZCBIaXN0b3J5IFVSTFwiKVxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcInVpLWlucHV0XCIsXG4gICAgICAgIGF0dHJzOiB7IHR5cGU6IFwidGV4dFwiLCBuYW1lOiBcImFyY2hpdmVfc291cmNlXCIgfVxuICAgICAgfSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInVpLWZvcm0tZWxlbWVudFwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidWktZm9ybS10aXRsZVwiIH0sIFtcbiAgICAgICAgX3ZtLl92KFwiQXJjaGl2ZWQgSGlzdG9yeSBmaWxlXCIpXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImlucHV0XCIsIHsgYXR0cnM6IHsgdHlwZTogXCJmaWxlXCIsIG5hbWU6IFwiYXJjaGl2ZV9maWxlXCIgfSB9KVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxudmFyIGVzRXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cbmV4cG9ydCBkZWZhdWx0IGVzRXhwb3J0c1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi0yMzc0MmEyOFwiLCBlc0V4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTIzNzQyYTI4XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wJmJ1c3RDYWNoZSEuL2dhbGF4eS9zY3JpcHRzL2NvbXBvbmVudHMvSGlzdG9yeUltcG9ydC52dWVcbi8vIG1vZHVsZSBpZCA9IDI3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///273\n");

/***/ }),
/* 274 */
/*!****************************************************!*\
  !*** ./galaxy/scripts/mvc/history/history-list.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($, Backbone) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _gridView = __webpack_require__(/*! mvc/grid/grid-view */ 19);\n\nvar _gridView2 = _interopRequireDefault(_gridView);\n\nvar _historyModel = __webpack_require__(/*! mvc/history/history-model */ 62);\n\nvar _historyModel2 = _interopRequireDefault(_historyModel);\n\nvar _copyDialog = __webpack_require__(/*! mvc/history/copy-dialog */ 113);\n\nvar _copyDialog2 = _interopRequireDefault(_copyDialog);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** This class renders the grid list. */\nvar HistoryGridView = _gridView2.default.extend({\n    _showCopyDialog: function _showCopyDialog(id) {\n        var history = new _historyModel2.default.History({ id: id });\n        history.fetch().fail(function () {\n            alert(\"History could not be fetched. Please contact an administrator\");\n        }).done(function () {\n            (0, _copyDialog2.default)(history, {}).done(function () {\n                if (window.parent && window.parent.Galaxy && window.parent.Galaxy.currHistoryPanel) {\n                    window.parent.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n                window.location.reload(true);\n            });\n        });\n    },\n    /** Add an operation to the items menu */\n    _add_operation: function _add_operation(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (operation.label == \"Copy\") {\n            operation.onclick = function (id) {\n                self._showCopyDialog(id);\n            };\n        }\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function func(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    }\n});\n\nvar View = Backbone.View.extend({\n    title: (0, _localization2.default)(\"Histories\"),\n    initialize: function initialize(options) {\n        var self = this;\n        this.setElement($(\"<div/>\"));\n        this.model = new Backbone.Model();\n        _utils2.default.get({\n            url: Galaxy.root + \"history/\" + options.action_id + \"?\" + $.param(Galaxy.params),\n            success: function success(response) {\n                response.dict_format = true;\n                self.model.set(response);\n                self.render();\n            }\n        });\n    },\n\n    render: function render() {\n        var grid = new HistoryGridView(this.model.attributes);\n        this.$el.empty().append(grid.$el);\n    }\n});\n\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! libs/backbone */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2dhbGF4eS9zY3JpcHRzL212Yy9oaXN0b3J5L2hpc3RvcnktbGlzdC5qcz8xYWFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfbCBmcm9tIFwidXRpbHMvbG9jYWxpemF0aW9uXCI7XG4vKiogVGhpcyBjbGFzcyByZW5kZXJzIHRoZSBncmlkIGxpc3QuICovXG5pbXBvcnQgVXRpbHMgZnJvbSBcInV0aWxzL3V0aWxzXCI7XG5pbXBvcnQgR3JpZFZpZXcgZnJvbSBcIm12Yy9ncmlkL2dyaWQtdmlld1wiO1xuaW1wb3J0IEhpc3RvcnlNb2RlbCBmcm9tIFwibXZjL2hpc3RvcnkvaGlzdG9yeS1tb2RlbFwiO1xuaW1wb3J0IGhpc3RvcnlDb3B5RGlhbG9nIGZyb20gXCJtdmMvaGlzdG9yeS9jb3B5LWRpYWxvZ1wiO1xuXG52YXIgSGlzdG9yeUdyaWRWaWV3ID0gR3JpZFZpZXcuZXh0ZW5kKHtcbiAgICBfc2hvd0NvcHlEaWFsb2c6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHZhciBoaXN0b3J5ID0gbmV3IEhpc3RvcnlNb2RlbC5IaXN0b3J5KHsgaWQ6IGlkIH0pO1xuICAgICAgICBoaXN0b3J5XG4gICAgICAgICAgICAuZmV0Y2goKVxuICAgICAgICAgICAgLmZhaWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiSGlzdG9yeSBjb3VsZCBub3QgYmUgZmV0Y2hlZC4gUGxlYXNlIGNvbnRhY3QgYW4gYWRtaW5pc3RyYXRvclwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZG9uZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaGlzdG9yeUNvcHlEaWFsb2coaGlzdG9yeSwge30pLmRvbmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LnBhcmVudCAmJiB3aW5kb3cucGFyZW50LkdhbGF4eSAmJiB3aW5kb3cucGFyZW50LkdhbGF4eS5jdXJySGlzdG9yeVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LkdhbGF4eS5jdXJySGlzdG9yeVBhbmVsLmxvYWRDdXJyZW50SGlzdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8qKiBBZGQgYW4gb3BlcmF0aW9uIHRvIHRoZSBpdGVtcyBtZW51ICovXG4gICAgX2FkZF9vcGVyYXRpb246IGZ1bmN0aW9uKHBvcHVwLCBvcGVyYXRpb24sIGl0ZW0pIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSBpdGVtLm9wZXJhdGlvbl9jb25maWdbb3BlcmF0aW9uLmxhYmVsXTtcbiAgICAgICAgaWYgKG9wZXJhdGlvbi5sYWJlbCA9PSBcIkNvcHlcIikge1xuICAgICAgICAgICAgb3BlcmF0aW9uLm9uY2xpY2sgPSBpZCA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2hvd0NvcHlEaWFsb2coaWQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3MuYWxsb3dlZCAmJiBvcGVyYXRpb24uYWxsb3dfcG9wdXApIHtcbiAgICAgICAgICAgIHBvcHVwLmFkZEl0ZW0oe1xuICAgICAgICAgICAgICAgIGh0bWw6IG9wZXJhdGlvbi5sYWJlbCxcbiAgICAgICAgICAgICAgICBocmVmOiBzZXR0aW5ncy51cmxfYXJncyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHNldHRpbmdzLnRhcmdldCxcbiAgICAgICAgICAgICAgICBjb25maXJtYXRpb25fdGV4dDogb3BlcmF0aW9uLmNvbmZpcm0sXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9ICQoZS50YXJnZXQpLmh0bWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wZXJhdGlvbi5vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb24ub25jbGljayhpdGVtLmVuY29kZV9pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmV4ZWN1dGUodGhpcy5maW5kSXRlbUJ5SHRtbChsYWJlbCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxudmFyIFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgdGl0bGU6IF9sKFwiSGlzdG9yaWVzXCIpLFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoJChcIjxkaXYvPlwiKSk7XG4gICAgICAgIHRoaXMubW9kZWwgPSBuZXcgQmFja2JvbmUuTW9kZWwoKTtcbiAgICAgICAgVXRpbHMuZ2V0KHtcbiAgICAgICAgICAgIHVybDogYCR7R2FsYXh5LnJvb3R9aGlzdG9yeS8ke29wdGlvbnMuYWN0aW9uX2lkfT8keyQucGFyYW0oR2FsYXh5LnBhcmFtcyl9YCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZGljdF9mb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNlbGYubW9kZWwuc2V0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBzZWxmLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGdyaWQgPSBuZXcgSGlzdG9yeUdyaWRWaWV3KHRoaXMubW9kZWwuYXR0cmlidXRlcyk7XG4gICAgICAgIHRoaXMuJGVsLmVtcHR5KCkuYXBwZW5kKGdyaWQuJGVsKTtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIFZpZXc6IFZpZXdcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ2FsYXh5L3NjcmlwdHMvbXZjL2hpc3RvcnkvaGlzdG9yeS1saXN0LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUxBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWJBO0FBZUE7QUFDQTtBQTNDQTtBQUNBO0FBNkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQkE7QUFDQTtBQXFCQTtBQUNBO0FBREE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///274\n");

/***/ }),
/* 275 */
/*!*****************************************************!*\
  !*** ./galaxy/scripts/mvc/dataset/dataset-error.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Dataset edit attributes view */\nvar View = Backbone.View.extend({\n    initialize: function initialize() {\n        this.setElement(\"<div/>\");\n        this.model = new Backbone.Model({\n            dataset_id: Galaxy.params.dataset_id\n        });\n        this.render();\n    },\n\n    // Fetch data for the selected dataset and\n    render: function render() {\n        var data_url = Galaxy.root + \"api/datasets/\" + this.model.get(\"dataset_id\");\n\n        var self = this;\n\n        _utils2.default.get({\n            url: data_url,\n            success: function success(dataset) {\n                var job_url = Galaxy.root + \"api/jobs/\" + dataset.creating_job + \"?full=True\";\n                _utils2.default.get({\n                    url: job_url,\n                    success: function success(job) {\n                        var job_url = Galaxy.root + \"api/jobs/\" + dataset.creating_job + \"?full=True\";\n                        self.render_error_page(self, dataset, job);\n                    },\n                    error: function error(response) {\n                        var error_response = {\n                            status: \"error\",\n                            message: \"Error occured while loading the job.\",\n                            persistent: true,\n                            cls: \"errormessage\"\n                        };\n                        self.display_message(error_response, self.$(\".response-message\"));\n                    }\n                });\n            },\n            error: function error(response) {\n                var error_response = {\n                    status: \"error\",\n                    message: \"Error occured while loading the dataset.\",\n                    persistent: true,\n                    cls: \"errormessage\"\n                };\n                self.display_message(error_response, self.$(\".response-message\"));\n            }\n        });\n    },\n\n    /** Render the view */\n    render_error_page: function render_error_page(self, dataset, job) {\n        self.$el.empty().append(self._templateHeader());\n        self.$el.append(\"<h2>Dataset Error</h2>\");\n        self.$el.append(\"<p>An error occured while running the tool <b>\" + job.tool_id + \"</b>.</p>\");\n        self.$el.append(\"<p>Tool execution generated the following messages:</p>\");\n        self.$el.append(\"<pre class=\\\"code\\\">\" + job.stderr + \"</pre>\");\n        self.$el.append(\"<h2>Report This Error</pre>\");\n        self.$el.append(\"<p>Usually the local Galaxy administrators regularly review errors that occur on the server. However, if you would like to provide additional information (such as what you were trying to do when the error occurred) and a contact e-mail address, we will be better able to investigate your problem and get back to you.</p>\");\n        self.$el.append(self._getBugFormTemplate(dataset, job));\n    },\n\n    /** Display actions messages */\n    display_message: function display_message(response, $el, doNotClear, safe) {\n        if (!safe) {\n            if (doNotClear) {\n                $el.append(new _uiMisc2.default.Message(response).$el);\n            } else {\n                $el.empty().html(new _uiMisc2.default.Message(response).$el);\n            }\n        } else {\n            if (doNotClear) {\n                $el.append(new _uiMisc2.default.UnescapedMessage(response).$el);\n            } else {\n                $el.empty().html(new _uiMisc2.default.UnescapedMessage(response).$el);\n            }\n        }\n    },\n\n    /** Main template */\n    _templateHeader: function _templateHeader() {\n        return '<div class=\"page-container edit-attr\">' + '<div class=\"response-message\"></div>' + \"</div>\";\n    },\n\n    /** Convert tab template */\n    _getBugFormTemplate: function _getBugFormTemplate(dataset, job) {\n        var self = this;\n        var inputs = [{\n            help: (0, _localization2.default)(\"Your email address\"),\n            options: [],\n            type: \"text\",\n            name: \"email\",\n            label: \"Your email\",\n            value: Galaxy.user.get(\"email\")\n        }, {\n            help: (0, _localization2.default)(\"Any additional comments you can provide regarding what you were doing at the time of the bug.\"),\n            options: [],\n            type: \"text\",\n            area: true,\n            name: \"message\",\n            label: \"Message\"\n        }];\n\n        // TODO\n        /*\n        if (false && response.any_public) {\n            inputs.push({\n                name: \"public_consent\",\n                label: \"Public Disclosure Consent\",\n                help:\n                    \"This Galaxy is configured to report to one or more error reporting backends that public to the world. By selecting 'yes', you acknowledge that this bug report will be made public.\",\n                value: String(Boolean(false)),\n                options: [],\n                type: \"boolean\"\n            });\n        }\n        */\n\n        var form = new _formView2.default({\n            title: (0, _localization2.default)(\"Error Report\"),\n            inputs: inputs,\n            buttons: {\n                save: new _uiMisc2.default.Button({\n                    icon: \"fa-bug\",\n                    title: (0, _localization2.default)(\"Report\"),\n                    cls: \"ui-button btn btn-primary\",\n                    floating: \"clear\",\n                    onclick: function onclick() {\n                        var form_data = form.data.create();\n                        var url = Galaxy.root + \"api/jobs/\" + job.id + \"/error\";\n                        form_data.dataset_id = dataset.id;\n                        self.submit(form_data, url);\n                    }\n                })\n            }\n        });\n        return form.$el;\n    },\n\n    /** Make ajax request */\n    submit: function submit(form_data, url) {\n        var self = this;\n        // Some required metadata\n        $.ajax({\n            type: \"POST\",\n            url: url,\n            data: form_data,\n            success: function success(response) {\n                // Clear out the div\n                self.$el.empty().append(self._templateHeader());\n                // And display the messages.\n                response.messages.forEach(function (message) {\n                    self.display_message({\n                        status: message[1],\n                        message: message[0],\n                        persistent: true\n                    }, self.$(\".response-message\"), true, true);\n                });\n            },\n            error: function error(response) {\n                var error_response = {\n                    status: \"error\",\n                    message: \"Error occured while saving. Please fill all the required fields and try again.\",\n                    persistent: true,\n                    cls: \"errormessage\"\n                };\n                self.display_message(error_response, self.$(\".response-message\"));\n            }\n        });\n    }\n});\n\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///275\n");

/***/ }),
/* 276 */
/*!***************************************************************!*\
  !*** ./galaxy/scripts/mvc/dataset/dataset-edit-attributes.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _localization = __webpack_require__(/*! utils/localization */ 3);\n\nvar _localization2 = _interopRequireDefault(_localization);\n\nvar _utils = __webpack_require__(/*! utils/utils */ 4);\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _uiTabs = __webpack_require__(/*! mvc/ui/ui-tabs */ 43);\n\nvar _uiTabs2 = _interopRequireDefault(_uiTabs);\n\nvar _uiMisc = __webpack_require__(/*! mvc/ui/ui-misc */ 6);\n\nvar _uiMisc2 = _interopRequireDefault(_uiMisc);\n\nvar _formView = __webpack_require__(/*! mvc/form/form-view */ 11);\n\nvar _formView2 = _interopRequireDefault(_formView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Dataset edit attributes view */\nvar View = Backbone.View.extend({\n    initialize: function initialize() {\n        this.setElement(\"<div/>\");\n        this.model = new Backbone.Model({\n            dataset_id: Galaxy.params.dataset_id\n        });\n        this.message = new _uiMisc2.default.Message({ persistent: true });\n        this.tabs = this._createTabs();\n        this.$el.append($(\"<h4/>\").append(\"Edit dataset attributes\")).append(this.message.$el).append(\"<p/>\").append(this.tabs.$el).hide();\n        this.render();\n    },\n\n    /** fetch data for the selected dataset and build forms */\n    render: function render() {\n        var self = this;\n        $.ajax({\n            url: Galaxy.root + \"dataset/get_edit?dataset_id=\" + self.model.get(\"dataset_id\"),\n            success: function success(response) {\n                !self.initial_message && self.message.update(response);\n                self.initial_message = true;\n                _.each(self.forms, function (form, key) {\n                    form.model.set(\"inputs\", response[key + \"_inputs\"]);\n                    form.model.set(\"hide_operations\", response[key + \"_disable\"]);\n                    form.render();\n                });\n                self.$el.show();\n            },\n            error: function error(response) {\n                var err_msg = response.responseJSON && response.responseJSON.err_msg;\n                self.message.update({\n                    status: \"danger\",\n                    message: err_msg || \"Error occured while loading the dataset.\"\n                });\n            }\n        });\n    },\n\n    /** submit data to backend to update attributes */\n    _submit: function _submit(operation, form) {\n        var self = this;\n        var data = form.data.create();\n        data.dataset_id = this.model.get(\"dataset_id\");\n        data.operation = operation;\n        $.ajax({\n            type: \"PUT\",\n            url: Galaxy.root + \"dataset/set_edit\",\n            data: data,\n            success: function success(response) {\n                self.message.update(response);\n                self.render();\n                self._reloadHistory();\n            },\n            error: function error(response) {\n                var err_msg = response.responseJSON && response.responseJSON.err_msg;\n                self.message.update({\n                    status: \"danger\",\n                    message: err_msg || \"Error occured while editing the dataset attributes.\"\n                });\n            }\n        });\n    },\n\n    /** create tabs for different dataset attribute categories*/\n    _createTabs: function _createTabs() {\n        this.forms = {\n            attribute: this._getAttribute(),\n            conversion: this._getConversion(),\n            datatype: this._getDatatype(),\n            permission: this._getPermission()\n        };\n        var tabs = new _uiTabs2.default.View();\n        tabs.add({\n            id: \"attribute\",\n            title: (0, _localization2.default)(\"Attributes\"),\n            icon: \"fa fa-bars\",\n            tooltip: (0, _localization2.default)(\"Edit dataset attributes\"),\n            $el: this.forms.attribute.$el\n        });\n        tabs.add({\n            id: \"convert\",\n            title: (0, _localization2.default)(\"Convert\"),\n            icon: \"fa-gear\",\n            tooltip: (0, _localization2.default)(\"Convert to new format\"),\n            $el: this.forms.conversion.$el\n        });\n        tabs.add({\n            id: \"datatype\",\n            title: (0, _localization2.default)(\"Datatypes\"),\n            icon: \"fa-database\",\n            tooltip: (0, _localization2.default)(\"Change data type\"),\n            $el: this.forms.datatype.$el\n        });\n        tabs.add({\n            id: \"permissions\",\n            title: (0, _localization2.default)(\"Permissions\"),\n            icon: \"fa-user\",\n            tooltip: (0, _localization2.default)(\"Permissions\"),\n            $el: this.forms.permission.$el\n        });\n        return tabs;\n    },\n\n    /** edit main attributes form */\n    _getAttribute: function _getAttribute() {\n        var self = this;\n        var form = new _formView2.default({\n            title: (0, _localization2.default)(\"Edit attributes\"),\n            operations: {\n                submit_attributes: new _uiMisc2.default.ButtonIcon({\n                    tooltip: (0, _localization2.default)(\"Save attributes of the dataset.\"),\n                    icon: \"fa-floppy-o\",\n                    title: (0, _localization2.default)(\"Save\"),\n                    onclick: function onclick() {\n                        self._submit(\"attributes\", form);\n                    }\n                }),\n                submit_autodetect: new _uiMisc2.default.ButtonIcon({\n                    tooltip: \"This will inspect the dataset and attempt to correct the values of fields if they are not accurate.\",\n                    icon: \"fa-undo\",\n                    title: \"Auto-detect\",\n                    onclick: function onclick() {\n                        self._submit(\"autodetect\", form);\n                    }\n                })\n            }\n        });\n        return form;\n    },\n\n    /** datatype conversion form */\n    _getConversion: function _getConversion() {\n        var self = this;\n        var form = new _formView2.default({\n            title: (0, _localization2.default)(\"Convert to new format\"),\n            operations: {\n                submit_conversion: new _uiMisc2.default.ButtonIcon({\n                    tooltip: (0, _localization2.default)(\"Convert the datatype to a new format.\"),\n                    title: (0, _localization2.default)(\"Convert datatype\"),\n                    icon: \"fa-exchange\",\n                    onclick: function onclick() {\n                        self._submit(\"conversion\", form);\n                    }\n                })\n            }\n        });\n        return form;\n    },\n\n    /** change datatype form */\n    _getDatatype: function _getDatatype() {\n        var self = this;\n        var form = new _formView2.default({\n            title: (0, _localization2.default)(\"Change datatype\"),\n            operations: {\n                submit_datatype: new _uiMisc2.default.ButtonIcon({\n                    tooltip: (0, _localization2.default)(\"Change the datatype to a new type.\"),\n                    title: (0, _localization2.default)(\"Change datatype\"),\n                    icon: \"fa-exchange\",\n                    onclick: function onclick() {\n                        self._submit(\"datatype\", form);\n                    }\n                })\n            }\n        });\n        return form;\n    },\n\n    /** dataset permissions form */\n    _getPermission: function _getPermission() {\n        var self = this;\n        var form = new _formView2.default({\n            title: (0, _localization2.default)(\"Manage dataset permissions\"),\n            operations: {\n                submit_permission: new _uiMisc2.default.ButtonIcon({\n                    tooltip: (0, _localization2.default)(\"Save permissions.\"),\n                    title: (0, _localization2.default)(\"Save permissions\"),\n                    icon: \"fa-floppy-o \",\n                    onclick: function onclick() {\n                        self._submit(\"permission\", form);\n                    }\n                })\n            }\n        });\n        return form;\n    },\n\n    /** reload Galaxy's history after updating dataset's attributes */\n    _reloadHistory: function _reloadHistory() {\n        if (window.Galaxy) {\n            window.Galaxy.currHistoryPanel.loadCurrentHistory();\n        }\n    }\n});\n\nexports.default = {\n    View: View\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! libs/backbone */ 2), __webpack_require__(/*! jquery */ 0), __webpack_require__(/*! underscore */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///276\n");

/***/ })
],[239]);
//# sourceMappingURL=analysis.js.map